[
    {
        "content": "<p>Pertaining to <code>Archive/Imo/Imo1962Q1.lean</code>, which is one of the broken files in <a href=\"#narrow/stream/287929-mathlib4/topic/request.20for.20help.20with.20failure.20in.20Archive/near/399646876\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/request.20for.20help.20with.20failure.20in.20Archive/near/399646876</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Digits</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.whnf</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">15</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span> <span class=\"c1\">-- succceds, but with more than 24600 lines of whnf traces</span>\n</code></pre></div>\n<p>The sheer size of that trace output makes me suspicious.</p>",
        "id": 399757322,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698855428
    },
    {
        "content": "<p>lots of stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.whnf</span><span class=\"o\">]</span> <span class=\"k\">match</span> <span class=\"n\">decEq</span> <span class=\"o\">((</span><span class=\"mi\">14</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span>\n        <span class=\"n\">List.hasDecEq</span>\n          <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span>\n              <span class=\"n\">Acc.rec</span>\n                <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x₁</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"bp\">↦</span>\n                  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">↦</span>\n                      <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span>\n                          <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                            <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                          <span class=\"n\">a</span> <span class=\"k\">with</span>\n                        <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">[]</span>\n                        <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n                        <span class=\"n\">a_1</span><span class=\"o\">)</span>\n                    <span class=\"n\">x₁</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n                <span class=\"n\">_</span><span class=\"o\">)</span>\n            <span class=\"o\">((</span><span class=\"mi\">14</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n          <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">habs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"n\">_</span>\n      <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">nabs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">nab</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 399757674,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698855564
    },
    {
        "content": "<p>Anyone have any ideas about how I might drill down on this further?</p>",
        "id": 399757719,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698855588
    },
    {
        "content": "<p>Or maybe this isn't actually suspicious, and I'm barking up the wrong tree?</p>",
        "id": 399757737,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698855600
    },
    {
        "content": "<p>it's because <code>norm_num</code> doesn't implement <code>Nat.digits</code></p>",
        "id": 399758971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698856065
    },
    {
        "content": "<p>Do we need to implement a <code>norm_digits</code> tactic?</p>",
        "id": 399765793,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698858509
    },
    {
        "content": "<p><code>norm_num</code> currently can't output a value of list type.</p>",
        "id": 399765821,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698858525
    },
    {
        "content": "<blockquote>\n<p>it's because norm_num doesn't implement Nat.digits</p>\n</blockquote>\n<p>right, so this is falling back on <code>simp</code> where the mathlib3 version had some tailored <code>norm_num</code> logic.<br>\nI guess all that extra <code>whnf</code> form work has to do with <code>simp</code> trying to figure out what steps to take?</p>",
        "id": 399766510,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698858832
    },
    {
        "content": "<p><code>simp</code> called <code>decide</code> and <code>decide</code> is doing the whnf work</p>",
        "id": 399766619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698858860
    },
    {
        "content": "<p>I'm currently working on a new tactic that will be much more general than <code>norm_num</code> and can potentially evaluate <code>Nat.digits</code> without a custom implementation, but I can also look into a smaller addition to <code>norm_num</code> to allow it to do reductions in other types</p>",
        "id": 399767260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698859158
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8100\">#8100</a> implements <code>norm_num</code> framework support for inductive types</p>",
        "id": 399801576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698871907
    },
    {
        "content": "<p>At a high level, I'm still confused about why we need to write special tactic code to reduce functions like <code>Nat.digits</code>. The function is already defined in a perfectly computational way, and <code>#eval</code> has no trouble with it.</p>",
        "id": 399959552,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698937420
    },
    {
        "content": "<p>(I think) it's because kernel reduction is currently inefficient, but IIUC, this is one of the things Joachim is going to be working on.</p>",
        "id": 399972394,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698940398
    },
    {
        "content": "<p>Hopefully, but maybe not at first, so don’t hold your breath.</p>",
        "id": 399972645,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698940471
    },
    {
        "content": "<p>Simpler setup, with no <code>norm_num</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Digits</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.whnf</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">25</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- more than 50,000 lines of Meta.whnf traces</span>\n</code></pre></div>",
        "id": 399994280,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698947464
    },
    {
        "content": "<p>It's only 13ms in total though, no? (with just <code>trace.profiler</code>, which adds its own overhead)</p>",
        "id": 399994578,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698947593
    },
    {
        "content": "<p>sure, it's fast without the trace</p>",
        "id": 399994608,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698947616
    },
    {
        "content": "<p>but it hits the maxRecDepth quickly if I make the inputs larger</p>",
        "id": 399994630,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698947628
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Digits</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">1256</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit)</span>\n</code></pre></div>",
        "id": 399994755,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698947683
    },
    {
        "content": "<p>Maybe some reduction function in the Lean core is supposed to be tail recursive, but isn't?</p>",
        "id": 399994863,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698947733
    },
    {
        "content": "<p>Am I being unreasonable for expecting to be able to normalize <code>Nat.digits 10 1256</code> by <code>rfl</code>? It seems like it should not be a very big computation.</p>",
        "id": 399996843,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698948463
    },
    {
        "content": "<p>I have a guess that it's due to how the <code>decreasing_by</code> is being compiled for the kernel -- doesn't this mean that it computes <code>Nat.digits 10</code> for all numbers up to <code>1256</code> and then selects this last value?</p>",
        "id": 400000231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698949954
    },
    {
        "content": "<p>Here's another implementation that recurses on a gas variable instead, and it can handle big numbers fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nat.digitsAux</span> <span class=\"o\">(</span><span class=\"n\">gas</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">gas</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">gas'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">b</span>\n    <span class=\"k\">if</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">Nat.digitsAux</span> <span class=\"n\">gas'</span> <span class=\"n\">b</span> <span class=\"n\">q</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.digits</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.digitsAux</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">n</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">1234567890</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 400000295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698949974
    },
    {
        "content": "<p>You can remove the <code>gas</code> variable and Lean can still see it terminates, but then that <code>example</code> hits max recursion depth.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nat.digitsAux</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">b</span>\n  <span class=\"k\">if</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">Nat.digitsAux</span> <span class=\"n\">b</span> <span class=\"n\">q</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nat.digits</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.replicate</span> <span class=\"n\">n</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.digitsAux</span> <span class=\"n\">b</span> <span class=\"n\">n</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"mi\">1234567890</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- maximum recursion depth has been reached</span>\n</code></pre></div>",
        "id": 400000589,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698950083
    },
    {
        "content": "<p>With gas, it’s using structural recursion, without it’s using well-founded recursion. I thought the latter doesn't even reduce definionally, but it seems the kernel can somehow evaluate it, but obviously much slower. I wonder (blind guess) if the kernel is explicitly constructing the <code>Acc</code> predicate provided by <code>WellFoundedRelation</code> for the argument number?</p>",
        "id": 400022472,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698960893
    },
    {
        "content": "<p>I thought this was an interesting topic, so I investigated a bit more deeply and I made a video explaining what I learned: <a href=\"https://www.youtube.com/watch?v=FOt-GsiNJmU\">https://www.youtube.com/watch?v=FOt-GsiNJmU</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"FOt-GsiNJmU\" href=\"https://www.youtube.com/watch?v=FOt-GsiNJmU\"><img src=\"https://uploads.zulipusercontent.net/2ff43a8d3c140fbd943fb008c78e6331a4cbb94b/68747470733a2f2f692e7974696d672e636f6d2f76692f464f742d4773694e4a6d552f64656661756c742e6a7067\"></a></div>",
        "id": 409029444,
        "sender_full_name": "David Renshaw",
        "timestamp": 1703026491
    },
    {
        "content": "<p>Thanks for the really interesting video David! It led to a very naive question for me - why does the kernel have to expand and typecheck the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.lt_wfRel#doc\">docs#Nat.lt_wfRel</a> out at all?</p>",
        "id": 409037637,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703031116
    },
    {
        "content": "<p>My understanding is:</p>\n<ol>\n<li><code>WellFounded</code> is only used to kick things off. Once the recursion gets going, it's all in terms of <code>Acc</code></li>\n<li>If the recursion is at value <code>n</code> and needs to step to value <code>m</code>, then it has an <code>Acc n</code> and needs to use it to get an <code>Acc m</code>. I think it's that conversion where all the proof reduction happens.</li>\n<li>This all seems kind of silly, because we have an ambient <code>WellFounded</code> floating around in the typeclass system, so it feels like we ought to be able to ask it directly for an <code>Acc m</code>, rather than reducing our existing proof term.</li>\n</ol>",
        "id": 409038267,
        "sender_full_name": "David Renshaw",
        "timestamp": 1703031382
    },
    {
        "content": "<p>I want to emphasize that my understanding is only hazy, and I love it if someone who's more of an expert on these things could explain better.</p>",
        "id": 409038360,
        "sender_full_name": "David Renshaw",
        "timestamp": 1703031426
    },
    {
        "content": "<p>To take a step back, though: <code>Acc.rec</code> is where the recursion is coming from. It accepts an argument of type <code>Acc</code>, and for its reduction rule to fire, that argument must be normalized to a form <code>Acc.intro ...</code>.</p>",
        "id": 409040002,
        "sender_full_name": "David Renshaw",
        "timestamp": 1703032028
    },
    {
        "content": "<p>It seems to me that the fact that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WellFoundedRelation#doc\">docs#WellFoundedRelation</a> is in <code>Sort</code> is the cause of all this</p>",
        "id": 409040094,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703032070
    },
    {
        "content": "<p>(which of course it must be, but if the relation is unbundled as in just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WellFounded#doc\">docs#WellFounded</a> it should just be able to take the correct steps - theoretically?)</p>",
        "id": 409040227,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703032112
    },
    {
        "content": "<p>I see, so I just realised - <code>Acc.rec</code> wants a normalised form to be able to actually reduce the recursor. But as a one field <code>Prop</code> structure, there is no actual need for this in reality; but I'm guessing this requires special kernel support, either for <code>Acc</code> specifically or one-constructor <code>Prop</code> structures more generally.</p>",
        "id": 409045489,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703034035
    },
    {
        "content": "<p>I think some thought has been put into trying to maximise performance: using a very <a href=\"https://gist.github.com/ericrbg/89dfcda9f715d5cccb62917f07d13f48\">rudimentary testing setup</a>, replacing the definition of <code>Nat.lt_wfRel.wf</code> with alternative options, there's no clear-cut way to make this faster (and indeed, as expected, using <code>sorry</code> to force Lean to not bother reducing the <code>Acc</code> constructors makes <code>#reduce</code> blazing fast)</p>",
        "id": 409046500,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703034240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/whnf.20blowup.20in.20Nat.2Edigits/near/409038267\">said</a>:</p>\n<blockquote>\n<p>This all seems kind of silly, because we have an ambient <code>WellFounded</code> floating around in the typeclass system, so it feels like we ought to be able to ask it directly for an <code>Acc m</code>, rather than reducing our existing proof term.</p>\n</blockquote>\n<p>The kernel is really myopic, it is in the middle of running <code>whnf</code> on a term and has no idea what is in your context, much less what the typeclass system thinks</p>",
        "id": 409085973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703046271
    },
    {
        "content": "<p>I have thought about having the kernel use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Acc.inv#doc\">docs#Acc.inv</a> to produce a proof of <code>Acc r m</code> from <code>Acc r n</code>, which would avoid ever having to reduce proofs, but the proofs get larger at every step. If there was some way of mixing a <code>WellFounded</code> fact in there somehow then the proof could be constant size across the recursion, which sounds nice</p>",
        "id": 409086268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703046400
    },
    {
        "content": "<p>the downside of all these schemes is that they lead to undecidable typechecking, because if you are in an inconsistent context then you can still use <code>whnf</code> on false <code>Acc</code> proofs of termination and loop forever. However this is already a problem with the current system (it's unavoidable as long as <code>Acc</code> is a large-eliminating Prop) which is currently addressed by making <code>Acc</code> only reduce if the proof term reduces to a constructor, so it would get stuck if it was a false hypothesis or axiom. There is a discussion about this in <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a></p>",
        "id": 409086804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703046648
    },
    {
        "content": "<p>Oh, so this is why I couldn't get rfl to work on small terms with my sorried version even when reduce did</p>",
        "id": 409099414,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703053409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/whnf.20blowup.20in.20Nat.2Edigits/near/409086268\">said</a>:</p>\n<blockquote>\n<p>I have thought about having the kernel use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Acc.inv#doc\">docs#Acc.inv</a> to produce a proof of <code>Acc r m</code> from <code>Acc r n</code>, which would avoid ever having to reduce proofs, but the proofs get larger at every step. If there was some way of mixing a <code>WellFounded</code> fact in there somehow then the proof could be constant size across the recursion, which sounds nice</p>\n</blockquote>\n<p>Isn't this what happens already? The proof of nat wf uses it</p>",
        "id": 409099633,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703053492
    },
    {
        "content": "<p>not sure what you mean</p>",
        "id": 409100102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703053651
    },
    {
        "content": "<p>what I'm saying is that when you have a term <code>wf : WellFounded R</code> which is opaquified in some way, then we want reducing <code>wf.apply n : Acc R n</code> to a constructor to result in <code>Acc.intro n fun y h =&gt; wf.apply y</code> rather than some more complicated (but definitionally equal because of proof irrelevance) term in place of <code>wf.apply y</code></p>",
        "id": 409101026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703053924
    },
    {
        "content": "<p>Note that we can't really do this for <code>Acc R n</code> terms directly, because we don't have any easy way to describe <code>Acc R y</code> except in terms of the original <code>h : Acc R n</code> term, so you end up with a more complicated term which uses <code>h</code> on the RHS. Compare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">wf.apply</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Acc.intro</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">wf.apply</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">Acc.intro</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Acc.inv</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 409101525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703054144
    },
    {
        "content": "<p>(imagine these are rewrite rules from left to right applied lazily by <code>whnf</code>)</p>",
        "id": 409101638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703054181
    },
    {
        "content": "<p>Both of these methods are IMO better than the current approach of unfolding <code>h</code> (which is a proof), exposing lots of implementation details and usually getting stuck on an axiom eventually anyway</p>",
        "id": 409101811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703054250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> I really liked the video, it is very well produced and you explained things well. I was also very interested to see your lean4lean modification for visualizing kernel reduction, I have wanted that for a very long time. You should make it available somewhere!</p>",
        "id": 409117989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703060219
    },
    {
        "content": "<p>This seems to have no effect with the rudimentary testing setup linked above, although to my eyes it does seem that it should be far faster to do this. It'd be nice to have David's modification to see the proof terms! I also realised that some of the examples I sent in this file yesterday don't seem to reduce, but for example <code>h_UC</code> uses no axioms so should not be blocked!</p>",
        "id": 409132198,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703065750
    },
    {
        "content": "<p>I'm not sure what you are saying you tried</p>",
        "id": 409132424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703065835
    },
    {
        "content": "<p>what I described is a change to the kernel reduction algorithm</p>",
        "id": 409132456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703065845
    },
    {
        "content": "<p>I just tried inlining the such a definition, which should have a similar enough effect?</p>",
        "id": 409133075,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703066013
    },
    {
        "content": "<p>Or does stuff get unfolded still</p>",
        "id": 409133112,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703066020
    },
    {
        "content": "<p>which definition?</p>",
        "id": 409133159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066029
    },
    {
        "content": "<p>the kernel will unfold definitions when needed, so generally that won't make any difference</p>",
        "id": 409133376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066066
    },
    {
        "content": "<p>My file just contains various different proofs of <code>∀ (a : ℕ), Acc Nat.lt a</code> to try and understand a bit, so if my understanding wasn't flawed then setting this to <code>Acc.intro n fun y _ =&gt; wf.apply y</code> shouldn't be too bad; but now I guess that if you don't have this as a rewrite rule within the kernel then after one layer of peeling you're straight back to the original issue</p>",
        "id": 409133710,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703066137
    },
    {
        "content": "<p>exactly</p>",
        "id": 409133778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066152
    },
    {
        "content": "<p>Normally reduction will proceed by first reducing the Acc proof to <code>Acc.intro</code> of something, then stepping the <code>Acc.rec</code> function once, then reducing the user function <code>f</code> until evaluation reaches uses of the IH, and then repeat</p>",
        "id": 409134461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066284
    },
    {
        "content": "<p>and the question is whether it is possible to adjust the first step so that the amount of computation needed is minimal and the terms don't grow unnecessarily</p>",
        "id": 409134700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066336
    },
    {
        "content": "<p>I understand that type-theoretically it's bad to have the kernel have even more undecidable type-checking, but is this actually a problem in practice? Practically all that will happen is that we get timeouts during <code>rfl</code>, which we already do in cases where we really would like these statements to reduce anyways, so it seems we're no better off avoiding the issue</p>",
        "id": 409134820,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703066360
    },
    {
        "content": "<p>I tend to agree with that</p>",
        "id": 409134934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066384
    },
    {
        "content": "<p>especially since \"even more undecidable\" is not particularly interesting to type theorists</p>",
        "id": 409135098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066408
    },
    {
        "content": "<p>the practical upshot would be that WF definitions compute by <code>rfl</code> just as well as structural recursions, which sounds like a very useful property</p>",
        "id": 409135326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066452
    },
    {
        "content": "<p>Note that when I wrote <code>lean4lean</code> I made it structurally terminating by just indiscriminately turning every non-structural recursion into a recursion with 1000 iterations and I could check mathlib just fine</p>",
        "id": 409136725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066711
    },
    {
        "content": "<p>So apparently mathlib does not depend on deep recursion in reduction</p>",
        "id": 409136904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066748
    },
    {
        "content": "<p>That probably isn't always the case, I'm sure if we had more coq style proofs by reflection we might need to increase the limit in some places</p>",
        "id": 409137094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1703066777
    },
    {
        "content": "<p>I mean considering how slow this recursion is at the moment (and in Lean3 wasn't it just stuck indiscriminately?) it's not at all surprising to me that Mathlib doesn't seem to use it</p>",
        "id": 409137820,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703066914
    }
]