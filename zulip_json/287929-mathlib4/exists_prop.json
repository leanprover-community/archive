[
    {
        "content": "<p>Now that <code>∃ a ∈ s, p a</code> means <code>∃ a, a ∈ s ∧ p a</code> instead of <code>∃ a (ha : a ∈ s), p a</code>, I wonder: Is it possible to have both the convenience of independent types and keep the parallel with <code>forall</code>?</p>\n<p>In <code>forall</code> land, we have that <code>∀ h : p, q</code> is the same as <code>p → q</code>. So back to <code>exists</code> land, we could <em>define</em> <code>p ∧ q</code> as <code>∃ h : p, q</code>. Constructing/destructing an <code>and</code> would be done the same way, but this time <code>∃ a, a ∈ s ∧ p a</code> is the same as <code>∃ a (ha : a ∈ s), p a</code>, so there's no choice to be made between the old and new spelling!</p>",
        "id": 353907069,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682692711
    },
    {
        "content": "<p>The drawbacks I see with this approach are</p>\n<ul>\n<li>It might lead to leakage, especially because <code>and</code> is such a common construct.</li>\n<li>I don't know how to get<code>h.1</code> and <code>h.2</code> working on <code>h : p ∧ q</code>. But hopefully a syntax/dot projection expert will.</li>\n</ul>",
        "id": 353907788,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682692803
    },
    {
        "content": "<p>A key difference here is you can't write <code>Nat ∧ True</code> but you can write <code>∃ n : Nat, True</code></p>",
        "id": 353910330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682693067
    },
    {
        "content": "<p>So this is more than just merging dependent and non-dependent cases</p>",
        "id": 353910553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682693097
    },
    {
        "content": "<p>Sure, but you can bake such a restriction in the definition/notation, just as <code>ite</code> is a special case of <code>dite</code>.</p>",
        "id": 353911422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682693196
    },
    {
        "content": "<p>But the reason you can't use <code>.1</code> and <code>.2</code> on <code>exists</code> but can on <code>and</code> is the fact that the formers arguments lives in Prop</p>",
        "id": 353919947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682694123
    },
    {
        "content": "<p>Sure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">new_and</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">new_and.left</span> <span class=\"o\">:</span> <span class=\"n\">new_and</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩,</span> <span class=\"n\">hp</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">new_and.right</span> <span class=\"o\">:</span> <span class=\"n\">new_and</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩,</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 353921153,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682694257
    },
    {
        "content": "<p>Now the question is how can you hack the <code>.1</code>/<code>.2</code> notation to work where it shouldn't.</p>",
        "id": 353921552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682694303
    },
    {
        "content": "<p>I also think this is only justifiable if we did the same thing to <code>prod</code> and <code>sigma</code></p>",
        "id": 353922354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682694377
    },
    {
        "content": "<p><code>prod</code> and <code>sigma</code> don't happen to stand in the middle of a Lean 3 vs 4 notation war, though.</p>",
        "id": 353922931,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682694444
    },
    {
        "content": "<p>What are the advantages of defining <code>p ∧ q</code> as <code>∃ h : p, q</code>? Is the disadvantage of the current situation only that it breaks some proofs during mathport?</p>",
        "id": 353936388,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1682695910
    },
    {
        "content": "<p>FYI <code>.1</code> and <code>.2</code> notation works on exists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">_x</span><span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 353946902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682697032
    },
    {
        "content": "<p>(this was actually a source of unsoundness at one point, since it worked regardless of whether the first thing is a Prop. Now it checks that the projection is legal)</p>",
        "id": 353947523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682697105
    },
    {
        "content": "<p>There's an easier \"fix\" to the current problem than the one that Yael is suggesting, and that's to have mathport output <code>∃ a, ∃ (ha : a ∈ s), p a</code> instead of <code>∃ a (ha : a ∈ s), p a</code></p>",
        "id": 353948433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682697206
    },
    {
        "content": "<p>Is there a zulip thread anywhere that discusses why the semantics of <code>∃ a (ha : a ∈ s), p a</code> was changed in the first place?</p>",
        "id": 353948776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682697247
    },
    {
        "content": "<p>What is the difference between those options?</p>",
        "id": 353949179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682697296
    },
    {
        "content": "<p>they should be handled the same</p>",
        "id": 353949265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682697304
    },
    {
        "content": "<p><code>∃ a (ha : a ∈ s), p a</code> means <code>∃ a, a ∈ s ∧ p a</code> in Lean 4</p>",
        "id": 353949553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682697334
    },
    {
        "content": "<p>Maybe this is just mathlib?</p>",
        "id": 353950536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682697435
    },
    {
        "content": "<p>Ah, it's just <code>∃ a ∈ s, p a</code></p>",
        "id": 353951278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682697513
    },
    {
        "content": "<p>The precise claim is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 353952168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682697609
    },
    {
        "content": "<p>I don't think there was a specific discussion about this, but it was a long requested feature, and mathlib has simp lemmas to rewrite this, and <code>use</code> rewrites to the exists-and form, so when the opportunity to actually do something about it came up we did</p>",
        "id": 353954110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682697821
    },
    {
        "content": "<p>Arguably it would have made the port easier not to do it until after we were done, but I guess it's only a minor annoyance</p>",
        "id": 353962128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682698773
    },
    {
        "content": "<p>Relatedly, is it deliberate that <code>∃ a (ha : a ∈ s), p a</code> notation is no longer legal?</p>",
        "id": 353962235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682698790
    },
    {
        "content": "<p>No, it is an unfortunate side effect of the fact that binder predicates are not supported by the syntax defined in core. You can get the multiple binder syntax using <code>\\exists\\0</code></p>",
        "id": 353963332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682698932
    },
    {
        "content": "<p>actually, I guess your example isn't even about binder predicates. Yes binders in lean 4 are way overcomplicated and it made my life miserable when generating them in mathport</p>",
        "id": 353963731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682698985
    }
]