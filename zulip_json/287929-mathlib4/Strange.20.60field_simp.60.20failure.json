[
    {
        "content": "<p>One of the students in my formalization class found the following curious behavior of <code>field_simp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"c1\">-- comment out this line...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Commenting out the <code>Test</code> class line makes the example work just fine. Also, replacing <code>Mul</code> with <code>Add</code> in the definition of <code>Test</code> also fixes the issue. I spent a few minutes trying to minimize the example, but couldn't find a smaller example.</p>",
        "id": 397010324,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697509040
    },
    {
        "content": "<p>Adam, I am assuming that you are working in a project that depends on Mathlib, right?</p>\n<p><em>Within Mathlib</em>, adding <code>variable {F}/variable {F : Type _}</code> switches the behaviour: <code>Test</code> confuses <del><code>ring</code></del><code>field_simp</code>, omitting it makes it work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--class Test (M : Type) extends Mul M -- uncomment this line...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>However, <code>variable {F : Type*}</code> seems to work fine regardless of the presence of <code>Test</code>.</p>",
        "id": 397041184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697525978
    },
    {
        "content": "<p>on the first example, with <code>set_option trace.Tactic.field_simp true</code> I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsLeftRegular</span> <span class=\"n\">z</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsRightRegular</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsLeftRegular</span> <span class=\"n\">z</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsRightRegular</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsLeftRegular</span> <span class=\"n\">z</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsRightRegular</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsLeftRegular</span> <span class=\"n\">z</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsRightRegular</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsLeftRegular</span> <span class=\"n\">z</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsRightRegular</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsLeftRegular</span> <span class=\"n\">z</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">IsRightRegular</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then when I comment out the <code>class</code> command I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n    <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n    <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">discharge</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 397088574,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697542334
    },
    {
        "content": "<p>Ah, the problem is that <code>F</code> is an auto-implicit (as Damiano also discovered).</p>",
        "id": 397094977,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697544625
    },
    {
        "content": "<p>This works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 397095035,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697544657
    },
    {
        "content": "<p>Ok, yes, I agree that auto implicit had something to do with it in the original example, but I still have no idea why the following doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"c1\">-- comment out this line...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>but the following works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 397102386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547204
    },
    {
        "content": "<p>Aha! This works as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"c1\">-- comment out this line...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 397102645,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547294
    },
    {
        "content": "<p>So it actually looks like the issue has to do with universes somehow!</p>",
        "id": 397102782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547340
    },
    {
        "content": "<p>With <code>{F : Type _}</code>, the universe of <code>F</code> is a metavariable</p>",
        "id": 397102882,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697547366
    },
    {
        "content": "<p>with <code>{F : Type*}</code>, the universe is explicitly bound</p>",
        "id": 397102915,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697547381
    },
    {
        "content": "<p>I understand, but why does adding <code>class Test ...</code> change the behavior?</p>",
        "id": 397102967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547400
    },
    {
        "content": "<p>In the <code>{F : Type _}</code> case.</p>",
        "id": 397103000,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547413
    },
    {
        "content": "<p>Rule of thumb: left of the colon, always use <code>Type*</code> or <code>Type u</code>, never <code>Type _</code>.</p>",
        "id": 397103006,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697547416
    },
    {
        "content": "<p>I'm not looking for rules of thumb. I want to understand what's actually going on.</p>",
        "id": 397103104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547464
    },
    {
        "content": "<p>Do you have just <code>(M : Type)</code> there?</p>",
        "id": 397103312,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697547533
    },
    {
        "content": "<p>Yeah. Changing it to the evil <code>Type _</code> fixes it :-)</p>",
        "id": 397103357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697547559
    },
    {
        "content": "<p>Sounds like it is bailing after failing to unify the first universe pair it finds</p>",
        "id": 397103380,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697547569
    },
    {
        "content": "<p>yeah, my working principle is that if metavariables are showing up in my goal view, then all bets are off</p>",
        "id": 397103382,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697547570
    },
    {
        "content": "<p>yeah exactly. that's another mystery</p>",
        "id": 397103397,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547574
    },
    {
        "content": "<p>Ah, the old \"<code>field_simp</code> refused to clear denominators\"</p>",
        "id": 397103673,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697547660
    },
    {
        "content": "<p>Oh that's been pointed out before?</p>",
        "id": 397103755,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547685
    },
    {
        "content": "<p>In my experience, that is the number one type of failure. I still have an open PR that helps with this and other things</p>",
        "id": 397104038,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697547764
    },
    {
        "content": "<p>But I got pulled away</p>",
        "id": 397104070,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697547773
    },
    {
        "content": "<p>Oh, that's precisely what's happening.... field simp will not clear the <code>z * (1 - z)</code> denominators, but it clears <code>z</code> and <code>(1-z)</code>.</p>",
        "id": 397104349,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547846
    },
    {
        "content": "<p>Funny fact: if you replace <code>example</code> with <code>lemma</code>, it works. But it fails with <code>def</code>.</p>",
        "id": 397104351,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697547846
    },
    {
        "content": "<p>Oh my</p>",
        "id": 397104377,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697547856
    },
    {
        "content": "<p>Ok, now I'm even more confused.</p>",
        "id": 397104387,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547859
    },
    {
        "content": "<p>Just to clarify, I know very well when to use explicit universes <code>Type u</code> and/or <code>Type*</code>. This came up when one of the students in my class was playing around with some code I wrote during class. I think such issues really don't look good for newcomers :-/</p>",
        "id": 397104683,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697547959
    },
    {
        "content": "<p>Is this the thing about <code>lemma</code> forcing elaboration of the expected type?</p>",
        "id": 397104805,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697547984
    },
    {
        "content": "<p>Or has that vanished since lean3?</p>",
        "id": 397104864,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697548005
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Failure.20of.20TC.20search.20in.20.60simp.60.20with.20.60etaExperiment.60.2E/near/356781639\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Failure.20of.20TC.20search.20in.20.60simp.60.20with.20.60etaExperiment.60.2E/near/356781639</a></p>",
        "id": 397105239,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697548134
    },
    {
        "content": "<p>Lean really wants <code>Group F</code> in the failure case</p>",
        "id": 397107456,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697548809
    },
    {
        "content": "<p>Actually in both cases</p>",
        "id": 397107615,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697548867
    },
    {
        "content": "<p>yeah I think the trace that David posted above is quite telling.</p>",
        "id": 397107825,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697548927
    },
    {
        "content": "<p>FWIW, here's a slightly smaller example to play with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"c1\">-- comment out this line...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 397107959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697548976
    },
    {
        "content": "<p>Moving the <code>1 + </code> to the other side of the LHS of the equality makes the example work again <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 397108085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697549030
    },
    {
        "content": "<p>It wants <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=div_eq_iff#doc\">docs#div_eq_iff</a></p>",
        "id": 397108566,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697549174
    },
    {
        "content": "<p>It gets that in both cases. But it cannot discharge <code>z * (1 -z) ≠ 0</code> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_ne_zero#doc\">docs#mul_ne_zero</a></p>",
        "id": 397109035,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697549327
    },
    {
        "content": "<p>It looks like it has trouble with <code>Mul F</code></p>",
        "id": 397109091,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697549345
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Tactic.field_simp</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">discharge</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">sub_self</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n        <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n      <span class=\"k\">with</span>\n        <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">tsub_eq_zero_of_le</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n        <span class=\"n\">CanonicallyOrderedAddCommMonoid</span> <span class=\"n\">F</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">CharTwo.sub_eq_add</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n        <span class=\"n\">CharP</span> <span class=\"n\">F</span> <span class=\"mi\">2</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Ordinal.enum_le_enum</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n        <span class=\"bp\">¬?</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Ordinal.enum</span> <span class=\"bp\">?</span><span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">o'</span> <span class=\"bp\">?</span><span class=\"n\">ho'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ordinal.enum</span> <span class=\"bp\">?</span><span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">o</span> <span class=\"bp\">?</span><span class=\"n\">ho</span><span class=\"o\">)</span>\n      <span class=\"k\">with</span>\n        <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">mul_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n        <span class=\"n\">Mul</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 397109489,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697549473
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul</span> <span class=\"n\">F</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Mul</span> <span class=\"n\">F</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulOneClass.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulZeroClass.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Distrib.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyOrderedCommSemiring.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Test.toMul</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Test.toMul</span> <span class=\"n\">to</span> <span class=\"n\">Mul</span> <span class=\"n\">F</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul</span> <span class=\"n\">F</span> <span class=\"bp\">≟</span> <span class=\"n\">Mul</span> <span class=\"bp\">?</span><span class=\"n\">m.5577</span>\n</code></pre></div>",
        "id": 397110154,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697549670
    },
    {
        "content": "<p>A <code>have  : Mul F := inferInstance</code> is totally fine though. And it isn't any secret timeout</p>",
        "id": 397112854,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697550470
    },
    {
        "content": "<p>Perhaps there is something about how the discharger is written</p>",
        "id": 397113011,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697550510
    },
    {
        "content": "<p>No it most likely due to something with universe unification</p>",
        "id": 397117315,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697551701
    },
    {
        "content": "<p>Here's a fully minimal example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"c1\">-- comment out this line...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n</code></pre></div>",
        "id": 397122769,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697553347
    },
    {
        "content": "<p><code>simp</code> doesn't close it either</p>",
        "id": 397124098,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697553718
    },
    {
        "content": "<p>Sure, but I wouldn't expect it to.</p>",
        "id": 397124179,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697553733
    },
    {
        "content": "<p>But it does apply <code>mul_eq_zero</code></p>",
        "id": 397124270,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697553757
    },
    {
        "content": "<p>the full simp trace without the class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Ordinal.enum_le_enum</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"bp\">¬?</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Ordinal.enum</span> <span class=\"bp\">?</span><span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">o'</span> <span class=\"bp\">?</span><span class=\"n\">ho'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ordinal.enum</span> <span class=\"bp\">?</span><span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">o</span> <span class=\"bp\">?</span><span class=\"n\">ho</span><span class=\"o\">)</span>\n    <span class=\"k\">with</span>\n      <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">mul_ne_zero</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">False</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Ordinal.enum_le_enum</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"bp\">¬?</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Ordinal.enum</span> <span class=\"bp\">?</span><span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">o'</span> <span class=\"bp\">?</span><span class=\"n\">ho'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ordinal.enum</span> <span class=\"bp\">?</span><span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">o</span> <span class=\"bp\">?</span><span class=\"n\">ho</span><span class=\"o\">)</span>\n    <span class=\"k\">with</span>\n      <span class=\"bp\">¬</span><span class=\"n\">False</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">False</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>and with the class, here are the first few lines of the trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">Ordinal.enum_le_enum</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"bp\">¬?</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Ordinal.enum</span> <span class=\"bp\">?</span><span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">o'</span> <span class=\"bp\">?</span><span class=\"n\">ho'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ordinal.enum</span> <span class=\"bp\">?</span><span class=\"n\">r</span> <span class=\"bp\">?</span><span class=\"n\">o</span> <span class=\"bp\">?</span><span class=\"n\">ho</span><span class=\"o\">)</span>\n    <span class=\"k\">with</span>\n      <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">ne_eq</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">mul_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n      <span class=\"n\">Mul</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 397124798,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697553904
    },
    {
        "content": "<p>this is the usual simp trace, but with the <code>field_simp</code> tactic.</p>",
        "id": 397124866,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697553929
    },
    {
        "content": "<p>I suppose this is something you already noticed, Matt?</p>",
        "id": 397124914,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697553945
    },
    {
        "content": "<p>Yeah, it just blows up at the <code>Mul F</code> synthesis</p>",
        "id": 397124969,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697553962
    },
    {
        "content": "<p>Changing <code>Test</code> to either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>both resolve the issue as well.</p>",
        "id": 397125434,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697554098
    },
    {
        "content": "<p><code>simp</code> does not appear to need this </p>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Strange.20.60field_simp.60.20failure/near/397110154\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul</span> <span class=\"n\">F</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Mul</span> <span class=\"n\">F</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulOneClass.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">MulZeroClass.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Distrib.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">CanonicallyOrderedCommSemiring.toMul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Test.toMul</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Test.toMul</span> <span class=\"n\">to</span> <span class=\"n\">Mul</span> <span class=\"n\">F</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul</span> <span class=\"n\">F</span> <span class=\"bp\">≟</span> <span class=\"n\">Mul</span> <span class=\"bp\">?</span><span class=\"n\">m.5577</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>More precisely</p>",
        "id": 397125611,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697554162
    },
    {
        "content": "<p>I would nice to pull this out of <code>field_simp</code></p>",
        "id": 397126294,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697554366
    },
    {
        "content": "<p>I think there's also a positivity bug here.  Note that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"c1\">-- comment out this line...</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 397127491,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697554689
    },
    {
        "content": "<p>I'm guessing the issue is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">positivity</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">positivity</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 397127591,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697554727
    },
    {
        "content": "<p>i.e. perhaps the multiplication positivity discharger is specialized unnecessarily to ordered fields?</p>",
        "id": 397127687,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697554760
    },
    {
        "content": "<p>Can at least reduce to <code>import Mathlib.Tactic.FieldSimp</code></p>",
        "id": 397127791,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697554796
    },
    {
        "content": "<p>I'm guessing <a href=\"https://github.com/leanprover-community/mathlib4/blob/2da494d2bfc6145023ef272371755c2ddff5fa20/Mathlib/Tactic/Positivity/Basic.lean#L198C1-L198C54\">this line</a> is too demanding.</p>",
        "id": 397128072,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697554864
    },
    {
        "content": "<p>If I yank out positivity from <code>field_simp</code> it still fails</p>",
        "id": 397129119,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697555152
    },
    {
        "content": "<p>Actually if I yank out the whole discharger it still fails</p>",
        "id": 397129598,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697555283
    },
    {
        "content": "<p>My guess: there are two different bugs, and Adam's was not caught earlier because people usually use <code>field_simp</code> on ordered fields and <code>positivity</code> was covering for Adam's bug.</p>",
        "id": 397129630,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697555284
    },
    {
        "content": "<p>With the same error of course</p>",
        "id": 397129704,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697555306
    },
    {
        "content": "<p>Set <code>dis</code> to <code>none</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/2da494d2bfc6145023ef272371755c2ddff5fa20/Mathlib/Tactic/FieldSimp.lean#L190\">here</a> and we still end up not synthesizing <code>Mul F</code></p>",
        "id": 397130111,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697555419
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myfieldSimp</span><span class=\"o\">)</span> <span class=\"s2\">\"myfield_simp\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">myfield_simp</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">loc</span> <span class=\"o\">:=</span> <span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">mkOptionalNode</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">thms0</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpTheorems</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ext</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpExtension</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">field_simps</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"field_simps not found\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">thms</span> <span class=\"bp\">←</span> <span class=\"n\">ext.getTheorems</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Simp.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n     <span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">thms</span><span class=\"o\">,</span><span class=\"n\">thms0</span><span class=\"o\">]</span>\n     <span class=\"n\">congrTheorems</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getSimpCongrTheorems</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">simpLocation</span> <span class=\"n\">ctx</span> <span class=\"n\">none</span> <span class=\"n\">loc</span>\n</code></pre></div>\n<p>still has the same behavior</p>",
        "id": 397133436,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697556304
    },
    {
        "content": "<p>This still has the <code>Mul F</code> synthesization problem. You need to <code>register_simp_attr mysimp</code> in a dependent file.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Attr.Register</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mySimp</span><span class=\"o\">)</span> <span class=\"s2\">\"my_simp\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">my_simp</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">loc</span> <span class=\"o\">:=</span> <span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">mkOptionalNode</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ext</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpExtension</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">mysimp</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"💩\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">thms</span> <span class=\"bp\">←</span> <span class=\"n\">ext.getTheorems</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Simp.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n     <span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">thms</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">simpLocation</span> <span class=\"n\">ctx</span> <span class=\"n\">none</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"c1\">-- comment out this line...</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">mysimp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ne_eq'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">mysimp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_ne_zero'</span> <span class=\"o\">{</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₀</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M₀</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semigroup'</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_simp</span>\n</code></pre></div>",
        "id": 397151592,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697562829
    },
    {
        "content": "<p>Forgot </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isLevelDefEq</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.4092</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">stuck</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.4092</span>\n</code></pre></div>",
        "id": 397154431,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697563963
    },
    {
        "content": "<p>Looks like a problem unifying universe number literals because <code>(M : Type 10)</code> behaves the same</p>",
        "id": 397155266,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697564317
    },
    {
        "content": "<p>I assume we never recover from a stuck universe unification problem?</p>",
        "id": 397155668,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697564481
    },
    {
        "content": "<p>Smaller </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.ZeroOne</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"c1\">-- comment out this line...</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_ne_zero'</span> <span class=\"o\">{</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₀</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M₀</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isLevelDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semigroup'</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>  <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_ne_zero'</span><span class=\"o\">]</span> <span class=\"c1\">-- failed to synthesize instance Mul F</span>\n</code></pre></div>",
        "id": 397157289,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697565138
    },
    {
        "content": "<p>Mathlib free</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TooShort</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Test</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_ne_zero'</span> <span class=\"o\">{</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₀</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">TooShort</span> <span class=\"n\">M₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isLevelDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semigroup'</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">TooShort</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_ne_zero'</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">[Meta.isLevelDefEq] 💥 10 =?= ?u.63 ▼</span>\n<span class=\"cm\">  [stuck] 10 =?= ?u.63</span>\n\n<span class=\"cm\">[Meta.Tactic.simp.discharge] @mul_ne_zero', failed to synthesize instance</span>\n<span class=\"cm\">      Mul F</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 397158115,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697565483
    },
    {
        "content": "<p>Change <code>Semigroup'</code> to <code>Mul</code> and it succeeds. Change <code>(F : Type _)</code> to a variable or change <code>(M : Type 10)</code> to a variable and it succeeds</p>",
        "id": 397158611,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697565659
    },
    {
        "content": "<p>Sadly I would have to use <code>«Too$hort»</code></p>",
        "id": 397158908,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697565753
    },
    {
        "content": "<p>If you swap <code>Semigroup'</code> and <code>Test</code> it succeeds.</p>",
        "id": 397162770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697567475
    },
    {
        "content": "<p>Instance priority</p>",
        "id": 397163019,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697567587
    },
    {
        "content": "<p>Can I <code>open private</code> with core files?</p>",
        "id": 397163112,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697567636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Strange.20.60field_simp.60.20failure/near/397163112\">said</a>:</p>\n<blockquote>\n<p>Can I <code>open private</code> with core files?</p>\n</blockquote>\n<p>you should be able to yes</p>",
        "id": 397163328,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697567716
    },
    {
        "content": "<p>Can I alias the declaration at the same time?</p>",
        "id": 397164038,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697568026
    },
    {
        "content": "<p>you can do an <code>alias</code> after opening it, or use <code>export private</code> instead</p>",
        "id": 397164390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697568215
    },
    {
        "content": "<p>Oh, <code>export private</code> is more pleasant</p>",
        "id": 397164674,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697568364
    },
    {
        "content": "<p>The reason this fails is because the metacontext depth (2) exceeds the metavariable depth for <br>\n<code>?u</code> from <code>(F : Type _)</code> (0) so it is not assignable. </p>\n<p>I am still confused as to why there are metavariables of depth &gt; 0 around here </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.63</span><span class=\"o\">}</span> <span class=\"n\">_uniq.73</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.63</span><span class=\"o\">}</span> <span class=\"n\">_uniq.73</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Uno.toMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.105</span><span class=\"o\">},</span> <span class=\"n\">Dos.toMul</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"n\">apply</span> <span class=\"n\">Dos.toMul</span> <span class=\"n\">to</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.63</span><span class=\"o\">}</span> <span class=\"n\">_uniq.73</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.63</span><span class=\"o\">}</span> <span class=\"n\">_uniq.73</span> <span class=\"bp\">≟</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"mi\">10</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.106</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.63</span><span class=\"o\">}</span> <span class=\"n\">_uniq.73</span> <span class=\"bp\">=?=</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"mi\">10</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.106</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"n\">_uniq.73</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.106</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"n\">_uniq.73</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.106</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">10</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.63</span><span class=\"o\">}</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[</span><span class=\"n\">isLevelDefEq</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"mi\">10</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.63</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">?</span><span class=\"n\">u.63</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">assignable</span>\n              <span class=\"o\">[]</span> <span class=\"mi\">10</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">assignable</span>\n              <span class=\"o\">[]</span> <span class=\"n\">At</span> <span class=\"n\">depth</span> <span class=\"mi\">2</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[(</span><span class=\"n\">_uniq.65</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.66</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.63</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.69</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.88</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.62</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.100</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.68</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.105</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"c1\">-- A list of current metavariables in the context and their depths</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.100</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.101</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.100</span><span class=\"o\">}]</span>\n              <span class=\"o\">[</span><span class=\"n\">stuck</span><span class=\"o\">]</span> <span class=\"n\">Here</span> <span class=\"n\">I</span> <span class=\"n\">am</span> <span class=\"mi\">10</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.63</span>\n</code></pre></div>\n<p>(I added some more verbosity to my toolchain for this output)</p>",
        "id": 397304908,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697633160
    },
    {
        "content": "<p>I changed the example a bit</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TooShort</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Uno</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Dos</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"c1\">-- comment out this line...</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">short_short</span> <span class=\"o\">{</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₀</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">TooShort</span> <span class=\"n\">M₀</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.raw</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isLevelDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Debug.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Uno</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">TooShort</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">short_short</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397305055,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697633195
    },
    {
        "content": "<p>I am guessing there is +1 from entering the <code>simp</code> and +1 from TC for <code>Mul</code> in <code>short_short</code></p>",
        "id": 397305653,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697633401
    },
    {
        "content": "<p><code>_uniq.105</code> arises from a list of the available instances but doesn't play any role in the unification problem at hand itself. The same is true for <code>_uniq.100</code></p>",
        "id": 397306246,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697633571
    },
    {
        "content": "<p>If I comment out to remove the depth 2 metavariable, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Uno</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"c1\">--extends Mul α</span>\n</code></pre></div>\n<p>then I get something I understand less</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">TooShort.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.85</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.86</span> <span class=\"bp\">=?=</span> <span class=\"n\">TooShort.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.48</span><span class=\"o\">}</span> <span class=\"n\">_uniq.58</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.86</span> <span class=\"bp\">=?=</span> <span class=\"n\">_uniq.58</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.86</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"n\">_uniq.58</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.85</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.48</span><span class=\"o\">}</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">isLevelDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">u.85</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.48</span>\n  <span class=\"o\">[</span><span class=\"n\">isLevelDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">u.85</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.48</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">u.48</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.48</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.48</span><span class=\"o\">}</span> <span class=\"n\">_uniq.58</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.48</span><span class=\"o\">}</span> <span class=\"n\">_uniq.58</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Dos.toMul</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"n\">apply</span> <span class=\"n\">Dos.toMul</span> <span class=\"n\">to</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.48</span><span class=\"o\">}</span> <span class=\"n\">_uniq.58</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.48</span><span class=\"o\">}</span> <span class=\"n\">_uniq.58</span> <span class=\"bp\">≟</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"mi\">10</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.90</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.48</span><span class=\"o\">}</span> <span class=\"n\">_uniq.58</span> <span class=\"bp\">=?=</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"mi\">10</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.90</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"n\">_uniq.58</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.90</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"n\">_uniq.58</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.90</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">10</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.48</span><span class=\"o\">}</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[</span><span class=\"n\">isLevelDefEq</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"mi\">10</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.48</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">?</span><span class=\"n\">u.48</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">assignable</span>\n              <span class=\"o\">[]</span> <span class=\"mi\">10</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">assignable</span>\n              <span class=\"o\">[]</span> <span class=\"n\">At</span> <span class=\"n\">depth</span> <span class=\"mi\">2</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[(</span><span class=\"n\">_uniq.85</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.50</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.73</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.51</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.54</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.48</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.53</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">_uniq.47</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)]</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.85</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.86</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.85</span><span class=\"o\">}]</span>\n              <span class=\"o\">[</span><span class=\"n\">stuck</span><span class=\"o\">]</span> <span class=\"n\">Here</span> <span class=\"n\">I</span> <span class=\"n\">am</span> <span class=\"mi\">10</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">u.48</span>\n</code></pre></div>\n<p>Why I am depth 2 when all my metavariables are at most 1? Why is <code>_uniq.85</code> appearing when it gets assigned to <code>_uniq.48</code> when unifying <code>TooShort</code>?</p>",
        "id": 397309034,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697634410
    }
]