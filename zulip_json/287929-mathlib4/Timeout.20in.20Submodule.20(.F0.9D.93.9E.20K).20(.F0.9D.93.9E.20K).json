[
    {
        "content": "<p>Lean cannot synthesize <code>Module (𝓞 K) (𝓞 K)</code> without an increase of heartbeats. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.NumberField.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"c1\">-- OK</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"c1\">-- Timeout</span>\n</code></pre></div>\n<p>Is it something to worry about?</p>",
        "id": 406825469,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702063847
    },
    {
        "content": "<p>My experience in FLT regular is that <code>𝓞 K</code> is usually very slow to work with, and I use <code>[IsIntegralClosure B A K]</code> whenever possible. And we also had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"mi\">2000</span><span class=\"o\">]</span> <span class=\"n\">inst_ringOfIntegersAlgebra</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"n\">Algebra.toModule</span>\n</code></pre></div>\n<p>which would for example make <code>Submodule (𝓞 K) (𝓞 K)</code> instant.</p>",
        "id": 406833688,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702067661
    },
    {
        "content": "<p>Looking at the trace of the output without these hacks, I guess things would also improve if the ordered-algebraic classes or topological-algebraic classes were scoped. But this might be controversial.</p>",
        "id": 406834038,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702067846
    },
    {
        "content": "<p>What kind of classes is it looking for? If it's <code>CovariantClass</code>/<code>ContravariantClass</code>, I might have a speedup to offer.</p>",
        "id": 406834400,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702068019
    },
    {
        "content": "<p>I'm referring to these<br>\n<a href=\"/user_uploads/3121/M3YdLiWsZP5UEHDn4x_4zNJP/image.png\">image.png</a><br>\nThough I'm not sure these are the culprit yet.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/M3YdLiWsZP5UEHDn4x_4zNJP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/M3YdLiWsZP5UEHDn4x_4zNJP/image.png\"></a></div>",
        "id": 406834759,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702068225
    },
    {
        "content": "<p>Oh yeah no. Those are fast and sturdy and very very useful everywhere.</p>",
        "id": 406835168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702068432
    },
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.NumberField.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance.tryResolve</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">1000000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">10000000000</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"c1\">-- Timeout</span>\n</code></pre></div>\n<p>There is a <code>[12.650751s] ✅ IsDomain ↥(𝓞 K) ≟ IsDomain ↥(𝓞 K)</code>, which looks like lean is having a trouble unifying <br>\n<code>Subalgebra.toCommRing</code> with <code>SubringClass.toRing</code>.<br>\nMaybe <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> knows what's going on?</p>",
        "id": 406836606,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702069126
    },
    {
        "content": "<p>Oh that's a big issue indeed, worth looking into. Don't know from the top of my head what's going wrong here, the defeq cache is a lot more robust nowadays so I assume it's not the same equality being tested exponentially often, right?</p>",
        "id": 406848322,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1702074515
    },
    {
        "content": "<p>Should we make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NumberField.ringOfIntegers#doc\">docs#NumberField.ringOfIntegers</a> irreducible?</p>",
        "id": 406849270,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702075033
    },
    {
        "content": "<p>You can get away with just <code>set_option synthInstance.maxHeartbeats 50000</code> if using <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a></p>",
        "id": 407573308,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1702417141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Timeout.20in.20Submodule.20.28.F0.9D.93.9E.20K.29.20.28.F0.9D.93.9E.20K.29/near/406849270\">said</a>:</p>\n<blockquote>\n<p>Should we make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NumberField.ringOfIntegers#doc\">docs#NumberField.ringOfIntegers</a> irreducible?</p>\n</blockquote>\n<p>If that just means replacing <code>def</code> by <code>irreducible_def</code> in the definition of <code>ringOfIntegers</code>, then it does not help much... It still get a timeout when I try <code>#synth Module (𝓞 K) (𝓞 K)</code></p>",
        "id": 407693806,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702463276
    }
]