[
    {
        "content": "<p>I get the following error: <code>unknown free variable '_uniq.56988'</code>. The proof is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Tendsto.isCompact_insert_range_of_cofinite</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsCompact</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Œπ</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ä•;</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">DiscreteTopology</span> <span class=\"n\">Œπ</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">rfl</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">cocompact_eq_cofinite</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Tendsto.isCompact_insert_range_of_cocompact</span> <span class=\"n\">hf</span> <span class=\"n\">continuous_of_discreteTopology</span>\n</code></pre></div>\n<p>It is also here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1913/files#diff-168d6c7ac4acb6033bfdf68bf30e50796594b04d24beb36a8ad595e729b9a6ecR572\">https://github.com/leanprover-community/mathlib4/pull/1913/files#diff-168d6c7ac4acb6033bfdf68bf30e50796594b04d24beb36a8ad595e729b9a6ecR572</a></p>",
        "id": 324498378,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675033722
    },
    {
        "content": "<p>Any ideas what can be the reason?</p>",
        "id": 324498437,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675033773
    },
    {
        "content": "<p>I found the reason: <code>rw [‚Üê cocompact_eq_cofinite]</code> generates a free var (as <code>rw</code> in Lean 3 sometimes did) but doesn't register it as a goal.</p>",
        "id": 324499268,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675034404
    },
    {
        "content": "<p>Specifying <code>Œπ</code> solves the problem.</p>",
        "id": 324499350,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675034459
    },
    {
        "content": "<p>Can you minimise?</p>",
        "id": 324500156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675035160
    },
    {
        "content": "<p>I'll try to do it tomorrow. I've got a cold, so I'm thinking much slower than usual.</p>",
        "id": 324501153,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036082
    },
    {
        "content": "<p>I've also seen the same form of error message in what looks like a totally different situation, where I didn't understand what's going on.</p>",
        "id": 324501239,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675036167
    },
    {
        "content": "<p>Does <code>recover</code> do anything in this example? It sounds a bit different than a metavariable not getting assigned.</p>",
        "id": 324501312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675036218
    },
    {
        "content": "<p>You can checkout this branch and have a look.</p>",
        "id": 324501330,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036245
    },
    {
        "content": "<p>Or I can do it later.</p>",
        "id": 324501352,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036266
    },
    {
        "content": "<p>This error message usually indicates a missing <code>withContext</code></p>",
        "id": 324501427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675036331
    },
    {
        "content": "<p>Why are there <code>letI</code> and <code>haveI</code> calls in this example? The lean 4 way to spell that is <code>let</code>,<code>have</code>; <code>letI</code> and <code>haveI</code> mean something else now</p>",
        "id": 324501468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675036383
    },
    {
        "content": "<p>What do they mean now?</p>",
        "id": 324501694,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036629
    },
    {
        "content": "<p><code>mathport</code> translated <code>letI</code> and <code>haveI</code> as <code>letI</code> and <code>haveI</code>, I didn't touch these lines.</p>",
        "id": 324501714,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036654
    },
    {
        "content": "<p>?? it should not have</p>",
        "id": 324501720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675036661
    },
    {
        "content": "<p>I'll double check.</p>",
        "id": 324501758,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036682
    },
    {
        "content": "<p>the <code>I</code> means \"inline\" - <code>haveI x := a; b</code> elaborates to <code>b[x/a]</code> while <code>have x := a; b</code> elaborates to (some metadata over) <code>(fun x =&gt; b) a</code></p>",
        "id": 324501805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675036727
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Topology/SubsetProperties.lean#L639\">https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Topology/SubsetProperties.lean#L639</a></p>",
        "id": 324501956,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675036869
    },
    {
        "content": "<p>I'm going to try it with <code>have</code>/<code>let</code></p>",
        "id": 324502157,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675037008
    },
    {
        "content": "<p>Hm, it looks like <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <a href=\"https://github.com/leanprover-community/mathport/commit/9411960\">changed</a> it to introduce <code>haveI</code> at some point. Why is that?</p>",
        "id": 324502162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675037016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unknown.20free.20variable/near/324501805\">said</a>:</p>\n<blockquote>\n<p>the <code>I</code> means \"inline\" - <code>haveI x := a; b</code> elaborates to <code>b[x/a]</code> while <code>have x := a; b</code> elaborates to (some metadata over) <code>(fun x =&gt; b) a</code></p>\n</blockquote>\n<p>this is really confusing to us lean3 users - I know instances don't need resetting anymore but I assumed this was just a normal porting thing and for example this could've been just declared as a synonym for ease of use</p>",
        "id": 324502280,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675037105
    },
    {
        "content": "<p>I think it's really important to flag the difference so even if it's not fixed at mathport end, it's fixed in mathlib4</p>",
        "id": 324502293,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675037126
    },
    {
        "content": "<p>(also, this can definitely be useful for introducing <code>have</code>s and <code>let</code>s in such a way to just shorten proofs, without causing any weird syntactic difficulties!)</p>",
        "id": 324502367,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675037166
    },
    {
        "content": "<p>Note that <code>have</code>-the-tactic in lean 3 was actually inlining in this sense</p>",
        "id": 324502393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675037202
    },
    {
        "content": "<p><code>have</code>-the-term was not</p>",
        "id": 324502397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675037208
    },
    {
        "content": "<p>in fact, that might be why it is being aligned like that in mathport</p>",
        "id": 324502443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675037262
    },
    {
        "content": "<p>i did know that <code>have</code>-the-term did not, but I did not know that <code>have</code>-the-tactic did. neat.</p>",
        "id": 324502460,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675037275
    },
    {
        "content": "<p>Same with <code>let</code>/<code>have</code>.</p>",
        "id": 324503548,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675038145
    },
    {
        "content": "<p>I'm confused--there's no way that if you wrote <code>have h := blah blah</code> in Lean 3 and then used <code>h</code> multiple times in the rest of the tactic block, that <code>h</code> was getting duplicated into each use site, right?</p>",
        "id": 324540875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675064010
    },
    {
        "content": "<p>What's the difference between Lean 4 <code>haveI</code> and <code>letI</code> then?</p>",
        "id": 324540894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675064023
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"bp\">+</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"bp\">+</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"bp\">+</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : ‚Ñï :=</span>\n<span class=\"c1\">-- 1 + 1 + (1 + 1) + (1 + 1 + (1 + 1))</span>\n</code></pre></div>",
        "id": 324541196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675064162
    },
    {
        "content": "<p>Note that this isn't as expensive as you might think since the term is deduplicated</p>",
        "id": 324541299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675064202
    },
    {
        "content": "<p>Is this why mathlib is slow?</p>",
        "id": 324541300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675064202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unknown.20free.20variable/near/324540894\">said</a>:</p>\n<blockquote>\n<p>What's the difference between Lean 4 <code>haveI</code> and <code>letI</code> then?</p>\n</blockquote>\n<p>Same as the difference between <code>have</code> and <code>let</code>, except the effects are all felt before getting to the kernel term</p>",
        "id": 324541484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675064284
    },
    {
        "content": "<p><code>letI</code> inserts a <code>x : t := e</code> into the local context so <code>simp</code> and friends can unfold it</p>",
        "id": 324541529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675064308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unknown.20free.20variable/near/324502162\">said</a>:</p>\n<blockquote>\n<p>Hm, it looks like <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"https://github.com/leanprover-community/mathport/commit/9411960\">changed</a> it to introduce <code>haveI</code> at some point. Why is that?</p>\n</blockquote>\n<p>You correctly guessed it.  The <code>have ...; exact ...</code> idiom was mainly used in Lean 3 to declare local instances.  Those should not produce a <code>have</code>-term in the elaborated expression and are therefore translated to <code>haveI</code>.</p>",
        "id": 324788996,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675117386
    }
]