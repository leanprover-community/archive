[
    {
        "content": "<p>I've started porting <code>Topology.LocalHomeomorph</code>. Since <code>LocalEquiv</code> is not a <code>FunLike</code>, the coercion to function is going to unfold to <code>e.toLocalEquiv.toFun</code>. This means that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_homeomorph.symm_to_local_equiv\">docs#local_homeomorph.symm_to_local_equiv</a> will unfold <code>e.symm.toFun</code> to <code>e.toLocalEquiv.symm.toFun</code> which is the opposite of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_homeomorph.coe_coe_symm\">docs#local_homeomorph.coe_coe_symm</a> (which becomes a syntatic <code>rfl</code>).</p>",
        "id": 327671347,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676333837
    },
    {
        "content": "<p>What should I do?</p>\n<ol>\n<li>Proceed with <code>(e : α → β) = e.toLocalEquiv.toFun</code>, adjust some <code>simp</code> lemmas, await for broken proofs down the import chain.</li>\n<li>Define <code>LocalHomeomorph.toFun'</code>, use it as coercion, leave the refactor till after the porting.</li>\n</ol>",
        "id": 327671513,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676333936
    },
    {
        "content": "<ol start=\"3\">\n<li>Something I missed.</li>\n</ol>",
        "id": 327671546,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676333952
    },
    {
        "content": "<p>Let me tag some users of <code>local_homeomorph</code>: <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 327891171,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676415945
    },
    {
        "content": "<p>Ah, you cannot make then <code>FunLike</code> instances because the <code>toFun</code> map is not injective...</p>\n<p>Going with option 2 might be best for now, since it's the behavior that is most similar to Lean 3.</p>",
        "id": 327995166,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676464148
    }
]