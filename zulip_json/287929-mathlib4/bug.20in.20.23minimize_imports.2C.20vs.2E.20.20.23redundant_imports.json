[
    {
        "content": "<p>I wanted to find out if the imports in my file are optimal (or if there are redundant imports).</p>\n<p>I vaguely remembered the <code>#minimize_imports</code> command - that looked like just what I need. The docstring mentioned syntax and tactics, neither of which are an issue for me. So I ran this at the end of my file.</p>\n<p><strong>Actually</strong>, this yielded just the file name. I had <strong>expected</strong>, however, to be suggested a minimal set of imports for the top <em>of this file</em>. For instance, deliberately introducing a superfluous import should yield a message telling me that.</p>\n<p>Would you accept a PR adding a sentence clarifying this to the docs?</p>",
        "id": 389812746,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694151093
    },
    {
        "content": "<p>Besides, I'm puzzled now: when does <code>#minimize_imports</code> yield a non-trivial answer? (If it always yields the current file, it surely isn't useful --- so what am I missing?) I'm still pretty new to Lean, so I'm sure I just don't know this yet...</p>",
        "id": 389812944,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694151201
    },
    {
        "content": "<p>Sorry, #minimize_imports is buggy. :-(</p>",
        "id": 389812979,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694151233
    },
    {
        "content": "<p>It should never report the file you are actually in!</p>",
        "id": 389813047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694151258
    },
    {
        "content": "<p>The implementation is not that complicated. If anyone wants to hit F12 and read the code, it is probably easily fixable. :-)</p>",
        "id": 389813131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694151324
    },
    {
        "content": "<p>Oh, I see. Here's a somewhat minimal example of my setting then.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Function.Jacobian</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.VectorBundle.SmoothSection</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">J</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">MeasureZero</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Measure</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.Measure.IsAddHaarMeasure</span> <span class=\"n\">μ</span><span class=\"o\">],</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">atlas</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">e.source</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">iUnion</span> <span class=\"o\">{</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Encodable</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">N</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">MeasureZero</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MeasureZero</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>  <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- BUG: running `#minimize_imports` here just suggests this file itself.</span>\n</code></pre></div>",
        "id": 389813236,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694151372
    },
    {
        "content": "<p>(Uses lean-4.0.0-rc4 and mathlib as of Wednesday. I don't know how to minimize that further/what is important for this bug.)</p>",
        "id": 389813281,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694151410
    },
    {
        "content": "<p>Another related question (feel free to move to a new thread if better!): searching the mathlib4 docs turned up <code>#redundant_imports</code> also. How do these relate?</p>\n<p>Deliberately introducing a never-used import gets flagged by <code>#redundant_imports</code> --- but I would also like a command looking inside my imports. (For instance, I'm not using anything inside <code>Mathlib.MeasureTheory.Function.Jacobian</code> above.) Is this \"looking inside\" what minimize_imports is supposed to do?</p>",
        "id": 389813544,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694151585
    },
    {
        "content": "<p>Yes</p>",
        "id": 389813615,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694151608
    },
    {
        "content": "<p>Ah, I see. Is there a way to clarify the documentation? I don't find that obvious from the current phrasing.</p>",
        "id": 389813830,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694151760
    },
    {
        "content": "<p>(I don't see an obvious improvement either.)</p>",
        "id": 389813838,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694151770
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.SmoothManifoldWithCorners</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Group.Measure</span>\n</code></pre></div>\n<p>sound right?</p>",
        "id": 389814326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694152089
    },
    {
        "content": "<p>Try out <a href=\"https://github.com/leanprover-community/mathlib4/pull/7025\">#7025</a>.</p>",
        "id": 389814336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694152101
    },
    {
        "content": "<p>Unfortunately it is hard to write good tests for this right now, because the way we have our tests organised you can't import one test file from another!</p>",
        "id": 389814420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694152182
    },
    {
        "content": "<p>Works like a charm in this example <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 389814582,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694152294
    },
    {
        "content": "<p>The original file needs something more...</p>",
        "id": 389814606,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694152311
    },
    {
        "content": "<p>Syntax / macros / tactics are going to confuse the current implementation, which just inspects the constants used.</p>",
        "id": 389814672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694152343
    },
    {
        "content": "<p>How can I use that PR, without building mathlib all by myself? (I'm in an external project depending on mathlib.) Pointer to the docs is fine if that's just RTFM.</p>",
        "id": 389814675,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694152349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20.23minimize_imports.2C.20vs.2E.20.20.23redundant_imports/near/389814672\">said</a>:</p>\n<blockquote>\n<p>Syntax / macros / tactics are going to confuse the current implementation, which just inspects the constants used.</p>\n</blockquote>\n<p>No, that file just has more math content :-)</p>",
        "id": 389814706,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694152371
    },
    {
        "content": "<p>In your <code>lakefile.lean</code>, change \"master\" on the line that specifies mathlib as a dependency to \"fix_minimize_imports\"</p>",
        "id": 389814735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694152393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20.23minimize_imports.2C.20vs.2E.20.20.23redundant_imports/near/389814735\">said</a>:</p>\n<blockquote>\n<p>In your <code>lakefile.lean</code>, change \"master\" on the line that specifies mathlib as a dependency to \"fix_minimize_imports\"</p>\n</blockquote>\n<p>There's no such line; the relevant section seems to be.<br>\n<code>require mathlib from git\n  \"https://github.com/leanprover-community/mathlib4.git\"\n</code></p>",
        "id": 389814980,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694152540
    },
    {
        "content": "<p>Ah, sorry</p>",
        "id": 389815044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694152566
    },
    {
        "content": "<p>Just add <code>@ \"fix_minimize_imports\"</code> at the end of that line.</p>",
        "id": 389815061,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694152580
    },
    {
        "content": "<p>However until CI finishes on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7025\">#7025</a> you want have any oleans available, so it will be painful to use. Waiting an hour should solve that.</p>",
        "id": 389815101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694152609
    },
    {
        "content": "<p>Thanks a lot for all the guidance!!</p>",
        "id": 389815172,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694152656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bug.20in.20.23minimize_imports.2C.20vs.2E.20.20.23redundant_imports/near/389815061\">said</a>:</p>\n<blockquote>\n<p>Just add <code>@ \"fix_minimize_imports\"</code> at the end of that line.</p>\n</blockquote>\n<p>Tried now; the new toolchain works. At first I just noticed this wasn't working; then I saw an info message on the first line, \"manifest out of date\"; following its instructions seems to work.</p>",
        "id": 390009879,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694248055
    },
    {
        "content": "<p>I think the correct steps are.</p>\n<ul>\n<li>edit lakefile.lean to point to the brain (as above, in my case, appending <code>@ \"fix_minimize_imports\"</code>)</li>\n<li>close VS Code</li>\n<li>run <code>lake update</code>; in this case, this includes downloading a new lean toolchain</li>\n<li>run <code>lake exe cache get</code> to update the mathlib case</li>\n<li>open VS Code again</li>\n</ul>\n<p>On first try, I ran <code>lake update</code> in the terminal while having VS Code open, then got a prompt asking me to restart the server, and saw it happily building std and mathlib... cancelling it and updating the cache cut that short :-)</p>",
        "id": 390011921,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694249679
    },
    {
        "content": "<p><code>lake update</code> is actually a bit dangerous if you have dependencies that point to branches rather than commits, as it will update to the head of that branch. e.g. if you do this in Mathlib itself (but not in a project that depends on Mathlib) suddenly you are responsible for dealing with any breaking changes in <code>std</code>, <code>aesop</code>, etc.</p>\n<p>Sometimes safer is just to delete your <code>lake-packages</code> directory. Then the next <code>lake exe cache get</code> or <code>lake build</code> will reconstitute it.</p>",
        "id": 390017897,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694254100
    },
    {
        "content": "<p>Obviously this is not an ideal situation, but we don't seem to have come up with a way to prevent users hurting themselves with <code>lake update</code>!</p>",
        "id": 390017921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694254123
    },
    {
        "content": "<p>Ah, I see. So much to still learn :-) I'll just delete that directory next time then.</p>",
        "id": 390030268,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694262029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'm now wondering how these commands differ. Is the following an accurate description? </p>\n<p><code>#redundant_imports</code> looks for import lines which can be straight up removed (as it's already transitively included),<br>\nwhere <code>#minimize_imports</code> also checks if a file can be replaced by an import lower in the hierarchy.</p>\n<p>In particular, it seems to me that <code>#redundant_imports</code> does a subset of <code>#minimize_imports</code>. Is this correct? (If so, I'm wondering why both commands exist --- is the former faster to run or so?)</p>",
        "id": 390117676,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694334216
    },
    {
        "content": "<p>Suppose we have files <code>A.lean</code>, <code>B.lean</code>, <code>C.lean</code>, and <code>D.lean</code> where <code>C.lean</code> contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">A</span>\n<span class=\"kn\">import</span> <span class=\"n\">B</span>\n<span class=\"kn\">import</span> <span class=\"n\">D</span>\n</code></pre></div>\n<p>and <code>B.lean</code> contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>Now (regardless of the definitions in the file!) <code>#redundant_imports</code> in <code>C.lean</code> should suggest deleting <code>import A</code>, because this is transitively implied by the <code>import B</code>.</p>",
        "id": 390129685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694342635
    },
    {
        "content": "<p>Further suppose that the definitions in <code>C.lean</code> in fact only depend on material from <code>A.lean</code>. Then <code>#minimize_imports</code> in <code>C.lean</code> should suggest deleting <code>import B</code> and <code>import D</code>.</p>",
        "id": 390129852,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694342752
    },
    {
        "content": "<p>So no, they are not \"comparable\".</p>",
        "id": 390129918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694342784
    }
]