[
    {
        "content": "<p>Have this down to two issues, documented in the PR notes -- would appreciate extra pairs of eyes on these, because there's something I'm missing here. Otherwise cleaned up.</p>",
        "id": 346293964,
        "sender_full_name": "Arien Malec",
        "timestamp": 1680411563
    },
    {
        "content": "<blockquote>\n<p>documented in the PR notes</p>\n</blockquote>\n<p>I don't know what you mean by the PR notes, but the PR description is empty.</p>",
        "id": 346322643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680427260
    },
    {
        "content": "<p>PR comment rather than the PR field itself...</p>",
        "id": 346408354,
        "sender_full_name": "Arien Malec",
        "timestamp": 1680465726
    },
    {
        "content": "<p>I saw your note on <code>recOn</code> but here we are recursing on <code>destruct s</code> (<code>Option (Seq1 \\alpha)</code>) rather than on <code>Seq</code> itself...</p>\n<p>Is there a clean way to get the <code>H</code> in <code>induction' H: destruct s</code> using <code>match</code>?</p>",
        "id": 346408570,
        "sender_full_name": "Arien Malec",
        "timestamp": 1680465893
    },
    {
        "content": "<p>What's the error you get when you remove non-computable?</p>",
        "id": 346411697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680467977
    },
    {
        "content": "<p>I don't think you need to switch to using a <code>match</code>, this sounds like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem</p>",
        "id": 346411794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680468028
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"n\">generator</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">support</span> <span class=\"n\">recursor</span> <span class=\"bp\">'</span><span class=\"n\">Option.rec'</span> <span class=\"n\">yet</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"k\">match</span> <span class=\"bp\">...</span> <span class=\"k\">with</span><span class=\"bp\">'</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n</code></pre></div>",
        "id": 346420563,
        "sender_full_name": "Arien Malec",
        "timestamp": 1680474753
    },
    {
        "content": "<p>Switching to <code>cases'</code> from <code>induction'</code> fixed the issue (we don't use an induction hypothesis anyway).</p>",
        "id": 346420791,
        "sender_full_name": "Arien Malec",
        "timestamp": 1680474939
    },
    {
        "content": "<p>Adding <code>Option.rec_eq_recC</code> would fix that</p>",
        "id": 346538634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680522182
    },
    {
        "content": "<p>(c.f. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.rec_eq_recC#doc\">docs4#List.rec_eq_recC</a>)</p>",
        "id": 346538764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680522213
    },
    {
        "content": "<p>Let me take a crack at a PR for that -- I saw the pattern for <code>List</code>...</p>",
        "id": 346628936,
        "sender_full_name": "Arien Malec",
        "timestamp": 1680541188
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/3255\">!4#3255</a> is what's required, but would appreciate review.</p>",
        "id": 346719125,
        "sender_full_name": "Arien Malec",
        "timestamp": 1680577663
    },
    {
        "content": "<p>Just tested it in situ in <code>Data.Seq.Seq</code> and does the job.</p>",
        "id": 346719598,
        "sender_full_name": "Arien Malec",
        "timestamp": 1680578021
    },
    {
        "content": "<p>(modulo <code>simp</code> to <code>csimp</code>)</p>",
        "id": 346719615,
        "sender_full_name": "Arien Malec",
        "timestamp": 1680578036
    }
]