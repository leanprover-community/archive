[
    {
        "content": "<p>I was hoping to apply strictly positive integer powers to a semigroup <code>M</code> (or positive integer scalar multiples in an <code>AddSemigroup</code> <code>M</code>), but there seems to be a can of worms here.</p>\n<p>I could write a <code>[Pow M ℕ+]</code> (or <code>[SMul ℕ+ M]</code>) instance using the existing definition of semigroup, but I run into an instance diamond with Pi types.  The problem seems to be that powers in a product of semigroups (which has a semigroup instance) is not defeq to component-wise powers.  This is the same problem (<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/Defs.html#Design-note-on-AddMonoid-and-Monoid\">described in Mathlib.Algebra.Group.Defs</a>) that led to the inclusion of ℕ powers into the definition of monoid. </p>\n<p>One solution is to add PNat powers to the definition of semigroup.  This clears up the diamond, but leads to another problem: monoids extend semigroups, so with the existing definition of monoid, we would have both ℕ+ powers and ℕ powers.  If we wanted a <code>[Pow M ℕ+]</code> instance from anything with <code>[Pow M ℕ]</code> structure (this seems reasonable to me), this could lead to another diamond, unless we make the powers defeq.</p>\n<p>Does this mean we need the monoid <code>npow</code> to use the semigroup <code>pnpow</code> somehow?  I am inexperienced with instances and diamonds, so I don't see a good way out of this mess.</p>",
        "id": 404717203,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1701205253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630477\">Scott Carnahan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/PNat.20powers.20in.20a.20semigroup/near/404717203\">said</a>:</p>\n<blockquote>\n<p>If we wanted a <code>[Pow M ℕ+]</code> instance from anything with <code>[Pow M ℕ]</code> structure (this seems reasonable to me)</p>\n</blockquote>\n<p>This doesn't sound reasonable to me; we don't have anything analogous for <code>Int</code> and <code>Nat</code> powers. In general constructing data in a \"backwards\" way in typeclass search is a bad idea, and almost always leads to diamonds.</p>",
        "id": 404718246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701205636
    },
    {
        "content": "<p>What we want is a theorem saying the two powers are compatible. And this will always hold.</p>",
        "id": 404718836,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701205955
    },
    {
        "content": "<p>I thought that <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> has been saying for at least a year that we need to refactor <code>semigroup</code> to add a field <code>pnpow</code>?</p>",
        "id": 404719733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701206355
    },
    {
        "content": "<p>I know <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> was also thinking about doing this, and started with this on <a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2Fppow\">branch#j-loreaux/ppow</a>.<br>\nI am a bit worried about performance issues, and that the definition of group will contain 3 power operations...</p>",
        "id": 404719839,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701206397
    },
    {
        "content": "<p>Yes, this is not the first time the conversation pops up...</p>",
        "id": 404719909,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701206407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>: meanwhile for non-commutative (smul) cases I'm looking at doubling the number of power operations... So unless we let <code>AddMonoid</code> and <code>Monoid</code> diverge in terms of a 1:1 field mapping, they'll end up even bigger</p>",
        "id": 404724050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701207715
    },
    {
        "content": "<p>Did the \"add nsmul and zsmul to groups\" PR give us a performance hit?</p>",
        "id": 404724701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701207977
    },
    {
        "content": "<p>Yes, I did start on this on <a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2Fppow\">branch#j-loreaux/ppow</a>, but it was causing performance issues, and I never finished getting it compiling (I can't remember how much was left to do). It's possible that it could be revived and those performance issues would go away because of more recent performance upgrades to master.</p>",
        "id": 404727588,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701209097
    },
    {
        "content": "<p>Also, we'll probably want the <code>Pow M ℕ+</code> to be embedded in <code>Mul</code>, not <code>Semigroup</code> to allow for non-associative multiplications which are nevertheless power associative (we could have a mixin class <code>IsPowAssoc</code> for that possibly). Likewise, we'll probably want to move <code>Pow M ℕ</code> from <code>Monoid</code> to <code>MulOneClass</code>.</p>",
        "id": 404727602,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701209104
    },
    {
        "content": "<p>Ultimately though, I am worried about the sustainability of this approach. <code>NormedField</code> and <code>LinearOrderedField</code> in particular are absurdly large with this approach and with Eric's suggestions for non-commutativity, which I think are likely necessary.</p>",
        "id": 404727615,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701209108
    },
    {
        "content": "<p>It's nice to see that someone else is working on it.  I had tried the <code>Pow M ℕ+</code> instance for semigroups in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8618\">#8618</a> but I guess it needs to be deleted.</p>",
        "id": 404733094,
        "sender_full_name": "Scott Carnahan",
        "timestamp": 1701211816
    },
    {
        "content": "<p>Actually, I like the mixin approach, with the class <code>[PNatPowAssoc M]</code>. Just leave out the instance <code>instance [Semigroup M] : Pow M ℕ+</code>. <br>\nDoes that scale? Are there diamond issues with that? I don't see any on first glance.<br>\nThe main downside I see is that you have to write <code>[Semigroup M] [Pow M ℕ+] [PNatPowAssoc M]</code> to talk about \"semigroup with its power operation on <code>ℕ+</code>\". However, this will probably an uncommon enough operation that I don't think that is a huge problem. The main advantage is that we don't have to add more superfluous fields to the whole algebraic hierarchy.<br>\nThoughts?</p>",
        "id": 404738299,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701214482
    },
    {
        "content": "<p>If \"the main downside\" is something which we can probably cover up with some coding hackery then this sounds great! Would this have worked for nsmul and zsmul? If not then what's the catch?</p>",
        "id": 404738508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701214584
    },
    {
        "content": "<p>I don't see a reason why it wouldn't work, but that is of course different than \"this actually works\". A difference is that nsmul and zmul will be used more often, so you more often have to write extra things.</p>",
        "id": 404740600,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701215794
    },
    {
        "content": "<blockquote>\n<p>A difference is that nsmul and zmul will be used more often, so you more often have to write extra things.</p>\n</blockquote>\n<p>This is ultimately the tradeoff with many of these diamonds; either you have to add \"obvious\" fields to every instance of some basic algebraic structure, or every caller has to add extra \"obvious\" assumptions when they need them.</p>\n<p>Note that using <code>[AddCommGroup A] [Module Int A]</code> instead of adding <code>zsmul</code> would not have worked, unless we were also willing to give up the <code>[Semiring R] : Module R R</code> instance (otherwise we'd still get a diamond for <code>Module Int Int</code>.</p>",
        "id": 404742167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701216508
    },
    {
        "content": "<p>That's not the mixin approach I was suggesting. Instead, I meant that the data would be available from <code>Mul</code>, including the <code>Pow</code> instance, but the useful lemmas would only apply in the presence of an <code>IsPowAssoc</code> instance.</p>",
        "id": 404747278,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701218971
    },
    {
        "content": "<p>As a test, I refactored everything until <code>Module.Basic</code> (except <code>abel</code>) using my suggested approach, but for integer powers and integer smuls. This is in <a href=\"https://github.com/leanprover-community/mathlib4/tree/group_pow_mixin\">branch#group_pow_mixin</a>. I'm quite sure this is doable for all of mathlib, if we want it. It makes some things a bit more verbose: you have to add some superfluous type-classes, like<br>\n<code>[AddCommGroup M] [SMul ℤ M] [ZSMul M]</code><br>\nwhenever you want to use the scalar multiplication with <code>ℤ</code>. On all concrete types and type constructors, you have to add these as instances (though it is barely more work than the status quo, since usually you gave the <code>zpow</code> field in the <code>Group</code> instance. But we have fewer fields in <code>DivInvMonoid</code> (and hence in all classes extending it).</p>\n<p>We get the instance <code>[AddCommGroup M] [SMul ℤ M] [ZSMul M] : Module ℤ M</code>, and this does not lead to any diamond issues:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Semiring.toModule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">AddCommGroup.intModule</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible_and_instances</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>I'm wondering how it would affect performance. I think it would be an improvement, but I don't know how much. Is there a way to test that without fixing all of mathlib?</p>",
        "id": 404763214,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701225322
    },
    {
        "content": "<p>But to actually get the lemmas we need a <code>LawfulPow</code> class right?</p>",
        "id": 404764632,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701225925
    },
    {
        "content": "<p>Oh sorry, that's your <code>ZPow</code>.</p>",
        "id": 404765163,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701226183
    },
    {
        "content": "<p>I have to say that I like this a lot, assuming it actually helps with performance, which is still TBD. Although I wonder whether it might not be better to make <code>ZPow M</code> extend <code>Pow M ℤ</code> instead. I don't <em>think</em> that would be problematic, and it would reduce clutter in statements.</p>",
        "id": 404926757,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701282450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> one way to test it which <em>might</em> be easier: instead of trying to pull <code>zpow</code> out, we could try, starting from the same commit on master, adding <code>ppow</code> in both ways. Although this may not serve as a realistic comparison.</p>",
        "id": 404927114,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701282600
    },
    {
        "content": "<p>The mixin approach has another advantage: due to the import hierarchy of low-level files, adding the <code>ppow</code> field to <code>Semigroup</code> had to look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ppow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">ppowRec</span>\n</code></pre></div>\n<p>as opposed to the more natural</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ppow</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">ppowRec</span>\n</code></pre></div>\n<p>because I couldn't import <code>PNat</code> into <code>Algebra.Group.Defs</code>.</p>\n<p>With mixins, you can just declare them later.</p>",
        "id": 404927834,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701282865
    },
    {
        "content": "<p>Sorry, why can't we just reuse <code>pow</code> here?</p>",
        "id": 404974920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701303801
    },
    {
        "content": "<p>You can always send <code>0</code> to <code>id</code>, as a junk value.</p>",
        "id": 404974973,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701303833
    },
    {
        "content": "<p>Or is the problem somehow occurring for semigroups which are only sometimes monoids?</p>",
        "id": 404975076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701303875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/PNat.20powers.20in.20a.20semigroup/near/404974973\">said</a>:</p>\n<blockquote>\n<p>You can always send <code>0</code> to <code>id</code>, as a junk value.</p>\n</blockquote>\n<p>If you do this, then you can't write Semigroup.ext without adding a meaningless assumption about junk values</p>",
        "id": 405062167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701331825
    },
    {
        "content": "<p>Out of all possible concerns being able to write <code>Semigroup.ext</code> is definitely not the one I would have put forward.</p>",
        "id": 405066583,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701333656
    },
    {
        "content": "<p>I mean, it was the first thing that came to mind that expressed \"semigroups would no longer be uniquely determined by their multiplication\"</p>",
        "id": 405070726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701335079
    },
    {
        "content": "<p>There's no reason to provide a junk value. The issue is only that the type signature doesn't look as clean as would be ideal, but that's a minor issue.</p>",
        "id": 405273576,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701404979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/PNat.20powers.20in.20a.20semigroup/near/405273576\">said</a>:</p>\n<blockquote>\n<p>There's no reason to provide a junk value. The issue is only that the type signature doesn't look as clean as would be ideal, but that's a minor issue.</p>\n</blockquote>\n<p>We can always have a <code>PNat.Defs</code> file where we define <code>PNat</code> but do little else, and import this in <code>Algebra.Group.Defs</code>.</p>",
        "id": 405321352,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701423039
    }
]