[
    {
        "content": "<p>In mathlib3, <code>reassoc</code> was used to generate the following lemma: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monad.algebra.unit_assoc\">docs#category_theory.monad.algebra.unit_assoc</a><br>\nIn mathlib4, the <code>reassoc</code> attribute generates a lemma with the following type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Monad.Algebra</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">self.A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">Monad.Œ∑</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">self.A</span> <span class=\"bp\">‚â´</span> <span class=\"n\">self.a</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">self.A</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Note that the RHS is a composition of an identity morphism with <code>h</code>, while the mathlib3 version doesn't have that identity on the RHS.</p>\n<p>Is this expected?</p>",
        "id": 351111877,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681925112
    },
    {
        "content": "<p>It seems that the lean3 code simplifies using <code>assoc</code>, <code>id_comp</code> and <code>comp_id</code> when generating the lemma: <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/8eb9c42d4d34c77f6ee84ea766ae4070233a973c/src/tactic/reassoc_axiom.lean#L82\">https://github.com/leanprover-community/mathlib/blob/8eb9c42d4d34c77f6ee84ea766ae4070233a973c/src/tactic/reassoc_axiom.lean#L82</a></p>\n<p>And the lean4 code tries to do the same:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/c9a607f6035bfd472080a5568493eefd447c3e2c/Mathlib/Tactic/Reassoc.lean#L39\">https://github.com/leanprover-community/mathlib4/blob/c9a607f6035bfd472080a5568493eefd447c3e2c/Mathlib/Tactic/Reassoc.lean#L39</a></p>\n<p>I don't know why simplification is failing for this lemma.</p>",
        "id": 351112711,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681925317
    },
    {
        "content": "<p>If you do the steps manually, it works fine?</p>",
        "id": 351113122,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681925416
    },
    {
        "content": "<p><del>The lowercase <code>a</code> is a typo right?</del> Nevermind different thing</p>",
        "id": 351113296,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681925466
    },
    {
        "content": "<p>no, that's the name for the structure morphism of an algebra for a monad.</p>",
        "id": 351113390,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681925490
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X.A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">Œ∑</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X.A</span> <span class=\"bp\">‚â´</span> <span class=\"n\">X.a</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">T</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">eq_whisker</span> <span class=\"n\">X.unit</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- e: ((Œ∑ T).app X.A ‚â´ X.a) ‚â´ h = ùüô X.A ‚â´ h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id_comp</span><span class=\"o\">,</span> <span class=\"n\">comp_id</span><span class=\"o\">,</span> <span class=\"n\">assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">e</span>\n  <span class=\"c1\">-- e: ((Œ∑ T).app X.A ‚â´ X.a) ‚â´ h = ùüô X.A ‚â´ h</span>\n  <span class=\"c1\">-- sigh</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 351114198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681925715
    },
    {
        "content": "<p>I have no clue why simp is failing here.</p>",
        "id": 351114551,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681925810
    },
    {
        "content": "<p><code>rw</code>?</p>",
        "id": 351114594,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681925824
    },
    {
        "content": "<p>yeah rw fails as well</p>",
        "id": 351114654,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681925844
    },
    {
        "content": "<p>If you trace things, what does it say?</p>",
        "id": 351114746,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681925873
    },
    {
        "content": "<p>what do you suggest I trace here?</p>",
        "id": 351114994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681925937
    },
    {
        "content": "<p>Instance synthesis</p>",
        "id": 351115062,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681925953
    },
    {
        "content": "<p>I'm not sure that would reveal anything, but I'll try</p>",
        "id": 351115109,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681925967
    },
    {
        "content": "<p>Don't see how but that has been the # 1 cause of failure for me in simp's or rw's</p>",
        "id": 351115195,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681925994
    },
    {
        "content": "<p>sigh, the issue is that lean4 is not eager to see that the identity functor applied to <code>A</code> is defeq to <code>A</code>.</p>",
        "id": 351116053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681926209
    },
    {
        "content": "<p>If I change the definition of an algebra from </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The underlying object associated to an algebra. -/</span>\n  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n  <span class=\"sd\">/-- The structure morphism associated to an algebra. -/</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span>\n  <span class=\"sd\">/-- The unit axiom associated to an algebra. -/</span>\n  <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">T.Œ∑.app</span> <span class=\"n\">A</span> <span class=\"bp\">‚â´</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"sd\">/-- The associativity axiom associated to an algebra. -/</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"n\">T.Œº.app</span> <span class=\"n\">A</span> <span class=\"bp\">‚â´</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">a</span> <span class=\"bp\">‚â´</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The underlying object associated to an algebra. -/</span>\n  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n  <span class=\"sd\">/-- The structure morphism associated to an algebra. -/</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">A</span>\n  <span class=\"sd\">/-- The unit axiom associated to an algebra. -/</span>\n  <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">T.Œ∑.app</span> <span class=\"n\">A</span> <span class=\"bp\">‚â´</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"sd\">/-- The associativity axiom associated to an algebra. -/</span>\n  <span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"n\">T.Œº.app</span> <span class=\"n\">A</span> <span class=\"bp\">‚â´</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">a</span> <span class=\"bp\">‚â´</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>\n<p>then everything works fine.</p>",
        "id": 351116217,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681926246
    },
    {
        "content": "<p>And of course the value of <code>_</code> that gets filled in is <code>((ùü≠ C).obj X.A)</code>.</p>",
        "id": 351116368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681926288
    },
    {
        "content": "<p>Perhaps <code>reassoc</code> should do some <code>dsimp</code>lification as well?</p>",
        "id": 351116605,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681926354
    },
    {
        "content": "<p>Because this works: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X.A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">Œ∑</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X.A</span> <span class=\"bp\">‚â´</span> <span class=\"n\">X.a</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">T</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">eq_whisker</span> <span class=\"n\">X.unit</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- e: ((Œ∑ T).app X.A ‚â´ X.a) ‚â´ h = ùüô X.A ‚â´ h</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">e</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id_comp</span><span class=\"o\">,</span> <span class=\"n\">comp_id</span><span class=\"o\">,</span> <span class=\"n\">Category.assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">e</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>with the original definition</p>",
        "id": 351116945,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681926440
    },
    {
        "content": "<p>Let's see what <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thinks.</p>",
        "id": 351116978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681926451
    },
    {
        "content": "<p>This came up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3528\">!4#3528</a> FWIW</p>",
        "id": 351117640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681926612
    },
    {
        "content": "<p>Here's a mathlib4 branch which makes such a change to <code>reassoc</code>. Let's see what breaks:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/compare/reassoc_test\">https://github.com/leanprover-community/mathlib4/compare/reassoc_test</a></p>",
        "id": 351126340,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681929155
    },
    {
        "content": "<p>It allows <code>reassoc</code> to use <code>Functor.id_obj</code> and similar things in the simplification step.</p>",
        "id": 351126765,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681929276
    },
    {
        "content": "<p>Okay, I got all of mathlib4 to build with this change to reassoc (in the same branch). Most things were smooth, and even smoother than before. There was one timeout in <code>CategoryTheory.Idempotents.FunctorExtension</code> which wasn't too bad to fix (and it seemed like <span class=\"user-mention\" data-user-id=\"459699\">@Jo√´l Riou</span> was running into timeout issues there anyway).</p>",
        "id": 351139697,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681933407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  The sister tactic to <code>reassoc</code> is <code>elementwise</code>, so it might be worth comparing implementations, though if adding these lemmas to <code>reassoc</code>'s simp set is enough to handle everything you need, I think this is a perfect change as-is.</p>\n<p>For reference, <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Elementwise.lean#L77\">here's the corresponding function</a> for <code>elementwise</code>. It's more complicated because it needs to be able to apply <code>@[simp]</code> lemmas associated to particular concrete categories to get things into simp normal form. I didn't make similar changes to <code>reassoc</code> because I figured there wouldn't be any such lemmas, but if anything comes up I guess it's worth remembering that <code>elementwise</code> has a solution.</p>",
        "id": 351141218,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681933971
    },
    {
        "content": "<p>I opened a PR for this at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3531\">!4#3531</a></p>",
        "id": 351175148,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681951798
    }
]