[
    {
        "content": "<p>I'm trying to prove something trivial: The expectation of a random variable is its integral over the probability space. <br>\nMy code is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.ProbabilityMeasure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.MeasurableSpaceDef</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Œ©</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasureSpace</span> <span class=\"bp\">Œ©</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Œ©</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Œ©</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expectation_equals_integral</span> <span class=\"o\">(</span><span class=\"n\">integrability</span><span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"n\">X</span> <span class=\"n\">Œº</span><span class=\"o\">):</span> <span class=\"bp\">ùîº</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Œ©</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"bp\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and I get the state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">Œ©</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">Œº</span><span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span>\n<span class=\"n\">integrability</span><span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"n\">X</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">L1.integral</span> <span class=\"o\">(</span><span class=\"n\">Integrable.toL1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">L1.integral</span> <span class=\"o\">(</span><span class=\"n\">Integrable.toL1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>It's showing the same thing over both sides of the equality. However, I tried <code>rfl</code> but it couldn't close the goal.</p>",
        "id": 385830281,
        "sender_full_name": "Zhang Ruichong",
        "timestamp": 1692338381
    },
    {
        "content": "<p>I'm not at a computer now, but maybe using <code>congr</code> may zoom in on some hidden difference?</p>",
        "id": 385830683,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692338539
    },
    {
        "content": "<p>It is showing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">Œ©</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">Œº</span><span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span>\n<span class=\"n\">integrability</span><span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"n\">X</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">‚Ñô</span> <span class=\"bp\">=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">Œº</span>\n<span class=\"n\">case</span> <span class=\"n\">h.e_3.e_1.e_Œº</span>\n<span class=\"bp\">Œ©</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">Œº</span><span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span>\n<span class=\"n\">integrability</span><span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"n\">X</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">‚Ñô</span> <span class=\"bp\">=</span> <span class=\"bp\">‚Üë</span><span class=\"n\">Œº</span>\n<span class=\"n\">case</span> <span class=\"n\">h.e_4</span>\n<span class=\"bp\">Œ©</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">Œº</span><span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span>\n<span class=\"n\">integrability</span><span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"n\">X</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">HEq</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">L1.integral</span> <span class=\"o\">(</span><span class=\"n\">Integrable.toL1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hf</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">L1.integral</span> <span class=\"o\">(</span><span class=\"n\">Integrable.toL1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n<span class=\"n\">case</span> <span class=\"n\">h.e_5</span>\n<span class=\"bp\">Œ©</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">Œº</span><span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"bp\">Œ©</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span>\n<span class=\"n\">integrability</span><span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"n\">X</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">HEq</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Does it mean that ‚Ñô is the default probability measure?</p>",
        "id": 385830950,
        "sender_full_name": "Zhang Ruichong",
        "timestamp": 1692338688
    },
    {
        "content": "<p>Yes, I think that the two sides are using different measures.</p>",
        "id": 385833356,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692339556
    },
    {
        "content": "<p>(Note that I have not looked much at the probability part of mathlib, so maybe someone else can confirm!)</p>",
        "id": 385833470,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692339602
    },
    {
        "content": "<p>I assume there's an implicit measure argument somewhere in mathlib that probably ought to be explicit?</p>",
        "id": 385834262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692339910
    },
    {
        "content": "<p>It seems that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.MeasureSpace#doc\">docs#MeasureTheory.MeasureSpace</a> makes the choice of a measure for you: <code>MeasureTheory.MeasureSpace.volume</code>.</p>",
        "id": 385836017,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692340679
    },
    {
        "content": "<p>Maybe, using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasurableSpace#doc\">docs#MeasurableSpace</a>, rather than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.MeasureSpace#doc\">docs#MeasureTheory.MeasureSpace</a> is closer to what you want?</p>",
        "id": 385836239,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692340758
    },
    {
        "content": "<p>I'm not used to the probability theory library either so please correct me, but I think there are two ways to express your statement.</p>\n<ul>\n<li>If you want to have a default measure on <code>Œ©</code>:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.ProbabilityMeasure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.MeasurableSpaceDef</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Œ©</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasureSpace</span> <span class=\"bp\">Œ©</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"o\">(</span><span class=\"n\">‚Ñô</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Œ©</span><span class=\"o\">)]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expectation_equals_integral</span> <span class=\"o\">:</span> <span class=\"bp\">ùîº</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Œ©</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<ul>\n<li>if not (especially if you want to make a generic lemma for the library):</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.ProbabilityMeasure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.MeasurableSpaceDef</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Œ©</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Œ©</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Œ©</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">volume_tac</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">expectation_equals_integral</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Œ©</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"bp\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 385852683,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692346181
    },
    {
        "content": "<p>I <em>think</em> <code>ProbabilityMeasure</code> should mostly be used when you care about the <em>space</em> of probability measures, otherwise you can just use <code>IsProbabilityMeasure</code>. <span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kyt√∂l√§</span> does that sound right?</p>",
        "id": 385852931,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692346238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Integral.20and.20Expectation/near/385852931\">said</a>:</p>\n<blockquote>\n<p>I <em>think</em> <code>ProbabilityMeasure</code> should mostly be used when you care about the <em>space</em> of probability measures, otherwise you can just use <code>IsProbabilityMeasure</code>. <span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kyt√∂l√§</span> does that sound right?</p>\n</blockquote>\n<p>Yes!</p>\n<p>What Anatole describes should be the right conservative way to use <code>Measure</code>, <code>IsProbabilityMeasure</code>, and <code>ProbabilityMeasure</code>. It should first of all not cause objections, and it probably makes things work better in practice, too. For example having <code>(P : Measure Œ©) [IsProbabilityMeasure P]</code> will make using the whole measure theory library (including integrals) more straightforward, because then one doesn't need to coerce <code>ProbabilityMeasure Œ© ‚Üí Measure Œ©</code>. (It is <em>possible</em> to do the coercions and use <code>P : ProbabilityMeasure Œ©</code> instead, but one should only do this in some particular circumstances.)</p>\n<p>The main thing that <code>ProbabilityMeasure Œ©</code> has is the topology of convergence in distribution, so if you want to take <em>limits</em> of probability measures (for example limits of distributions of random variables), then you should work with <code>ProbabilityMeasure</code>. As a rule of thumb, otherwise not.</p>",
        "id": 385925827,
        "sender_full_name": "Kalle Kyt√∂l√§",
        "timestamp": 1692367996
    }
]