[
    {
        "content": "<p>Just had this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factors</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">n.factors</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">exact</span><span class=\"bp\">?%</span>\n</code></pre></div>\n<p>produces lots and lots of <code>Try this: fun a =&gt; ?_ a</code> (and nothing else).</p>",
        "id": 400303870,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699108588
    },
    {
        "content": "<p>Huh, that doesn't seem expected. Workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">n.factors</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span><span class=\"bp\">?%</span>\n</code></pre></div>",
        "id": 400305822,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699110362
    },
    {
        "content": "<p>What is <code>exact?%</code> supposed to do?</p>",
        "id": 400311891,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699115251
    },
    {
        "content": "<p><code>exact?%</code> is like <code>apply?</code>, but in term mode.</p>",
        "id": 400311950,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699115293
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 400362286,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699162005
    },
    {
        "content": "<p>Added a suitable import above.</p>",
        "id": 400372460,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699171697
    },
    {
        "content": "<p>Hmm, I'm baffled, some piece of state is being lost.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>is enough to demonstrate the problem. It prints </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">a</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">a</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">a</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span>\n\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>and many more.</p>",
        "id": 400376052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699175231
    },
    {
        "content": "<p>We can see from this that is really is finding solutions, but the <code>instantiateMVars</code><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/LibrarySearch.lean#L275\">here</a> isn't seeing the assignment that was made by <code>intros</code> a few lines up.</p>",
        "id": 400376054,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699175233
    },
    {
        "content": "<p>We are doing something tricky here: on the previous line we've just used <code>withMCtx</code>, but there must be some other state that is being lost in the shuffle.</p>",
        "id": 400376079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699175275
    },
    {
        "content": "<p>This was a little tricky, because the <code>mctx</code> shuffling was actually a red herring! The issue is actually that the <code>?_</code> appearing in <code>fun a =&gt; ?_ a</code> has a delayed assignment to (a function which produces the) <code>goal</code> we've created by <code>intros</code>. You can recreate the issue in traces immediately after <code>intros</code>, before doing any <code>librarySearch</code> logic. (<code>goal</code> is properly assigned down in the <code>withMCtx</code> block.) The relevant info about delayed assignment starts <a href=\"https://github.com/leanprover/lean4/blob/ea20911a85e59e031d19afa549178ddd169722ce/src/Lean/MetavarContext.lean#L109\">here</a>, I believe.</p>",
        "id": 400432530,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699229050
    },
    {
        "content": "<p>What I'm not sure of is why this is actually an issue in this case and not others—I'm not personally familiar with when delayed assignments are actually meant to be substituted in, or what actually goes wrong in this case.</p>",
        "id": 400432729,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699229231
    },
    {
        "content": "<p>So how do we convince Lean that it doesn't need to be delayed further? I'm worried this this might have been lost in the state shuffling?</p>",
        "id": 400432815,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699229310
    },
    {
        "content": "<p>Just a guess at this point, but I think it might be because there are pending goals involved, not because the state shuffling:</p>",
        "id": 400432856,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699229349
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">A</span> <span class=\"n\">delayed</span> <span class=\"n\">assignment</span> <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">metavariable</span> <span class=\"bp\">`?</span><span class=\"n\">m</span><span class=\"bp\">`.</span> <span class=\"n\">It</span> <span class=\"n\">represents</span> <span class=\"n\">an</span> <span class=\"n\">assignment</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"bp\">`?</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">fvars</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">mkMVar</span> <span class=\"n\">mvarIdPending</span><span class=\"o\">))</span><span class=\"bp\">`.</span>\n  <span class=\"bp\">`</span><span class=\"n\">mvarIdPending</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"n\">syntheticOpaque</span><span class=\"bp\">`</span> <span class=\"n\">metavariable</span> <span class=\"n\">that</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">synthesized</span> <span class=\"n\">yet.</span> <span class=\"n\">The</span> <span class=\"n\">delayed</span> <span class=\"n\">assignment</span> <span class=\"n\">becomes</span> <span class=\"n\">a</span> <span class=\"n\">real</span> <span class=\"n\">one</span>\n  <span class=\"n\">as</span> <span class=\"n\">soon</span> <span class=\"n\">as</span> <span class=\"bp\">`</span><span class=\"n\">mvarIdPending</span><span class=\"bp\">`</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">fully</span> <span class=\"n\">synthesized.</span>\n</code></pre></div>",
        "id": 400432864,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699229364
    },
    {
        "content": "<p>(I'm currently looking around for something like <code>instantiateMVarsNoDelayed</code>)</p>",
        "id": 400432961,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699229455
    },
    {
        "content": "<p>Delayed assignment metavariables variables are tricky -- they are not really metavariables themselves (they're never assigned), but the idea is that it's a \"lambda\" whose arguments are substituted into the <em>fvars</em> of the <code>mvarIdPending</code>. The only time you can really do this is once <code>mvarIdPending</code> itself is completely resolved (i.e., when its <code>instantiateMVars</code> comes up with a term with no mvars), since at that point you can locate all the relevant fvars and directly substitute the values.</p>\n<p>As far as I've understood it, this is a fundamental concept and you cannot force the assignment by \"abstracting away\" the delayed assignment metavariable with a lambda. This mechanism is how metavariables from one metavariable context are sort of transferred into another one. (One source of these, by the way, is <code>mkForallFVars</code> and <code>mkLambdaFVars</code> -- done by the <code>intro</code> tactic for example. These functions turn out to be smart and know how to abstract metavariables, but to do so they need to introduce delayed assignment metavariables to \"pass in\" the abstracted variables.)</p>",
        "id": 400433835,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699230129
    },
    {
        "content": "<p>Maybe the right solution here is just to remove the <code>intros</code> calls from <code>exact?</code>, and require that the user does this first??</p>",
        "id": 400434033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699230282
    },
    {
        "content": "<p>What if instead of returning <code>refine fun ... =&gt; b</code>, <code>apply?</code> returned <code>intros; refine b</code> when necessary? This would avoid the delayed assignments in the body of the <code>fun</code>. (<del>Is <code>intros</code> ever different from <code>MVarId.intros</code>?</del> It looks the same to me :) )</p>",
        "id": 400434833,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699230837
    },
    {
        "content": "<p>We could, I guess.</p>",
        "id": 400436535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699231855
    },
    {
        "content": "<p>I think it is better to decide that running <code>intros</code> was actually scope creep for <code>exact?</code>, and we should just not do it.</p>",
        "id": 400436560,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699231874
    },
    {
        "content": "<p>Will <code>exact?</code> still be able to close goals of the form <code>A → B</code> when there's a theorem of type precisely <code>A → B</code>?</p>",
        "id": 400445833,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699237941
    },
    {
        "content": "<p>Hmm, I guess it closed those with <code>fun</code>s anyway in the first place...</p>",
        "id": 400446173,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699238188
    }
]