[
    {
        "content": "<p>Why has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TensorProduct.lift#doc\">docs#TensorProduct.lift</a> been tagged as <code>noncomputable</code>?</p>",
        "id": 396361328,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697143243
    },
    {
        "content": "<p>Because it being assumed computable by Lean takes up precious seconds in CI. And it's not like we will ever evaluate it anyway.</p>",
        "id": 396361679,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697143439
    },
    {
        "content": "<p>It's more that it and everything dowstream of it takes up precious minutes in everyone's editors when trying to prove things</p>",
        "id": 396362449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697143808
    },
    {
        "content": "<p>I don't agree with the \"we'll never evaluate it\" claim, but I think we can put off doing so until the \"new compiler\" appears and solves all our problems <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 396362533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697143857
    },
    {
        "content": "<p>The issue for me is that I had taken time to define one function using a right inverse if it was given,  and that function was computable, and suddenly, merging master makes it noncomputable.</p>",
        "id": 396368274,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697146725
    },
    {
        "content": "<p>So I have a function tagged <code>noncomputable</code> whose docstring says that this is <code>computable</code> because we provide the right inverse…</p>",
        "id": 396368358,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697146771
    },
    {
        "content": "<p>Could you explain what made you bother making it computable in the first place?</p>",
        "id": 396368779,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697147017
    },
    {
        "content": "<p>Even if it's not computable, providing the right inverse is still a good idea because it means it reduces, possibly with nice defeqs</p>",
        "id": 396369349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697147330
    },
    {
        "content": "<p>If you conjure the inverse non-constructively, usually you end up having to prove it's equal to a particular right inverse eventually, so in the long run it's best to do it up front. This is a bit like how <code>Quotient.out</code> should usually be a last resort, because by the time you've proved the interesting things about it you've already done all the work you would have done to use <code>Quotient.lift</code> (admittedly the right inverse case isn't as strong an argument).</p>",
        "id": 396369587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697147456
    },
    {
        "content": "<p>Eric gave good reasons.<br>\nI give two other ones :</p>\n<ul>\n<li>I am annoyed at the prospect of using a proof assistant in an expensive computer and not being able to compute simple things</li>\n<li>If mathlib cared (much more) about computability, someone could write a <code>toposify</code> tactic that would take most of it and transfer it to general results in toposes, so that it wouldn't be necessary to make constructions on sheaves that already exist for sets/rings/modules…</li>\n</ul>",
        "id": 396369790,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697147571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>, for what it's worth the <code>noncomputable</code> everywhere also really annoys me; but the performance implication was outrageously bad, and until we can tell lean \"don't compile things until you need them\", the tradeoff was just too hard to justify</p>",
        "id": 396369930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697147650
    },
    {
        "content": "<p><code>TensorProduct.lift</code> should be really easy to compile, it's just \"iterate over a list and sum\"; so the fact it's awfully slow in the first place suggests that there is probably a nasty bug hiding in the compiler here somewhere.</p>",
        "id": 396370247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697147840
    },
    {
        "content": "<p>And nobody is motivated to find it because we're all waiting for the new compiler, which apparently isn't a priority.</p>",
        "id": 396370662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697148106
    },
    {
        "content": "<p>I suppose its possible we could work around this with an <code>@[implemented_by]</code> attribute on <code>TensorProduct.lift</code></p>",
        "id": 396370867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697148193
    },
    {
        "content": "<p>(where the implementation would be to use <code>Quotient.unquot</code> and <code>List.sum</code>)</p>",
        "id": 396370933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697148239
    },
    {
        "content": "<p>I'll try that out in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7649\">#7649</a></p>",
        "id": 396373584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697148985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/TensorProduct.2Elift.20-.20noncomputable/near/396369930\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span>, for what it's worth the <code>noncomputable</code> everywhere also really annoys me; but the performance implication was outrageously bad, and until we can tell lean \"don't compile things until you need them\", the tradeoff was just too hard to justify</p>\n</blockquote>\n<p>That I can understand.<br>\nAt least I hope than whenever <code>TensorProduct.lift</code> is made computable again, the compiler will complain that some functions can lose their <code>noncomputable</code> tag.</p>",
        "id": 396374314,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697149396
    },
    {
        "content": "<p>Sadly it won't</p>",
        "id": 396375119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697149848
    },
    {
        "content": "<p>It would be easy to write a metaprogram to find computables marked as noncomputable though.</p>\n<p>Also as much as I'd love a toposify tactic I think that will likely take longer than the new compiler / fixing the old compiler bug before we'll be using it on tensor products!</p>",
        "id": 396375987,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697150331
    },
    {
        "content": "<p>Also I'm not sure marking things noncomputable would have any effect on <code>toposify</code>, what matters for that is simply that classical axioms aren't used, not whether or not Lean compiles code for the definition.</p>",
        "id": 396376662,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697150728
    },
    {
        "content": "<blockquote>\n<p>At least I hope than whenever TensorProduct.lift is made computable again, the compiler will complain that some functions can lose their noncomputable tag.</p>\n</blockquote>\n<p>The temporary solution is to use <a href=\"https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20suppress_compilation&amp;type=code\">suppress_compilation</a> rather than adding <code>noncomputable</code> to every declaration, which will be easier to remove in the future.</p>",
        "id": 396558820,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1697224196
    }
]