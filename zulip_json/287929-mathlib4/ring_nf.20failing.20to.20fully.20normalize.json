[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span>\n  <span class=\"c1\">-- I expect h₀ to be `x = 5` now, but instead it is `x ^ 2 - (-x + x ^ 2) = 5`.</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 326257206,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675725624
    },
    {
        "content": "<p>A more minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span>\n  <span class=\"c1\">-- I expect h₀ to be `x = 0` now, but instead it is `0 + x = 0`.</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 326683156,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675889829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can you explain the purpose of this <code>guard !va.isAtom</code> line?<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/c16c0c414d4ea87bd10716ffd38b93d9d66aa215/Mathlib/Tactic/Ring/RingNF.lean#L97\">https://github.com/leanprover-community/mathlib4/blob/c16c0c414d4ea87bd10716ffd38b93d9d66aa215/Mathlib/Tactic/Ring/RingNF.lean#L97</a></p>\n<p>When I comment it out, the unexpected behavior goes away.</p>",
        "id": 326700348,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675896606
    },
    {
        "content": "<p>It is to prevent ring from doing useless rewrites all over the place</p>",
        "id": 326701020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675896900
    },
    {
        "content": "<p>but it's looking at the output of the rewrite, right?</p>",
        "id": 326701081,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675896924
    },
    {
        "content": "<p>yes, it's a bit awkward to detect whether the input was an atom because it hasn't been parsed yet</p>",
        "id": 326701214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675896966
    },
    {
        "content": "<p>If something rewrites to an atom, that doesn't sound useless to me.</p>",
        "id": 326701230,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675896977
    },
    {
        "content": "<p>for sure, this is a bug, but the fix is not so easy</p>",
        "id": 326701273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675897000
    },
    {
        "content": "<p>is there an existing github issue?</p>",
        "id": 326701346,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675897027
    },
    {
        "content": "<p>I'll open one if not</p>",
        "id": 326701353,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675897030
    },
    {
        "content": "<p>no</p>",
        "id": 326701354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675897030
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/issues/2171\">https://github.com/leanprover-community/mathlib4/issues/2171</a></p>",
        "id": 326702466,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675897494
    },
    {
        "content": "<p>could we add a <code>skipParse</code> field to either the cache or <code>eval</code> which would optionally hold the data necessary to skip the parsing part of <code>eval</code>? Then functions like <code>rewrite</code> could do it themselves (it could be <code>none</code> by default, so nothing would have to change everywhere)</p>\n<p>Or, maybe we could refactor the post-parsing part of <code>eval</code> into <code>eval.core</code> or something (which would still itself call <code>eval</code>, not <code>eval.core</code>) (I’m guessing this would need <code>mutual</code>)</p>",
        "id": 326774439,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675937578
    },
    {
        "content": "<p>if one of these would be acceptable I think I could do it</p>",
        "id": 326774581,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675937624
    },
    {
        "content": "<p>I don't understand <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>'s suggestion here. If they or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> have time to outline a proposed fix I can try implementing it.</p>",
        "id": 340249183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678239438
    },
    {
        "content": "<p>The issue is that <code>eval</code> does both parsing and evaluation simultaneously, so it is difficult to tell whether we took the code path \"it's an atom so we did nothing\" as distinct from \"it was not an atom but it was reduced to one\", and it's not easy to see what kind of additions we can make that don't impact performance in the normal case. I think the best option would be to just detect atoms directly, basically copying the code of <code>eval</code> but only using it to determine whether we would have done something other than the <code>evalAtom</code> path</p>",
        "id": 340251369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678239952
    },
    {
        "content": "<p>How did it work in mathlib3?</p>",
        "id": 340251950,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678240372
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2708\">!4#2708</a> hopefully implements Mario's suggestion, and resolves <a href=\"https://github.com/leanprover-community/mathlib4/pull/2171\">!4#2171</a>.</p>",
        "id": 340256621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678243006
    },
    {
        "content": "<p>I've made another attempt at this one. :-)</p>",
        "id": 340493443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678323341
    }
]