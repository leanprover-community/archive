[
    {
        "content": "<p>Has anyone given any thought to making something like the following work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 405418402,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701455922
    },
    {
        "content": "<p>Yes, I do this in <em>How To Prove It with Lean</em>.  Here's what I did:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"s2\">\"{ \"</span> <span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span>\n\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"s2\">\"{ \"</span> <span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">setOf</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">setOf.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"k\">then</span>\n        <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">})</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">throw</span> <span class=\"o\">()</span>  <span class=\"c1\">--Or could use `({ $x:ident | match $y:ident with | $pat =&gt; $p})</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span> <span class=\"k\">then</span>\n        <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">})</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">throw</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 405420015,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1701456606
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 405420141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701456677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> I think something like this would be nice to have in mathlib.</p>",
        "id": 405420334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701456752
    },
    {
        "content": "<p>Perhaps someone more knowledgeable than me could look this over and see if this is the right/best way to do it.</p>",
        "id": 405420615,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1701456879
    },
    {
        "content": "<p>This really is a question for <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 405428233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701460070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Pattern.20matching.20in.20set-builder.20notation/near/405420141\">said</a>:</p>\n<blockquote>\n<p>This works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I have no idea what (dark) magic is happening after <code>|</code>, don't even know which part of Lean syntax to use for parsing it in my mind. Even if I interpret them as a Prop, still no idea why this helped pattern matching.</p>\n<p>If I have only <code>#check (x) (y) (_ : f x y)</code>, this doesn't type check, it reports unknown identifier, just like a raw <code>(_ : f x y)</code> inside the notation. What's special after <code>|</code>?  (Particularly, this only works after importing Mathlib)</p>",
        "id": 405816919,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701694214
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"n\">is</span> <span class=\"kd\">notation</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">set</span> <span class=\"n\">of</span> <span class=\"n\">elements</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">constructed</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"n\">binders</span> <span class=\"n\">x</span> <span class=\"n\">and</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">equivalent</span> <span class=\"n\">to</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">}</span><span class=\"bp\">.</span>\n\n<span class=\"n\">If</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">single</span> <span class=\"n\">identifier</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">parenthesized</span> <span class=\"n\">to</span> <span class=\"n\">avoid</span> <span class=\"n\">ambiguity</span> <span class=\"k\">with</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"o\">{(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)}</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 405818364,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701694701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Pattern.20matching.20in.20set-builder.20notation/near/405818364\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"n\">is</span> <span class=\"kd\">notation</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">set</span> <span class=\"n\">of</span> <span class=\"n\">elements</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">constructed</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"n\">binders</span> <span class=\"n\">x</span> <span class=\"n\">and</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">equivalent</span> <span class=\"n\">to</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">}</span><span class=\"bp\">.</span>\n\n<span class=\"n\">If</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">single</span> <span class=\"n\">identifier</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">parenthesized</span> <span class=\"n\">to</span> <span class=\"n\">avoid</span> <span class=\"n\">ambiguity</span> <span class=\"k\">with</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"o\">{(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)}</span><span class=\"bp\">.</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks, I see, they are binders in this case.</p>",
        "id": 405823806,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701696417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> I'm not sure what's the best way, but the macros and unexpanders you have for set builder notation seem fine to me, and I think I'd write them the same as you did. (Note: your second case of the unexpander won't apply unless someone does <code>set_option pp.funBinderTypes true</code>. If you wanted, you could add an extra delaborator that sets this option right on that <code>fun</code> argument. We have such a delaborator hack <a href=\"https://github.com/leanprover-community/mathlib4/blob/65c51ee33388af047df9048bd7240b5976b47b7e//Mathlib/LinearAlgebra/LinearIndependent.lean#L111-L122\">here</a> to conditionally add binder types for <code>LinearIndependent</code>.)</p>",
        "id": 405904357,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701720781
    },
    {
        "content": "<p>Thanks Kyle.  In <em>How To Prove It with Lean</em> I do <code>set_option pp.funBinderTypes true</code>, because for educational purposes I think it's helpful to show types for all bound variables.  That's why I wanted to include the case with the type specified.</p>",
        "id": 405905246,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1701721157
    },
    {
        "content": "<p>That makes sense, and I figured you probably were using it somewhere. I'm passing along that delaborator hack in case you find it to be useful elsewhere (or at least to give you the idea that you could demand type hints in more places and that someone could get it to work.)</p>",
        "id": 405905743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701721361
    },
    {
        "content": "<p>I'd like to see binders in <code>Exists</code> globally myself, so that it matches how foralls are printed.</p>",
        "id": 405905830,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701721401
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8850\">#8850</a></p>",
        "id": 406366756,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1701888968
    }
]