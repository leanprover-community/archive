[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.PNat.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk'</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpk'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">k.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">k'</span><span class=\"o\">,</span> <span class=\"n\">hk'</span><span class=\"o\">⟩</span>\n  <span class=\"n\">dsimp</span> <span class=\"c1\">-- (doesn't do anything!?)</span>\n  <span class=\"c1\">-- I expect goal to be `p k'` here,</span>\n  <span class=\"c1\">-- but instead it's `p ↑{ val := k', property := hk' }`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 342867723,
        "sender_full_name": "David Renshaw",
        "timestamp": 1679194209
    },
    {
        "content": "<p>How can I get <code>{ val := k', property := hk' }.val</code> to reduce to <code>k'</code>? In mathlib3, <code>dsimp</code> worked here.</p>",
        "id": 342867800,
        "sender_full_name": "David Renshaw",
        "timestamp": 1679194291
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat.mk_coe#doc\">docs4#PNat.mk_coe</a> ?</p>",
        "id": 342938991,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679234262
    },
    {
        "content": "<p>I think the problem is that the arrow is PNat.val instead of Subtype.val (but these are defeq)</p>",
        "id": 342939172,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679234333
    },
    {
        "content": "<p>Yep, <code>rw[PNat.mk_coe]</code> works: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/commit/3cae4ff98f250319450f6ff408369f1822df2f15\">https://github.com/dwrensha/math-puzzles-in-lean4/commit/3cae4ff98f250319450f6ff408369f1822df2f15</a></p>",
        "id": 342943644,
        "sender_full_name": "David Renshaw",
        "timestamp": 1679236112
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 342943648,
        "sender_full_name": "David Renshaw",
        "timestamp": 1679236115
    },
    {
        "content": "<p>It's still counterintuitive to me that this doesn't just reduce on its own.</p>",
        "id": 342943719,
        "sender_full_name": "David Renshaw",
        "timestamp": 1679236143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> can you formalise a proof of IMO 1988 Q6 (the \"Vieta jumping\" problem)?</p>",
        "id": 342943955,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679236231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coercion.20from.20PNat.20to.20Nat.20is.20not.20reducing/near/342943955\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> can you formalise a proof of IMO 1988 Q6 (the \"Vieta jumping\" problem)?</p>\n</blockquote>\n<p>Have you seen <a href=\"https://leanprover-community.github.io/mathlib_docs/imo/imo1988_q6.html\">https://leanprover-community.github.io/mathlib_docs/imo/imo1988_q6.html</a>?</p>",
        "id": 342944710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679236554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coercion.20from.20PNat.20to.20Nat.20is.20not.20reducing/near/342938991\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PNat.mk_coe#doc\">docs4#PNat.mk_coe</a> ?</p>\n</blockquote>\n<p>This feels like it should be marked <code>simp</code>, and the porting note is wrong.</p>",
        "id": 342946600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679237200
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2989\">!4#2989</a></p>",
        "id": 342947954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679237693
    }
]