[
    {
        "content": "<p>I was trying to get to the bottom of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">950000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">140000</span> <span class=\"k\">in</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>in <code>RingTheory.Adjoin.Field</code>. One of the (several) problems in this file is some kind of typeclass unification issue. On this (quite fast) machine I see (in the <code>exact</code> at the end):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">158198</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommSemiring.toSemiring</span>\n</code></pre></div>\n<p>in the traces. This is taking 7 seconds and the pattern is the following. First it unfolds a bit, then it explodes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">158198</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">▼</span>\n                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">158189</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommRing.toCommSemiring.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing.toCommSemiring.1</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">158163</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n                            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">158157</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommRing.toRing.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommRing.toRing.1</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">157881</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n                                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">157873</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">Function.Surjective.ring</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">Quotient.mk''</span><span class=\"o\">)</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Quotient.mk''</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Quotient.mk''</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Quotient.mk''</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span>\n                                              <span class=\"n\">Quotient.mk''</span>\n                                                <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">Function.Surjective.ring</span> <span class=\"n\">Quotient.mk''</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">Quotient.mk''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Quotient.mk''</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Quotient.mk''</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">]),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n                                            <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Quotient.mk''</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span>\n                                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">Quotient.mk''</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Quotient.mk''</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>And then things calm down a bit and you run into things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">024850</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Monoid.npow</span> <span class=\"bp\">=?=</span> <span class=\"n\">Monoid.npow</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">193706</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddMonoidWithOne.toAddMonoid</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddMonoidWithOne.toAddMonoid</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">133736</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">MulZeroClass.toMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">MulZeroClass.toMul</span>\n</code></pre></div>\n<p>and all of them follow the same pattern -- they unfold a bit and then explode and then calm down and basically it's taking forever. </p>\n<p>Is there a trick where something could be made irreducible, or something, to stop this happening?</p>",
        "id": 364351562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686159329
    },
    {
        "content": "<p>My reading is that there are two ways to prove that whatever type this is is a <code>Ring</code> and they are not obviously defeq</p>",
        "id": 364352422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686159518
    },
    {
        "content": "<p>probably this is the same issue that came up before, the field structure does not extend the ring structure and so you have to work it down to individual pieces</p>",
        "id": 364352617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686159565
    },
    {
        "content": "<p>This instances are about <code>AdjoinRoot</code>, right?</p>",
        "id": 364353510,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686159755
    },
    {
        "content": "<p>Yes, <code>CommSemiring.toSemiring</code> is actually <code>@CommSemiring.toSemiring (AdjoinRoot (minpoly { x // x ∈ Algebra.adjoin F ↑s } a)) CommRing.toCommSemiring : Semiring (AdjoinRoot (minpoly { x // x ∈ Algebra.adjoin F ↑s } a))</code>(both of them look like this but presumably they're not syntactically equal with pp.all on, unfortunately pp.all is a bit hectic).</p>\n<p>Yes, the issue is that these things are defeq but it takes a fast machine 7 seconds to prove this. What do we do about this? That's what I don't understand.</p>",
        "id": 364357410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686160736
    },
    {
        "content": "<p>I guess there is some defeq diamond way at the bottom and then Lean has to unfold some fully massive construction applied to this to see that the results are still defeq</p>",
        "id": 364358111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686160864
    },
    {
        "content": "<p>So you think there _is_ a diamond?</p>\n<p>Mathematically the issue is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k[x]/(f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> is always a ring, and it's a field if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is irreducible, but the field structure doesn't extend the ring structure. Maybe this can be fixed?</p>",
        "id": 364358455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686160935
    },
    {
        "content": "<p>Well otherwise I suppose Lean would see that the terms are syntactically equal which would not take 7 seconds</p>",
        "id": 364358792,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686161020
    },
    {
        "content": "<p>Wait -- I thought I had fixed this last week:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">field</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Irreducible</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">AdjoinRoot</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">AdjoinRoot.instCommRing</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">Quotient.groupWithZero</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"k\">with</span>\n    <span class=\"n\">ratCast</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">of</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"n\">ratCast_mk</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">GroupWithZero</span> <span class=\"o\">(</span><span class=\"n\">AdjoinRoot</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Ideal.Quotient.groupWithZero</span> <span class=\"n\">_</span>\n      <span class=\"c1\">-- porting note: was</span>\n      <span class=\"c1\">-- `rw [Rat.cast_mk' (K := ℚ), _root_.map_mul, _root_.map_intCast, map_inv₀, map_natCast]`</span>\n      <span class=\"n\">convert_to</span> <span class=\"o\">((</span><span class=\"n\">Rat.mk'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinRoot</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinRoot</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">_root_.map_mul</span><span class=\"o\">,</span> <span class=\"n\">map_intCast</span><span class=\"o\">,</span> <span class=\"n\">map_inv₀</span><span class=\"o\">,</span> <span class=\"n\">map_natCast</span><span class=\"o\">]</span>\n      <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rat.cast_mk'</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_mul</span><span class=\"o\">,</span> <span class=\"n\">map_intCast</span><span class=\"o\">,</span> <span class=\"n\">map_inv₀</span><span class=\"o\">,</span> <span class=\"n\">map_natCast</span><span class=\"o\">]</span>\n    <span class=\"n\">qsmul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">qsmul_eq_mul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- porting note: I gave the explicit motive and changed `rw` to `simp`.</span>\n      <span class=\"n\">AdjoinRoot.induction_on</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_mk</span><span class=\"o\">,</span> <span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">RingHom.comp_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.rat_smul_eq_C_mul</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 364358954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686161052
    },
    {
        "content": "<p>did it get reverted?</p>",
        "id": 364359164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686161101
    },
    {
        "content": "<p>IIRC the result of our live debugging session was to use <code>toCommRing := AdjoinRoot.instCommRing f</code></p>",
        "id": 364359276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686161128
    },
    {
        "content": "<p>I think that you still get the same term. I just changed the definition of <code>field</code> locally to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">field</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Irreducible</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">AdjoinRoot</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Quotient.groupWithZero</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"k\">with</span>\n    <span class=\"n\">toCommRing</span> <span class=\"o\">:=</span> <span class=\"n\">AdjoinRoot.instCommRing</span> <span class=\"n\">f</span>\n    <span class=\"n\">ratCast</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">of</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>and we still take forever to solve <code> [] [11.496132s] ✅ CommSemiring.toSemiring =?= CommSemiring.toSemiring </code>. I will try braving <code>pp.all</code>.</p>",
        "id": 364367105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686163201
    },
    {
        "content": "<p>it seems that that is taking a different path than through the <code>toCommRing</code> projection :/</p>",
        "id": 364367802,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686163353
    },
    {
        "content": "<p>You made the change in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4507\">!4#4507</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AdjoinRoot.field#src\">src4#AdjoinRoot.field</a> says it wasn't reverted. You must be looking at old code.</p>",
        "id": 364369333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686163769
    },
    {
        "content": "<p>I suspect that the <code>toCommRing</code> fix you made is the tip of the iceberg; we'll have the same problem in things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.surjective.field#doc\">docs4#Function.surjective.field</a> too.</p>",
        "id": 364369596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686163842
    },
    {
        "content": "<p>Speculatively, the new-style structures give us a mild performance boost if we use them perfectly, but are a foot-gun in the presence of <code>with</code> notation that pretty much means they get used \"incorrectly\" every time</p>",
        "id": 364369839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686163914
    },
    {
        "content": "<p>(and are arguably therefore not worth the trouble for algebra, if they're so easy to use incorrectly)</p>",
        "id": 364369985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686163947
    },
    {
        "content": "<p>Eric, can you write something up (if you know, I suppose) about how to avoid the foot-gun with <code>with</code>? I understand it's about things being unpackaged and repackaged, but I'm not sure what the correct syntax is to avoid problems.</p>",
        "id": 364370172,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686164010
    },
    {
        "content": "<p>The \"correct\" syntax is to write <code>toBaseOne := _, toBaseTwo := _</code> for every \"preferred\" base class that the current structure has</p>",
        "id": 364370752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686164167
    },
    {
        "content": "<p>Of course, the fact that <code>toCommRing</code> is a \"preferred\" base class but <code>toDivisionRing</code> isn't is silly and non-mathematical</p>",
        "id": 364370921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686164220
    },
    {
        "content": "<p>So to know what the base class is, you can't appear to any mathematical insight and you instead have to <code>#print Field.mk</code> and look at the constructor arguments</p>",
        "id": 364371089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686164266
    },
    {
        "content": "<p>So I was indeed looking at old code (failure to understand how git works) but current mathlib master still exhibits the same problem. And pp.all takes my VS code down. Is there an option for just showing instance names explicitly?</p>",
        "id": 364372540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686164663
    },
    {
        "content": "<p>Isn't that <code>set_option pp.explicit true</code>?</p>",
        "id": 364374693,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686165279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RingTheory.2EAdjoin.2EField.20is.20slow/near/364358455\">said</a>:</p>\n<blockquote>\n<p>So you think there _is_ a diamond?</p>\n<p>Mathematically the issue is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k[x]/(f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> is always a ring, and it's a field if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is irreducible, but the field structure doesn't extend the ring structure. Maybe this can be fixed?</p>\n</blockquote>\n<p>I think the \"original sin\" is something else. <code>AdjoinRoot</code> is slow even without <code>irreducible f</code>, so without the <code>Field</code> instance.</p>",
        "id": 364393473,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686171340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I was just looking at the <code>RingTheory.Adjoin.Field</code> file because the<br>\nterrifying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">950000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">140000</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>caught my eye and I thought I'd try and understand it. Can you give me an example where something is slow and fields aren't involved?</p>",
        "id": 364396573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686172488
    },
    {
        "content": "<p>I don't have access to Lean for about 1 hour, but IIRC declarations around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AdjoinRoot.modByMonicHom#doc\">docs4#AdjoinRoot.modByMonicHom</a> are already quite slow. You can maybe have a look at the whole file (the declarations at the end are already slow in Lean3, but less slow).</p>",
        "id": 364397203,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686172743
    },
    {
        "content": "<p>I reckon <code>pp.proofs false</code> would make the trace a lot shorter, even with <code>pp.explicit true</code></p>",
        "id": 364402910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686175245
    }
]