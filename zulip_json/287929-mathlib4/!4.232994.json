[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2994\">!4#2994</a> I've managed to remove all deterministic timeouts but there are still several places where surprisingly Lean can't close goals, please help</p>",
        "id": 342987405,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679258360
    },
    {
        "content": "<p>Another problem lies at L352:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inv_apply</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">χ</span><span class=\"bp\">⁻¹</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">χ</span> <span class=\"o\">(</span><span class=\"n\">Ring.inverse</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_apply_eq_inv</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">IsUnit.map</span> <span class=\"n\">χ</span> <span class=\"n\">ha</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"n\">IsUnit.mul_right_injective</span> <span class=\"n\">h</span> <span class=\"c1\">-- here</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ring.mul_inverse_cancel</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">Ring.mul_inverse_cancel</span> <span class=\"n\">_</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">MulChar.map_one</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">revert</span> <span class=\"n\">ha</span>\n    <span class=\"n\">nontriviality</span> <span class=\"n\">R</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha</span>\n    <span class=\"c1\">-- `nontriviality R` by itself doesn't do it</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_nonunit</span> <span class=\"n\">_</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">Ring.inverse_non_unit</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">MulChar.map_zero</span> <span class=\"n\">χ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Knowing that <code>apply_fun</code> was recently augmented, how can it not see that the given function can be applied? (And how do I get <code>h</code> to appear to Lean for the using part?)</p>",
        "id": 342987551,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679258470
    },
    {
        "content": "<p>I've taken it as far as I can, though</p>",
        "id": 342987846,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679258697
    }
]