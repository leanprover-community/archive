[
    {
        "content": "<p>I just opened the work in progress PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7260\">#7260</a>. This is the long overdue PR bringing the <code>conv?</code>, <code>congrm?</code>, <code>gcongr</code> and <code>calc</code> widgets. More generally it provides a framework to easily build such widgets where users click on some sub-expressions and get links that generate bits of tactic scripts. It is currently blocked by <a href=\"https://github.com/EdAyers/ProofWidgets4/issues/26\">https://github.com/EdAyers/ProofWidgets4/issues/26</a> and, more seriously, it will require a lot of review work by <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> that will probably happen at least partly in the real world. But I already encourage users to play with this branch and give feedback from a user perspective. The example widgets are meant as minimal versions, especially for the calc widgets, but I could already implement small improvements or bug fixes. <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 391984094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695152678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I'm also interested in your opinion about the way this PR <a href=\"https://github.com/leanprover-community/mathlib4/blob/b8758bb2b8e50a41cba5094d22580c57255362ba/Mathlib/Tactic/Widget/Calc.lean#L136-L230\">redefines calc</a> to hook up the calc widget. Is this the way to go? Or should the core <code>calc</code> tactic somehow provide hooks that would allow to build the same functionality without the corresponding code duplication? Note that duplicated code is already out of sync with core master since Mathlib uses a version of core that has neither <a href=\"https://github.com/leanprover/lean4/commit/3e755dc0e199b40367a8ec9a592a343108a71c5a\">https://github.com/leanprover/lean4/commit/3e755dc0e199b40367a8ec9a592a343108a71c5a</a> nor <a href=\"https://github.com/leanprover/lean4/commit/0a59fd96a5189e92bfb7e9d58396d8bb6a9d1d8e\">https://github.com/leanprover/lean4/commit/0a59fd96a5189e92bfb7e9d58396d8bb6a9d1d8e</a>.</p>",
        "id": 391984565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695152908
    },
    {
        "content": "<p>Good question. It looks like all you're collecting for the widget is syntax, is that right? Wouldn't it be easier then to do that separately and then simply call the core elaborator?</p>",
        "id": 391991759,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695156117
    },
    {
        "content": "<p>I just recorded <a href=\"/user_uploads/3121/Z0eR8PogVNXza3SrKc87WNi0/widgets.gif\">widgets.gif</a> to show what this PR is about.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Z0eR8PogVNXza3SrKc87WNi0/widgets.gif\" title=\"widgets.gif\"><img src=\"/user_uploads/3121/Z0eR8PogVNXza3SrKc87WNi0/widgets.gif\"></a></div>",
        "id": 391992032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695156240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Select.20and.20insert.20widgets/near/391991759\">said</a>:</p>\n<blockquote>\n<p>Good question. It looks like all you're collecting for the widget is syntax, is that right? Wouldn't it be easier then to do that separately and then simply call the core elaborator?</p>\n</blockquote>\n<p>I'm collecting only syntax but I'm also calling <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/65bba7286e2395f3163fd0277110578f19b8170f/ProofWidgets/Compat.lean#L174\">savePanelWidgetInfo</a> which somehow records information about the goal.</p>",
        "id": 391993931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695157122
    },
    {
        "content": "<p>It probably does that later on from the info tree, so I believe you could call it strictly before or after running the core calc elaborator</p>",
        "id": 391994594,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695157415
    },
    {
        "content": "<p>I'm somewhat guessing here though</p>",
        "id": 391994626,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695157429
    },
    {
        "content": "<p>By the way, the fact that you have to construct that JSON yourself instead of relying on <code>ToJson</code> seems like a weakness in the API to me</p>",
        "id": 391994765,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695157480
    },
    {
        "content": "<p>I originally had a dedicated structure with a <code>deriving ToJson</code> for only one use but it felt silly.</p>",
        "id": 391994859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695157530
    },
    {
        "content": "<p>Using the <code>json%</code> macro seemed to be a nice alternative. The <code>open scope</code> isn't nice but it will  soon become unnecessary (we are waiting for <a href=\"https://github.com/leanprover-community/mathlib4/pull/7258\">#7258</a>).</p>",
        "id": 391995093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695157645
    },
    {
        "content": "<p>I don't really see how to implement that idea of \" call it strictly before or after running the core calc elaborator\" but Wojciech probably will.</p>",
        "id": 391995268,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695157721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Select.20and.20insert.20widgets/near/391994765\">said</a>:</p>\n<blockquote>\n<p>By the way, the fact that you have to construct that JSON yourself instead of relying on <code>ToJson</code> seems like a weakness in the API to me</p>\n</blockquote>\n<p>Maybe I misunderstood. Do you mean the API of <code>ProofWidgets.savePanelWidgetInfo</code>?</p>",
        "id": 391995361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695157779
    },
    {
        "content": "<p>Yes, since you are already passing it the type name anyway. It feels like there should be a more strongly typed API possible here. I understand that <code>SelectInsertParams</code> contains more fields than just the params but maybe that could be split somehow</p>",
        "id": 391995650,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695157918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Select.20and.20insert.20widgets/near/391995268\">said</a>:</p>\n<blockquote>\n<p>I don't really see how to implement that idea of \" call it strictly before or after running the core calc elaborator\" but Wojciech probably will.</p>\n</blockquote>\n<p>\"Running\" here really just means call core <code>evalCal</code> as a regular function after doing your <code>savePanelWidgetInfo</code> calls</p>",
        "id": 391995720,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695157939
    },
    {
        "content": "<p>But <code>savePanelWidgetInfo</code> is called for each calc line, not only once for the whole calc tactic.</p>",
        "id": 391995820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695157992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Select.20and.20insert.20widgets/near/391995650\">said</a>:</p>\n<blockquote>\n<p>Yes, since you are already passing it the type name anyway. It feels like there should be a more strongly typed API possible here. I understand that <code>SelectInsertParams</code> contains more fields than just the params but maybe that could be split somehow</p>\n</blockquote>\n<p>This somehow bumps into <a href=\"#narrow/stream/270676-lean4/topic/Inheritance.20question\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Inheritance.20question</a> again.</p>",
        "id": 391995878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695158028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Select.20and.20insert.20widgets/near/391995820\">said</a>:</p>\n<blockquote>\n<p>But <code>savePanelWidgetInfo</code> is called for each calc line, not only once for the whole calc tactic.</p>\n</blockquote>\n<p>Yes, you still need to walk through the syntax. But that's only a small part of the elaborator copied, isn't it?</p>",
        "id": 391995960,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695158053
    },
    {
        "content": "<p>Maybe I understood your suggestion. Do you mean <a href=\"https://github.com/leanprover-community/mathlib4/commit/180da0d94cf6bbf674c9c84331c1d394be75d55a\">https://github.com/leanprover-community/mathlib4/commit/180da0d94cf6bbf674c9c84331c1d394be75d55a</a>?</p>",
        "id": 391996927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695158521
    },
    {
        "content": "<p>Ah yes, that works too (assuming it works). But I believe you can still be more radical and also remove most code in the <code>elab_rules</code> by calling <code>evalCalc stx</code> there instead</p>",
        "id": 391997460,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695158768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Select.20and.20insert.20widgets/near/391997460\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">that</span> <span class=\"n\">works</span> <span class=\"n\">too</span> <span class=\"o\">(</span><span class=\"n\">assuming</span> <span class=\"n\">it</span> <span class=\"n\">works</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>Indeed it seems to work.</p>",
        "id": 391997589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695158845
    },
    {
        "content": "<p>I tried the more radical</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Elaborator for the `calc` tactic mode variant with widgets. -/</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"k\">calc</span><span class=\"bp\">%$</span><span class=\"n\">calcstx</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)</span><span class=\"bp\">%$</span><span class=\"n\">full</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">steps</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">calcSteps</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">stx</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">calcRange</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFileMap</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rangeOfStx</span><span class=\"bp\">?</span> <span class=\"n\">calcstx</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">indent</span> <span class=\"o\">:=</span> <span class=\"n\">calcRange.start.character</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">isFirst</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">for</span> <span class=\"n\">step</span> <span class=\"k\">in</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.getCalcSteps'</span> <span class=\"n\">steps</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">replaceRange</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFileMap</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rangeOfStx</span><span class=\"bp\">?</span> <span class=\"n\">step</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">calcStep</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">proofTerm</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">step</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">json</span> <span class=\"o\">:=</span> <span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ProofWidgets.Json</span> <span class=\"k\">in</span> <span class=\"n\">json</span><span class=\"bp\">%</span> <span class=\"o\">{</span><span class=\"s2\">\"replaceRange\"</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">replaceRange</span><span class=\"o\">),</span>\n                                                        <span class=\"s2\">\"isFirst\"</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">isFirst</span><span class=\"o\">),</span>\n                                                        <span class=\"s2\">\"indent\"</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">indent</span><span class=\"o\">)}</span>\n    <span class=\"n\">ProofWidgets.savePanelWidgetInfo</span> <span class=\"n\">proofTerm</span> <span class=\"bp\">`</span><span class=\"n\">CalcPanel</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">json</span><span class=\"o\">)</span>\n    <span class=\"n\">isFirst</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">evalCalc</span> <span class=\"n\">full</span>\n</code></pre></div>\n<p>but my widgets are gone.</p>",
        "id": 391999288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695159685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm really excited for this!  Can't wait to try it!</p>",
        "id": 392010766,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1695166362
    },
    {
        "content": "<p>You don't have to wait, you can fetch this branch and download the oleans (actually the oleans are not even necessary since no file import those tactics so old oleans would be good enough).</p>",
        "id": 392010974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695166503
    },
    {
        "content": "<p>With the latest bump of the ProofWidget library, <a href=\"https://github.com/leanprover-community/mathlib4/pull/7260\">#7260</a> now pleases the linters and can be reviewed.</p>",
        "id": 393832503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695951555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Select.20and.20insert.20widgets/near/391992032\">said</a>:</p>\n<blockquote>\n<p>I just recorded <a href=\"/user_uploads/3121/Z0eR8PogVNXza3SrKc87WNi0/widgets.gif\">widgets.gif</a> to show what this PR is about.</p>\n</blockquote>\n<p>This is now live in mathlib. Feel free to try and suggest improvements. Note also that a lot of this PR was about building a framework to make such widgets easy to build. So if you have any idea of a widget where you select stuff in the infoview and insert a tactic call then feel free to work on it (I have ideas if you want to play).</p>",
        "id": 395051098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696514665
    }
]