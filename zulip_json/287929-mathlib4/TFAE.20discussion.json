[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/8809#discussion_r1430502775\">this GitHub discussion</a>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and I were going back and forth about the value of TFAE. (Note: the following discussion will not apply to the PR because I have already delegated it, the point is to have a discussion about TFAE in Mathlib more generally.) To quote some relevant excerpts:</p>",
        "id": 408668294,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702924942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> said:</p>\n<blockquote>\n<p>Personally I don't think TFAE's have any value unless:</p>\n<ul>\n<li>None of the spellings are canonical</li>\n<li>The TFAE makes the proof shorter</li>\n</ul>\n<p>My claim is that TFAE's are no good as an API surface because:</p>\n<ul>\n<li>They are unergonomic to use (as you have to refer to the statements by index). This could indeed be addressed by using names, but I don't see <code>foo_tfae.out foo bar</code> being more ergonomic than <code>foo_iff_bar</code>.</li>\n<li>They end up with weird asymmetries. You can't possibly put every foo_iff_$BAR in the same tfae, as some will have import constraints forcing them to be placed in other files.</li>\n</ul>\n<p>TFAEs definitely have their place in setting up APIs, but I claim they should be an implementation detail.</p>\n</blockquote>",
        "id": 408668318,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702924957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> said:</p>\n<blockquote>\n<p>I think that our current tooling for TFAE is the problem. I think we at least need a way to name the things in the list so that they can be used with <code>List.TFAE.out</code></p>\n<p>TFAEs have tremendous value from a readability perspective. Even if you have other <code>↔</code> statements lying around. This alone is enough to merit writing them, even if the full TFAE only holds under special circumstances (i.e., with sufficiently strong type class assumptions).</p>\n<p>Moreover, proving a big TFAE is generally easier because if you have <code>n</code> statements you often only need <code>n</code> distinct <code>tfae_have</code>s, whereas to prove <code>1 ↔ 2</code>, ..., <code>1 ↔ n</code>, you need to show <code>2 * (n - 1)</code> different implications. A TFAE with 3 equivalences is arguably of insufficient value to warrant it, but a TFAE with 5 or more I think is easily worthwhile.</p>\n</blockquote>",
        "id": 408668339,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702924967
    },
    {
        "content": "<p>I would like community input here. I can see Eric's argument to some extent (e.g., if there's a canonical spelling, then just prove everything is equivalent to that and use that spelling everywhere), but I still disagree with the totality of the argument. Simply, I think we only need better tooling to make TFAE more useful. And note, I don't claim we should replace all existing <code>↔</code> with TFAE; sometimes it's worth having a dedicated <code>↔</code> for the most commonly used equivalences.</p>",
        "id": 408668347,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702924970
    },
    {
        "content": "<p>Just to add one more point in favor of TFAE: it's nice if there is a go-to declaration for all the equivalences instead of trying to find if the library has the particular one you want (or which chain of <code>rw</code>s you need to use to get there).</p>",
        "id": 408668655,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702925103
    },
    {
        "content": "<p>Thanks for starting this thread; I agree this is beyond the scope of that PR and deserves wider discussion</p>",
        "id": 408670535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702925956
    },
    {
        "content": "<p>Eric, do you remember that PR of mine where you had a similar comment?</p>",
        "id": 408670730,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702926021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> in case you are interested</p>",
        "id": 408670750,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702926029
    },
    {
        "content": "<p>I think the core of my claim is that \"TFAE's are no good <em>as an API surface</em>\". They are certainly useful as a tool to <em>build</em> an API surface, and indeed can be handy for documentation purposes; but using them in downstream proofs is almost always going to be:</p>\n<ul>\n<li>Less readable; <code>rw [foo_tfae.out 1 2]</code> is not an improvement over <code>rw [&lt;- foo_iff_bar, foo_iff_baz]</code>, and  something like <code>rw [%tfae_out foo_tfae bar baz]</code> at best breaks even, at the cost of needing clever elaborators.</li>\n<li>Less general; the tfae will assume the strongest typeclass used by all the <code>iff</code>s, whereas if a suitable <code>foo</code> exists it usually needs only weaker ones</li>\n<li>Less symmetric; <code>foo_tfae</code> can't reasoanably contain every equivalent characterization of <code>foo</code>, so at some point you end up with <code>rw [foo_tfae.out 1 0, foo_iff_a_baz_defined_downstream]</code></li>\n</ul>",
        "id": 408671376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702926233
    },
    {
        "content": "<p>Counterpoints:</p>\n<ul>\n<li>if we had naming, then <code>rw [foo_tfae.out bar baz]</code> would be more readable than <code>rw [← foo_iff_bar, foo_iff_baz]</code></li>\n<li>sometimes you simply already have the generality you need to use any of them (this is very much true in the case of the PR that generated this discussion)</li>\n<li>less symmetric: sometimes, yes, but maybe in those cases a TFAE really isn't appropriate. Or maybe you should just put the TFAE sufficiently far downstream that you get (almost) all of these.</li>\n</ul>",
        "id": 408672278,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702926580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/TFAE.20discussion/near/408670730\">said</a>:</p>\n<blockquote>\n<p>Eric, do you remember that PR of mine where you had a similar comment?</p>\n</blockquote>\n<p>My gmail inbox does, <a href=\"https://github.com/leanprover-community/mathlib4/pull/7863#discussion_r1370785015\">here</a>.</p>",
        "id": 408673120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702926928
    },
    {
        "content": "<p>I don't think <code>rw [foo_tfae.out bar baz]</code> could ever work. We can probably have either <code>rw [foo_tfae.out `bar `baz]`, or `rw [%tfae_out foo_tfae bar baz]</code>, where the latter has the advantage that hovering over <code>bar</code> and <code>baz</code> could display the lemma statement</p>",
        "id": 408673298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702927003
    },
    {
        "content": "<p>again, that's just a tooling problem. We just need to come up with a way that works. It's not a true argument against using TFAEs.</p>",
        "id": 408673560,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702927126
    },
    {
        "content": "<p>I suppose there is no harm in having both TFAE lemmas and also iff lemmas in the mean time?</p>",
        "id": 408674343,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702927448
    },
    {
        "content": "<p>sure, it's just a discussion about how prevalent TFAEs should be. Of course, even if we have a big TFAE, it still makes sense to have some of the individual <code>↔</code>, especially as <code>@[simp]</code> lemmas.</p>",
        "id": 408674493,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702927532
    },
    {
        "content": "<p>I'm not arguing in any way for the abolition of <code>↔</code>.</p>",
        "id": 408674561,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702927563
    },
    {
        "content": "<p>Maybe the tfae <em>surface</em> should use an environment extension. That way, it’s extensible, and it might be easier to support naming and other kinds of tooling. (It might even be possible to solve the typeclass generality problem to some extent, as we wouldn’t need to actually rely on a single term.)</p>",
        "id": 408677170,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702928783
    },
    {
        "content": "<p>Thomas, that sounds cool, but I have absolutely no idea how it would work, or if it could be made readable and useable. Would you mind elaborating a bit?</p>",
        "id": 408677868,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702929110
    },
    {
        "content": "<p>Sure! So, here's what I'm envisioning, more or less:</p>",
        "id": 408678318,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702929285
    },
    {
        "content": "<p>When you make a TFAE term, you can add <code>@[tfae foo]</code> to it, where <code>foo</code> is the name of the \"tfae group\" (so, just analogous to the <code>foo</code> in the name of the term <code>foo_tfae</code>.) If such a <code>foo</code> already exists, you also have to prove a \"link\" to the existing TFAE.</p>\n<p>(<em>Where</em> you prove this is ultimately an implementation/UX detail: do you use <code>@[tfae foo (link := &lt;proof&gt;)]</code>, or do you demand it's part of the proven term's overall type somehow? Either way, you give it to the extension, and the extension constructs the overall TFAE term from it.)</p>\n<p>Also...</p>",
        "id": 408679019,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702929594
    },
    {
        "content": "<p>...you include the names of the propositions somehow. There are basically three choices here imo: (1) via the <code>@[]</code>, e.g. <code>@[tfae foo (names := [bar, baz, ...])]</code>, (2) by metadata in the existing TFAE terms, or (3) we change what TFAE terms are such that they have \"intrinsic\" names even if they're not part of the extension. (I like 3.)</p>\n<p>When you want to infer a tfae lemma, you use nice syntax, e.g. <code>infer bar → baz</code>. (We could also then support <code>infer bar ↔︎ baz</code>.) (<code>infer</code> is just a placeholder, though.) This would look in the extension and extract the appropriate lemma.</p>\n<p>Note the absence of <code>foo</code>: it would be nice to to try to infer the tfae group from the individual names! Since the extension knows about the names, we can check if there's ambiguity when elaborating—if necessary, or for readability, we'd also support naming the group (e.g. <code>infer bar → baz from foo</code>—or whatever syntax is nicest. Again, just placeholders.).</p>\n<p>For potentially handling the typeclass generality...</p>",
        "id": 408680322,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702930047
    },
    {
        "content": "<p>...we could have a feature that lets you \"overlap\" parts of a TFAE group manually. Honestly, it would be nicest if you didn't have to do this manually, but I'm not sure this is possible (but maybe it is?).</p>\n<p>Nonetheless, I'm imagining something <em>roughly</em> like: you prove your <del>general</del> more restricted TFAE lemma that takes advantage of stronger hypotheses and tag it <code>@[tfae foo]</code>; and you prove the subset that relies only on the weaker typeclasses, then write <code>@[tfae foo subset]</code> or something like that. It would maybe use the individual names to figure out how to \"align\" these, and when you wrote <code>infer bar → baz from foo</code>, it would elaborate using the weaker version if both <code>bar</code> and <code>baz</code> were in the weaker <code>subset</code>, and the stronger version otherwise. Just a partial idea at this point, though.</p>",
        "id": 408681248,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702930539
    },
    {
        "content": "<p>Just to note: for the typeclass generality, I think you maybe said it backwards. You probably want to prove the <em>general</em> version with <em>weak</em> hypotheses first, then overlap with versions that have stronger hypotheses and more equivalences.</p>",
        "id": 408682395,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702931087
    },
    {
        "content": "<p>That does make more sense! :) (I also mixed up some words about generality—the wording is corrected now, but the content is left as-is.)</p>",
        "id": 408683006,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702931389
    },
    {
        "content": "<p>What do you do with the situation where file A has <code>@[tfae foo]</code> and file B has <code>@[tfae foo]</code> and then file C imports A and B? I guess we just error and it has to get fixed? (I'm thinking out loud; so half of what I say may be garbage.)</p>",
        "id": 408684145,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702932001
    },
    {
        "content": "<p>Hmm, good question...I guess we could demand that neither of them can <em>initialize</em> the <code>foo</code> group. So if the foo group is initialized in <code>X</code> and then both <code>A</code> and <code>B</code> import and extend it, in principle we <em>could</em> be okay: <code>A</code>'s enlargening of the tfae group links up to the initial tfae group from <code>X</code>, and so does <code>B</code>'s, so the new things from <code>A</code> and <code>B</code> are still equivalent (by going through the initial group).</p>\n<p>But how do we actually <em>get</em> this equivalence? We either: (1) do some import-time computation and construct the broader TFAE term in the extension (I don't know if we get the chance to do this; I think we do though?), or (2) store the additions to a TFAE group separately in the extension (no overall TFAE term), and compute the equivalences needed on the fly when we write <code>infer</code> (by going through the initial group).</p>",
        "id": 408685135,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702932521
    },
    {
        "content": "<p>(So, for example, in the latter case, the extension would have: (1) the initial <code>foo</code> TFAE group from <code>X</code> (2) the TFAE group from <code>A</code> plus a link to the one from <code>X</code> and (3) the TFAE group from <code>B</code> plus a link to the one from <code>X</code>. Then <code>infer bar → baz</code> would construct a path through the groups via the links as necessary.)</p>",
        "id": 408685511,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702932693
    },
    {
        "content": "<p>I think we should avoid doing computation on <code>import</code>. There's no reason to slow that down.</p>",
        "id": 408688267,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702933819
    },
    {
        "content": "<p>I really like the draft of the above idea, but it would be good if others would weigh in. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 408688314,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702933847
    },
    {
        "content": "<p>If we get naming, then IMHO we should have automation to generate <code>n(n-1)</code> lemmas <code>foo_iff_bar</code>.</p>",
        "id": 408689661,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702934532
    },
    {
        "content": "<p>Thomas, for extending, maybe you do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">tfae</span> <span class=\"n\">foo_group</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">general_tfae</span> <span class=\"o\">:</span> <span class=\"n\">List.TFAE</span> <span class=\"o\">[</span><span class=\"n\">foo₁</span><span class=\"o\">,</span> <span class=\"n\">foo₂</span><span class=\"o\">,</span> <span class=\"n\">foo₃</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">tfae</span> <span class=\"n\">bar_group</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">special_tfae</span> <span class=\"o\">:</span> <span class=\"n\">List.TFAE</span> <span class=\"o\">[</span><span class=\"n\">bar₁</span><span class=\"o\">,</span> <span class=\"n\">bar₂</span><span class=\"o\">,</span> <span class=\"n\">bar₃</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"n\">tfae</span> <span class=\"n\">bar_group</span> <span class=\"kd\">extends</span> <span class=\"n\">foo_group</span> <span class=\"o\">(</span><span class=\"n\">here</span> <span class=\"n\">you</span> <span class=\"n\">must</span> <span class=\"n\">provide</span> <span class=\"n\">proofs</span> <span class=\"n\">that</span> <span class=\"n\">foo</span><span class=\"bp\">ᵢ</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span><span class=\"bp\">ⱼ</span> <span class=\"n\">and</span> <span class=\"n\">barₖ</span> <span class=\"bp\">→</span> <span class=\"n\">fooₗ</span> <span class=\"n\">for</span> <span class=\"n\">some</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">l</span> <span class=\"n\">under</span> <span class=\"n\">the</span> <span class=\"n\">hypothese</span> <span class=\"n\">specified</span> <span class=\"kd\">by</span> <span class=\"bp\">`</span><span class=\"n\">special_tfae</span><span class=\"bp\">`</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then the when you write <code>infer foo₂ → bar₃</code> the extension would lookup the groups containing <code>foo₂</code> and <code>bar₃</code>, and see that one extends the other. Then it could generate the necessary <code>→</code> on the fly. I'm not sure what to do if <code>foo₂</code> occurs in both <code>foo_group</code> and <code>bar_group</code> though.</p>\n<p>Of course, this doesn't solve the problem of repeated group names, but maybe it's fine if those need to be unique anyway. If <code>infer</code> can get the group names correct anyway, then we shouldn't have to reference them. <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 408689673,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702934540
    },
    {
        "content": "<p>Yury, that's a lot of lemmas that we shouldn't even have automation create. If we can generate them on the fly, then what's the point? (I'm open to being convinced otherwise.)</p>",
        "id": 408689850,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702934639
    },
    {
        "content": "<p>Re: extending, is this for the weakening/strengthening notion of overlapping, or for enabling the linking of previously-defined groups? If the former I really like it!</p>\n<p>If the latter I think we should first strive to get the group names right from the get-go, so that they're both <code>foo</code> if possible (and so that the <code>foo</code> group originates in a single file imported by everything that uses it); but when that's not possible, or (importantly) when we want to enable linking up two groups that were not proveably equivalent prior to some downstream file, I think we should use a notion of \"linking\" or \"merging\" as opposed to extending (since there's no hierarchy involved)! (Should we also get to name the newly-formed supergroup so that stuff can get added to it \"directly\" (for organizational purposes)?)</p>\n<p>Re: potential proposition naming conflicts where <code>fooᵢ</code> appears in two linked groups: maybe names should be implicitly namespaced by the group, and we open all namespaces inside the elaboration of <code>infer</code>? E.g. we have <code>foo.foo₁</code>, but can still write <code>infer foo₁ → ... </code>, and if we have to disambiguate after linking , we can write <code>infer foo.foo₁ → ...</code>. This would also keep us from polluting the overall namespace.</p>",
        "id": 408690716,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702935900
    },
    {
        "content": "<p>(It also makes me wonder: why stop at TFAE? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> We could allow adding one-way implications to the extension as well! SCC can be pretty powerful. But sorting that out is definitely for another time.)</p>",
        "id": 408691984,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702936875
    },
    {
        "content": "<p>Regarding naming: yes, I was assuming TFAE item names would be namespaced within the group and that <code>infer</code> would open these namespaces.</p>",
        "id": 408693214,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702937447
    },
    {
        "content": "<p>As for linking: I feel like it's <em>much</em> less common to merge two previously unrelated groups than it is to extend by tacking on new equivalences under stronger hypotheses. In other words, I <em>do</em> implicitly think of this as a hierarchy, so in my mind the strengthing / linking are one and the same.</p>",
        "id": 408693377,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702937614
    },
    {
        "content": "<p>However, to really determine that we'll need a test bed of examples.</p>",
        "id": 408693378,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702937617
    },
    {
        "content": "<p>Gotcha, yeah, if weaker/stronger hypotheses are involved I agree that the hierarchical <code>extends</code> perspective is a good one. :)</p>",
        "id": 408695551,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702938863
    }
]