[
    {
        "content": "<p>How do I prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>I want to rewrite the left hand side to be 1, but I can't find a way to do that <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 337995890,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677329666
    },
    {
        "content": "<p>Does <code>rw f</code> work?</p>",
        "id": 338002875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677332280
    },
    {
        "content": "<p><code>simp [f]</code> will finish the proof</p>",
        "id": 338003275,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677332413
    },
    {
        "content": "<p>Using Eric's suggestion, another proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span>\n</code></pre></div>\n<p>where the <code>rintro</code> is short for <code>intro h</code> followed by <code>cases h</code>.</p>",
        "id": 338003390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677332482
    },
    {
        "content": "<p>Or, since you know what the LHS is, you can use <code>show</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- or however you want to complete this, including the `rintro` from before</span>\n</code></pre></div>",
        "id": 338003606,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677332570
    },
    {
        "content": "<p>Huh I swear <code>simp [f]</code> didn't work just now, maybe I changed something now that it works</p>",
        "id": 338005432,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677333265
    },
    {
        "content": "<p>Ah I see why, it says invalid 'simp', proposition expected. I think it's because my code is structured slightly differently. Do you mind taking a look?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">data.head</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 338006648,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677333667
    },
    {
        "content": "<p>I don't think you can use the definition of <code>f</code> from within <code>f</code> like that.</p>\n<p>I'd probably structure it differently, where you give <em>some</em> definition for <code>f</code> then prove it has the property you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">n</span>\n  <span class=\"o\">[</span><span class=\"n\">data.head</span><span class=\"bp\">!</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">f_ne_empty</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">f_succ</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[(</span><span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">f_ne_empty</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.head</span><span class=\"bp\">!</span><span class=\"n\">_of_head</span><span class=\"bp\">?</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.head</span><span class=\"bp\">?</span><span class=\"n\">_eq_head</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 338008492,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677334338
    },
    {
        "content": "<p>Ohh that's way better, I didn't know about <code>head!</code> which works perfectly :D</p>",
        "id": 338009957,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677334849
    },
    {
        "content": "<p>Also learned some new syntax from the theorem haha</p>",
        "id": 338009998,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677334862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> : in your last code snippet, there is no way to prove <code>f k n ≠ []</code>, since you haven't defined <code>f k n</code> yet. Maybe you were going to define <code>f k (n + 1) := []</code>, and then your claim would be false for <code>n &gt;= 1</code>.</p>",
        "id": 338011623,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677335474
    },
    {
        "content": "<p>Then what is <code>f</code> there, like why does it exist (or why can I use it)?</p>",
        "id": 338012303,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677335733
    },
    {
        "content": "<p>It's a free variable that Lean allows you to use to write recursive function calls. It has no definition yet.<br>\nLean will do various checks to make sure that what you write makes sense (e.g. without the <code>partial</code> keyword you cannot write <code>| n + 1 =&gt; f k (n + 1)</code>, since that would not result in a total function)</p>",
        "id": 338014894,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677336695
    }
]