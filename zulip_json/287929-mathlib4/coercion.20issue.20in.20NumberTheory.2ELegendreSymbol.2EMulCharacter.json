[
    {
        "content": "<p>Teaching is finally over, and I was looking at the state of the mathlib4 PRs. <a href=\"https://github.com/leanprover-community/mathlib4/pull/2994\">mathlib4#2994</a> <code>NumberTheory.LegendreSymbol.MulCharacter</code> caught my eye, it's not compiling right now. Here's an issue (on master, not on that branch):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CharP.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.EuclideanDomain.Instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.ConjFinite</span>\n\n<span class=\"c1\">-- The domain of our multiplicative characters</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- The target</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommMonoidWithZero</span> <span class=\"n\">R'</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Define a structure for multiplicative characters.</span>\n<span class=\"sd\">A multiplicative character from a commutative monoid `R` to a commutative monoid with zero `R'`</span>\n<span class=\"sd\">is a homomorphism of (multiplicative) monoids that sends non-units to zero. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MulChar</span> <span class=\"kd\">extends</span> <span class=\"n\">MonoidHom</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_nonunit'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">IsUnit</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">toFun</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">coeToFun</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">χ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">χ.toFun</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- evil</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_coe</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">χ.toMonoidHom</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">χ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">2000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Debug.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">χ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- `⊢ OneHom.toFun (↑χ.toMonoidHom) a = 0`</span>\n  <span class=\"c1\">-- Remark: in Lean 3 the goal is `⇑χ a = 0`</span>\n  <span class=\"n\">dsimp</span> <span class=\"c1\">-- loops</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">[Debug.Meta.Tactic.simp] rewrite result ↑χ.toMonoidHom a =&gt; OneHom.toFun (↑χ.toMonoidHom) a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] no theorems found for pre-rewriting OneHom.toFun (↑χ.toMonoidHom) a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] rewrite result OneHom.toFun (↑χ.toMonoidHom) a =&gt; ↑↑χ.toMonoidHom a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] no theorems found for pre-rewriting ↑↑χ.toMonoidHom a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] rewrite result ↑↑χ.toMonoidHom a =&gt; ↑χ.toMonoidHom a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] no theorems found for pre-rewriting ↑χ.toMonoidHom a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] rewrite result ↑χ.toMonoidHom a =&gt; OneHom.toFun (↑χ.toMonoidHom) a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] no theorems found for pre-rewriting OneHom.toFun (↑χ.toMonoidHom) a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] rewrite result OneHom.toFun (↑χ.toMonoidHom) a =&gt; ↑↑χ.toMonoidHom a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] no theorems found for pre-rewriting ↑↑χ.toMonoidHom a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] rewrite result ↑↑χ.toMonoidHom a =&gt; ↑χ.toMonoidHom a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] no theorems found for pre-rewriting ↑χ.toMonoidHom a</span>\n\n<span class=\"cm\">[Debug.Meta.Tactic.simp] rewrite result ↑χ.toMonoidHom a =&gt; OneHom.toFun (↑χ.toMonoidHom) a</span>\n\n<span class=\"cm\">...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I feel like coercions have changed a lot but now people understand the lean 4 versions. Seems to me that <code>coe_coe</code> is evil (it makes the linter time out and I think it's causing the loop). Two questions then: (1) why is the goal so much more ugly in mathlib4 than mathlib3 and (2) what is the recommended fix for this? The code above is just cherrypicked from the autoported <code>NumberTheory.LegendreSymbol.MulCharacter</code> other than the looping example (this showed up when trying to debug some errors in the file). Perhaps a better question is (3) is there now some place where we can read about Lean 4 coercions, how they've changed, and how I'm supposed to immediately spot that <code>coe_coe</code> is for some reason a bad lemma (I still don't really understand why) without having the timing out linter tell me this?</p>",
        "id": 343943344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679569934
    },
    {
        "content": "<p>It sounds like there are a bunch of lemmas like the ones in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3035\">!4#3035</a> which need re-adding</p>",
        "id": 343946090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679570596
    },
    {
        "content": "<p>We lost a lot of coercion lemmas due to mistakes early in the port that we only worked out how to correct later</p>",
        "id": 343946151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679570613
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coeToFun</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">χ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">χ.toFun</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>is an evil instance</p>",
        "id": 343946290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679570645
    },
    {
        "content": "<p>The better spelling is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">funLike</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">χ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">χ.toFun</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 343946454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679570694
    },
    {
        "content": "<p>Bu t the best thing to do is first backport a <code>monoid_hom_class</code> instance to mathlib3</p>",
        "id": 343946505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679570706
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib-port-status/file/number_theory/legendre_symbol/mul_character\">port-status#number_theory/legendre_symbol/mul_character</a> for reference)</p>",
        "id": 343946609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679570739
    },
    {
        "content": "<p>Is <code>CoeFun</code> evil in general? For example, in <code>CategoryTheory.ConcreteCategory.Basic</code>, we have a <code>CoeFun</code> definition which is used in <code>Algebra/Category/MonCat/Basic.lean</code> (and some other PR). Should we replace all these by <code>FunLike</code>?</p>",
        "id": 343969714,
        "sender_full_name": "Joël Riou",
        "timestamp": 1679576111
    },
    {
        "content": "<p>CoeFun is almost always the wrong choice for algebra. I can't really say for category theory</p>",
        "id": 343973919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679576942
    },
    {
        "content": "<p>In general if you extend something that uses <code>CoeFun</code> then you should also use <code>CoeFun</code></p>",
        "id": 343973994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679576956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> do you want to do the backport?</p>",
        "id": 344000860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679582517
    },
    {
        "content": "<p>Will this fix the issue with the ugly prettyprinter output in lean 4 or is that something else?</p>",
        "id": 344001091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679582557
    },
    {
        "content": "<p>Yes, it will fix that too</p>",
        "id": 344001723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679582652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coercion.20issue.20in.20NumberTheory.2ELegendreSymbol.2EMulCharacter/near/344000860\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> do you want to do the backport?</p>\n</blockquote>\n<p>Ehh, I could try</p>",
        "id": 344002134,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679582736
    },
    {
        "content": "<p>I haven't touched Lean 3 and mathlib3 yet, so what exactly needs to be done?</p>",
        "id": 344002898,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679582864
    },
    {
        "content": "<p>Oh it's OK, I can do it now. I just conjectured you'd do it more quickly but I have some time right now.</p>",
        "id": 344051762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679592859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coercion.20issue.20in.20NumberTheory.2ELegendreSymbol.2EMulCharacter/near/343946505\">said</a>:</p>\n<blockquote>\n<p>Bu t the best thing to do is first backport a <code>monoid_hom_class</code> instance to mathlib3</p>\n</blockquote>\n<p>Wait -- it's <a href=\"https://github.com/leanprover-community/mathlib/blob/0caf3701139ef2e69c215717665361cda205a90b/src/number_theory/legendre_symbol/mul_character.lean#L68-L72\">there already</a> right? So is the next thing to delete <code>coeToFun</code> in the mathlib4 version?</p>",
        "id": 344127002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679617024
    },
    {
        "content": "<p><code>instance : mul_char_class</code> needs to move up the file</p>",
        "id": 344129720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679618408
    },
    {
        "content": "<p>But doesn't need backporting</p>",
        "id": 344129762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679618426
    },
    {
        "content": "<p>I am reviving this thread since I am working on the port of <code>NumberTheory.LegendreSymbol.GaussSum</code>. Some of the difficulties I have  seem to be related to the issues discussed in this thread  and it seems that the solutions discussed here have not been yet implemented. Is this correct?</p>",
        "id": 368947819,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687536031
    },
    {
        "content": "<p>I certainly don't ever remember doing the thing I claimed I would do above.</p>",
        "id": 368968481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687540216
    },
    {
        "content": "<p>All right, so I think I'll try to incorporate the changes suggested above to <code>MulChar</code> in this PR and submit everything together for review.</p>",
        "id": 369014301,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1687552220
    }
]