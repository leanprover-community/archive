[
    {
        "content": "<p>Lean 4 is refusing to coerce an AddEquiv to a function. I don't really understand why. It's the cause of 80% of the remaining errors in this PR.</p>",
        "id": 323489478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674654631
    },
    {
        "content": "<p>Note that this PR will need to pick up some classical/decidable changes from mathlib master</p>",
        "id": 323496891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674656454
    },
    {
        "content": "<p>Ah nevermind, I see you <a href=\"https://github.com/leanprover-community/mathlib4/pull/1829/commits/51d738af9105805695676f61918e9f84f1f662d2\">already did that</a>!</p>",
        "id": 323497062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674656505
    },
    {
        "content": "<p>Don't forget to update the SHA to match</p>",
        "id": 323497125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674656518
    },
    {
        "content": "<p>Maybe we need a shortcut <code>FunLike</code> instance?</p>",
        "id": 323497217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674656531
    },
    {
        "content": "<p>In Lean 3 we had shortcuts for <code>has_coe_fn</code> instances, but those are no longer safe in Lean4. Shortcut FunLike instances should be fine though, as they still unfold to <code>FunLike.coe</code></p>",
        "id": 323497600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674656630
    },
    {
        "content": "<p>I don't understand the whole coe hierarchy. If someone else could help there, that would be great!</p>",
        "id": 323499160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674657002
    },
    {
        "content": "<p>In mathlib3:</p>\n<ul>\n<li>Classes like <code>add_equiv_class</code> inherit from <code>fun_like</code>, and ultimately are just a <code>to_fun</code> field along with the necessary hom properties. There's some extra stuff for equivs but that shouldn't matter here.</li>\n<li>There is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like.has_coe_to_fun\">docs#fun_like.has_coe_to_fun</a> instance which turns any of the derived hom classes into a <code>has_coe_to_fun</code> instance</li>\n<li>In practice, typeclass search is bad at finding this instances, so we have shortcuts like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_equiv.has_coe_to_fun\">docs#add_equiv.has_coe_to_fun</a></li>\n</ul>\n<p>In Mathlib4</p>\n<ul>\n<li>Same as above</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunLike.instCoeFun#doc\">docs4#FunLike.instCoeFun</a> is now unfolded during elaboration, so when you write <code>f x</code> for some hom <code>f</code> you're actually writing <code>FunLike.coe f x</code> which gives us the head symbol we need for lemmas to match</li>\n<li>The shortcut instances as written in Mathlib3 are now bad as they'd unfold to <code>f.to_fun x</code> not <code>FunLike.coe f x</code></li>\n<li>We can add new versions of these shortcut instances, either by implementing them as <code>FunLike.coe</code>, or by adding shortcut instances to <code>FunLike</code> instead</li>\n</ul>",
        "id": 323501627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674657596
    },
    {
        "content": "<p>We probably need this explanation in the porting wiki.</p>",
        "id": 323558526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674671911
    },
    {
        "content": "<p>I think it would be nice to have some documents like the \"extras\" (e.g. <a href=\"https://leanprover-community.github.io/extras/conv.html\">this</a>) explaining how things like coercions work now. Over in the \"What is an outParam\" thread I'm figuring out how type class inference works in Lean 4 (by people explaining it to me) and coercions is something else which I'm very hazy on.</p>",
        "id": 323559872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674672334
    },
    {
        "content": "<p>It's also true that for normal coercions, it's often useful to add a new function for the coercion, and then define the has coe to be that function instead of some more complicated term.</p>",
        "id": 323571357,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674675888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Can you point to an example where this comes up in practice?</p>",
        "id": 323619902,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674699776
    },
    {
        "content": "<p>Don't forget to tag that function <code>@[coe]</code> to make <code>norm_cast</code> work.</p>",
        "id": 323623250,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674702207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EDfinsupp.2EBasic.20!4.231829/near/323619902\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span>  Can you point to an example where this comes up in practice?</p>\n</blockquote>\n<p>One that springs to mind was the coercion <code>A -&gt; WithTop A</code>. In Lean3 this was defined to be <code>Option.some</code> which works because <code>WithTop A</code> is defined to be <code>Option A</code>. This caused elaboration problems. I think there was an example where the coercion was more than one symbol before the new function was defined but I can't find it.</p>",
        "id": 323702920,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674735067
    },
    {
        "content": "<p>Error free!</p>",
        "id": 324076254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674832536
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> for some help!</p>",
        "id": 324076365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674832556
    },
    {
        "content": "<p>Ready for review</p>",
        "id": 324084803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674834532
    }
]