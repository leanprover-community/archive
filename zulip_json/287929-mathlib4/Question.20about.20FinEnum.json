[
    {
        "content": "<p>If I have a set <code>A : Set Type u</code> that is a finenum <code>hA: FinEnum A</code>, and I have an element of A: <code>a : A</code>, is it possible to access a+1 (the next item in the enumneration, wrapped periodically)?</p>",
        "id": 361408106,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1685125382
    },
    {
        "content": "<p>I think you could do <code>FinEnum.Equiv.symm (FinEnum.Equiv a + 1)</code>, since <code>Fin</code> has wraparound addition</p>",
        "id": 361419944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685128908
    },
    {
        "content": "<p>Thank you! I'm getting an error: <code>failed to synthesize instance OfNat</code> Does this mean I need to instantiate FinEnum somehow?</p>",
        "id": 361424363,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1685130210
    },
    {
        "content": "<p>Oh, that's because it doesn't know that the cardinality of <code>A</code> isn't 0... Obviously it isn't because <code>a</code> witnesses that fact, but Lean doesn't know that <code>1 : Fin (FinEnum.card A)</code> is ok</p>",
        "id": 361425190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685130510
    },
    {
        "content": "<p>Here's a way to give it a hint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FinEnum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fin.neZero_of</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"o\">(</span><span class=\"n\">Fin.pos</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">next</span> <span class=\"o\">[</span><span class=\"n\">FinEnum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.neZero_of</span> <span class=\"o\">(</span><span class=\"n\">FinEnum.Equiv</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">FinEnum.Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">FinEnum.Equiv</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 361426374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685130912
    },
    {
        "content": "<p>(<code>haveI</code> is a way to get Lean to subsitute in the expression where it's used, rather than the definition involving any extra <code>let</code> or <code>fun</code>)</p>",
        "id": 361426534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685130961
    },
    {
        "content": "<p>Thank you! Because A is <code>Set Type u</code>, I had to redefine <code>next</code> as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">next</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">FinEnum</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.neZero_of</span> <span class=\"o\">(</span><span class=\"n\">hA.Equiv</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">hA.Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">hA.Equiv</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does this make sense? Or is there an easier way to proceed that I am missing? (I am not sure at all that I am understanding FinEnum properly: I understood it as <code>A</code> is a set whose elements are of Type u, and <code>A</code> is a FinEnum.)</p>",
        "id": 361430642,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1685132309
    },
    {
        "content": "<p>That's fine, it's that <code>A</code> coerced to a type is a <code>FinEnum</code>, though it's better to not name instance arguments.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">next</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FinEnum</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.neZero_of</span> <span class=\"o\">(</span><span class=\"n\">FinEnum.Equiv</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">FinEnum.Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">FinEnum.Equiv</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems like if the expected type is <code>α</code> rather than (the coercion of) <code>A</code> then elaboration goes a little off the rails.</p>",
        "id": 361431671,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685132655
    },
    {
        "content": "<p>Here's a workaround if you do want to coerce the result from <code>A</code> to <code>α</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">next</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FinEnum</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.neZero_of</span> <span class=\"o\">(</span><span class=\"n\">FinEnum.Equiv</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">FinEnum.Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">FinEnum.Equiv</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That's giving the elaborator a type hint so it can figure out which type <code>FinEnum.Equiv</code> is supposed to use.</p>",
        "id": 361431866,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685132723
    },
    {
        "content": "<p>OK, that seems to work. Thank you so much!</p>",
        "id": 361432819,
        "sender_full_name": "Ian Jauslin",
        "timestamp": 1685133025
    }
]