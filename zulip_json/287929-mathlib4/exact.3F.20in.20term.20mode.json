[
    {
        "content": "<p>Sometimes I'm trying to use exact? to find a term to close the goal (often because I can't remember its name), so I write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>It gives me back <code>exact Subset.rfl</code> (correctly), but the <code>Try this:</code> turns the proof into <code>:= by exact Subset.rfl</code>. I remember that Lean 3 <code>library_search</code> and similar could detect this kind of thing and make the proof <code>:= Subset.rfl</code>. Is this something we can easily do with <code>exact?</code> and <code>apply?</code>?</p>",
        "id": 398326879,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698166171
    },
    {
        "content": "<p>Sure you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">exact</span><span class=\"bp\">?%</span>\n</code></pre></div>\n<p>this isn't exactly answering your question of course, but hopefully its useful enough anyway <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 398328277,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698166714
    },
    {
        "content": "<p>It is! You solved the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem I didn't know I had :)</p>",
        "id": 398328419,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698166779
    },
    {
        "content": "<p>how does this magic work?</p>",
        "id": 398538562,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698257633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> the <code>exact?%</code> term elaborator is defined here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/7f885ee905fe01646967a99b54028c3270cce975/Mathlib/Tactic/LibrarySearch.lean#L289\">https://github.com/leanprover-community/mathlib4/blob/7f885ee905fe01646967a99b54028c3270cce975/Mathlib/Tactic/LibrarySearch.lean#L289</a></p>",
        "id": 398539947,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698258280
    }
]