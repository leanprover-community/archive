[
    {
        "content": "<p>In the last theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps!]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Functor.toOplaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">⥤</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OplaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">LocallyDiscrete</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">F.obj</span>\n  <span class=\"n\">map</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">F.map</span> <span class=\"n\">f.as</span>\n  <span class=\"n\">map₂</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">η</span> <span class=\"o\">:=</span> <span class=\"n\">eqToHom</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">eq_of_hom</span> <span class=\"n\">η</span><span class=\"o\">))</span>\n  <span class=\"n\">mapId</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">eqToHom</span> <span class=\"o\">(</span><span class=\"n\">F.map_id</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">mapComp</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">eqToHom</span> <span class=\"o\">(</span><span class=\"n\">F.map_comp</span> <span class=\"n\">f.as</span> <span class=\"n\">g.as</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.functor.to_oplax_functor</span> <span class=\"n\">CategoryTheory.Functor.toOplaxFunctor</span>\n</code></pre></div>\n<p>how can this kind of error message pop up?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">CategoryStruct.toQuiver</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">CategoryStruct.toQuiver</span>\n</code></pre></div>\n<p>And how do I fix the \"failed to synthesize instance\" errors further up?</p>",
        "id": 341174690,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678561650
    },
    {
        "content": "<p>What does the error look like with <code>set_option pp.all true</code> on? (put it on a line of its own before the declaration)</p>",
        "id": 341175936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678562386
    },
    {
        "content": "<p>This error usually means you can't use the <code>where</code> syntax and have to use <code>@SomeStructure.mk (field := val)</code> instead</p>",
        "id": 341176999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678563011
    },
    {
        "content": "<p>Though that depends which line the error appears on</p>",
        "id": 341177052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678563041
    },
    {
        "content": "<p>I think you need to fix the errors in the beginning of the file before worrying about the error in the last definition.</p>",
        "id": 341181710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678566346
    },
    {
        "content": "<p>I only took a quick look at this file, but it seems that there are some subtle points that will show up in porting this file due to some type synonyms being used (and possibly abused in mathlib3).</p>",
        "id": 341182647,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678567094
    },
    {
        "content": "<p>I got the file to build (and pushed).</p>",
        "id": 341184265,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678568446
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2821\">!4#2821</a> the mathlib3 proof almost works perfectly in mathlib4, but at the very start the coercion is applied too strongly resulting in a rewrite failure.</p>\n<p>I could split into cases based on the comparison between 1, a and b but that would look a bit ungainly.</p>\n<p>Should I rewrite the proof like that or is there a more elegant way around this?</p>",
        "id": 341237823,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678608810
    },
    {
        "content": "<p>I will take a look today</p>",
        "id": 341241310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678610750
    },
    {
        "content": "<p>Specifically <code>↑(a - (b - 1))</code> gets reduced to <code>(↑a - (↑b - 1))</code> at the start and it can't be restored without introducing assumptions (new goals) on a and b</p>",
        "id": 341244030,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678612157
    },
    {
        "content": "<p>The thing is, since the overarching field is now a <em>division ring</em> <code>K</code> instead of only a semiring <code>S</code>, I should be able to rewrite <code>(↑a - (↑b - 1))</code> back to <code>↑(a - (b - 1))</code> without generating assumptions since all elements now have additive inverses, but I can't see a function to do that</p>",
        "id": 341244254,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678612257
    },
    {
        "content": "<p>Insert brackets and coercion arrows so that Lean reads it as the intended thing again.</p>",
        "id": 341249572,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678614968
    },
    {
        "content": "<p>is there any other kind of coercion arrow other than <code>↑</code>?</p>",
        "id": 341250972,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678615622
    },
    {
        "content": "<p>Also this is not about introducing a coercion, but more about preventing one from rewriting the intended term</p>",
        "id": 341251769,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678615970
    },
    {
        "content": "<p>(I am AFK right now for dinner)</p>",
        "id": 341251781,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678615978
    },
    {
        "content": "<p>Yes there are other kinds of coercion, but here it's just a matter of writing <code>↑(a - (b - 1))</code> instead of <code>a - (b - 1)</code>.</p>",
        "id": 341252039,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678616094
    },
    {
        "content": "<p>whee, pushed the hotfix on mobile and the build succeeded! Thank you</p>",
        "id": 341253436,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678616746
    },
    {
        "content": "<p>I pushed some more fixes; there was no need to rewrite the proofs; one error was caused by implicit argument changes, and the other was a name clash</p>",
        "id": 341259979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678619726
    }
]