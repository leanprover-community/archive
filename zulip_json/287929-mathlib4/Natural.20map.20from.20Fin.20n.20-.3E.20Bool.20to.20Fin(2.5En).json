[
    {
        "content": "<p>(Moving on somewhat from what turned out to be a cul-de-sac: do we already happen to have the natural map from Fin n -&gt; Bool to Fin(2^n)? I'd quite like to use it...)</p>",
        "id": 376264652,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689669060
    },
    {
        "content": "<p>(I linked to the Fin 2 version of that above)</p>",
        "id": 376265045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689669175
    },
    {
        "content": "<p>(Apologies - can you possibly post it again?)</p>",
        "id": 376265629,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689669326
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finFunctionFinEquiv#doc\">docs#finFunctionFinEquiv</a></p>",
        "id": 376265955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689669407
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 376266090,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689669444
    },
    {
        "content": "<p>I think that means I should use <code>Fin 2</code> for my context.</p>",
        "id": 376266177,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689669469
    },
    {
        "content": "<p>If you want <code>Bool</code>, you can use <code>finTwoEquiv</code> along with that as well as this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.arrowCongr</span> <span class=\"o\">(</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 376266577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689669577
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.arrowCongr</span> <span class=\"o\">(</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">finTwoEquiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"n\">finFunctionFinEquiv</span>\n</code></pre></div>",
        "id": 376266846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689669647
    },
    {
        "content": "<p>I may as well be plain about my context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.BooleanRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Dist</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Notation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ControlBits</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"kd\">def</span> <span class=\"n\">ControlBitsOriginal</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">ControlBits</span>\n<span class=\"kd\">def</span> <span class=\"n\">foldFin</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Nat.dist</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">controlBitsToPerm</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ControlBits</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Function.update</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">foldFin</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">foldFin</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove</span> <span class=\"o\">(</span><span class=\"n\">foldFin</span> <span class=\"n\">i</span><span class=\"o\">)))))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">controlBitsToPermInvolutive</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ControlBits</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">Function.Involutive</span> <span class=\"o\">(</span><span class=\"n\">controlBitsToPerm</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ControlBits</span>\n</code></pre></div>",
        "id": 376267715,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689669838
    },
    {
        "content": "<p>So originally this was a way of defining a permutation on <code>Fin(2^(m+1))</code> via a member of <code>Fin ((2*m + 1)*2^m) → Bool</code>. It turns out to be much nicer to express that using the <code>Fin k -&gt; Bool</code> form for things.</p>",
        "id": 376268011,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689669907
    },
    {
        "content": "<p>Though somewhat hard to write down terms of type of <code>ControlBits m</code>.</p>",
        "id": 376268253,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689669968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Proposed.20refactor.20of.20Bitvec/near/376264652\">said</a>:</p>\n<blockquote>\n<p>(Moving on somewhat from what turned out to be a cul-de-sac: ...)</p>\n</blockquote>\n<p>I think it's best to split the thread at this message</p>",
        "id": 376271732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689670746
    },
    {
        "content": "<p>Agreed; this is a distraction.</p>",
        "id": 376278180,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689672211
    },
    {
        "content": "<p>It should probably change stream as well but I don't have the rights to do that I think.</p>",
        "id": 376278392,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1689672250
    },
    {
        "content": "<p>14 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Proposed.20refactor.20of.20Bitvec\">#mathlib4 &gt; Proposed refactor of Bitvec</a> by <span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span>.</p>",
        "id": 376700639,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689779325
    }
]