[
    {
        "content": "<p>How do I ask Lean to find a lemma whose statement is exactly <code> {α β : Type} (a : α) (b : β) : (a, b).1 = a</code>? Using <code>exact?</code> tells me this is <code>rfl</code>, which I already knew and is not my question. I tried various ways to ask <code>find</code>/<code>loogle</code> but it returns <em>many</em> irrelevant results and then times out.</p>",
        "id": 390528674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694527870
    },
    {
        "content": "<p>grep?</p>",
        "id": 390528941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694527951
    },
    {
        "content": "<p>Maybe <code>exact?</code> could have a reducibility setting?</p>",
        "id": 390529027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694527978
    },
    {
        "content": "<p>it doesn't help, this is a reducible refl</p>",
        "id": 390529067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694527990
    },
    {
        "content": "<p>and unfold reducibles is the lightest reducibility setting you can set</p>",
        "id": 390529145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694528020
    },
    {
        "content": "<p>Try <code>rw?</code></p>",
        "id": 390529190,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694528038
    },
    {
        "content": "<p><code>rw?</code> suggests <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.fst_eq_iff#doc\">docs#Prod.fst_eq_iff</a>, which isn't far</p>",
        "id": 390529226,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694528044
    },
    {
        "content": "<p>It's still not the right one.</p>",
        "id": 390529996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694528293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What's the right one? I haven't found one in mathlib.</p>",
        "id": 390532809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694529165
    },
    {
        "content": "<p>Here's an exact search command:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ExactSearch</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#find_exact \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">vars</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">withSynthesize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkForallFVars</span> <span class=\"o\">(</span><span class=\"n\">usedOnly</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">vars</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.levelMVarToParam</span> <span class=\"n\">e</span>\n  <span class=\"k\">if</span> <span class=\"n\">e.hasExprMVar</span> <span class=\"k\">then</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"Expression has metavariables:{indentD e}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Searching for {e}\"</span>\n  <span class=\"c1\">-- Look in particular for `e` with all level parameters set to 0</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">e.instantiateLevelParams</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLevelNames</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLevelNames</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">env.constants.foldM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">ci</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">ci.type.instantiateLevelParams</span> <span class=\"n\">ci.levelParams</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"n\">ci.levelParams.length</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ty</span> <span class=\"bp\">==</span> <span class=\"n\">e'</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">s.insert</span> <span class=\"n\">n</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">s</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"All matches: {r.toList}\"</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">patrick_lemma</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find_exact</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- All matches: [ExactSearch.patrick_lemma]</span>\n</code></pre></div>",
        "id": 390532843,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694529175
    },
    {
        "content": "<p>Caveat: it's an exact search after setting all universe level variables to 0, since the full problem would involve checking that there's a permutation of the universe levels variables.</p>",
        "id": 390532887,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694529188
    },
    {
        "content": "<p>I don't know what is the right one, otherwise I wouldn't be searching for it.</p>",
        "id": 390532944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694529206
    },
    {
        "content": "<p>I just assume it would be somewhere.</p>",
        "id": 390533047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694529242
    },
    {
        "content": "<p>The actual context of this question is at <a href=\"#narrow/stream/287929-mathlib4/topic/New.20exotic.20simp.20failure\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/New.20exotic.20simp.20failure</a></p>",
        "id": 390533215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694529284
    },
    {
        "content": "<p>I don't think it exists</p>",
        "id": 390533397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694529356
    },
    {
        "content": "<p>I had observed something similar elsewhere.  I had formed the idea that Lean generated internally a lemma that it uses to solve this equality and then discarded it.  Though I cannot reproduce what I observed in your specific case...</p>",
        "id": 390533890,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694529509
    }
]