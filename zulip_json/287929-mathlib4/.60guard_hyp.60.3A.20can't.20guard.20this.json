[
    {
        "content": "<p>Low priority, but I noticed that <code>guard_hyp</code> can't guard hypotheses that are (automatically) named <code>this</code>. Is there any way around this (and around <code>this</code>)?</p>",
        "id": 326765392,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675934801
    },
    {
        "content": "<p>presumably <code>\\f&lt;&lt;this\\f&gt;&gt;</code> works?</p>",
        "id": 326765767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675934911
    },
    {
        "content": "<p>I would like to fix this kind of issue once and for all by burninating the <code>this</code> keyword (making it an identifier again like in lean 3), but I don't have the energy to push that through core</p>",
        "id": 326766142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675935020
    },
    {
        "content": "<p>the original motivation for it was to make things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Just Work, but it makes so many other things Just Break that it doesn't seem worth it (the alternative for these kind of macros is to use <code>$(mkIdent `this)</code> instead of <code>this</code> to explicitly request a hygiene-less <code>this</code> identifier)</p>",
        "id": 326766640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675935172
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 326766919,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675935254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60guard_hyp.60.3A.20can't.20guard.20this/near/326765767\">said</a>:</p>\n<blockquote>\n<p>presumably <code>\\f&lt;&lt;this\\f&gt;&gt;</code> works?</p>\n</blockquote>\n<p>This does work! I noticed <code>«»</code> in <code>Qq</code> contexts but never found out what it actually does. (Doesn't seem to be in the metaprogramming book either, except to say that it's used for autogeneration of syntax node names) Does it force an interpretation as a name at the right level or something?</p>",
        "id": 326767250,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675935364
    },
    {
        "content": "<p><code>«foo»</code> is the identifier <code>foo</code> except that it also works if you replace <code>foo</code> by a newline or whatever.</p>",
        "id": 326767507,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675935439
    },
    {
        "content": "<p>oh, so is <code>«this»</code> kind of syntax for <code>this \":\" TSyntax `ident</code>?</p>",
        "id": 326767700,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675935490
    },
    {
        "content": "<p>More like <code>Name.str \"this\"</code></p>",
        "id": 326767820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675935529
    },
    {
        "content": "<p>except as an ident</p>",
        "id": 326767828,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675935534
    },
    {
        "content": "<p>I see, got it, thx!</p>",
        "id": 326767873,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675935548
    },
    {
        "content": "<p>whatever Lean does when it sees a normal (non-keyword, -punctuation, etc.) <code>foo</code>, it will also do for <code>«foo»</code> and whatever else you stick in there</p>",
        "id": 326767983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675935574
    },
    {
        "content": "<p>e.g. Mathport uses it to name some constructors of inductive types after the things they represent, like <code>Expr.«.»</code> for a field projection</p>",
        "id": 326768175,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675935619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60guard_hyp.60.3A.20can't.20guard.20this/near/326766142\">said</a>:</p>\n<blockquote>\n<p>I would like to fix this kind of issue once and for all by burninating the <code>this</code> keyword</p>\n</blockquote>\n<p>It's been at least a decade since I've seen anyone reference Homestar Runner. Might have to add this back into my lexicon.</p>",
        "id": 326815591,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675949522
    }
]