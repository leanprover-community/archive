[
    {
        "content": "<p>Is it considered good practice to have <code>HaveI</code>’s in statements ?</p>\n<p>Here is a concrete example: in <code>CategoryTheory/Limits/Shapes/Terminal.lean</code>, the end of the file deals with limits of functors over categories with an initial object. Most of the statements have a <code>[HasLimit F]</code> argument on top of a <code>[HasInitial J]</code> or <code>{j : J} {I : IsInitial j}</code>. Given what’s done in this file it’s easy to add an instance like <code>instance [h : HasInitial J] {F : J ⥤ C} : HasLimit F</code> to get rid of the <code>[HasLimit F]</code> on top of <code>[HasInitial J]</code>, but to get rid of it on top <code>{j : J} {I : IsInitial j}</code>it seems like I have to add <code>haveI := IsInitial.hasInitial I</code> to both statement and proofs (as both refer to the limit of F). For instance <code>isIso_π_of_isInitial</code> would become </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isIso_π_of_isInitial</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">IsInitial</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">IsInitial.hasInitial</span> <span class=\"n\">I</span>\n    <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">limit.π</span> <span class=\"n\">F</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">IsInitial.hasInitial</span> <span class=\"n\">I</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">limit.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">coneOfDiagramInitial</span> <span class=\"n\">I</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩⟩⟩</span>\n</code></pre></div>\n<p>Is this the \"right\" way of doing these kind of things?</p>",
        "id": 399481752,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1698752101
    },
    {
        "content": "<p>I tried to add some <code>instance {j : J} {I : IsInitial j} {F : J ⥤ C} : HasLimit F</code> but this did not work.</p>",
        "id": 399497826,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1698752638
    },
    {
        "content": "<p>Yeah, that won't work because type class inference can't work out the arguments. <code>haveI</code> is fine if it's needed</p>",
        "id": 399505940,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698753564
    },
    {
        "content": "<p>Ok, thanks! And style-wise, should I try to keep the <code>haveI</code>on a separate line or treat it just like any other term? <em>i.e</em> which of the tree block below fits more the \"canonical\" matlib style ? The style guidelines are not very clear about edge cases like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isIso_π_of_isTerminal</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">IsTerminal</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">IsTerminal.hasTerminal</span> <span class=\"n\">I</span>\n      <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">limit.π</span> <span class=\"n\">F</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">IsTerminal.hasTerminal</span> <span class=\"n\">I</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">limit.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">coneOfDiagramTerminal</span> <span class=\"n\">I</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isIso_π_of_isTerminal</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">IsTerminal</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">IsTerminal.hasTerminal</span> <span class=\"n\">I</span>\n    <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">limit.π</span> <span class=\"n\">F</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">IsTerminal.hasTerminal</span> <span class=\"n\">I</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">limit.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">coneOfDiagramTerminal</span> <span class=\"n\">I</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isIso_π_of_isTerminal</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">IsTerminal</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">IsTerminal.hasTerminal</span> <span class=\"n\">I</span><span class=\"bp\">;</span> <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">limit.π</span> <span class=\"n\">F</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">IsTerminal.hasTerminal</span> <span class=\"n\">I</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">limit.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">coneOfDiagramTerminal</span> <span class=\"n\">I</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 399519832,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1698758444
    },
    {
        "content": "<p>FWIW I personally prefer the middle one (not least because you can then add a comment at the end of the <code>haveI</code> line saying \"just doing this to help typeclass inference here\"</p>",
        "id": 399527134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698760730
    },
    {
        "content": "<p>btw I think <code>IsInitial.hasInitial</code> is not a very good name for something of type <code>HasLimit F</code>, and it would be helpful to write the type explicitly after <code>haveI</code> to make up for this</p>",
        "id": 399579012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1698776608
    },
    {
        "content": "<p>oh this isn't actually the type--I'm just confused (still)</p>",
        "id": 399579625,
        "sender_full_name": "Reid Barton",
        "timestamp": 1698776801
    },
    {
        "content": "<p>I think it'd be better to locally make <code>IsInitial.hasInitial</code> be an instance rather than use <code>haveI</code>, unless you don't want it to be an instance in general for some reason...</p>\n<p>For example, you could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">IsInitial.hasInitial</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">isIso_π_of_isInitial'</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">IsInitial</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsIso</span> <span class=\"o\">(</span><span class=\"n\">limit.π</span> <span class=\"n\">F</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">limit.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">coneOfDiagramInitial</span> <span class=\"n\">I</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩⟩⟩</span>\n</code></pre></div>",
        "id": 399580399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698777071
    },
    {
        "content": "<ol>\n<li>Shouldn't these be <code>have</code>'s? </li>\n<li>Personally, I like Kyle's style but either seems ok</li>\n</ol>",
        "id": 399580898,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698777245
    },
    {
        "content": "<p><code>haveI</code> keeps the type from being funky, it's \"inlined <code>have</code>\". Inside the proof, I'd prefer <code>have</code> because the <code>haveI</code> functionality isn't really necessary.</p>",
        "id": 399581084,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698777316
    },
    {
        "content": "<p>Right, I guess there is a readability benefit there.</p>",
        "id": 399581424,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698777438
    },
    {
        "content": "<p>But the cleanest for readability is probably the <code>attribute</code> approach. The type doesn't get mixed with other stuff in code or otherwise. </p>\n<p>Do we need <code>local</code> there though?</p>",
        "id": 399581858,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698777592
    },
    {
        "content": "<p>Yeah, if you don't the attribute becomes permanent.</p>",
        "id": 399584122,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698778420
    },
    {
        "content": "<p>I would expect <code>attribute ... in</code> not to leak</p>",
        "id": 399584767,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698778655
    },
    {
        "content": "<p>It's a foot gun, because I think everyone would think that.</p>",
        "id": 399584958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698778731
    },
    {
        "content": "<p>This (the <code>local attribute</code>way) does not seem to work in this case though. The point is that <code>IsInitial.hasInitial</code> requires an argument to put an <code>HasInitial</code> instance on <code>J</code>, and looks like I cannot give it an argument in this situation.</p>",
        "id": 399585619,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1698778945
    },
    {
        "content": "<p>Perhaps this can still be done by moving <code>j</code> and <code>I</code>to variables? </p>\n<p>Edit: nope, looks like it doesn’t accept arguments that way either</p>",
        "id": 399586152,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1698779106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inhabitedFoo</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- error</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">inhabitedFoo</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Foo.mk</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- succeeds</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It's not so surprising when you see that <code>$cmd₁ in $cmd₂</code> is a macro for <code>section $cmd₁ $cmd₂ end</code>.</p>",
        "id": 399586330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698779174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"286014\">@Robin Carlier</span> Ah, I didn't notice that this was putting an instance on <code>J</code> given the additional data <code>I</code>. I think you need <code>haveI</code> for this then, unless there's a class version of <code>IsInitial</code>.</p>",
        "id": 399586582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698779315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60HaveI.60in.20statements.2Fproofs/near/399586582\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"286014\">Robin Carlier</span> Ah, I didn't notice that this was putting an instance on <code>J</code> given the additional data <code>I</code>. I think you need <code>haveI</code> for this then, unless there's a class version of <code>IsInitial</code>.</p>\n</blockquote>\n<p>I don’t think there is a class for this so I’ll stick with <code>haveI</code>then. I ended up PRing a version with the <code>haveI</code> in the afternoon also.</p>",
        "id": 399587161,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1698779625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> what ever happened to that macro for specifying instances in a declaration?</p>",
        "id": 399590345,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698781059
    }
]