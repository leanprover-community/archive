[
    {
        "content": "<p>I think we're at the point where we can try some simple olympiad problems with mathlib4, so I'm going to try that right now on stream: <a href=\"https://www.twitch.tv/dwrensha\">https://www.twitch.tv/dwrensha</a></p>",
        "id": 314346813,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670369294
    },
    {
        "content": "<p>Can mathport not translate this stuff for you?</p>",
        "id": 314347599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670369633
    },
    {
        "content": "<p>yeah, but that's less fun</p>",
        "id": 314347739,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670369689
    },
    {
        "content": "<p>But can LeanAid (<a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/LeanAide.20translation.3A.20Natural.20language.20to.20Lean.204\">#lean4 &gt; LeanAide translation: Natural language to Lean 4</a>) translate it for you.  That sounds fun!</p>",
        "id": 314350021,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670370864
    },
    {
        "content": "<p>First problem: done!<br>\n<a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/5e87d4a793f9ec04846b63bdbbdd4ebe5c73f949/MathPuzzles/russia1998_q42.lean\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/5e87d4a793f9ec04846b63bdbbdd4ebe5c73f949/MathPuzzles/russia1998_q42.lean</a></p>",
        "id": 314354201,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670372699
    },
    {
        "content": "<p>I at first had </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and that didn't work due to an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">mul_right_inj'</span> <span class=\"bp\">?</span><span class=\"n\">m.7061</span><span class=\"o\">)</span> <span class=\"n\">h2</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">h2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">R</span> <span class=\"n\">NonUnitalNonAssocRing.toMul</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">R</span> <span class=\"n\">MulZeroClass.toMul</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 314354418,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670372781
    },
    {
        "content": "<p>but then when I did </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">RealLike</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>it worked.</p>",
        "id": 314354486,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670372808
    },
    {
        "content": "<p>(I don't think this is a Lean 3 / Lean 4 difference, just something that I stumbled on when trying to mock out the real numbers)</p>",
        "id": 314354632,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670372866
    },
    {
        "content": "<p>Tonight I'm going to try formalizing some MiniF2F problems with Mathlib4.  <a href=\"https://www.twitch.tv/dwrensha\">https://www.twitch.tv/dwrensha</a></p>",
        "id": 320567868,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673395279
    },
    {
        "content": "<p>Good luck!  But I imagine <a href=\"https://github.com/leanprover-community/mathlib4/pull/1102\">mathlib4#1102</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/1189\">mathlib4#1189</a> will be major obstacles ...</p>",
        "id": 320568065,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673395361
    },
    {
        "content": "<p>yeah, I'm probably going to mostly stick to ints and nats</p>",
        "id": 320568746,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673395752
    },
    {
        "content": "<p>We found a bug in one of the problems! <a href=\"https://github.com/openai/miniF2F/issues/125\">https://github.com/openai/miniF2F/issues/125</a></p>",
        "id": 320576044,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673400218
    },
    {
        "content": "<p>miniF2F has many such problems, there was a thread about that elsewhere. Facebook's version fixes a small fraction of those.</p>",
        "id": 320577242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673401029
    },
    {
        "content": "<p>fwiw, this particular bug is not fixed on the Facebook fork: <a href=\"https://github.com/facebookresearch/miniF2F/blob/5271ddec788677c815cf818a06f368ef6498a106/lean/src/valid.lean#L57-L66\">https://github.com/facebookresearch/miniF2F/blob/5271ddec788677c815cf818a06f368ef6498a106/lean/src/valid.lean#L57-L66</a></p>",
        "id": 320577415,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673401195
    },
    {
        "content": "<p>Last night on twitch, I formalized another IMO problem with mathlib4, and today I cut the recording of the 2-hour session into a fast(er) paced 11-minute video: <a href=\"https://youtu.be/9d2nicgd68Q\">https://youtu.be/9d2nicgd68Q</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"9d2nicgd68Q\" href=\"https://youtu.be/9d2nicgd68Q\"><img src=\"https://uploads.zulipusercontent.net/ddfa8b57ad0955586bb836ea31594335adb805b2/68747470733a2f2f692e7974696d672e636f6d2f76692f3964326e696367643638512f64656661756c742e6a7067\"></a></div>",
        "id": 323604292,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674689668
    },
    {
        "content": "<p>One interesting outcome was that I ran into this bug: <a href=\"#narrow/stream/287929-mathlib4/topic/weird.20interaction.20between.20.60mod_cases.60.20and.20.60induction.60/near/323603044\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/weird.20interaction.20between.20.60mod_cases.60.20and.20.60induction.60/near/323603044</a></p>",
        "id": 323604387,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674689725
    },
    {
        "content": "<p>Thanks! I enjoyed watching the video.</p>",
        "id": 323651430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674718303
    },
    {
        "content": "<p>Very nice. Would the <code>obtain \\&lt;n, h\\&gt; := ...; cases n</code> pattern be covered by <code>cases h : n</code>?</p>",
        "id": 323668473,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674724711
    },
    {
        "content": "<p>(The <code>obtain</code> by itself should be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Tactic.generalize#doc\">docs4#Lean.Parser.Tactic.generalize</a>)</p>",
        "id": 323668657,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674724789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/olympiad.20problems.20with.20mathlib4/near/323668473\">said</a>:</p>\n<blockquote>\n<p>Very nice. Would the <code>obtain \\&lt;n, h\\&gt; := ...; cases n</code> pattern be covered by <code>cases h : n</code>?</p>\n</blockquote>\n<p>Yep, thanks! I was hoping someone might teach me the right way to do that.</p>",
        "id": 323714119,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674738562
    },
    {
        "content": "<p>I enjoyed watching the video. With a slight rephrasing of the problem statement, I managed to golf the proof down to four lines. (I wonder if the <code>n + 3</code> case can be golfed further to a single line using <code>aesop</code>?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imo_1964_q1b</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_mod</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_mod</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">%</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">imo_1964_q1b</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 324730361,
        "sender_full_name": "Anand Rao",
        "timestamp": 1675098228
    },
    {
        "content": "<p>Probably not; Aesop is no better at equations than <code>simp</code>. You can golf it by putting a semicolon between <code>rw</code> and <code>simp</code>. ;)</p>",
        "id": 324731048,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675098386
    },
    {
        "content": "<p>This is the canonical easy IMO problem :-) Even the AIs can solve tuff one! Although they take far more lines to do so :-)</p>",
        "id": 324732672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675098777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/olympiad.20problems.20with.20mathlib4/near/324730361\">said</a>:</p>\n<blockquote>\n<p>I enjoyed watching the video. With a slight rephrasing of the problem statement, I managed to golf the proof down to four lines. </p>\n</blockquote>\n<p>Cool! Care to submit a pull request? <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4\">https://github.com/dwrensha/math-puzzles-in-lean4</a></p>",
        "id": 324736873,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675099958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Since we are on this topic, <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> and I were discussing this: how do we add <code>rw [blah]</code> as a tactic in an Aesop call/rule-set?</p>",
        "id": 324819723,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675134861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/olympiad.20problems.20with.20mathlib4/near/324736873\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/olympiad.20problems.20with.20mathlib4/near/324730361\">said</a>:</p>\n<blockquote>\n<p>I enjoyed watching the video. With a slight rephrasing of the problem statement, I managed to golf the proof down to four lines. </p>\n</blockquote>\n<p>Cool! Care to submit a pull request? <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4\">https://github.com/dwrensha/math-puzzles-in-lean4</a></p>\n</blockquote>\n<p>Done: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/pull/1\">https://github.com/dwrensha/math-puzzles-in-lean4/pull/1</a>.</p>",
        "id": 324822763,
        "sender_full_name": "Anand Rao",
        "timestamp": 1675137266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/287929-mathlib4/topic/olympiad.20problems.20with.20mathlib4/near/324819723\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> Since we are on this topic, <span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> and I were discussing this: how do we add <code>rw [blah]</code> as a tactic in an Aesop call/rule-set?</p>\n</blockquote>\n<p>If you don't want the rewrite to be a <code>simp</code> rule, this is currently the only way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[aesop safe]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myTactic</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">blah</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Admittedly not great. I'll try to come up with a better syntax for adding tactics.</p>",
        "id": 324889110,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675165352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/olympiad.20problems.20with.20mathlib4/near/324889110\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/287929-mathlib4/topic/olympiad.20problems.20with.20mathlib4/near/324819723\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> Since we are on this topic, <span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> and I were discussing this: how do we add <code>rw [blah]</code> as a tactic in an Aesop call/rule-set?</p>\n</blockquote>\n<p>If you don't want the rewrite to be a <code>simp</code> rule, this is currently the only way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[aesop safe]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myTactic</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">blah</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Admittedly not great. I'll try to come up with a better syntax for adding tactics.</p>\n</blockquote>\n<p>Thanks. So I take it for now it should be a single named tactic, not one with parameters.</p>",
        "id": 324897245,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675167783
    },
    {
        "content": "<p>The <code>rw [blah]</code> from my example works if <code>blah</code> is a defined constant. It could also work for hypotheses if Aesop had some syntax to support it. If you mean adding just <code>rw</code> and letting it figure out that it should rewrite with each hypothesis or something along those lines, that's probably not going to be supported.</p>",
        "id": 324899528,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675168480
    },
    {
        "content": "<p>Our goal is to call Aesop programmatically with a bunch of rules, some of which are specific instances of rw. So an API is fine</p>",
        "id": 324903500,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675169657
    },
    {
        "content": "<p>Essentially do a search with Aesop with a large number of rules which the indexing makes cheap and a small number of more carefully chosen tactics, mainly insurances of rw with specified parameters</p>",
        "id": 324904519,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1675169954
    },
    {
        "content": "<p>In that case you probably want to be going through the <code>MetaM</code>-level API. The entrypoint is <a href=\"https://github.com/JLimperg/aesop/blob/ba61f7fec6174d8c7d2796457da5a8d0b0da44c6/Aesop/Search/Main.lean#L220\"><code>search</code></a> and you'd want to pass a custom rule set. There's not much documentation (and not much thought has gone into this use case) but I'll be happy to help.</p>",
        "id": 324973427,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675186475
    },
    {
        "content": "<p>This week I formalized IMO 1964 Q4, a combinatorics problem: <a href=\"https://www.youtube.com/watch?v=TOzS4aC_K1g\">https://www.youtube.com/watch?v=TOzS4aC_K1g</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"TOzS4aC_K1g\" href=\"https://www.youtube.com/watch?v=TOzS4aC_K1g\"><img src=\"https://uploads.zulipusercontent.net/ae7fc6e1d2f7cbb8048f994892c48992286d5cfa/68747470733a2f2f692e7974696d672e636f6d2f76692f544f7a533461435f4b31672f64656661756c742e6a7067\"></a></div>",
        "id": 325548185,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675401164
    },
    {
        "content": "<p>Are you doing these things at a regular weekly time?</p>",
        "id": 325558592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675407508
    },
    {
        "content": "<p>I've been doing ~7pm Pittsburgh local time on Tuesdays.</p>",
        "id": 325618130,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675427719
    },
    {
        "content": "<p>Admittedly not a very Europe-friendly time.</p>",
        "id": 325618187,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675427737
    }
]