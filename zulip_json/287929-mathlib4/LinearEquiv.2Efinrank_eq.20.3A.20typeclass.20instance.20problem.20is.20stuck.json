[
    {
        "content": "<p>For this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.FiniteType</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uA</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"n\">ha.toLinearEquiv</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">    typeclass instance problem is stuck, it is often due to metavariables</span>\n\n<span class=\"cm\">    Module ?m.2272 ?m.2274</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"c1\">-- have hf := LinearEquiv.finrank_eq hl</span>\n\n  <span class=\"c\">/-</span>\n<span class=\"cm\">    application type mismatch</span>\n<span class=\"cm\">      LinearEquiv.finrank_eq hl</span>\n<span class=\"cm\">    argument</span>\n<span class=\"cm\">      hl</span>\n<span class=\"cm\">    has type</span>\n<span class=\"cm\">      @LinearEquiv R R CommSemiring.toSemiring CommSemiring.toSemiring (RingHom.id R) (RingHom.id R)</span>\n<span class=\"cm\">        (_ : RingHomInvPair (RingHom.id R) (RingHom.id R)) (_ : RingHomInvPair (RingHom.id R) (RingHom.id R)) A B</span>\n<span class=\"cm\">        NonUnitalNonAssocSemiring.toAddCommMonoid NonUnitalNonAssocSemiring.toAddCommMonoid Algebra.toModule</span>\n<span class=\"cm\">        Algebra.toModule : Type uA</span>\n<span class=\"cm\">    but is expected to have type</span>\n<span class=\"cm\">      @LinearEquiv R R Ring.toSemiring Ring.toSemiring (RingHom.id R) (RingHom.id R)</span>\n<span class=\"cm\">        (_ : RingHomInvPair (RingHom.id R) (RingHom.id R)) (_ : RingHomInvPair (RingHom.id R) (RingHom.id R)) A B</span>\n<span class=\"cm\">        AddCommGroup.toAddCommMonoid AddCommGroup.toAddCommMonoid inst✝⁵ inst✝⁴ : Type uA</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf'</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">LinearEquiv.finrank_eq</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hl</span>\n</code></pre></div>\n<p>I can't see why the types mismatch. Any ideas?</p>",
        "id": 402434235,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700130128
    },
    {
        "content": "<p>can you try <code>by convert hl</code> to see what the diamond is?</p>",
        "id": 402450115,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700135014
    },
    {
        "content": "<p>You put two additive structures on A and B</p>",
        "id": 402450125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700135020
    },
    {
        "content": "<p><code>[AddCommGroup A] [Semiring A]</code> is bad as it defines <code>+</code> twice; it should be <code>[Ring A]</code></p>",
        "id": 402450196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700135043
    },
    {
        "content": "<p>They come from the process trying to meet the need for both the <code>≃ₐ</code> and <code>finrank</code>. Changing the statement to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uA</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>gives me almost identical error.</p>",
        "id": 402452410,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700135738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LinearEquiv.2Efinrank_eq.20.3A.20typeclass.20instance.20problem.20is.20stuck/near/402450115\">said</a>:</p>\n<blockquote>\n<p>can you try <code>by convert hl</code> to see what the diamond is?</p>\n</blockquote>\n<p>Thanks, I don't understand where can I put this, tried a few places, none type checks.</p>",
        "id": 402452553,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700135785
    },
    {
        "content": "<p><code>[Module R A] [Algebra R A]</code> is bad for the same reason, the latter implies the former</p>",
        "id": 402452684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700135831
    },
    {
        "content": "<p>With both, you're giving two unrelated scalar multiplication actions</p>",
        "id": 402452725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700135845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LinearEquiv.2Efinrank_eq.20.3A.20typeclass.20instance.20problem.20is.20stuck/near/402452553\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LinearEquiv.2Efinrank_eq.20.3A.20typeclass.20instance.20problem.20is.20stuck/near/402450115\">said</a>:</p>\n<blockquote>\n<p>can you try <code>by convert hl</code> to see what the diamond is?</p>\n</blockquote>\n<p>Thanks, I don't understand where can I put this, tried a few places, none type checks.</p>\n</blockquote>\n<p>If I write <code>convert LinearEquiv.finrank_eq</code>, Lean hangs forever.</p>",
        "id": 402453022,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700135944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LinearEquiv.2Efinrank_eq.20.3A.20typeclass.20instance.20problem.20is.20stuck/near/402452684\">said</a>:</p>\n<blockquote>\n<p><code>[Module R A] [Algebra R A]</code> is bad for the same reason, the latter implies the former</p>\n</blockquote>\n<p>Thanks! That's probably the cause. Before merging into <code>Ring</code>, <code>Algebra</code> complains can't synth <code>Module</code>, and adding <code>Module</code> to address the complaint caused the stuck.</p>",
        "id": 402454443,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700136361
    },
    {
        "content": "<p>It now becomes the one-liner it should be: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uR</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uA</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">LinearEquiv.finrank_eq</span> <span class=\"n\">ha.toLinearEquiv</span>\n</code></pre></div>",
        "id": 402454603,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700136405
    },
    {
        "content": "<p>And this was the motive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.CliffordAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.CliffordAlgebra.Equivs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.FiniteType</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"Clℂ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CliffordAlgebra</span> <span class=\"n\">CliffordAlgebraComplex.Q</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">Clℂ</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">LinearEquiv.finrank_eq</span> <span class=\"n\">CliffordAlgebraComplex.equiv.toLinearEquiv</span>\n</code></pre></div>",
        "id": 402456714,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700137128
    }
]