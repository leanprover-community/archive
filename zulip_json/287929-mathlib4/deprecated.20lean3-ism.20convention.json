[
    {
        "content": "<p>is there a convention for naming theorems that should be deprecated but are ported for backwards compatibility? i'd rather avoid potentially-useful names like <code>(lean3) perm_induction_on -&gt; (lean4) perm_induction_on'</code>.</p>\n<p>would <code>perm_induction_on_deprecated</code> or <code>perm_induction_on_old</code> be acceptable?</p>",
        "id": 325013348,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675198373
    },
    {
        "content": "<p>the usual convention is just <code>@[deprecated] def perm_induction_on</code>, unless you want something else to take the name</p>",
        "id": 325013657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675198480
    },
    {
        "content": "<p>(just in case this has to do with a certain std4 PR: don't PR things that are deprecated from the start, just remove them and keep them in mathlib)</p>",
        "id": 325013914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675198564
    },
    {
        "content": "<p>I think in this case we would like to have a lemma called <code>perm_induction_on</code>, but its statement will be different from the mathlib3 <code>perm_induction_on</code> :/</p>",
        "id": 325014346,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675198710
    },
    {
        "content": "<p>(and I'd rather rename the deprecated version than the desired version...)</p>",
        "id": 325014436,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675198748
    },
    {
        "content": "<p>If there's no convention, I'll just rename the lean3 version to <code>perm_induction_on_old</code>. Seems reasonable enough.</p>",
        "id": 325014937,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675198899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/deprecated.20lean3-ism.20convention/near/325014346\">said</a>:</p>\n<blockquote>\n<p>I think in this case we would like to have a lemma called <code>perm_induction_on</code>, but its statement will be different from the mathlib3 <code>perm_induction_on</code> :/</p>\n</blockquote>\n<p>In that case, you should name the other one to <code>perm_induction_on'</code>, and use <code>#align</code> to ensure that mathlib uses go to the deprecated one</p>",
        "id": 325015690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199158
    },
    {
        "content": "<p>What will be the difference between lemmas?</p>",
        "id": 325015806,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675199192
    },
    {
        "content": "<p>E.g., for <code>list.repeat</code> vs <code>list.replicate</code>, I just backported the change.</p>",
        "id": 325015973,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675199255
    },
    {
        "content": "<p>It changes the induction principle statement to work with the new <code>elab_as_elim</code> stuff. So it's a lean4-specific change.</p>",
        "id": 325016022,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675199274
    },
    {
        "content": "<p>but how specifically?</p>",
        "id": 325016109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199298
    },
    {
        "content": "<p>it's not necessarily a lean4 specific change if it also works in lean 3</p>",
        "id": 325016175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199322
    },
    {
        "content": "<p>The comment from the ad-hoc port was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The way Lean 4 computes the motive with `elab_as_elim` has changed</span>\n<span class=\"sd\">relative to the behaviour of `elab_as_eliminator` in Lean 3.</span>\n<span class=\"sd\">See</span>\n<span class=\"sd\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Potential.20elaboration.20bug.20with.20.60elabAsElim.60/near/299573172</span>\n<span class=\"sd\">for an explanation of the change made here relative to mathlib3.</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 325016274,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675199354
    },
    {
        "content": "<p>that is missing the important part of the definition :)</p>",
        "id": 325016320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199375
    },
    {
        "content": "<p>Can you just copy+paste the statements of 2 lemmas?</p>",
        "id": 325016434,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675199408
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">perm_induction_on</span>\n    <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">h</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">h</span> <span class=\"bp\">→</span>\n      <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">~</span> <span class=\"n\">l₃</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">h₁</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"n\">h₂</span> <span class=\"bp\">→</span>\n      <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₃</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">perm_induction_on</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">[]</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">~</span> <span class=\"n\">l₃</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 325016481,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675199423
    },
    {
        "content": "<p>top is the new one</p>",
        "id": 325016551,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675199444
    },
    {
        "content": "<p>it seems fine to me, lean 3 uses probably won't even notice the difference</p>",
        "id": 325016631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199476
    },
    {
        "content": "<p>so a backport should just work</p>",
        "id": 325016660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199486
    },
    {
        "content": "<p>unless the motive is being provided explicitly but that's a relatively easy fix</p>",
        "id": 325016726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199511
    },
    {
        "content": "<p>Hum, okay. Are there instructions on how to do backports?</p>",
        "id": 325016820,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675199534
    },
    {
        "content": "<p>it's like any other mathlib3 change that may touch a ported file, you make the mathlib3 change and a parallel mathlib4 change</p>",
        "id": 325016922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675199581
    },
    {
        "content": "<p>For heavier changes, it can be easier to make the mathlib3 change and wait for mathlib3port to regenerate before making the mathlib4 change</p>",
        "id": 325021448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675201177
    }
]