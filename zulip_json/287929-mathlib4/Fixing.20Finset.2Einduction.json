[
    {
        "content": "<p>How do I get the <code>Finset.induction</code> line here to work and the <code>interₛ</code> function to compile?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Extreme</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Order.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"n\">Affine</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Set</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">PreorderSemiring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsExposed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">B.Nonempty</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PreorderSemiring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedRing</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">interₛ</span> <span class=\"o\">[</span><span class=\"n\">ContinuousAdd</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">F.Nonempty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hAF</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">IsExposed</span> <span class=\"bp\">𝕜</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsExposed</span> <span class=\"bp\">𝕜</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">⋂₀</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hF</span> <span class=\"n\">F</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Finset.induction</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- here</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span>\n    <span class=\"n\">exfalso</span>\n    <span class=\"n\">exact</span> <span class=\"n\">not_nonempty_empty</span> <span class=\"n\">h</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">C</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">hF</span> <span class=\"n\">_</span> <span class=\"n\">hCF</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.coe_insert</span><span class=\"o\">,</span> <span class=\"n\">interₛ_insert</span><span class=\"o\">]</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hFnemp</span> <span class=\"o\">:=</span> <span class=\"n\">F.eq_empty_or_nonempty</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.coe_empty</span><span class=\"o\">,</span> <span class=\"n\">interₛ_empty</span><span class=\"o\">,</span> <span class=\"n\">inter_univ</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hCF</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_singleton_self</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hCF</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_insert_self</span> <span class=\"n\">C</span> <span class=\"n\">F</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inter</span>\n    <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"n\">hFnemp</span> <span class=\"k\">fun</span> <span class=\"n\">B</span> <span class=\"n\">hB</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hCF</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_insert_of_mem</span> <span class=\"n\">hB</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 349339494,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681470548
    },
    {
        "content": "<p>I would recommend <code>induction F using finset.induction</code> (and dropping the <code>revert</code> too)</p>",
        "id": 349340038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681470697
    },
    {
        "content": "<p>It's from <a href=\"https://github.com/leanprover-community/mathlib4/pull/3453\">!4#3453</a>. With the original code (<code>refine' Finset.induction _ _</code>) I get the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.induction</span> <span class=\"bp\">?</span><span class=\"n\">m.24263</span> <span class=\"bp\">?</span><span class=\"n\">m.24264</span> <span class=\"n\">s</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">m.24260</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">IsExposed</span> <span class=\"bp\">𝕜</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IsExposed</span> <span class=\"bp\">𝕜</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">⋂₀</span> <span class=\"bp\">↑</span><span class=\"n\">F</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset.Nonempty</span> <span class=\"n\">F</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">IsExposed</span> <span class=\"bp\">𝕜</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IsExposed</span> <span class=\"bp\">𝕜</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">⋂₀</span> <span class=\"bp\">↑</span><span class=\"n\">F</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"kd\">variables</span> <span class=\"k\">have</span> <span class=\"n\">been</span> <span class=\"n\">introduced</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">implicit</span> <span class=\"n\">lambda</span> <span class=\"n\">feature</span>\n  <span class=\"n\">F</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">disable</span> <span class=\"n\">implicit</span> <span class=\"n\">lambdas</span> <span class=\"n\">using</span> <span class=\"bp\">`@`</span> <span class=\"n\">or</span> <span class=\"n\">writing</span> <span class=\"n\">a</span> <span class=\"n\">lambda</span> <span class=\"n\">expression</span> <span class=\"k\">with</span> <span class=\"bp\">`</span><span class=\"o\">{}</span><span class=\"bp\">`</span> <span class=\"n\">or</span> <span class=\"bp\">`</span><span class=\"o\">[]</span><span class=\"bp\">`</span> <span class=\"n\">binder</span> <span class=\"n\">annotations.</span>\n</code></pre></div>\n<p>which suggests to me that deleting an implicit variable somewhere should solve everything, but how do I do that?</p>",
        "id": 350189095,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681575892
    },
    {
        "content": "<p>Or how can I go on with the code I already have in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3453\">!4#3453</a>?</p>",
        "id": 350189328,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681576008
    },
    {
        "content": "<p>Did you try my suggestion above?</p>",
        "id": 350191897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681577387
    }
]