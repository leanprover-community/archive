[
    {
        "content": "<p>I am writing a linter to catch nonterminal simps. I am noticing that most of these nonterminal simps are followed by <code>rfl</code> is that considered ok / should the linter ignore this?</p>",
        "id": 394740451,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696384251
    },
    {
        "content": "<p>As I recall the rationale is that we don't want changes to the simp set to potentially break untouched files. Is it possible for a nonterminal simp like this which is immediately closed by rfl to do so?</p>",
        "id": 394742788,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696385555
    },
    {
        "content": "<p>Yes, it's certainly possible that changes to the simp set could make the <code>rfl</code> unnecessary.</p>",
        "id": 394744007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696386206
    },
    {
        "content": "<p>However it may be best to be pragmatic for now and let this pattern past the linter.</p>",
        "id": 394744033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696386222
    },
    {
        "content": "<p>This is really an edge case, I don't think we have a policy about it.</p>",
        "id": 394744114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696386252
    },
    {
        "content": "<p>I think most of those may have worked without the <code>refl</code> in lean 3. I'm not sure if anyone investigated what changed</p>",
        "id": 394761044,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696396892
    },
    {
        "content": "<p>I'm not too worried about <code>simp</code> solving the goal making the <code>rfl</code> redundant, but I've seen <code>simp</code> change goals that were syntactically different but definitionally equal into goals that were no longer definitionally equal</p>",
        "id": 394761462,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696397167
    },
    {
        "content": "<p>Though I agree that letting this slide in the initial version of the linter makes sense; we can always tighten later</p>",
        "id": 394762005,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696397563
    },
    {
        "content": "<p>In <code>mathlib3</code>, we sometimes had to switch <code>simp</code> and <code>simpa</code> in one way or another in order to make some refactors work. It seems the new <code>simpa</code>does not try <code>rfl</code>, so that we have to switch between <code>simp</code> and <code>simp; rfl</code> instead. I think the linter should not consider this is an issue.</p>",
        "id": 394846930,
        "sender_full_name": "Joël Riou",
        "timestamp": 1696427848
    },
    {
        "content": "<p>I think the fact that simpa tried rfl was a bug in lean3 and I remember people being unhappy about it.</p>",
        "id": 394847136,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696427896
    },
    {
        "content": "<p>Ok, the PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/7497\">#7497</a></p>",
        "id": 394913456,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696452079
    },
    {
        "content": "<p>I do not know if this is in scope, but looking at the output of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">ls</span><span class=\"bp\">-</span><span class=\"n\">files</span> <span class=\"bp\">'</span><span class=\"n\">Mathlib</span><span class=\"bp\">*.</span><span class=\"n\">lean'</span> <span class=\"bp\">|</span> <span class=\"n\">xargs</span> <span class=\"n\">awk</span> <span class=\"bp\">'</span>\n  <span class=\"n\">FNR</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">within</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"n\">within</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!/^</span> <span class=\"bp\">*</span><span class=\"n\">rfl</span><span class=\"bp\">$/</span> <span class=\"o\">{</span>\n    <span class=\"n\">within</span><span class=\"bp\">=</span><span class=\"mi\">0</span>\n    <span class=\"n\">line</span><span class=\"bp\">=</span><span class=\"n\">line</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">$</span><span class=\"mi\">0</span>\n    <span class=\"n\">gsub</span><span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"o\">[</span><span class=\"bp\">^</span> <span class=\"o\">]</span><span class=\"bp\">.*/</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"mi\">0</span> <span class=\"bp\">==</span> <span class=\"n\">indent</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">printf</span><span class=\"o\">(</span><span class=\"s2\">\"%s</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">,</span> <span class=\"n\">line</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"n\">indent</span><span class=\"bp\">=</span><span class=\"s2\">\"\"</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"bp\">/^</span>  <span class=\"bp\">*</span><span class=\"n\">simp</span><span class=\"o\">[</span> <span class=\"bp\">\\</span><span class=\"o\">[]</span><span class=\"bp\">/</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!/</span><span class=\"n\">simp</span> <span class=\"bp\">.*</span><span class=\"n\">only</span><span class=\"bp\">/</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">line</span><span class=\"bp\">=</span><span class=\"n\">FILENAME</span> <span class=\"s2\">\":\"</span> <span class=\"n\">FNR</span> <span class=\"s2\">\":</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">$</span><span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">gsub</span><span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"o\">[</span><span class=\"bp\">^</span> <span class=\"o\">]</span><span class=\"bp\">.*/</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span>\n  <span class=\"n\">within</span><span class=\"bp\">=</span><span class=\"mi\">1</span>\n  <span class=\"n\">indent</span><span class=\"bp\">=$</span><span class=\"mi\">0</span> <span class=\"o\">}</span><span class=\"bp\">'</span>\n</code></pre></div>\n<p>there are a few more non-terminal simps.  Here is a sample output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">SetTheory</span><span class=\"bp\">/</span><span class=\"n\">Ordinal</span><span class=\"bp\">/</span><span class=\"n\">Notation.lean</span><span class=\"o\">:</span><span class=\"mi\">625</span><span class=\"o\">:</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₂.zero_of_zero</span> <span class=\"n\">e0</span><span class=\"o\">,</span> <span class=\"n\">xe</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">Nat.cast_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_cast_succ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">add_mul_succ</span> <span class=\"n\">_</span> <span class=\"n\">ao</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">SetTheory</span><span class=\"bp\">/</span><span class=\"n\">Ordinal</span><span class=\"bp\">/</span><span class=\"n\">Notation.lean</span><span class=\"o\">:</span><span class=\"mi\">629</span><span class=\"o\">:</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">Mul.mul</span><span class=\"o\">,</span> <span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">e0</span><span class=\"o\">,</span> <span class=\"n\">repr_add</span><span class=\"o\">,</span> <span class=\"n\">opow_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">SetTheory</span><span class=\"bp\">/</span><span class=\"n\">Ordinal</span><span class=\"bp\">/</span><span class=\"n\">Notation.lean</span><span class=\"o\">:</span><span class=\"mi\">719</span><span class=\"o\">:</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">split_eq_scale_split'</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">split'</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">SetTheory</span><span class=\"bp\">/</span><span class=\"n\">Ordinal</span><span class=\"bp\">/</span><span class=\"n\">Notation.lean</span><span class=\"o\">:</span><span class=\"mi\">744</span><span class=\"o\">:</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IH₂</span><span class=\"o\">,</span> <span class=\"n\">split'</span><span class=\"o\">]</span>\n      <span class=\"n\">intros</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">SetTheory</span><span class=\"bp\">/</span><span class=\"n\">Ordinal</span><span class=\"bp\">/</span><span class=\"n\">Notation.lean</span><span class=\"o\">:</span><span class=\"mi\">764</span><span class=\"o\">:</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">scale</span><span class=\"o\">]</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">h.snd</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">SetTheory</span><span class=\"bp\">/</span><span class=\"n\">Ordinal</span><span class=\"bp\">/</span><span class=\"n\">Notation.lean</span><span class=\"o\">:</span><span class=\"mi\">788</span><span class=\"o\">:</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">repr_scale</span><span class=\"o\">,</span> <span class=\"n\">s₂.symm</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">SetTheory</span><span class=\"bp\">/</span><span class=\"n\">Ordinal</span><span class=\"bp\">/</span><span class=\"n\">Notation.lean</span><span class=\"o\">:</span><span class=\"mi\">981</span><span class=\"o\">:</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HPow.hPow</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Pow.pow</span><span class=\"o\">,</span> <span class=\"n\">opow</span><span class=\"o\">,</span> <span class=\"n\">Ordinal.succ_ne_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 394920250,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696455647
    },
    {
        "content": "<p>I really do not know python very much, but it seems that here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"n\">is_comment</span><span class=\"o\">)</span> <span class=\"n\">and</span> <span class=\"n\">re.search</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"s2\">\"^</span><span class=\"err\">\\</span><span class=\"s2\">s*simp$\"</span><span class=\"o\">,</span> <span class=\"n\">line</span><span class=\"o\">):</span>\n</code></pre></div>\n<p>you are matching <code>simp</code> followed by nothing else (this is implicitly confirmed by the shape of the squeezed simps in the PR).  However, there are a few uses of <code>simp [something]</code> that are not terminal.</p>",
        "id": 394924902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696458089
    },
    {
        "content": "<p>Ok thanks for that comment <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> , I have made a change to the PR to also match calls to <code>simp</code> that provide lemmas. This has resulted in even more things to fix, which I have put in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7580\">#7580</a>. I'd appreciate if some maintainer could look at it before it goes stale again.</p>",
        "id": 397240174,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697610556
    }
]