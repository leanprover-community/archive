[
    {
        "content": "<p>When I want to <code>rw</code> a function that I can't reduce to a MWE, Lean is stuck at solving the universe constraint. <br>\nThe error message seems to indicate that it rewrites things indefinitely. Has anyone seen/solved such a problem before?</p>",
        "id": 380427050,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690823201
    },
    {
        "content": "<p>Can you copy/paste the universe error?</p>",
        "id": 380428060,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690823396
    },
    {
        "content": "<p>Not really because I need to stop VSCode by closing the window…<br>\nI'll try to copy something</p>",
        "id": 380429746,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690823723
    },
    {
        "content": "<p>Oh I see... maybe a screenshot?</p>",
        "id": 380429830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690823744
    },
    {
        "content": "<p>Finally, I could ! (its much longer…)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"n\">u_4</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"n\">u_4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.894720</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)))</span>\n      <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁹</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁷</span> <span class=\"n\">N</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁶</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span> <span class=\"n\">N</span>\n        <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n          <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n            <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n              <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">κ</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)))))</span>\n        <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span>\n        <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">κ</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span>\n          <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)))</span>\n        <span class=\"n\">inst</span><span class=\"bp\">✝⁶</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁹</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁷</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁶</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span> <span class=\"n\">N</span>\n        <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n          <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n            <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n              <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">κ</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)))))</span>\n        <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span>\n        <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">κ</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span>\n          <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)))</span>\n        <span class=\"n\">inst</span><span class=\"bp\">✝⁶</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁹</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁷</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁶</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span> <span class=\"n\">N</span>\n        <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n          <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n            <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span>\n              <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">κ</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">κ</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">)))))</span>\n</code></pre></div>",
        "id": 380430076,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690823793
    },
    {
        "content": "<p>We have indeed run into various universe issues around <code>max</code>. Does adding explicit universe parameters for <code>generize</code> help at all?</p>",
        "id": 380430318,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690823849
    },
    {
        "content": "<p>By the way, if it can help, I am doing <code>rw [generize_comp_equiv f e m</code> with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">generize_comp_equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PolynomialMap</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">κ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">κ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">rTensor</span> <span class=\"n\">N</span>\n    <span class=\"o\">(</span><span class=\"n\">MvPolynomial.aeval</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">MvPolynomial.X</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">…</span> <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 380430583,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690823900
    },
    {
        "content": "<p>In that definition, I had needed to restrict <code>ι </code>to a type at the first level. <br>\n(And the ultimate goal of this, whatever it means, is that I have an obvious equality except that I have to pass from <code>Fin n</code> to <code>ULift (Fin n)</code>…  — maybe it is there that I should fix the universe problem.)</p>",
        "id": 380431100,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690824010
    },
    {
        "content": "<p>Do you have this code in a branch of mathlib4?</p>",
        "id": 380431468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690824086
    },
    {
        "content": "<p>For the moment, it is in an independent project with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> , but let me create a branch.</p>",
        "id": 380433164,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690824443
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover-community/mathlib4/tree/PolynomialMap\">branch#PolynomialMap</a></p>",
        "id": 380434623,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690824726
    },
    {
        "content": "<p>Part of the complexity may come from the equivalence <code>zooEquiv</code> which implements the module isomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>σ</mi><mo stretchy=\"false\">]</mo><mtext> </mtext><msub><mo>⊗</mo><mi>A</mi></msub><mi>M</mi></mrow><annotation encoding=\"application/x-tex\"> A[\\sigma] \\otimes_A M </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mclose\">]</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and a module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">[</mo><mi>σ</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> M [\\sigma] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mclose\">]</span></span></span></span> which mathlib does not know (yet).</p>",
        "id": 380436011,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690825001
    },
    {
        "content": "<p>Another source of universe complexity comes from your definition of <code>PolynomialMap</code>, since it quantifies over rings. So that means <code>PolynomialMap</code> itself will have some universe parameters which dont appear in the universe levels of <code>A</code>, <code>M</code> and <code>N</code>. The following would simplify things a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">PolynomialMap</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">N</span>\n  <span class=\"n\">isCompat</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">φ.toLinearMap.rTensor</span> <span class=\"n\">N</span> <span class=\"bp\">∘</span> <span class=\"n\">toFun</span> <span class=\"n\">R</span> <span class=\"bp\">=</span>\n      <span class=\"n\">toFun</span> <span class=\"n\">R'</span> <span class=\"bp\">∘</span> <span class=\"n\">φ.toLinearMap.rTensor</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 380437066,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690825200
    },
    {
        "content": "<p>Unfortunately, this would make the definition of <code>comp</code> somewhat more complicated if you want the most general universes possible.</p>",
        "id": 380438566,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690825515
    },
    {
        "content": "<p>This quantification over all rings is necessary, but the restriction to the universes that you suggest may be enough.<br>\n(In practice, one just needs to take for <code>R</code> a ring of polynomials in finitely many coefficients over <code>A</code>).</p>",
        "id": 380442930,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690826372
    },
    {
        "content": "<p>Yes, I suspected that was the case (i.e. only needing polys in finitely many vars), but trying out slightly more restrictive universes caused other issues with the def of <code>generize</code> because <code>\\iota</code> there was allowed to be in an arbitrary universe. I suppose a def with reasonable universe params would rather be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">PolynomialMap</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">N</span>\n  <span class=\"n\">isCompat</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">φ.toLinearMap.rTensor</span> <span class=\"n\">N</span> <span class=\"bp\">∘</span> <span class=\"n\">toFun</span> <span class=\"n\">R</span> <span class=\"bp\">=</span>\n      <span class=\"n\">toFun</span> <span class=\"n\">R'</span> <span class=\"bp\">∘</span> <span class=\"n\">φ.toLinearMap.rTensor</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 380443646,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690826496
    },
    {
        "content": "<p>This makes <code>comp</code> work out fine, but <code>generize</code> would have to be changed a bit.</p>",
        "id": 380443697,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690826507
    },
    {
        "content": "<p>In any case, I'm not actually seeing the universe issue pointed out above. Is it supposed to be at the comment labeled <code>-- Universe issue !</code>? The error i get by uncommenting that <code>rw</code> line is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">generize</span> <span class=\"n\">A</span> <span class=\"n\">N</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 380445633,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690826929
    },
    {
        "content": "<p>Indeed, the error appeared when I wanted to understand what was wrong and had changed <code>rw [generize_comp_equiv f e m]</code> to <code>let H := generize_comp_equiv f e m</code>.</p>",
        "id": 380497057,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690838581
    },
    {
        "content": "<p>Aha. I changed it to <code>let...</code> as you suggested, and got the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"n\">u.693712</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"n\">PolynomialMap</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁹</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁷</span> <span class=\"n\">N</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁶</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">PolynomialMap</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>This looks very similar to the universe unification issues we had in some parts of the category theory library!</p>",
        "id": 380497625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690838750
    },
    {
        "content": "<p>And some more details:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"n\">u.694060</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"n\">PolynomialMap.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.694060</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.694060</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁹</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁷</span> <span class=\"n\">N</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁸</span> <span class=\"n\">inst</span><span class=\"bp\">✝⁶</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">PolynomialMap.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 380498167,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690838877
    },
    {
        "content": "<p>The <code>max</code> is introduced in the declaration <code>generize_comp_equiv</code></p>",
        "id": 380498497,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690838966
    },
    {
        "content": "<p>What I would recommend is to restrict the universe parameters of the rings involved to all be the same, which would mean changing the definition of <code>PolynomialMap</code> to be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">PolynomialMap</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">N</span>\n  <span class=\"n\">isCompat</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">φ.toLinearMap.rTensor</span> <span class=\"n\">N</span> <span class=\"bp\">∘</span> <span class=\"n\">toFun</span> <span class=\"n\">R</span> <span class=\"bp\">=</span>\n      <span class=\"n\">toFun</span> <span class=\"n\">R'</span> <span class=\"bp\">∘</span> <span class=\"n\">φ.toLinearMap.rTensor</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>I think this should suffice for your applications? </p>\n<p>Also, if possible I would restrict the universe parameter of the finite types you're using. Preferably they should all be in <code>Type 0</code>, if possible, and otherwise using <code>Type u</code> where the base ring is also in <code>Type u</code> should be fine. </p>\n<p>What's the ultimate goal of this work?</p>",
        "id": 380500780,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690839734
    },
    {
        "content": "<p>Polynomial maps are the algebraic gadgets that formalize polynomial maps from a module to another.<br>\nWhen the source module is a free module, what we should get is quite easy: essentially polynomials valued in the target module, but the definition is more intricate when the source is not free. Then, the definition proceeds by saying that polynomial maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mi>M</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\"> f \\colon M \\to N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> are just functorial families of <em>maps</em> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>S</mi></msub><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mi>S</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>M</mi><mo>→</mo><mi>S</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\"> f_S \\colon S \\otimes_R M \\to S \\otimes_R N </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\"> R </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebras <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\"> S </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.<br>\nOne first result (that follows from taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\"> S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to be a ring of polynomials) shows that indeed, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\"> f </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> behaves as a polynomial on every finitely generated submodule, in the sense that  for any finite family <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>m</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(m_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, the image <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>S</mi></msub><mo stretchy=\"false\">(</mo><mo>∑</mo><msub><mi>s</mi><mi>i</mi></msub><mo>⊗</mo><msub><mi>m</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> f_S (\\sum s_i \\otimes m_i) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\"> s_i </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>We are at the point where we need to express what it means for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\"> f </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> to be homogeneous: this means both that universally, the maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>S</mi></msub></mrow><annotation encoding=\"application/x-tex\"> f_S </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are homogeneous, and also that the polynomials  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\"> p_m </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are homogeneous.<br>\nNow, why doing all that ? Because our ultimate goal (at least, for what regards Mathlib) with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>  is to fulfill <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's wish that we formalize the theory of divided power structures.</p>\n<p>One particularly delicate point of the theory is the construction of the divided power algebra of a module, and the divided power structure on its augmentation ideal. To that aim, it is necessary (at least, the only published proof works this way) to relate the graded pieces of the divided power algebra of a module to polynomial maps.</p>\n<p>This also has a relation with the recent discussion about quadratic form, because in some sense, the piece of degree 2 of the divided power algebra of a module is the target of the “universal” quadratic form on that module.</p>",
        "id": 380510981,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690843662
    },
    {
        "content": "<p>I should say that this project has turned into a far bigger can of worms than I could have ever imagined, but conversely I'm certainly looking forward to the paper!</p>",
        "id": 380512619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690844323
    },
    {
        "content": "<p>Yes, that's more-or-less what I gathered from your code, at least with regards to the polynomial maps. Anyway, since you only ever need to talk about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-algebras of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[X_1,\\ldots,X_n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, I think you can impose the universe restrictions I mentioned above, including assuming that the finite types (which I assume will only be used to index the variables in your polynomial rings) live in <code>Type 0</code>. Adding such universe restrictions should eliminate the universe issues you were facing.</p>\n<p>concerning divided powers, have you considered following an inductive approach similar to how the tensor algebra is defined here? <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/LinearAlgebra/TensorAlgebra/Basic.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/LinearAlgebra/TensorAlgebra/Basic.lean</a></p>\n<p>You won't get an explicit description, but presumably the universal property is the main thing you need?</p>",
        "id": 380513553,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690844688
    },
    {
        "content": "<p>Indeed. The definition of the divided powers is exactly defined as for the tensor algebra, with additional relations. We needed to add a lot of material to get the graded structure on the quotient.</p>",
        "id": 380515149,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690845464
    },
    {
        "content": "<p>Thank you Adam for your help, with a more precise condition on the universes, I could finally rewrite the whole stuff, <br>\nand prove half of the theorem I had been struggling for many hours. <br>\nJust for fun, and to make Kevin slightly angry, this is proposition I.1 (page 226) in Roby's 1963 paper, and his proof is as follows:</p>\n<blockquote>\n<p>La condition est trivialement suffisante. On voit qu'elle est nécessaire en prenant pour R une algèbre de polynômes.</p>\n</blockquote>\n<p>(I just proved the “trivially sufficient” condition…)<br>\n<a href=\"/user_uploads/3121/XpZFgQVZUzbU7N93SuwqkfpM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XpZFgQVZUzbU7N93SuwqkfpM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XpZFgQVZUzbU7N93SuwqkfpM/image.png\"></a></div>",
        "id": 380515989,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690845915
    },
    {
        "content": "<p>One remark before I go to bed: I had to fight a little bit with universes, because I needed to write a tensor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>∈</mo><mi>S</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>M</mi></mrow><annotation encoding=\"application/x-tex\"> t \\in S \\otimes_R M </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6542em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> as a  finite linear combination of tensors, but the type of indices had to live in a given universe. Fortunately, starting with a linear combination indexed by <code>Fin n</code>, I could use <code>ULift (Fin n)</code> up to rewriting the sum along the equivalence given by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.ulift%21#doc\">docs#Equiv.ulift!</a></p>",
        "id": 380516388,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690846097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Universe.20issue.20.28infinite.20loop.29/near/380515989\">said</a>:</p>\n<blockquote>\n<p>Thank you Adam for your help, with a more precise condition on the universes, I could finally rewrite the whole stuff, <br>\nand prove half of the theorem I had been struggling for many hours. <br>\nJust for fun, and to make Kevin slightly angry, this is proposition I.1 (page 226) in Roby's 1963 paper, and his proof is as follows:</p>\n<blockquote>\n<p>La condition est trivialement suffisante. On voit qu'elle est nécessaire en prenant pour R une algèbre de polynômes.</p>\n</blockquote>\n<p>(I just proved the “trivially sufficient” condition…)<br>\n<a href=\"/user_uploads/3121/XpZFgQVZUzbU7N93SuwqkfpM/image.png\">image.png</a></p>\n</blockquote>\n<p>And he didn't even have to fit his proof into a margin!</p>",
        "id": 380517631,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690846773
    },
    {
        "content": "<p>;-)</p>",
        "id": 380569272,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690870605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Universe.20issue.20.28infinite.20loop.29/near/380510981\">said</a>:</p>\n<blockquote>\n<p>This also has a relation with the recent discussion about quadratic form, because in some sense, the piece of degree 2 of the divided power algebra of a module is the target of the “universal” quadratic form on that module.</p>\n</blockquote>\n<p>Is there a canonical map out of this piece of degree 2 back to the original ring that doesn't multiply by the divided power (which is zero)? If not, then isn't the fact this is universal a proof that we're in trouble with a base change in char 2?</p>",
        "id": 381614896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691098874
    }
]