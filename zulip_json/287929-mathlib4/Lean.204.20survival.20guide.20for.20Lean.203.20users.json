[
    {
        "content": "<p>I added a page to the Mathlib 4 wiki with a <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users\">Lean 4 survival guide for Lean 3 users</a>. It is part of the mathlib repo, since I want to document changes that are only relevant for mathlib users.</p>\n<p>Please contribute if you notice anything that is missing!</p>",
        "id": 361184163,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1685057787
    },
    {
        "content": "<p>Wrote a little note about <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Lean-4-survival-guide-for-Lean-3-users#cache\">Cache</a> on the page because I was pretty confused about this myself a few weeks ago. This was just written in two minutes based on my own naive understanding, so can probably be improved!</p>",
        "id": 361398178,
        "sender_full_name": "Sam van G",
        "timestamp": 1685122705
    },
    {
        "content": "<p>I don't think <code>get!</code> should be necessary ever since <a href=\"https://github.com/leanprover-community/mathlib4/pull/2751\">!4#2751</a>. Does anyone have a disagreeing experience?</p>",
        "id": 361489226,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685170096
    },
    {
        "content": "<p>I think that the <code>parents</code> of a structure should be separated by commas, even when they are on different lines and (or maybe because) they do not seem to be affected by whitespace.</p>",
        "id": 361498990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685174032
    },
    {
        "content": "<p>If this is correct, I can update the wiki page!</p>",
        "id": 361499029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685174041
    },
    {
        "content": "<blockquote>\n<p>Function notation changed from <code>λ x, f x</code> to <code>fun x =&gt; f x</code> or <code>λ x =&gt; f x</code>. If you import (almost) any file from mathlib, you can also use <code>fun x ↦ f x</code> or <code>λ x ↦ f x</code>.</p>\n</blockquote>\n<p>This notation is implemented in core, you don't need to import anything from mathlib</p>",
        "id": 361499692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685174223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Lean.204.20survival.20guide.20for.20Lean.203.20users/near/361498990\">said</a>:</p>\n<blockquote>\n<p>I think that the <code>parents</code> of a structure should be separated by commas, even when they are on different lines and (or maybe because) they do not seem to be affected by whitespace.</p>\n</blockquote>\n<p>yes this is correct (I thought you meant the <code>extends</code> list but I guess you mean <code>{ &lt;here&gt; with ... }</code>)</p>",
        "id": 361499981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685174285
    },
    {
        "content": "<p>Mario, thank you for the confirmation!  Also, I always have a really hard time to use this notation and your comment about <code>extends</code> may be something that I had not considered.</p>",
        "id": 361500182,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685174354
    },
    {
        "content": "<p>I will add the minimal change of placing a comma between <code>parent1</code> and <code>parent2</code> in the wiki and if someone else who actually knows what they are doing wants to explain this better, I will likely learn something!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 361500368,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685174406
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">parent1</span><span class=\"o\">,</span>    <span class=\"c1\">-- &lt;-- added this comma here</span>\n  <span class=\"n\">parent2</span> <span class=\"k\">with</span>\n  <span class=\"n\">field1</span> <span class=\"o\">:=</span> <span class=\"n\">value1</span>\n  <span class=\"n\">field2</span> <span class=\"o\">:=</span> <span class=\"n\">value2</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 361500719,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685174521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Lean.204.20survival.20guide.20for.20Lean.203.20users/near/361489226\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>get!</code> should be necessary ever since <a href=\"https://github.com/leanprover-community/mathlib4/pull/2751\">!4#2751</a>. Does anyone have a disagreeing experience?</p>\n</blockquote>\n<p>I remember being in trouble with my cache once after March 10th and being told to use <code>get!</code> but don't know how to reproduce the exact situation.</p>",
        "id": 361572580,
        "sender_full_name": "Sam van G",
        "timestamp": 1685193470
    },
    {
        "content": "<p>I think <code>ctrl-c</code> during download can still potentially leave a broken file in place?</p>",
        "id": 361629610,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685213529
    },
    {
        "content": "<p>Is there a <code>curl</code> option to use a <code>.part</code> file?</p>",
        "id": 361630499,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685213891
    },
    {
        "content": "<p>(like browsers do)</p>",
        "id": 361630513,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685213896
    },
    {
        "content": "<p>Probably, not, but we can do it manually: download with <code>curl</code> to <code>file.part</code>, then move to <code>file</code>.</p>",
        "id": 361630736,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685213993
    },
    {
        "content": "<p>Yes, this was discussed at <a href=\"https://github.com/leanprover-community/mathlib4/pull/2751\">!4#2751</a> but not implemented. Apparently this is not a lean-native function for moving a file. :-)</p>",
        "id": 361631018,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685214098
    }
]