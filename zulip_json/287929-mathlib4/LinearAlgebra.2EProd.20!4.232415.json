[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prodMap_comp</span> <span class=\"o\">(</span><span class=\"n\">f₁₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂₃</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁₂</span> <span class=\"o\">:</span> <span class=\"n\">M₄</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₅</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g₂₃</span> <span class=\"o\">:</span> <span class=\"n\">M₅</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₆</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f₂₃.prodMap</span> <span class=\"n\">g₂₃</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">f₁₂.prodMap</span> <span class=\"n\">g₁₂</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f₂₃</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">f₁₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodMap</span> <span class=\"o\">(</span><span class=\"n\">g₂₃</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">g₁₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Prod.lean</span><span class=\"o\">:</span><span class=\"mi\">347</span><span class=\"o\">:</span><span class=\"mi\">4</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"kn\">include</span><span class=\"bp\">✝'</span>\n<span class=\"n\">Prod.lean</span><span class=\"o\">:</span><span class=\"mi\">347</span><span class=\"o\">:</span><span class=\"mi\">4</span>\n<span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">σ₁₃</span><span class=\"bp\">✝'</span>\n<span class=\"n\">Prod.lean</span><span class=\"o\">:</span><span class=\"mi\">347</span><span class=\"o\">:</span><span class=\"mi\">42</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"kn\">include</span><span class=\"bp\">✝'</span>\n<span class=\"n\">Prod.lean</span><span class=\"o\">:</span><span class=\"mi\">347</span><span class=\"o\">:</span><span class=\"mi\">42</span>\n<span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">σ₁₃</span><span class=\"bp\">✝'</span>\n</code></pre></div>",
        "id": 329185038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676984739
    },
    {
        "content": "<p>The only other error in the files is with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_prod</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">e₁.prod</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">M₃</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span> <span class=\"bp\">×</span> <span class=\"n\">M₄</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodMap</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">M₃</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₄</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>complaining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">norm_cast</span><span class=\"o\">:</span> <span class=\"n\">badly</span> <span class=\"n\">shaped</span> <span class=\"kd\">lemma</span><span class=\"o\">,</span> <span class=\"n\">lhs</span> <span class=\"n\">must</span> <span class=\"n\">contain</span> <span class=\"n\">at</span> <span class=\"n\">least</span> <span class=\"n\">one</span> <span class=\"n\">coe</span>\n  <span class=\"o\">(</span><span class=\"n\">LinearEquiv.prod</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap</span>\n</code></pre></div>",
        "id": 329185203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676984795
    },
    {
        "content": "<p>is there an <code>include</code> in the file?</p>",
        "id": 329185597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676984896
    },
    {
        "content": "<p>perhaps after the theorem</p>",
        "id": 329185641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676984912
    },
    {
        "content": "<p><code>include</code> is an error in Lean 4, right?</p>",
        "id": 329185783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676984959
    },
    {
        "content": "<p>it's not a keyword, so it gets interpreted as an (unknown) identifier</p>",
        "id": 329185867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676984987
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2415/files\">https://github.com/leanprover-community/mathlib4/pull/2415/files</a> says that there is no <code>include</code></p>",
        "id": 329185876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676984990
    },
    {
        "content": "<p><del>CI also says that there is no error in the file</del></p>",
        "id": 329186227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676985082
    },
    {
        "content": "<p>there is an <code>include σ₁₃</code> on line 560 of <code>Algebra.Module.LinearMap</code></p>",
        "id": 329186871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676985278
    },
    {
        "content": "<p>aha!</p>",
        "id": 329186915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676985291
    },
    {
        "content": "<p>Aha more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ∘ₗ \"</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">@</span><span class=\"n\">LinearMap.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">RingHomCompTriple.ids</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">σ₁₃</span>\n</code></pre></div>\n<p>it's accidentally in the <code>infix</code></p>",
        "id": 329187084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676985346
    },
    {
        "content": "<p>so you don't get the error unless you use <code>∘ₗ</code></p>",
        "id": 329187213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676985367
    },
    {
        "content": "<p>aha even more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- mathport name: «expr ∘ₗ »</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"c1\">-- Porting note: error message suggested to do this</span>\n<span class=\"sd\">/-- `∘ₗ` is notation for composition of two linear (not semilinear!) maps into a linear map.</span>\n<span class=\"sd\">This is useful when Lean is struggling to infer the `RingHomCompTriple` instance. -/</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ∘ₗ \"</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">@</span><span class=\"n\">LinearMap.comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">RingHomCompTriple.ids</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">σ₁₃</span>\n</code></pre></div>\n<p>normally this would be an error, but it has been suppressed by what appears to be a confused porter</p>",
        "id": 329187565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676985468
    },
    {
        "content": "<p>oof, thanks for debugging!</p>",
        "id": 329188571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676985725
    },
    {
        "content": "<p>This \"include\" issue is now fixed.</p>",
        "id": 329218147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676992983
    },
    {
        "content": "<p>So this is the only error that is left</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_prod</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">e₁.prod</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">M₃</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span> <span class=\"bp\">×</span> <span class=\"n\">M₄</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodMap</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">M₃</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₄</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>complaining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">norm_cast</span><span class=\"o\">:</span> <span class=\"n\">badly</span> <span class=\"n\">shaped</span> <span class=\"kd\">lemma</span><span class=\"o\">,</span> <span class=\"n\">lhs</span> <span class=\"n\">must</span> <span class=\"n\">contain</span> <span class=\"n\">at</span> <span class=\"n\">least</span> <span class=\"n\">one</span> <span class=\"n\">coe</span>\n  <span class=\"o\">(</span><span class=\"n\">LinearEquiv.prod</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap</span>\n</code></pre></div>",
        "id": 329218227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676993004
    },
    {
        "content": "<p>Is <code>toLinearMap</code> missing a @[coe] attribute?</p>",
        "id": 329218368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676993041
    },
    {
        "content": "<p>Thanks! That fixes it!</p>",
        "id": 329219519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676993271
    }
]