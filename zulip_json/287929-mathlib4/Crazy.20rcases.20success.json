[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is there any way we could get <code>rcases</code> to fail in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">max</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">q</span><span class=\"o\">⟩</span>\n  <span class=\"n\">all_goals</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>I understand that <code>Nat.le</code> is indeed an inductive predicate, but the type ascriptions in the above example are completely wrong.</p>",
        "id": 402912438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700340350
    },
    {
        "content": "<p>would a linter warning suffice? The rcases pattern ignoring behavior is necessary to write some dependent patterns, but a pattern that is never used seems like a lint candidate</p>",
        "id": 402912773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700340631
    },
    {
        "content": "<p>It wouldn't suffice for my purpose but I can work around that. For general use a linter would be better than nothing.</p>",
        "id": 402912870,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700340736
    },
    {
        "content": "<p>I've always been surprised that things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨⟨⟩⟩⟩</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>work (I sometimes find myself scrambling around trying to name variables which have come out as inaccessible, and start tinkering with pointy brackets to sort things out). Is this the same phenomenon?</p>",
        "id": 402913206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700341110
    },
    {
        "content": "<p>I think it could be a (default-disabled) option <code>rcases.allowUnusedPatterns</code>, since I think the cases where this is needed are rare and the cases where it is confusing are less rare</p>",
        "id": 402913781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700341526
    }
]