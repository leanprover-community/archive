[
    {
        "content": "<p>In Lean4, core only supports <code>↑</code>. We added a custom elaborator in mathlib that lets us write <code>⇑</code> and <code>↥</code> (though it's buggy until <a href=\"https://github.com/leanprover-community/mathlib4/pull/8297\">#8297</a>). <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> added support for delaboration of <code>↥</code> for pretty much all the cases we care about.</p>\n<p>Do we want <code>⇑</code> to appear in the goal view instead of <code>↑</code> for functions? Should this be a mathlib-only feature or in Std?</p>",
        "id": 401155616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699536517
    },
    {
        "content": "<p>/poll What do you prefer to see in your goal view</p>\n<ul>\n<li>↑f (x + y) = ↑f x + ↑f y (the status quo)</li>\n<li>⇑f (x + y) = ⇑f x + ⇑f y</li>\n</ul>",
        "id": 401155790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699536580
    },
    {
        "content": "<p>Arguments in favor of <code>⇑</code>:</p>\n<ul>\n<li>It should round-trip better</li>\n<li>It allows use of the heuristic \"<code>⇑</code>s are always boring, <code>↑</code>s could be hiding something unexpected\"</li>\n</ul>",
        "id": 401155963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699536636
    },
    {
        "content": "<p>Arguments against:</p>\n<ul>\n<li>It's one more magic arrow to teach new users</li>\n</ul>",
        "id": 401156082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699536677
    },
    {
        "content": "<p>Do we have actual examples of situations where round tripping is better? Those would be helpful to know when deciding</p>",
        "id": 401159729,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699537929
    },
    {
        "content": "<p>Sure, here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Hom.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Coe</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"c1\">-- works</span>\n  <span class=\"k\">show</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"c1\">-- fails</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401160877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699538344
    },
    {
        "content": "<p>(the extra parens will go away after <a href=\"https://github.com/leanprover-community/mathlib4/pull/8297\">#8297</a>)</p>",
        "id": 401160921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699538360
    },
    {
        "content": "<p>In Lean 3, you needed to remove all <code>⇑</code> as a very first step when trying to get round-tripping.</p>",
        "id": 401164387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699539329
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib4/pull/8297\">#8297</a> doesn't build.</p>",
        "id": 401164554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699539370
    },
    {
        "content": "<p>Yes, and the status quo in mathlib 4 is that you have to do the same thing with removing all the <code>↑</code>, which is even worse because you can't tell which ones you need to remove!</p>",
        "id": 401164765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699539444
    },
    {
        "content": "<p>I would like to not see <code>⇑f x</code> in my goal view at all. <code>f x</code> is unambiguous and (almost?) always parses correctly anyway. So it's just noise. (Ideally clicking on <code>f</code> in the goal view would show that there is a coercion.)<br>\nIf <code>⇑f</code> is not applied to an argument (e.g. <code>⇑f = ⇑g</code> or <code>F (⇑f)</code>), then the <code>⇑</code> would be nice to see.</p>",
        "id": 401189407,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699546309
    },
    {
        "content": "<p>The same applies to sorts, but they are a lot less frequent (in the formalizations I do), so I care less about that.</p>",
        "id": 401189764,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699546368
    },
    {
        "content": "<p>As an example of where you do need <code> ⇑</code>, consider the goal state <code>⇑f + ⇑g = ⇑(f + g)</code></p>",
        "id": 401189976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699546411
    },
    {
        "content": "<p>It's not immediately clear to me what the heuristic here is; the problem in general is when you have some polymorphic function <code>h</code> (here <code>HAdd.hAdd</code>) such that both <code>h ⇑f ⇑g</code> and <code>⇑(h f g)</code> are well-typed.</p>",
        "id": 401190803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699546573
    },
    {
        "content": "<p>I covered that case in my message, and I do want to see the <code>⇑</code> (or <code>↑</code>) there, indeed.</p>",
        "id": 401190955,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699546621
    },
    {
        "content": "<p><del>I'm not sure that helps with <code>(⇑f + ⇑g) x = ⇑(f + g) x</code></del></p>",
        "id": 401191139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699546673
    },
    {
        "content": "<p>Ah yes, that sounds sufficient, you'd see <code>(⇑f + ⇑g) x = (f + g) x</code></p>",
        "id": 401191242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699546694
    },
    {
        "content": "<p>The heuristic I was thinking of: is the <code>⇑f</code> applied to another argument. There might be a few cases where the <code>⇑</code> is still superfluous, like <code>Function.curry ⇑f</code>, but I'm happy to accept those.</p>",
        "id": 401191315,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699546720
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/354\">std4#354</a> implements that heuristic</p>",
        "id": 401195904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699548046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bringing.20back.20.E2.87.91/near/401195904\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/std4/pull/354\">std4#354</a> implements that heuristic</p>\n</blockquote>\n<p>Did you forget to push new commits?</p>\n<blockquote>\n<p><code>/-- info: ⇑f 1 : Nat-/</code></p>\n</blockquote>",
        "id": 401198906,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699549076
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">commt</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"s2\">\"implement Floris' heuristic\"</span>\n<span class=\"n\">git</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">commt'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">git</span> <span class=\"n\">command.</span> <span class=\"n\">See</span> <span class=\"bp\">'</span><span class=\"n\">git</span> <span class=\"c1\">--help'.</span>\n</code></pre></div>\n<p>Whoops, yes</p>",
        "id": 401199143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699549159
    },
    {
        "content": "<p>I guess we need to settle the precedence discussion before that it safe to merge; I don't really care much about the outcome of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8297\">#8297</a>, and was just following Mario's advice</p>",
        "id": 401199449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699549247
    },
    {
        "content": "<p>I understand. I also don't care too much in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8297\">#8297</a>, and would definitely not block it, but when looking at the changes I was wondering whether it was actually a regression.<br>\nIt's counterintuitive that <code>↑</code> and <code>⇑</code> have different precedences, and maybe that weighs stronger than a few extra parentheses.</p>",
        "id": 401200537,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699549580
    },
    {
        "content": "<p>Hot take: <code>↑</code> has the wrong precedence, and should be just shy of <code>=</code> so that <code>(↑a + b : X)</code> means \"coerce <code>a + b</code> to <code>X</code>\", since that's nicer than the <code>(↑(a + b) : X)</code> we currently have to write</p>",
        "id": 401200896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699549710
    },
    {
        "content": "<p>Thinking seriously about your message makes me agree with Mario's suggestion. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nYes,  low-precedence <code>↑</code> would probably lead to fewer parentheses, but a prefix operation with such a low precedence is just evil.</p>",
        "id": 401201383,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699549907
    },
    {
        "content": "<p>Unfortunately, we have very many low precedence prefix operators because most macros are like that. Another one with an evil precedence is <code>!</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">!</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 401203941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699550886
    },
    {
        "content": "<p>That's surely a bug, right?</p>",
        "id": 401204842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699551274
    },
    {
        "content": "<p>eww, gross.</p>",
        "id": 401206618,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699552030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bringing.20back.20.E2.87.91/near/401200896\">said</a>:</p>\n<blockquote>\n<p>Hot take: <code>↑</code> has the wrong precedence, and should be just shy of <code>=</code> so that <code>(↑a + b : X)</code> means \"coerce <code>a + b</code> to <code>X</code>\", since that's nicer than the <code>(↑(a + b) : X)</code> we currently have to write</p>\n</blockquote>\n<p>Your suggestion would essentially guarantee that my brain would experience a parse error every time <code>↑a + b</code> appears in front of me. I understand your desire to do coërcion as the last step, but the syntax would have to be something like <code>(a + b ↑: X)</code> to preserve the last drops of my sanity. A prefix operator, especially one that is typically written without a space, must bind tightly.</p>",
        "id": 401212573,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699554342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bringing.20back.20.E2.87.91/near/401203941\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, we have very many low precedence prefix operators because most macros are like that. Another one with an evil precedence is <code>!</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">!</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>My disgust is immeasurable, and my day is ruined. Please somebody PR a fix asap.</p>",
        "id": 401212886,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699554462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bringing.20back.20.E2.87.91/near/401195904\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/std4/pull/354\">std4#354</a> implements that heuristic</p>\n</blockquote>\n<p>Just to be explicit, the behavior in that PR is now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">WrappedFun</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">WrappedFun</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">WrappedFun</span> <span class=\"o\">(</span><span class=\"n\">WrappedFun</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- info: ⇑f : Nat → Nat -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"n\">f.fn</span>\n<span class=\"sd\">/-- info: ⇑f : Nat → Nat -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span>\n<span class=\"c1\">-- applied functions do not need the `⇑`</span>\n<span class=\"sd\">/-- info: f 1 : Nat -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"mi\">1</span>\n\n<span class=\"sd\">/-- info: ⇑(g 1) : Nat → Nat -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"sd\">/-- info: (g 1) 2 : Nat -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n\n<span class=\"sd\">/-- info: ⇑h : Nat → WrappedFun Nat -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"bp\">⇑</span><span class=\"n\">h</span>\n<span class=\"sd\">/-- info: h 1 : WrappedFun Nat -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"n\">h</span> <span class=\"mi\">1</span>\n<span class=\"sd\">/-- info: ⇑(h 1) : Nat → Nat -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"sd\">/-- info: (h 1) 2 : Nat -/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span> <span class=\"k\">#check</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 401787014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699889149
    },
    {
        "content": "<p>This is now live, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunLike.coe_injective#doc\">docs#FunLike.coe_injective</a> for a place where the new arrow appears in place of the old one, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunLike.ext_iff#doc\">docs#FunLike.ext_iff</a> for a place where it now is eliminated.</p>",
        "id": 403408315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700580962
    },
    {
        "content": "<p>(hmm, this doesn't seem to have affected the docs)</p>",
        "id": 403408504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700580990
    }
]