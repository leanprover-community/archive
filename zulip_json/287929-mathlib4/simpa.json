[
    {
        "content": "<p>I'm sure this has been discussed before, but did we loose <code>simpa</code> as an abbreviation of <code>simpa using this</code> on purpose?</p>",
        "id": 353366570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682610796
    },
    {
        "content": "<p>After some more investigation, <code>simpa</code> indeed does something with <code>this</code>, but not the expected thing (expected based on Lean 3 behavior). In Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.simpa</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works but in Lean 4,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Simpa</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">simpa</span>\n</code></pre></div>\n<p>doesn't, you need to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Simpa</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 353935210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682695780
    },
    {
        "content": "<p>fixed on master</p>",
        "id": 353945053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682696821
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 353950984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682697483
    }
]