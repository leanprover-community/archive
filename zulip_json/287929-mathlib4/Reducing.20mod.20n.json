[
    {
        "content": "<p>What is the mathlib4 analogue of <code>apply_fun (coe : ℕ → zmod n) at h</code> ?</p>",
        "id": 387699584,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693238129
    },
    {
        "content": "<p>It seems that <code>apply_fun (fun (z : ℕ) ↦ (z : ZMod n)) at h</code>works... Is this the idiomatic way of doing this?</p>",
        "id": 387700212,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693238278
    },
    {
        "content": "<p>You could probably do <code>apply_fun (· : ZMod n) at h</code>, which should mean the same thing but is shorter.</p>",
        "id": 387701718,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693238596
    },
    {
        "content": "<p>Follow-up question: I'm having difficulties getting <code>8 : ZMod 8</code> simplified to zero.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- leaves `↑x ^ 2 = 8 * ↑m` with `8 : ZMod 8`</span>\n  <span class=\"c1\">-- simp at h -- `simp made no progress`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"c1\">-- how do I change `8 : ZMod 8` to `0`?</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"c1\">-- this works, but is too involved for my taste</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- Try this: `exact Eq.symm (mul_eq_zero_of_left rfl ↑m)`</span>\n</code></pre></div>\n<p>IIRC, <code>norm_num</code>did that in mathlib3...<br>\n(and the <code>try this</code> gives an error, because the pasted code stumbles over the coercion...)</p>",
        "id": 387705689,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693239539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Reducing.20mod.20n/near/387701718\">said</a>:</p>\n<blockquote>\n<p>You could probably do <code>apply_fun (· : ZMod n) at h</code>, which should mean the same thing but is shorter.</p>\n</blockquote>\n<p>This gives an error (in my use case, <code>n = 8</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.109937</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.109937</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.109936</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ZMod</span> <span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 387706863,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693239846
    },
    {
        "content": "<p>You can always replace <code>coe</code> by <code>(\\u)</code>.</p>",
        "id": 387707468,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693240005
    },
    {
        "content": "<p>Here's how I would do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">norm_cast</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 387708503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693240308
    },
    {
        "content": "<p>oh wait that's not complete.</p>",
        "id": 387708624,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693240333
    },
    {
        "content": "<p>anyway, instead of the <code>rw</code>, you can use <code>change</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- leaves `↑x ^ 2 = 8 * ↑m` with `8 : ZMod 8`</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 387708879,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693240422
    },
    {
        "content": "<p>Yeah, but my point is that this shouldn't be necessary!</p>",
        "id": 387709064,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693240458
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- leaves `↑x ^ 2 = 8 * ↑m` with `8 : ZMod 8`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 387709109,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693240476
    },
    {
        "content": "<p>You can also replace the lambda with <code>Nat.cast</code> if that's preferable: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- leaves `↑x ^ 2 = 8 * ↑m` with `8 : ZMod 8`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 387709456,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693240572
    },
    {
        "content": "<p>why does <code>rw [show (8 : ZMod 8) = 0 by rfl] at h</code> work, but <code>rw [(rfl : (8 : ZMod 8) = 0)] at h</code> doesn't?</p>",
        "id": 387709493,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693240585
    },
    {
        "content": "<p>I'm not sure.</p>",
        "id": 387709600,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693240623
    },
    {
        "content": "<p><code>show</code> inserts a type hint, type ascriptions don't</p>",
        "id": 387709702,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693240662
    },
    {
        "content": "<p>right. You can see this by comparing <code>e1</code> and <code>e2</code> in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- leaves `↑x ^ 2 = 8 * ↑m` with `8 : ZMod 8`</span>\n  <span class=\"k\">have</span> <span class=\"n\">e1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 387710053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693240751
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex5</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- does not work</span>\n</code></pre></div>",
        "id": 387710085,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693240764
    },
    {
        "content": "<p>(I'm on vacation, but it's a rainy day, and so I thought I'd get started seriously in Lean4. Somehow, it feels quite a bit like when I started using Lean(3) quite some time ago... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>",
        "id": 387710815,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693240970
    },
    {
        "content": "<p>There's <a href=\"https://github.com/leanprover-community/mathlib4/pull/5376\">#5376</a>, but it has a merge conflict and probably needs more review.</p>",
        "id": 387769154,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693262884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Reducing.20mod.20n/near/387710085\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex5</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- does not work</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The first simp only is probably giving up and trying decide or rfl, whereas the second isn't.</p>",
        "id": 387772059,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693264570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> note that <code>rfl</code> also solves the second one...</p>",
        "id": 387772112,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693264622
    },
    {
        "content": "<p>Why isn't <code>simp</code> giving up in the same way in <code>ex5</code>?</p>",
        "id": 387772143,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693264653
    },
    {
        "content": "<p>Well, I guess <code>decide</code> won't work for the second one, so maybe that's it.</p>",
        "id": 387772285,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693264749
    },
    {
        "content": "<p>Indeed its doing decide:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">decide</span><span class=\"o\">:=</span><span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"c1\">-- now they both don't work, success!</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ex5</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- does not work</span>\n</code></pre></div>",
        "id": 387772502,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693264887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Reducing.20mod.20n/near/387710815\">said</a>:</p>\n<blockquote>\n<p>(I'm on vacation, but it's a rainy day, and so I thought I'd get started seriously in Lean4. Somehow, it feels quite a bit like when I started using Lean(3) quite some time ago... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>\n</blockquote>\n<p>One reason why this probably feels the case is that you are trying things involving numerals. Numerals changed completely between lean 3 and lean 4, so we (mathlib) are still in the dark ages regarding them (or maybe the middle ages), the port of mathlib is done but a lot more adjustments need to take place to make things work how we want. This can take the form of tactics, or useful lemmas. For example here is a nice lemma that will make simp do what you want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tada</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nat.AtLeastTwo</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">CharP.cast_eq_zero</span> <span class=\"n\">R</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 387773271,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693265389
    },
    {
        "content": "<p>OK; maybe somebody should PR this (under an appropriate name...)?<br>\nBut I would think this is something <code>norm_num</code> should also be doing. More precisely, I think it would be good if <code>norm_num</code>would replace any numeral <code>n</code> in a ring of (non-zero) characteristic <code>m</code> by (the value of) <code>n % m</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 387899342,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693320825
    },
    {
        "content": "<p>I'll again mention that <a href=\"https://github.com/leanprover-community/mathlib4/pull/5376\">#5376</a> exists.</p>",
        "id": 387900860,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693321279
    },
    {
        "content": "<p>Maybe this can be included in what <code>norm_num</code> does? That would seem to be the most convenient way.<br>\n(But keep <code>reduce_mod_char</code> as a separate tactic.)</p>",
        "id": 387901819,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693321545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Reducing.20mod.20n/near/387773271\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Reducing.20mod.20n/near/387710815\">said</a>:</p>\n<blockquote>\n<p>(I'm on vacation, but it's a rainy day, and so I thought I'd get started seriously in Lean4. Somehow, it feels quite a bit like when I started using Lean(3) quite some time ago... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>\n</blockquote>\n<p>One reason why this probably feels the case is that you are trying things involving numerals. Numerals changed completely between lean 3 and lean 4, so we (mathlib) are still in the dark ages regarding them (or maybe the middle ages), the port of mathlib is done but a lot more adjustments need to take place to make things work how we want. This can take the form of tactics, or useful lemmas. For example here is a nice lemma that will make simp do what you want</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tada</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nat.AtLeastTwo</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">CharP.cast_eq_zero</span> <span class=\"n\">R</span> <span class=\"n\">n</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>When I replace <code>tada</code> in the <code>simp only</code> with its definition (for the concrete case) <code>CharP.cast_eq_zero (ZMod 8) 8</code>, it does not work. Why is this? (Same with just <code>CharP.cast_eq_zero (ZMod 8)</code> or <code>CharP.cast_eq_zero</code>.)</p>",
        "id": 387915736,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693325763
    },
    {
        "content": "<p>I agree this should probably be part of norm num eventually, it just doesn't yet for reasons of not enough time being invested in making it work! (Note that norm num didn't yet do this in lean 3 either, but many of us have hoped for better mod n tactics for some time).<br>\nSimp works up to syntactic equality so one shouldn't expect in general that you can replace a simp lemma by its definition and have it work the same, if some definitional equality is involved (in this case the definitional equality is between a numeral and the explicit cast of the same numeral from the naturals to the ring)</p>",
        "id": 387964137,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693342061
    },
    {
        "content": "<p>In the lean3 version of the prof I was translating to lean4, <code>norm_num</code> was sufficient to get rid of <code>8 : zmod 8</code> in the expression (but I don't know enough of how <code>norm_num</code> works internally to have an idea of what precisely causes the difference in behaviout).</p>",
        "id": 388178770,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1693422579
    }
]