[
    {
        "content": "<p>I'm trying to solve the universe issues in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4761\">!4#4761</a> . This should work on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Category.ModuleCat.Abelian</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ModuleCat.instHasLimitsOfSizeModuleCatMaxModuleCategory.{?u.54, u, u}</span>\n</code></pre></div>\n<p>This is an issue in the PR because even though I'm specifying all universes in the input, I still have a universe variable in the output. This leads to the usual problematic </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">u</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"bp\">?</span><span class=\"n\">u.84829</span>\n</code></pre></div>\n<p>later on, which I am not entirely sure how to fix. I am not entirely clear how to solve this issue.</p>",
        "id": 364256035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686139380
    },
    {
        "content": "<p>What is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModuleCat.instHasLimitsOfSizeModuleCatMaxModuleCategory#doc\">docs4#ModuleCat.instHasLimitsOfSizeModuleCatMaxModuleCategory</a> ?</p>",
        "id": 364256477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686139460
    },
    {
        "content": "<p>that's a bad instance</p>",
        "id": 364256529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686139470
    },
    {
        "content": "<p>Actually it seems it would work to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ModuleCatMax.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 364257014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686139595
    },
    {
        "content": "<p>This issue is what the <code>TypeMax</code> stuff was about</p>",
        "id": 364257162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686139627
    },
    {
        "content": "<p>That instance is already defined using <code>ModuleCatMax</code>!</p>\n<p>I can't get typeclass inference to do the first (currently failing) example in the PR. I think it's a universe issue and the hints above aren't enough for me to solve it. Here's the issue on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Category.ModuleCat.Abelian</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.Action</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span> <span class=\"n\">Action</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">LargeCategory</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"c1\">-- naming an instance</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">HasLimits</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">PreservesLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">V</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Rep</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Action</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MonCat.of</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">PreservesLimits</span> <span class=\"o\">(</span><span class=\"n\">forget₂</span> <span class=\"o\">(</span><span class=\"n\">Rep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.ModuleCatMax.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- inferInstance -- fails</span>\n<span class=\"c1\">-- foo (ModuleCat.ModuleCatMax k) (MonCat.of G) -- stuck at solving universe constraint</span>\n<span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">ModuleCat.ModuleCatMax.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MonCat.of</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>The idea is that we want typeclass inference to do it. The universe constraint errors are:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>1)\nstuck at solving universe constraint\n  u =?= max ?u.25910 ?u.25911\nwhile trying to unify\n  Category ((Category (ModuleCat.ModuleCatMax k)) k inst✝¹)\nwith\n  (Category (ModuleCat k)) ((Category (ModuleCat k)) k inst✝¹)\n\n2)\nstuck at solving universe constraint\n  max ?u.25910 ?u.25911 =?= max u ?u.25910\nwhile trying to unify\n  HasLimitsOfSize ((HasLimitsOfSize (ModuleCat.ModuleCatMax k)) k inst✝¹)\nwith\n  (HasLimitsOfSize (ModuleCat.ModuleCatMax k)) ((HasLimitsOfSize (ModuleCat.ModuleCatMax k)) k inst✝¹)\n    ((HasLimitsOfSize (ModuleCat.ModuleCatMax k)) k inst✝¹)\n\n3)\nstuck at solving universe constraint\n  u =?= max u ?u.25910\nwhile trying to unify\n  HasLimitsOfSize ((HasLimitsOfSize (ModuleCat.ModuleCatMax k)) k inst✝¹)\nwith\n  (HasLimitsOfSize (ModuleCat.ModuleCatMax k)) ((HasLimitsOfSize (ModuleCat.ModuleCatMax k)) k inst✝¹)\n    ((HasLimitsOfSize (ModuleCat.ModuleCatMax k)) k inst✝¹)\n\n4)\nstuck at solving universe constraint\n  u+1 =?= max (max u (?u.25910+1)) (?u.25911+1)\nwhile trying to unify\n  Type (u + 1) : Type (u + 2)\nwith\n  Type (max u ((max ?u.25911 ?u.25910) + 1)) : Type (max (u + 1) ((max ?u.25911 ?u.25910) + 2))\n</code></pre></div>",
        "id": 364258581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686139967
    }
]