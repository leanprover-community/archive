[
    {
        "content": "<p>An announcement for mathlib4 users who don't necessarily watch the RSS stream: we've just merged a new tactic <code>propose</code>, which is a forwards reasoning analogue of <code>library_search</code>.</p>\n<blockquote>\n<ul>\n<li>\n<p><code>propose using a, b, c</code> tries to find a lemma<br>\nwhich makes use of each of the local hypotheses <code>a, b, c</code>,<br>\nand reports any results via trace messages.</p>\n</li>\n<li>\n<p><code>propose : h using a, b, c</code> only returns lemmas whose type matches <code>h</code> (which may contain <code>_</code>).</p>\n</li>\n<li><code>propose! using a, b, c</code> will also call <code>have</code> to add results to the local goal state.</li>\n</ul>\n<p><code>propose</code> should not be left in proofs; it is a search tool, like <code>library_search</code>.</p>\n</blockquote>\n<p>Please try it out and see if it is useful to you! Bug reports, mysteriously missing results, complaints about speed, etc, all welcome. :-)</p>",
        "id": 350919965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681868143
    },
    {
        "content": "<p>Example usage:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">L.Disjoint</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">⊆</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">propose</span> <span class=\"n\">using</span> <span class=\"n\">w</span>\n  <span class=\"c1\">-- Prints:</span>\n  <span class=\"c1\">-- have : List.Disjoint K M := List.disjoint_of_subset_left m w</span>\n  <span class=\"c1\">-- have : List.Disjoint M L := List.disjoint_symm w</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 350920141,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681868200
    },
    {
        "content": "<p>Under the hood this just uses a discrimination tree indexed on the hypotheses of theorems (as opposed to the conclusions, for <code>library_search</code>).</p>",
        "id": 350922235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681869351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> So is <code>propose : h</code> similar to <code>observe : h</code> in mathlib3?</p>",
        "id": 350944556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681883096
    },
    {
        "content": "<p>Oh, you mean without a <code>using</code> clause? That doesn't even parse. :-)</p>",
        "id": 350945616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681883531
    },
    {
        "content": "<p>aha...</p>",
        "id": 350945964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681883728
    },
    {
        "content": "<p>Does <code>propose : h using *</code> parse?</p>",
        "id": 350945981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681883739
    },
    {
        "content": "<p>No, it doesn't, unfortunately.</p>",
        "id": 350946350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681883945
    },
    {
        "content": "<p>Note that in <code>propose : h using ...</code> we only use <code>h</code> to <em>filter</em> results after we've found them. We do not use <code>h</code> for indexing!</p>",
        "id": 350946396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681883971
    },
    {
        "content": "<p>We also have <code>library_search using x</code>, however, which looks up lemmas using the goal, but then only shows results that make use of <code>x</code>.</p>",
        "id": 350946650,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681884057
    },
    {
        "content": "<p>I'm not sure what <code>propose : h using *</code> would mean. Using at least one of the hypotheses?</p>",
        "id": 350946750,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681884088
    },
    {
        "content": "<p>Or even none.</p>",
        "id": 350948091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681884578
    },
    {
        "content": "<p><code>propose : n! &gt; 0</code> is my favorite example...</p>",
        "id": 350948118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681884595
    },
    {
        "content": "<p>Should <code>propose</code> take an optional name? Like <code>propose myFancyName : x^n + y^n = z^n using h1 h2 h3</code>?</p>",
        "id": 350953020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681886403
    },
    {
        "content": "<p>Is there any specific reason why this was renamed from suggest to propose? Is this meant to be very different from mathlib3's suggest?</p>",
        "id": 350953685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681886649
    },
    {
        "content": "<p>I think that in ml4 <code>library_search</code> is already doing what <code>suggest</code> did (but with some rough edges)</p>",
        "id": 350954208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681886857
    },
    {
        "content": "<p><code>propose</code> is a more precise tactic, because you allow it to filter for specific forward steps.</p>",
        "id": 350954320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681886890
    },
    {
        "content": "<p>Sorry for the confusion. This has nothing to do with mathlib's <code>suggest</code>.</p>",
        "id": 350958685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681888380
    },
    {
        "content": "<p>This uses \"forward reasoning\", i.e. <code>propose using x</code> does not look at the goal at all.</p>",
        "id": 350958792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681888410
    },
    {
        "content": "<p>Instead it looks up lemmas which could use <code>x</code> as a hypothesis.</p>",
        "id": 350958856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681888427
    },
    {
        "content": "<p><code>propose : h using x</code> then filters those results to only take those whose type matches <code>h</code>.</p>",
        "id": 350958987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681888459
    },
    {
        "content": "<p>That does have overlap with <code>library_search using x</code>. The difference is that <code>library_search</code> is working by \"backwards reasoning\", i.e. using the type of the <em>goal</em> to look up the candidate lemmas.</p>",
        "id": 350959112,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681888507
    },
    {
        "content": "<p>mathlib's <code>suggest</code> is now just part of <code>library_search</code>. If <code>library_search</code> doesn't find a complete solution it prints that partial solutions (i.e. that still have subgoals). This mode of <code>library_search</code> could definitely use some love.</p>",
        "id": 350959248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681888560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, if you're able to come up with a better phrase for explaining this than \"forwards reasoning\", please let me know! I appreciate that it is not immediately clear how <code>propose</code> and <code>library_search</code> operate differently,</p>",
        "id": 350959509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681888640
    },
    {
        "content": "<p>Ok, I indeed completely misunderstood the topic of this discussion. I don't have a great naming idea but there is a very clear way to improve the description in the first message of this thread. The key point is \"<code>propose using x</code> does not look at the goal at all.\"</p>",
        "id": 350961701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681889239
    },
    {
        "content": "<p>yeah, I don't think english usage helps to differentiate <code>propose</code> and <code>suggest</code></p>",
        "id": 350962414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681889446
    },
    {
        "content": "<p>This may be useless, but if <code>propose</code> does not look at the goal at all, should it be in a lower monad, <code>TermElabM</code> or even <code>MetaM</code>? There may be additional uses this way.</p>",
        "id": 351010088,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1681901989
    },
    {
        "content": "<p>Idea: <code>helpme</code> so <code>helpme using x</code> reads just fine</p>",
        "id": 351012162,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681902555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> the plumbing tactic has signature: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">propose</span> <span class=\"o\">(</span><span class=\"n\">lemmas</span> <span class=\"o\">:</span> <span class=\"n\">DiscrTree</span> <span class=\"n\">Name</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">required</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">solveByElimDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">15</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 351023535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681905557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Today <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and I were looking at a hack to get <code>n!</code> to work. It's sort of similar to how dot notation works (at least in the Lean 3 model) where you try to resolve the full name, then you pop off the end and try to resolve that as dot notation, recursively. In this case, if <code>n!</code> fails to resolve, we can make a term elaborator that then tries <code>n !</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorial.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Factorial</span><span class=\"bp\">!</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabIdentFactorial</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">name.getId</span>\n    <span class=\"k\">if</span> <span class=\"n\">name.hasMacroScopes</span> <span class=\"k\">then</span>\n      <span class=\"c1\">-- I think this would mean the name appears from within a quote.</span>\n      <span class=\"c1\">-- I'm not sure how to properly deal with this, and it seems ok to just not.</span>\n      <span class=\"n\">throwUnsupportedSyntax</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">try</span>\n        <span class=\"n\">elabIdent</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n      <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">name</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">if</span> <span class=\"n\">s.endsWith</span> <span class=\"s2\">\"!\"</span> <span class=\"k\">then</span>\n            <span class=\"k\">let</span> <span class=\"n\">name'</span> <span class=\"o\">:=</span> <span class=\"n\">Name.str</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.dropRight</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n            <span class=\"n\">try</span>\n              <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.factorial</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">name'</span><span class=\"o\">)))</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n            <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">throw</span> <span class=\"n\">e</span>\n          <span class=\"k\">else</span>\n            <span class=\"n\">throw</span> <span class=\"n\">e</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">scoped</span> <span class=\"n\">term_elab</span> <span class=\"n\">ident</span><span class=\"o\">]</span> <span class=\"n\">elabIdentFactorial</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Factorial</span><span class=\"bp\">!</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Nat</span> <span class=\"n\">Factorial</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">!</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">z</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">!</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Bool</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 351149815,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681937186
    },
    {
        "content": "<p>There's still a bug here with the unused variable linter, where <code>n!</code> doesn't seem to imply that <code>n</code> is being used.</p>",
        "id": 351149987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681937263
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3534\">https://github.com/leanprover-community/mathlib4/pull/3534</a> updates to documentation to reflect Patrick's suggestion above.</p>",
        "id": 351205735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681965671
    }
]