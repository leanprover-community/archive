[
    {
        "content": "<p>The mathlib3 file <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/derive_fintype.html\">tactic.derive_fintype</a> doesn't seem to be on the porting status list -- I guess because it's in the tactic directory -- but I also don't see it as a task on the tactic porting issue (<a href=\"https://github.com/leanprover-community/mathlib4/pull/430\">!4#430</a>).  Has this slipped through the cracks?  Or is this functionality provided differently in Lean 4 -- if so, what do I need to import?</p>",
        "id": 345527463,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680129659
    },
    {
        "content": "<p>I think this has slipped through the cracks. If anyone wants to look at this, there are lots of examples in core Lean, in <code>src/Lean/Elab/Deriving/*</code>.</p>",
        "id": 345527814,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680129902
    },
    {
        "content": "<p>I would like a <code>ToExpr</code> derive handler, too.</p>",
        "id": 345527849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680129919
    },
    {
        "content": "<p>While we're at it, a <code>ConcreteCategory</code> deriving handler is missing as well.</p>",
        "id": 345527889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680129958
    },
    {
        "content": "<p>or at least it didn't work in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3105\">!4#3105</a></p>",
        "id": 345527961,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680129991
    },
    {
        "content": "<p>where can I find an up-to-date tactic porting status list?</p>",
        "id": 345528025,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680130044
    },
    {
        "content": "<p>I'm actually confused now about how things like <code>deriving LargeCategory</code> work. Where can I find the deriving handler for that?</p>",
        "id": 345528996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680130705
    },
    {
        "content": "<p>I think that's just the delta reduction handler.</p>",
        "id": 345531013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680132001
    },
    {
        "content": "<p>In Lean 3, I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive random_class]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n</code></pre></div>\n<p>falls back to \"just unfold foo and use the instances on bar\"</p>",
        "id": 345531087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680132036
    },
    {
        "content": "<p>yeah, that's what it should be, but I'm surprised this didn't work for ConcreteCategory in the PR I mentioned above.</p>",
        "id": 345532261,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680132750
    },
    {
        "content": "<p>Do you know where I can find the code for this in lean4?</p>",
        "id": 345532300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680132785
    },
    {
        "content": "<p>delta deriving doesn't work in lean 4</p>",
        "id": 345538417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680136608
    },
    {
        "content": "<p>the issue is that delta deriving applies to <em>arbitrary</em> typeclasses and the deriving handler framework for lean 4 wants to key on specific typeclasses</p>",
        "id": 345538484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680136651
    },
    {
        "content": "<p>Does the <code>deriving</code> syntax even exist for <code>def</code>?</p>",
        "id": 345538838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680136815
    },
    {
        "content": "<p>it does</p>",
        "id": 345539680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680137257
    },
    {
        "content": "<p>So where can I find the deriving handler for <code>LargeCategory</code>? I looked in mathlib4 and in lean4 in the folder Scott mentioned, but didn’t find it. Any pointers <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 345540952,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680137995
    },
    {
        "content": "<p>a grep for <code>deriving LargeCategory</code> in mathlib4 turns up empty</p>",
        "id": 345541435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680138246
    },
    {
        "content": "<p>from what I can tell, every delta derive in mathlib4 is commented out</p>",
        "id": 345541502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680138302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"https://github.com/leanprover-community/mathlib4/blob/13e2b8c83e2f62854bb14ce6813af030061a8de9/Mathlib/Algebra/Category/Ring/Basic.lean#L80\">https://github.com/leanprover-community/mathlib4/blob/13e2b8c83e2f62854bb14ce6813af030061a8de9/Mathlib/Algebra/Category/Ring/Basic.lean#L80</a></p>",
        "id": 345541729,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680138368
    },
    {
        "content": "<p>not in master, but it works.</p>",
        "id": 345541742,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680138381
    },
    {
        "content": "<p>Aha, it appears that delta deriving has been hard-coded into the derive framework:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/583e023/src/Lean/Elab/Deriving/Basic.lean#L107-L109\">https://github.com/leanprover/lean4/blob/583e023/src/Lean/Elab/Deriving/Basic.lean#L107-L109</a></p>",
        "id": 345543568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680139534
    },
    {
        "content": "<p>The second limitation of lean 4 derive is that it applies to classes given as <code>Name</code> rather than <code>Expr</code>, which means you can't do e.g. <code>@[derive module real]</code>. My guess is that this is the problem for <code>ConcreteCategory</code>, if it isn't a unary typeclass then it won't be triggered</p>",
        "id": 345543822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680139730
    },
    {
        "content": "<p>It looks like the real error is a suppressed error message of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"bp\">@</span><span class=\"n\">ConcreteCategory</span> <span class=\"o\">(</span><span class=\"n\">Bundled</span> <span class=\"n\">Semiring</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 345544252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680140074
    },
    {
        "content": "<p>Ah! okay I see. Thanks!</p>",
        "id": 345544360,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680140186
    },
    {
        "content": "<p>I think the <code>@</code> there is load-bearing: it really is <code>ConcreteCategory</code> applied only to its first argument, and I can confirm that the typeclass search fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"bp\">@</span><span class=\"n\">ConcreteCategory</span> <span class=\"o\">(</span><span class=\"n\">Bundled</span> <span class=\"n\">Semiring</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">ConcreteCategory</span> <span class=\"o\">(</span><span class=\"n\">Bundled</span> <span class=\"n\">Semiring</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 345544380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680140210
    },
    {
        "content": "<p>in other words, this is not really a unary typeclass as far as lean is concerned</p>",
        "id": 345544417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680140250
    },
    {
        "content": "<p>okay, so perhaps I'll try to write a custom derive handler for ConcreteCategory</p>",
        "id": 345545416,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680141073
    },
    {
        "content": "<p>this particular example looks like a bug in <code>processDefDeriving</code></p>",
        "id": 345545937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680141446
    },
    {
        "content": "<p>it's attempting to synthesize an instance of something which isn't even a type</p>",
        "id": 345546116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680141514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/3198\">mathlib4#3198</a></p>",
        "id": 345850129,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680243522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> , could we factor out the construction of the equivalence with the proxy type, as a separate term elaborator / tactic? It seems exposing this part would be very useful for other derive handlers.</p>",
        "id": 345899529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680257329
    },
    {
        "content": "<p>Does it make sense to skip the sum/sigma construction and jump directly to making the w-type equivalence?</p>",
        "id": 345906373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680259143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Sure, now we have a <code>proxy_equiv%</code> elaborator. For example, <code>proxy_equiv% (Option α) : Unit ⊕ α ≃ Option α</code></p>",
        "id": 346053275,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680295395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The idea with using a sum/sigma construction is to make use of mathlib's pre-existing <code>Fintype</code> instances. There don't seem to be any for w-types.</p>",
        "id": 346053589,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680295506
    },
    {
        "content": "<p>Ah, that makes sense</p>",
        "id": 346053984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680295643
    },
    {
        "content": "<p>A related idea would be to have a variant that inserts <code>Lex</code> terms to help build a <code>LinearOrder (Lex MyType)</code> instance</p>",
        "id": 346054500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680295836
    },
    {
        "content": "<p>That is, allow hooks of some kind to allow Sum and Sigma to be swapped for types with other properties</p>",
        "id": 346054640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680295884
    },
    {
        "content": "<p>I wonder if you can make a cheap <code>ToExpr</code> derive handler out of this. To turn an <code>x : X</code> into an expression, run <code>let e ← toExpr ((proxy_equiv% _) x)</code>, and then return <code>q((proxy_equiv% _).symm $e)</code>. Maybe a round of simplification to unfold the definition of the equiv, and you'd actually get what you want.</p>",
        "id": 346090515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680313566
    }
]