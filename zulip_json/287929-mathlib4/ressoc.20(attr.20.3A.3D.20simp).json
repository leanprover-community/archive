[
    {
        "content": "<p>Here is yet another issue I ran into while porting monoidal natural transformations.<br>\nThe line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">reassoc</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)]</span> <span class=\"n\">MonoidalNatTrans.tensor</span>\n</code></pre></div>\n<p>gives me a warning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">source</span> <span class=\"n\">declaration</span> <span class=\"n\">CategoryTheory.MonoidalNatTrans.tensor</span> <span class=\"n\">was</span> <span class=\"n\">given</span> <span class=\"kn\">attribute</span> <span class=\"n\">simp</span> <span class=\"n\">before</span> <span class=\"n\">calling</span> <span class=\"kd\">@[reassoc]</span><span class=\"bp\">.</span> <span class=\"n\">The</span> <span class=\"n\">preferred</span> <span class=\"n\">method</span> <span class=\"n\">is</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">@[reassoc (attr := simp)]</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">apply</span> <span class=\"n\">the</span> <span class=\"kn\">attribute</span> <span class=\"n\">to</span> <span class=\"n\">both</span> <span class=\"n\">CategoryTheory.MonoidalNatTrans.tensor</span> <span class=\"n\">and</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">declaration</span> <span class=\"n\">CategoryTheory.MonoidalNatTrans.tensor_assoc.</span> <span class=\"o\">[</span><span class=\"n\">linter.existingAttributeWarning</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This is <a href=\"https://github.com/leanprover-community/mathlib4/pull/2466\">!4#2466</a><br>\nIs this a bug in <code>reassoc</code>?</p>",
        "id": 329803505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677180861
    },
    {
        "content": "<p>What do you want to attach <code>simp</code> to?</p>",
        "id": 329803857,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677180978
    },
    {
        "content": "<p><code>MonoidalNatTrans.tensor</code> and <code>MonoidalNatTrans.tensor_assoc</code></p>",
        "id": 329803905,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677180995
    },
    {
        "content": "<p>Oh, that might be a copy-paste mistake when porting the <code>attr :=</code> feature from <code>to_additive</code> to <code>reassoc</code>.</p>",
        "id": 329804117,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677181073
    },
    {
        "content": "<p>I’ve been blindly following the linter suggestions here with the thought that you could <code>simp</code> from the <code>assoc</code> version to the regular version or that it did it for both.</p>",
        "id": 329804118,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677181073
    },
    {
        "content": "<p>Doing this in the other direction (i.e. <code>attribute [reassoc (attr := simp), simp] MonoidalNatTrans.tensor</code>) gets rid of the warning.</p>",
        "id": 329804374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677181162
    },
    {
        "content": "<p>Although, I think that <code>reassoc (attr := simp)</code> indeed applies <code>simp</code> to both the original declaration and the <code>_assoc</code> declaration.</p>",
        "id": 329804378,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677181164
    },
    {
        "content": "<p>Ah so you're saying that <code>attribute [reassoc (attr := simp)] MonoidalNatTrans.tensor</code> suffices here?</p>",
        "id": 329804446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677181195
    },
    {
        "content": "<p>yes</p>",
        "id": 329804764,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677181291
    },
    {
        "content": "<p>ok, thanks. I'll go with that for now.</p>",
        "id": 329804830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677181321
    },
    {
        "content": "<p>Is there a quick way to verify whether a lemma has a simp attribute?</p>",
        "id": 329804920,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677181342
    },
    {
        "content": "<p>I'm not saying I love it, but you should just be able to copy it and try proving with <code>by simp</code>. There's probably a better way though.</p>",
        "id": 329805025,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677181391
    },
    {
        "content": "<p>Try to remove it</p>",
        "id": 329805124,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677181434
    },
    {
        "content": "<p>You’ll get yelled at if it isn’t tagged</p>",
        "id": 329805331,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677181494
    },
    {
        "content": "<p>okay, using the <code>by simp</code> check does indeed verify what Floris said above :)</p>",
        "id": 329805334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677181495
    },
    {
        "content": "<p>Another way: (the two declarations are in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2397\">!4#2397</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Tactic</span> <span class=\"n\">Simp</span>\n\n<span class=\"sd\">/-- Checks whether `declName` is in `SimpTheorems` as either a lemma or definition to unfold. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Meta.SimpTheorems.hasAttribute</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">SimpTheorems</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">d.isLemma</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">decl</span> <span class=\"n\">declName</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">d.isDeclToUnfold</span> <span class=\"n\">declName</span>\n\n<span class=\"sd\">/-- Tests whether `decl` has `simp`-attribute `simpAttr`. Returns `false` is `simpAttr` is not a</span>\n<span class=\"sd\">valid simp-attribute. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">isInSimpSet</span> <span class=\"o\">(</span><span class=\"n\">simpAttr</span> <span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">simpDecl</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpExtension</span><span class=\"bp\">?</span> <span class=\"n\">simpAttr</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">simpDecl.getTheorems</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hasAttribute</span> <span class=\"n\">decl</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">liftCoreM</span> <span class=\"k\">do</span> <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← isInSimpSet `simp `myLemma}\"</span> <span class=\"c1\">-- replace myLemma</span>\n</code></pre></div>",
        "id": 329805680,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677181613
    }
]