[
    {
        "content": "<p>In Algebra.BigOperators.Fin <a href=\"https://github.com/leanprover-community/mathlib4/pull/1848\">mathlib4#1848</a> I get the following error with <code>to_additive</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_univ_two</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">prod_univ_succ</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">fin.prod_univ_two</span> <span class=\"n\">Fin.prod_univ_two</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>application type mismatch\n  0\nargument has type\n  OfNat (Fin 2) 1\nbut function has type\n  [self : OfNat (Fin 2) 0] → Fin 2\n</code></pre></div>\n<p>If I put the additive version in before the statement, it works fine<br>\n(<code>theorem sum_univ_two [AddCommMonoid β] (f : Fin 2 → β) : (∑ i, f i) = f 0 + f 1 :=</code>)</p>\n<p>I believe it might be because <code>0</code> and <code>1</code>should not be translated. I haven't kept up to date with <code>to_additive</code>, what's the thing to do here?</p>",
        "id": 323710876,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1674737561
    },
    {
        "content": "<p><code>to_additive</code> has special support for numerals, and should not translate <code>1</code> to <code>0</code> in this case. I will investigate.</p>",
        "id": 323728180,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674742123
    },
    {
        "content": "<p>As a temporary workaround, you can use the <code>Multiplicative</code> trick: formulate the additive lemma and prove it by applying the multiplicative one to <code>Multiplicative β</code>.</p>",
        "id": 323759969,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674749834
    },
    {
        "content": "<p>I found the error, and will open a PR shortly</p>",
        "id": 323766327,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674751343
    },
    {
        "content": "<p>Fixed by <a href=\"https://github.com/leanprover-community/mathlib4/pull/1861\">!4#1861</a>. It was a mistake introduced in the port of <code>to_additive</code>.</p>",
        "id": 323767825,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674751700
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323769194,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674752015
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 323776831,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1674753213
    }
]