[
    {
        "content": "<p>I feel really stupid asking this... is the following supposed to work in lean4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">тед</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340417402,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678294965
    },
    {
        "content": "<p>Note that the following is okay:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">тед</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340418806,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678295361
    },
    {
        "content": "<p>This has come up before, and I think is deliberate</p>",
        "id": 340420795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678295932
    },
    {
        "content": "<p>Changing and adding variables apparently now has to be done in separate <code>variables</code> commands</p>",
        "id": 340420850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678295949
    },
    {
        "content": "<p>okay, fair enough.</p>",
        "id": 340421012,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678296003
    },
    {
        "content": "<p>You get the impression that they want to make <code>variable</code> deprecated :-) It is terrifying sometimes during porting when some Lean 3 proof is broken and you look at the tactic state and there are a gazillion irrelevant variables in there, just because they were declared 1000 lines earlier and are long forgotten about (they weren't in the corresponding Lean 3 tactic state)</p>",
        "id": 340423046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678296581
    },
    {
        "content": "<p>Personally, I think it would clarify things if the \"adding variables\" command was called \"variable\" and the \"changing variables\" command was called something different.</p>",
        "id": 340423449,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678296673
    },
    {
        "content": "<p>Now you can't do them both at once, your suggestion makes a lot of sense.</p>",
        "id": 340429179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678298160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/making.20variables.20implicit/near/340420795\">said</a>:</p>\n<blockquote>\n<p>This has come up before, and I think is deliberate</p>\n</blockquote>\n<p>I don't think it is deliberate, it doesn't make much sense from a user perspective</p>",
        "id": 340464783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678309785
    },
    {
        "content": "<p>Yes, this is most likely not deliberate, otherwise it would be a hard error. The problem is that the entire <code>variable</code> binder set is test-elaborated <em>before</em> binders corresponding to binder updates are removed. The fix is not a one-liner from what I can see.</p>",
        "id": 340552457,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678354181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Shall I open an issue in the lean4 repo?</p>",
        "id": 340656454,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678379859
    },
    {
        "content": "<p>Yes, please do</p>",
        "id": 340659924,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678380666
    }
]