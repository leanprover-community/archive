[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConcreteCategory.hasCoeToSort#doc\">docs4#ConcreteCategory.hasCoeToSort</a>. OTOH, for some bundled concrete categories we have coercions like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CommRingCat.instCoeSortCommRingCatType#doc\">docs4#CommRingCat.instCoeSortCommRingCatType</a></p>",
        "id": 362555702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685562115
    },
    {
        "content": "<p>Since Lean 4 unfolds coercions, instances defined for one of these coercions (e.g., <code>CommRing</code>) won't work for the other.</p>",
        "id": 362555951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685562190
    },
    {
        "content": "<p>Probably, Lean 3 was able to see that two <code>has_coe_sort</code> instances are defeq.</p>",
        "id": 362556081,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685562230
    },
    {
        "content": "<p>I see two possible solutions:</p>\n<ol>\n<li>Define <code>ConcreteCategory.α</code> or <code>ConcreteCategory.Carrier</code> and use it instead of <code>X.α</code> everywhere.</li>\n<li>Redefine <code>ConcreteCategory</code> so that coercions is an <code>outParam</code> argument and supply <code>Bundled.α</code> in the <code>Bundled</code> instance.</li>\n</ol>",
        "id": 362556643,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685562380
    },
    {
        "content": "<p>Do I miss some better solution?</p>",
        "id": 362556668,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685562389
    },
    {
        "content": "<p>The second approach would force us to unfold the definition of a <code>Functor</code> in <code>ConcreteCategory</code>.</p>",
        "id": 362556793,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685562430
    },
    {
        "content": "<p>While the first one drops very convenient <code>X.α</code>.</p>",
        "id": 362556866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685562457
    },
    {
        "content": "<p>Ping here</p>",
        "id": 363583392,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685922617
    },
    {
        "content": "<p>Also there are conflict about function coercion, there is <code>ConcreteCategory.hasCoeToFun</code> and coercion from <code>FunLike</code> instances when <code>CommRing</code> or similiar categories are in considerations. See also <a href=\"#narrow/stream/287929-mathlib4/topic/ag.20in.20ml4\">here</a></p>",
        "id": 363591060,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1685928655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, could you point to a situation where there is a problem because of these two unrelated coercions? Sorry, I'm still trying to understand what's going on here.</p>",
        "id": 363616176,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685944988
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/4531\">!4#4531</a></p>",
        "id": 363616278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685945032
    },
    {
        "content": "<p>Sorry, let me check</p>",
        "id": 363616348,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685945045
    },
    {
        "content": "<p>Yes, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4531\">!4#4531</a></p>",
        "id": 363616402,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685945071
    },
    {
        "content": "<p>This file enables (locally) the generic coercion</p>",
        "id": 363616444,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685945090
    },
    {
        "content": "<p>But some instances assume the <code>Bundled</code>-specific coercion.</p>",
        "id": 363616527,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685945122
    },
    {
        "content": "<p>In Lean 3, both were hidden behind <code>coe</code> and were defeq.</p>",
        "id": 363616579,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685945140
    },
    {
        "content": "<p>Here they're still defeq but instances can no longer see it.</p>",
        "id": 363616632,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685945160
    }
]