[
    {
        "content": "<p>Sometime when setting <code>maxHeartbeats</code>, people are inclined to set it as low as possible. I think this is counterproductive --- when small changes earlier in the library tip the declaration back over the limit, it is annoying to the editor who is suddenly faced with an error far away in the library.</p>\n<p>I recommend using the least number 2^k * 200000 which suffices.</p>\n<p>You can use the command <code>count_heartbeats in</code> which will automatically suggest a number of this form.</p>\n<p>(Just pinging <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> as the most recent example I encountered of this problem was from you. :-)</p>",
        "id": 370978983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688093790
    },
    {
        "content": "<p>(e.g. <code>set_option maxHeartbeats 1643256 in</code> has no useful content. :-)</p>",
        "id": 370979114,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688093842
    },
    {
        "content": "<p>I disagree to some extent. Allowing up to a factor of 2 is an awful lot. I agree there should be some buffer so that changes throughout the library aren't guaranteed to trip them, but something like 10-20% higher than required seems reasonable. This should alert the user that maybe something they did broke something.</p>",
        "id": 370981091,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688094523
    },
    {
        "content": "<p>Is 1.2 okay? I'm very happy to merge a change to <code>count_heartbeats</code>!</p>",
        "id": 370983501,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688095402
    },
    {
        "content": "<p>Ha, I used <code>count_heartbeats</code> to find the smallest number possible. Sorry about that, I will use 1.2 factors now.</p>",
        "id": 371016729,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1688106799
    },
    {
        "content": "<p>This was why I made <code>count_heartbeats</code> print a suggestion. I knew that people would use it to write <code>set_option maxHeartbeats 1643256</code> otherwise. :-)</p>",
        "id": 371017601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688107036
    },
    {
        "content": "<p>does it have a code action?</p>",
        "id": 371019948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688107655
    },
    {
        "content": "<p>In addition to being approximately 1.2 of the true value, I would suggest that it be rounded to 2 significant figures</p>",
        "id": 371020710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688107879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/let's.20not.20crank.20maxHeartbeats.20as.20low.20as.20possible/near/371019948\">said</a>:</p>\n<blockquote>\n<p>does it have a code action?</p>\n</blockquote>\n<p>It has a <code>Try this</code> code action but it apparently reformats the command. I think it should just replace <code>count_heartbeats</code> with <code>set_option maxHeartbeats N</code> instead of the whole command</p>",
        "id": 371022033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688108223
    },
    {
        "content": "<p>What actually is the benefit of keeping the heartbeats low? <br>\nMy experience with them so far has always been that something hits the limit, so I increase it until it works. What is the downside of just setting it to <code>10000000000</code> immediately?</p>",
        "id": 371039459,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1688112131
    },
    {
        "content": "<p>you miss an opportunity for review if it later spikes a lot more</p>",
        "id": 371039743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688112192
    },
    {
        "content": "<p>that is, adding <code>set_option maxHeartbeats</code> is a code smell, and increasing the limit is also a code smell</p>",
        "id": 371040001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688112240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/let's.20not.20crank.20maxHeartbeats.20as.20low.20as.20possible/near/371039743\">said</a>:</p>\n<blockquote>\n<p>you miss an opportunity for review if it later spikes a lot more</p>\n</blockquote>\n<p>So it acts kind of like linter warning you of code that you should probably redo/refactor?</p>",
        "id": 371041087,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1688112453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I have a timeout in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5610\">#5610</a> but <code>count_heartbeats</code> tells me a number below the limit.</p>",
        "id": 371103788,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688123424
    },
    {
        "content": "<p>Does it count time spent in processing attributes?</p>",
        "id": 371103866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688123444
    },
    {
        "content": "<p>I think that the <code>@[simps!]</code> makes it go over the limit.</p>",
        "id": 371104032,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688123479
    },
    {
        "content": "<p>Hmm, I thought <code>count_heartbeats in</code> would be counting everything that follows!</p>",
        "id": 371107420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688124115
    },
    {
        "content": "<p><code>count_heartbeats in</code> looks like it's counting everything that follows, and I've never seen anything that could reset the value of <code>IO.getNumHeartbeats</code>. This function reads the value of <code>m_heartbeat</code> in the heap data structure, and it's only ever incremented.</p>\n<p>There's a chance that it could be unreliable if there's work being done on a separate thread. The <code>m_heartbeat</code> field counts how many small memory allocations (and also how many expression comparisons) are performed for a particular thread.</p>\n<p>(There's also a separate heartbeat system that counts how many times the <code>check_system()</code> function is run, and it seems like it might only be settable by the <code>timeout</code> command line option.)</p>",
        "id": 371118737,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688126178
    },
    {
        "content": "<p>Do we have a version of <code>count_heartbeats in</code> but for <code>synthInstance.maxHeartbeats</code>?</p>",
        "id": 378082988,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690194987
    },
    {
        "content": "<p>BTW I've noticed a small bug (or at least an unpleasant behavior) in <code>count_heartbeats</code>: if the theorem has long lines that have been split in several lines manually, after clicking on the suggestion to replace <code>count_heartbeats</code> by <code>set_option maxHeartbeats ...</code> those lines are long again.</p>",
        "id": 378083953,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690195106
    },
    {
        "content": "<p>Yes, we need to work out how to have the \"Try this:\" span for <code>count_heartbeats in</code> not include the command. If you look at the current definition it does, but when I wrote it I couldn't see how to avoid this: I couldn't generate valid syntax terminating in <code>in</code>.</p>",
        "id": 378092746,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690196608
    },
    {
        "content": "<p>(But no, to your first question. I don't know where or if the counter for <code>synthInstance.maxHeartbeats</code> is exposed.)</p>",
        "id": 378092948,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690196653
    }
]