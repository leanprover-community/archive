[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3404\">!4#3404</a> provides a substantial speed-up to library_search, by caching the discrimination tree it builds (and indeed having CI do this work, so the cache is automatically obtained via <code>lake exe cache get</code>). However it involved redesigning how we use <code>Mathlib.lean</code>, so please read on!</p>",
        "id": 348679371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681294028
    },
    {
        "content": "<p>From the PR description:</p>\n<hr>\n<p>This works by creating an extra file in the <code>build</code> directory containing a cache of the <code>library_search</code> discrimination tree.</p>\n<ul>\n<li>If you modify a file, then open another file, <code>library_search</code> will not see the modified declarations.</li>\n<li>However after a full <code>lake build</code> or <code>lake exe cache get</code>, you will see the modifications.</li>\n<li>In particular CI will automatically do the work of building this cache.</li>\n<li>This will increase the size of a <code>lake exe cache get</code> download. (by 26mb, compressed)</li>\n</ul>\n<p>In order to achieve this, I needed to redesign how <code>Mathlib.lean</code> works. In the new model, <code>Mathlib.lean</code> just says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.All</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Extras</span>\n</code></pre></div>\n<p>and now <code>Mathlib.All</code> imports (almost) everything (and this is still enforced by CI), while files in <code>Mathlib/Extras/</code> are imported in <code>Mathlib.Extras</code>. This enables a \"post-processing\" file such as <code>Mathlib/Extras/LibrarySearchCache.lean</code> to itself <code>import Mathlib.All</code>, and know that it has everything.</p>\n<p>To accommodate the cache file, we create a new <code>build/extra/</code> directory, that can store <code>.olean</code> format cache files. Our <code>cache</code> executable now manages files in this directory too.</p>",
        "id": 348679493,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681294061
    },
    {
        "content": "<p>The diff is huge but only because git isn't detecting that you renamed <code>Mathlib</code> to <code>Mathlib.All</code>. But I guess you can't rename it in a preliminary PR?</p>",
        "id": 348680099,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1681294207
    },
    {
        "content": "<p>Yes. I tried various things here to persuade github to show it as a rename, but failed. You can safely ignore the differences there; the long chunk is still automatically generated.</p>",
        "id": 348680946,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681294417
    },
    {
        "content": "<p>This PR will perpetually be in <code>merge-conflict</code> state, because of what it does to <code>Mathlib.lean</code>. I won't attempt to keep this up-to-date.</p>",
        "id": 348681120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681294464
    },
    {
        "content": "<p>The display is a github limitation (git shows the rename just fine), though we shouldn't hold our breath hoping for a fix...</p>",
        "id": 348681213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681294492
    },
    {
        "content": "<p>Why not split <code>Mathlib.lean</code> in a spin-off PR (along with the necessary CI scripts), if that bit keeps getting conflicts?</p>",
        "id": 348681380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681294532
    },
    {
        "content": "<p>Let's just review this one quickly :)</p>",
        "id": 348681597,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681294571
    },
    {
        "content": "<p>Git will show it as a rename if we rename to <code>All</code> first, _then_ add the new <code>Mathlib.lean</code></p>",
        "id": 348681684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681294597
    },
    {
        "content": "<blockquote>\n<p>git shows the rename just fine</p>\n</blockquote>\n<p>not once bors gets to it it won't</p>",
        "id": 348681754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681294614
    },
    {
        "content": "<p>The issue is that the git data model does not support renames; any rename detection happens after the fact by the tool showing you the diff</p>",
        "id": 348681833,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681294634
    },
    {
        "content": "<p>Yes, and that rename detection relies on having atomic commits</p>",
        "id": 348681896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681294650
    },
    {
        "content": "<p>So if we create an atomic commit (aka PR) that does <code>Mathlib.lean</code> -&gt; <code>mathlib/All.lean</code>, everything will behave</p>",
        "id": 348681961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681294677
    },
    {
        "content": "<p>This isn't just about making the review easier, it should also prevent conflicts happening in any open PRs</p>",
        "id": 348682077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681294700
    },
    {
        "content": "<p>Because <code>git merge</code> will know that the rename happened</p>",
        "id": 348682117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681294711
    },
    {
        "content": "<p>I'd prefer to simply get delegation, do the last merge conflict fix, and merge. I think everyone can ignore the spurious parts of the diff...</p>",
        "id": 348682278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681294755
    },
    {
        "content": "<p>I'd strongly prefer we do the rename separately, it makes a handful of things easier and is not hard to do</p>",
        "id": 348682569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681294810
    },
    {
        "content": "<p>I was going to point out that moving Mathlib.lean like this will affect all other open PRs, and it seems that Eric is right that this could be avoided.</p>",
        "id": 348682664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681294835
    },
    {
        "content": "<p>The key thing is to <em>not</em> create the new <code>Mathlib.lean</code> in the same PR as the one that creates <code>Mathlib/All.lean</code></p>",
        "id": 348682793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681294865
    },
    {
        "content": "<p>(or not in the same commit, which given our setup is equivalent)</p>",
        "id": 348682947,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681294923
    },
    {
        "content": "<p>I think that's misleading Reid; putting things in separate commits in the same PR doesn't help because bors squashes them all back into a single commit. I assume you know that, but I can see someone misreading your message.</p>",
        "id": 348683248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681295033
    },
    {
        "content": "<p>If you tell bors \"bors single on\" it seems it will disable batching for that pr (<a href=\"https://bors.tech/documentation/\">https://bors.tech/documentation/</a>) perhaps you could just do that for this</p>",
        "id": 348683357,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1681295060
    },
    {
        "content": "<p>Batching is unrelated to squash merging</p>",
        "id": 348683390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681295069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instant.20library_search/near/348683390\">said</a>:</p>\n<blockquote>\n<p>Batching is unrelated to squash merging</p>\n</blockquote>\n<p>Urgh yes of course..</p>",
        "id": 348683422,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1681295084
    },
    {
        "content": "<p>Something to note about this PR: it adds a 26mb download to every invocation of <code>lake exe cache get</code>. I think this is worth it, but I think this is the main decision required to review this PR.</p>",
        "id": 348683533,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681295120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instant.20library_search/near/348682793\">said</a>:</p>\n<blockquote>\n<p>The key thing is to <em>not</em> create the new <code>Mathlib.lean</code> in the same PR as the one that creates <code>Mathlib/All.lean</code></p>\n</blockquote>\n<p>Oh, I misunderstood you. But if we land the commit without creating a new Mathlib.lean, does that leave us in a buildable state?</p>",
        "id": 348683759,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681295165
    },
    {
        "content": "<p>I mean that it must be in its own commit in the eventual master branch.</p>",
        "id": 348683776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681295172
    },
    {
        "content": "<p>But I can't just make a separate PR, because without <code>Mathlib.lean</code> it won't build.</p>",
        "id": 348683862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681295194
    },
    {
        "content": "<p>What consumes Mathlib.lean?</p>",
        "id": 348683915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681295204
    },
    {
        "content": "<p><code>lake</code></p>",
        "id": 348683939,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681295209
    },
    {
        "content": "<p>Maybe there is a lake configuration setting we can temporarily tweak for an intermediate PR?</p>",
        "id": 348684026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681295238
    },
    {
        "content": "<p>as far as I know it is just hardcoded to use the project name, however.</p>",
        "id": 348684073,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681295260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instant.20library_search/near/348683533\">said</a>:</p>\n<blockquote>\n<p>Something to note about this PR: it adds a 26mb download to every invocation of <code>lake exe cache get</code>. I think this is worth it, but I think this is the main decision required to review this PR.</p>\n</blockquote>\n<p>could this be configurable in future? like maybe <code>lake exe cache get</code> will usually get the full cache with the <code>l_s</code> cache but you could have <code>lake exe cache get minimal</code> not include this cache</p>",
        "id": 348684367,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681295338
    },
    {
        "content": "<p>this could be useful for leaf projects or such like</p>",
        "id": 348684442,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681295361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instant.20library_search/near/348683862\">said</a>:</p>\n<blockquote>\n<p>But I can't just make a separate PR, because without <code>Mathlib.lean</code> it won't build.</p>\n</blockquote>\n<p>We can theoretically have a non-building commit/PR in the master branch, if another commit/PR in the same branch fixes the build. That would require some very careful borsing though...</p>",
        "id": 348684731,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1681295436
    },
    {
        "content": "<p>Oh, if the file doesn't actually need to be called Mathlib.lean, we don't really need to rename the existing file</p>",
        "id": 348684793,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681295455
    },
    {
        "content": "<p>I would assume the top level file in lake must be configurable</p>",
        "id": 348684937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681295496
    },
    {
        "content": "<p>But also, why does it matter for the rename detection to work?</p>",
        "id": 348685421,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681295665
    },
    {
        "content": "<p>Otherwise every PR adding a file opened before the rename will show a merge conflict, and need to have its entry manually added to the new location instead of the old one</p>",
        "id": 348685632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681295733
    },
    {
        "content": "<p>It's not the end of the world, but seems worth avoiding</p>",
        "id": 348685670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681295744
    },
    {
        "content": "<blockquote>\n<p>That would require some very careful borsing though...</p>\n</blockquote>\n<p>Or we just push directly. I think avoiding conflicts with merges is a totally valid reason to skip bors one time to merge a rename</p>",
        "id": 348686445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681295951
    },
    {
        "content": "<p>It would still be nice if whatever we push to master actually builds. So I think it is worth trying to get lake to use a different main library file.</p>",
        "id": 348686824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681296070
    },
    {
        "content": "<p>In the branch there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_lib</span> <span class=\"n\">Cache</span> <span class=\"n\">where</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Cache</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>so maybe we just need to add a similar <code>roots</code> line to the <code>lean_lib Mathlib where</code> stanza?</p>",
        "id": 348687653,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681296299
    },
    {
        "content": "<p>Why does the pickling code have to be part of <code>Mathlib</code> at all? If it is a separate library, like <code>Cache</code> itself, there is no need to touch <code>Mathlib.lean</code> and users have control over when it is rebuilt.</p>",
        "id": 348692454,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681297559
    },
    {
        "content": "<p>This is a good question, and maybe I have the wrong design here. I did think about this question, however, I decided that ease of use was important, and in particular I wanted to minimize the work users would have to do to get a cache. Since they are already compelled to use <code>lake exe cache get</code> most of the time, I really wanted to piggyback on that.</p>",
        "id": 348695111,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681298334
    },
    {
        "content": "<p>That said, could we incorporate this functionality into <code>cache</code> itself? Obviously <code>cache</code> can't <code>import Mathlib</code>, or we won't be able to build it. But whatever tool builds the cache needs to do exactly that.</p>",
        "id": 348695487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681298442
    },
    {
        "content": "<p>I guess <code>cache</code> could download a <code>library_search</code> cache olean, and some entirely separate utility could be responsible for creating it, and we just run this in CI.</p>",
        "id": 348695658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681298494
    },
    {
        "content": "<p>This would require <code>cache</code> to be cleverer, and have custom logic for handling these extra files. At present the cache file just gets bundled along with the other build artifacts for <code>Extras/LibrarySearchCache.lean</code>.</p>",
        "id": 348696127,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681298625
    },
    {
        "content": "<p>I'm not sure I understand the problem, <code>cache</code> doesn't care about how mathlib4 is built and will just upload/download anything reachable from <code>Mathlib.lean</code>, which we could easily change to \"from <code>Mathlib.lean</code> or <code>Mathlib/Extras/LibrarySearchCache.lean</code>\". And even make that conditional to implement <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>'s request.</p>",
        "id": 348698676,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681299281
    },
    {
        "content": "<p>I'm not sure how these things work exactly, but could MathlibExtras be a separate lean_lib that itself depends on Mathlib, all using the same lakefile?</p>",
        "id": 348698701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681299288
    },
    {
        "content": "<p>The only restriction I can see is that it has to be a file in <code>Mathlib/</code>, otherwise it will be extracted to the wrong location when using mahtlib4 as a dependency (but that could be adjusted of course): <a href=\"https://github.com/leanprover-community/mathlib4/blob/3b6fdff16311f67b01a2a5abc218d7b96adecb2f/Cache/IO.lean#L185-L188\">https://github.com/leanprover-community/mathlib4/blob/3b6fdff16311f67b01a2a5abc218d7b96adecb2f/Cache/IO.lean#L185-L188</a></p>",
        "id": 348699011,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681299364
    },
    {
        "content": "<p>On a related note, many AI tools like the recent <a href=\"https://arxiv.org/abs/2304.00994\"><code>suggest_premises</code></a> in Lean (<span class=\"user-mention\" data-user-id=\"257492\">@Bartosz Piotrowski</span>, etc) and MagnusHammer for Isabelle (<a class=\"stream-topic\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/New.20paper.3A.20Magnushammer\">#Machine Learning for Theorem Proving &gt; New paper: Magnushammer</a> ) associate with each theorem (or each declaration) a vector embedding.  If there was a common protocol by which projects could associate extra metadata to declarations to speed up retrieval not just for library search but other future AI assisted search tools, I could see a lot of advantage there, especially if it was easy to use.</p>",
        "id": 348699294,
        "sender_full_name": "Jason Rute",
        "timestamp": 1681299432
    },
    {
        "content": "<p>I think <code>suggest_premises</code> might be fast enough that it doesnât need to be cached (although I think it would speed it up), but the data for a MagnusHammer-style tactic would definitely need to be cached.</p>",
        "id": 348699831,
        "sender_full_name": "Jason Rute",
        "timestamp": 1681299566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, so under this suggestion, we would modify the CI for <code>Mathlib.lean</code> to check that it imports everything <em>except</em> some subset (e.g. the <code>Mathlib/Extras/</code> directory in the current PR?</p>",
        "id": 348701634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681299910
    },
    {
        "content": "<p>Either that or extend Cache's <code>isPathFromMathlib</code> function, yes. The latter might be a bit cleaner.</p>",
        "id": 348702041,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681299991
    },
    {
        "content": "<p>Is there any mechanism here for <code>library_search</code> to operate (efficiently) on downstream projects too?</p>",
        "id": 348703173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681300268
    },
    {
        "content": "<p>I don't think that just modifying Cache is going to cut it. The <code>LibrarySearchCache.lean</code> needs to be able to import everything (except itself), so it can't be imported by <code>Mathlib.lean</code></p>",
        "id": 348703189,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681300272
    },
    {
        "content": "<p>Ugh, this is sounding miserable enough to get working in mathlib, let's not think about downstream projects yet. :-(</p>",
        "id": 348703287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681300299
    },
    {
        "content": "<p>So to be clear, I meant extending <code>isPathFromMathlib</code> so that <code>LibrarySearchCache.lean</code> would <em>not</em> have to be placed in <code>Mathlib/</code> but in its own folder and Lake library that depends on <code>Mathlib</code>.</p>",
        "id": 348704384,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681300537
    },
    {
        "content": "<p>I guess I don't understand why modifying <code>isPathFromMathlib</code> is relevant. It is behind a <code>true || isPathFromMathlib ...</code> as far as I'm concerned. :-)</p>",
        "id": 348705091,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681300699
    },
    {
        "content": "<p>Yes, we can ignore that for the first version :)</p>",
        "id": 348705230,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681300732
    },
    {
        "content": "<p>Okay, sometime in the next few days I will have another go at this PR, just making a new <code>lean_lib</code> entry point.</p>",
        "id": 348705991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681300895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instant.20library_search/near/348683533\">said</a>:</p>\n<blockquote>\n<p>Something to note about this PR: it adds a 26mb download to every invocation of <code>lake exe cache get</code>. I think this is worth it, but I think this is the main decision required to review this PR.</p>\n</blockquote>\n<p>Might be interesting to throw <a href=\"https://github.com/gebner/oleanparser/pull/4\">https://github.com/gebner/oleanparser/pull/4</a> at it btw. Just from that number I can't tell if it is a reasonable amount or not.</p>",
        "id": 348706477,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681301023
    },
    {
        "content": "<p>Okay, I have revamped this PR! It no longer requires changing how <code>Mathlib.lean</code> works, happily. It seems to result in correctly uploading and downloading the cache file.</p>",
        "id": 350919610,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681867977
    },
    {
        "content": "<p>I would love to get <a href=\"https://github.com/leanprover-community/mathlib4/pull/3404\">!4#3404</a> in my mathlib! This looks like a marvellous improvement to <code>library_search</code>. Could some of the meta reviewers please take a look at it?</p>",
        "id": 350960643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681888931
    },
    {
        "content": "<p>Left some comments. In particular there is some not great handling of unsafe functions: reminder that <code>unsafe</code> is not just a syntactic burden that should be hidden away by using <code>TermUnsafe</code> at the first opportunity!</p>",
        "id": 351221470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681972544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I'm actually not sure how to use <code>withUnpickle</code> successfully here. I want to hold onto the value from <code>unpickle</code> forever: I'm handing it to <code>initialize</code>.</p>",
        "id": 351225122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681973650
    },
    {
        "content": "<p>in that case you need to hold on to the <code>CompactedRegion</code> forever too</p>",
        "id": 351225162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681973671
    },
    {
        "content": "<p>put it in a struct in the type of the <code>initialize</code></p>",
        "id": 351225211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681973690
    },
    {
        "content": "<p>Okay!</p>",
        "id": 351225238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681973699
    },
    {
        "content": "<p>(you won't be able to use <code>withUnpickle</code> in that case)</p>",
        "id": 351225378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681973746
    },
    {
        "content": "<p>Fixed, thanks. I'll do another round of CI to make sure it is still putting the file in a findable place.</p>",
        "id": 351227874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681974474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instant.20library_search/near/351225162\">said</a>:</p>\n<blockquote>\n<p>in that case you need to hold on to the <code>CompactedRegion</code> forever too</p>\n</blockquote>\n<p>This is not actually true, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.CompactedRegion.free#doc\">docs4#Lean.CompactedRegion.free</a>. <code>readModuleData</code> could not be safe otherwise.</p>",
        "id": 351247688,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681979703
    },
    {
        "content": "<p>I'm not sure how that contradicts my point. I am aware of <code>CompactedRegion.free</code>, although the part I'm not sure about is whether <code>CompactedRegion</code> automatically calls <code>free</code> when the refcount goes to zero</p>",
        "id": 351261000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681982804
    },
    {
        "content": "<p>I am assuming that it does, which means that you need to have a live reference to a <code>CompactedRegion</code> while you play with any lean objects which might possibly hold pointers to this region</p>",
        "id": 351261154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681982841
    },
    {
        "content": "<p>The alternative design would be that dropping a <code>CompactedRegion</code> causes the region to be leaked, in which case the original code would be safe</p>",
        "id": 351261634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681982951
    },
    {
        "content": "<p>Ah, I see now <code>def CompactedRegion := USize</code> implies that it can't have a destructor</p>",
        "id": 351262156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681983083
    },
    {
        "content": "<p>Could someone take another look again? Hopefully the issues have been successfully dealt with now.</p>",
        "id": 352162922,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682312950
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 352169848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682315597
    },
    {
        "content": "<p>Is th warning</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">MathlibExtras.lean</span> <span class=\"n\">not</span> <span class=\"n\">found.</span> <span class=\"n\">Skipping</span> <span class=\"n\">all</span> <span class=\"n\">files</span> <span class=\"n\">that</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">it</span>\n</code></pre></div>\n<p>related to the new library_search cache? This is in a project depending on mathlib.</p>",
        "id": 353339921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682607619
    },
    {
        "content": "<p>Yes, the library search cache was not tested for downstream projects. I can take a look.</p>",
        "id": 353521391,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682634865
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 353521480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682634880
    },
    {
        "content": "<p>Fixed and tested in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3721\">!4#3721</a>.</p>",
        "id": 354089778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682724966
    },
    {
        "content": "<p>Thanks for those fixes Scott!</p>",
        "id": 354091406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682725314
    }
]