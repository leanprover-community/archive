[
    {
        "content": "<p>Hi! I saw that the <code>hint</code> tactic got merged recently, that's very exciting. I was checking this example out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">hint</span> <span class=\"c\">/-</span><span class=\"cm\"> Try these: • simp_all only [and_self] -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>Should there be some kind of priority system so that <code>hint</code> tries the light-weight tactics such as <code>tauto</code> first before the heavy ones e.g. <code>simp</code> and <code>linarith</code>? In the code it seems the hints are tried in arbitrary order:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hint</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tacs</span> <span class=\"o\">:=</span> <span class=\"n\">Nondet.ofList</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getHints</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">results</span> <span class=\"o\">:=</span> <span class=\"n\">tacs.filterMapM</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">msgs</span> <span class=\"bp\">←</span> <span class=\"n\">observing</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">withMessageLog</span> <span class=\"o\">(</span><span class=\"n\">withoutInfoTrees</span> <span class=\"o\">(</span><span class=\"n\">evalTactic</span> <span class=\"n\">t</span><span class=\"o\">)))</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getGoals</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">suggestion</span> <span class=\"n\">t</span> <span class=\"n\">msgs</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 403545816,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700642918
    },
    {
        "content": "<p>This will also go nicely with parallelising the tactic</p>",
        "id": 403545880,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700642945
    },
    {
        "content": "<p>The idea is to stop looking as soon as one of the parallel attempts succeeds, so I don't think this would be easy</p>",
        "id": 403551649,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700644987
    },
    {
        "content": "<p>What do you mean? You should be able to parallelise the tactics in order too</p>",
        "id": 403562594,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700648569
    },
    {
        "content": "<p>Also regarding the <code>tauto</code> example I suggested at the start, it seems the problem is simply that <code>tauto</code> is not registered:<br>\n<a href=\"/user_uploads/3121/iB44237waOo7lr7LOsDH1pL2/Screenshot-2023-11-22-at-10.23.08.png\">Screenshot-2023-11-22-at-10.23.08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iB44237waOo7lr7LOsDH1pL2/Screenshot-2023-11-22-at-10.23.08.png\" title=\"Screenshot-2023-11-22-at-10.23.08.png\"><img src=\"/user_uploads/3121/iB44237waOo7lr7LOsDH1pL2/Screenshot-2023-11-22-at-10.23.08.png\"></a></div>",
        "id": 403562678,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700648606
    },
    {
        "content": "<p>Isn't \"parallelise in order\" a contradiction in terms?</p>",
        "id": 403565090,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1700649377
    },
    {
        "content": "<p>Uhh I am not a computer science expert, but I mean to assign those jobs (\"test this tactic\") in order to multiple processes (parallelise)</p>",
        "id": 403565199,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700649422
    },
    {
        "content": "<p>Like how <a href=\"https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.imap\">multiprocessing.pool.Pool.imap</a> does it, where it returns the mapped results in order. Maybe I'm being stupid here</p>",
        "id": 403565496,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700649537
    },
    {
        "content": "<p>The point is that you try tactics A, B, C, ... at the same time, and the result you get is the first one that finishes</p>",
        "id": 403565766,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700649632
    },
    {
        "content": "<p><code>hint</code> is supposed to stop after the first result is returned, the PR just hasn't been merged yet</p>",
        "id": 403569666,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700651038
    },
    {
        "content": "<p>But a configuration option that tries all choices and picks the simplest one, which I guess is what you're asking for, sounds reasonable</p>",
        "id": 403569831,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700651102
    },
    {
        "content": "<p>Yes, if someone wants to add a switch so that it returns all results, rather than stopping after finding one that closes the goal, that would be fine.</p>",
        "id": 403569924,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700651150
    },
    {
        "content": "<p>But for the most part, if one closes the goal I'm not sure I really care about the details. :-)</p>",
        "id": 403569998,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700651170
    },
    {
        "content": "<p>(Note that with Lean's <code>Task</code> model, there is no way to assign priorities.)</p>",
        "id": 403570058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700651199
    },
    {
        "content": "<p>I was thinking more like \"try <code>tauto</code> then &lt;insert other lightweight tactics&gt; then <code>simp</code> and <code>linarith</code> last\" rather than \"try them in arbitrary order\" <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span></p>",
        "id": 403570066,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700651203
    },
    {
        "content": "<p>The point of parallelisation is that they are all tried at once.</p>",
        "id": 403570257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700651282
    },
    {
        "content": "<p>The price of that is that if you don't have enough cores, you have lost the ability to choose the order.</p>",
        "id": 403570398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700651331
    },
    {
        "content": "<p>Ahhhhhhh right, my bad</p>",
        "id": 403570501,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1700651369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110524\">Scott Morrison</span> speaking of not having enough cores, can we have an option to limit the number of cores <code>hint</code> will use?</p>",
        "id": 403647915,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1700678950
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> You might have been thinking of concurrency vs parallelism. Without parallelism, it could have been that the tactics get run concurrently using a time-sharing scheme, and scheduling fast-completing tactics, ones that can complete within the time quantum, could make sense.)</p>",
        "id": 403653350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700681214
    },
    {
        "content": "<p>Hmm, aren’t there usually way more tactics to run than cores? Could we (down the road) set up a priority-ordered queue of tactics and one worker per core, each of which pops a tactic off the queue? (Is that kind of thing even possible in Lean?)</p>",
        "id": 403667776,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700688560
    },
    {
        "content": "<p>Currently there are 7 appearances of <code>register_hint</code> in Mathlib, so on the same order as number of cores.</p>",
        "id": 403682170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700697139
    },
    {
        "content": "<p>It would definitely be possible to write a queue that only generates a bounded number of <code>Task</code>s.</p>",
        "id": 403682196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700697168
    },
    {
        "content": "<p>I think all the work would be in modifying/generalizing <a href=\"https://github.com/leanprover-community/mathlib4/pull/8435/files#diff-33207a274b564281af8d2ec10e9c84c259b26d2f9621fcdbb108fea6664de174R71\"><code>MLList.ofTaskList</code></a> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8435\">#8435</a>.</p>",
        "id": 403682334,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700697295
    },
    {
        "content": "<p>This would be great fun to write, and in fact I long ago implemented an <code>MLList.parallelMap</code> for exactly this: <a href=\"https://github.com/leanprover-community/mathlib4/pull/3978\">#3978</a></p>",
        "id": 403682502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700697449
    },
    {
        "content": "<p>(I never marked it for review, so it just rotted.)</p>",
        "id": 403682507,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700697462
    },
    {
        "content": "<p>(Actually, the <code>MonadTask</code> design from <a href=\"https://github.com/leanprover-community/mathlib4/pull/3978\">#3978</a> is lovely, if I do say so myself, and ideally could be patched into <a href=\"https://github.com/leanprover-community/mathlib4/pull/8435\">#8435</a>. I had completely forgotten about it.)</p>",
        "id": 403682572,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700697496
    },
    {
        "content": "<p>I abandoned the <code>MLList.parallelMap</code> implementation because the performance overhead for lots of quick tasks was punitive. However that's much less of an issue for <code>hint</code>, where we are more concerned about some slow running tasks, and the total number of tasks is so low that the overhead is irrelevant.</p>",
        "id": 403682624,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700697572
    },
    {
        "content": "<p>Nevertheless, I think limiting the number of cores that <code>hint</code> will use is not actually that important. :-) Implementing it would be high fun, but limited practical impact.</p>",
        "id": 403682702,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700697613
    },
    {
        "content": "<p>Maybe this is taking this thread too much on a tangent, but how good is the Lean RTS with extensive use of concurrency? On Haskell, I’d not hesitate to spawn many small tasks (“green threads”) and leave the rest to the RTS. But you say that in lean I shouldn't quite do that?</p>",
        "id": 403795134,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700748244
    },
    {
        "content": "<p>I didn't intend to say that. My parallel map approach for MLList was slow, but my (untested) suspicion was that the overhead came more from managing the look-ahead pool than spawning and waiting on tasks.</p>",
        "id": 403855061,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700773898
    }
]