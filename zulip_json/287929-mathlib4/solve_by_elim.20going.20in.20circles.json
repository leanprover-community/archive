[
    {
        "content": "<p>I don't know whether this qualifies as a bug, but I've been surprised by the following behavior of <code>solve_by_elim</code> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Hand-written proof -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> solve_by_elim generates a proof that contains the hand-written proof as a strict subterm -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span>\n  <span class=\"n\">show_term</span> <span class=\"n\">solve_by_elim</span>\n  <span class=\"c1\">--  exact hf x y (congrArg f (hf x y (hg (f x) (f y) h)))</span>\n</code></pre></div>\n<p>Here <code>solve_by_elim</code> uses assumptions <code>hf</code> and <code>hg</code> to prove <code>x = y</code> (which was the end goal) then deduces <code>f x = f y</code> using <code>congrArg</code>, and then uses <code>hf</code> again to re-derive the end goal.</p>",
        "id": 374179417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689064650
    },
    {
        "content": "<p>This is as library lemmas are always applied before context lemmas in solve by elim it seems.<br>\nI'm not sure the effects of reversing this but <a href=\"https://github.com/leanprover-community/mathlib4/pull/5809\">#5809</a> will at least fix your proof, lets see if mathlib builds, and if there is a non-negligable effect on bench</p>",
        "id": 374198326,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689068537
    },
    {
        "content": "<p>As is maybe to be expected, the benchmark results dont show a clear gain or less, they seem to imply one file got \"significantly\" faster and two slower, but there doesn't seem to be too much in it, but a net win in total instruction sizes.</p>",
        "id": 374328286,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689093271
    },
    {
        "content": "<p>I'm not sure I understand the link with my question but thanks for investigating!</p>",
        "id": 374355831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689100091
    }
]