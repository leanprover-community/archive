[
    {
        "content": "<p>The one-point compactification of a space is in Mathlib.Topology.Alexandroff. It would make more sense to me for Mathlib.Topology.Alexandroff to be about Alexandroff spaces, i.e. topological spaces in which arbitrary intersections of open sets are open. Both concepts are named after Pavel Alexandroff. We might want to have code about these at some point, e.g. because of the various stone-ish dualities being formalized right now or if we want to prove something about finite topological spaces (see <a href=\"https://math.uchicago.edu/~may/FINITE/FINITEBOOK/FINITEBOOKCollatedDraft.pdf\">this book</a> by Peter May on their algebraic topology). Would people be okay with me renaming the \"Alexandroff\" to \"OnePointCompactification\"?</p>",
        "id": 361834935,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685318597
    },
    {
        "content": "<p>(as far as I can tell the only usage of the one point compactification in mathlib is a couple of lemmas in Mathlib.Topology.RatLemmas saying the one point compactification of Q fails to have various countability properties)</p>",
        "id": 361835328,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685318947
    },
    {
        "content": "<p>I think I'll have use for the one point compactification as it corresponds to the minimal unitization of a C*-algebra. I don't have strong preferences on the name, but <code>OnePointCompactification</code> is pretty long.</p>",
        "id": 361842806,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685325021
    },
    {
        "content": "<p>Would namespacing compactifications solve the problem, i.e., <code>Compactification.Alexandroff</code> and <code>Compactification.StoneCech</code> (and probably both files should then also go into <code>Mathlib.Topology.Compactification</code>)</p>",
        "id": 361843986,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685326000
    },
    {
        "content": "<p>I've always learned about the thing as \"one point compactification\". So I would also be quite happy with <code>Compactification.OnePoint</code>.</p>",
        "id": 361856579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685335859
    },
    {
        "content": "<p>FWIW I was about to call the Alexandrov spaces <code>alexandrov_discrete_space</code> to avoid a conflict with <a href=\"https://en.m.wikipedia.org/wiki/Alexandrov_space\">https://en.m.wikipedia.org/wiki/Alexandrov_space</a>. So no filename conflict, but a three way conflict in definition names. And indeed I wanted to introduce them for the sake of Stone duality.</p>",
        "id": 361865981,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685341833
    },
    {
        "content": "<p>There was a poll before: <a href=\"#narrow/stream/144837-PR-reviews/topic/.238579.20one.20point.20compactification/near/249291726\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.238579.20one.20point.20compactification/near/249291726</a></p>",
        "id": 361881607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685348194
    },
    {
        "content": "<p>It's fine, we'll just call one <code>alexandroff</code> and the other one <code>alexandrov</code></p>",
        "id": 361882219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685348393
    },
    {
        "content": "<p>That leaves Алекса́ндров if he has a third thing named after him</p>",
        "id": 361882904,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685348581
    },
    {
        "content": "<p>Given the number of things named for Alexandroff/v it seems clearly better to name the one-point compactification by what it is. I also I don't think I've ever heard it called the Alexandroff compactification in real life and I wouldn't have understood that phrase if not for these discussions here. In particular I would certainly assume a file in topology with the name Alexandroff is about the Alexandroff topology!</p>",
        "id": 361883431,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685348746
    },
    {
        "content": "<p>In France I never heard it called anything else than Alexandroff compactification, but I still agree the descriptive name is better. Of course the docstring needs to include the word Alexandroff.</p>",
        "id": 361883663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685348815
    },
    {
        "content": "<p>Okay, I'll move the definition to Topology.Compactifications.OnePoint and pr later</p>",
        "id": 362046020,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685402075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> It's Александров.  а́ marks the stressed syllable in Wiki</p>",
        "id": 362047452,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685403077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> sorry, do you mean you'll move it to a file with that name, or you'll move the name of the declaration to that? I don't think the declaration should have the <code>Topology</code> prefix.</p>",
        "id": 362051976,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685406800
    },
    {
        "content": "<p>Also I think it should be singular, not plural.</p>",
        "id": 362052054,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685406861
    },
    {
        "content": "<p>Note that <code>Alexandroff (X : Type _) : Type _</code> vs <code>class AlexandroffSpace</code> is not a collision.</p>",
        "id": 362054892,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685409493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Possible.20future.20name.20collision/near/362051976\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> sorry, do you mean you'll move it to a file with that name, or you'll move the name of the declaration to that? I don't think the declaration should have the <code>Topology</code> prefix.</p>\n</blockquote>\n<p>I meant I'll move it to a file with that name, and yeah sorry singular is better</p>",
        "id": 362062982,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685415888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Possible.20future.20name.20collision/near/362054892\">said</a>:</p>\n<blockquote>\n<p>Note that <code>Alexandroff (X : Type _) : Type _</code> vs <code>class AlexandroffSpace</code> is not a collision.</p>\n</blockquote>\n<p>There is a construction (<a href=\"https://en.wikipedia.org/wiki/Alexandrov_topology\">https://en.wikipedia.org/wiki/Alexandrov_topology</a>, named for a different Alexandrov!):<br>\nGiven <code>(X : Type _) [Preorder X]</code>, we give <code>X</code> the \"Alexandrov topology\" by declaring the upwards-closed sets to be open. Of course there are many types with both an order and a topology that is not formed this way, so the topology should go on a type synonym of <code>X</code>.<br>\nThe obvious name is <code>Alexandrov X</code>...</p>",
        "id": 362097766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685432619
    },
    {
        "content": "<p>Sorry, same person as the one-point compactification, but a different person from the one the spaces in differential geometry are named for.</p>",
        "id": 362098062,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685432687
    },
    {
        "content": "<p>I could also imagine (on top of a construction) a mixin for this Alexandrov topology. Similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_topology\">docs#order_topology</a></p>",
        "id": 362105680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685434573
    },
    {
        "content": "<p>Ready to submit a PR but the CI fails with this <br>\n<a href=\"/user_uploads/3121/X1sJiJp1Tps2yLAbTW86f3su/image.png\">image.png</a><br>\nI'm not sure what the issue is or how to fix it, does anyone have any advice?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/X1sJiJp1Tps2yLAbTW86f3su/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/X1sJiJp1Tps2yLAbTW86f3su/image.png\"></a></div>",
        "id": 362301029,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685481343
    },
    {
        "content": "<p>If mathlib compiles locally then maybe just restart CI? (you can click somewhere on github to do this)</p>",
        "id": 362301381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685481496
    },
    {
        "content": "<p>Or make sure that the local files that you have are committed?</p>",
        "id": 362302208,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685481788
    },
    {
        "content": "<p>No need to restart CI. Read the error carefully: It's telling you that <code>Mathlib.lean</code> isn't in alphabetical order anymore.</p>",
        "id": 362302220,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685481794
    },
    {
        "content": "<p>Afaict it doesn't actually say that anywhere, would be nice to have an explicit error message</p>",
        "id": 362303248,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685482190
    },
    {
        "content": "<p>indeed, but if you read what the \"check that all files are imported\" task does, you'll see that it just lists the Mathlib source files in alphabetical order and compares it to the existing <code>Mathlib.lean</code>, at which point the existing diff tells you the problem.</p>",
        "id": 362303815,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685482384
    },
    {
        "content": "<p>Right, I figured that out after Yaël pointed it out. But it would have been nice to just have the error message say what the issue is so I didn't need to ask on zulip</p>",
        "id": 362304165,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685482527
    },
    {
        "content": "<p>Maybe make a PR to the Github actions file?</p>",
        "id": 362304327,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685482594
    },
    {
        "content": "<p>I'll also plug <code>pre-commit</code> again which fixes stuff like this automatically (specifically the <code>file-contents-sorter</code> hook).</p>",
        "id": 362466801,
        "sender_full_name": "Julian Berman",
        "timestamp": 1685541705
    },
    {
        "content": "<p>Julian, can you link to that? I haven't seen those hooks for mathlib.</p>",
        "id": 362467183,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685541778
    },
    {
        "content": "<p>Yeah sorry, it's not something enabled for mathlib(3 or 4) -- just mentioning it's perhaps worth considering -- it's <a href=\"https://pre-commit.com/index.html\">https://pre-commit.com/index.html</a> and the CI version is <a href=\"https://pre-commit.ci/\">https://pre-commit.ci/</a> -- the hook I mentioned lives in the first repo mentioned here: <a href=\"https://pre-commit.com/hooks.html\">https://pre-commit.com/hooks.html</a></p>",
        "id": 362467760,
        "sender_full_name": "Julian Berman",
        "timestamp": 1685541880
    },
    {
        "content": "<p>Even more specifically, if Mathlib4 committed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">repos</span><span class=\"o\">:</span>\n<span class=\"bp\">-</span>   <span class=\"n\">repo</span><span class=\"o\">:</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">pre</span><span class=\"bp\">-</span><span class=\"n\">commit</span><span class=\"bp\">/</span><span class=\"n\">pre</span><span class=\"bp\">-</span><span class=\"n\">commit</span><span class=\"bp\">-</span><span class=\"n\">hooks</span>\n    <span class=\"n\">rev</span><span class=\"o\">:</span> <span class=\"n\">v4.4.0</span>\n    <span class=\"n\">hooks</span><span class=\"o\">:</span>\n    <span class=\"bp\">-</span>   <span class=\"n\">id</span><span class=\"o\">:</span> <span class=\"n\">file</span><span class=\"bp\">-</span><span class=\"n\">contents</span><span class=\"bp\">-</span><span class=\"n\">sorter</span>\n        <span class=\"n\">files</span><span class=\"o\">:</span> <span class=\"s2\">\"Mathlib.lean\"</span>\n        <span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"s2\">\"--unique\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>to a file called <code>.pre-commit-config.yaml</code> and enabled <code>pre-commit</code> in CI (or if you run it locally), then if you intentionally move lines around in the <code>Mathlib.lean</code> file you'll see them put back in the right place by pre-commit automatically.</p>",
        "id": 362468970,
        "sender_full_name": "Julian Berman",
        "timestamp": 1685542122
    },
    {
        "content": "<p>But I guess Bors doesn't run this, right?</p>",
        "id": 362752135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685625639
    },
    {
        "content": "<p><a href=\"http://pre-commit.ci\">pre-commit.ci</a> has like a bot that will come add commits to the branch which fix things like ^ (or any other hooks mathlib enables -- e.g. removing trailing whitespace or whatever, including if there were some mathlib custom ones we wrote)</p>\n<p>So Bors doesn't / wouldn't need to know anything about it, it'd just look like some other normal commit that gets squashed by the time Bors is involved I think.</p>",
        "id": 362805162,
        "sender_full_name": "Julian Berman",
        "timestamp": 1685635124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> The thing I would (also) like a solution to, is that bors takes N different PRs, and merges them onto a staging branch before running CI again. Merging the N PRs might cause Mathlib.lean to become unsorted... (or a merge conflict might happen, for stupid reasons). If that can be fixed by a little bot, that would be great.</p>",
        "id": 362811615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685636380
    },
    {
        "content": "<p>Got it. I'd have to look at how that happens to know (I mean of course that sounds solvable, pre-commit doesn't sound <em>needed</em> per se to just solve that one thing, but yeah, will have a look in a bit).</p>",
        "id": 362813346,
        "sender_full_name": "Julian Berman",
        "timestamp": 1685636722
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 362813452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685636744
    },
    {
        "content": "<p>Maybe this has been discussed before, but arguably the root of the issue is that <code>Mathlib.lean</code> is version-controlled at all. Could <code>lake</code> be instructed to generate it as part of a <code>lake build</code>?</p>",
        "id": 362814359,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1685636936
    },
    {
        "content": "<p>Isn't it need when you want to do <code>import Mathlib</code> in some project that depends on Mathlib?</p>",
        "id": 362817782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685637573
    },
    {
        "content": "<p>I don't know how <code>lake</code> handles the building of dependencies. Maybe it would be smart enough to invoke the hypothetical 'generate <code>Mathlib.lean</code>' target also when mathlib is a dependency.</p>",
        "id": 362822651,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1685638652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Possible.20future.20name.20collision/near/362097766\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Possible.20future.20name.20collision/near/362054892\">said</a>:</p>\n<blockquote>\n<p>Note that <code>Alexandroff (X : Type _) : Type _</code> vs <code>class AlexandroffSpace</code> is not a collision.</p>\n</blockquote>\n<p>There is a construction (<a href=\"https://en.wikipedia.org/wiki/Alexandrov_topology\">https://en.wikipedia.org/wiki/Alexandrov_topology</a>, named for a different Alexandrov!):<br>\nGiven <code>(X : Type _) [Preorder X]</code>, we give <code>X</code> the \"Alexandrov topology\" by declaring the upwards-closed sets to be open. Of course there are many types with both an order and a topology that is not formed this way, so the topology should go on a type synonym of <code>X</code>.<br>\nThe obvious name is <code>Alexandrov X</code>...</p>\n</blockquote>\n<p>This is what I've been calling the <code>UpperSetTopology</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2508\">https://github.com/leanprover-community/mathlib4/pull/2508</a></p>",
        "id": 371566598,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1688242401
    },
    {
        "content": "<p>(Now broken out into a separate PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/5672\">https://github.com/leanprover-community/mathlib4/pull/5672</a>)</p>",
        "id": 371775302,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1688317453
    }
]