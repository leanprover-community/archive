[
    {
        "content": "<p>Consider the following three examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Sum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- Example 1 [valid syntax]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m.fst</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m.fst</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">m.snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add_pow'</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Example 2 [valid syntax]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add_pow'</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Example 3 [invalid syntax]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"k\">in</span> <span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add_pow'</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 384344815,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1691871419
    },
    {
        "content": "<p>Back in the Lean 3 days, only <code>Example 1</code> was valid. Happily <code>Example 2</code> now also works.</p>\n<p>Is there any way we could get <code>Example 3</code> to work?</p>",
        "id": 384344883,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1691871471
    },
    {
        "content": "<p>I think <a href=\"#narrow/stream/287929-mathlib4/topic/Patterns.20for.20binder-like.20notations/near/376271722\">this</a> is related. From what I understand all big operators use the same type of binders, <code>extBinder</code> (I'm not sure how to name what it is. A syntax category?). It allows the things like <code>∀ ε &gt; 0</code>, but not the destructing thing.</p>",
        "id": 384349656,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691874166
    },
    {
        "content": "<p>Thanks! It would be really nice if we could somehow do this.</p>",
        "id": 384351017,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1691874957
    },
    {
        "content": "<p><code>extBinder</code> seems entirely useless in big operators, since you can't have a <code>finset</code> of proofs</p>",
        "id": 384353732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691876580
    },
    {
        "content": "<p>I like your suggestion, but (perhaps as a workaround) would it make sense to have custom notation for sums over <code>antidiagonal</code>? Something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 384354541,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1691877149
    },
    {
        "content": "<p>You can do that already with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsum#doc\">docs#Finsum</a></p>",
        "id": 384355407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691877811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Destruction.20and.20big.20operators/near/384353732\">said</a>:</p>\n<blockquote>\n<p><code>extBinder</code> seems entirely useless in big operators, since you can't have a <code>finset</code> of proofs</p>\n</blockquote>\n<p>I don’t understand this answer. Are you saying we can never have this notation?</p>",
        "id": 384355480,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1691877857
    },
    {
        "content": "<p>I challenge you to find a situation where an <code>extBinder</code>-style binder is not a type error with <code>Finset.sum</code></p>",
        "id": 384355671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691877974
    },
    {
        "content": "<p>And therefore we could just use a regular binder instead and would get the feature you want without losing any features that currently exist</p>",
        "id": 384355862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691878162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Destruction.20and.20big.20operators/near/384355407\">said</a>:</p>\n<blockquote>\n<p>You can do that already with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsum#doc\">docs#Finsum</a></p>\n</blockquote>\n<p>Right, but you lose the bundled finiteness which makes doing things like commuting sums quite painful.</p>",
        "id": 384356168,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1691878345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Destruction.20and.20big.20operators/near/384355862\">said</a>:</p>\n<blockquote>\n<p>And therefore we could just use a regular binder instead and would get the feature you want without losing any features that currently exist</p>\n</blockquote>\n<p>I’m afraid this is still way too technical for me to follow. Perhaps I’ll think about this again tomorrow.</p>",
        "id": 384356189,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1691878364
    },
    {
        "content": "<p>In LeanAPAP, we introduced notation for <code>(s.filter p).sum f</code>. It's really lovely and is quite close to your suggestion, Arend.</p>",
        "id": 384356959,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691878883
    },
    {
        "content": "<p>Btw, are we sure that examples 2 and 3 above are syntactically as general as example 1? I would expect not, but maybe defeq eta struct is saving the day.</p>",
        "id": 384357197,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691879043
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 384358001,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691879619
    },
    {
        "content": "<p>Defeq isn't relevant for syntactic generality unfortunately; so there absolutely still is a reason to worry about that</p>",
        "id": 384358016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691879633
    },
    {
        "content": "<p>Hmm, maybe I'm wrong about that</p>",
        "id": 384358163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691879741
    },
    {
        "content": "<p>Yes, this is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Sum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- Example 1 [valid syntax]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nice</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m.fst</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m.fst</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">m.snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add_pow'</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Example 2 [valid syntax]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ugly</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add_pow'</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">nice</span>\n<span class=\"k\">#print</span> <span class=\"n\">ugly</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m.fst</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m.fst</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">m.snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ugly</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 384358244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691879773
    },
    {
        "content": "<p>So it looks like <code>rw</code> knows to unfold <code>match</code> statements</p>",
        "id": 384358259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691879784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Destruction.20and.20big.20operators/near/384356189\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Destruction.20and.20big.20operators/near/384355862\">said</a>:</p>\n<blockquote>\n<p>And therefore we could just use a regular binder instead and would get the feature you want without losing any features that currently exist</p>\n</blockquote>\n<p>I’m afraid this is still way too technical for me to follow. Perhaps I’ll think about this again tomorrow.</p>\n</blockquote>\n<p>Looking more closely, the code in <code>Lean.Elab.Binders</code> doesn't seem to be written in a way that makes it particularly easy to insert <code>Finset.sum</code> between binders</p>",
        "id": 384360054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691881248
    },
    {
        "content": "<p><code>extBinder</code> is sort of a red herring here. The <a href=\"https://github.com/leanprover-community/mathlib4/blob/38e1b744e0332a6344c1d84fe2c30a3e820858cb/Mathlib/Algebra/BigOperators/Basic.lean#L119\">big sum notation</a> only uses it to get <code>ident</code> and <code>ident : type</code> syntax.</p>\n<p>In principle it should be easy to support destructuring by changing it to <code>term</code>. You just lose <code>ident : type</code> without parentheses before the <code>in</code> (does anyone use that?)</p>",
        "id": 386288811,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692584593
    },
    {
        "content": "<p>It'd be nice to get big operators to use <code>notation3</code> someday; if that's done, we'd want to improve <code>extBinder</code> to support destructuring.</p>",
        "id": 386289172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692584766
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6795\">#6795</a> has a custom modification to <code>extBinder</code> to experiment with destructuring</p>",
        "id": 387366871,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693012731
    },
    {
        "content": "<p>These all work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Sum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- Example 1</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">m.fst</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m.fst</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">m.snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add_pow'</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Example 2</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add_pow'</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Example 3</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"bp\">∈</span> <span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add_pow'</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- Example 4</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.add_pow'</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 387366894,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693012742
    },
    {
        "content": "<p>Example 4 is <span class=\"user-mention\" data-user-id=\"585783\">@Arend Mellendijk</span>'s, but it needs parentheses around the <code>i + j = n</code> because it's parsed at max precedence</p>",
        "id": 387367050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693012817
    },
    {
        "content": "<p>This is great!</p>\n<p>It looks like a series of snapshots from least informal to almost handwritten!</p>",
        "id": 387367869,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693013276
    },
    {
        "content": "<p>Examples 3 and 4 both elaborate to the same thing, which involves a <code>match</code> expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"n\">x_1</span> <span class=\"bp\">∈</span> <span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">x_1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>A <code>dsimp</code> at least turns this into <code>∑ x_1 ∈ antidiagonal n, Nat.choose n x_1.fst • (x ^ x_1.fst * y ^ x_1.snd)</code>, which is Example 1. Nice that it's defeq.</p>",
        "id": 387368708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693013734
    },
    {
        "content": "<p>This is awesome!</p>",
        "id": 387422733,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1693053422
    },
    {
        "content": "<p>Yeah this is a very nice step forwards towards code readability!</p>",
        "id": 387423189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693053775
    },
    {
        "content": "<p>I actually can't get <code>∑ (i + j = n), choose n i • (x ^ i * y ^ j)</code> to be parseable while simultaneously being able to parse sums with multiple binders. The best I have is <code>∑ ((i + j = n)), choose n i • (x ^ i * y ^ j)</code>.</p>\n<p>The problem is more-or-less that parentheses are used to switch into multiple binder mode, so you need two layers of parentheses to get it to parse as a term.</p>\n<p>It's probably possible to get this working with fewer parentheses by re-engineering how binder predicates work, but while <code>∑ (i + j = n), ...</code> is cute, I'm not sure it's very high priority...</p>",
        "id": 387433699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693062305
    },
    {
        "content": "<p>I worry that making all this magic syntax makes it much harder to see the terms after which the lemmas are named</p>",
        "id": 387443268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693069465
    },
    {
        "content": "<p>I'd be willing to pay quite a high price for having syntax that is similar to traditional mathematics and if there are costs associated with having this (e.g., obscuring terms) then I would advocate keeping the notation but build better tooling.</p>",
        "id": 387445426,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1693071499
    },
    {
        "content": "<p>One reasonable option might be to have the notation be more magic than the pretty-printer</p>",
        "id": 387454462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693080150
    },
    {
        "content": "<p>Or also having two different defaults for pretty-printing, one more math-like and one more Lean-like, and a button in the infoview to toggle between the two.  So you could \"see\" the meaning with one view and read the term to guess the next lemma name with the other.</p>",
        "id": 387454967,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693080653
    },
    {
        "content": "<p>The pretty printer in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6795\">#6795</a> is certainly less magical than the notation. That's an easy default because writing featureful pretty printers takes work <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 387456243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693082008
    },
    {
        "content": "<p><code>set_option pp.mathemagic true</code></p>",
        "id": 387456575,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693082338
    },
    {
        "content": "<p>What made me consider this kind of notation was sums over <code>divisorsAntidiagonal</code>. Consider Dirichlet convolution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">divisorsAntidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x.fst</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x.snd</span>\n</code></pre></div>\n<p>This is really long! The first time I came across these antidiagonal sums I was worried they'd be a pain to write out and work with, and I was really tempted to use the more readable </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">divisors</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>wherever possible. But the entire point of <code>divisorsAntidiagonal</code> is to sidestep natural division. If there were optional notation along the lines of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>then I might have been less afraid to use the preferred definition. In a sense I think it could serve as a hint to users saying \"the preferred way to express <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>d</mi><mi>e</mi><mo>=</mo><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_{de=n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1864em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span></span></span></span> is as a sum over <code>divisorsAntidiagonal</code>.\"</p>",
        "id": 387467172,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1693093037
    }
]