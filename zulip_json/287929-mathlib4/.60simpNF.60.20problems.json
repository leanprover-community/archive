[
    {
        "content": "<p>The <code>simpNF</code> linter is causing me headaches. In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1864\">!4#1864</a> it tagged all three declarations <code>val_list_prod</code>, <code>val_multiset_prod</code> and <code>val_finset_prod</code>. For the latter it claimed <code>simp</code> could prove it (fine, easy fix), but for the former two, it complained the left-hand side could be simplified. However, if you replace the left-hand side with the one specified by <code>simpNF</code> it results in a syntactic tautology (as well as a badly shaped <code>norm_cast</code> lemma), and yet <code>simpNF</code> is correct that <code>simp</code> can't prove the lemma as stated.</p>\n<p>So, I don't understand:</p>\n<ol>\n<li>how <code>simp</code> can reduce the left-hand side until the equality is a syntactic tautology and yet <em>fail</em> to prove the lemma. This sounds like a bug in <code>simp</code>.</li>\n<li>why the third declaration was somehow different from the first two (they are all <em>very</em> similar).</li>\n</ol>",
        "id": 323913961,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674769058
    },
    {
        "content": "<p>Your first question is, paraphrasing, why does <code>theorem val_list_prod .. := by simp</code> not work, even though it results in the goal <code>t = t</code>.  And why does <code>theorem val_list_prod .. := by simp; rfl</code> work?</p>",
        "id": 323917918,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674770664
    },
    {
        "content": "<p>You can debug this by enabling tracing for the unifier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 323917964,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674770687
    },
    {
        "content": "<p>And it's super weird.  Apparently <code>x ∈ ↑H</code> and <code>x ∈ H</code> don't unify..</p>",
        "id": 323918236,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674770808
    },
    {
        "content": "<p>Small repro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">exact</span> <span class=\"n\">Iff.rfl</span>\n</code></pre></div>",
        "id": 323918587,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674770987
    },
    {
        "content": "<p>The crux is that the two are not reducibly defeq.</p>",
        "id": 323918690,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674771012
    },
    {
        "content": "<p>Well, what's particularly weird to me is that <code>simpNF</code> gives me output (to replace the LHS) that makes <code>simpNF</code> complain about a syntactic tautology. I guess maybe it's just pretty printing something that has circumvented this reducible defeq problem?</p>",
        "id": 323918807,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674771068
    },
    {
        "content": "<p>Which is actually an interesting case.  Usually, we \"upgrade\" implicit arguments to semireducible transparency.  In this case, the <code>↑H</code> occurs as an implicit argument in <code>Subtype.val</code>.  But after unfolding <code>Subtype.val</code>, the implicit argument because the type of a lambda, and is no longer upgraded. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 323918863,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674771104
    },
    {
        "content": "<blockquote>\n<p>I guess maybe it's just pretty printing something that has circumvented this reducible defeq problem?</p>\n</blockquote>\n<p>Yes, this is a very subtle pretty-printing issue.</p>",
        "id": 323919010,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674771157
    },
    {
        "content": "<p>It's possible that I'm just dense, but I'm still not sure how I should resolve this for this PR.</p>",
        "id": 324063824,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674829590
    }
]