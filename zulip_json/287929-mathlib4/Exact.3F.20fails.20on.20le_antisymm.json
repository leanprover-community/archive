[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyx</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>This fails (and came up in Jakob's talk at LftCM) - is this expected behaviour?</p>",
        "id": 388993167,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693834354
    },
    {
        "content": "<p>The explanation for this is that conclusion <code>a = b</code> is very generic. so exact? skips putting such things in its discrimination tree for efficiency reasons afaiu. I definitely agree that we need to find some way to improve this situation (i.e. print a nice warning in this case at the very least, or implement an \"exact? but I don't care if its slow please try with very generic lemmas in the tree also\" mode).</p>",
        "id": 388994247,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1693834659
    },
    {
        "content": "<p>Maybe at this point it is fine to just put them back in. We already prioritize trying more specific lemmas first, so hopefully the \"not specific at all\" lemmas would automatically be tried last.</p>\n<p>If someone wants to try this out, just find where in <code>LibrarySearch.lean</code> we use <code>insertIfSpecific</code> and just it to <code>insert</code>!</p>",
        "id": 389066183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693870491
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8459\">#8459</a></p>",
        "id": 402609102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700193099
    }
]