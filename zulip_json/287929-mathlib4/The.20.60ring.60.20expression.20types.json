[
    {
        "content": "<p>I have a quick question about <a href=\"https://github.com/leanprover-community/mathlib4/blob/9045cd8c333c2c484c4609feaf7a16708eb2b5f9/Mathlib/Tactic/Ring/Basic.lean#L41\">this line</a> description in the ring tactic documentation. Is it the case that the mutually inductive datatype <em>itself</em> is enforcing the normalization? Or is it technically possible to write something that will produce unnormalized <code>ExSum</code>/<code>ExProd</code> and it's just the case that the <code>eval_...</code> functions below never do this?</p>",
        "id": 398961679,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698437239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 398961799,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698437301
    },
    {
        "content": "<p>It seems to me like I could just apply the <code>add</code> constructor in various orders and get different <code>ExSum</code>s for things that <code>ring</code> should prove equal, so I am confused.</p>",
        "id": 398962107,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1698437437
    },
    {
        "content": "<p>While it is possible to lie with the QQ types, if you follow the types as specified <code>ExProd</code> et al will enforce most (but not all) of the normalization rules. For example <code>ExSum</code> ensures that it is a right-associated sum with 0 at the end and no internal <code>+</code> in each term (except in <code>ExBase</code>). An example of a normalization invariant not ensured by the types is that <code>ExProd.const</code> should not be zero.</p>",
        "id": 399009775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698467996
    }
]