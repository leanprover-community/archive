[
    {
        "content": "<p>Which is better, <code>LiftHom</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Bicategory</span><span class=\"bp\">/</span><span class=\"n\">CoherenceTactic.lean</span><span class=\"o\">:</span><span class=\"kd\">class</span> <span class=\"n\">LiftHom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Bicategory</span><span class=\"bp\">/</span><span class=\"n\">CoherenceTactic.lean</span><span class=\"o\">:</span><span class=\"kd\">class</span> <span class=\"n\">LiftHom₂</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Coherence.lean</span><span class=\"o\">:</span><span class=\"kd\">class</span> <span class=\"n\">LiftHom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LiftObj</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftObj</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>or <code>liftHom</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">AdjoinRoot.lean</span><span class=\"o\">:</span><span class=\"kd\">def</span> <span class=\"n\">liftHom</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfx</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AdjoinRoot</span> <span class=\"n\">f</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Bicategory</span><span class=\"bp\">/</span><span class=\"n\">Free.lean</span><span class=\"o\">:</span><span class=\"kd\">def</span> <span class=\"n\">liftHom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">FreeBicategory</span> <span class=\"n\">B</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">F.obj</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">QuaternionBasis.lean</span><span class=\"o\">:</span><span class=\"kd\">def</span> <span class=\"n\">liftHom</span> <span class=\"o\">:</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span><span class=\"n\">c₁</span><span class=\"o\">,</span><span class=\"n\">c₂</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 361767584,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685284749
    },
    {
        "content": "<p>They're both following the naming convention. The first one is <code>LiftHom</code> because it's a structure/class, and the second is <code>liftHom</code> because it's just a definition whose value is not a type.</p>",
        "id": 361768896,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685285173
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> .  I was having a look at <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/CategoryTheory/Bicategory/CoherenceTactic.lean\">CoherenceTactic.lean</a>.</p>\n<p>It has some capitalization issues in particular <code>.Hom</code> needs to be <code>.hom</code> in lines like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">liftHom₂LeftUnitorHom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LiftHom₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Hom</span>\n    <span class=\"n\">where</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">LiftHom.lift</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Hom</span>\n</code></pre></div>\n<p>which doesn't typecheck but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">liftHom₂LeftUnitorHom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LiftHom₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n    <span class=\"n\">where</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">LiftHom.lift</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n</code></pre></div>\n<p>does.</p>\n<p>Here is an example with a mixed port of <code>hom</code> and <code>Hom</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">BicategoricalCoherence</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span>\n  <span class=\"o\">[</span><span class=\"n\">IsIso</span> <span class=\"o\">:</span> <span class=\"n\">IsIso</span> <span class=\"n\">hom</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>this doesn't typecheck but changing the first <code>Hom</code> to <code>hom</code> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">BicategoricalCoherence</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span>\n  <span class=\"o\">[</span><span class=\"n\">IsIso</span> <span class=\"o\">:</span> <span class=\"n\">IsIso</span> <span class=\"n\">hom</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">bicategorical_coherence.is_iso</span>\n</code></pre></div>\n<p>but this does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">BicategoricalCoherence.IsIso</span>\n</code></pre></div>\n<p>I'm experiencing a mix of issues on this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">whiskerLeft</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">BicategoricalCoherence</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BicategoricalCoherence</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">BicategoricalCoherence.hom</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It prefers <code>@[simps!]</code> to <code>@[simps]</code>.  The bigger problem is that it doesn't accept the <code>g h</code> following  <code>BicategoricalCoherence.hom </code>, which has type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CategoryTheory.Bicategory.BicategoricalCoherence.hom.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Bicategory</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"o\">:</span> <span class=\"n\">LiftHom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">BicategoricalCoherence</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>If I simply omit the <code>g h</code> in <code>BicategoricalCoherence.hom g h</code>, this typechecks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps!]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">whiskerLeft</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">BicategoricalCoherence</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BicategoricalCoherence</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">BicategoricalCoherence.hom</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Also on this one which doesn't typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">tensorRight</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">BicategoricalCoherence</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BicategoricalCoherence</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨(</span><span class=\"n\">ρ_</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">BicategoricalCoherence.hom</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>omitting the arguments <code>(𝟙 b) g</code> to <code>BicategoricalCoherence.hom</code> works </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">tensorRight</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LiftHom</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">BicategoricalCoherence</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BicategoricalCoherence</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨(</span><span class=\"n\">ρ_</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">◁</span> <span class=\"n\">BicategoricalCoherence.hom</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but feels a little worrisome to me to simply elide the more complex argument pattern.</p>",
        "id": 361781429,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685289600
    },
    {
        "content": "<p>I'm also having a problem with infix notation for example assuming</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Bicategory</span><span class=\"o\">]</span> <span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ⊗≫ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CategoryTheory.Bicategory.bicategoricalComp</span>\n</code></pre></div>\n<p>then this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">⟶</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">⟶</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">⟶</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span>\n   <span class=\"n\">η</span> <span class=\"bp\">⊗≫</span> <span class=\"n\">θ</span>\n</code></pre></div>\n<p>but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⟶</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">⟶</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">⟶</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">⟶</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span>\n   <span class=\"n\">CategoryTheory.Bicategory.bicategoricalComp</span> <span class=\"n\">η</span> <span class=\"n\">θ</span>\n</code></pre></div>",
        "id": 361784681,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685290877
    },
    {
        "content": "<p>The <code>scoped</code> issue may be that you need to explicitly mention the full namespace, not just the last part.  In your case, possibly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">CategoryTheory.Bicategory</span><span class=\"o\">]</span> <span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ⊗≫ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CategoryTheory.Bicategory.bicategoricalComp</span>\n</code></pre></div>\n<p>will work?</p>",
        "id": 361786342,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685291563
    },
    {
        "content": "<p>Regarding capitalizations, that is the first part of \"trivial fixes\" that every ported file has.</p>",
        "id": 361786485,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685291619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> the <code>hom</code> vs <code>Hom</code> thing you just mentioned is still fully expected with the naming convention.</p>",
        "id": 361787580,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685292044
    },
    {
        "content": "<p>Here <code>hom</code> refers to a morphism projection which part of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Iso#doc\">docs4#CategoryTheory.Iso</a></p>",
        "id": 361787725,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685292107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>thanks adding <code>CategoryTheory.</code>  to the name in <code>scoped</code> makes subsequent uses work.</p>",
        "id": 361791831,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685293679
    },
    {
        "content": "<p>I am down to the last few lines in the file having to do with tactics.  From <a href=\"https://github.com/leanprover-community/mathlib/blob/13b0d72fd8533ba459ac66e9a885e35ffabb32b2/src/category_theory/bicategory/coherence_tactic.lean\">the original</a> , this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bicategorical_coherence</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">focus1</span> <span class=\"bp\">$</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">o</span> <span class=\"bp\">←</span> <span class=\"n\">get_options</span><span class=\"o\">,</span> <span class=\"n\">set_options</span> <span class=\"bp\">$</span> <span class=\"n\">o.set_nat</span> <span class=\"bp\">`</span><span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">128</span><span class=\"o\">,</span>\n  <span class=\"n\">try</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">dsimp</span><span class=\"o\">],</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">to_expr</span>  <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"n\">free_bicategory.lift</span> <span class=\"o\">(</span><span class=\"n\">prefunctor.id</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">lift_hom₂.lift</span> <span class=\"bp\">%%</span><span class=\"n\">lhs</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">free_bicategory.lift</span> <span class=\"o\">(</span><span class=\"n\">prefunctor.id</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map₂</span> <span class=\"o\">(</span><span class=\"n\">lift_hom₂.lift</span> <span class=\"bp\">%%</span><span class=\"n\">rhs</span><span class=\"o\">))</span>\n    <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.change</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span>\n</code></pre></div>\n<p>gets translated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> ./././Mathport/Syntax/Translate/Tactic/Mathlib/Core.lean:38:34: unsupported: setup_tactic_parser -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> ./././Mathport/Syntax/Translate/Expr.lean:330:4: warning: unsupported (TODO): `[tacs] -/</span>\n<span class=\"c1\">-- failed to format: unknown constant 'term.pseudo.antiquot'</span>\n<span class=\"sd\">/-- Coherence tactic for bicategories. -/</span> <span class=\"n\">unsafe</span>\n  <span class=\"kd\">def</span>\n    <span class=\"n\">bicategorical_coherence</span>\n    <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">Unit</span>\n    <span class=\"o\">:=</span>\n      <span class=\"n\">focus1</span>\n        <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">o</span> <span class=\"bp\">←</span> <span class=\"n\">get_options</span>\n            <span class=\"n\">set_options</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">o</span> <span class=\"bp\">`</span><span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">128</span>\n            <span class=\"n\">try</span> <span class=\"gr\">sorry</span>\n            <span class=\"k\">let</span> <span class=\"n\">q</span><span class=\"o\">(</span> <span class=\"bp\">$</span> <span class=\"o\">(</span> <span class=\"n\">lhs</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span> <span class=\"o\">(</span> <span class=\"n\">rhs</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span>\n            <span class=\"n\">to_expr</span>\n                <span class=\"bp\">`</span>\n                  <span class=\"bp\">`</span><span class=\"o\">(</span>\n                    <span class=\"o\">(</span> <span class=\"n\">FreeBicategory.lift</span> <span class=\"o\">(</span> <span class=\"n\">Prefunctor.id</span> <span class=\"n\">_</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">zipWith</span>\n                        <span class=\"o\">(</span> <span class=\"n\">LiftHom₂.lift</span> <span class=\"bp\">$</span> <span class=\"o\">(</span> <span class=\"n\">lhs</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n                      <span class=\"bp\">=</span>\n                      <span class=\"o\">(</span> <span class=\"n\">FreeBicategory.lift</span> <span class=\"o\">(</span> <span class=\"n\">Prefunctor.id</span> <span class=\"n\">_</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">zipWith</span>\n                        <span class=\"o\">(</span> <span class=\"n\">LiftHom₂.lift</span> <span class=\"bp\">$</span> <span class=\"o\">(</span> <span class=\"n\">rhs</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n                    <span class=\"o\">)</span>\n              <span class=\"bp\">&gt;&gt;=</span>\n              <span class=\"n\">tactic.change</span>\n            <span class=\"n\">congr</span>\n</code></pre></div>\n<p>and this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">whisker_simps</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n    <span class=\"n\">category_theory.category.assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">category_theory.bicategory.comp_whisker_left</span><span class=\"o\">,</span>\n    <span class=\"n\">category_theory.bicategory.id_whisker_left</span><span class=\"o\">,</span>\n    <span class=\"n\">category_theory.bicategory.whisker_right_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">category_theory.bicategory.whisker_right_id</span><span class=\"o\">,</span>\n    <span class=\"n\">category_theory.bicategory.whisker_left_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">category_theory.bicategory.whisker_left_id</span><span class=\"o\">,</span>\n    <span class=\"n\">category_theory.bicategory.comp_whisker_right</span><span class=\"o\">,</span>\n    <span class=\"n\">category_theory.bicategory.id_whisker_right</span><span class=\"o\">,</span>\n    <span class=\"n\">category_theory.bicategory.whisker_assoc</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>gets translated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> ./././Mathport/Syntax/Translate/Expr.lean:330:4: warning: unsupported (TODO): `[tacs] -/</span>\n<span class=\"sd\">/-- Simp lemmas for rewriting a 2-morphism into a normal form. -/</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">whisker_simps</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Both are getting autoported to <code>sorry</code> and the second one which looks easier to solve is also the most <code>sorry</code>.</p>\n<p>It is hard to find uses in Lean 3 mathlib of '<code>[simp only</code>.   Here is an <a href=\"https://github.com/leanprover-community/mathlib/blob/13b0d72fd8533ba459ac66e9a885e35ffabb32b2/src/tactic/push_neg.lean\">original use</a> on line 164:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.push_neg</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">loc.ns</span> <span class=\"n\">loc_l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">loc_l.mmap'</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">push_neg_at_hyp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n                          <span class=\"n\">try</span> <span class=\"bp\">$</span> <span class=\"n\">interactive.simp_core</span> <span class=\"o\">{</span> <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">}</span> <span class=\"n\">failed</span> <span class=\"n\">tt</span>\n                                 <span class=\"o\">[</span><span class=\"n\">simp_arg_type.expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">push_neg.not_eq</span><span class=\"o\">)]</span> <span class=\"o\">[]</span>\n                                 <span class=\"o\">(</span><span class=\"n\">interactive.loc.ns</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">])</span>\n          <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">push_neg_at_goal</span><span class=\"o\">,</span>\n                          <span class=\"n\">try</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">push_neg.not_eq</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">}]</span>\n          <span class=\"kd\">end</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">loc.wildcard</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">push_neg_at_goal</span><span class=\"o\">,</span>\n    <span class=\"n\">local_context</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">push_neg_at_hyp</span> <span class=\"o\">(</span><span class=\"n\">local_pp_name</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">,</span>\n    <span class=\"n\">try</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">push_neg.not_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">{</span> <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">}]</span>\n</code></pre></div>\n<p>This has a <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/PushNeg.lean\">complex rewrite in the ported version</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">pushNegConv</span><span class=\"o\">)</span> <span class=\"s2\">\"push_neg\"</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n\n<span class=\"kd\">@[tactic pushNegConv]</span> <span class=\"kd\">def</span> <span class=\"n\">elabPushNegConv</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">Conv.applySimpResult</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">pushNegCore</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Conv.getLhs</span><span class=\"o\">)))</span>\n\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">pushNeg</span><span class=\"o\">)</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"#push_neg \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"n\">conv</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"n\">push_neg</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The tactic rewrites look very expert level.   I won't attempt.    I did manage to get the first 250 lines to typecheck though.  As recommended by <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I would like to submit a PR with help-wanted tag.  While I can run the <code>start_port.sh</code> without credentials, to go the other way it is asking me for some.  I did </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">add</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Bicategory</span><span class=\"bp\">/</span><span class=\"n\">CoherenceTactic.lean</span>\n<span class=\"n\">git</span> <span class=\"n\">commit</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"s2\">\"First 250 lines now typecheck, rest is tactics\"</span>\n</code></pre></div>\n<p>I have a <code>github</code> account so I supplied those credentials.  I got this error on the git push:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">push</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">git</span> <span class=\"n\">repository</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">any</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">parent</span> <span class=\"n\">directories</span><span class=\"o\">):</span> <span class=\"bp\">.</span><span class=\"n\">git</span>\n</code></pre></div>\n<p>Maybe I missed a step of cloning <code>Mathlib4</code> to my personal GitHub before running the <code>start_port.sh</code>.  Do you have a step-by-step for new users on how to get set up, up to and including where and how to enter the pull request with the tags?</p>",
        "id": 361798103,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685296450
    },
    {
        "content": "<p>For now I'll put it here</p>\n<p><a href=\"/user_uploads/3121/Unaj73K-BwtbceRKB3oCvH6m/CoherenceTactic.lean\">CoherenceTactic.lean</a></p>",
        "id": 361798206,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685296512
    },
    {
        "content": "<p>Were you in the same directory when you ran the <code>git commit</code> and the <code>git push</code>? It seems strange that the first could succeed while the second can't find a <code>.git</code> directory...</p>",
        "id": 361819444,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685307246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I can do a local commit but there is no place to push it to.  I don't think that <code>start_port.sh</code> is permissioning me to upload to the repository that it pulls from.  It is just cloning a public repository and bringing it down to my PC.  That doesn't require any permissions.  I would need an access token to the public repository branch to do a git push.  Here is what I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">status</span>\n<span class=\"n\">On</span> <span class=\"n\">branch</span> <span class=\"n\">port</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory.Bicategory.CoherenceTactic</span>\n<span class=\"n\">nothing</span> <span class=\"n\">to</span> <span class=\"n\">commit</span><span class=\"o\">,</span> <span class=\"n\">working</span> <span class=\"n\">tree</span> <span class=\"n\">clean</span>\n\n<span class=\"bp\">~/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">push</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">current</span> <span class=\"n\">branch</span> <span class=\"n\">port</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory.Bicategory.CoherenceTactic</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">upstream</span> <span class=\"n\">branch.</span>\n<span class=\"n\">To</span> <span class=\"n\">push</span> <span class=\"n\">the</span> <span class=\"n\">current</span> <span class=\"n\">branch</span> <span class=\"n\">and</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">remote</span> <span class=\"n\">as</span> <span class=\"n\">upstream</span><span class=\"o\">,</span> <span class=\"n\">use</span>\n\n    <span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"c1\">--set-upstream origin port/CategoryTheory.Bicategory.CoherenceTactic</span>\n\n<span class=\"bp\">~/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">push</span> <span class=\"c1\">--set-upstream origin port/CategoryTheory.Bicategory.CoherenceTactic</span>\n<span class=\"n\">Username</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com'</span><span class=\"o\">:</span> <span class=\"n\">catskills</span>\n<span class=\"n\">Password</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">catskills</span><span class=\"bp\">@</span><span class=\"n\">github.com'</span><span class=\"o\">:</span>\n<span class=\"n\">remote</span><span class=\"o\">:</span> <span class=\"n\">Permission</span> <span class=\"n\">to</span> <span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">denied</span> <span class=\"n\">to</span> <span class=\"n\">catskillsresearch.</span>\n<span class=\"n\">fatal</span><span class=\"o\">:</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span><span class=\"bp\">/'</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">requested</span> <span class=\"n\">URL</span> <span class=\"n\">returned</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"mi\">403</span>\n</code></pre></div>\n<p>So to push I need permission to push to leanprover-community/mathlib4.git, for which I would need a login and an API access token.  It seems more likely that I would push to a github that I own and then do a pull request referencing that github.  However, to do that, I would also need to have created a clone in my remote github of the mathlib4 repo, which <code>start_port.sh</code> didn't do.</p>\n<p>I need more clarification on the setup to do a PR as recommended.</p>",
        "id": 361842868,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685325079
    },
    {
        "content": "<p>I found  <a href=\"https://github.com/leanprover/lean4/blob/master/CONTRIBUTING.md\">this guidance</a> :</p>\n<blockquote>\n<p>We are currently overwhelmed. We respectfully request that you <strong>hold off on submitting Pull Requests</strong> and creating Request for Comments (RFCs) at this time. Our team is actively seeking funding to expand the Lean development team and improve our capacity to review and integrate contributions. We appreciate your understanding and look forward to being able to accept contributions in the near future. In the meantime, the process described in the following sections is temporarily suspended.</p>\n</blockquote>\n<p>So, I can clone <code>mathlib4</code>, upload my draft of <code>CoherenceTactic</code>, and submit a PR, but per above the PR would be  unwelcome.   It seems like it would be good to get that one done, though, because it would unblock 43 other files.  To eliminate the paperwork, my file is above.  There are a few other short leaf nodes I can work on.  If I get them to typecheck an alternate path is to upload them to <code>new members</code> thread with a comment.</p>",
        "id": 361844589,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685326518
    },
    {
        "content": "<p>In particular <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/order/category/HeytAlg\">order.category.HeytAlg</a> seems short and unattended, and has a bunch of unattended dependencies.</p>",
        "id": 361844722,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685326589
    },
    {
        "content": "<p>Hi Lars, I believe the quoted guidance refers to issues and requests arising for Lean4 itself, which are handled by a small group of Lean developers, and do not apply for mathlib4 porting or PRs for mathlib4 itself.</p>",
        "id": 361845957,
        "sender_full_name": "Oisin McGuinness",
        "timestamp": 1685327411
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"522558\">@Oisin McGuinness</span>!  Can you summarize the steps to take after editing a file pulled down with <code>scripts/start_port.sh</code> to upload the file and do a PR?</p>",
        "id": 361846471,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685327825
    },
    {
        "content": "<p>I believe current information about porting is here: <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki</a> <br>\nI have not yet attempted a port :-)</p>",
        "id": 361846716,
        "sender_full_name": "Oisin McGuinness",
        "timestamp": 1685328014
    },
    {
        "content": "<p>Oisin, my thinking is that step Porting wiki &gt; Porting status &gt; Porting procedure &gt; High level &gt; 4. \"Publish the new branch\" requires trusted status, an account and an API key on the <code>mathlib4 </code> repo.  That is the part of the process I am confused about.</p>\n<p>That said I encourage you to find something to port as long as porting is welcome.  The port status is <a href=\"https://leanprover-community.github.io/mathlib-port-status/\">here</a>.  I have been shopping in the middle section of \"Unported files\", sorting by lines of code on the left and looking for shortest files with no dependencies.  Sometimes I find a file with no dependencies which looks portable but is not because of a directory reorganization for example <code>Module</code> to <code>ModuleCat</code> which can leave an apparently portable file which is actually already elsewhere.  I found that most files have the root nodes of their dependency graph blocked by a yellow file which is claimed but not completely ported.  So there are actually not that many with no dependencies which are unclaimed, like the bunch of files around <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/order/category/HeytAlg\">order.category.HeytAlg.</a></p>\n<p>My original object of interest was <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/algebraic_geometry/elliptic_curve/weierstrass\">weierstrass</a>. That one has been steadily progressing but the leaf nodes are always yellow:</p>\n<p><a href=\"/user_uploads/3121/jbTXk5KBDcuNVg-Ea6fvZlBm/Screenshot-from-2023-05-28-22-54-00.png\">Screenshot-from-2023-05-28-22-54-00.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jbTXk5KBDcuNVg-Ea6fvZlBm/Screenshot-from-2023-05-28-22-54-00.png\" title=\"Screenshot-from-2023-05-28-22-54-00.png\"><img src=\"/user_uploads/3121/jbTXk5KBDcuNVg-Ea6fvZlBm/Screenshot-from-2023-05-28-22-54-00.png\"></a></div>",
        "id": 361847778,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685328847
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 361848511,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685329499
    },
    {
        "content": "<p>I personally find it quite tiring that you turn almost every discussion into something about money / funding crisis / etc...</p>",
        "id": 361856415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685335746
    },
    {
        "content": "<p>Lars, if you want to help with porting mathlib, you will need to ask here for permission to push to mathlib 4. There's no point in starting otherwise.</p>",
        "id": 361866097,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685341897
    },
    {
        "content": "<p>And if you want to do some fundraising, I think that the community here would very much welcome a grant!</p>\n<p>However, I think that fundraising would have to take place outside of this community.</p>\n<p>Everyone here is already volunterring what time they can.</p>",
        "id": 361868568,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685343184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, I would like permission to do a PR help-wanted for the attached file for <code>Mathlib/CategoryTheory/Bicategory/CoherenceTactic.lean</code>.  It cleans up the file up to line 252, where there is a <code>tactic</code> section that needs expert level porting.<br>\n<a href=\"/user_uploads/3121/9Hht9YGyNiPcDmFW994h2V2V/CoherenceTactic.lean\">CoherenceTactic.lean</a></p>",
        "id": 361942642,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685364590
    },
    {
        "content": "<p>That file has already been ported last week.</p>",
        "id": 361946017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685365415
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4357\">https://github.com/leanprover-community/mathlib4/pull/4357</a></p>",
        "id": 361946256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685365467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> given that <code>Mathlib/CategoryTheory/Bicategory/CoherenceTactic.lean</code> was ported, what is the new home of the contents?  It is not here:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/CategoryTheory/Bicategory\">https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/CategoryTheory/Bicategory</a></p>\n<p>but it was here:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/13b0d72fd8533ba459ac66e9a885e35ffabb32b2/src/category_theory/bicategory/coherence_tactic.lean\">https://github.com/leanprover-community/mathlib/blob/13b0d72fd8533ba459ac66e9a885e35ffabb32b2/src/category_theory/bicategory/coherence_tactic.lean</a></p>\n<p>and it is also still here:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/CategoryTheory/Bicategory/CoherenceTactic.lean\">https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/CategoryTheory/Bicategory/CoherenceTactic.lean</a></p>\n<p>and it is still in the Unported files list here:</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib-port-status/file/category_theory/bicategory/coherence_tactic\">https://leanprover-community.github.io/mathlib-port-status/file/category_theory/bicategory/coherence_tactic</a></p>",
        "id": 361949400,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685366221
    },
    {
        "content": "<p>Do you have experience with writing tactics? Otherwise this doesn't seem like a good file to worry about.</p>",
        "id": 361949803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685366329
    },
    {
        "content": "<p>You can answer your question about the new location by looking at the PR that I linked to above.</p>",
        "id": 361949872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685366345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  reading the PR it seems that CategoryTheory.Bicategory.CoherenceTactic got merged into Tactic.CategoryTheory.Coherence.  That has a FreeMonoidalCategory with a LiftHom class.  Does FreeMonoidalCategory replace Bicategory?  Or the is Bicategory LiftHom class gone?  I see this note in the ported file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: restore when ported</span>\n<span class=\"c1\">-- import Mathlib.CategoryTheory.Bicategory.CoherenceTactic</span>\n</code></pre></div>\n<p>The <a href=\"https://github.com/leanprover-community/mathlib4/pull/4357\">PR notes</a> start with</p>\n<blockquote>\n<p>It does not include a port of the coherence tactic for bicategories, but this is not actually used in mathlib yet.</p>\n</blockquote>\n<p>In any event if <code>CoherenceTactic</code> was merged and ported, it would be helpful to exclude this page</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib-port-status/file/category_theory/bicategory/coherence_tactic\">https://leanprover-community.github.io/mathlib-port-status/file/category_theory/bicategory/coherence_tactic</a></p>\n<p>from the Mathlib porting status.</p>",
        "id": 361980220,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685374088
    }
]