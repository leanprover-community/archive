[
    {
        "content": "<p>In porting <code>Analysis.SpecialFunctions.Gaussian</code>, I came across a proof which was mysteriously failing to work, involving an expression containing <code>x ^ 2</code> for a real variable <code>x</code> . </p>\n<p>The problem seems to be that mathlib3 read this as an instance of <code>pow : ℝ × ℕ → ℝ</code> while mathlib4 seems to prefer to interpret the <code>2</code> as a real number and use <code>rpow : ℝ × ℝ → ℝ</code>. This can be fixed using <code>rw [← Nat.cast_two, rpow_nat_cast]</code> but that adds an annoying extra step (which is going to occur over and over again in this file since it's all about integration of <code>exp (-x ^ 2)</code>).</p>\n<p>Is there some syntax I can use to force it to interpret <code>x ^ 2</code> as a natural-number power rather than a real power?</p>",
        "id": 368460706,
        "sender_full_name": "David Loeffler",
        "timestamp": 1687421395
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- Porting note: See issue #2220</span>\n</code></pre></div>\n<p>directly under the module documentation comment</p>",
        "id": 368461143,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687421489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/syntax.20for.20powers.3F/near/368461143\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- Porting note: See issue #2220</span>\n</code></pre></div>\n<p>directly under the module documentation comment</p>\n</blockquote>\n<p>Excellent, I had a feeling this must have come up before, thanks!</p>",
        "id": 368461718,
        "sender_full_name": "David Loeffler",
        "timestamp": 1687421611
    },
    {
        "content": "<p>This may cause another issue where numerals like <code>1</code> are treated as <code>((1 : Nat) : Real)</code> (with an explicit cast) rather than <code>(1 : Real</code>), but you can work around that by writing <code>(1 : Real)</code> explicitly</p>",
        "id": 368462761,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687421846
    },
    {
        "content": "<p>What is the current status of this issue? Is there an actual fix coming?</p>",
        "id": 368483177,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687425838
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a></p>",
        "id": 368485927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687426370
    },
    {
        "content": "<p>I've got a prototype fix, in case anyone wants to experiment and report back: <a href=\"https://gist.github.com/kmill/bc58941368cc60738f3c932fe2546c9d\">https://gist.github.com/kmill/bc58941368cc60738f3c932fe2546c9d</a></p>\n<p>This is how it performs on some simple tests:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.binop2</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- 3 is real</span>\n<span class=\"c1\">-- 2 is a nat</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- 1 is real</span>\n<span class=\"c1\">-- 3 is real</span>\n<span class=\"c1\">-- 2 is a nat</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 1 is real</span>\n<span class=\"c1\">-- 3 is real</span>\n<span class=\"c1\">-- 2 is a nat</span>\n</code></pre></div>\n<p>This can also support smul, but I didn't write a macro for it.</p>",
        "id": 368647662,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687455726
    },
    {
        "content": "<p>If it seems good, I can create a Lean 4 PR</p>",
        "id": 368647831,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687455764
    },
    {
        "content": "<p>Supporting smul would be handy too: we have a lot of silly annotations where lean can't work out that <code>r \\smul m</code> is of type <code>M</code> when <code>m : M</code></p>",
        "id": 368652602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687456831
    },
    {
        "content": "<p>I assume</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">Given</span> <span class=\"bp\">`</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">can</span> <span class=\"n\">successfully</span> <span class=\"n\">elaborate</span> <span class=\"bp\">`</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"bp\">`.</span> <span class=\"n\">Recall</span> <span class=\"n\">that</span> <span class=\"n\">Lean</span> <span class=\"mi\">3</span>\n   <span class=\"n\">fails</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">former.</span>\n</code></pre></div>\n<p>is a typo</p>",
        "id": 368652819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687456881
    },
    {
        "content": "<p>I don't remember Lean3 having any trouble adding two natural numbers</p>",
        "id": 368652902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687456899
    },
    {
        "content": "<p>My guess is that it should say <code>i : Int</code> :-) (note one of the benefits of not calling all your types alpha, beta, gamma and all your terms a,b,c ;-) )</p>",
        "id": 368653328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687456987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> More examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">leftact</span><span class=\"bp\">%</span> <span class=\"n\">HSMul.hSMul</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 1 is a nat</span>\n<span class=\"c1\">-- 2 is real</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span>\n<span class=\"c1\">-- m + r • ↑n : M</span>\n</code></pre></div>",
        "id": 368669844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687461174
    },
    {
        "content": "<p>I lost quite some time to this earlier today. The example I encountered was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.Deriv.Pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.Real</span>\n\n<span class=\"c1\">-- The below `by simp` succeeds only if the import defining `Real.rpow`</span>\n<span class=\"c1\">-- is commented out (as shown above).</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- This always works.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">HPow.hPow</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 370407666,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687954848
    },
    {
        "content": "<p>I find it unsettling that meaning of <em>statements</em> are sensitive to the imports in this way!</p>",
        "id": 370408017,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687954911
    },
    {
        "content": "<p>Yeah, this macro_rules saga is far from over...</p>",
        "id": 370414711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687956206
    },
    {
        "content": "<p>OTOH I was very happy when I discovered Ruben's one-line patch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- See issue #2220</span>\n</code></pre></div>",
        "id": 370415756,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687956408
    },
    {
        "content": "<p>I can only claim credit for copy/pasting it into Zulip :)</p>",
        "id": 370416039,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687956462
    },
    {
        "content": "<p>3 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/addressing.20lean4.232220.20.28HPow.20elaboration.29\">#mathlib4 &gt; addressing lean4#2220 (HPow elaboration)</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 388099838,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693399934
    }
]