[
    {
        "content": "<p>I started the bump of mathlib4 to the current std4 and lean4 at <a href=\"https://github.com/leanprover-community/mathlib4/pull/5409\">#5409</a>. There is <em>a lot</em> still to do on this PR. I've labelled it <code>help-wanted</code>.</p>\n<p>Some of it is that material on <code>Fin</code> has been upstreamed, but in complicated ways changing definitions. e.g. <code>def castLE (h : n ≤ m) : Fin n ↪o Fin m</code> has now been taken by the plain function, so we will need to rename the order embedding.</p>\n<p>In other files there are mysterious problems with <code>simp</code>, and <code>change</code>, and who know what else.</p>\n<p>As we may need to continue bumping Lean4 versions to finish the port, this bump is an integral part of the porting process... :-) Boss levels were promised!</p>",
        "id": 370711394,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688033067
    },
    {
        "content": "<p>I'll take a look for the next 10 minutes or so</p>",
        "id": 370715380,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688033750
    },
    {
        "content": "<p>Fun: the hypothesis in <code>Fin.pred</code> changed from <code>i ≠ 0</code> to <code>↑i ≠ 0</code></p>",
        "id": 370737329,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688037238
    },
    {
        "content": "<p>I'm thinking it'll be best to rename the mathlib Fin declarations first, independently of the bump</p>",
        "id": 370737536,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688037277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/std4.20.2F.20Lean4.20bump/near/370711394\">said</a>:</p>\n<blockquote>\n<p>...of the porting process... :-) Boss levels were promised!</p>\n</blockquote>\n<p>This (the porting process) is not a video game, Scott</p>",
        "id": 370744063,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1688038472
    },
    {
        "content": "<p>It's a puzzle game!</p>",
        "id": 370746659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688038988
    },
    {
        "content": "<p>What I'm saying is that the analogy between playing any sort of game and the porting process is inappropriate. According to such analogy we're not playing the game, we're developing it</p>",
        "id": 370761702,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1688041548
    },
    {
        "content": "<p>Let's not read too much into the analogy.</p>",
        "id": 370777388,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1688044314
    },
    {
        "content": "<p>Anyway <a href=\"https://github.com/leanprover-community/mathlib4/pull/5584\">!4#5584</a>, which renames <code>Fin</code>-related declarations, is ready for review</p>",
        "id": 370950696,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1688083073
    },
    {
        "content": "<p>I'm thinking for future std&lt;-mathlib PRs we should also have matching mathlib4 PRs that make sure things compile again...</p>",
        "id": 370972348,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688092053
    },
    {
        "content": "<p>What's the status of this PR? It says it depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5584\">#5584</a>, which looks ready for review, <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> ?</p>",
        "id": 371620028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688269895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598052\">@Jeremy Tan</span> started messing with that pr while I was working on it, I'm not sure what the status is now</p>",
        "id": 371628710,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688275347
    },
    {
        "content": "<p>it appears to be passing CI now</p>",
        "id": 371629736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688275948
    },
    {
        "content": "<p>I'm going to guess that there isn't anything more coming from him on the PR, so I think the ball is in your court</p>",
        "id": 371629817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688276003
    },
    {
        "content": "<p>The current bump draft seems to be dropping a lot of lemmas about fin definitions in favor of theorems about the <code>*Emb</code> versions, which I think is likely to be the wrong default. But the lemmas about these definitions should live in std, so I've started working on the upstreaming at <a href=\"https://github.com/leanprover-community/std/pull/173\">std#173</a>. Please feel free to jump in and work on that, as it's a big file.</p>",
        "id": 371634309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688278395
    },
    {
        "content": "<p>My idea was to keep the theorems saying the same thing even though std gained different definitions with the existing names. We could change that separately</p>",
        "id": 371637498,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688279967
    },
    {
        "content": "<p>yeah, that will mean that mathlib will have to basically completely avoid the fin definitions and that will require a bunch of additional work to clean up later</p>",
        "id": 371641506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688281647
    },
    {
        "content": "<p>We will in almost every case want theorems either only about the non <code>Emb</code> version or about both</p>",
        "id": 371641622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688281692
    },
    {
        "content": "<p>Std didn't get different definitions with the same names, the new definitions are drop in replacements for the old ones in most situations, so it will probably be less text shuffling to use the new definitions</p>",
        "id": 371641814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688281798
    },
    {
        "content": "<p>Currently <a href=\"https://github.com/leanprover-community/mathlib4/pull/5409\">#5409</a> has a merge conflict (the latest dependent PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/5715\">#5715</a> has been merged).</p>",
        "id": 372432894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688516018
    },
    {
        "content": "<p>(There is no <code>std#</code> linkifier. The repository is called <code>std4</code>, so the linkifier is <a href=\"https://github.com/leanprover/std4/pull/173\">std4#173</a>.)</p>",
        "id": 372433195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688516156
    },
    {
        "content": "<p>The std PR is now ready, although there is a lot of stuff in there and maybe someone other than me could give it a review?</p>",
        "id": 372534049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688551868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, would you be able to either do the merge of <code>master</code> into <a href=\"https://github.com/leanprover-community/mathlib4/pull/5409\">#5409</a>, or give approval to abandon the changes currently on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5409\">#5409</a> to <code>Mathlib.Data.Fin.Basic</code> so we can start over on that file?</p>\n<p>It would be great to resume tracking std4 and lean4, but the PR is in a borked state that is hard to work on at the moment. :-)</p>",
        "id": 373469912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688818793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I may have some time to look at it later today, but feel free to abandon anything as you see fit</p>",
        "id": 373493109,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688824950
    },
    {
        "content": "<p>A better way forward is to revert all new changes to lean4 and std4, but keep the change introducing the additional config for <code>congr</code> that is needed for <a href=\"https://github.com/leanprover-community/mathlib4/pull/5032\">#5032</a></p>",
        "id": 374460085,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689122571
    },
    {
        "content": "<p>Then try each reverted commit one by one to see which ones require large refactors to mathlib4</p>",
        "id": 374460155,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689122604
    },
    {
        "content": "<p>Jeremy, this isn't a viable approach, unfortunately. Mathlib is a downstream project, in the fortunate situation that the maintainers of its upstream projects care very much about its success. Nevertheless, we've got to sort it out in Mathlib.</p>",
        "id": 374461032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689122991
    },
    {
        "content": "<p>I'm looking at the build error log, and many of the errors are metavariable-related (or are timeouts) and in category theory files. I see no way to fix them all without yet more fixes upstream – or reversions upstream</p>",
        "id": 374462227,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1689123484
    },
    {
        "content": "<p>We can certainly ask for fixes or reversions upstream. Perhaps I misunderstood your suggestion. Certainly it's fine if we want to manually run mathlib4 against each Lean4 commit, in order to track down the moment at which the problem occurs. But it's probably \"cheaper\" to do be investigating the error. (Sorry I haven't had time to look at this bump PR.)</p>",
        "id": 374462827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689123767
    },
    {
        "content": "<p>A pleasant surprise? <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/run-detail/95b755a6-1aa7-4e7f-8ffa-1697ff99406c\">http://speedcenter.informatik.kit.edu/mathlib4/run-detail/95b755a6-1aa7-4e7f-8ffa-1697ff99406c</a><br>\n(4% total speedup if you don't want to scroll through that wall of deltas)</p>",
        "id": 374946776,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689257307
    },
    {
        "content": "<p>10% on typeclass inference</p>",
        "id": 374948237,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689257505
    },
    {
        "content": "<p>11 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/changing.20algebra.20instance.20priorities\">#mathlib4 &gt; changing algebra instance priorities</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 375972137,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689590755
    }
]