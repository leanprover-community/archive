[
    {
        "content": "<p>This might have a simple answer: is there syntax to bench against a specific commit (possibly in a different branch)? Specifically, I want to bench a test of a lean4 PR against <code>nightly-testing</code>.</p>\n<p>If not I suppose I’ll have to make a PR and bench it, then compare in the speedcenter, then close the PR. But if it doesn’t exist already, <code>!bench against (&lt;branch&gt;?):&lt;commit&gt;</code> might be a useful feature to have. :) (Also note that running things locally is not really feasible on my machine.)</p>",
        "id": 397976760,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698014640
    },
    {
        "content": "<p>There is a comparison feature where you can choose two commits and get a perf diff.</p>",
        "id": 397976939,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698014794
    },
    {
        "content": "<p>In the speedcenter, right? Doesn’t that mean I need to open 2 PRs?</p>",
        "id": 397976965,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698014826
    },
    {
        "content": "<p>In the speedcenter web interface yes. You will need to get runs for both of them so you'll need two PRs (modulo unusual provenance).</p>",
        "id": 397977052,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698014902
    },
    {
        "content": "<p>Right, I know I can do that, my question is specifically about a command like <code>!bench against …</code> on a single mathlib PR. :)</p>",
        "id": 397977085,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698014958
    },
    {
        "content": "<p>No such command exists. The general assumption is that you are benching off the commit you branched from master.</p>",
        "id": 397977269,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698015141
    },
    {
        "content": "<p>Ah, okay. In that case I’d like to turn this thread into a feature request, since there are a few scenarios in which we don’t want to bench against that commit. :)</p>",
        "id": 397977692,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698015617
    },
    {
        "content": "<p>I had the same desire. My work around was to create a temporary PR with that commit at tbre head, run <code>!bench</code>, and delete the PR again. (For me it would suffice to have <code>!bench abcdef</code>, I can then click that comparison in the web view manually)</p>",
        "id": 398019664,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698042905
    },
    {
        "content": "<p>With the PR, you have CI run on the commit which is prophylactic for empty benchmarking runs.</p>",
        "id": 398072461,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698063479
    },
    {
        "content": "<p>CI runs on branches without PRs anyway, no?</p>",
        "id": 398141369,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698087776
    },
    {
        "content": "<p>A small QoL improvement would be if <code>!bench</code> would schedule not just the HEAD commit of the branch, but also the base commit (the merge-base), which is usually what you would want to compare against (assuming that scheduling a commit is idempotent).</p>",
        "id": 398447636,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698226706
    },
    {
        "content": "<p>Java contributions welcome! :) <a href=\"https://github.com/IPDSnelting/velcom\">https://github.com/IPDSnelting/velcom</a></p>",
        "id": 398449549,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698227421
    },
    {
        "content": "<p>The code changes to might actually be doable by cargo-culting <a href=\"https://github.com/IPDSnelting/velcom/blob/57ce034c4bf1670b66cc63ee7281b64aec2ae4c2/backend/backend/src/main/java/de/aaaaaaah/velcom/backend/listener/github/GithubPrInteractor.java#L252C1-L252C80\">existing Java code</a>, if the Github API would include more sensible data, but (again) <a href=\"https://github.com/orgs/community/discussions/39880\">it doesn’t</a>, and one would have to run <code>git merge-base</code> manually… so nevermind.</p>",
        "id": 398451057,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698227949
    },
    {
        "content": "<p>Velcom has to have the information eventually in order to generate the diff I suppose, but what you're saying is that it doesn't have it at this specific place?</p>",
        "id": 398451450,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698228082
    },
    {
        "content": "<p>Velcom finds the base commit for comparisons <a href=\"https://github.com/IPDSnelting/velcom/blob/57ce034c4bf1670b66cc63ee7281b64aec2ae4c2/backend/backend/src/main/java/de/aaaaaaah/velcom/backend/listener/github/GithubPrInteractor.java#L523-L529\">here</a> using <a href=\"https://github.com/IPDSnelting/velcom/blob/57ce034c4bf1670b66cc63ee7281b64aec2ae4c2/backend/backend/src/main/java/de/aaaaaaah/velcom/backend/access/committaccess/CommitReadAccess.java#L350\">this fancy recursive query</a> that traverses the PR until it finds one or more tracked commits. A tracked commit is a commit reachable from a tracked branch (in lean's and mathlib's case, that's only <code>master</code>). For example, in this commit graph</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">B</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"bp\">-</span> <span class=\"n\">D</span> <span class=\"bp\">-</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n     <span class=\"bp\">\\</span>       <span class=\"bp\">\\</span>\n      <span class=\"n\">F</span> <span class=\"bp\">-</span> <span class=\"n\">G</span> <span class=\"bp\">-</span> <span class=\"n\">H</span> <span class=\"bp\">-</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">pr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>commits <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, and <code>E</code> are tracked and <code>getFirstParentsOfBranch</code> will return <code>B</code> and <code>D</code>.</p>",
        "id": 398476919,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1698237783
    },
    {
        "content": "<p>Not within three lines of looking up and down :-)</p>",
        "id": 398521680,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698250847
    },
    {
        "content": "<p>So one could use this logic to find a good <code>compareToHash</code> before scheduling the actual <code>!bench</code> PR head, check if it had been run before, and if not, schedule it. So later <code>replyToFinishedPrCommands</code> would (more likely) find a run to compare against. Not sure how frequent that need is to add that logic, it might be easier to support <code>!bench &lt;commit&gt;</code> or hand out access to the UI to those who are bothered.</p>",
        "id": 398522651,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698251216
    },
    {
        "content": "<p><code>!bench &lt;commit&gt;</code> would need similar logic to schedule <code>&lt;commit&gt;</code> (checking whether a run exists and if not, adding one to the queue)</p>",
        "id": 398534857,
        "sender_full_name": "Joscha Mennicken",
        "timestamp": 1698256120
    }
]