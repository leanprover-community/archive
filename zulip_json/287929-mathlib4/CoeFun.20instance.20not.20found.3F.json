[
    {
        "content": "<p>Consider this mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"c1\">--neither setting works</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">Unit</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial.eval</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>This fails with \"failed to synthesize <code>CoeFun (MvPolynomial Unit K →+* K) ?m.178,</code> maximum number of heartbeats (20000) has been reached\".</p>",
        "id": 344244986,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679660012
    },
    {
        "content": "<p>How can this be? I'm super confused</p>",
        "id": 344245021,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679660023
    },
    {
        "content": "<p>this also fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"c1\">--neither setting works</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 344245677,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679660195
    },
    {
        "content": "<p>yeah I think there might be an issue with the path <code>RingHom -&gt; RingHomClass -&gt; CoeFun</code></p>",
        "id": 344246069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679660306
    },
    {
        "content": "<p>IIRC the solution from the linear algebra library where a similar thing came up was to add a <del>CoeFun</del>FunLike instance manually.</p>",
        "id": 344246191,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679660347
    },
    {
        "content": "<p>Let me try to dig up that old thread.</p>",
        "id": 344246221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679660355
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/YxFfTvE5LEosG1aPqbBgTvhB/image.png\">image.png</a> it seems that even if you say exactly what FunLike instance you want, it still searches for some generic weird one</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YxFfTvE5LEosG1aPqbBgTvhB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/YxFfTvE5LEosG1aPqbBgTvhB/image.png\"></a></div>",
        "id": 344246702,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679660473
    },
    {
        "content": "<p>How high do you have to bump the heart beats for it to succeed?</p>",
        "id": 344246900,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679660519
    },
    {
        "content": "<p>2000000000 doesn't seem to be enough</p>",
        "id": 344247720,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679660708
    },
    {
        "content": "<p>How about 0?</p>",
        "id": 344247850,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679660742
    },
    {
        "content": "<p>the error switches to timeouts at <code>whnf</code> and <code>isDefEq</code></p>",
        "id": 344248280,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679660840
    },
    {
        "content": "<p>Similar but not as egregious behavior in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2364\">!4#2364</a>.</p>",
        "id": 344248657,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679660936
    },
    {
        "content": "<p>and those seem to be looping as it doesn't resolve after ~1m, with <code>etaExperiment</code> on or off.</p>",
        "id": 344248658,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679660937
    },
    {
        "content": "<p>Does the synth trace show where it gets stuck?</p>",
        "id": 344248795,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679660980
    },
    {
        "content": "<p>well, here's a bit more info:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">RingHomClass</span> <span class=\"n\">α</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">FunLike</span> <span class=\"n\">α</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- inferInsance fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 344248865,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679660996
    },
    {
        "content": "<p>The first one succeeds as an example right?</p>",
        "id": 344249200,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679661063
    },
    {
        "content": "<p>Is it trying to dig through something like <code>RingHomClass -&gt; MulHomClass -&gt; ... -&gt; FunLike</code>?</p>",
        "id": 344249220,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679661065
    },
    {
        "content": "<p>well yes, but not without the sorry</p>",
        "id": 344249249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679661074
    },
    {
        "content": "<p>i.e. tc search doesn't find the instance</p>",
        "id": 344249295,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679661086
    },
    {
        "content": "<p>Right. Just wondering if the supplied instance confused it</p>",
        "id": 344249490,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679661129
    },
    {
        "content": "<p>what path is is <em>supposed</em> to find for the first instance? I</p>",
        "id": 344249580,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679661153
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/GJoshIsV5fZVqAaO87Tepw4N/image.png\">image.png</a>  there seems to be some weird loop in some of the trace</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GJoshIsV5fZVqAaO87Tepw4N/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/GJoshIsV5fZVqAaO87Tepw4N/image.png\"></a></div>",
        "id": 344249745,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679661189
    },
    {
        "content": "<p>Oh right. Misreading</p>",
        "id": 344249777,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679661197
    },
    {
        "content": "<p>It’s really trying hard</p>",
        "id": 344249951,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679661238
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/TJM0sT5uiQygPzN6PJha240q/image.png\">image.png</a> Yeah there's some weird looping going on</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TJM0sT5uiQygPzN6PJha240q/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/TJM0sT5uiQygPzN6PJha240q/image.png\"></a></div>",
        "id": 344250579,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679661377
    },
    {
        "content": "<p>I tried removing <code>Ordinal</code> files to see what happens and it starts going on some other horrific loop</p>",
        "id": 344250664,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679661395
    },
    {
        "content": "<p>StoneCech!?</p>",
        "id": 344250791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679661425
    },
    {
        "content": "<p>I have a feeling that maybe what's going on in that linear algebra file is similar, there's finally enough imports for issues like this to show up</p>",
        "id": 344250803,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679661427
    },
    {
        "content": "<p>As I said it is trying hard</p>",
        "id": 344250850,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679661441
    },
    {
        "content": "<p>Does anyone actually understand <code>FunLike</code> instances in lean4?</p>",
        "id": 344250975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679661478
    },
    {
        "content": "<p>Lean is just trying to compute a projective resolution of your space</p>",
        "id": 344251583,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679661616
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2364\">!4#2364</a>, it started by complaining about <code>FunLike</code> or <code>CoeFun</code> but behind that was a long attempt to chain together <code>CoeT</code>, <code>CoeOTC</code>, <code>CoeHCTC</code>, and friends</p>",
        "id": 344252267,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679661773
    },
    {
        "content": "<p><del>So this might be different. Sounds closer to <a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a> in success mode</del> Wrong!</p>",
        "id": 344252799,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679661884
    },
    {
        "content": "<p>But there must be loop in TC graph right?</p>",
        "id": 344253278,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679661978
    },
    {
        "content": "<p>Looks like the issue is more of an instance search starting on some type with metavariables: this <code>?m.1426</code> should not appear when searching for <code>TopologicalSpace</code>.</p>",
        "id": 344256494,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1679662691
    },
    {
        "content": "<p>Specifically, what's going on is when searching for <code>FunLike α A B</code> in the example above, <code>A</code> and <code>B</code> are <code>outParam</code> so they are replaced with new metavariables <code>_tc.0</code> and <code>_tc.1</code>, then Lean tries a few classes before hitting <code>ContinuousMapClass</code>. Then it decides <code>α</code> might be a <code>HomotopyLike</code> so it needs to unify <code>_tc.0</code> with <code>unitInterval x ?m.484</code> and this <code>?m.484</code> is what needs the <code>TopologicalSpace</code> instance that sends Lean into a loop.</p>",
        "id": 344259332,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1679663326
    },
    {
        "content": "<p>Isn't this always going to be an issue with the <code>FooLike</code> classes?</p>",
        "id": 344260009,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679663471
    },
    {
        "content": "<p>Yes, as long as Lean 4 is happy to try and solve <code>TopologicalSpace ?m.484</code> instances, the whole <code>FunLike</code> design will easily lead to loops.</p>",
        "id": 344260283,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1679663536
    },
    {
        "content": "<p>In general I've had quite a few issues in Lean 4 with instance parameters depending on out parameters (such as TopologicalSpace in this case). The solution is either to improve the synthesis algorithm, or to unbundle <code>RingHomClass</code> from <code>FunLike</code>: <code>class RingHomClass [FunLike F A B] := ...</code> instead of <code>class RingHomClass extends FunLike F A B</code>.</p>",
        "id": 344260478,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1679663589
    },
    {
        "content": "<p>In the unbundled case, the <code>FunLike</code> parameter will supply values to the <code>outParam</code> before searching for the dependent instances.</p>",
        "id": 344260577,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1679663615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun.20instance.20not.20found.3F/near/344259332\">said</a>:</p>\n<blockquote>\n<p>Specifically, what's going on is when searching for <code>FunLike α A B</code> in the example above, <code>A</code> and <code>B</code> are <code>outParam</code> so they are replaced with new metavariables <code>_tc.0</code> and <code>_tc.1</code>, then Lean tries a few classes before hitting <code>ContinuousMapClass</code>. Then it decides <code>α</code> might be a <code>HomotopyLike</code> so it needs to unify <code>_tc.0</code> with <code>unitInterval x ?m.484</code> and this <code>?m.484</code> is what needs the <code>TopologicalSpace</code> instance that sends Lean into a loop.</p>\n</blockquote>\n<p>why does it metavar them? if <code>A</code>/<code>B</code> are already there from unification, I really don't see why it then decides that it has to forget them</p>",
        "id": 344261140,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679663751
    },
    {
        "content": "<p>I think this is by design in TC synthesis. This was discussed somewhere <del>unless I am confused.</del><br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/What.20is.20an.20outParam.3F/near/323532517\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/What.20is.20an.20outParam.3F/near/323532517</a></p>",
        "id": 344261540,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679663831
    },
    {
        "content": "<p>Yeah a priori there could be some way to via the unit interval as the type of ring Homs between some rings?</p>",
        "id": 344261839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679663898
    },
    {
        "content": "<blockquote>\n<p>make elaboration less dependent on the exact elaboration ordering</p>\n</blockquote>\n<p>what does this mean?</p>",
        "id": 344264307,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679664461
    },
    {
        "content": "<p>I think the following reply explains the philosophy best:<br>\n<span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/What.20is.20an.20outParam.3F/near/323534863\">said</a>:</p>\n<blockquote>\n<p>The most important property for elaboration robustness is what I and maybe no-one else is calling <em>monotonicity</em>: assigning a metavariable should not <em>change</em> the output of a subsequent elaboration step other than to change it from failure to success. But if we allowed mixed in/out TC parameters, <code>[OrderHomClass F ?α ?β]</code> and <code>OrderHomClass F α ?β]</code> could certainly both succeed with different answers.</p>\n</blockquote>",
        "id": 344265066,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1679664651
    },
    {
        "content": "<p>but that's only if you break the <code>OutParam</code> philosophy, right?</p>",
        "id": 344266512,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679664994
    },
    {
        "content": "<p>like that should _only_ break if you break the promise you made when you set <code>a, b</code> to be outparams</p>",
        "id": 344266584,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679665018
    },
    {
        "content": "<p>I totally agree with you, overlapping instances should be a (linting?) error, not a feature of the inference algorithm.</p>",
        "id": 344266949,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1679665090
    },
    {
        "content": "<p>What fraction of <code>whnf</code> and <code>elaborator</code>timeouts we are seeing in algebra are from this issue?</p>",
        "id": 344301594,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679672238
    },
    {
        "content": "<p>I've seen similar very wide-ranging searches there. Bumping the heartbeat limit gets you through. Importing the world there would probably bust that though.</p>",
        "id": 344302836,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679672496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun.20instance.20not.20found.3F/near/344256494\">said</a>:</p>\n<blockquote>\n<p>Looks like the issue is more of an instance search starting on some type with metavariables: this <code>?m.1426</code> should not appear when searching for <code>TopologicalSpace</code>.</p>\n</blockquote>\n<p>Anne is completely correct here.  Usually the dangerousInstances linter should prevent this.  Does the file pass linting?</p>",
        "id": 344330286,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679679117
    },
    {
        "content": "<p>What's the solution then, Gabriel?</p>",
        "id": 344387298,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679701000
    },
    {
        "content": "<p>The plot thickens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- `f₀` and `f₁` are `outParam` so this is not dangerous</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">nolint</span> <span class=\"n\">dangerousInstance</span><span class=\"o\">]</span> <span class=\"n\">HomotopyLike.toContinuousMapClass</span>\n</code></pre></div>",
        "id": 344388701,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679701997
    },
    {
        "content": "<p>Why do we need all these <code>FooBarLike</code> classes in the first place!?!? I know they’re useful for the algebra hierarchy, but is this homotopy thing really useful?</p>",
        "id": 344389617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679702543
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3089\">!4#3089</a></p>",
        "id": 344390181,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679702896
    },
    {
        "content": "<p>There appeared to be something in OrderedRing also right?</p>",
        "id": 344390624,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679703154
    },
    {
        "content": "<p>I'm waiting until CI has built the caches before debugging again.</p>",
        "id": 344391174,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679703470
    },
    {
        "content": "<p>Are there any other <code>nolint dangerousInstance</code>s in mathlib4?</p>",
        "id": 344391376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679703601
    },
    {
        "content": "<p>This thread is makes me think that we shouldn’t even be able to turn off this linter</p>",
        "id": 344391468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679703636
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>So far in ML4</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Mathlib/Algebra/Algebra/Equiv.lean<br>\n55:-- Porting note: Removed nolint dangerousInstance from AlgEquivClass.toRingEquivClass</p>\n<p>Mathlib/Algebra/Algebra/Hom.lean<br>\n58:-- attribute [nolint dangerousInstance] AlgHomClass.toRingHomClass</p>\n<p>Mathlib/Algebra/Star/StarAlgHom.lean<br>\n79:--attribute [nolint dangerousInstance] NonUnitalStarAlgHomClass.toStarHomClass<br>\n319:--attribute [nolint dangerousInstance] StarAlgHomClass.toStarHomClass<br>\n696:-- attribute [nolint dangerousInstance] StarAlgEquivClass.toRingEquivClass<br>\n711:-- attribute [nolint dangerousInstance] StarAlgEquivClass.instStarHomClass</p>\n<p>Mathlib/Algebra/Module/Equiv.lean<br>\n125:@[infer_tc_goals_rl, nolint dangerousInstance]</p>\n<p>Mathlib/Algebra/Module/LinearMap.lean<br>\n140:-- attribute [nolint dangerousInstance] SemilinearMapClass.toAddHomClass<br>\n165:-- @[nolint dangerousInstance] -- <code>σ</code> is an <code>outParam</code> so it's not dangerous<br>\n178:@[nolint dangerousInstance]</p>\n<p>Mathlib/Algebra/Hom/GroupAction.lean<br>\n86:/- porting note: Removed a @[nolint dangerousInstance] for SMulHomClass<br>\n221:/- porting note: Removed a @[nolint dangerousInstance] for<br>\n444:/- porting note: Removed a @[nolint dangerousInstance] for MulSemiringActionHomClass.toRingHomClass</p>\n<p>Mathlib/Algebra/Hom/NonUnitalAlg.lean<br>\n77:-- attribute [nolint dangerousInstance] NonUnitalAlgHomClass.toMulHomClass</p>\n<p>Mathlib/LinearAlgebra/AffineSpace/AffineEquiv.lean<br>\n109:@[nolint dangerousInstance] -- Porting note: this was not a problem in Lean 3</p>\n<p>Mathlib/CategoryTheory/ConcreteCategory/BundledHom.lean<br>\n67:@[nolint dangerousInstance]<br>\n82:@[nolint dangerousInstance]</p>\n<p>Mathlib/Topology/Homotopy/Basic.lean<br>\n103:attribute [nolint dangerousInstance] HomotopyLike.toContinuousMapClass</p>\n<p>Mathlib/Order/RelClasses.lean<br>\n595:@[nolint dangerousInstance]</p>\n<p>Mathlib/Order/Hom/Bounded.lean<br>\n119:@[nolint dangerousInstance] -- The <code>OrderTop</code>s should be instance parameters but depend on outParams<br>\n127:@[nolint dangerousInstance] -- The <code>OrderBot</code>s should be instance parameters but depend on outParams<br>\n136:@[nolint dangerousInstance] -- The <code>BoundedOrder</code>s should be instance parameters but depend on</p>\n<p>Mathlib/Order/Hom/Lattice.lean<br>\n244:@[nolint dangerousInstance]<br>\n254:@[nolint dangerousInstance]<br>\n270:@[nolint dangerousInstance]<br>\n1203:@[nolint dangerousInstance]</p>\n</div></div>",
        "id": 344391702,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1679703805
    },
    {
        "content": "<p>Ok so presumably the same trick should work for all those. E.g. for algebra Homs the base ring’s type should be an outparam etc</p>",
        "id": 344392220,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679704124
    },
    {
        "content": "<p>At least I think that’s the right thing to do. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can you verify?</p>",
        "id": 344392312,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679704179
    },
    {
        "content": "<p>No some of these are unfortunately unavoidable atm (because we currently always infer the subgoals strictly left-to-right).  I'm cleaning up <a href=\"https://github.com/leanprover/lean4/pull/2117\">lean4#2117</a> now which should make all of these <code>{_ : TopologicalSpace X}</code> workarounds unnecessary.</p>",
        "id": 344392530,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679704304
    },
    {
        "content": "<p>Both of the coercions at the beginning of the thread work now.  Please ping me if you run into any other issues.</p>",
        "id": 344396618,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679706521
    },
    {
        "content": "<p>Thanks so so much Gabriel!</p>",
        "id": 344429760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679730174
    },
    {
        "content": "<p>I wonder if I am running into the same sort of troubles. I am trying to port <code>analysis\\normed_space\\linear_isometry</code> and I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">congr_arg</span> <span class=\"o\">[</span><span class=\"n\">SemilinearIsometryClass</span> <span class=\"bp\">𝓕</span> <span class=\"n\">σ₁₂</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓕</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"c1\">-- Lean complains</span>\n</code></pre></div>\n<p>I get the error <code>failed to synthesize (deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached</code>. I would imagine that it is uncapable of coercing <code>f</code> from the semi_linear_isometry_class to a function. Is that possible?</p>",
        "id": 347467992,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680798624
    },
    {
        "content": "<p>If you <code>set_option maxHeartbeats 0 in</code> and <code>set_option synthInstance.maxHeartbeats 0 in</code> it still might succeed. What if you just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">SemilinearIsometryClass</span> <span class=\"bp\">𝓕</span> <span class=\"n\">σ₁₂</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓕</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span>  <span class=\"n\">E₂</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Failures occur with <code>SemilinearMapClass</code> getting coerced to a function. That is “fixed” with <code>etaExperiment</code> but usually does not present as a timeout</p>",
        "id": 347469843,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680799086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun.20instance.20not.20found.3F/near/347469843\">said</a>:</p>\n<blockquote>\n<p>If you <code>set_option maxHeartbeats 0 in</code> and <code>set_option synthInstance.maxHeartbeats 0 in</code> it still might succeed. What if you just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">SemilinearIsometryClass</span> <span class=\"bp\">𝓕</span> <span class=\"n\">σ₁₂</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓕</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span>  <span class=\"n\">E₂</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Failures occur with <code>SemilinearMapClass</code> getting coerced to a function. That is “fixed” with <code>etaExperiment</code> but usually does not present as a timeout</p>\n</blockquote>\n<p>Unfortunately</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">SemilinearIsometryClass</span> <span class=\"bp\">𝓕</span> <span class=\"n\">σ₁₂</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓕</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span>  <span class=\"n\">E₂</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>still fails with error <code>type mismatch\n  f\nhas type\n  𝓕 : Type ?u.433175\nbut is expected to have type\n  E → E₂ : Type (max ?u.433160 ?u.433163)</code>. On the other hand,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">SemilinearIsometryClass</span> <span class=\"bp\">𝓕</span> <span class=\"n\">σ₁₂</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓕</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span>  <span class=\"n\">E₂</span> <span class=\"o\">:=</span> <span class=\"n\">h.coe</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>succeeds, as if the problem were finding the right instance.</p>",
        "id": 347470619,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680799319
    },
    {
        "content": "<p>Then <code>set_option synthInstance.etaExperiment true in</code> might fix it</p>",
        "id": 347471138,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680799451
    },
    {
        "content": "<p>Unfortunately no, but should I combine it with the other two <code>set_option</code>s?</p>",
        "id": 347471321,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680799511
    },
    {
        "content": "<p>It can be tried but I don’t remember that combination ever being helpful to me.</p>",
        "id": 347471472,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680799553
    },
    {
        "content": "<p>yes, indeed it is not...</p>",
        "id": 347471567,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680799573
    },
    {
        "content": "<p>What does turning off the limits on heartbeats do if anything?</p>",
        "id": 347471706,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680799607
    },
    {
        "content": "<p>Let me try</p>",
        "id": 347471826,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680799635
    },
    {
        "content": "<p>Is it a Lean4 setting? Or rather something</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">10000000</span> <span class=\"k\">in</span>\n</code></pre></div>",
        "id": 347471952,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680799670
    },
    {
        "content": "<p><code>0</code> = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span></p>",
        "id": 347472515,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680799809
    },
    {
        "content": "<p>What does the TC trace show here? Do we need some other fix similar to what Gabriel did above?</p>",
        "id": 347472544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680799817
    },
    {
        "content": "<p>And the one for <code>synthInstance.maxHeartbeats</code></p>",
        "id": 347472596,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680799838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun.20instance.20not.20found.3F/near/347472544\">said</a>:</p>\n<blockquote>\n<p>What does the TC trace show here? Do we need some other fix similar to what Gabriel did above?</p>\n</blockquote>\n<p><code>set_option trace.Meta.synthInstance</code></p>",
        "id": 347472690,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680799865
    },
    {
        "content": "<p>Also <code>set_option profiler</code> helps with searching through the output</p>",
        "id": 347472785,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680799897
    },
    {
        "content": "<p>So, with <code>set_option maxHeartbeats 10000000 in</code> nothing changes. Then I got lost in what you are suggesting/asking... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 347473218,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680800028
    },
    {
        "content": "<p>Using <code>set_option trace.Meta.synthInstance true in ...</code> will show you a trace of the typeclass search. There may be some loop in there or some other issue.</p>",
        "id": 347473441,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680800091
    },
    {
        "content": "<p>Sorry, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n</code></pre></div>",
        "id": 347473508,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680800107
    },
    {
        "content": "<p>Is my go-to first combo</p>",
        "id": 347473552,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680800122
    },
    {
        "content": "<p>if there's a loop, that <code>0</code> would make it take a little while ;)</p>",
        "id": 347473621,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680800144
    },
    {
        "content": "<p>...and the answer is... <span aria-label=\"clock\" class=\"emoji emoji-1f557\" role=\"img\" title=\"clock\">:clock:</span></p>",
        "id": 347473623,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680800146
    },
    {
        "content": "<p>Yes, go make some tea and if it is still going restart Lean and give it large but finite numbers for the heartbeats</p>",
        "id": 347473781,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680800181
    },
    {
        "content": "<p>OK, I will report after my tea <span aria-label=\"teapot\" class=\"emoji emoji-1fad6\" role=\"img\" title=\"teapot\">:teapot:</span> (indeed, the laptop is getting hot, might use if for the water...)</p>",
        "id": 347473854,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680800203
    },
    {
        "content": "<p>Lean is only program I have had to worry about my lap with</p>",
        "id": 347474073,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680800271
    },
    {
        "content": "<p>No, nothing. After a long time I restarted it and changed <code>0</code> to <code>10000000</code>. But it got stuck, telling me </p>\n<p>(deterministic) timeout at 'whnf', maximum number of heartbeats (10000000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</p>",
        "id": 347479502,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680801814
    },
    {
        "content": "<p>Did you <br>\n<span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun.20instance.20not.20found.3F/near/347473508\">said</a>:</p>\n<blockquote>\n<p>Sorry, </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Try this with <code>0</code> -&gt; <code>10000000</code> for both heartbeat limits</p>",
        "id": 347479729,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680801896
    },
    {
        "content": "<p>Yes, both hearbeat with <code>0</code> first (was getting nowhere after 20 minutes); then I changed both to <code>10000000</code> , restarted the server, and got the above error.</p>",
        "id": 347480407,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680802107
    },
    {
        "content": "<p>You should have a lot more output</p>",
        "id": 347480471,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680802132
    },
    {
        "content": "<p>I don’t use VS Code much but I think they are blue squiggles</p>",
        "id": 347480547,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680802161
    },
    {
        "content": "<p>Oh, indeed I have it. I did not think it was relevant, I am going to paste it here.</p>",
        "id": 347480552,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680802162
    },
    {
        "content": "<p>(need to restart...)</p>",
        "id": 347480668,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680802198
    },
    {
        "content": "<p>(deterministic) timeout at 'whnf', maximum number of heartbeats (10000000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)<br>\nLinearIsometry.lean:219:33<br>\n[Meta.isDefEq] [0.000003s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Type ?u.437939 =?= Type ?u.433175 </p>\n<p>[Meta.isDefEq] [0.000002s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Type ?u.433175 =?= Type ?u.433175 <br>\nLinearIsometry.lean:219:36<br>\n[Meta.isDefEq] [0.000299s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.437940 →+* ?m.437941 =?= R →+* R₂ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] [0.000044s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> R →+* R₂ =?= R →+* R₂ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span><br>\nLinearIsometry.lean:219:40<br>\n[Meta.isDefEq] [0.000003s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Type ?u.437936 =?= Type ?u.433160 </p>\n<p>[Meta.isDefEq] [0.000002s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Type ?u.433160 =?= Type ?u.433160 <br>\nLinearIsometry.lean:219:9<br>\n[Meta.isDefEq] [0.000011s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Sort ?u.437934 =?= Type (max (max ?u.437939 ?u.437936) ?u.437935) </p>\n<p>[Meta.synthInstance] [0.000037s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Semiring R <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] [0.000000s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³³ =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³³ </p>\n<p>[Meta.synthInstance] [0.000026s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Semiring R₂ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] [0.000000s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³² =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>³² </p>\n<p>[Meta.synthInstance] [0.000029s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> SeminormedAddCommGroup E <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] [0.000025s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.437948 =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>⁹ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] [0.000028s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> SeminormedAddCommGroup E₂ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] [0.000023s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.437949 =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>⁸ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] [0.000052s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Module R E <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] [0.000050s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.437950 =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>⁵ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] [0.000049s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Module R₂ E₂ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] [0.000042s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> ?m.437951 =?= inst<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span>⁴ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] [0.000009s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Type (max (max ?u.433163 ?u.433160) ?u.433175) =?= Type (max (max ?u.433175 ?u.433160) ?u.433163) <br>\nLinearIsometry.lean:219:42<br>\n[Meta.isDefEq] [0.000003s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Type ?u.437935 =?= Type ?u.433163 </p>\n<p>[Meta.isDefEq] [0.000002s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Type ?u.433163 =?= Type ?u.433163 <br>\nLinearIsometry.lean:219:51<br>\n[Meta.isDefEq] [0.000006s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Sort ?u.437953 =?= Type ?u.433175 <br>\nLinearIsometry.lean:219:58<br>\n[Meta.isDefEq] [0.000002s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Sort ?u.437956 =?= Type ?u.433160 <br>\nLinearIsometry.lean:219:63<br>\n[Meta.isDefEq] [0.000003s] <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Sort ?u.437957 =?= Type ?u.433163 <br>\nLinearIsometry.lean:219:69<br>\ntype mismatch<br>\n  f<br>\nhas type<br>\n  𝓕 : Type ?u.433175<br>\nbut is expected to have type<br>\n  E → E₂ : Type (max ?u.433160 ?u.433163)<br>\nLinearIsometry.lean:219:69<br>\n[Meta.isDefEq] [0.000026s] <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> E → E₂ =?= 𝓕 <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.isDefEq] [0.000007s] <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> 𝓕 =?= E → E₂ <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n<p>[Meta.synthInstance] [293.306474s] <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> CoeFun 𝓕 ?m.437963</p>",
        "id": 347481739,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680802537
    },
    {
        "content": "<p>(Sorry got distracted asking GPT-4 which journal to submit to)</p>",
        "id": 347483646,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680803112
    },
    {
        "content": "<p>Does the last expand at all?</p>",
        "id": 347483716,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680803140
    },
    {
        "content": "<p>The last line, you mean?</p>",
        "id": 347487118,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680804234
    },
    {
        "content": "<p>Yeah, does it have a little triangle?</p>",
        "id": 347487216,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680804258
    },
    {
        "content": "<p>Yes, but VSCode tells me it still has 549 messages for me, and it seems to be stuck on showing them after I clicked on the triangle...</p>",
        "id": 347487340,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680804298
    },
    {
        "content": "<p>If you run lean on the command line on the file and pipe the output to a file, it might be easier to search the output</p>",
        "id": 347487564,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680804347
    },
    {
        "content": "<p>Ah, good idea. I need to go now (evening in Europe) but I will try again tomorrow.</p>",
        "id": 347488110,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680804529
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 347488115,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680804531
    },
    {
        "content": "<p>It will be large :)</p>",
        "id": 347488616,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680804685
    },
    {
        "content": "<p>(For a text file)</p>",
        "id": 347488640,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680804696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun.20instance.20not.20found.3F/near/347483646\">said</a>:</p>\n<blockquote>\n<p>(Sorry got distracted asking GPT-4 which journal to submit to)</p>\n</blockquote>\n<p>What did it say?</p>",
        "id": 347499107,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680808207
    },
    {
        "content": "<ol>\n<li>JAG</li>\n<li>Duke</li>\n<li>Transactions</li>\n<li>Annals</li>\n<li>JAMS</li>\n</ol>",
        "id": 347542597,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680827373
    },
    {
        "content": "<p>You can also ask it which journal is more prestigious. Fun stuff</p>",
        "id": 347542985,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680827595
    },
    {
        "content": "<p>Is this ordered by chance of acceptance?</p>",
        "id": 347545896,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680829035
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 347546851,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680829554
    },
    {
        "content": "<p>I have the text file, I am uploading it here in case someone (<span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> ?) is willing to give it a look. It is indeed not bad, 8MB for a text file just full of errors <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<a href=\"/user_uploads/3121/N5kX9cyRZyQtr1eghXBvkrVD/error.txt\">error.txt</a></p>",
        "id": 347673022,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1680876293
    }
]