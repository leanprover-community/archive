[
    {
        "content": "<p>In a project I'm working on, I need the following filter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myFilter</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">𝓟</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">|</span><span class=\"n\">z.im</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">z.re</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_myFilter</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">myFilter</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401686623,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699851745
    },
    {
        "content": "<p>I think about addint a more general version to <code>Mathlib</code>. E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Filter.littleO</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"bp\">𝓟</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">‖</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 401687148,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699851923
    },
    {
        "content": "<p>Is there a better approach?</p>",
        "id": 401687171,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699851933
    }
]