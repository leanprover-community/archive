[
    {
        "content": "<p>I'm porting <code>order.upper_lower</code> and it seems that we have two different orders on <code>UpperSet</code>: one comes from <code>SetLike</code> (subset order) and one defined in the file (reversed subset).</p>",
        "id": 325076457,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675233054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Are there any good reasons to have the reversed order other than <code>Ici</code> becomes a <code>sup_hom</code>?</p>",
        "id": 325076539,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675233107
    },
    {
        "content": "<p>It makes <code>upper_set</code> and <code>lower_set</code> order-isomorphic (under compl), and mostly it follows the <code>filter</code> convention. There's already a thread about this somewhere.</p>",
        "id": 325076876,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675233270
    },
    {
        "content": "<p>How should we avoid the conflict? Introduce a weaker TC for <code>SetLikeNoOrder</code>?</p>",
        "id": 325076985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675233353
    },
    {
        "content": "<p>I tried removing the order derived from <code>set_like</code> but it didn't turn out great, so probably we just want to get rid of the <code>set_like</code> instance <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 325077038,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675233367
    },
    {
        "content": "<p>For now, I'm just overriding some simp priorities. I don't want to change much while porting (done once, don't want to repeat).</p>",
        "id": 325077174,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675233467
    },
    {
        "content": "<p>I think, we should postpone any refactor till after the port.</p>",
        "id": 325077654,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675233719
    },
    {
        "content": "<p>I agree that this refactor should wait. But I also think that <code>upper_set</code> and <code>lower_set</code> should be order-<em>anti</em>-isomorphic.</p>",
        "id": 325078954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675234477
    },
    {
        "content": "<p>Do you want to change the order on <code>filter</code>, then?</p>",
        "id": 325096084,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675241251
    },
    {
        "content": "<p>No. I want to change the order on <code>upper_set</code></p>",
        "id": 325096347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675241341
    },
    {
        "content": "<p>Even though the set of closed subsets of a topological space bijects with the set of open subsets, I don't think that's a good reason for arguing that the subset ordering on one of them should be artificially reversed to make the bijection order-preserving, when it's clearly order-reversing</p>",
        "id": 325097954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675241896
    },
    {
        "content": "<p>Compl is subset-reversing</p>",
        "id": 325098046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675241941
    },
    {
        "content": "<p>Is the problem that we don't have a typeclass for order-reversing maps so we want to shoehorn everything into being order-preserving?</p>",
        "id": 325098323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675242031
    },
    {
        "content": "<p>In category theory you can form [C^op, Set] (~ <code>LowerSet</code>) and [C, Set] (~ <code>UpperSet</code>) and of course you could also ^op these if you like.<br>\nThere is some use to [C, Set]^op (it's the limit-completion of C) but I would say it is still less common than [C, Set].</p>",
        "id": 325099007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675242288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/order.20on.20.60UpperSet.60s/near/325096347\">said</a>:</p>\n<blockquote>\n<p>No. I want to change the order on <code>upper_set</code></p>\n</blockquote>\n<p>But filters <em>are</em> upper sets.</p>",
        "id": 325099314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675242375
    },
    {
        "content": "<p>Sure, but there is an API boundary in between. Where we decide to think of a \"big as a set\" filter as a small element.</p>",
        "id": 325099464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675242434
    },
    {
        "content": "<p>Specifically, a filter on X is some kind of idealized \"part\" of X that we identify by keeping track of what sets of X it's contained in. And a bigger part is contained in fewer sets, hence the order is reversed.</p>",
        "id": 325101235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675243063
    },
    {
        "content": "<p>Or, to beat a dead horse: filters are not <code>SetLike</code> for a good reason, but upper sets are <code>SetLike</code>, also for a good reason.</p>",
        "id": 325103399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675243749
    },
    {
        "content": "<p><code>filter X</code> = Pro(<code>set X</code>). Upper sets are one way (&amp; probably the simplest) to represent <code>filter X</code>, but not the only possible way.</p>",
        "id": 325104201,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675243976
    }
]