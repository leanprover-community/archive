[
    {
        "content": "<p>In Lean 3, <code>simp</code> has a nice feature: if you have a <code>simp</code> lemma <code>mylemma</code> and you write <code>simp [←mylemma]</code>, then <code>simp</code> removes <code>mylemma</code> from the <code>simp</code> set. Am I right that <code>simp</code> in Lean 4 doesn't have this feature?</p>",
        "id": 328856031,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676836724
    },
    {
        "content": "<p>It should have this feature, with exactly the same syntax.</p>",
        "id": 328858109,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676838381
    },
    {
        "content": "<p>I'll try to make an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 328869949,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676847507
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">WithTop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Option.some</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">some</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x.bind</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y.map</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">coe_add</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">3000</span> <span class=\"k\">in</span> <span class=\"c1\">-- make it fail faster</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp.rewrite</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">coe_add</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 328870678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676848189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 328870737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676848225
    },
    {
        "content": "<p>Is the syntax <code>-</code> instead of <code>←</code>?</p>",
        "id": 328870796,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676848284
    },
    {
        "content": "<p>Works: <code>simp [-coe_add, (coe_add _ _).symm, h]</code>, doesn't work: <code>simp [-coe_add, ← coe_add, h]</code> and <code>simp [← coe_add, h]</code></p>",
        "id": 328870911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676848413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> The <code>simp [← coe_add]</code> syntax worked in Lean 3. And Gabriel says that it should work in Lean 4.</p>",
        "id": 328870981,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676848463
    },
    {
        "content": "<p>Interesting...as someone who's only worked with lean 4 and not lean 3, all I can speak to is that I've seen <code>-</code> be used to remove theorems from simp sets, and <code>←</code> be used to use the lemma backward.</p>\n<p>No idea what's going on/should be going on otherwise...but also, even assuming only those usages, not sure why example 2 isn't working, then. Maybe it doesn't play nicely with <code>-</code> yet?</p>",
        "id": 328871896,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676849413
    },
    {
        "content": "<p>Oh wait, looks like the following works:</p>\n<p><code>simp [-coe_add, ← coe_add _ _, h]</code></p>\n<p>Also works:</p>\n<p><code>simp [-coe_add, ← coe_add _,  h]</code></p>",
        "id": 328871910,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676849430
    },
    {
        "content": "<p>Aside, but I'm not totally sure why it needs the <code>_</code> tbh...I've noticed that sometimes theorems just need a <code>_</code> or two when used like this, and I can't really anticipate when.</p>",
        "id": 328872676,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676850258
    },
    {
        "content": "<p>Hang on a second. This is strange:</p>\n<ul>\n<li>works: <code>simp [-coe_add, ← (coe_add), h]</code></li>\n<li>doesn't: <code>simp [-coe_add, ← coe_add, h]</code></li>\n</ul>\n<p>What's going on here?</p>",
        "id": 328872703,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676850304
    },
    {
        "content": "<p>My at-a-glance guess is that <code>ident</code>s are treated differently by <code>resolveSimpIdTheorem?</code> in <code>elabSimpArgs</code>, leading to an <code>.ext</code> result, but <code>elabSimpArgs</code> doesn't seem to take care of <code>inv</code> (the indicator for <code>←</code> syntax) at all for <code>.ext</code> results.</p>\n<p>Note that there's no problem if <code>@[simp]</code> is removed from <code>coe_add</code>: <code>simp [← coe_add, h]</code> works in that case (because it's no longer a simp extension/<code>.ext</code> result). But again, this is just a guess.</p>\n<p>Actually I'm not sure this is the full story. The trace <em>does</em> show backwards rewriting; so maybe it's about how <code>inv</code> is handled in this case rather than it not being handled at all, or about erasure not working. I'll leave it to those who already understand <code>simp</code>.</p>",
        "id": 328873998,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676851529
    },
    {
        "content": "<p>Hmm, what should be done in a case like this? I’m a little reluctant to open an issue on the lean4 repo given that the lean devs are already overwhelmed, but I’m pretty sure it is a <code>simp</code> bug…</p>",
        "id": 329283564,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677010760
    },
    {
        "content": "<p>I've also noticed this: <code>-foo</code> erases something from a discrimination tree, and I don't think that re-inserting it removes the erasure, so it's still marked as erased. That's why <code>← (coe_add)</code> and <code>← coe_add _</code> both work, because now you're adding a new expression to the discrimination tree, instead of saying that the erased term has to be reinserted (which it doesn't).<br>\nThe same happens with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>The second <code>attribute</code> command doesn't undo the first one: <code>foo</code> is still (locally) marked as erased (this is mentioned in <a href=\"https://github.com/leanprover/lean4/pull/2115\">lean4#2115</a>)</p>",
        "id": 329289638,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677012843
    },
    {
        "content": "<p>Interestingly <code>simp [-thm, thm]</code> doesn't seem to suffer from that issue, and instead works as expected! Check out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">ax</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>It's specifically a problem with <code>←</code> used with <code>-</code> here. I don't think <code>←</code> is taken into account properly when processing simp-extension idents.</p>",
        "id": 329291766,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677013544
    },
    {
        "content": "<p>(Imo <code>←</code> used on a simp extension should both erase it and insert the backwards version—that is, we should only need <code>simp [← coe_add]</code> instead of <code>simp [-coe_add, ←coe_add]</code>, since no one is going to want to have both <code>coe_add</code> and its backwards version at once, I imagine. But that's technically a different issue.)</p>",
        "id": 329292458,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677013789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <code>simp [-coe_add, ← coe_add, h]</code> enters an infinite cycle.</p>",
        "id": 329311648,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677021509
    },
    {
        "content": "<p>It uses both <code>coe_add</code> and <code>(coe_add _ _).symm</code>.</p>",
        "id": 329311686,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677021535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 329311722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1677021550
    },
    {
        "content": "<p>(Btw, <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, the typical reason the thing you’re talking about happens (afaik) is that <code>foo</code> is not actually erased from the discrimination tree per se—rather, it’s added to a list of <code>erased</code> things which are only ignored after being matched! The problem is then that the given attribute’s <code>add</code> functionality doesn’t also make sure to erase the added thing from <code>erased</code> (if that makes sense). This is all to say that problems like that should be a simple fix. It might be different for instances though, idk. In any case, this problem is a bit different)</p>",
        "id": 329312845,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677022200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> I came to roughly the same conclusion indeed.<br>\nAlthough maybe for <code>simp</code> something different happens if <code>simp [-coe_add, ← coe_add, h]</code> is an infinite cycle..</p>",
        "id": 329321254,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677026613
    }
]