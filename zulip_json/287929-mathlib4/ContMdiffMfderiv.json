[
    {
        "content": "<p>I tried to work a bit on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5496\">#5496</a>. I fixed some issues with Lean 4 being less smart than Lean 3 to understand what <code>univ</code> means. But a big issue is a <code>simp</code> that does not work. The simp line in Lean 3 is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/geometry/manifold/cont_mdiff_mfderiv.lean#L335\">this one</a>. This is mathlib's manifold library so it actually uses more than 30 lemmas. The work I did was to expaned the Lean 3 version to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ext_chart_at</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_homeomorph.extend</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tangent_bundle_model_space_chart_at</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">model_with_corners_prod_to_local_equiv</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">model_with_corners_self_local_equiv</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.coe_trans</span> <span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.prod_coe</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">model_with_corners.to_local_equiv_coe</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.refl_coe</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id.def</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.to_local_equiv_apply</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.coe_trans_symm</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.to_local_equiv_symm_apply</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.prod_symm</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.refl_symm</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.prod_coe</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">model_with_corners.to_local_equiv_coe_symm</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.trans_target</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.prod_target</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">model_with_corners.target_eq</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.refl_target</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.to_local_equiv_target</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">preimage_univ</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inter_univ</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.trans_source</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">equiv.to_local_equiv_source</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.prod_source</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">model_with_corners.source_eq</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.refl_source</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">univ_prod_univ</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">local_equiv.refl_coe</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id.def</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">preimage_univ</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inter_univ</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">preimage_univ</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inter_univ</span><span class=\"o\">],</span>\n     <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>and translate it to Lean 4 <a href=\"https://github.com/leanprover-community/mathlib4/blob/8acbe998773bf2823586f0a0dff9934ec999b671/Mathlib/Geometry/Manifold/ContMDiffMFDeriv.lean#L320-L355\">here</a>. The next task is to find which simp call isn't doing its job. The first one that does nothing is <code>simp only [LocalEquiv.prod_symm]</code>, but I think the issue happens before.</p>",
        "id": 370927612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688073391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 370927629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688073401
    },
    {
        "content": "<p>I need to go to bed now, so I don't have time to compare the tactic states between Lean 3 and Lean 4 (which is hard because Lean 3 doesn't have goal diff and the dot notation do not behave the same in info view in both versions).</p>",
        "id": 370927851,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688073468
    },
    {
        "content": "<p>Simps about <code>sigma</code> will become better when I change the definition of <code>total_space</code> but I don't know what to do about <code>simp</code>s for <code>ModelProd</code></p>",
        "id": 370939803,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688077915
    },
    {
        "content": "<p>When I'm doing this kind of work I introduce unexpanders to make dot notation behave the same in Lean 3 and Lean 4. See for example <a href=\"https://github.com/leanprover-community/mathlib4/pull/3592\">#3592</a></p>",
        "id": 370953649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688084280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  do you think it's feasible to also make <code>ModelProd</code> a separate structure (just like Yuri is doing for <code>Bundle.TotalSpace</code>). That would disallow defeq \"abuse\" of these type synonyms, and therefore help <code>simp</code>.</p>",
        "id": 371994839,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688388824
    },
    {
        "content": "<p>Together with Patrick I minimized the <code>simp</code> issue to the following MWE.<br>\nIn Lean 4, <code>simp</code> does nothing in the following examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ModelProd</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">modelProd_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ModelProd</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ModelProd</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod_lemma</span><span class=\"o\">]</span> <span class=\"c1\">-- doesn't rewrite anything</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">modelProd_lemma</span><span class=\"o\">]</span> <span class=\"c1\">-- doesn't rewrite anything</span>\n</code></pre></div>\n<p>In Lean 3, <code>simp</code> would rewrite in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">model_prod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">model_prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod_lemma</span><span class=\"o\">],</span> <span class=\"c1\">-- rewrites with `prod_lemma`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 371995374,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688388914
    },
    {
        "content": "<p>This looks very reasonable.</p>",
        "id": 371996450,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688389104
    },
    {
        "content": "<p>When do we want/need to abuse defeq for <code>model_prod</code>?</p>",
        "id": 372010668,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688391631
    },
    {
        "content": "<p>(and <code>model_pi</code>)</p>",
        "id": 372010783,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688391646
    },
    {
        "content": "<p>I guess, the only way to find out is to turn it into a separate structure. Then we'll need a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LocalEquiv.prod#doc\">docs#LocalEquiv.prod</a> for <code>ModelProd</code> on one side.</p>",
        "id": 372011039,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688391702
    },
    {
        "content": "<p>(at least)</p>",
        "id": 372011501,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688391787
    },
    {
        "content": "<p>Should we do this directly in mathlib4, or do it in mathlib3, then forward-port?</p>",
        "id": 372011916,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688391857
    },
    {
        "content": "<p>I'm not necessarily saying that we want to abuse the defeq, but our mathlib3 proofs are doing it</p>\n<p>The fact that we need <a href=\"https://github.com/leanprover-community/mathlib4/pull/5496/files#diff-52e0e8e7349f61c4c997e5bfd889aebd1d9b50bb3552f2d553a22408cab027a4R360\"><code>erw [A]</code></a> instead of <code>simp only [A]</code> in one of the current proofs is partially caused by <code>ModelProd</code>. If you want to do this only with <code>simp</code>, you can replace this tactic by this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ModelProd</span><span class=\"o\">,</span> <span class=\"n\">TangentBundle</span><span class=\"o\">,</span> <span class=\"n\">TangentSpace</span><span class=\"o\">,</span> <span class=\"n\">Bundle.TotalSpace</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">LocalEquiv.prod_symm</span><span class=\"o\">,</span> <span class=\"n\">LocalEquiv.prod</span><span class=\"o\">,</span> <span class=\"n\">LocalEquiv.refl_symm</span><span class=\"o\">,</span> <span class=\"n\">LocalEquiv.refl_coe</span><span class=\"o\">,</span>\n      <span class=\"n\">Function.id_def</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">ModelWithCorners.symm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">A</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The <code>Equiv.sigmaEquivProd</code> in the type of hypothesis <code>A</code>is \"really\" <code>totalSpaceEquivModelProd</code>.</p>",
        "id": 372015435,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688392475
    },
    {
        "content": "<p>For the sake of porting sphere eversion, I see no problem doing this directly in Lean 4.</p>",
        "id": 372015954,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688392571
    },
    {
        "content": "<p>Please wait till I forward-port <a href=\"https://github.com/leanprover-community/mathlib/pull/19221\">!3#19221</a> first.</p>",
        "id": 372024016,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688393833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ContMdiffMfderiv/near/371996450\">said</a>:</p>\n<blockquote>\n<p>This looks very reasonable.</p>\n</blockquote>\n<p>Could you please clarify what looks very reasonable? Changing ModelProd or Lean failing to simp?</p>",
        "id": 372035407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688395713
    },
    {
        "content": "<p>Changing ModelProd. Sorry for the ambiguity.</p>",
        "id": 372036755,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1688395959
    },
    {
        "content": "<p>Possibly this is a stupid idea but let me say it anyway: what do you think about bundling manifolds?</p>",
        "id": 372038988,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688396362
    },
    {
        "content": "<p>I mean using a bundled structure with a coercion to <code>Type _</code> instead of a <code>Type _</code> with a typeclass.</p>",
        "id": 372039207,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688396398
    },
    {
        "content": "<p>Ignore: the tangent bundle can't be (reudcibly) both coercion of a <code>Manifold</code> to <code>Type _</code> and a <code>Bundle.TotalSpace</code>.</p>",
        "id": 372040225,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688396555
    },
    {
        "content": "<p>I rebased on top of <a href=\"https://github.com/leanprover-community/mathlib4/pull/5720\">#5720</a></p>",
        "id": 372601270,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688565354
    },
    {
        "content": "<p>Please don't push to this branch for a few hours. I'm working on it locally.</p>",
        "id": 372606437,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688566222
    },
    {
        "content": "<p>BTW, this is in fact a leaf file.</p>",
        "id": 372661866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688576738
    },
    {
        "content": "<p>All reverse dependencies only needed a section I moved to <code>MFDeriv</code> while porting.</p>",
        "id": 372661986,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688576760
    },
    {
        "content": "<p>I'm going to try removing <code>@[simp, mfld_simps]</code> from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=extChartAt#doc\">docs#extChartAt</a> for two reasons:</p>\n<ul>\n<li>IMHO, we should build API about new definitions, not <code>simp</code> them out;</li>\n<li>if we talk more about <code>extChartAt</code>, not <code>chartAt</code>, then we hide <code>H</code> from Lean, thus don't need to care about <code>simp</code> not dealing with <code>ModelProd</code> and <code>ModelPi</code>.</li>\n</ul>",
        "id": 373486865,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688823279
    },
    {
        "content": "<p>This was also on my to do list, so I'm happy that you're doing this!</p>",
        "id": 373547301,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688842447
    },
    {
        "content": "<p>Another idea (probably, <code>after-port</code>): it looks like many lemmas about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContMDiffWithinAt#doc\">docs#ContMDiffWithinAt</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MDifferentiableWithinAt#doc\">docs#MDifferentiableWithinAt</a> can be unified if we define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ComposableGermProp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">prop_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">prop</span> <span class=\"n\">id</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n  <span class=\"n\">congr_fun</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">EqOn</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"n\">x</span>\n  <span class=\"n\">congr_set</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">x</span>\n  <span class=\"n\">prop_comp</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span> <span class=\"n\">g</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">MapsTo</span> <span class=\"n\">g</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>then add constructors from <code>ComposableGermProp</code> to <code>StructureGroupoid</code> and <code>StructureGroupoid.LocalInvariantProp</code>.</p>",
        "id": 373716532,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688913056
    },
    {
        "content": "<p>In the meantime, I fixed compile in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5496\">#5496</a> without refactors. Who wants to review it?</p>",
        "id": 374756862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689200611
    }
]