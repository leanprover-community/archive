[
    {
        "content": "<p>Hi, I am trying to do some proofs that require rearranging sums, but I have no idea how to start. Can someone please demonstrate how to prove this for example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.ArithmeticFunction</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span> <span class=\"n\">ArithmeticFunction</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.divisors</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The mathematical idea is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msub><mo>∑</mo><mrow><mi>d</mi><mo>∣</mo><mi>n</mi></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>d</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>d</mi><mo>∣</mo><mi>n</mi></mrow><mi>x</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo><mover><mo><mo>=</mo></mo><mrow><mi>n</mi><mo>=</mo><mi>d</mi><msup><mi>n</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow></mover></mo><msubsup><mo>∑</mo><mrow><mi>d</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msubsup><mo>∑</mo><mrow><msup><mi>n</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><mn>1</mn></mrow><mrow><mo stretchy=\"false\">⌊</mo><mi>x</mi><mi mathvariant=\"normal\">/</mi><mi>d</mi><mo stretchy=\"false\">⌋</mo></mrow></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>d</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⌊</mo><mfrac><mi>x</mi><mi>d</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n = 1}^x \\sum_{d \\mid n} f(d) = \\sum_{d = 1}^x \\sum_{n = 1, d \\mid n}^x f(d) \\stackrel{n = dn&#x27;}{=} \\sum_{d = 1}^x \\sum_{n&#x27; = 1}^{\\lfloor x / d \\rfloor} f(d) = \\sum_{d = 1}^x f(d) \\lfloor \\frac{x}{d} \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.279em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7211em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2464em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">=</span></span></span><span style=\"top:-3.5669em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3445em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0448em;\"><span style=\"top:-2.4068em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">⌊</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mclose mtight\">⌋</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2932em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1493em;vertical-align:-0.345em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8043em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span></p>",
        "id": 400233118,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699062491
    },
    {
        "content": "<p>I found <code>sum_partition</code> which intuitively seems to be what I want, since rearranging sums = repartitioning the sets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><msub><mi>n</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>d</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{(n_i, d_i)\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)}</span></span></span></span> we are considering, but I can't figure out how to use it</p>",
        "id": 400233212,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699062578
    },
    {
        "content": "<p>Another one I need help with is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"n\">j</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400233373,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699062671
    },
    {
        "content": "<p>Thanks in advance</p>",
        "id": 400233384,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699062677
    },
    {
        "content": "<p>Ahh the second one can be done like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"n\">j</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">sum_comm'</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> The rest is proving ⊢ a ∈ Icc 1 x ∧ b ∈ Icc 1 a ↔ a ∈ Icc b x ∧ b ∈ Icc 1 x -/</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">⟩</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_Icc.mp</span> <span class=\"n\">h1</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_Icc.mp</span> <span class=\"n\">h3</span>\n    <span class=\"n\">constructor</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 400236623,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699063884
    },
    {
        "content": "<p>Ahh I proved the first one too.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">n.divisors</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">n.divisors</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_divisors</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mem_filter.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂.left</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">one_le_iff_ne_zero.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">ne_zero_of_dvd_ne_zero</span> <span class=\"n\">h₂.right</span> <span class=\"n\">h₂.left</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Icc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n          <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_dvd</span> <span class=\"n\">h₁.left</span> <span class=\"n\">h₂.left</span><span class=\"o\">)</span> <span class=\"n\">h₁.right</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h₁.left</span><span class=\"o\">,</span> <span class=\"n\">mem_divisors.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁.right</span><span class=\"o\">,</span> <span class=\"n\">one_le_iff_ne_zero.mp</span> <span class=\"o\">(</span><span class=\"n\">mem_Icc.mp</span> <span class=\"n\">h₁.left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_comm'</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Icc_succ_left</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> congr ext is not required, but it needs simp_rw which is slow? -/</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n  <span class=\"n\">ext</span> <span class=\"n\">d</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">Ioc_filter_dvd_card_eq_div</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400238999,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699064993
    },
    {
        "content": "<p>Hope this helps future people who search for \"rearranging sums\" on zulip :)</p>",
        "id": 400239010,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699065002
    },
    {
        "content": "<p>A more useful version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l3</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">n.gcd</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">d</span> <span class=\"k\">in</span> <span class=\"n\">N.divisors</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">n.gcd</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span>\n      <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∈</span> <span class=\"n\">N.divisors</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_divisors</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mem_filter.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_gcd_iff.mp</span> <span class=\"n\">h₂.left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mem_divisors.mpr</span> <span class=\"o\">⟨(</span><span class=\"n\">Nat.dvd_gcd_iff.mp</span> <span class=\"n\">h₂.left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_filter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h₁.left</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">mem_divisors.mpr</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_gcd_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">h₁.right</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_divisors.mp</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">⟩</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.gcd_eq_zero_iff.not.mpr</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">hN</span> <span class=\"n\">h.right</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_comm'</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Icc_succ_left</span><span class=\"o\">]</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> congr ext is not required, but it needs simp_rw which is slow? -/</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n  <span class=\"n\">ext</span> <span class=\"n\">d</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">Ioc_filter_dvd_card_eq_div</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 400240164,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699065905
    }
]