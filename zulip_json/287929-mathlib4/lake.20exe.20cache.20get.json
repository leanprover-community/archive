[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>lake exe cache get\n<span class=\"go\">Attempting to download 12 file(s)</span>\n<span class=\"go\">Decompressing 1115 file(s)</span>\n<span class=\"go\">uncaught exception:</span>\n<span class=\"go\">gzip: stdin: unexpected end of file</span>\n<span class=\"go\">tar: Unexpected EOF in archive</span>\n<span class=\"go\">tar: Unexpected EOF in archive</span>\n<span class=\"go\">tar: Error is not recoverable: exiting now</span>\n</code></pre></div>",
        "id": 325232090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675274914
    },
    {
        "content": "<p>Aha, I guess I should use <code>get!</code>?</p>",
        "id": 325232279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675274957
    },
    {
        "content": "<p>But is there also an option that Lake tells me the hash of the corrupt file, so that I can remove it manually?</p>",
        "id": 325232347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675274979
    },
    {
        "content": "<p>This sort of thing happens a lot, since it seems that lake is not protected against multiple concurrent executions, which happens commonly when I run <code>lake build</code> but the lean 4 server is doing a \"refresh file dependencies\" action concurrently (which afaik you can't cancel)</p>",
        "id": 325234063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675275423
    },
    {
        "content": "<p>lake stamps over its own files, occasionally fails and sometimes produces corrupted files</p>",
        "id": 325234156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675275452
    },
    {
        "content": "<p>If we could detect the corrupted files in advance, <code>lake exe cache get</code> could just silently treat them as missing</p>",
        "id": 325234508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675275549
    },
    {
        "content": "<p>Do the corrupted files have any easily detectable pattern? (Are they 0 byte files?)</p>",
        "id": 325234829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675275641
    },
    {
        "content": "<p>In my case not. I think it was a partial download.</p>",
        "id": 325236139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675275994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/325234063\">said</a>:</p>\n<blockquote>\n<p>This sort of thing happens a lot, since it seems that lake is not protected against multiple concurrent executions, which happens commonly when I run <code>lake build</code> but the lean 4 server is doing a \"refresh file dependencies\" action concurrently (which afaik you can't cancel)</p>\n</blockquote>\n<p>All of this is true, but it has nothing to do with <code>lake exe cache</code> which is a completely different beast.  <code>lake exe cache</code> only runs when you manually start it (by design, we want mathlib4 to work offline).  The corrupted archive error is IMO most likely due to 1) pressing ctrl-c while <code>lake exe cache get</code> is running, 2) running <code>lake exe cache get</code> in two different checkouts at the same time, 3) a bad internet connection and interrupted downloads.</p>",
        "id": 325244597,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675278233
    },
    {
        "content": "<p>Hmm, do I read the code right in that the exit code and stderr of <code>curl</code> are silently discarded in <code>downloadFiles</code>? That doesn't seem prudent.</p>",
        "id": 325259911,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675282779
    },
    {
        "content": "<p>The exit code will typically be nonzero, I believe, since we expect 404s.</p>",
        "id": 325260023,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675282808
    },
    {
        "content": "<p><a href=\"https://daniel.haxx.se/blog/2019/07/22/curl-goez-parallel/\">https://daniel.haxx.se/blog/2019/07/22/curl-goez-parallel/</a></p>\n<blockquote>\n<p>When doing many simultaneous transfers, how do you figure out how they all did individually, like from your script? That’s still to be figured out and implemented.</p>\n</blockquote>\n<p>Heh.</p>",
        "id": 325260699,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675283029
    },
    {
        "content": "<p>Apparently <code>--write-out</code> can be used for passing on the results <a href=\"https://stackoverflow.com/a/71967814\">https://stackoverflow.com/a/71967814</a>. Parsing that from Lean doesn't sound too bad, at least compared to waiting for libcurl integration.</p>",
        "id": 325262116,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675283472
    },
    {
        "content": "<blockquote>\n<p>NOTE: The %-symbol is a special symbol in the win32-environment, where all occurrences of % must be doubled  when  using  this   option.</p>\n</blockquote>",
        "id": 325262400,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675283576
    },
    {
        "content": "<p>Hopefully not relevant in the case of <code>IO.Process</code> though...?</p>",
        "id": 325262677,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675283689
    },
    {
        "content": "<p>It says \"win32\", not \"cmd.exe\".  But hopefully that's just a simplification.</p>",
        "id": 325263101,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675283838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/321980059\">said</a>:</p>\n<blockquote>\n<p>Note: of course std4/aesop/etc. versions also need to match exactly.  Deleting any <code>require std</code> etc. in your lakefile is a good start, followed by <code>lake update</code>.</p>\n</blockquote>\n<p>My experience so far has been to avoid <code>lake update</code> like the plague. For instance, mathlib4's lakefile requires <code>std4@\"main\"</code>, and running <code>lake update</code> will automatically bump that to a version that may be incompatible. When depending on mathlib4 I have resorted to copying hashes from its <code>lake-manifest.json</code> into my <code>lake-manifest.json</code>. Pinning a Git tag is one potential fix, but I think long-term the lack of proper package versioning with semver will be a serious hurdle to using many Lean packages. Am I doing something wrong?</p>",
        "id": 325309118,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675307754
    },
    {
        "content": "<blockquote>\n<p>and running lake update will automatically bump that to a version that may be incompatible.</p>\n</blockquote>\n<p>This won't happen.  Unless you have a <code>require std</code> in your project.</p>",
        "id": 325313155,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675310694
    },
    {
        "content": "<p>Note that it used to be like that but I fixed that bug sometime last year.</p>",
        "id": 325313221,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675310751
    },
    {
        "content": "<p>Aha, I did have <code>require std</code> - thanks! While semver would be able to detect conflicting versions, I suppose removing that works as a stopgap.</p>",
        "id": 325315382,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675312674
    },
    {
        "content": "<p>I have a <a href=\"https://github.com/uofsc-spring-2023-schc-411-h01/homework03\">package</a> where I am not sure if I am seeing the expected behavior/making a mistake.</p>\n<p>From clean copies of the repository, I run <code>lake exe cache get</code> and then <code>lake build</code> vs running only <code>lake build</code>. They both take the same amount of time to complete. Both spend 99% of time building (no compiling) files from the dependencies (std/mathlib/qq). </p>\n<p>I can see that <code>lake exe cache get</code> does get the cache for the dependencies. </p>\n<p>Am I doing this right? If so, is this expected behavior? Thanks.</p>",
        "id": 325370635,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675336674
    },
    {
        "content": "<p>I am not on my PC but mathlib4 uses <code>leanprover/lean4:nightly-2023-01-29</code></p>",
        "id": 325374135,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675337646
    },
    {
        "content": "<p>Your lean-toolchain is set for an older version</p>",
        "id": 325374342,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675337726
    },
    {
        "content": "<p>This is the problem. I thought 1-16 would be recent enough. Thank <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span></p>",
        "id": 325375009,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675337985
    },
    {
        "content": "<blockquote>\n<p>recent enough</p>\n</blockquote>\n<p>To be clear, \"recent enough\" is not sufficient.  It needs to be <em>exactly the same version</em> as mathlib.</p>",
        "id": 325456321,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675359285
    },
    {
        "content": "<p>I am still not managing to make <code>lake exe cache get</code> work consistently <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 325526123,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675384970
    },
    {
        "content": "<p>I need to run the command thrice before I stop getting <code>uncaught exception: lake-packages/std/build/lib/some_file: Can't unlink already-existing object</code></p>",
        "id": 325526205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675385017
    },
    {
        "content": "<p>And the syntax for <code>lake exe cache get some_file</code> still escapes me (probably because Windows paths).</p>",
        "id": 325526297,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675385057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> If I run <code>lake exe cache get</code>, then it spends a bit of time building and downloading files, and after that it spends ~8 seconds decompressing ~1200 files. All of this is fine. But if I run <code>lake exe cache get</code> again, then it skips the first bit (of course) but again spends ~8 seconds decompressing ~1200 files. Is it possible to speed that up by calculating hashes of <code>olean</code>s that are already present?</p>",
        "id": 325537360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675391927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> it's best to just close VS Code altogether before calling <code>cache</code></p>",
        "id": 325578358,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675415579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> the cache is compressed so we can't compute the hashes of the binary oleans that easily. We would have to decompress them in order to do that. But that's already the current cost</p>",
        "id": 325579016,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675415787
    },
    {
        "content": "<p>hmm, would it make sense to have some index? Or to make the filenames twice as long?</p>",
        "id": 325579171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675415841
    },
    {
        "content": "<p>The tarbals contain more than just the olean. It contains ilean, trace, c and c.trace files, all related to the same Lean file</p>",
        "id": 325579429,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675415935
    },
    {
        "content": "<p>It's safer to overwrite them all</p>",
        "id": 325579495,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675415960
    },
    {
        "content": "<p>I like living on the edge.</p>",
        "id": 325579527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675415972
    },
    {
        "content": "<p>Using the hashes of the olean files puts us in a chicken-egg problem, because we don't know their hashes when downloading. We only know the hashes of the sources</p>",
        "id": 325580132,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675416180
    },
    {
        "content": "<p>And we use exact matches to build the correct URLs</p>",
        "id": 325580307,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675416233
    },
    {
        "content": "<p>And then computing the hashes of 1k+ binary files wouldn't be that fast either. That's a considerable amount of IO overhead</p>",
        "id": 325580645,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675416333
    },
    {
        "content": "<p>And the index files would have to be hosted and downloaded separately to avoid weird race conditions from parallel <code>put</code>s. That would double up the number of files <code>curl</code> has to deal with</p>",
        "id": 325581000,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675416450
    },
    {
        "content": "<p>Idk... It sounds like more trouble with a small benefit</p>",
        "id": 325581211,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675416511
    },
    {
        "content": "<p>Decompressing is the fastest part. Downloading is the slow part and we already avoid the download of repeated files (unless you <code>get!</code>)</p>",
        "id": 325581360,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675416575
    },
    {
        "content": "<p>Why not eagerly decompress them into a directory named by the source hash? That would allow for the hardlinking optimization discussed above.</p>",
        "id": 325582930,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675417026
    },
    {
        "content": "<p>That would double the space consumed by olean files in the FS. I'm not totally convinced that trade-off is sane for the sake of 8~10 seconds</p>",
        "id": 325584204,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675417434
    },
    {
        "content": "<p>I, particularly, use SSD and space is something that has become more expensive to me</p>",
        "id": 325584511,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675417534
    },
    {
        "content": "<p>And that wouldn't eliminate the need to compute hashes of 2 olean files per Lean source file just to know whether we should overwrite it or not</p>",
        "id": 325585031,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675417692
    },
    {
        "content": "<p>The whole point of hardlinking would be to <em>reduce</em> space overhead, especially since there's no need to keep the tarball around after that</p>",
        "id": 325585643,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675417888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/325585031\">said</a>:</p>\n<blockquote>\n<p>And that wouldn't eliminate the need to compute hashes of 2 olean files per Lean source file just to know whether we should overwrite it or not</p>\n</blockquote>\n<p>No need for hashing the contents if the source hash is encoded in the directory name</p>",
        "id": 325585739,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675417922
    },
    {
        "content": "<p>Then it wouldn't double the total space but there would still be a considerable increase in space consumed because the tarballs are compressed with maximum compression rate.</p>",
        "id": 325586777,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675418259
    },
    {
        "content": "<p>Maybe it would double the space of the caches</p>",
        "id": 325587101,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675418354
    },
    {
        "content": "<p>And remember, the tarballs contain 5 files: olean, iliean, trace, c and c.trace. The mechanics to keep all of this consistent aren't simple and I doubt it would pay off the effort needed to make it work (plus the space cost). Yes, you can avoid computing the hashes of the cached files by persisting it somewhere, in a directory name or in a text file, but there's still the hashing of the target files (which we are trying to figure out whether we should overwrite or not).</p>\n<p><code>tar</code> already does the efficient work of keeping track of the folder structure in order to extract things to the correct places</p>",
        "id": 325589228,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675419010
    },
    {
        "content": "<p>Also worth noting that hard-linking is likely going to confuse windows users, assuming it's possible at all</p>",
        "id": 325589390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675419067
    },
    {
        "content": "<p>I would encourage experimentation with a new <code>get-</code> command if someone is feeling inclined. But I wouldn't be surprised if after all the work it would still take 2~3 seconds instead of 8~10 (assuming you accept the space cost)</p>",
        "id": 325593375,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675420360
    },
    {
        "content": "<p>The algorithm would go like this:</p>\n<ol>\n<li>Download content like <code>get</code> does</li>\n<li>Extract files to a <code>raw</code> folder inside the cache folder</li>\n<li>For each decompressed file in each tarball, compute its hash and store it in an index file (if that file wasn't already computed during <code>put</code>)</li>\n<li>Delete downloaded tarballs</li>\n<li>For each Lean source file, compute the hashes of the respective olean, ilean, trace, c and c.trace files</li>\n<li>Overwrite each separately iff their hashes don't match with the precomputed ones</li>\n</ol>",
        "id": 325597264,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675421553
    },
    {
        "content": "<p>Ah, alternatively, there's no need to compute hashes. You can just compare their respective byte arrays. But keep in mind that core doesn't have a fast way to compare byte arrays yet</p>",
        "id": 325598092,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675421831
    },
    {
        "content": "<p>I really don't understand what we are defending here against, <code>tar</code> itself corrupting the output?</p>\n<ol>\n<li>download <code>$hash.tar.gz</code> (as before) if <code>$hash/</code> does not exist or <code>get!</code> was used</li>\n<li>unpack into <code>$hash/</code></li>\n<li>delete archive</li>\n<li>copy <code>$hash/</code> contents into local build directory using whatever is the cheapest method on the file system</li>\n</ol>",
        "id": 325604789,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675423935
    },
    {
        "content": "<p>That avoids decompression but doesn't avoid unnecessary overwrites. It's a simpler solution but not the one I had in mind</p>",
        "id": 325605808,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675424227
    },
    {
        "content": "<p>Yes, I just realized that you were probably thinking about how to elide step 4. I would want to measure first though if there is any need for that.</p>",
        "id": 325606026,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675424287
    },
    {
        "content": "<p>AFAIK hardlinks work fine on NTFS, by the way (symlinks are the problematic one). So step 4 might be completely negligible on all relevant platforms as long as your cache and project directory are on the same filesystem.</p>",
        "id": 325606664,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675424478
    },
    {
        "content": "<p>Is there an <code>IO.copyBinFile</code>? (probably not)</p>",
        "id": 325607007,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675424569
    },
    {
        "content": "<p>I'm trying to foresee issues related to the coexistence of <code>get</code> and <code>get-</code></p>",
        "id": 325607644,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675424748
    },
    {
        "content": "<p>Because of the <code>unpack</code> command. How should it behave?</p>",
        "id": 325608936,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675425084
    },
    {
        "content": "<p>Having two models at the same time does sound like a headache, I would avoid that</p>",
        "id": 325609387,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675425210
    },
    {
        "content": "<p>Right but we can't assume everyone wants the extra space consumption</p>",
        "id": 325609912,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675425352
    },
    {
        "content": "<blockquote>\n<p>hardlinks work fine on NTFS</p>\n</blockquote>\n<p>Hardlinks require administrator permissions, which is probably an issue for classroom use. They also don't work between drives, which I could also see being a problem</p>",
        "id": 325695707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675448110
    },
    {
        "content": "<p>An easy way to speed up unpacking would be to do it in parallel.  I believe we're mostly CPU-bound with gzip.</p>",
        "id": 325700940,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675449753
    },
    {
        "content": "<p>why can't we download an index?</p>",
        "id": 325701070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675449799
    },
    {
        "content": "<p><em>An</em> index would be troublesome to be maintained consistent, with parallel <code>put</code> operations being performed. That would be highly subject to race conditions</p>",
        "id": 325701883,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675450059
    },
    {
        "content": "<p>I see. Because we don't have a sqlite database in the cloud.</p>",
        "id": 325702100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675450139
    },
    {
        "content": "<p>But we could keep a local index. If you don't know the hashes of the contents of <code>$hash.tar.gz</code> then you just unzip it, because you haven't seen it before. But after that, you store the hashes of its contents in <code>index.sqlite</code>.</p>",
        "id": 325702267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675450195
    },
    {
        "content": "<p>But I guess by now I'm seriously overcomplicating things.</p>",
        "id": 325702334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675450209
    },
    {
        "content": "<p>The gain in speed is marginal compared to the effort. <code>tar</code> with <code>gzip</code> is pretty fast already. And pretty space-efficient too</p>",
        "id": 325702613,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675450322
    },
    {
        "content": "<p>Yeah, we can worry about it when it becomes a real problem.</p>",
        "id": 325703123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675450510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/325700940\">said</a>:</p>\n<blockquote>\n<p>An easy way to speed up unpacking would be to do it in parallel.  I believe we're mostly CPU-bound with gzip.</p>\n</blockquote>\n<p>That's a nice one btw</p>",
        "id": 325704630,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675451001
    },
    {
        "content": "<p>Hi everyone! We've decided to migrate <code>cache</code> to <code>std4</code>. See the discussion in <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4/topic/cache.20adoption.20by.20std4\">#std4 &gt; cache adoption by std4</a>.<br>\nFrom a practical standpoint, the user experience won't change.<br>\nThe only thing I'd ask everyone is to nuke the <code>$HOME/.cache/mathlib</code> folder because that will no longer be the target directory of cache files. <code>$HOME/.cache/lean4_cache</code> will be the new target after this merge.</p>\n<p>If you want to see the code changes, please check <a href=\"https://github.com/leanprover-community/mathlib4/pull/2509\">!4#2509</a></p>",
        "id": 338222568,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677460054
    },
    {
        "content": "<p>Note: that's not the migration patch. It's a preparation step before I can factor out the code and leave only the configuration JSON file</p>",
        "id": 338223314,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677460696
    },
    {
        "content": "<p>Maybe add a warning when the directory is detected?</p>",
        "id": 338231466,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1677467621
    },
    {
        "content": "<p>At what point do I nuke this folder?</p>",
        "id": 338265751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677486944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/338265751\">said</a>:</p>\n<blockquote>\n<p>At what point do I nuke this folder?</p>\n</blockquote>\n<p>After the merge, if you're not planning on visiting older branches</p>",
        "id": 338298425,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677496385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/338231466\">said</a>:</p>\n<blockquote>\n<p>Maybe add a warning when the directory is detected?</p>\n</blockquote>\n<p>I don't think it's worth adding such dependency in the code</p>",
        "id": 338298542,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677496423
    },
    {
        "content": "<p>Presumably even if you are visiting older branches, merging mathlib4 master will make the old folder unnecessary again?</p>",
        "id": 338300025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677496900
    },
    {
        "content": "<p>An alternative solution is to rename the folder so you don't lose the cache files that you have already downloaded</p>",
        "id": 338303196,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677497784
    },
    {
        "content": "<p>What goes wrong if you don't delete the folder?</p>",
        "id": 338308157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677499301
    },
    {
        "content": "<p>Nothing, just some memory waste</p>",
        "id": 338313688,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677500939
    },
    {
        "content": "<p>Then why would you rename the folder instead of just leaving it alone?</p>",
        "id": 338313924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677501009
    },
    {
        "content": "<p>Hmm, let me explain. The target folder of cache files will change. If nothing is done, there will be no error, but the FS will have a folder full of unused files. If you rename the old cache folder to the new one, it will reuse the downloaded olean files</p>",
        "id": 338314390,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677501171
    },
    {
        "content": "<p>But this is all after the merge is done</p>",
        "id": 338314486,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677501200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/338298425\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/338265751\">said</a>:</p>\n<blockquote>\n<p>At what point do I nuke this folder?</p>\n</blockquote>\n<p>After the merge, if you're not planning on visiting older branches</p>\n</blockquote>\n<p>How do I know when \"the merge\" has happened? (I'm clueless as to which merge we're talking about -- I have no idea about how the infrastructure is set up)</p>",
        "id": 338333734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677506352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> sorry I missed your question for some reason. I mean this PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2509\">!4#2509</a><br>\nI will signal here again once it's merged so everyone will have a higher chance of seeing it</p>",
        "id": 338439033,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677528326
    },
    {
        "content": "<p>Hello, today I tried to start a lean4 project with mathlib using <code>lake new &lt;project name&gt; math</code>. After running <code>lake update</code>, I ran <code>lake exe cache get</code>. </p>\n<p>I got the following error: <code>uncaught exception: ./build/lib/Mathlib/Data/Sym/Sym2.olean: truncated gzip input</code></p>",
        "id": 339986799,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678144825
    },
    {
        "content": "<p>this was an intel mac machine</p>",
        "id": 339987005,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678144942
    },
    {
        "content": "<p>Try <code>lake exe cache get!</code>. I think you got a corrupted file</p>",
        "id": 339987355,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678145146
    },
    {
        "content": "<p>That worked. Thanks!</p>",
        "id": 339988621,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678145808
    },
    {
        "content": "<p><code>cache</code> should now actually tell you what went wrong with a download instead of leading to a <code>gzip</code> error. Please do post the error messages here so we get a feeling for what goes wrong in the wild.</p>",
        "id": 340798007,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678439122
    },
    {
        "content": "<p>For the sake of just jotting down errors, I just got two of them running <code>lake exe cache get!</code> in two different repos simultaneously (one dependent on current mathlib4, one 1-2 days old version of mathlib4 itself):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">1737</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">me</span><span class=\"bp\">/.</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">curl.cfg</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">1344</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">1688</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span>\n<span class=\"n\">gzip</span><span class=\"o\">:</span> <span class=\"n\">stdin</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">file</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Unexpected</span> <span class=\"n\">EOF</span> <span class=\"k\">in</span> <span class=\"n\">archive</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Unexpected</span> <span class=\"n\">EOF</span> <span class=\"k\">in</span> <span class=\"n\">archive</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">recoverable</span><span class=\"o\">:</span> <span class=\"n\">exiting</span> <span class=\"n\">now</span>\n</code></pre></div>\n<p>However, just running <code>lake exe cache get!</code> in both repos again fixed everything <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> and I can't reproduce it now. Probably a corrupted cache file, which wouldn't be surprising if you run two processes simultaneously.</p>",
        "id": 342021462,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1678878147
    },
    {
        "content": "<p>Cache fails for me: after <code>lake exe cache get</code>, <code>lake build</code> fails with the following errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.WLOG</span>\n<span class=\"n\">Building</span> <span class=\"n\">Aesop.Tree</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.SplitIfs</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/lib:/nix/store/zdx4ykiq8ijfmzxzlrrcw3zswl383wfc-pipewire-0.3.60-jack/lib:./build/lib /home/urkud/.elan/toolchains/leanprover--lean4---nightly-2023-03-09/bin/lean -DwarningAsError=true -Dpp.unicode.fun=true ./././Mathlib/Tactic/WLOG.lean -R ././. -o ./build/lib/Mathlib/Tactic/WLOG.olean -i ./build/lib/Mathlib/Tactic/WLOG.ilean -c ./build/ir/Mathlib/Tactic/WLOG.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/bin/lean` exited with code 139</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/lib:/nix/store/zdx4ykiq8ijfmzxzlrrcw3zswl383wfc-pipewire-0.3.60-jack/lib:./lake-packages/aesop/build/lib /home/urkud/.elan/toolchains/leanprover--lean4---nightly-2023-03-09/bin/lean ./lake-packages/aesop/././Aesop/Tree.lean -R ./lake-packages/aesop/./. -o ./lake-packages/aesop/build/lib/Aesop/Tree.olean -i ./lake-packages/aesop/build/lib/Aesop/Tree.ilean -c ./lake-packages/aesop/build/ir/Aesop/Tree.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/bin/lean` exited with code 139</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/lib:/nix/store/zdx4ykiq8ijfmzxzlrrcw3zswl383wfc-pipewire-0.3.60-jack/lib:./build/lib /home/urkud/.elan/toolchains/leanprover--lean4---nightly-2023-03-09/bin/lean -DwarningAsError=true -Dpp.unicode.fun=true ./././Mathlib/Tactic/SplitIfs.lean -R ././. -o ./build/lib/Mathlib/Tactic/SplitIfs.olean -i ./build/lib/Mathlib/Tactic/SplitIfs.ilean -c ./build/ir/Mathlib/Tactic/SplitIfs.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/bin/lean` exited with code 139</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/lib:/nix/store/zdx4ykiq8ijfmzxzlrrcw3zswl383wfc-pipewire-0.3.60-jack/lib:./build/lib /home/urkud/.elan/toolchains/leanprover--lean4---nightly-2023-03-09/bin/lean -DwarningAsError=true -Dpp.unicode.fun=true ./././Mathlib/Tactic/SolveByElim.lean -R ././. -o ./build/lib/Mathlib/Tactic/SolveByElim.olean -i ./build/lib/Mathlib/Tactic/SolveByElim.ilean -c ./build/ir/Mathlib/Tactic/SolveByElim.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/bin/lean` exited with code 139</span>\n</code></pre></div>",
        "id": 342193830,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678927211
    },
    {
        "content": "<p>Do we have our first hash collision? <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 342196870,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678928848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Which branch is this on?</p>",
        "id": 342198927,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678930269
    },
    {
        "content": "<p>port/Topology.Homotopy.Equiv</p>",
        "id": 342201044,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678931960
    },
    {
        "content": "<p>UPD: <code>lake clean</code> doesn't help.</p>",
        "id": 342201143,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678932011
    },
    {
        "content": "<p>More precisely, after <code>lake clean</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Building</span> <span class=\"n\">Aesop.Tree</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/lib:/nix/store/zdx4ykiq8ijfmzxzlrrcw3zswl383wfc-pipewire-0.3.60-jack/lib:./lake-packages/aesop/build/lib /home/urkud/.elan/toolchains/leanprover--lean4---nightly-2023-03-09/bin/lean ./lake-packages/aesop/././Aesop/Tree.lean -R ./lake-packages/aesop/./. -o ./lake-packages/aesop/build/lib/Aesop/Tree.olean -i ./lake-packages/aesop/build/lib/Aesop/Tree.ilean -c ./lake-packages/aesop/build/ir/Aesop/Tree.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-09/bin/lean` exited with code 139</span>\n</code></pre></div>",
        "id": 342201198,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678932040
    },
    {
        "content": "<p><code>rm -rf lake-packages/aesop/build</code> helped with this one.</p>",
        "id": 342201484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678932247
    },
    {
        "content": "<p>Any news?</p>",
        "id": 342396516,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678992250
    },
    {
        "content": "<p>I don't see that error in any of the CI runs in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2919\">!4#2919</a>.</p>",
        "id": 342398524,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678992935
    },
    {
        "content": "<p>I don't see them in CI either. What else can it be?</p>",
        "id": 342406025,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678995163
    },
    {
        "content": "<p>Should I upload SHA512 sums of all files in <code>~/.cache/mathlib</code>?</p>",
        "id": 342406108,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678995192
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/rzYDDK9pv6AMhqdHiIQHObdz/cache.sha512\">cache.sha512</a></p>",
        "id": 342406469,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1678995301
    },
    {
        "content": "<p>Can you also post the git revision where you get the issue. I'd like to reproduce it.</p>",
        "id": 342407214,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678995524
    },
    {
        "content": "<p>Anyone else experiencing problems with <code>lake exe cache get</code> today?</p>\n<p>After I run <code>lake exe cache get</code>, <code>lake build</code> starts a full build again.</p>",
        "id": 342992778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679262866
    },
    {
        "content": "<p>I've taken to running <code>pkill lean</code> before getting caches now</p>",
        "id": 342993081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679263150
    },
    {
        "content": "<p>I'm not going to be able to run the port-progress-bot anymore if I need to do that.</p>",
        "id": 342993730,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679263673
    },
    {
        "content": "<p>Yeah, even killing everything, <code>lake exe cache get</code> results in the build starting from scratch (including all dependencies).</p>",
        "id": 342993959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679263815
    },
    {
        "content": "<p>If anyone is able to confirm that <code>lake exe cache get</code> followed by <code>lake build</code> works for them on current master, that would be helpful to me.</p>",
        "id": 342994051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679263911
    },
    {
        "content": "<p>Hmm... a fresh clone of mathlib4 seems to resolve the problem.</p>",
        "id": 342994416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679264213
    },
    {
        "content": "<p>Gah... eventually realised the problem. I had an <code>elan override</code> set for that mathlib4 directory, and was using a slightly different version of Lean4! I wonder if this is something that <code>cache</code> should take into account.</p>",
        "id": 342995540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679265124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>, do you think <code>cache</code> could notice this, and refuse to provide oleans if the repo is using a nonstandard version of Lean via an <code>elan override</code>?</p>",
        "id": 342995588,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679265164
    },
    {
        "content": "<p>Maybe comparing <code>Lean.versionString</code> with the content of the tool chain file. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> can you confirm that such variable will carry a different value if the override is set?</p>",
        "id": 343002964,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679270729
    },
    {
        "content": "<p>Yes, <code>lean --version</code> says <code>Lean (version 4.0.0, commit 983904995027, Release)</code> with my override set, but <code>Lean (version 4.0.0-nightly-2023-03-15, commit 3d21124445b3, Release)</code> without.</p>",
        "id": 343003218,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679270934
    },
    {
        "content": "<p>I mean <code>Lean.versionString</code> in the compiled Lean code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span> <span class=\"c1\">-- \"4.0.0-nightly-2023-01-10\"</span>\n</code></pre></div>",
        "id": 343010581,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679276431
    },
    {
        "content": "<p>Sorry, yes: <code>-- 4.0.0, commit 98390499502743d9f119f3f5808a7ccd1cfb4d61</code></p>",
        "id": 343010777,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679276628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/343002964\">said</a>:</p>\n<blockquote>\n<p>Maybe comparing <code>Lean.versionString</code> with the content of the tool chain file. <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> can you confirm that such variable will carry a different value if the override is set?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you validate this method?</p>",
        "id": 343012777,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679278303
    },
    {
        "content": "<p>Just curious: why does port-progress-bot need to build any Lean 4 code?</p>",
        "id": 343017831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679282634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/343017831\">said</a>:</p>\n<blockquote>\n<p>Just curious: why does port-progress-bot need to build any Lean 4 code?</p>\n</blockquote>\n<p>Good question. It doesn't! I guess I was confused --- the port benchmark bot definitely does run Lean 3 and 4 code, however.</p>",
        "id": 343050259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679300411
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 343191663,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679335530
    },
    {
        "content": "<p>I don't think <code>Lean.versionString</code> is a good replacement for <code>lean-toolchain</code>.  It doesn't contain the compilation flags, for once.</p>",
        "id": 343221616,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679344621
    },
    {
        "content": "<p>Would anyone actually miss <code>override</code> if we removed it? With the alternative being to just change <code>lean-toolchain</code> so that it actually registers as a change in your git status window.</p>",
        "id": 343222245,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679344856
    },
    {
        "content": "<p>If you want to build Lean without Nix, you need overrides for the stage0/stage1 toolchains.</p>",
        "id": 343223966,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1679345493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/343221616\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>Lean.versionString</code> is a good replacement for <code>lean-toolchain</code>.  It doesn't contain the compilation flags, for once.</p>\n</blockquote>\n<p>Sorry I wasn't clear enough. I meant to compare the output of <code>Lean.versionString</code> with the content of <code>lean-toolchain</code>. And if they mismatch we exit with a message instead of following up with the regular <code>cache</code> routine</p>",
        "id": 343246930,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679355593
    },
    {
        "content": "<p>Ah, then you want to compare <code>Lean.toolchain</code>.  But it should only be a warning since tags don't have good version info:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ echo 'import Lean #eval Lean.toolchain' | lean +gebner/lean4:bundlelibatomic --stdin\n\"\"\n</code></pre></div>",
        "id": 343249899,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679357364
    },
    {
        "content": "<p>But <code>Lean.versionString</code> does tell the toolchain</p>",
        "id": 343251379,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679358278
    },
    {
        "content": "<p>That also doesn't work for tags:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ echo 'import Lean #eval Lean.versionString' | lean +gebner/lean4:bundlelibatomic --stdin\n\"4.0.0, commit 43fbd494cdbfd0b41fb3605318540bcae15f7577\"\n</code></pre></div>",
        "id": 343253296,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679359385
    },
    {
        "content": "<p>(<code>Lean.toolchain</code> does work just fine for nightlies though.)</p>",
        "id": 343253342,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679359428
    },
    {
        "content": "<p>Ah, got it. But why does it need to be a warning? If those toolchains mismatch then whatever is downloaded is not going to be used anyways</p>",
        "id": 343262336,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679365632
    },
    {
        "content": "<p>Lean doesn't use the Lean.toolchain definition. It doesn't matter if it's the empty string, the cache would still be used. (Even though in this case the lean-toolchain file would have a different, nonempty, content.)</p>",
        "id": 343263062,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679366081
    },
    {
        "content": "<p>Grepping through <code>elan show</code> might be an easier option</p>",
        "id": 343311448,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679389781
    },
    {
        "content": "<p>15 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"341532\" href=\"/#narrow/stream/341532-lean4-dev/topic/Build.20setup.20under.20elan.20proposal\">#lean4 dev &gt; Build setup under elan proposal</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 343608586,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679474979
    },
    {
        "content": "<p>Anyone else having problems with <code>lake exe cache get</code> today?  It doesn't seem to find any caches:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ lake exe cache get\nAttempting to download 1818 file(s)\nDecompressing 320 file(s)\n</code></pre></div>",
        "id": 343777466,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679516496
    },
    {
        "content": "<p>False alarm.  Turns out I had local changes in <code>lake-packages/std</code></p>",
        "id": 343777529,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679516519
    },
    {
        "content": "<p>I've been trying to create a new project with a dependency on mathlib4, but something is going wrong at the <code>lake exe cache get</code> step.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">1818</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>\n<p>My <code>.cache</code> directory remains empty.<br>\nIt worked fine when I created a new project a week or two ago, but when I created one a couple days ago, I experienced this problem. How do I get the cache files installed?</p>",
        "id": 343807121,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679529833
    },
    {
        "content": "<p>Most likely you've got the wrong lean version.  Try <code>cp lake-packages/mathlib/lean-toolchain .</code></p>",
        "id": 343807431,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679529977
    },
    {
        "content": "<p>I copied the file using Windows Explorer before getting the cache</p>",
        "id": 343807636,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679530184
    },
    {
        "content": "<p>Both <code>./lake-packages/mathlib/lean-toolchain</code> and <code>./lean-toolchain</code> contain <code>leanprover/lean4:nightly-2023-03-15</code></p>",
        "id": 343807753,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679530278
    },
    {
        "content": "<p><code>lean -v</code> in the project root reports <code>Lean (version 4.0.0-nightly-2023-03-15, commit 3d21124445b3, Release)</code></p>",
        "id": 343807879,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679530400
    },
    {
        "content": "<p>That sounds good.</p>",
        "id": 343808364,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679530806
    },
    {
        "content": "<p>The only other thing I can think of is different line endings. Have you set git to convert them to CRLF?</p>",
        "id": 343808439,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679530887
    },
    {
        "content": "<p>Let me check</p>",
        "id": 343808464,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679530921
    },
    {
        "content": "<p>Both files end with a CR LF</p>",
        "id": 343808573,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679531013
    },
    {
        "content": "<p>As do the files in the successfully created project from before</p>",
        "id": 343808663,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679531084
    },
    {
        "content": "<p>I ran it again on that project, and as it should, it output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">1731</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 343808833,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679531241
    },
    {
        "content": "<p>Do you have the project on GitHub?</p>",
        "id": 343810118,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679532359
    },
    {
        "content": "<p>No, not at the moment</p>",
        "id": 343810205,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679532419
    },
    {
        "content": "<p>What are your dependencies on the <code>lakefile.lean</code>?</p>",
        "id": 343810764,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679532886
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n</code></pre></div>\n<p>in both</p>",
        "id": 343810891,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679532978
    },
    {
        "content": "<p>Yeah, hard to know. I'd need to see it</p>",
        "id": 343810966,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679533049
    },
    {
        "content": "<p>Let us know when you upload it somewhere</p>",
        "id": 343810978,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1679533063
    },
    {
        "content": "<p>I deleted the <code>.cache</code> directory in the working project and reran the cache get. It successfully downloaded the files.</p>",
        "id": 343811062,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679533106
    },
    {
        "content": "<p>I can create a brand new empty project and push it to github, if that would be helpful.</p>",
        "id": 343811138,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679533188
    },
    {
        "content": "<p>This problem is not limited to a single project</p>",
        "id": 343811351,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679533365
    },
    {
        "content": "<p>Unfortunately whatever I did on the working project seems to have bricked it. The cache files are still there, but when I start the Lean server it seems to start rebuilding mathlib anyway, so I'm unable to check any of my work on that project either now.</p>",
        "id": 343816685,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679538088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"322237\">Kendall Frey</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/343808573\">said</a>:</p>\n<blockquote>\n<p>Both files end with a CR LF</p>\n</blockquote>\n<p>I'm pretty sure that's a problem.  We don't convert the line endings for hashing.  So a CRLF source file would never match an LF source file.</p>",
        "id": 343817335,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679538764
    },
    {
        "content": "<p>Maybe this is also a new issue. See <a href=\"https://github.com/leanprover/lean4/pull/2138/commits/d85a4f5495a60a528befca9a2e77d461c2fbf918\">https://github.com/leanprover/lean4/pull/2138/commits/d85a4f5495a60a528befca9a2e77d461c2fbf918</a></p>",
        "id": 343817440,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679538897
    },
    {
        "content": "<p>The curious part is why it worked in the first project, if CR LF is actually the problem</p>",
        "id": 343817569,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679539047
    },
    {
        "content": "<p>I checked the toolchain in the working project, and it's 03-09, the day before that PR was merged</p>",
        "id": 343817687,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679539171
    },
    {
        "content": "<p>I created another new project, and this time before <code>lake update</code> I modified <code>lakefile.lean</code> to point to mathlib @ revision af5c2dab7415d3e5e8703104b4e5ad5590f19495, same as the working project. Now <code>lake exe cache get</code> seems to be downloading the files properly. I need to go now, so I'll need to test tomorrow to confirm whether or not this actually avoids having to rebuild mathlib. But indeed it does appear there was a new issue introduced between then and now.</p>",
        "id": 343818964,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679539819
    },
    {
        "content": "<p>Indeed I probably broke this, my bad. It's a great demonstration of the evils of <code>autocrlf</code> though.</p>",
        "id": 343919789,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679565006
    },
    {
        "content": "<p>I set <code>autocrlf = input</code> and told vscode to use LF (to prevent any more mixups). Getting the cache and importing mathlib seems to be working properly now, so I should be able to continue my work as normal again. Thanks for the help, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 344126106,
        "sender_full_name": "Kendall Frey",
        "timestamp": 1679616448
    },
    {
        "content": "<p>After running a <code>lake exe cache get</code>, the VSCode server tries to run this command, and segfaults:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">yakov</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-17/lib:./build/lib:./lake-packages/Qq/build/lib:./lake-packages/aesop/build/lib:./lake-packages/std/build/lib:./lake-packages/std/build/lib /home/yakov/.elan/toolchains/leanprover--lean4---nightly-2023-03-17/bin/lean -DwarningAsError=true -Dlinter.missingDocs=true ./lake-packages/std/././Std/Data/List/Basic.lean -R ./lake-packages/std/./. -o ./lake-packages/std/build/lib/Std/Data/List/Basic.olean -i ./lake-packages/std/build/lib/Std/Data/List/Basic.ilean -c ./lake-packages/std/build/ir/Std/Data/List/Basic.c</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>    <span class=\"mi\">26421</span> <span class=\"n\">segmentation</span> <span class=\"n\">fault</span>  <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=</span>  <span class=\"bp\">-</span><span class=\"n\">DwarningAsError</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"bp\">-</span><span class=\"n\">Dlinter.missingDocs</span><span class=\"bp\">=</span><span class=\"n\">true</span>\n</code></pre></div>\n<p>What could be going on?</p>",
        "id": 344307629,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1679673548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/342201484\">said</a>:</p>\n<blockquote>\n<p><code>rm -rf lake-packages/aesop/build</code> helped with this one.</p>\n</blockquote>\n<p>I was in a similar situation, where only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span>\n</code></pre></div>\n<p>seem solve getting the same error. Thanks for the help!</p>",
        "id": 347170210,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1680705957
    },
    {
        "content": "<p>By the way, I'd like to mention again how amazing the cache is, even compared to the one we had for mathlib3. There's no way I could be remotely as productive without it</p>",
        "id": 348203581,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681129428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/344307629\">said</a>:</p>\n<blockquote>\n<p>After running a <code>lake exe cache get</code>, the VSCode server tries to run this command, and segfaults:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">yakov</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-03-17/lib:./build/lib:./lake-packages/Qq/build/lib:./lake-packages/aesop/build/lib:./lake-packages/std/build/lib:./lake-packages/std/build/lib /home/yakov/.elan/toolchains/leanprover--lean4---nightly-2023-03-17/bin/lean -DwarningAsError=true -Dlinter.missingDocs=true ./lake-packages/std/././Std/Data/List/Basic.lean -R ./lake-packages/std/./. -o ./lake-packages/std/build/lib/Std/Data/List/Basic.olean -i ./lake-packages/std/build/lib/Std/Data/List/Basic.ilean -c ./lake-packages/std/build/ir/Std/Data/List/Basic.c</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>    <span class=\"mi\">26421</span> <span class=\"n\">segmentation</span> <span class=\"n\">fault</span>  <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=</span>  <span class=\"bp\">-</span><span class=\"n\">DwarningAsError</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"bp\">-</span><span class=\"n\">Dlinter.missingDocs</span><span class=\"bp\">=</span><span class=\"n\">true</span>\n</code></pre></div>\n<p>What could be going on?</p>\n</blockquote>\n<p>Sorry I missed that one. Are you still having this issue? Did you have VS Code open while <code>cache</code> was running?</p>",
        "id": 348230085,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681136770
    },
    {
        "content": "<p>Yes, I had vscode open. I nuked the whole folder and reclined. That \"fixed\" it</p>",
        "id": 348233410,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681137567
    },
    {
        "content": "<p>Having VS Code open causes the Lean server to interfere with the mechanics of <code>cache</code>. Next time try to close VS Code before calling <code>cache</code>. And if it still doesn't work, try <code>get!</code></p>",
        "id": 348234756,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681137867
    },
    {
        "content": "<p>Just wanted to say that <code>lake exe cache get</code> is so much better than the non-content-addressed mathlib3 version! I can only imagine how good a Nix-ified version of mathlib would be</p>",
        "id": 357538233,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683801094
    },
    {
        "content": "<p>Agreed. I just wish I could use it on Windows <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 357538411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683801135
    },
    {
        "content": "<p>Are the Windows problems documented somewhere? Does it work under WSL?</p>",
        "id": 357539817,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683801559
    },
    {
        "content": "<p>For the record, it works perfectly fine on windows for me.</p>",
        "id": 357601088,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683814482
    },
    {
        "content": "<p>(without using WSL)</p>",
        "id": 357601148,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683814496
    },
    {
        "content": "<p>It works in WSL with Ubuntu or any other distro.  If you have git installed on PC you don't need WSL, git cli will do just fine.</p>",
        "id": 357748818,
        "sender_full_name": "alex chan",
        "timestamp": 1683864070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/357539817\">said</a>:</p>\n<blockquote>\n<p>Are the Windows problems documented somewhere? Does it work under WSL?</p>\n</blockquote>\n<p>I've copiously complained about them in this thread already, eg <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/321126042\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get/near/321126042</a></p>",
        "id": 357791514,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683880005
    },
    {
        "content": "<p>Wow, that's a confusing error. Does it still happen with an up-to-date copy of mathlib4?</p>",
        "id": 357890833,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683901998
    },
    {
        "content": "<p>If so, where are you running the commands? Still in bash inside VS Code?</p>",
        "id": 357892834,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683902352
    },
    {
        "content": "<p>(deleted, I think I made a mistake while experimenting with the caching and I don't want to mislead people)</p>",
        "id": 358154556,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684004107
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 358154592,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684004144
    },
    {
        "content": "<p>Is the cache currently stored only as indivdual oleans which are gotten one at a time?</p>",
        "id": 399285150,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698666475
    },
    {
        "content": "<p>Yes.</p>",
        "id": 399285447,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698666585
    },
    {
        "content": "<p>Related to that; I've noticed that a cache miss is much more expensive than a cache hit; running <code>lake exe cache get</code> on a branch where no cache is available due to an std bump (so nothing is downloaded) can often take longer than downloading a full cache!</p>",
        "id": 399286169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698666888
    },
    {
        "content": "<p>I wonder if it's faster/better to revert to the old gzipped version - won't there be a lot of overhead starting the download for each individual file etc? I understand it's better when there's overlap in the cache and you only have to download, e.g., 20 oleans as opposed to all 4000</p>",
        "id": 399287022,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698667206
    },
    {
        "content": "<p>Well, except for the complete cache miss scenario Eric just mentioned, I don't think this is the case.</p>",
        "id": 399287123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698667245
    },
    {
        "content": "<p>We're only making one http connection.</p>",
        "id": 399287161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698667258
    },
    {
        "content": "<p>There are other cost dimensions at play other than download speed anyway. There's storage cost (on Azure and on users' computers) and also data transfer costs, which can't be neglected for everyone</p>",
        "id": 399287872,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1698667505
    },
    {
        "content": "<p>Idk how big the cache is currently, but suppose it's 500mb. If you're just changing one leaf file with your PR, then once it's merged everyone else would have to pay the cost of another chunk of 500mb on their machines if they aren't keeping the cache folder clean</p>",
        "id": 399288513,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1698667793
    },
    {
        "content": "<p>The thought mainly came to me as I just had significantly faster internet installed, and I noticed that the <code>cache get</code> timings were very similar. On users' computers I assumed the data could be unpacked and any duplicates discarded, but on Azure the issue is probably fairly different.</p>",
        "id": 399288800,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698667917
    },
    {
        "content": "<p>That's true, but still, being forced to download 500mb sounds very suboptimal if what I already have only differs on a few files</p>",
        "id": 399289101,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1698668049
    },
    {
        "content": "<p>We have a full cache miss only when we upgrade lean, I guess?</p>",
        "id": 399289248,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698668127
    },
    {
        "content": "<p>That cache miss happens on a cloud machine. But it builds the cache and makes it available for everyone so the full cache miss only happens once</p>",
        "id": 399289419,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1698668201
    },
    {
        "content": "<p>I think there are other situations similar to a full cache miss. Like if you change a deep file in Mathlib or in Std. The deeper the file is, the higher the chances of getting closer to a full cache miss</p>",
        "id": 399289743,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1698668373
    },
    {
        "content": "<p>Note that some of this could be fixed by additional smarts on the Azure side. For example if you could send a single query to find out which of a set of files exist on the server; I believe HTTP/2 also lets you do something here. But the current hosting is just a plain HTTP/1.1 file server, so in order to find out if none of a set of 4000 files exist on the server you have to do 4000 file requests.</p>\n<p>One other trick I am hoping to implement at some point is to have a marker file that exists once per \"root hash\" (which is a combination of the lakefile.lean, lean-toolchain and lake-manifest.json), which exists iff any cache file with that root hash is on the server. This should address the case where you have a brand new lean version or a change to the lakefile and so it's a complete cache miss. This doesn't help almost complete cache misses though.</p>",
        "id": 399357766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698691134
    },
    {
        "content": "<p>Does the cache tool assume and use the fact that if A depends on B, and B isn't available in the cache, then A won't be either? So if it queries from root to leaf module, it can stop early?</p>",
        "id": 399449289,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698740405
    },
    {
        "content": "<p>This is a good idea but it might hinder parallelism in the common case of a full cache hit.</p>",
        "id": 399450178,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698740803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> yes</p>",
        "id": 399453508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698742364
    },
    {
        "content": "<p>Er, actually I take it back, cache does take advantage of this in the case where B is not found, but it will make the full list of things to download before downloading anything, to maximize parallelism. <code>lean-cache</code> is able to take advantage of this more fine-grained dependency notion because it is driving cURL itself and can interleave the network requests with hashing and stop things early</p>",
        "id": 399454037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698742570
    }
]