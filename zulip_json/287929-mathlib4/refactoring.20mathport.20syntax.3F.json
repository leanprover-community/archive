[
    {
        "content": "<p>In <code>tfae_have</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/2062\">!4#2062</a>), I refactor the syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tfaeHave</span><span class=\"o\">)</span> <span class=\"s2\">\"tfae_have \"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">num</span> <span class=\"o\">(</span><span class=\"s2\">\" → \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\" ↔ \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\" ← \"</span><span class=\"o\">)</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">impArrow</span> <span class=\"o\">:=</span> <span class=\"s2\">\" → \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\" ↔ \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\" ← \"</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tfaeHave</span><span class=\"o\">)</span> <span class=\"s2\">\"tfae_have \"</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">num</span> <span class=\"n\">impArrow</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>so that I can easily parse the arrows.</p>\n<p>Is this allowed in mathport, or does changing the name of the component syntax node mess things up?</p>",
        "id": 328361648,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676592796
    },
    {
        "content": "<p>Please don't worry too much about changing the syntax, but it will require changes in mathport because right now it's constructing the syntax tree manually.  So please ping me or Mario when the change lands.</p>",
        "id": 328372185,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676599352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , <code>tfae_have</code> has just landed, so here's the requested ping :)</p>",
        "id": 329288520,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677012470
    },
    {
        "content": "<p>Looks like the auto-update went without a hitch: <a href=\"https://github.com/leanprover-community/mathport/actions/workflows/update.yml\">https://github.com/leanprover-community/mathport/actions/workflows/update.yml</a></p>",
        "id": 329293344,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677014089
    },
    {
        "content": "<p>actually the new version of the syntax can be written more compactly now rather than splitting into cases for each direction of the arrow, although the old code will still work</p>",
        "id": 329335148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677036518
    },
    {
        "content": "<p>do you mean something like writing <code>syntax \" → \" : impArrow</code> (plus the rest) instead or am I (likely) misunderstanding?</p>",
        "id": 329336083,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677037303
    },
    {
        "content": "<p>I mean the mathport code can be improved</p>",
        "id": 329336604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677037738
    }
]