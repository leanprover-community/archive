[
    {
        "content": "<p>I would like to have a nontrivial alternative to <code>LinearOrderedAddCommMonoid</code> + <code>CompleteLattice</code>, i.e., some typeclasses <code>A</code> and <code>B</code> such that:</p>\n<p>(<code>LinearOrderedAddCommMonoid</code> + <code>CompleteLattice</code> ≤ <code>A</code> + <code>B</code>) ∧<br>\n( ¬(<code>LinearOrderedAddCommMonoid</code> ≤ <code>A</code>) ∨ ¬(<code>CompleteLattice</code> ≤ <code>B</code>) )</p>\n<p>Do you know about anything? You can use more than two typeclasses if it makes sense.</p>",
        "id": 394160276,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696141998
    },
    {
        "content": "<p>Hmm, what's the motivation?</p>",
        "id": 394160648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696142114
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7404\">#7404</a></p>",
        "id": 394160781,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696142175
    },
    {
        "content": "<p>And in words?</p>",
        "id": 394691319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696359018
    },
    {
        "content": "<p>The objective is to minimize functions <code>D^n → C</code> where <code>[LinearOrderedAddCommMonoid C]</code> and <code>D</code> can be anything.<br>\nIn this general setting, the infimum lies in <code>WithTop (WithBot C)</code>.<br>\nIf we have<code>[Inhabited D]</code> then we can search for the infimum in <code>WithBot C</code>.<br>\nIf we furthermore restrict <code>D</code> to be a finite type or to \"behave\" as a finite set, we can search for the infimum in <code>C</code>.<br>\nThe function for infimum of a <code>Set</code> that you recommended me<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/68c7277eb809a743588fe39cd21737944bf8e6c6/Mathlib/Order/CompleteLattice.lean#L61-L62\">https://github.com/leanprover-community/mathlib4/blob/68c7277eb809a743588fe39cd21737944bf8e6c6/Mathlib/Order/CompleteLattice.lean#L61-L62</a><br>\nrequires <code>[CompleteLattice C]</code> so I didn't even try to incorporate the additional assumptions into my definition.<br>\nHowever, I would like to refine my definition a bit.<br>\nAs a start, cannot I just enhance <code>[LinearOrderedAddCommMonoid C]</code> with <code>[HasTop C]</code> and <code>[HasBot C]</code> and ask for the infimum on <code>C</code> itself, without going for the <code>[CompleteLattice C]</code> overkill?</p>",
        "id": 394698003,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696361983
    },
    {
        "content": "<p>Are you looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrderedAddCommMonoidWithTop#doc\">docs#LinearOrderedAddCommMonoidWithTop</a></p>",
        "id": 394698972,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696362448
    },
    {
        "content": "<p>It seems that we don't have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrderedAddCommMonoidWithBot#doc\">docs#LinearOrderedAddCommMonoidWithBot</a> sadly. The latter would actually be useful — I don't mind restricting the main definition to nonempty domains, but restricting it to finite domains might be premature here. At the same, I don't feel like rephrasing everything to maximization just because a certain typeclass exists in Mathlib. Would you approve adding the complementary typeclass to Mathlib if I PRed it?</p>",
        "id": 394699602,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696362768
    },
    {
        "content": "<p>I mean, what typeclasses would you instantiate it with?</p>",
        "id": 394699902,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696362925
    },
    {
        "content": "<p>You mean what structures would satisfy it?</p>",
        "id": 394699977,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696362962
    },
    {
        "content": "<p>Nat? NNRat? NNReal?</p>\n<p>Have I overlooked an issue there?</p>",
        "id": 394701979,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696363827
    },
    {
        "content": "<p>Then maybe you rather want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CanonicallyOrderedAddMonoid#doc\">docs#CanonicallyOrderedAddMonoid</a> ?</p>",
        "id": 394703318,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696364473
    },
    {
        "content": "<p>Did you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CanonicallyLinearOrderedAddMonoid#doc\">docs#CanonicallyLinearOrderedAddMonoid</a> ?</p>",
        "id": 394704603,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696365052
    },
    {
        "content": "<p>or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CanonicallyOrderedSemiring#doc\">docs#CanonicallyOrderedSemiring</a>, whichever one is best for you</p>",
        "id": 394704854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696365153
    },
    {
        "content": "<p>If I understand it right, the existing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CanonicallyLinearOrderedAddMonoid#doc\">docs#CanonicallyLinearOrderedAddMonoid</a> is basically the non-existing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrderedAddCommMonoidWithBot#doc\">docs#LinearOrderedAddCommMonoidWithBot</a> with the additional assumption that <code>⊥</code> is the neutral element.</p>",
        "id": 394709939,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696366438
    },
    {
        "content": "<p><del>As I recall the rationale is that we don't want changes to the simp set to potentially break untouched files. Is it possible for a nonterminal simp like this which is immediately closed by <code>rfl</code> to do so?</del></p>\n<p>Sorry wrong thread</p>",
        "id": 394742686,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696385519
    },
    {
        "content": "<p><code>CanonicallyLinearOrderedAddMonoid</code> is commutative and total, but conversion to <code>LinearOrderedAddCommMonoid</code> is missing. Why?</p>",
        "id": 394772270,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696403102
    },
    {
        "content": "<p>Indeed. That's just an oversight.</p>",
        "id": 394772609,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696403224
    },
    {
        "content": "<p>If I PR it, will you approve it?</p>",
        "id": 394772701,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696403251
    },
    {
        "content": "<p>When we are at it, is it intentional that \"Comm\" is no longer a part of its name?</p>",
        "id": 394772971,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696403373
    },
    {
        "content": "<p>Not really. This small corner of the library is a bit of a mess because there are very little concrete types we care about that instantiate those typeclasses.</p>",
        "id": 394773326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696403506
    },
    {
        "content": "<p>Can I rename it in the same PR?</p>",
        "id": 394773436,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696403537
    },
    {
        "content": "<p>When looking at the diff (wip), I'll rather do it as two PRs.</p>",
        "id": 394777597,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696405067
    },
    {
        "content": "<p>First the renaming: <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7503\">https://github.com/leanprover-community/mathlib4/pull/7503</a></p>",
        "id": 394874481,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696436019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Specific.20typeclasses.20alternative/near/394704603\">said</a>:</p>\n<blockquote>\n<p>Did you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CanonicallyLinearOrderedAddMonoid#doc\">docs#CanonicallyLinearOrderedAddMonoid</a> ?</p>\n</blockquote>\n<p>Would it be possible to derive <code>[InfSet C]</code> from <code>[CanonicallyLinearOrderedAddMonoid C]</code> if I added some canonical conversions?</p>",
        "id": 394892800,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696443085
    },
    {
        "content": "<p>Or maybe <code>[InfSet (WithTop C)]</code> to account for infimum of the empty set...</p>",
        "id": 394893120,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696443232
    },
    {
        "content": "<p>No, because</p>\n<ol>\n<li>How would you do it? <code>NNRat</code> is a <code>CanonicallyLinearOrderedAddMonoid</code> but not a conditionally complete lattice.</li>\n<li>That would be constructing data out of a hat, which is bad.</li>\n</ol>",
        "id": 394893537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696443428
    },
    {
        "content": "<p>Yeah (1) was stupid. I still don't know what's wrong with (2).</p>",
        "id": 394894927,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696443963
    },
    {
        "content": "<p>Is there any notion of \"infimum of nonempty set\" in Mathlib that would require only <code>LinearOrder</code> and <code>Bot</code> please?</p>",
        "id": 394895963,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696444373
    },
    {
        "content": "<p>It seems that <code>sInf</code> and <code>iInf</code> require more (<code>InfSet</code> in particular) because they need to allow for an infimum over the empty set / function from empty domain. I would be fine with having to prove that every infimum is for a non-empty set; I would like to relax the typeclass requirements.</p>",
        "id": 394898458,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696445317
    },
    {
        "content": "<p>Is the <code>InfSet</code> even tied to the operations on given type?</p>",
        "id": 394899121,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696445590
    },
    {
        "content": "<p>The infimum of a set is a purely order theoretic operation, if that's what you're asking</p>",
        "id": 394901754,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696446694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Specific.20typeclasses.20alternative/near/394895963\">said</a>:</p>\n<blockquote>\n<p>Is there any notion of \"infimum of nonempty set\" in Mathlib that would require only <code>LinearOrder</code> and <code>Bot</code> please?</p>\n</blockquote>\n<p>That's nonsense. Most linear orders don't have infima.</p>",
        "id": 394901987,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696446784
    },
    {
        "content": "<p><code>Bot</code> would be the infimum of the \"full set\".</p>",
        "id": 394904063,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696447670
    },
    {
        "content": "<p>Okay but what's the infimum of <code>{x : NNRat | x^2 &gt; 2}</code>?</p>",
        "id": 394904855,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696448047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Specific.20typeclasses.20alternative/near/394904855\">said</a>:</p>\n<blockquote>\n<p>Okay but what's the infimum of <code>{x : NNRat | x^2 &gt; 2}</code>?</p>\n</blockquote>\n<p>Yeah, it was really stupid of me...</p>",
        "id": 394906540,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696448785
    },
    {
        "content": "<p>If I have both <code>[InfSet C]</code> and <code>[CanonicallyLinearOrderedAddMonoid C]</code>, are <code>InfSet.sInf</code> and <code>CanonicallyLinearOrderedAddMonoid.min</code> guaranteed behave consistently with each other?</p>",
        "id": 394906845,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696448916
    },
    {
        "content": "<p><code>InfSet</code> is just a notation typeclass, so no.</p>",
        "id": 394909822,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696450324
    },
    {
        "content": "<p>I think I need to get back to my original question but better.</p>\n<p>I have <code>[LinearOrderedAddCommMonoid C]</code>. What is the least additional assumption that will allow me to consider (needn't be computable) infimum of any nonempty <code>Set C</code> such that the infimum will respect the <code>LinearOrderedAddCommMonoid.le</code> please?</p>",
        "id": 394911399,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696451156
    },
    {
        "content": "<p>What concrete structures do you care about?</p>",
        "id": 394917638,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696454282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Specific.20typeclasses.20alternative/near/394777597\">said</a>:</p>\n<blockquote>\n<p>When looking at the diff (wip), I'll rather do it as two PRs.</p>\n</blockquote>\n<p>Second: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7515\">#7515</a></p>",
        "id": 395005236,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696500308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Specific.20typeclasses.20alternative/near/394917638\">said</a>:</p>\n<blockquote>\n<p>What concrete structures do you care about?</p>\n</blockquote>\n<p>I changed my mind about what I want:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/Minimum.20of.20a.20finite.20set\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Minimum.20of.20a.20finite.20set</a></p>",
        "id": 395273237,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696602927
    }
]