[
    {
        "content": "<p>I'm writing some tests in which I want to ensure that the \"don't know how to synthesize implicit argument ...\" error gets printed via <code>#guard_msgs</code>, but these inevitably involve anonymous mvars (like <code>?m.1234</code>), and so would potentially be rather fragile. </p>\n<p>Is there an option somewhere for pretty-printing these mvars without the trailing fragile number? (Or should <code>#guard_msgs</code> strip these numbers by default, like the lean core test output checker does?)</p>",
        "id": 401559948,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699752782
    },
    {
        "content": "<p>I've been thinking about making <code>#guard_msgs</code> have some sort of way to specify holes in the text, like maybe with <code>#guard_msgs (hole := \"XXX\") in ...</code> then you can put <code>XXX</code> in the text, and these match one or more characters.</p>",
        "id": 401561149,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699753694
    },
    {
        "content": "<p>You should be able to make a mvar pretty printer that strips the number off. You could copy <code>Lean.PrettyPrinter.Delaborator.delabMVar</code> and then adjust <code>n</code> afterwards, replacing a <code>.num</code> component with <code>.str ... \"NNN\"</code> or something like that.</p>",
        "id": 401561308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699753821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Pretty-print.20mvars.20without.20.60.2E1234.60.3F/near/401561149\">said</a>:</p>\n<blockquote>\n<p>I've been thinking about making <code>#guard_msgs</code> have some sort of way to specify holes in the text, like maybe with <code>#guard_msgs (hole := \"XXX\") in ...</code> then you can put <code>XXX</code> in the text, and these match one or more characters.</p>\n</blockquote>\n<p>That sounds neat! I wonder if it would also be worth having an \"automatic\" version which just renumbered the holes inside <code>#guard_msgs</code>, so that the first-encountered<code>?m.NNN</code> became <code>?m.1</code> wherever it occurred, the next became <code>?m.2</code>, etc.</p>",
        "id": 401564572,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699756478
    },
    {
        "content": "<p>Btw, I found I also needed to override the delaborator for <code>Expr.sort</code> to handle level mvars there. Unfortunately handling level mvars in constants would (I think) require a lot of copypasta, since it relies on <code>delabConst</code>, which isn't actually a delaborator for <code>.const</code>. (Luckily this typically doesn't matter and isn't printed.)</p>",
        "id": 401566252,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699757948
    },
    {
        "content": "<p>For anyone that might find this useful in the future, here's the (first draft of the) code:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Level</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PP</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toResultNoSuffix</span> <span class=\"o\">:</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">Result</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">Result.num</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">l</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">Result.succ</span> <span class=\"o\">(</span><span class=\"n\">toResult</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Result.max</span> <span class=\"o\">(</span><span class=\"n\">toResult</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">toResult</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">imax</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Result.imax</span> <span class=\"o\">(</span><span class=\"n\">toResult</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">toResult</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">n</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">Result.leaf</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">_</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">Result.leaf</span> <span class=\"o\">(</span><span class=\"n\">Name.mkSimple</span> <span class=\"s2\">\"?u\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PP</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quoteNoSuffix</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prec</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.Level</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">PP.toResultNoSuffix</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quote</span> <span class=\"n\">prec</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Level</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">sort</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabSortNoLevelSuffix</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">Expr.sort</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Level.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Level.succ</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">l.dec</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">l'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Level.quoteNoSuffix</span> <span class=\"n\">l'</span> <span class=\"n\">max_prec</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Level.quoteNoSuffix</span> <span class=\"n\">l</span> <span class=\"n\">max_prec</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">mvar</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabMVarNoSuffix</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">Expr.mvar</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarDecl</span> <span class=\"bp\">←</span> <span class=\"n\">n.getDecl</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">eraseSuffix</span> <span class=\"n\">mvarDecl.userName</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">?$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">eraseSuffix</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Name</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Name.anonymous</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eraseSuffix</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n</div></div>\n<p>(I might put this—or a scoped version?—in some <code>Mathlib.Util</code> file (?) in an upcoming PR that could use it for those tests.)</p>",
        "id": 401566558,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699758114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Pretty-print.20mvars.20without.20.60.2E1234.60.3F/near/401564572\">said</a>:</p>\n<blockquote>\n<p>That sounds neat! I wonder if it would also be worth having an \"automatic\" version which just renumbered the holes inside <code>#guard_msgs</code>, so that the first-encountered<code>?m.NNN</code> became <code>?m.1</code> wherever it occurred, the next became <code>?m.2</code>, etc.</p>\n</blockquote>\n<p>I've been wanting to just have the pretty printer do that all the time. This is how lean 3 worked and it is infinitely easier to read than all those big (and changing) numbers</p>",
        "id": 401589055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699775354
    },
    {
        "content": "<p>In mm0 I did that but with \"alphabetic numbering\" i.e. <code>?a, ?b, ..., ?z, ?aa, ...</code> which I think is a bit more mnemonic, but possibly this would be confusing in the presence of named metavariables since it would imply that you can refer to <code>?b</code> using <code>case b =&gt; ...</code> etc</p>",
        "id": 401589298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699775572
    },
    {
        "content": "<p>My final draft of the code above (now in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8364\">#8364</a>) appended <code>✝</code> at the end to avoid that confusion (e.g. <code>?m✝</code>), so maybe that's a potential solution for alphabetic numbering, since the user knows <code>✝</code> terms are inaccessible!</p>",
        "id": 401589630,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699775904
    }
]