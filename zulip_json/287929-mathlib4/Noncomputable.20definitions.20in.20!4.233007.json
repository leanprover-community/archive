[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3007\">!4#3007</a> Because <code>FreeAlgebra.lift</code> is noncomputable the instance in this file has to be noncomputable too; because that instance is noncomputable <code>starHom</code> must be too. Should I be worried or not?</p>",
        "id": 343255483,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679360606
    },
    {
        "content": "<p><code>FreeAlgebra.lift</code> shouldn't be non-computable</p>",
        "id": 343255863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679360791
    },
    {
        "content": "<p>So your PR is fine, but something is up with a previous PR</p>",
        "id": 343255885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679360810
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2905\">!4#2905</a> to be more precise</p>",
        "id": 343255947,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679360866
    },
    {
        "content": "<p>Right, the standard fix is to copy what I did with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.rec_eq_recC#doc\">docs4#Nat.rec_eq_recC</a></p>",
        "id": 343256099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679360951
    },
    {
        "content": "<p>But that can be a separate PR</p>",
        "id": 343256106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679360956
    },
    {
        "content": "<p>Is this a bug?</p>",
        "id": 343259996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679363875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncomputable.20definitions.20in.20!4.233007/near/343259996\">said</a>:</p>\n<blockquote>\n<p>Is this a bug?</p>\n</blockquote>\n<p>I'm already having an argument with <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> on which lemmas should be restored to make the <code>simp</code> in the last declaration work. <a href=\"https://github.com/leanprover-community/mathlib4/pull/3008\">!4#3008</a> restored two simp lemmas; I prodded myself and found that a third lemma should be restored, now Eric claims that the third lemma is indeed no longer needed in L4</p>",
        "id": 343260080,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679363923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncomputable.20definitions.20in.20!4.233007/near/343259996\">said</a>:</p>\n<blockquote>\n<p>Is this a bug?</p>\n</blockquote>\n<p>It's a missing feature, <a href=\"https://github.com/leanprover/lean4/pull/2049\">lean4#2049</a></p>",
        "id": 343260148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679363995
    },
    {
        "content": "<p>Ah ok.</p>",
        "id": 343260334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679364111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I merged your <a href=\"https://github.com/leanprover-community/mathlib4/pull/3008\">!4#3008</a> into my <a href=\"https://github.com/leanprover-community/mathlib4/pull/3007\">!4#3007</a> and tried it; <code>by simp [star_algebraMap]</code> still doesn't work</p>",
        "id": 343260407,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364147
    },
    {
        "content": "<p>What goal does it leave behind?</p>",
        "id": 343260471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364212
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">starRingEquiv.toEquiv</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">FreeAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">unop</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">FreeAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 343260493,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364242
    },
    {
        "content": "<p>Adding <code>rfl</code> alone closes it, but <code>by rfl</code> itself also works</p>",
        "id": 343260542,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364266
    },
    {
        "content": "<p>Did you restart lean after merging?</p>",
        "id": 343260554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364285
    },
    {
        "content": "<p>Does rewriting by my lemma work from that point?</p>",
        "id": 343260577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364311
    },
    {
        "content": "<p>Yes, I closed VSCode and reopened it, I saw the infoview showing that recompiling was underway</p>",
        "id": 343260590,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364326
    },
    {
        "content": "<p>(Just restarted the server again, I'm still seeing an unsolved goal)</p>",
        "id": 343260659,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364369
    },
    {
        "content": "<p>BTW, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">liftFun</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Pre</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftFun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">liftFun</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftFun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">liftFun</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">of_scalar</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">algebraMap</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 343260682,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679364395
    },
    {
        "content": "<p><code>rw [RingEquiv.coe_toEquiv]</code>?</p>",
        "id": 343260683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364398
    },
    {
        "content": "<p>modulo the error I introduced switching <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord\">∗</span></span></span></span>.</p>",
        "id": 343260705,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679364420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncomputable.20definitions.20in.20!4.233007/near/343260683\">said</a>:</p>\n<blockquote>\n<p><code>rw [RingEquiv.coe_toEquiv]</code>?</p>\n</blockquote>\n<p>doesn't work, even with the <code>simp</code></p>",
        "id": 343260747,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364455
    },
    {
        "content": "<p>In fact it complains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n</code></pre></div>",
        "id": 343260787,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364483
    },
    {
        "content": "<p>Do you see why I think it should work?</p>",
        "id": 343260817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364490
    },
    {
        "content": "<p>Yes, because you said so</p>",
        "id": 343260840,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364522
    },
    {
        "content": "<p>Take a look at the statement of the lemma and the statement of the goal</p>",
        "id": 343260867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364539
    },
    {
        "content": "<p>They don't match at all</p>",
        "id": 343260940,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364594
    },
    {
        "content": "<p>Both have a term of the form <code>FunLike.coe (RingEquiv.toEquiv f)</code></p>",
        "id": 343261018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364634
    },
    {
        "content": "<p>You can disable the arrows in printing to make that clearer</p>",
        "id": 343261040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364657
    },
    {
        "content": "<p>how to disable arrows?</p>",
        "id": 343261084,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364697
    },
    {
        "content": "<p><code>set_option pp.coercions false</code> maybe? I'm afraid I don't know, but autocomplete after <code>pp.</code> might</p>",
        "id": 343261165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364737
    },
    {
        "content": "<p>Or just click on the arrows to find out what they are</p>",
        "id": 343261175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364747
    },
    {
        "content": "<p>Well after <code>by simp [star_algebraMap]</code> and with coercions not printed the goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">FunLike.coe</span> <span class=\"n\">starRingEquiv.toEquiv</span> <span class=\"o\">(</span><span class=\"n\">FunLike.coe</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">FreeAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">{</span> <span class=\"n\">unop</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.coe</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">FreeAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 343261228,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364819
    },
    {
        "content": "<p>Yes, there's <code>FunLike.coe (RingEquiv.toEquiv f)</code> on the LHS, but Lean's not getting it</p>",
        "id": 343261291,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679364849
    },
    {
        "content": "<p>My guess is that this is <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a></p>",
        "id": 343261302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364857
    },
    {
        "content": "<p>Does <code>set_option synth.etaExperiment true</code> let the proof go through?</p>",
        "id": 343261326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364884
    },
    {
        "content": "<p>To be clear, your refl proof is fine in that PR (and an improvement over the old proof); but it would also be worth understanding the failure here</p>",
        "id": 343261447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679364965
    },
    {
        "content": "<p>No</p>",
        "id": 343261537,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679365062
    },
    {
        "content": "<p>(but I'm getting another weird error in which when I do...)</p>",
        "id": 343261553,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679365075
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `star` as an `AlgEquiv` -/</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">starHom</span> <span class=\"o\">:</span> <span class=\"n\">FreeAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">FreeAlgebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">starRingEquiv</span> <span class=\"k\">with</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">star_algebraMap</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">free_algebra.star_hom</span> <span class=\"n\">FreeAlgebra.starHom</span>\n</code></pre></div>",
        "id": 343261608,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679365093
    },
    {
        "content": "<p>I'll have a look tomorrow</p>",
        "id": 343261610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679365094
    },
    {
        "content": "<p>(... I get <code>expected 'abbrev', 'add_decl_doc', 'alias', 'axiom', 'binder_predicate', 'builtin_initialize', 'class', 'declare_config_elab', 'declare_simp_like_tactic', 'declare_syntax_cat', 'def', 'elab', 'elab_rules', 'example', 'inductive', 'infix', 'infixl', 'infixr', 'initialize', 'instance', 'irreducible_def', 'lemma', 'macro', 'macro_rules', 'notation', 'notation3', 'opaque', 'postfix', 'prefix', 'register_builtin_option', 'register_label_attr', 'register_option', 'register_simp_attr', 'scoped', 'structure', 'syntax', 'theorem' or 'unif_hint'</code>)</p>",
        "id": 343261631,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679365118
    },
    {
        "content": "<p>Putting the <code>set_option</code> one line higher works though</p>",
        "id": 343261697,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679365188
    },
    {
        "content": "<p>As in, works completely?</p>",
        "id": 343261708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679365198
    },
    {
        "content": "<p>no, with the <code>set_option</code> one line higher, the original error still remains, but I don't get an error from the <code>set_option</code></p>",
        "id": 343261802,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679365248
    },
    {
        "content": "<p>The two different errors are independent</p>",
        "id": 343261805,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679365254
    },
    {
        "content": "<p>The error you were getting was because of the docstring. Docstring was looking for the <code>def</code> but instead saw <code>set_option</code></p>",
        "id": 343267544,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679369187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncomputable.20definitions.20in.20!4.233007/near/343255863\">said</a>:</p>\n<blockquote>\n<p><code>FreeAlgebra.lift</code> shouldn't be non-computable</p>\n</blockquote>\n<p>I am the one that ported <code>FreeAlgebra</code>. Last time I encountered a problem with <code>recOn</code>, the easy fix was to mark the definition as <code>noncomputable</code>, but I can see it is not the best option. Sorry about that. <br>\nI'll make a new PR today or tomorrow to remove the <code>noncomputable</code> I added  in this file.</p>",
        "id": 343290222,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1679382934
    },
    {
        "content": "<p>There was some PR that automated the creation of compiled recursors, right? What's the status of that?</p>",
        "id": 343290392,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679383003
    },
    {
        "content": "<blockquote>\n<p>I'll make a new PR today or tomorrow to remove the <code>noncomputable</code> I added  in this file.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3011\">!4#3011</a><br>\n(Thanks Adam for the correct code!)</p>",
        "id": 343309454,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1679389276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I just merged the now-landed <a href=\"https://github.com/leanprover-community/mathlib4/pull/3011\">!4#3011</a> into my PR. Now neither <code>rfl</code> or anything described in this thread works. What do I do?</p>",
        "id": 343349319,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679399972
    },
    {
        "content": "<p>I'm having a look now</p>",
        "id": 343629944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679480312
    },
    {
        "content": "<p>It turns out we were missing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv.to_equiv_eq_coe\">docs#ring_equiv.to_equiv_eq_coe</a>, which is not a tautology in Lean4 after all (<a href=\"https://github.com/leanprover-community/mathlib4/pull/3035\">!4#3035</a>)</p>",
        "id": 343630168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679480363
    },
    {
        "content": "<p>I think the problem is that the new definition of <code>lift</code> uses <code>brecOn</code> on <code>recOn</code></p>",
        "id": 343634269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679481156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Noncomputable.20definitions.20in.20!4.233007/near/343256099\">said</a>:</p>\n<blockquote>\n<p>Right, the standard fix is to copy what I did with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.rec_eq_recC#doc\">docs4#Nat.rec_eq_recC</a></p>\n</blockquote>\n<p>So I think we should probably do this after all, instead of <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>'s suggestion</p>",
        "id": 343634706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679481240
    },
    {
        "content": "<p>I misdiagnosed it; your proof fails because the <code>irreducible</code> attribute (which was previously lost in porting) has been restored</p>",
        "id": 343640748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679482682
    },
    {
        "content": "<p>OK, what now?</p>",
        "id": 343654424,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679486370
    },
    {
        "content": "<p><code>star_algebraMap</code> should prove it directly</p>",
        "id": 343661488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679488029
    },
    {
        "content": "<p>Or wait for <a href=\"https://github.com/leanprover-community/mathlib4/pull/3035\">!4#3035</a> then the original mathlib3 proof will work</p>",
        "id": 343661564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679488053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Well I've restored the original proof with the added-back simp theorems and it works now, thank you</p>",
        "id": 343707902,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1679498136
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3035\">!4#3035</a> is now passing CI</p>",
        "id": 343939940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679569191
    }
]