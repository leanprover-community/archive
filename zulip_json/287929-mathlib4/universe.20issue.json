[
    {
        "content": "<p>In the following code (which is <a href=\"https://github.com/leanprover-community/mathlib4/pull/2712/files#diff-bdf99f608dbfa1aa55eb2722832ecc408e6c92d8ff93cea9c45cce42e0ff0b84R102-R119\">https://github.com/leanprover-community/mathlib4/pull/2712/files#diff-bdf99f608dbfa1aa55eb2722832ecc408e6c92d8ff93cea9c45cce42e0ff0b84R102-R119</a> from <a href=\"https://github.com/leanprover-community/mathlib4/pull/2712\">!4#2712</a>), some instances cannot be inferred, like <code>HasLimit F</code> for a functor <code>J  ⥤ Type max v u</code> (where <code>J : Type v</code> is a small category). Even if I define this instance explicitly (as <code>test</code>), the instance of <code>HasLimit F</code> is not found in the definition <code>limitEquivSections</code>. It is however found if <code>u=v</code>, see <code>limitEquivSections_test</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasLimit</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Types.hasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_limit</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasLimit</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"n\">test.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">F</span>\n\n<span class=\"sd\">/-- The equivalence between the abstract limit of `F` in `Type u`</span>\n<span class=\"sd\">and the \"concrete\" definition as the sections of `F`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">limitEquivSections</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">limit</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">F.sections</span> <span class=\"o\">:=</span>\n  <span class=\"n\">isLimitEquivSections.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.limits.types.limit_equiv_sections</span> <span class=\"n\">CategoryTheory.Limits.Types.limitEquivSections</span>\n\n<span class=\"c1\">-- the following works</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">limitEquivSections_test</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">limit</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">F.sections</span> <span class=\"o\">:=</span>\n  <span class=\"n\">isLimitEquivSections.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I do not know how to fix this apart from adding everywhere <code>[HasLimit F]</code> as an assumption.</p>",
        "id": 340312659,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678269516
    },
    {
        "content": "<p>In similar situations I had to do a <code>haveI</code> after the colon.</p>",
        "id": 340338922,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678276358
    },
    {
        "content": "<p>Thanks! Indeed, the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">hasLimit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HasLimit</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Types.hasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_limit</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">limitEquivSections</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">limit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">hasLimit.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">F.sections</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hasLimit.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">isLimitEquivSections.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">limit.isLimit</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340368390,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678284117
    },
    {
        "content": "<p>And I am doing this right now because of <code>Function.comp</code>...</p>",
        "id": 340399857,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678290817
    },
    {
        "content": "<p>Are we going to have to use <code>haveI</code> whenever we do anything with limits now? That doesn't seem good.</p>",
        "id": 340406027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678292186
    },
    {
        "content": "<p>I still have mixed feelings about allowing arbitrary universes in the indexing categories for (co)limits. It seems to me that this was causing too many issues to be worthwhile even in lean3, and maybe things are even worse in lean4?</p>",
        "id": 340407400,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678292547
    },
    {
        "content": "<p>I don't think it is universes. It is computation inside the limit classes generally</p>",
        "id": 340426530,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678297404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/universe.20issue/near/340407400\">said</a>:</p>\n<blockquote>\n<p>I still have mixed feelings about allowing arbitrary universes in the indexing categories for (co)limits. It seems to me that this was causing too many issues to be worthwhile even in lean3, and maybe things are even worse in lean4?</p>\n</blockquote>\n<p>I am not sure it will be such a problem, apart from a few API files. For example, the following works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">HasColimit</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">HasLimit</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 340430612,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678298581
    },
    {
        "content": "<p>Okay, so maybe it's only as bad as it was in lean3 :)</p>",
        "id": 340433491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678299423
    },
    {
        "content": "<p>Was <code>max</code> or <code>\\circ</code> a problem there?</p>",
        "id": 340434219,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678299655
    },
    {
        "content": "<p>It seems the problem was with <code>max</code>.</p>",
        "id": 340453341,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678305627
    },
    {
        "content": "<p>Sorry, I meant could Lean 3 handle <code>max</code> or <code>Function.comp</code> in these places?</p>",
        "id": 340453503,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678305670
    },
    {
        "content": "<blockquote>\n<p>feat: port CategoryTheory.Limits.Types <a href=\"https://github.com/leanprover-community/mathlib4/pull/2712\">!4#2712</a> </p>\n</blockquote>\n<p>This PR adds a lot of <code>haveI</code>s. Are we happy with that? Should there be an issue for this?<br>\n<span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> you seem to think that this <code>haveI</code>-issue is only restricted to a few files, right? So maybe we can just move along?</p>",
        "id": 340781348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678433347
    },
    {
        "content": "<p>Is this an eta thing?</p>",
        "id": 340781644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678433485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/universe.20issue/near/340781348\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> you seem to think that this <code>haveI</code>-issue is only restricted to a few files, right?</p>\n</blockquote>\n<p>I would speculate that the problem was specific to limits in <code>Type</code>. For standard bundled categories (those in <code>algebra/category</code>), only one universe will appear, so that there should be less problems.</p>",
        "id": 340792107,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678437386
    },
    {
        "content": "<p>Universe unification does seem to have got much worse in Lean4. I might open an issue about it.</p>",
        "id": 340793957,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678438004
    }
]