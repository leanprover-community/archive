[
    {
        "content": "<p>It seems that <code>contrapose!</code> doesn't like <code>this</code> as argument. So I'm renaming assumptions to <code>H</code> and then <code>contrapose! H</code> is happy.<br>\nProbably some small bug lurking somewhere.</p>",
        "id": 329155962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676976237
    },
    {
        "content": "<p>yep, it's a recurring issue, see <a href=\"#narrow/stream/287929-mathlib4/topic/.60guard_hyp.60.3A.20can't.20guard.20this\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60guard_hyp.60.3A.20can't.20guard.20this</a></p>",
        "id": 329156378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676976359
    },
    {
        "content": "<p>An alternative solution would be to, instead of restricting <code>this</code> back to <code>ident</code>, extend hypothesis-taking tactics to <code>term:max</code> so that <code>contrapose! ‹foo›</code> would also be accepted</p>",
        "id": 329158978,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676977005
    },
    {
        "content": "<p>I think it is unlikely to be possible to do this everywhere a local constant can be mentioned</p>",
        "id": 329159882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676977266
    },
    {
        "content": "<p><code>if ‹_› : p then e else f</code>?</p>",
        "id": 329160273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676977373
    },
    {
        "content": "<p>That's a significantly more ambitious change than <a href=\"https://github.com/leanprover/lean4/pull/2105\">lean4#2105</a> . You should look at all of those examples and see whether <code>‹_›</code> makes sense in them</p>",
        "id": 329160568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676977459
    },
    {
        "content": "<p>That's a binding, not a reference. I know Lean 3 accepted <code>this</code> as a binding as well, is it desirable to restore this behavior, for the port or in general?</p>",
        "id": 329160986,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676977588
    },
    {
        "content": "<p>Of course <code>this</code> can be a binding</p>",
        "id": 329161032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676977604
    },
    {
        "content": "<p>it's normally being used as a binding in these examples</p>",
        "id": 329161068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676977615
    },
    {
        "content": "<p>when you want a <code>ident_</code> it's usually a binding</p>",
        "id": 329161125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676977633
    },
    {
        "content": "<p>for references we usually use <code>term</code> (and don't even restrict to fvars, any proof will do)</p>",
        "id": 329161185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676977655
    },
    {
        "content": "<p>I think there is strong evidence to suggest that people don't treat <code>this</code> specially as a binding / identifier in the majority of cases</p>",
        "id": 329161488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676977749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/contrapose!.20this/near/329161185\">said</a>:</p>\n<blockquote>\n<p>for references we usually use <code>term</code> (and don't even restrict to fvars, any proof will do)</p>\n</blockquote>\n<p>Well this thread is about such a tactic that takes a hypothesis reference, so that's what I focused on. Any tactic with <code>at</code> falls under this case.</p>",
        "id": 329161976,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676977889
    },
    {
        "content": "<p>So my proposal really is complementary to your PR: accept <code>binderIdent</code> for bindings, accept <code>term:max</code> for hypothesis references. In combination they could be used to solve the <code>this</code> problem (by further extending <code>binderIdent</code> if desired), but they can also be desirable independently.</p>",
        "id": 329163348,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676978338
    },
    {
        "content": "<p>Doesn't accepting <code>term:max</code> for hypothesis references mean that nonsense like <code>revert (x + 1)</code> becomes syntactically legal?</p>",
        "id": 329165984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676979193
    },
    {
        "content": "<p>Adding <code>this</code> to <code>binderIdent</code> would be a possibility, but currently it's really painful to deal with those special cases and that's why it's so bug-prone</p>",
        "id": 329166109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/contrapose!.20this/near/329161976\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/contrapose!.20this/near/329161185\">said</a>:</p>\n<blockquote>\n<p>for references we usually use <code>term</code> (and don't even restrict to fvars, any proof will do)</p>\n</blockquote>\n<p>Well this thread is about such a tactic that takes a hypothesis reference, so that's what I focused on. Any tactic with <code>at</code> falls under this case.</p>\n</blockquote>\n<p>No, <code>contrapose</code> is like <code>by_cases</code>, it introduces a binding</p>",
        "id": 329166375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979295
    },
    {
        "content": "<p>actually it's a bit of a combo, it reverts a hypothesis named <code>h</code> and then introduces a binding named <code>h</code></p>",
        "id": 329166661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979377
    },
    {
        "content": "<p>Right, but syntactically I'd say it's a reference primarily. <code>contrapose _</code> doesn't make sense.</p>",
        "id": 329166819,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676979431
    },
    {
        "content": "<p>it is both a binding and a term, so it needs to be in the intersection of their grammars</p>",
        "id": 329166913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979478
    },
    {
        "content": "<p>technically that includes <code>_</code> but you would never be able to infer the <code>_</code> so that's not so useful</p>",
        "id": 329167023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/contrapose!.20this/near/329165984\">said</a>:</p>\n<blockquote>\n<p>Doesn't accepting <code>term:max</code> for hypothesis references mean that nonsense like <code>revert (x + 1)</code> becomes syntactically legal?</p>\n</blockquote>\n<p>Syntactically legal yes, but usually the pattern here is to elaborate the expression and assert that the result is an <code>fvar</code></p>",
        "id": 329167226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979572
    },
    {
        "content": "<p>you can even throw a \"syntax exception\" if it's not if you want to make it look like a syntax error</p>",
        "id": 329167359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979600
    },
    {
        "content": "<p>the main justification for using terms that elaborate to fvars is using <code>‹_›</code></p>",
        "id": 329167720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/contrapose!.20this/near/329166913\">said</a>:</p>\n<blockquote>\n<p>it is both a binding and a term, so it needs to be in the intersection of their grammars</p>\n</blockquote>\n<p>That's not really true because you would use the syntax to resolve the reference and then use the resolved identifier as the binding. <code>contrapose ‹foo›</code> could definitely be made to work.</p>",
        "id": 329167955,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676979762
    },
    {
        "content": "<p>okay, but that's definitely not a general fact about binderIdents</p>",
        "id": 329168138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979818
    },
    {
        "content": "<p>Yes, but there <em>is</em> a general kind of tactics that \"manipulate\" a given hypothesis where users might not think of it being referenced and then rebound but changed \"in place\"</p>",
        "id": 329168329,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676979873
    },
    {
        "content": "<p>I agree that <code>at h</code> can have this kind of treatment</p>",
        "id": 329168466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979914
    },
    {
        "content": "<p><code>ident</code>s are just so common throughout the grammar that it seems we need to make common things easy (rather than easy to get slightly wrong)</p>",
        "id": 329168788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676979994
    },
    {
        "content": "<p>In the end, there is the question of whether we want to allow use of macros for either of these currently closed categories, binders and hypothesis references. Because that's what <code>this</code> really is, a macro for an internal identifier. But I understand that it is also common enough that we might want to solve its issues without touching macro support at large in that place.</p>",
        "id": 329169161,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676980107
    },
    {
        "content": "<p>why can't it just be a regular word? There are only a small handful of things that need to be patched to make that work, but if you grep for uses of <code>ident</code> in lean4 and mathlib4 it's just depressing how many things have to be reviewed</p>",
        "id": 329169392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676980190
    },
    {
        "content": "<p>macros for idents is definitely a can of worms. I have no idea how feasible that really is</p>",
        "id": 329169888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676980339
    },
    {
        "content": "<p>if this <a href=\"https://github.com/rust-lang/rust/issues/29599\">7 year old rust RFC</a> on the topic is any indication</p>",
        "id": 329170029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676980398
    },
    {
        "content": "<p>Yeah, I'm definitely not suggesting to touch more than the two limited categories I mentioned. Some discussion on how <code>this</code> could be preserved as an ident and issues with that happened in the original issue <a href=\"https://github.com/leanprover/lean4/issues/821\">https://github.com/leanprover/lean4/issues/821</a></p>",
        "id": 329170796,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676980636
    },
    {
        "content": "<blockquote>\n<p>Because that's what <code>this</code> really is, a macro for an internal identifier.</p>\n</blockquote>\n<p>I'm not sure how this definition doesn't also say that <em>identifiers</em> are macros for internal identifiers though</p>",
        "id": 329171231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676980774
    },
    {
        "content": "<p>Here's a fun example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>Hard to see how to do that with macro-<code>this</code></p>",
        "id": 329171664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676980893
    },
    {
        "content": "<p>oof...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">...</span>\n<span class=\"sd\">The form `#help option id` will show only options that begin with `id`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#help\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"option\"</span> <span class=\"n\">id</span><span class=\"o\">:(</span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n</code></pre></div>",
        "id": 329172879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676981282
    },
    {
        "content": "<p>actually this one is spoiled by any keywords at all. Isn't there a <code>rawIdent</code> for this?</p>",
        "id": 329173112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676981354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/contrapose!.20this/near/329171664\">said</a>:</p>\n<blockquote>\n<p>Here's a fun example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>Hard to see how to do that with macro-<code>this</code></p>\n</blockquote>\n<p>I've asked about this above without an answer, but now I'm getting more convinced that in <em>any</em> solution (that requires customizing how <code>this</code> behaves as a reference), <code>this</code> should not be available as a binder name. Allowing users to introduce a magical identifier name whose hygiene behavior is different from any other identifier is a catastrophe. It should only be introduced by custom anaphoric elaborators like <code>have</code>, and by \"hypothesis manipulating\" tactics like discussed above.</p>",
        "id": 329173809,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676981570
    },
    {
        "content": "<blockquote>\n<p>Allowing users to introduce a magical identifier name whose hygiene behavior is different from any other identifier is a catastrophe.</p>\n</blockquote>\n<p>I think this is the root of the issue. I <em>disagree that <code>this</code> should be magical at all</em>. It's just a variable name with no magical hygiene behavior</p>",
        "id": 329174050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676981645
    },
    {
        "content": "<p>The magic is entirely contained to macros that want to create a hygiene-less <code>this</code> identifier, e.g. <code>have :=</code>, which macros can already easily do using <code>$(mkIdent `this)</code></p>",
        "id": 329174283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676981710
    },
    {
        "content": "<p>That was exactly the state when <a href=\"https://github.com/leanprover/lean4/issues/821\">https://github.com/leanprover/lean4/issues/821</a> was opened</p>",
        "id": 329174449,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676981760
    },
    {
        "content": "<p>We already have many tactics in mathlib4 that do this kind of thing with names other than <code>this</code>, for example <code>by_cases</code> which introduces <code>h</code> instead</p>",
        "id": 329174526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676981770
    },
    {
        "content": "<p>yes, I'm suggesting that the fix be reverted because the cure is worse</p>",
        "id": 329174620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676981801
    },
    {
        "content": "<p>I see, then at least I understand your PoV now</p>",
        "id": 329174846,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676981863
    },
    {
        "content": "<p>while looking at examples I even found an example which is using this kind of trick for <code>this</code> itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_contra'</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"bp\">%$</span><span class=\"n\">under</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_contra'</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdentFrom</span> <span class=\"o\">(</span><span class=\"n\">under.getD</span> <span class=\"n\">tk</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">canonical</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)):</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_contra'</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">by_contra</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_contra'</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n       <span class=\"o\">(</span><span class=\"n\">by_contra'</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n        <span class=\"c1\">-- if the below `exact` call fails then this tactic should fail with the message</span>\n        <span class=\"c1\">-- tactic failed: &lt;goal type&gt; and &lt;type of h&gt; are not definitionally equal</span>\n        <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">push_neg</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n        <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 329174865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676981868
    },
    {
        "content": "<p>For the sake of completeness, a solution for keeping <code>this</code> as a regular identifier but make it work inside quotations as well would be for the <code>have</code> elaborator to attach the <em>caller's macro scopes</em> (if any) to the introduced identifier. But that's not a concept that really exists in the current macro system.</p>",
        "id": 329175820,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676982105
    },
    {
        "content": "<p>Can that be done by using <code>%$tk</code> stuff like in the above example?</p>",
        "id": 329176063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676982169
    },
    {
        "content": "<p>That is, if the <code>have</code> keyword had macro scopes, we could transplant them onto <code>this</code>. But currently only identifiers carry macro scopes.</p>",
        "id": 329176156,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676982203
    },
    {
        "content": "<p>another possibility is to have a <code>macroScope</code> parser that parses nothing but captures the scope into an identifier</p>",
        "id": 329176270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676982244
    },
    {
        "content": "<p>kind of like <code>ident</code> except it parses the empty string</p>",
        "id": 329176327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676982256
    },
    {
        "content": "<p>so then you could introduce that in a parser like <code>have :=</code></p>",
        "id": 329176374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676982275
    },
    {
        "content": "<p>Yes, some kind of special node the quotation elaborator attaches macro scopes to, instead of to all keywords which sounds wasteful (though Racket essentially does it, as it doesn't have a concept of keywords anyway)</p>",
        "id": 329176821,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676982386
    },
    {
        "content": "<p>it still probably would not be enough to write tactics like <code>by_contra'</code> without using <code>$(...)</code>, since you would in most cases want to combine the macro scopes from this special node, the span from another node, and a name like <code>\"this\"</code> to form the resulting identifier</p>",
        "id": 329177458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676982570
    },
    {
        "content": "<p>It's not really possible to combine macro scopes from different sources - in the end, they represent a single lexical scope from the input. But it should be possible to forward the captured scopes so that macros like <code>by_contra'</code> can put <code>this</code> in <em>their</em> caller's scope.</p>",
        "id": 329218369,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676993041
    },
    {
        "content": "<p>sorry, I didn't mean to combine multiple macro scopes. I meant that you might want to <em>assemble</em> an identifier from a string, a span, and a macro scope, all coming from different places</p>",
        "id": 329250808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677001166
    },
    {
        "content": "<p>in the <code>by_contra'</code> example we want the span to come from either the <code>by_contra'</code> token or the <code>_</code>, the macro scope to come from the proposed <code>macroScope</code> node (that would be added as an additional parser in <code>by_contra'</code>), and the string is <code>\"this\"</code>, written explicitly in the macro source somehow</p>",
        "id": 329251259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677001272
    },
    {
        "content": "<p>the present implementation has 2 out of those 3 things; the macro scope is currently empty (unhygienic) due to use of <code>mkIdentFrom</code></p>",
        "id": 329251540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677001362
    },
    {
        "content": "<p>the point being that if you want some fancy sigil expression it will have to take at least 3 things, which will be a bit of a mess: <code>this%$tk%!scope</code>?</p>",
        "id": 329251987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677001470
    },
    {
        "content": "<p>at that point it seems preferable to just use <code>$(...)</code> and call a proper function</p>",
        "id": 329252153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677001517
    },
    {
        "content": "<p>Oh yes, this is such a special case (on the definition side) that it should just be a <code>mkIdent</code> variant</p>",
        "id": 329252991,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677001727
    },
    {
        "content": "<p>Or rather something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_contra'</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">ms</span><span class=\"o\">:</span><span class=\"n\">macroScopes</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"bp\">%$</span><span class=\"n\">under</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">by_contra'</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdentFrom</span> <span class=\"o\">(</span><span class=\"n\">under.getD</span> <span class=\"n\">tk</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ms.applyMacroScopes</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">canonical</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)):</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 329253807,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677001930
    }
]