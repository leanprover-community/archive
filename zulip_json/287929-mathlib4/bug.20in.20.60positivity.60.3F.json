[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> 's PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2685\">!4#2685</a> rewrites <code>positivity</code> thanks to some very nice new <code>Qq</code> functionality.  It seems to have broken certain <code>positivity</code> applications, though.  Here is a test case: a <code>positivity</code> call occurring as a discharger inside <code>solve_by_elim</code> is broken.</p>\n<p>It's not broken when I try to replicate the behaviour with the <code>positivity</code> call outside the <code>solve_by_elim</code> application, so I'm having trouble tracking it down further.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">dummy_label_attr</span><span class=\"o\">]</span> <span class=\"n\">le_refl</span> <span class=\"n\">add_le_add</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">dummy_label_attr</span>\n  <span class=\"n\">positivity</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PositivityDischarge</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">withTransparency</span> <span class=\"bp\">.</span><span class=\"n\">reducible</span> <span class=\"o\">(</span><span class=\"n\">Meta.Positivity.positivity</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">[])</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n\n<span class=\"c1\">-- works before #2685, fails on #2685 with \"not a positivity goal\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">discharge</span> <span class=\"o\">:=</span> <span class=\"n\">PositivityDischarge</span> <span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">dummy_label_attr</span>\n</code></pre></div>",
        "id": 340238235,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678233575
    },
    {
        "content": "<p>This is the goal that <code>positivity</code> is called on.  I'm not sure how this worked before.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n</code></pre></div>",
        "id": 340239025,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678233925
    },
    {
        "content": "<p>It used to be called on <code>0 ≤ x</code> (to make the <code>mul_le_mul_of_nonneg_right</code> application work).</p>",
        "id": 340239220,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678234005
    },
    {
        "content": "<p>That is, <code>apply mul_le_mul_of_nonneg_right</code> generates two subgoals and <code>positivity</code> discharged one of them.</p>",
        "id": 340239264,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678234031
    },
    {
        "content": "<p>This doesn't work either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n</code></pre></div>",
        "id": 340241161,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678234885
    },
    {
        "content": "<p>Wait, that's with x negative though!</p>",
        "id": 340241177,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678234900
    },
    {
        "content": "<p>Oh <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 340241330,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678234977
    },
    {
        "content": "<p>Apparently, it can't prove that two typeclass instances are defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CommMonoidWithZero.toZero</span> <span class=\"bp\">=?=</span> <span class=\"n\">MonoidWithZero.toZero</span>\n</code></pre></div>",
        "id": 340245142,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237024
    },
    {
        "content": "<p>I just reached the same conclusion myself, and had come over to report it :-)</p>",
        "id": 340245232,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678237052
    },
    {
        "content": "<p>Fixed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">dummy_label_attr</span><span class=\"o\">]</span> <span class=\"n\">le_refl</span> <span class=\"n\">add_le_add</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PositivityDischarge</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">withDefault</span> <span class=\"o\">(</span><span class=\"n\">Meta.Positivity.positivity</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">[])</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">discharge</span> <span class=\"o\">:=</span> <span class=\"n\">PositivityDischarge</span> <span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">dummy_label_attr</span>\n</code></pre></div>",
        "id": 340245239,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237057
    },
    {
        "content": "<p>Thank you!  I don't understand the fix, though -- is it the <code>withDefault</code>?  What does that do?</p>",
        "id": 340245343,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678237134
    },
    {
        "content": "<p>It replaces the <code>withTransparency .reducible</code> in my version?</p>",
        "id": 340245436,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678237194
    },
    {
        "content": "<p>Or do I want them both?</p>",
        "id": 340245508,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678237212
    },
    {
        "content": "<p>Yes, it's defined as <code>withTransparency .default</code></p>",
        "id": 340245535,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237234
    },
    {
        "content": "<p>(There's also <code>withReducible</code>)</p>",
        "id": 340245543,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237242
    },
    {
        "content": "<p>The withReducible is too strong, positivity expect(s/ed) the transparency to be default.  It compares a lot of type class instances using isDefEq (thus requiring default transparency), and adds withReducible itself.</p>",
        "id": 340245652,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237316
    },
    {
        "content": "<p>is this what that <code>assertInstancesCommute</code> macro does?</p>",
        "id": 340245754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237366
    },
    {
        "content": "<p>because if so I would like to remove it from the places it's been added and put <code>assumeInstancesCommute</code> instead</p>",
        "id": 340245809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237413
    },
    {
        "content": "<p>Yes, the assertInstancesCommute macro adds isDefEq calls.</p>",
        "id": 340245859,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237442
    },
    {
        "content": "<blockquote>\n<p>because if so I would like to remove it from the places it's been added and put assumeInstancesCommute instead</p>\n</blockquote>\n<p>Why?</p>",
        "id": 340245919,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237459
    },
    {
        "content": "<p>because that's the number one performance issue in these tactics</p>",
        "id": 340245949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237484
    },
    {
        "content": "<p>plus asserting that the instances themselves are equal is more than needed in most cases</p>",
        "id": 340246000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237533
    },
    {
        "content": "<p>we only need to know that some projections off the instances are equal</p>",
        "id": 340246017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237554
    },
    {
        "content": "<p>If this defeq call saved work later that would be a different situation, but here it is pure overhead</p>",
        "id": 340246101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237585
    },
    {
        "content": "<p>We don't check that the projections are equal though.</p>",
        "id": 340246324,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237686
    },
    {
        "content": "<p>The result of isDefEq is also cached.</p>",
        "id": 340246347,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237702
    },
    {
        "content": "<p>no, we just go right ahead and construct the term and it crashes and burns in the kernel if it's not defeq</p>",
        "id": 340246369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237721
    },
    {
        "content": "<p>I don't think improving the error message when there is an instance diamond is worth the performance degradation in normal uses of the tactic</p>",
        "id": 340246599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237813
    },
    {
        "content": "<p>because you will be breaking out a debugger when something goes wrong in these tactics in any case</p>",
        "id": 340246622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237834
    },
    {
        "content": "<p>yes, the result of isDefEq is cached, that's what I tell myself but the profiler doesn't lie, it is very hot code</p>",
        "id": 340246716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237912
    },
    {
        "content": "<p>There's plenty of cases with type tags like <code>WithTop</code> etc. where you can run into noncanonical instances.</p>",
        "id": 340246792,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237941
    },
    {
        "content": "<p>if the instances are not defeq then we're going to fail anyway</p>",
        "id": 340246827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678237974
    },
    {
        "content": "<blockquote>\n<p>because if so I would like to remove it from the places it's been added and put assumeInstancesCommute instead</p>\n</blockquote>\n<p>isDefEq is obviously hot, because it also does unification with lots of backtracking, has super expensive nested TC synthesis etc.  All of this doesn't happen here.</p>",
        "id": 340246830,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678237981
    },
    {
        "content": "<p>I mean, I ran a profiler with and without the isDefEq call and it was a significant improvement</p>",
        "id": 340246876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678238022
    },
    {
        "content": "<p>this is how <code>ring</code> was originally written after all</p>",
        "id": 340246991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678238083
    },
    {
        "content": "<p>In any case, there's an <code>assumeInstancesCommute</code> now.</p>",
        "id": 340248407,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678239061
    }
]