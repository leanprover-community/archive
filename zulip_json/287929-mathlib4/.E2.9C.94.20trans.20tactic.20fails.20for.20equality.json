[
    {
        "content": "<p>I am confused; I have a goal state that clearly looks like a simple equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">hp1</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span>\n<span class=\"n\">hp2</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h2len</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span>\n<span class=\"n\">hnn0</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">En</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">Finset.sup'</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Finset.Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Yet if I use the <code>trans</code> tactic (with or without a term), I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">transitivity</span> <span class=\"n\">lemmas</span> <span class=\"n\">only</span> <span class=\"n\">apply</span> <span class=\"n\">to</span> <span class=\"n\">binary</span> <span class=\"n\">relations</span><span class=\"o\">,</span> <span class=\"n\">not</span>\n  <span class=\"o\">(</span><span class=\"n\">En</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">Finset.sup'</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Finset.Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I can use <code>apply (@Eq.trans _ _ (some term))</code>.<br>\nWhat could be causing this?<br>\n(Lean4, mathlib4)</p>",
        "id": 358907007,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684306897
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but from the code I think it is missing a whnfR / instantiateMVars</p>",
        "id": 358907667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684307161
    },
    {
        "content": "<p>also this is not the right place to report tactic bugs, <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> is better</p>",
        "id": 358907761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684307193
    },
    {
        "content": "<p>mea culpa for not <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>’ing, I should get better at it. I tried a very minimal example, but there it worked.<br>\nYou think this might be a genuine bug, and not PEBKAC?<br>\n(I’d move this to the other stream but it seems I cannot)</p>",
        "id": 358908460,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684307491
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/trans.20tactic.20fails.20for.20equality\">#Is there code for X? &gt; trans tactic fails for equality</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 358909796,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684308044
    },
    {
        "content": "<p>well it is difficult to reproduce with this description, you haven't shown the proof</p>",
        "id": 358909942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684308106
    },
    {
        "content": "<p>Here is a (unfortunately non-minimal) working example; the repo is a lake'ified,<br>\n<code>trans</code> in this line fails: <a href=\"https://github.com/nomeata/rerolling-sixes/blob/537ebaa7de747d882a4573555c946e7bd5a4bd9a/RerollingSixes.lean#L304\">https://github.com/nomeata/rerolling-sixes/blob/537ebaa7de747d882a4573555c946e7bd5a4bd9a/RerollingSixes.lean#L304</a><br>\nNot expecting anyone to look at a non-minimal example, but my lean time for today is up. I might try to minimize some other time, but for now I’m unblocked using <code>apply Eq.trans</code>. Thanks!</p>",
        "id": 358918028,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684311145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> has marked this topic as resolved.</p>",
        "id": 358918051,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684311151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> This is a known bug and there's already a PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/3768\">mathlib4#3768</a></p>",
        "id": 358929367,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684314578
    },
    {
        "content": "<p><code>apply Eq.trans</code> is a good workaround for now</p>",
        "id": 358929684,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684314685
    }
]