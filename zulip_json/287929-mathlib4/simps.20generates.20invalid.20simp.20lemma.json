[
    {
        "content": "<p>In the porting PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2466\">!4#2466</a> it seems that simps is generating some invalid simp lemma on line 266. The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Invalid</span> <span class=\"n\">simp</span> <span class=\"kd\">lemma</span> <span class=\"n\">CategoryTheory.monoidalCounit_app.</span>\n<span class=\"n\">The</span> <span class=\"n\">given</span> <span class=\"kd\">definition</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">constructor</span> <span class=\"n\">application</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">asEquivalence</span> <span class=\"n\">F.toLaxMonoidalFunctor.toFunctor</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">counitIso.1</span>\n</code></pre></div>\n<p>I'd like to get this PR moving quickly because there are now multiple porting PRs depending on it (sorry for slacking with this PR!).</p>\n<p>I haven't spent much time investigating, but I thought I would mention it here in case someone (<span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> ?) knows of a quick fix.</p>",
        "id": 344295530,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679671041
    },
    {
        "content": "<p>Here's a cut down version of the decl in question with the relevant data:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps!]</span> <span class=\"c1\">-- error here...</span>\n<span class=\"kd\">def</span> <span class=\"n\">monoidalCounit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">MonoidalFunctor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsEquivalence</span> <span class=\"n\">F.toFunctor</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">monoidalInverse</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLaxMonoidalFunctor</span> <span class=\"bp\">⊗⋙</span> <span class=\"n\">F.toLaxMonoidalFunctor</span> <span class=\"bp\">⟶</span> <span class=\"n\">LaxMonoidalFunctor.id</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toNatTrans</span> <span class=\"o\">:=</span> <span class=\"n\">F.toFunctor.asEquivalence.counit</span>\n    <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">tensor</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 344296981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679671320
    },
    {
        "content": "<p>well, it seems that in mathlib3 the only lemma that was generated by simps was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_counit_trans_to_nat_trans\">docs#category_theory.monoidal_counit_trans_to_nat_trans</a> and for some reason simps! in mathlib4 is trying to go via a counitIso.1 = counitIso.hom. I can fix this by replacing <code>simps!</code> with <code>simps! toNatTrans</code> for now. But this is something that should still be investigated.</p>",
        "id": 344299671,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679671830
    },
    {
        "content": "<p>The default behavior of <code>@[simps]</code> has changed between Lean 3 and Lean 4 when generating simp lemmas for structures extending other structures. The new default is that <code>simps</code> generates all the nested projections, which in this case would be the <code>app</code> field of <code>NatTrans</code>. This is the desired behavior in the algebraic hierarchy. <br>\nIn the category library this is not always desired (maybe never even), and you want to actually generate the <code>toNatTrans</code> field. You can get<code>simps</code>  to use the previous behavior if you write (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">MonoidalNatTrans</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">app</span><span class=\"o\">,</span> <span class=\"bp\">+</span><span class=\"n\">toNatTrans</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You have to do this for every structure in the category theory library that extends another structure.</p>",
        "id": 344337429,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1679681078
    },
    {
        "content": "<p>Thanks for the clarification Floris! I wonder if errors such as this could be handled more gracefully by progressively dropping the last projection until the error goes away? In this case <code>simps!</code> did indeed just fail with the error above.</p>",
        "id": 344362336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679689730
    },
    {
        "content": "<p>Although such a feature would probably make things harder to diagnose when they go wrong.</p>",
        "id": 344362390,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1679689753
    }
]