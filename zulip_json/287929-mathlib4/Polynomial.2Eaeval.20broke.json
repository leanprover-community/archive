[
    {
        "content": "<p>Importing all of mathlib breaks usage of <code>aeval</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">function expected at</span>\n<span class=\"cm\">  aeval 1</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  ?m.5[X] ‚Üí‚Çê[?m.5] ‚Ñ§</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero'</span>\n\n<span class=\"sd\">/-- Fine -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero'</span>\n</code></pre></div>\n<p>Not importing all of Mathlib does not give that error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.AlgebraMap</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"sd\">/-- Fine -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero'</span>\n\n<span class=\"sd\">/-- Fine -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero'</span>\n</code></pre></div>",
        "id": 405902041,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701719913
    },
    {
        "content": "<p>This shortcut instance seems to fix it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 405905987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701721460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> this has been a problem for a while, but I haven't had time / remembered to track it down. I think this is caused by a bad instance somewhere (like we had for <code>Module.Dual</code> a while back that also caused breakage). Do you have any idea what the problem is here?</p>",
        "id": 405920495,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701728129
    },
    {
        "content": "<p>No, but note that the shortcut instance above matches a pattern of instances that we had in lean 3 but made a mess of (and deleted) during the port</p>",
        "id": 405920604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701728174
    },
    {
        "content": "<p>It would be good to track down exactly which import causes it</p>",
        "id": 405920635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701728200
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Spectrum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">function expected at</span>\n<span class=\"cm\">  aeval 1</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  ?m.5[X] ‚Üí‚Çê[?m.5] ‚Ñ§</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>seems to be one minima</p>",
        "id": 405926574,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701729817
    },
    {
        "content": "<p>is there any way to get the list of all files that do _not_ transitively import a file?</p>",
        "id": 405926652,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701729847
    },
    {
        "content": "<p>(i.e. everything that does not have NormedSpace.Spectrum as a parent)</p>",
        "id": 405926674,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701729865
    },
    {
        "content": "<p>it'd be nice for making sure it's specifically this file</p>",
        "id": 405926684,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701729874
    },
    {
        "content": "<p><code>instance (priority := 100) [AlgHomClass F ùïú A ùïú] : ContinuousLinearMapClass F ùïú A ùïú :=</code> seems to be the culprit</p>",
        "id": 405927196,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701730132
    },
    {
        "content": "<p>another workaround is the direct</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚Üí‚Çê</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">x.toFun</span>\n</code></pre></div>\n<p>which would line up with my proposed fix to <code>FunLike</code></p>",
        "id": 405928323,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701730672
    },
    {
        "content": "<p>That instance you propose is bad without the context of a huge refactor</p>",
        "id": 405929093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701730955
    },
    {
        "content": "<p>I am indeed proposing that refactor (making FunLike.coe not an instance, and requiring all FunLike to require their own CoeFun instance) - <a href=\"#narrow/stream/287929-mathlib4/topic/.60example.20.28p.20.3A.20P.29.20.3A.20Q.20.3A.3D.20p.60.20takes.200.2E25s.20to.20fail!\">see here</a></p>",
        "id": 405929569,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701731192
    }
]