[
    {
        "content": "<p>I have a problem with <code>Function.extend</code>. It seems to me that it is caused by <code>simp</code>.​<br>\nThe following is the test code. Here <code>g1</code> and <code>g2</code> are essentially the same function, both extending the domain of <code>f</code> to the whole <code>α</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">g1</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"n\">_</span>\n  <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">g2</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">X.val</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.propDecidable</span> <span class=\"n\">_</span>\n  <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">X.val</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">g1</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g2</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">g2</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- fail</span>\n  <span class=\"c1\">-- on my computer: ⊢ f (Classical.choose _) = f a</span>\n  <span class=\"c1\">-- on https://lean.math.hhu.de : ⊢ f (Classical.choose (_ : ∃ X, ↑X = ↑a)) = f a</span>\n</code></pre></div>\n<p>I wonder if this is a bug.</p>",
        "id": 394813926,
        "sender_full_name": "Wen Yang",
        "timestamp": 1696416941
    },
    {
        "content": "<p>try <code>simp [Classical.choose_spec]</code>?</p>",
        "id": 394814599,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696417159
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.choose_spec#doc\">docs#Classical.choose_spec</a> I think that's the name, anyways</p>",
        "id": 394814640,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696417171
    },
    {
        "content": "<p><code>simp [Classical.choose_spec]</code> leads to the same result of <code>simp</code></p>",
        "id": 394814901,
        "sender_full_name": "Wen Yang",
        "timestamp": 1696417256
    },
    {
        "content": "<p>Even if it works, I hope <code>simp</code> closes the goal directly.</p>",
        "id": 394815246,
        "sender_full_name": "Wen Yang",
        "timestamp": 1696417381
    },
    {
        "content": "<p>However, <code>simp</code> followed by <code>exact?</code> does not close the goal.</p>",
        "id": 394815652,
        "sender_full_name": "Wen Yang",
        "timestamp": 1696417534
    },
    {
        "content": "<p>I realize that <code>hx</code> is not of type <code>ExistsUnique</code>, so <code>Classical.choose</code> cannot pick <code>a</code> directly. I have to do it manually:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g2</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">g2</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"n\">hX</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choose_spec</span> <span class=\"n\">hx</span>\n    <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">hx</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">SetCoe.ext</span> <span class=\"n\">hX</span>\n    <span class=\"n\">congr</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">revert</span> <span class=\"n\">hx</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this.elim</span>\n</code></pre></div>\n<p>Now I see that the problem is not due to <code>simp</code>. The problem is that it is not convenient to use <code>Function.extend</code> here.​ I have to use <code>Function.Injective.extend_apply</code> and <code>Function.extend_apply'</code>.</p>",
        "id": 394989610,
        "sender_full_name": "Wen Yang",
        "timestamp": 1696494536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416034\">Wen Yang</span> has marked this topic as resolved.</p>",
        "id": 394989617,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696494541
    },
    {
        "content": "<p>I don't see how the problem can be with <code>extend</code> when your code samples above do not mention <code>extend</code>.</p>",
        "id": 395220795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696585711
    },
    {
        "content": "<p>Here is a complete example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Function</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Function</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Function.toval</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n    <span class=\"n\">extend</span> <span class=\"n\">Subtype.val</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Classical.choice</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">toval_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.restrict</span> <span class=\"n\">f.toval</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">restrict_eq</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">funext_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">toval</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_injective</span><span class=\"o\">]</span> <span class=\"c1\">-- If you just use `simp`, it will fail</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">toval_mem_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">f.toval</span> <span class=\"n\">a.val</span> <span class=\"bp\">=</span> <span class=\"n\">b.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">toval</span>\n    <span class=\"c1\">-- If you just use `aesop`, it will fail</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_injective</span><span class=\"o\">,</span> <span class=\"n\">Injective.extend_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">toval</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_injective</span><span class=\"o\">,</span> <span class=\"n\">Injective.extend_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">SetCoe.ext</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 395225684,
        "sender_full_name": "Wen Yang",
        "timestamp": 1696587255
    }
]