[
    {
        "content": "<p>See, e.g., <a href=\"https://github.com/leanprover-community/mathport/actions/runs/5438759147/jobs/9890195349\">https://github.com/leanprover-community/mathport/actions/runs/5438759147/jobs/9890195349</a></p>",
        "id": 371982856,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688386621
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/actions/workflows/predata.yml\">https://github.com/leanprover-community/mathport/actions/workflows/predata.yml</a></p>",
        "id": 371983345,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688386699
    },
    {
        "content": "<p>It looks like a build machine doesn't have mathlibtools and we don't install them as a part of the CI.</p>",
        "id": 371985280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688387054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> You broke it by adding <code>leanproject get-cache</code> in <a href=\"https://github.com/leanprover-community/mathport/pull/244\">https://github.com/leanprover-community/mathport/pull/244</a></p>",
        "id": 372042609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688396993
    },
    {
        "content": "<p>Should we install mathlibtools on the runner or drop this line in the CI?</p>",
        "id": 372061489,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688400430
    },
    {
        "content": "<p>(e.g., by checking for an environment variable)</p>",
        "id": 372061547,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688400442
    },
    {
        "content": "<p>Oh, that is unfortunate. I don't know what the best way to fix it is.</p>",
        "id": 372073906,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688402996
    },
    {
        "content": "<p>Installing mathlibtools as a CI step seems quite a reasonable fix, many of our existing actions already do this</p>",
        "id": 372077137,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1688403583
    },
    {
        "content": "<p>Do we need this cache in CI?</p>",
        "id": 372113399,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688412505
    },
    {
        "content": "<p>If not, then another fix is to do <code>if [[ -z \"$SOME_GITHUB_ENV_VAR\" ]]; then leanproject get-cache; fi</code></p>",
        "id": 372113548,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688412546
    },
    {
        "content": "<p>I mean, if we're going to recompile <code>mathlib</code> anyway, then why bother downloading another 100M?</p>",
        "id": 372113623,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688412576
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/pull/245\">https://github.com/leanprover-community/mathport/pull/245</a></p>",
        "id": 372118487,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688413973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> could you clarify the motivation for the <code>leanproject get-cache</code> and <code>git fetch</code> steps added to the makefile? Those makefile targets are not supposed to be getting a full copy of the project, only enough to make mathport work</p>",
        "id": 372130731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688418513
    },
    {
        "content": "<p>Plus, <code>get-cache</code> can cause conflicts with the oleans downloaded from <code>predata</code>. We also have to ensure that the oleans are <em>not</em> present before running <code>lean --make --ast --tlean</code> because compilation is skipped if they are and then we don't get the <code>ast.json</code> files</p>",
        "id": 372130890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688418601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20fails/near/372130731\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> could you clarify the motivation for the <code>leanproject get-cache</code> and <code>git fetch</code> steps added to the makefile? Those makefile targets are not supposed to be getting a full copy of the project, only enough to make mathport work</p>\n</blockquote>\n<p>If I didn't do that before running <code>mathport oneshot</code>, all of mathlib3 would be compiled when running <code>mathport oneshot</code> on my machine.</p>",
        "id": 372135642,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688420942
    },
    {
        "content": "<p>For <code>mathport oneshot</code> are we supposed to recompile all of mathlib3 with the <code>--ast</code> flag ourselves? <br>\nOr is there a difference with what should happen for the main mathport function and the mathport oneshot function?</p>",
        "id": 372135881,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688421047
    },
    {
        "content": "<p><code>git fetch</code> was added because I already ran <code>mathport oneshot</code> on an earlier version of Lean/mathlib, and the current script just errored with \"unknown commit &lt;sha&gt;\" or something.</p>",
        "id": 372136051,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688421144
    },
    {
        "content": "<p>Mario said during the meeting that the \"download release\" step should give you oleans.</p>",
        "id": 372136660,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688421537
    },
    {
        "content": "<p>In my command history is the following method to update mathport such that <code>make oneshot</code> will run quickly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">pull</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n<span class=\"bp\">./</span><span class=\"n\">download</span><span class=\"bp\">-</span><span class=\"n\">release.sh</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n<span class=\"n\">make</span> <span class=\"n\">clean</span><span class=\"bp\">-</span><span class=\"n\">oneshot</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n<span class=\"n\">cd</span> <span class=\"n\">sources</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n<span class=\"n\">cd</span> <span class=\"bp\">../..</span>\n</code></pre></div>",
        "id": 372137480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688421957
    },
    {
        "content": "<p>The <code>download-release.sh</code> method does give you oleans, but I have often hit the issue that lean 3 refuses to accept them as up to date and will try to recompile everything</p>",
        "id": 372137876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688422117
    },
    {
        "content": "<p>How about we take all the commands above except the <code>git pull</code>and put them in a <code>prep-oneshot</code> makefile target? I don't want to be running that as part of the usual makefile targets (which are mainly intended to be run by CI, which does not need this), and I also don't want to run it as part of <code>make oneshot</code> because that will make it take a lot longer and repeatedly re-download things.</p>",
        "id": 372138317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688422325
    },
    {
        "content": "<p>I don't know if this is the same discussion but each time I tried to run mathport on a project depending on mathlib following the instructions on the mathport README, I had to wait a <em>long</em> time for this <code>lean --make --ast --tlean</code> step (that is flagged as \"get some coffee\" in the README).</p>",
        "id": 372139363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688422883
    },
    {
        "content": "<p>you should not personally have to run that step at all, except as part <code>make oneshot</code> on your own project</p>",
        "id": 372139471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688422934
    },
    {
        "content": "<p>it is equivalent to compiling your project in lean 3</p>",
        "id": 372139485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688422946
    },
    {
        "content": "<p>if it's a big project, yes it could take a while</p>",
        "id": 372139527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688422979
    },
    {
        "content": "<p>I was reading <a href=\"https://github.com/leanprover-community/mathport/#running-on-a-project-other-than-mathlib\">https://github.com/leanprover-community/mathport/#running-on-a-project-other-than-mathlib</a></p>",
        "id": 372139550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688422990
    },
    {
        "content": "<p>yeah that's the one that compiles your project</p>",
        "id": 372139593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688423024
    },
    {
        "content": "<p>And I'm talking about line which contains \"get coffee\". This line clearly compiles mathlib.</p>",
        "id": 372139604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688423031
    },
    {
        "content": "<p>compiling mathlib is not in the job description</p>",
        "id": 372139644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688423044
    },
    {
        "content": "<p>Then something is failing.</p>",
        "id": 372139675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688423063
    },
    {
        "content": "<p>maybe steps 2 and 3 there should be interchanged</p>",
        "id": 372139865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688423165
    },
    {
        "content": "<p>It's getting late here, but I'll try to experiment more tomorrow or on Wednesday.</p>",
        "id": 372139891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688423191
    },
    {
        "content": "<p>it is possible that the same <code>get-cache</code> issue that happens in local oneshot also happens in project oneshot</p>",
        "id": 372139999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688423268
    },
    {
        "content": "<p>in which case the proposed <code>prep-oneshot</code> command should also help there</p>",
        "id": 372140086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688423299
    },
    {
        "content": "<p>I'm not talking about one-shot here, but about whole project port.</p>",
        "id": 372141095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688423953
    },
    {
        "content": "<p>I know</p>",
        "id": 372142404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688424751
    },
    {
        "content": "<p>I'm saying that the same fix would affect both</p>",
        "id": 372142416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688424760
    },
    {
        "content": "<p>I just used mathport on <code>flt-regular</code>, and everything worked pretty well. In particular I didn't have to compile mathlib.</p>",
        "id": 372947209,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1688658617
    },
    {
        "content": "<p>The only thing that was not perfect is that <code>mathport</code> wrote all the import lines (those related to files of the project) as <code>import Myproject...</code>, but this is very easy to fix.</p>",
        "id": 372947627,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1688658718
    },
    {
        "content": "<p>So thanks to all the people that made this so easy!</p>",
        "id": 372948009,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1688658786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20fails/near/372947627\">said</a>:</p>\n<blockquote>\n<p>The only thing that was not perfect is that <code>mathport</code> wrote all the import lines (those related to files of the project) as <code>import Myproject...</code>, but this is very easy to fix.</p>\n</blockquote>\n<p>I think even with mathlib we have a script that fixes those kind of things</p>",
        "id": 372954938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688660156
    },
    {
        "content": "<p>Maybe if this is expected we can mention it in the Wiki (it says that one has to replace <code>Mathbin</code>)</p>",
        "id": 372958063,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1688660791
    },
    {
        "content": "<p>I think the expectation is now that you moved your files into a new import namespace?</p>",
        "id": 373326606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688763206
    },
    {
        "content": "<p>Or do you literally mean the string \"MyProject\" rather than your actual project name?</p>",
        "id": 373326958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688763332
    },
    {
        "content": "<p>FYI, mathport once again fails to build with the latest mathlib.  Now that the port is done, I'm no longer going to keep it working.  (It will still keep pulling changes from mathlib3, but it won't pick up new tactic syntaxes or align statements in mathlib.)  Feel free to fix it if you need mathport.  I have disabled the cron build in the meanwhile because I am getting an email every time it fails.  <a href=\"https://github.com/leanprover-community/mathport/commit/2107e736c89fd69467fe93ecfca8d44552f8cb7a\">https://github.com/leanprover-community/mathport/commit/2107e736c89fd69467fe93ecfca8d44552f8cb7a</a></p>",
        "id": 375419337,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689382310
    },
    {
        "content": "<p>Won't this be an issue for downstream projects using the last unported file?</p>",
        "id": 375469224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689407663
    },
    {
        "content": "<p>Do any such projects exist?</p>",
        "id": 375480212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689411049
    },
    {
        "content": "<p>Yes, the sphere eversion project happens to use spheres.</p>",
        "id": 375480852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689411221
    },
    {
        "content": "<p>Oh lol I had assumed the last one was the finite type morphisms file (and I couldn't think of any project using that). Funny how algebraic geometry and differential geometry finished at pretty much the same time.</p>",
        "id": 375481142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689411290
    },
    {
        "content": "<p>Ok I've just caught up on the rss stream. So looks like algebra beat analysis :P</p>",
        "id": 375483952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689412009
    },
    {
        "content": "<p>I attempted to fix mathport in <a href=\"https://github.com/leanprover-community/mathport/pull/247\">https://github.com/leanprover-community/mathport/pull/247</a>. If that works, then we should remember to turn on the update cron job.</p>",
        "id": 375726340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689504970
    },
    {
        "content": "<p>Yes, I would rather not drop mathport support until everything in lean 3 is ported (including external projects), which basically means for the indefinite future</p>",
        "id": 375733619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689507273
    },
    {
        "content": "<p>we can reduce the CI frequency or run it on demand though</p>",
        "id": 375733721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689507306
    },
    {
        "content": "<p>it would be great if mathport CI emails me instead of gabriel though, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> did you do something to set this up?</p>",
        "id": 375734105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689507415
    },
    {
        "content": "<p>I believe GitHub simply messages the person that last touched the CI file</p>",
        "id": 375735012,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689507725
    },
    {
        "content": "<p>Don't we want to stop the mathlib4 updates in mathport once we cut the <code>port-complete</code> tag?</p>",
        "id": 375738523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689508773
    },
    {
        "content": "<p>With the intent being that mathport is then a tool to jump between the <code>port-complete</code> tags in <code>mathlib</code> and <code>mathlib4</code>.</p>",
        "id": 375738680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689508807
    },
    {
        "content": "<p>I don't see why we wouldn't want to jump to the latest mathlib4</p>",
        "id": 375789755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689521803
    },
    {
        "content": "<p>Because there's no guarantee that will align with mathlib3 any more</p>",
        "id": 375789890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689521852
    },
    {
        "content": "<p>it should, at least tactic-wise</p>",
        "id": 375789946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689521867
    },
    {
        "content": "<p>Not <code>#align</code>-wise though if things start being deleted in refactors</p>",
        "id": 375790065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689521889
    },
    {
        "content": "<p>if the aligns are different that's not a big deal but if mathport doesn't compile anymore on latest then we need to fix that</p>",
        "id": 375790100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689521900
    },
    {
        "content": "<p>What's the advantage of working on new mathlib4?</p>",
        "id": 375790285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689521950
    },
    {
        "content": "<p>if you are bumping an old lean 3 project then it's not good enough to go to old mathlib4, and the latter part of the work does not have much automated assistance ATM</p>",
        "id": 375790574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522000
    },
    {
        "content": "<p>are we planning on doing something about that?</p>",
        "id": 375790636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522007
    },
    {
        "content": "<p>otherwise it's just leaving these folks high and dry</p>",
        "id": 375790706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522033
    },
    {
        "content": "<p>mathlib is currently very much a \"live at head\" ecosystem, so putting people on an old version is not helpful</p>",
        "id": 375791005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522138
    },
    {
        "content": "<p>That's no different to anyone who has a lean4 project that they've abandoned for a while though</p>",
        "id": 375791053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689522150
    },
    {
        "content": "<p>no, because this is the approved migration path</p>",
        "id": 375791141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522186
    },
    {
        "content": "<p>the migration path should terminate on something that is actually new</p>",
        "id": 375791207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522210
    },
    {
        "content": "<p>In what way is <code>port-complete</code> mathlib4 not \"actually new\"?</p>",
        "id": 375791316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689522248
    },
    {
        "content": "<p>we should have a migration path for old lean 4 as well, although I am willing to accept manual breakage and fixage for early lean 4 work since it's not stable yet</p>",
        "id": 375791355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522266
    },
    {
        "content": "<p>My thinking is that getting people to Lean4 + old mathlib4 safely is a better choice than half-getting them to new mathlib4 and saying \"sorry, we can't match things up any more\"</p>",
        "id": 375791459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689522309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20fails/near/375791316\">said</a>:</p>\n<blockquote>\n<p>In what way is <code>port-complete</code> mathlib4 not \"actually new\"?</p>\n</blockquote>\n<p>If there is a solid path from <code>port-complete</code> mathlib4 and head mathlib4, then that's fine. But it doesn't sound like that will be the case going forward</p>",
        "id": 375791476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20fails/near/375791459\">said</a>:</p>\n<blockquote>\n<p>My thinking is that getting people to Lean4 + old mathlib4 safely is a better choice than half-getting them to new mathlib4 and saying \"sorry, we can't match things up any more\"</p>\n</blockquote>\n<p>I disagree. If they want this they can use <code>port-complete</code> mathport too</p>",
        "id": 375791541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522343
    },
    {
        "content": "<p>but latest mathport should use latest everything, at least as long as mathlib4 doesn't have stable releases</p>",
        "id": 375791642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522371
    },
    {
        "content": "<p>I guess <code>port-complete</code> existing in mathport is sufficient to provide the tool that I want to use</p>",
        "id": 375791871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689522473
    },
    {
        "content": "<p>I think it is okay if the <code>#align</code>s gradually rot but aren't actively destroyed in the near term</p>",
        "id": 375791984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522509
    },
    {
        "content": "<p>It seems to me this approach is encouraging downstream projects to stay in Lean 3 as long as possible</p>",
        "id": 375792084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689522559
    },
    {
        "content": "<p>Because while they remain stale lean3 projects there'll be a tool that tries to convert to latest mathlib4</p>",
        "id": 375792121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689522578
    },
    {
        "content": "<p>I don't see how? It's keeping the migration path open long enough for it to actually happen</p>",
        "id": 375792140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522587
    },
    {
        "content": "<p>But if they mathport now, they become a stale lean4 project and are out of options</p>",
        "id": 375792149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689522590
    },
    {
        "content": "<p>thinking about this stuff the day after mathlib is done is definitely premature for all the big projects out there that couldn't even start porting until mathlib finished</p>",
        "id": 375792279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522632
    },
    {
        "content": "<p>just like mathlib itself, they probably won't mathport in one go, although this depends on the complexity of the project</p>",
        "id": 375792429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522694
    },
    {
        "content": "<p>Once it's in lean 4 the responsibility shifts to keeping up with mathlib normally; if it is abandoned for some time after porting then this might be difficult and I agree we should do something about this issue</p>",
        "id": 375792595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522751
    },
    {
        "content": "<p>I actually wouldn't be surprised if mathport still has a significant amount of additional growth to come when it comes to external projects, because mathlib has a relatively uniform style and external projects might exercise new code paths or rely on things that were skipped for mathlib purposes</p>",
        "id": 375792893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689522857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20fails/near/375792429\">said</a>:</p>\n<blockquote>\n<p>just like mathlib itself, they probably won't mathport in one go, although this depends on the complexity of the project</p>\n</blockquote>\n<p>I would speculate that it is probably easiest to have a fixed version of mathlib4 in mind when porting piece-by-piece, rather than having moving target</p>",
        "id": 375794055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689523287
    },
    {
        "content": "<p>perhaps, that's a decision for the project maintainers</p>",
        "id": 375794319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689523332
    },
    {
        "content": "<p>one reason in particular to want to bump is because something in the project caused a bug report which was fixed upstream and now you want the results</p>",
        "id": 375794479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689523380
    },
    {
        "content": "<p>same as with mathlib bumps</p>",
        "id": 375794543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689523392
    },
    {
        "content": "<p>PR re-enabling the update mathlib4 cron job is at <a href=\"https://github.com/leanprover-community/mathport/pull/249\">https://github.com/leanprover-community/mathport/pull/249</a></p>",
        "id": 375848300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689548651
    },
    {
        "content": "<p>We can decrease the rate to nightly, right?</p>",
        "id": 376006703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689597458
    },
    {
        "content": "<p>18 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.23align_import\">#mathlib4 &gt; #align_import</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 376044643,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689604000
    },
    {
        "content": "<p>Trying to mathport LeanAPAP, and I get <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/mathport/LeanAPAP/Mathlib/Algebra/BigOperators/Expect.lean#L69-L83\">this</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- PLEASE REPORT THIS TO MATHPORT DEVS, THIS SHOULD NOT HAPPEN.</span>\n<span class=\"c1\">-- failed to format: unknown constant 'Expectations.Mathlib.Algebra.BigOperators.Expect.«term𝔼_in_with_,_»'</span>\n<span class=\"kd\">theorem</span>\n  <span class=\"n\">expect_congr</span>\n  <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">)</span> <span class=\"o\">[</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">p</span> <span class=\"o\">]</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"bp\">𝔼</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">𝔼</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">expect</span> <span class=\"o\">,</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">]</span> <span class=\"bp\">·</span> <span class=\"n\">rfl</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 387315502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692984282
    },
    {
        "content": "<p>Pretty sure this is just my expectation notation being borked by mathport, but since you said to report, here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">\"notation `𝔼` binders ` in ` s ` with ` p:(scoped:49 p, p) `, ` r:(scoped:67 f, finset.expect (s.filter p) f) := r\"</span> <span class=\"k\">in</span> <span class=\"n\">expectations</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation `𝔼` binders ` in ` s `, ` r:(scoped:67 f, finset.expect s f) := r\"</span> <span class=\"k\">in</span> <span class=\"n\">expectations</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation `𝔼` binders ` with ` p:(scoped:49 p, p) `, ` r:(scoped:67 f, finset.expect (finset.univ.filter p) f) := r\"</span> <span class=\"k\">in</span> <span class=\"n\">expectations</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation `𝔼` binders `, ` r:(scoped:67 f, finset.expect finset.univ f) := r\"</span> <span class=\"k\">in</span> <span class=\"n\">expectations</span>\n</code></pre></div>",
        "id": 387315603,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692984341
    },
    {
        "content": "<p>Note this notation is surprisingly useful in combinatorics, especially probabilistic combinatorics, so it would be really nice if Lean 4 supports writing something like this as Lean 3 does</p>",
        "id": 387321621,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1692987384
    },
    {
        "content": "<p>See whether it helps to put a name on the notation; I recall we had to name all localized notations because of name clashes between re-opened versions of the same notation</p>",
        "id": 387335606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692993017
    },
    {
        "content": "<p>what does lean think about the notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Expectations</span><span class=\"o\">]</span>\n  <span class=\"n\">notation3</span><span class=\"s2\">\"𝔼 \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\" in \"</span><span class=\"n\">s</span><span class=\"s2\">\" with \"</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"mi\">49</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">67</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Finset.expect</span> <span class=\"n\">s.filterₓ</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>?</p>",
        "id": 387335732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692993103
    },
    {
        "content": "<p>does it give an error when processing this command (ignoring any issues in the expressions themselves)?</p>",
        "id": 387335832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692993144
    },
    {
        "content": "<p>my guess is that <code>notation3</code> is rejecting this because you used <code>scoped</code> twice</p>",
        "id": 387335863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692993162
    },
    {
        "content": "<p>synport doesn't run many commands, but it does need to run notation commands so that it can elaborate the syntax</p>",
        "id": 387336100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692993302
    },
    {
        "content": "<p>a really cheap fix is to replace the notation with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Expectations</span><span class=\"o\">]</span>\n  <span class=\"n\">notation3</span><span class=\"s2\">\"𝔼 \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\" in \"</span><span class=\"n\">s</span><span class=\"s2\">\" with \"</span><span class=\"n\">p</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"mi\">67</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Finset.expect</span> <span class=\"n\">s.filterₓ</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>(or the lean 3 equivalent) and see if mathport accepts it despite the lean 3 compilation errors</p>",
        "id": 387336189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692993352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20fails/near/387335863\">said</a>:</p>\n<blockquote>\n<p>my guess is that <code>notation3</code> is rejecting this because you used <code>scoped</code> twice</p>\n</blockquote>\n<p>I thought so too, I wasn't aware that using <code>scoped</code> twice was allowed until I tried doing this - I don't think mathlib uses it anywhere, so I'm not at all surprised that mathport doesn't like it</p>",
        "id": 387336527,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1692993532
    },
    {
        "content": "<p>actually it is <code>notation3</code> itself (the mathlib command) that rejects it</p>",
        "id": 387336559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692993553
    },
    {
        "content": "<p>If I comment out the line that throws the error, it more or less seems to work (although it doesn't generate a delaborator, but this is fine for synport)</p>",
        "id": 387336781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692993657
    },
    {
        "content": "<p>actually even the delaborator generation works, you just have to write <code>Set.filter s</code> instead of <code>s.filter</code></p>",
        "id": 387337685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692994085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20fails/near/387337685\">said</a>:</p>\n<blockquote>\n<p>actually even the delaborator generation works, you just have to write <code>Set.filter s</code> instead of <code>s.filter</code></p>\n</blockquote>\n<p><code>Finset.filter</code> rather than <code>Set.filter</code>?</p>",
        "id": 387337720,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1692994105
    },
    {
        "content": "<p>The lack of type information here is exactly why the delaborator fails <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 387337794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692994144
    },
    {
        "content": "<p>Hmm, I thought the <code>Finset.expect</code> should be enough - the first argument to that should be known to be a <code>Finset</code> - or is that not how it works?</p>",
        "id": 387338251,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1692994404
    },
    {
        "content": "<p>Although the code seems to ... do something, it is very confusing to me what the actual semantics of multiple <code>scoped</code> is. I may need to play with lean 3 a bit to see how the expansion for <code>p</code> is used in the expansion for <code>f</code></p>",
        "id": 387338263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692994414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> It just says <code>s</code>, it doesn't have a type ascription</p>",
        "id": 387338302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692994436
    },
    {
        "content": "<p>for all we know it's a <code>s : Foo</code> and there exists <code>Foo.filter</code> producing a <code>Finset</code></p>",
        "id": 387338376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692994460
    },
    {
        "content": "<p>I might have added that <code>hasScoped</code> check, and I think it was only because the delaborator it generates is sketchy. Each <code>scoped</code> clause thinks it's responsible for filling out the list of binders, if I remember correctly</p>",
        "id": 387338379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692994462
    },
    {
        "content": "<p>that might be fine, since the meaning of double filling a binder is that the two occurrences have to match</p>",
        "id": 387338510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692994543
    },
    {
        "content": "<p>this is used to interpret non-linear patterns</p>",
        "id": 387338523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692994551
    },
    {
        "content": "<p>It's not checking that the binders match though, rather it's accumulating the binders twice (<code>s.pushBinder</code> in <code>matchScoped</code> is the only thing that updates the binders array)</p>",
        "id": 387338829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692994697
    },
    {
        "content": "<p>TBH I wouldn't be surprised if lean 3 does that too</p>",
        "id": 387338936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692994757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Have you ever tried to use this notation with more than one binder? I get type errors with something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">𝔼</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>but it might just have always been like that</p>",
        "id": 387340317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692995475
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6793\">#6793</a></p>",
        "id": 387343093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692997082
    }
]