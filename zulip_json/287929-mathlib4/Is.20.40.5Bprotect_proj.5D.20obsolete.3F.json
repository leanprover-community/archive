[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Algebra/Order/CompleteField.lean\">Algebra.Order.CompleteField</a> on line 62 has this notation</p>\n<p><code>\n@[protect_proj]\n</code><br>\nwhich Lean Infoview marks as an <code>unknown attribute</code>.  Is it obsolete?  I see the following occurrences in ported <code>mathlib4</code>, most all commented out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Heyting</span><span class=\"bp\">/</span><span class=\"n\">Hom.lean</span><span class=\"o\">:</span><span class=\"c1\">-- @[protect_proj] -- Porting note: Not yet implemented</span>\n<span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Heyting</span><span class=\"bp\">/</span><span class=\"n\">Hom.lean</span><span class=\"o\">:</span><span class=\"c1\">-- @[protect_proj] -- Porting note: Not yet implemented</span>\n<span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Heyting</span><span class=\"bp\">/</span><span class=\"n\">Hom.lean</span><span class=\"o\">:</span><span class=\"c1\">-- @[protect_proj] -- Porting note: Not yet implemented</span>\n<span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">BoxIntegral</span><span class=\"bp\">/</span><span class=\"n\">Partition</span><span class=\"bp\">/</span><span class=\"n\">Filter.lean</span><span class=\"o\">:</span><span class=\"c1\">-- @[protect_proj] -- Porting note: Not yet implemented</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Lie</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c\">/-</span><span class=\"cm\"> @[protect_proj] -- Porting note: not (yet) implemented. -/</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Lie</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c\">/-</span><span class=\"cm\"> @[protect_proj] -- Porting note: not (yet) implemented. -/</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Lie</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c\">/-</span><span class=\"cm\"> @[protect_proj] -- Porting note: not (yet) implemented. -/</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Lie</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c\">/-</span><span class=\"cm\"> @[protect_proj] -- Porting note: not (yet) implemented. -/</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">CompleteField.lean</span><span class=\"o\">:</span><span class=\"kd\">@[protect_proj]</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Kleene.lean</span><span class=\"o\">:</span><span class=\"c1\">-- @[protect_proj] -- Porting note: Not yet implemented</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Kleene.lean</span><span class=\"o\">:</span><span class=\"c1\">-- @[protect_proj] -- Porting note: Not yet implemented</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Kleene.lean</span><span class=\"o\">:</span><span class=\"c1\">-- @[protect_proj] -- Porting note: Not yet implemented</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">Kleene.lean</span><span class=\"o\">:</span><span class=\"c1\">-- @[protect_proj] -- Porting note: Not yet implemented</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">GCDMonoid</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: mathlib3 had a `@[protect_proj]` here, but adding `protected` to all the fields</span>\n<span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">GCDMonoid</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: mathlib3 had a `@[protect_proj]` here, but adding `protected` to all the fields</span>\n<span class=\"n\">Mathport</span><span class=\"bp\">/</span><span class=\"n\">Syntax.lean</span><span class=\"o\">:</span><span class=\"c\">/-</span><span class=\"cm\"> S -/</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">protectProj</span><span class=\"o\">)</span> <span class=\"s2\">\"protect_proj\"</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\" without\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n<span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">ContinuousFunction</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">--@[protect_proj] -- Porting note: missing attribute?</span>\n</code></pre></div>",
        "id": 361575282,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685194196
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki\">https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki</a></p>",
        "id": 361575767,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685194317
    },
    {
        "content": "<p>You now put <code>protected</code> before each field in a structure that used to have <code>@[protect_proj]</code>. You probably should also put a porting note.</p>",
        "id": 361575898,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685194342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  lines 62 through 65 have a lot of issues.  The original is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[protect_proj, ancestor linear_ordered_field conditionally_complete_linear_order]</span>\n<span class=\"kd\">class</span> <span class=\"n\">conditionally_complete_linear_ordered_field</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span> <span class=\"kn\">renaming</span> <span class=\"n\">max</span> <span class=\"bp\">→</span> <span class=\"n\">sup</span> <span class=\"n\">min</span> <span class=\"bp\">→</span> <span class=\"n\">inf</span><span class=\"o\">,</span> <span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>This gets automatically translated to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[protect_proj]</span>\n<span class=\"kd\">class</span> <span class=\"n\">ConditionallyCompleteLinearOrderedField</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"s2\">\"./././Mathport/Syntax/Translate/Command.lean:422:11: unsupported: advanced extends in structure\"</span><span class=\"o\">,</span>\n  <span class=\"n\">ConditionallyCompleteLinearOrder</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>so in addition to the <code>project_proj</code> it is dropping the <code>ancestor</code> and what follows and doesn't like something in the <code>extends</code> perhaps the <code>renaming</code>.   The porting wiki doesn't mention these 3 keywords.</p>",
        "id": 361576941,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685194622
    },
    {
        "content": "<p>I believe <code>ancestor</code> is obsolete due to changes in how structures work (you can see that uses of <code>ancestor</code> in mathlib3 are no longer present in ported mathlib4). I'm not sure about <code>renaming</code> at the moment</p>",
        "id": 361578422,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685195014
    },
    {
        "content": "<p>Looking at <code>CompleteLinearOrder</code> and how it was ported, it looks like what they did was find an equivalent set of things to extend and then manually create a new instance that projects to the missing parent structure. Porting this file seems like it will take some thought.</p>",
        "id": 361579413,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685195315
    },
    {
        "content": "<p>Another case study is <code>ConditionallyCompleteLinearOrder</code></p>",
        "id": 361579696,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685195402
    },
    {
        "content": "<p>It looks like these two and <code>ConditionallyCompleteLinearOrderedField</code> are the only three structures in all of mathlib that involve porting <code>extends ... renaming</code> syntax</p>",
        "id": 361580193,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685195542
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4425\">!4#4425</a> removes some porting notes about <code>protect_proj</code> in favour of just adding <code>protected</code> to all fields.</p>",
        "id": 361617230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685208013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>to replace <code>@[project_proj]</code> is it just a matter of adding <code>protected</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">class</span> <span class=\"n\">conditionally_complete_linear_ordered_field</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 361618874,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685208779
    },
    {
        "content": "<p>In any event I will give up on this file because it has too many expert level porting issues per <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> .</p>",
        "id": 361619008,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1685208843
    }
]