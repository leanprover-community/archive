[
    {
        "content": "<p>Houston, we've got a problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Lattice</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Finset.sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_bunion</span><span class=\"bp\">ᵢ</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Finset.supᵢ_bunionᵢ.{u_3, u_2, u_1} {α : Type u_2} {β : Type u_3} {γ : Type u_1} [inst✝ : CompleteLattice β]</span>\n<span class=\"cm\">  [inst✝¹ : DecidableEq α] (s : Finset γ) (t : γ → Finset α) (f : α → β) : (⨆ y, ⨆ h, f y) = ⨆ x, ⨆ h, ⨆ y, ⨆ h, f y</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 344728870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679875568
    },
    {
        "content": "<p>The statement (<code>(⨆ y ∈ s.bunionᵢ t, f y) = ⨆ (x ∈ s) (y ∈ t x), f y</code>) is completely mangled in printing (goal state, <code>#check</code>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset#doc\">docs4#Finset</a>.supᵢ_bunionᵢ) because the Props the suprema are running over get elided.</p>",
        "id": 344728956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679875664
    },
    {
        "content": "<p>Here's a delaborator to at least show the domain when the variable is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[delab app.supᵢ]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_delab</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">SubExpr.getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.isProp</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">f.isLambda</span> <span class=\"k\">do</span> <span class=\"n\">failure</span>\n  <span class=\"n\">SubExpr.withAppArg</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">dom</span> <span class=\"bp\">←</span> <span class=\"n\">SubExpr.withBindingDomain</span> <span class=\"n\">delab</span>\n    <span class=\"n\">withBindingBodyUnusedName</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">body</span> <span class=\"bp\">←</span> <span class=\"n\">delab</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">dom</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Finset.sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_bunion</span><span class=\"bp\">ᵢ</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Finset.supᵢ_bunionᵢ.{u_3, u_2, u_1} {α : Type u_2} {β : Type u_3} {γ : Type u_1} [inst✝ : CompleteLattice β]</span>\n<span class=\"cm\">  [inst✝¹ : DecidableEq α] (s : Finset γ) (t : γ → Finset α) (f : α → β) :</span>\n<span class=\"cm\">  (⨆ y, ⨆ (h : y ∈ Finset.bunionᵢ s t), f y) = ⨆ x, ⨆ (h : x ∈ s), ⨆ y, ⨆ (h : y ∈ t x), f y</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 344764319,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679895579
    },
    {
        "content": "<p>Nice! Do you think we can recover Lean 3's binder collecting behavior?</p>",
        "id": 344808211,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679909315
    }
]