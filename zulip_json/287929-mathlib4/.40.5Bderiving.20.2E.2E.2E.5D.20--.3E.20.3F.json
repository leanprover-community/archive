[
    {
        "content": "<p>What is the analogue of <code>@[derive ...]</code> in mathlib4? In ML3,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[deriving has_zero]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>used to work. If I try in ML4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Zero</span>\n</code></pre></div>\n<p>I get an error <code>failed to synthesize instance 'Zero' for 'Foo'</code>. Am I missing something?</p>",
        "id": 390040206,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1694270400
    },
    {
        "content": "<p><code>instance (n : ℕ) : Zero (Foo n) := by unfold Foo; exact inferInstance</code> does work, so I assume it has to do with reducibility? On the other hand, <code>derive</code>/<code>deriving</code> seems to be meant to see through the definition; otherwise it wouldn't make a lot of sense...</p>",
        "id": 390040553,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1694270664
    },
    {
        "content": "<p>I think the implementation of this deriving handler is simply incomplete / doesn't support this sort of def (yet). So we have to use the unfold version for now</p>",
        "id": 390041429,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694271440
    },
    {
        "content": "<p>It works ok on defs with no parameters, so I imagine the implementation just needs extending to this case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">9</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Zero</span>\n</code></pre></div>",
        "id": 390041501,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694271497
    }
]