[
    {
        "content": "<p>Some help here would be nice. There are two places with issues left. One is in the <code>LawfulMonad</code> instance. Some fields which had <code>autoparams</code> for the <code>LawfulApplicative</code> instance in Lean 3 no longer have them, and the definition of <code>Seq.seq</code> changed to be lazy, which is (I think) part of why these aren't solved by <code>aesop</code>.</p>\n<p>Anyway, someone who is comfortable with these <code>MvPolynomial</code> and this monad instance could probably dispose of these sorries quickly, maybe <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>?</p>",
        "id": 342074496,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678890699
    },
    {
        "content": "<p>This week I unfortunately don't have any time for porting...</p>",
        "id": 342106478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678897339
    },
    {
        "content": "<p>Is this blocking other files? I thought this file was only used by Witt vectors... but that might have changed in the past 3 years <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 342106622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678897366
    },
    {
        "content": "<p>It's now in the import hierarchy for analysis (!!!) (e.g., <a href=\"https://tqft.net/mathlib4/2023-03-16/analysis.normed_space.hahn_banach.extension.pdf\">Hahn-Banach</a>). I've looked into disentangling this a bit, but there's a thread going through which I don't know how best to deal with. The thread is this (starting backwards):</p>\n<p>analysis stuff → is_R_or_C → finite dimensional stuff → matrix.adjugate → mv_polynomial</p>\n<p>The first three arrows I think are mostly unavoiadable, but the last one could be solved by moving the declarations <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_adjugate\">docs#matrix.det_adjugate</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.adjugate_adjugate\">docs#matrix.adjugate_adjugate</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.adjugate_adjugate'\">docs#matrix.adjugate_adjugate'</a> out of <code>linear_algebra.matrix.adjugate</code> and into a new file because this is the only place where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial\">docs#mv_polynomial</a> sneaks in (and these decls) aren't needed in the rest of the dependency chain anywhere.</p>\n<p>Is this a refactor we want? And exactly how should I split <code>linear_algebra.matrix.adjugate</code> if so?</p>",
        "id": 342137993,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678905313
    },
    {
        "content": "<p>Of the 3 decls I mentioned, only <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_adjugate\">docs#matrix.det_adjugate</a> is used in mathlib, and only in one place <code>linear_algebra.matrix.special_linear_group</code>, so some sort of split here seems reasonable.</p>",
        "id": 342138588,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678905474
    },
    {
        "content": "<p>Of course, these imports will then end up in complex analysis via the upper half-plane, but that's not terribly unreasonable.</p>",
        "id": 342139515,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678905749
    },
    {
        "content": "<p>A dependency on <code>mv_polynomial</code> isn't that bad. But a dependency on <code>mv_polynomial.monad</code> seems surprising.</p>",
        "id": 342139581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678905771
    },
    {
        "content": "<p>Unless the file now contains more than I remember/expect.</p>",
        "id": 342139706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678905812
    },
    {
        "content": "<p>For that the thread seems to be <code>data.mv_polynomial.variables</code> which has some small amount of monad stuff at the tail end. This then infects the rest of <code>mv_polynomial</code> stuff.</p>",
        "id": 342140430,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678906017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I see, that file is imported by <code>mv_polynomial.variables</code>, which is then used all over the place.</p>",
        "id": 342140452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678906023
    },
    {
        "content": "<p>I think that import can be reversed.</p>",
        "id": 342140492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678906030
    },
    {
        "content": "<p>The <code>vars_bind₁</code> and <code>mem_vars_bind₁</code> can move to <code>.monad</code>.</p>",
        "id": 342140597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678906062
    },
    {
        "content": "<p>The other use of <code>bind₁</code> can most likely just inline the definition.</p>",
        "id": 342140646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678906074
    },
    {
        "content": "<p>This is done in <a href=\"https://github.com/leanprover-community/mathlib/pull/18593\">#18593</a>.</p>",
        "id": 342186385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678922653
    },
    {
        "content": "<p>and <a href=\"https://github.com/leanprover-community/mathlib/pull/18594\">#18594</a>, for good measure, splits <code>linear_algebra.matrix.adjugate</code> to separate out the results needs anything about <code>mv_polynomial</code>.</p>",
        "id": 342187570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678923284
    },
    {
        "content": "<p>I'm not a huge fan of splitting out the adjugate results; I think it's nice to have them all together</p>",
        "id": 342187721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678923365
    },
    {
        "content": "<p>(I'm especially not a fan of having the file be deleted without replacement, but I assume that was accidental!)</p>",
        "id": 342187754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678923395
    },
    {
        "content": "<p>Not having <code>mv_polynomial</code> imported there is likely to trick people who need more adjugate results into trying to do things the annoying combinatorial way</p>",
        "id": 342187830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678923452
    }
]