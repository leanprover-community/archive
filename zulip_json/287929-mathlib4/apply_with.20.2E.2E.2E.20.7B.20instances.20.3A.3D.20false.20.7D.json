[
    {
        "content": "<p>What's the current state of the art for using <code>apply foo</code> while introducing goals for the missing instances?</p>",
        "id": 351343064,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682000820
    },
    {
        "content": "<p>In mathlib3, I would usually use <code>apply_with foo { instances := false }</code></p>",
        "id": 351343153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682000835
    },
    {
        "content": "<p><code>refine' @foo _ _ _ (_)</code> where <code>(_)</code> is the instance argument</p>",
        "id": 351343361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682000879
    },
    {
        "content": "<p>my foo has about 15 <code>_</code>'s</p>",
        "id": 351343646,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682000931
    },
    {
        "content": "<p><code>refine @foo _ _ _ ?_</code> might work too, I haven't tried</p>",
        "id": 351343728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682000951
    },
    {
        "content": "<p>Sounds like you're doomed to write a lot of <code>_</code>s</p>",
        "id": 351343779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682000962
    },
    {
        "content": "<p>I ended up using <code>suffices : A ; apply ...</code> for one instance and <code>suffices : A x B; cases this ; apply ... ; refine' &lt;_,_&gt;</code> for 2 isntances</p>",
        "id": 351345491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682001312
    },
    {
        "content": "<p>This can't be ideal. And using <code>refine' foo _ _ _ _ _ _</code> can't be ideal either.</p>",
        "id": 351345603,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682001339
    },
    {
        "content": "<p>Is there a way to get <code>refine</code> to work approximately as follows: <code>refine foo ((?_ : ClassName) := _) _ _</code>?</p>",
        "id": 351346684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682001578
    },
    {
        "content": "<p>I requested this in another thread</p>",
        "id": 351346927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682001620
    },
    {
        "content": "<p>There's some progress <a href=\"#narrow/stream/287929-mathlib4/topic/DecidableEq.20diamond/near/348247711\">here</a> and onwards</p>",
        "id": 351347070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682001659
    },
    {
        "content": "<p>Great!</p>",
        "id": 351347157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682001672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/apply_with.20.2E.2E.2E.20.7B.20instances.20.3A.3D.20false.20.7D/near/351346927\">said</a>:</p>\n<blockquote>\n<p>I requested this in another thread</p>\n</blockquote>\n<p><a href=\"#narrow/stream/287929-mathlib4/topic/DecidableEq.20diamond/near/348259835\">Here</a></p>",
        "id": 351347305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682001708
    },
    {
        "content": "<p>Btw, Iâ€™m not sure how it deals with instance arguments, but note that <code>refine' foo ..</code> is shorthand for <code>refine' foo _ _ _ _ _ _</code> (etc.)</p>",
        "id": 351385815,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1682010943
    }
]