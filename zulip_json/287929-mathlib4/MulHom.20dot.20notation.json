[
    {
        "content": "<p>Is it possible to use dot notation with <code>MulHom</code>s and similar bundled morphisms?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Group</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">Foo</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">one_mul</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">mul_one</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">Bar</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">one_mul</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">mul_one</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.hom</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→*</span> <span class=\"n\">Bar</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"n\">x.hom</span> <span class=\"c1\">-- invalid field notation, function 'Foo.hom' does not have argument with type (Foo ...) that can be used, it must be explicit or implicit with a unique name</span>\n</code></pre></div>\n<p>or is it better to just define the map as a function with associated lemmas (<code>map_mul</code> etc.)?</p>",
        "id": 387518639,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693133083
    },
    {
        "content": "<p>It's not possible to get <code>x.hom</code> to work at the moment. I think there's general agreement that it's something we'd want, but it would take carefully specifying how it would work and then changing core Lean.</p>\n<p>A workaround you'll find in mathlib is to define an additional function <code>toBar : Foo -&gt; Bar</code> that can do the dot notation along with a lemma that <code>Foo.hom x = x.toBar</code></p>",
        "id": 387522958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693136652
    },
    {
        "content": "<p>If you make it an <code>abbrev</code> then you probably don't even need the lemma</p>",
        "id": 387535519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693147058
    }
]