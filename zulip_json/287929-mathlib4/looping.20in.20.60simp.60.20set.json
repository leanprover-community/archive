[
    {
        "content": "<p>I found a fun problem while fixing <a href=\"https://github.com/leanprover-community/mathlib4/pull/4182\">!4#4182</a>. We have a loop in our <code>simp</code> set (even prior to this file)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Pow.NNReal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"c1\">-- Real.rpow_nat_cast, summable_unop</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"c1\">-- MulOpposite.op_inv, summable_op</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"c1\">-- MulOpposite.op_pow, MulOpposite.unop_inv, summable_unop</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"c1\">-- MulOpposite.op_natCast, MulOpposite.unop_pow, MulOpposite.op_inv, summable_op</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">})</span> <span class=\"c1\">-- MulOpposite.unop_natCast, MulOpposite.op_pow, MulOpposite.unop_inv, summable_unop</span>\n  <span class=\"c1\">-- now the last two simp calls just loop</span>\n  <span class=\"c1\">-- note: `simp` times out with `whnf`, it doesn't complain about maximum recursion depth, which is what I would have expected.</span>\n</code></pre></div>\n<p>I'm especially confused at the first pass, which applies <code>summable_unop</code>. It seems to me that this lemma shouldn't be firing. I assume it has something to do with our new <code>PreOpposite</code> approach.</p>",
        "id": 361134234,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685038467
    },
    {
        "content": "<p>To be clear, the looping behavior may only be a symptom of this other problem about lemmas firing when they shouldn't.</p>",
        "id": 361134365,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685038499
    }
]