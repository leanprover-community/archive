[
    {
        "content": "<p>Hi, could someone help me with <a href=\"https://github.com/leanprover-community/mathlib4/pull/3073\">!4#3073</a>? The problem is in the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">limitπMonoidHom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Types.limitCone.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">pt</span> <span class=\"bp\">→*</span>\n      <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span>\n    <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Even though I believe that I have provided all possible universe levels, I'm getting the following error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10252</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">MonCat</span><span class=\"o\">)</span> <span class=\"n\">J</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">MonCat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">MonCat</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">MonCat</span>\n</code></pre></div>\n<p>With pp.all, the error message becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10252</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Functor.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10252</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10252</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">J</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.10252</span><span class=\"o\">}</span>\n      <span class=\"n\">MonCat.largeCategory.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10252</span> <span class=\"n\">v</span><span class=\"o\">})</span>\n    <span class=\"n\">J</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Functor.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10252</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10252</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">J</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.10252</span><span class=\"o\">}</span>\n      <span class=\"n\">MonCat.largeCategory.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10252</span> <span class=\"n\">v</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Functor.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10252</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.10252</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">J</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"bp\">?</span><span class=\"n\">u.10252</span><span class=\"o\">}</span>\n      <span class=\"n\">MonCat.largeCategory.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.10252</span> <span class=\"n\">v</span><span class=\"o\">})</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Functor.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">J</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">MonCat.largeCategory.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I'm not really sure what to make of the first term though.</p>",
        "id": 346357280,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1680440918
    },
    {
        "content": "<p>It seems to be an issue with the typeclass inference</p>",
        "id": 346361826,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680442961
    },
    {
        "content": "<p>Eg. this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">limitπMonoidHom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">letI</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Types.limitCone.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">MonCat</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">pt</span>\n  <span class=\"n\">letI</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">inferInstance</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 346362397,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680443198
    },
    {
        "content": "<p>And if you replace the <code>show ...</code> with just <code>inferInstance</code>, you get a similar error.</p>",
        "id": 346362448,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680443229
    },
    {
        "content": "<p>Or slightly cleaner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">limitπMonoidHom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">show</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">inferInstance</span>\n  <span class=\"o\">(</span><span class=\"n\">Types.limitCone.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">MonCat</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">pt</span> <span class=\"bp\">→*</span>\n    <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 346362964,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680443451
    },
    {
        "content": "<p>This works, thank you.</p>",
        "id": 346368164,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1680445487
    },
    {
        "content": "<p>Unfortunately I don't think this idea scales. Here is what I think is the same problem, minimised from <code>CategoryTheory.Sites.Limits</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.creates</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.sites.sheafification</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_colimits</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_colimits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_colimits</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_colimits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 4</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Creates</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Sites.Sheafification</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">GrothendieckTopology</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HasColimits</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasColimits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">HasColimits</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasColimits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">stuck at solving universe constraint</span>\n<span class=\"cm\">  max (max u v) w =?= max (max v w) ?u.569</span>\n<span class=\"cm\">while trying to unify</span>\n<span class=\"cm\">  HasColimitsOfSize (Sheaf J D)</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  (HasColimits (Sheaf J D)) ((HasColimits (Sheaf J D)) C inst✝² J D inst✝¹)</span>\n<span class=\"cm\">    ((HasColimits (Sheaf J D)) C inst✝² J D inst✝¹)</span>\n<span class=\"cm\">scratch1.lean:14:0</span>\n<span class=\"cm\">stuck at solving universe constraint</span>\n<span class=\"cm\">  max u v =?= max v ?u.569</span>\n<span class=\"cm\">while trying to unify</span>\n<span class=\"cm\">  HasColimitsOfSize (Sheaf J D)</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  (HasColimits (Sheaf J D)) ((HasColimits (Sheaf J D)) C inst✝² J D inst✝¹)</span>\n<span class=\"cm\">    ((HasColimits (Sheaf J D)) C inst✝² J D inst✝¹)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Basically, the instances in <code>CategoryTheory.Sites.Limits</code> don't fire right now.</p>",
        "id": 350340297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681663255
    },
    {
        "content": "<p>This workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">HasColimits</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasColimits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">HasColimits</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasColimits</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo.</span><span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>is no good, because it's not just a definition failing, it's an instance, so the instance will never fire.</p>",
        "id": 350340587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681663433
    },
    {
        "content": "<p>Yeah this new universe level normalization doesn't get along well with our \"use <code>max</code> to encode inequality constraints\" trick.</p>",
        "id": 350341145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681663727
    },
    {
        "content": "<p>What's the whole <code>#print foo</code> output with universes turned on?</p>",
        "id": 350341962,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681664165
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.GrothendieckTopology.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">inst</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Limits.HasColimits.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">D</span> <span class=\"n\">inst_1</span><span class=\"o\">],</span>\n  <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Limits.HasColimits.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">w</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Sheaf.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">inst</span> <span class=\"n\">J</span> <span class=\"n\">D</span> <span class=\"n\">inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Sheaf.instCategorySheaf.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">inst</span> <span class=\"n\">J</span> <span class=\"n\">D</span> <span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">foo.proof_1.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 350342735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681664516
    },
    {
        "content": "<blockquote>\n<p><code>max (max w u v) v</code></p>\n</blockquote>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 350342947,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681664607
    },
    {
        "content": "<p>I think the real issue is that <code>u</code> never occurs alone, so <code>max u v = max ? v</code> doesn't have a unique solution (for example <code>?</code> could be <code>max u v</code>)</p>",
        "id": 350343106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681664674
    },
    {
        "content": "<p>Yeah so <code>u</code> never appears alone... yes.</p>",
        "id": 350343118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681664679
    },
    {
        "content": "<p>In Lean 3 we got by with this because it didn't do this level normalization, and then when faced with unification problems like the one you suggest, it would just pick <code>u</code> as the solution (even though as you point out there are others) and it was generally correct to do so.</p>",
        "id": 350343298,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681664779
    },
    {
        "content": "<p>Are there situations where it's necessary to ensure that one universe is &lt;= another?</p>",
        "id": 350343352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681664806
    },
    {
        "content": "<p>If we could express inequalities directly then we could state <code>u &gt;= v</code> instead of introducing this <code>max u v</code> thing, and then <code>u</code> would appear alone all over the place.</p>",
        "id": 350343393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681664834
    },
    {
        "content": "<p>I've changed the type of <code>C</code> to <code>Type u</code> and so far so good...</p>",
        "id": 350343427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681664851
    },
    {
        "content": "<p>Yes frequently, e.g., <code>Type u</code> has <code>w</code>-small colimits if <code>w &lt;= u</code>.</p>",
        "id": 350343440,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681664858
    },
    {
        "content": "<p>I am not entirely sure if they are needed in your snippet--I mean with the <code>sorry</code> filled in of course!</p>",
        "id": 350343542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681664888
    },
    {
        "content": "<p>Yikes, so it's probably important in this file.</p>",
        "id": 350343571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681664902
    },
    {
        "content": "<p>Can you paste the <code>#print foo</code> output like above but if you change <code>C</code> to <code>Type u</code>?</p>",
        "id": 350343739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681665006
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.GrothendieckTopology.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">inst</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Limits.HasColimits.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">D</span> <span class=\"n\">inst_1</span><span class=\"o\">],</span>\n  <span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Limits.HasColimits.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">w</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Sheaf.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">inst</span> <span class=\"n\">J</span> <span class=\"n\">D</span> <span class=\"n\">inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CategoryTheory.Sheaf.instCategorySheaf.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"n\">inst</span> <span class=\"n\">J</span> <span class=\"n\">D</span> <span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">foo.proof_1.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and <code>inferInstance</code> works now.</p>",
        "id": 350343986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681665150
    },
    {
        "content": "<p>FWIW I don't see why the <code>C : Type (max v u)</code> should have been needed here.</p>",
        "id": 350344382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681665429
    },
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib/blob/4f4a1c875d0baa92ab5d92f3fb1bb258ad9f3e5b/src/category_theory/sites/limits.lean#L169\">https://github.com/leanprover-community/mathlib/blob/4f4a1c875d0baa92ab5d92f3fb1bb258ad9f3e5b/src/category_theory/sites/limits.lean#L169</a> one could try changing it to <code>C : Type u</code>.</p>",
        "id": 350344432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681665477
    },
    {
        "content": "<p>That said, this issue will probably pop up again</p>",
        "id": 350344482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681665488
    },
    {
        "content": "<p>I've just done the entire file in mathlib 4 and indeed <code>C : Type u</code> works fine and all the problems go away</p>",
        "id": 350344516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681665514
    },
    {
        "content": "<p>If it works here then I definitely wouldn't expect any (serious) issues in downstream modules</p>",
        "id": 350344600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681665568
    },
    {
        "content": "<p>I should backport anyway, just to check.</p>",
        "id": 350344616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681665584
    },
    {
        "content": "<p>I don't know this material too well by the way: are you happy with leaving <code>[Category.{max v u} D]</code>? I was a bit surprised by this -- it's the objects of <code>C</code> which had type <code>max v u</code> and the morphisms of <code>D</code>.</p>",
        "id": 350344779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681665660
    },
    {
        "content": "<p>I think this might be somewhat artificial to make sure that \"HasColimits\" refers to <code>max v u</code>-sized ones, which are the ones you need to construct the sheafification</p>",
        "id": 350344868,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681665714
    },
    {
        "content": "<p>It's possible you could also generalize the morphism universe of D by using HasColimitsOfSize</p>",
        "id": 350344976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681665762
    },
    {
        "content": "<p>IIRC a lot of this universe gymnastics was due to the universe restrictions we had in the limits library (which were later relaxed).</p>",
        "id": 350352336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681670135
    },
    {
        "content": "<p>I don’t remember exactly, but I think the <code>max v u</code> for <code>C</code> in this case was a way to make things work with the universe restrictions that we had in colimits of functors and in sheafification(which has some colimits and limits under the hood). Again, I’m not surprised that all this can be generalized now that we can have arbitrary universes in indexing categories of (co)limits. </p>\n<p>All that having been said, it would be SO MUCH nicer if we could have universe inequality.</p>",
        "id": 350354967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681671761
    },
    {
        "content": "<p>We have <code>u+1</code>. Will this do in practice?</p>",
        "id": 350355083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681671836
    },
    {
        "content": "<p>Yeah I was wondering if that was the order of history here</p>",
        "id": 350355164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681671873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Universe.20issues.20with.20concrete.20categories/near/350355083\">said</a>:</p>\n<blockquote>\n<p>We have <code>u+1</code>. Will this do in practice?</p>\n</blockquote>\n<p>That's a <em>strict</em> inequality, right? Looks like people here were talking about non strict ones. Do both occur?</p>",
        "id": 350364907,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681678998
    },
    {
        "content": "<p>Yeah,  but in practice every category is either a  small category or a large category, so u or u+1.</p>",
        "id": 350368057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681681585
    }
]