[
    {
        "content": "<p>Here's a neat trick, and note that <code>etaExperiment</code> doesn't help. Any ideas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Group.Basic</span>\n<span class=\"c1\">-- import Mathlib.Topology.Algebra.Ring.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousAdd</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousNeg</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works, but times out if you add the import above, and that import seems to be minimal to reproduce</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalAddGroup</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousNeg</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:=</span>\n  <span class=\"n\">TopologicalAddGroup.toContinuousNeg</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 341549403,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678733958
    },
    {
        "content": "<p>It seems to try to find <code>NonUnitalNonAssocRing Œ≤</code> over and over again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">üí•</span> <span class=\"n\">ContinuousNeg</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">ContinuousNeg</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">TopologicalRing.toContinuousNeg</span> <span class=\"n\">to</span> <span class=\"n\">ContinuousNeg</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">ContinuousNeg</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚âü</span> <span class=\"n\">ContinuousNeg</span> <span class=\"bp\">?</span><span class=\"n\">m.1596</span> <span class=\"bp\">‚ñº</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚ñ∂</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is this a previously noticed bug in type class inference?</p>",
        "id": 341557695,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678736441
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2055\">lean4#2055</a></p>",
        "id": 341557880,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678736508
    },
    {
        "content": "<p>Happening over at <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.214.232797.20.2F.20.214.232769\">#mathlib4 &gt; !4#2797 / !4#2769</a> also</p>",
        "id": 341558072,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678736557
    },
    {
        "content": "<p>Yes, I just asked Gabriel about it during the meeting and it's a known issue, as Matthew linked.</p>",
        "id": 341558284,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678736627
    }
]