[
    {
        "content": "<p>Hey guys, I am trying to port the following Lean 3 statement to Lean 4.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mathd_algebra_282</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">irrational</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">int.floor</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">irrational</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">int.ceil</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">real.pi</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">50</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">79</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Upon using mathlib port, the translation turns out to be: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mathd_algebra_282</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">Irrational</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">Int.floor</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Irrational</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Int.ceil</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">Real.pi</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"mi\">50</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">79</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but this gives the following message: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">Irrational</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.167461</span>\n</code></pre></div>\n<p>Does anyone know what the problem here is. From mathlib4 examples (see here - <a href=\"https://github.com/leanprover-community/mathlib4/blob/c83178f4f1ae5a706bf6e6775e358db260030e72/Mathlib/NumberTheory/Liouville/Basic.lean#L123\">https://github.com/leanprover-community/mathlib4/blob/c83178f4f1ae5a706bf6e6775e358db260030e72/Mathlib/NumberTheory/Liouville/Basic.lean#L123</a>), it appears that <code>Irrational x</code> should still return a proof of whether x is irrational or not. Any help is appreciated, thanks!</p>",
        "id": 388023819,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1693366460
    },
    {
        "content": "<p>It's very helpful if questions include a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (i.e. with required imports), so we can just copy and paste code to see it running.</p>",
        "id": 388025716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693367555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"565199\">Rahul Saha</span> has marked this topic as resolved.</p>",
        "id": 388028287,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693369110
    },
    {
        "content": "<p>sorry ignore, there was an import issue</p>",
        "id": 388028326,
        "sender_full_name": "Rahul Saha",
        "timestamp": 1693369140
    },
    {
        "content": "<p>No problem! Part of the reason we ask for <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>'s is that preparing them often solves the problem. :-)</p>\n<p>PS --- no need to mark topics as resolved, it has little useful effect, but breaks links to the topic.</p>",
        "id": 388029847,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693370064
    }
]