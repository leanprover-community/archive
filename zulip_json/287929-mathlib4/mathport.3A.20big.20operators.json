[
    {
        "content": "<p>Did precedence of big operators change from mathlib 3 to mathlib 4? I have to add <code>()</code> here and there.</p>",
        "id": 363869244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015105
    },
    {
        "content": "<p>I mean, add them to the mathport output.</p>",
        "id": 363869249,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015118
    },
    {
        "content": "<p>It looks like a <code>mathport</code> bug, not a difference between mathlib3 and mathlib4.</p>",
        "id": 363869336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015166
    },
    {
        "content": "<p>E.g., compare <a href=\"https://github.com/leanprover-community/mathlib/blob/a3209ddf94136d36e5e5c624b10b2a347cc9d090/src/analysis/box_integral/divergence_theorem.lean#L107\">source</a> with <a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Analysis/BoxIntegral/DivergenceTheorem.lean#L129\">mathport output</a></p>",
        "id": 363869448,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 363869451,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015270
    },
    {
        "content": "<p>note that these are generally bugs in the core formatter / selected delaborators or parenthesizers, not mathport itself (which just uses those formatters)</p>",
        "id": 363869664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015449
    },
    {
        "content": "<p>Is it actually correct to not put parentheses there?</p>",
        "id": 363869679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015465
    },
    {
        "content": "<p>do you have a self contained example of the desired parenthesization?</p>",
        "id": 363869740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015496
    },
    {
        "content": "<p>No, it is not correct.</p>",
        "id": 363869754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015519
    },
    {
        "content": "<p>This works as the statement of that lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">norm_volume_sub_integral_face_upper_sub_lower_smul_le</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfc</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Box.Icc</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hxI</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Box.Icc</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Box.Icc</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">I.distortion</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">I.upper</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">I.lower</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n      <span class=\"o\">(</span><span class=\"n\">integral</span> <span class=\"o\">(</span><span class=\"n\">I.face</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊥</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">i.insertNth</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I.upper</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">BoxAdditiveMap.volume</span> <span class=\"bp\">-</span>\n        <span class=\"n\">integral</span> <span class=\"o\">(</span><span class=\"n\">I.face</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊥</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">i.insertNth</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I.lower</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">BoxAdditiveMap.volume</span><span class=\"o\">)</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span>\n      <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">I.upper</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">I.lower</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 363869796,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015584
    },
    {
        "content": "<p>What means \"self contained example\"? How do I emulate the <code>mathport</code> output?</p>",
        "id": 363869879,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015640
    },
    {
        "content": "<p>I mean just without all the box integral stuff, just a simple example of precedence ordering</p>",
        "id": 363869897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015662
    },
    {
        "content": "<p>you don't need to give a mathport example</p>",
        "id": 363869917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015682
    },
    {
        "content": "<p>we can test the formatter without mathport</p>",
        "id": 363869925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015694
    },
    {
        "content": "<p>I think, just <code>∏ j, f j - g j</code> should work.</p>",
        "id": 363869926,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015694
    },
    {
        "content": "<p>imports?</p>",
        "id": 363869939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015710
    },
    {
        "content": "<p>Whait a minute</p>",
        "id": 363870024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015768
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 363870098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015833
    },
    {
        "content": "<p>How do I test it?</p>",
        "id": 363870159,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015862
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/missing.20ppSpace.20for.20mathport.3F/near/362934262\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/missing.20ppSpace.20for.20mathport.3F/near/362934262</a></p>",
        "id": 363870182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015895
    },
    {
        "content": "<p><code>mathport</code> prints RHS as LHS (here <code>j</code> in <code>g j</code> is an autoimplicit variable)</p>",
        "id": 363870183,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686015897
    },
    {
        "content": "<p>(note when you use the method there you get a bunch of daggers on identifiers, this can be ignored)</p>",
        "id": 363870376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686015990
    },
    {
        "content": "<p>I'm getting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n<span class=\"kd\">def</span> <span class=\"n\">fmt</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Format</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">PrettyPrinter.ppTerm</span> <span class=\"o\">⟨</span><span class=\"bp\">←</span> <span class=\"n\">stx</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fmt</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ∃ f✝ g✝ : Fin✝ 5 → ℤ, ∏ j✝, f✝ j✝ - g✝ j✝ ≠ ∏ j✝, f✝ j✝ - g✝ j✝</span>\n</code></pre></div>",
        "id": 363870432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016041
    },
    {
        "content": "<p>and this seems to be correct (the scoping is in fact as described)</p>",
        "id": 363870455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016058
    },
    {
        "content": "<p>You mean,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n<span class=\"kd\">def</span> <span class=\"n\">fmt</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Format</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">PrettyPrinter.ppTerm</span> <span class=\"o\">⟨</span><span class=\"bp\">←</span> <span class=\"n\">stx</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">fmt</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 363870532,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686016096
    },
    {
        "content": "<p><code>∏ j, f j - g j</code> actually means <code>∏ j, (f j - g j)</code> when parsed and printed</p>",
        "id": 363870546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016112
    },
    {
        "content": "<p>so there doesn't seem to be an issue here, unless your point is that the notation is not declared correctly and this should not parse</p>",
        "id": 363870566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016137
    },
    {
        "content": "<p>No, <code>∏ j, f j - g j</code> means <code>fun {j} =&gt; (∏ j, f j) - g j</code></p>",
        "id": 363870600,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686016156
    },
    {
        "content": "<p>oh, you are right</p>",
        "id": 363870688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016213
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_</span>\n</code></pre></div>\n<p>says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Expected</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">},</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 363870704,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686016227
    },
    {
        "content": "<p>But <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.3A.20big.20operators/near/363870532\">this</a> input preserves <code>()</code> in the output.</p>",
        "id": 363870762,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686016267
    },
    {
        "content": "<p>Does it mean that the bug is somewhere else?</p>",
        "id": 363870771,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686016286
    },
    {
        "content": "<p>The method I showed using the <code>fmt</code> function preserves exactly the syntax tree as written, without elaboration/delaboration</p>",
        "id": 363870863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016331
    },
    {
        "content": "<p>this is a bit closer to what mathport is doing</p>",
        "id": 363870875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016341
    },
    {
        "content": "<p>when you use the pretty printer normally the syntax being printed was delaborated from an expression, and this process can add or remove parens</p>",
        "id": 363870907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016378
    },
    {
        "content": "<p>you can create ASTs without any parens and see if the parenthesizer will add them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"n\">fmt</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)))</span>\n<span class=\"c1\">-- ∃ f✝ g✝ : Fin✝ 5 → ℤ, ∏ j✝, (f✝ j✝ - g✝ j✝) = ∏ j✝, (f✝ j✝ - g✝ j✝)</span>\n</code></pre></div>",
        "id": 363871035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016456
    },
    {
        "content": "<p>I see them in the output...</p>",
        "id": 363871121,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686016540
    },
    {
        "content": "<p>which seems like things are working as intended</p>",
        "id": 363871197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016572
    },
    {
        "content": "<p>But we loose parentheses somewhere on the path from mathlib3 to mathport output.</p>",
        "id": 363871414,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686016706
    },
    {
        "content": "<p>can you make a lean 3 mwe to send through mathport?</p>",
        "id": 363871498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016780
    },
    {
        "content": "<p>I guess it would be something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 363871704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686016875
    },
    {
        "content": "<p>Okay here's a oneshot reproducer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>-&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathbin.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 363872443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686017385
    },
    {
        "content": "<p>A clue: before adding parentheses, the syntax that mathport is rendering is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">=</span><span class=\"n\">_</span><span class=\"bp\">»</span>\n <span class=\"o\">(</span><span class=\"n\">BigOperators.Algebra.BigOperators.Basic.finset.prod_univ</span>\n  <span class=\"s2\">\"∏\"</span>\n  <span class=\"o\">(</span><span class=\"n\">Std.ExtendedBinder.extBinders</span> <span class=\"o\">(</span><span class=\"n\">Std.ExtendedBinder.extBinder</span> <span class=\"o\">(</span><span class=\"n\">Lean.binderIdent</span> <span class=\"bp\">`</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">[]))</span>\n  <span class=\"s2\">\", \"</span>\n  <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">-</span><span class=\"n\">_</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">j</span><span class=\"o\">])</span> <span class=\"s2\">\"-\"</span> <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">g</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">j</span><span class=\"o\">])))</span>\n <span class=\"s2\">\"=\"</span>\n <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"s2\">\"0\"</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>while if I try to construct the same thing manually:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"n\">return</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{← `(∏ j, $(← `(f j - g j)))}\"</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">BigOperators.bigprod</span>\n <span class=\"s2\">\"∏\"</span>\n <span class=\"o\">(</span><span class=\"n\">Std.ExtendedBinder.extBinder</span> <span class=\"o\">(</span><span class=\"n\">Lean.binderIdent</span> <span class=\"bp\">`</span><span class=\"n\">j._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Test._hyg.1</span><span class=\"o\">)</span> <span class=\"o\">[])</span>\n <span class=\"s2\">\",\"</span>\n <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">-</span><span class=\"n\">_</span><span class=\"bp\">»</span>\n  <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">f._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Test._hyg.1</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">j._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Test._hyg.1</span><span class=\"o\">])</span>\n  <span class=\"s2\">\"-\"</span>\n  <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"bp\">`</span><span class=\"n\">g._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Test._hyg.1</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">j._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Test._hyg.1</span><span class=\"o\">])))</span>\n</code></pre></div>\n<p>instead. Note that the syntax kind is completely different,  <code>BigOperators.Algebra.BigOperators.Basic.finset.prod_univ</code> instead of <code>BigOperators.bigprod</code>, and <code>BigOperators.bigprod</code> does not seem to accept a list of binders like <code>prod_univ</code></p>",
        "id": 363878290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686021658
    },
    {
        "content": "<p>I think this is a \"notation alignment\" issue - <code>BigOperators.Algebra.BigOperators.Basic.finset.prod_univ</code> was a <code>notation3</code> which mathport itself defined, and which does not match <code>BigOperators.bigprod</code> used in mathlib4</p>",
        "id": 363878441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686021752
    },
    {
        "content": "<p>and now we have a mathport-free repro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"n\">notation3</span> <span class=\"s2\">\"∏ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.prod</span> <span class=\"n\">Finset.univ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_</span> <span class=\"c1\">-- ⊢ (∏ (j : Fin 5), f j - g j) = 0</span>\n</code></pre></div>",
        "id": 363878759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686021989
    },
    {
        "content": "<p>So, is this a bug in <code>notation3</code> or some precedence is missing in the notation declaration?</p>",
        "id": 363882213,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686024687
    },
    {
        "content": "<p><code>notation3</code> lacks the syntax to declare precedences, and mathport is currently dropping this information (which is present in the lean 3 version). A fix is up at <a href=\"https://github.com/leanprover-community/mathlib4/pull/4712\">!4#4712</a> / <a href=\"https://github.com/leanprover-community/mathport/pull/240\">mathport#240</a></p>",
        "id": 363889503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686028774
    }
]