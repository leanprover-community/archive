[
    {
        "content": "<p>In the next example, uncommenting the first line breaks everything.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.ContMDiffMap</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Manifold</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E'</span> <span class=\"n\">H'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H'</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">C</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">⟮</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"n\">I'</span><span class=\"o\">,</span> <span class=\"n\">M'</span><span class=\"bp\">⟯</span>\n</code></pre></div>",
        "id": 398582123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698281131
    },
    {
        "content": "<p><code>import Mathlib.FieldTheory.Adjoin</code> is enough <span aria-label=\"angry\" class=\"emoji emoji-1f620\" role=\"img\" title=\"angry\">:angry:</span></p>",
        "id": 398582323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698281300
    },
    {
        "content": "<p>Note the <code>open scoped Manifold</code> says which notation is a good citizen.</p>",
        "id": 398582386,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698281380
    },
    {
        "content": "<p>In case you haven't already found it, the offending notation is <a href=\"https://github.com/leanprover-community/mathlib4/blob/57e4e03dd1782a74cf937835bbdb5f90955e4406/Mathlib/FieldTheory/Adjoin.lean#L454-L472\">here</a></p>",
        "id": 398582619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698281601
    },
    {
        "content": "<p>I know, thanks.</p>",
        "id": 398582731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698281650
    },
    {
        "content": "<p>The funny thing is that this notation also conflict with a third notation (that is already scoped) in elliptic curves (so this is not a story of algebra fighting geometry).</p>",
        "id": 398582915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698281849
    },
    {
        "content": "<p>Fixed at  <a href=\"https://github.com/leanprover-community/mathlib4/pull/7938\">#7938</a></p>",
        "id": 398584192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698282846
    },
    {
        "content": "<p>Yeah, I ran into this whilst trying to fix an unrelated breakage before - thanks for fixing it!</p>",
        "id": 398661263,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1698316823
    }
]