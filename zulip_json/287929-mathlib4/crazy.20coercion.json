[
    {
        "content": "<p>You'll know the question if you look at the output to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Why?? And should I worry about this?</p>",
        "id": 372881437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688646988
    },
    {
        "content": "<p>Does this return a whole real number between <code>0</code> and <code>q</code> because we get a composition along the lines of <code>ZMod q → Fin q → ℕ → ℂ</code>?</p>",
        "id": 372882721,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1688647268
    },
    {
        "content": "<p>(Substituting <code>ℤ</code> if <code>q = 0</code> of course.)</p>",
        "id": 372882811,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1688647292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Do I understand correctly that the point you're making is that this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">ZMod.cast</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>because Lean has instead decided on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Complex.ofReal</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ZMod.cast</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>It seems wrong to me that the real numbers should be involved.</p>",
        "id": 372891881,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688649002
    },
    {
        "content": "<p>This strikes me as maybe being a <code>CoeHead</code> vs. <code>CoeTail</code> vs. <code>CoeTC</code> problem, but I'm not sure exactly where.</p>",
        "id": 372899015,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688650295
    },
    {
        "content": "<p>For me the coercion was going through the Gaussian integers! Is that not the case for other people??</p>",
        "id": 372947355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688658652
    },
    {
        "content": "<p>If I use your <code>import Mathlib</code> then it does indeed go through the Gaussian integers.  However when I wrote my comment above, I just pasted the definition into a file I was working on with some other imports and it went through the reals. So unfortunately it seems to depend on imports.</p>",
        "id": 372948711,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688658963
    },
    {
        "content": "<p>For reference (using <code>set_option pp.coercions false</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">GaussianInt.toComplex</span> <span class=\"o\">(</span><span class=\"n\">ZMod.cast</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 372948865,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688658995
    },
    {
        "content": "<p>Did we have a diamond in Lean 3?</p>",
        "id": 372950314,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688659300
    },
    {
        "content": "<p>I don't know, but right now in mathlib4 we have this (and this is blocking some work of a student):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span> <span class=\"c1\">-- to import some awful coercion</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">GaussianInt.toComplex</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- a syntactic equality</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ZMod.cast</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- I'm stuck on this. Can assume 0 &lt; q if necessary</span>\n</code></pre></div>",
        "id": 373175067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688729279
    },
    {
        "content": "<p>Pretty terrible indeed!</p>",
        "id": 373176480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688729593
    },
    {
        "content": "<p>We really need to remove the automated coercion from <code>ZMod</code> to random rings.</p>",
        "id": 373176559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688729607
    },
    {
        "content": "<p>It should be conditional on some <code>[Fact _]</code>s, or be a local instance, or both</p>",
        "id": 373176788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688729647
    },
    {
        "content": "<p>But we're doing Kloosterman sums and there it's really handy to be able to go from ZMod q to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> so I am going to have to eat my words :-)</p>",
        "id": 373176925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688729678
    },
    {
        "content": "<p>Actually maybe not -- perhaps we should just be using <code>val</code> really.</p>",
        "id": 373176994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688729693
    },
    {
        "content": "<p>I don't know Kloosterman sums. But that sounds like a pretty non-canonical thing that Kloosterman was doing...</p>",
        "id": 373177445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688729771
    },
    {
        "content": "<p>it's all about things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>q</mi><mi mathvariant=\"double-struck\">Z</mi></mrow></msub><mi>e</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mi>q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{x\\in \\Z/q\\Z}e(x^2/q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2888em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathbb mtight\">Z</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathbb mtight\">Z</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mo>=</mo><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>x</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e(x):=e^{2\\pi i x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">πi</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span> so everything is well-defined.</p>",
        "id": 373178412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688729967
    },
    {
        "content": "<p>But then you want to factor <code>e(_/q)</code> through <code>ZMod q</code>, right?</p>",
        "id": 373179415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688730170
    },
    {
        "content": "<p>Right.</p>",
        "id": 373197663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688733882
    },
    {
        "content": "<p>Yeah I think that for all of our sanity I'm just going to build the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>q</mi><mi mathvariant=\"double-struck\">Z</mi><mo>→</mo><msup><mi mathvariant=\"double-struck\">C</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Z/q\\Z\\to\\mathbb{C}^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>q</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">r^{2\\pi in/q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">πin</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span></span></span></span> and make the API for it. But I guess there are still two questions left, namely (1) why does Lean want to go through Z[i] and (2) how do we prove that Z/n -&gt; Z[i] -&gt; C is the cast. Alternatively we could burninate the cast. I'm now back to agreeing with you that it's a completely evil function.</p>",
        "id": 373211048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688736442
    },
    {
        "content": "<p>This must've been dealt with in the Bloom-Mehta formalization, no? Do I recall they dealt with Kloosterman sums (or perhaps more general exponential sums)? How did they do it?</p>",
        "id": 373223887,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1688738888
    },
    {
        "content": "<p>Sorry, theirs was Lean3 and this is presumably a new Lean4 issue. Nevermind.</p>",
        "id": 373225163,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1688739134
    },
    {
        "content": "<p>Don't we already have that map as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.angle.exp_map_circle\">docs3#real.angle.exp_map_circle</a>?</p>",
        "id": 373237378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688741510
    },
    {
        "content": "<p>I want the source to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>q</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/q\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathbb\">Z</span></span></span></span>, so I think that's different?</p>",
        "id": 373290750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688752539
    },
    {
        "content": "<p>I assume you don't mean <code>AddCircle (q : ℤ)</code>, even though that's defined as what you wrote?</p>",
        "id": 373291691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688752767
    },
    {
        "content": "<p>The Lean 3 thing you linked to is eating a <code>real.angle</code>.</p>",
        "id": 373292153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688752875
    },
    {
        "content": "<p>Just to be clear: the thing I want is <code>def eZMod (q : ℕ) (x : ZMod q) : ℂ := Complex.exp (2 * Real.pi * Complex.I * x.val / q)</code>. Do you think we have it? (and the proof that it sends x+y to e(x)*e(y)?)</p>",
        "id": 373301754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688755377
    },
    {
        "content": "<p>Don't you want the result to live in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Circle#doc\">docs#Circle</a> ?</p>",
        "id": 373305017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688756281
    },
    {
        "content": "<p>No, because I immediately want to add them up.</p>",
        "id": 373350789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688774472
    },
    {
        "content": "<p>What I'm suggesting is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Complex.Circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Fourier.AddCircle</span>\n\n<span class=\"kd\">@[simps!]</span>\n<span class=\"kd\">def</span> <span class=\"n\">ZMod.toQuotient</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroupWithOne</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ZMod</span> <span class=\"n\">q</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span> <span class=\"bp\">⧸</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ZMod.lift</span> <span class=\"n\">_</span> <span class=\"o\">⟨(</span><span class=\"n\">QuotientAddGroup.mk'</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">Int.castAddHom</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- A bundled version of `AddCircle.toCircle` -/</span>\n<span class=\"kd\">@[simps!]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">AddCircle.toCircleHom</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCircle</span> <span class=\"n\">r</span> <span class=\"bp\">→+</span> <span class=\"n\">Additive</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n  <span class=\"n\">AddMonoidHom.mk'</span> <span class=\"n\">AddCircle.toCircle</span> <span class=\"n\">AddCircle.toCircle_add</span>\n\n<span class=\"c1\">-- note that we need to introduce `K` and all the extra assumptions since `AddCircle` isn't allowed on `ℤ`.</span>\n<span class=\"kd\">noncomputable</span> <span class=\"n\">abbrev</span> <span class=\"n\">ZMod.toAddCircle</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderTopology</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ZMod</span> <span class=\"n\">q</span> <span class=\"bp\">→+</span> <span class=\"n\">AddCircle</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ZMod.toQuotient</span> <span class=\"n\">K</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"n\">abbrev</span> <span class=\"n\">ZMod.toCircle</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">ZMod.toAddCircle</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toCircle</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"n\">abbrev</span> <span class=\"n\">ZMod.toCircleHom</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span> <span class=\"bp\">→+</span> <span class=\"n\">Additive</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">AddCircle.toCircleHom</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">ZMod.toAddCircle</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 373795349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688947149
    },
    {
        "content": "<p>But where's the map I actually want, sending x to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>x</mi><mi mathvariant=\"normal\">/</mi><mi>q</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{2\\pi i x/q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">πi</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 373796486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688947828
    },
    {
        "content": "<p>oh is circle some subtype of C?</p>",
        "id": 373796558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688947882
    },
    {
        "content": "<p><code>circle : SubGroup C</code></p>",
        "id": 373797519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688948471
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=circle#doc\">docs#circle</a></p>",
        "id": 373797529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688948476
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCircle.toCircle#doc\">docs#AddCircle.toCircle</a> is _almost_ the map you asked for, but we have two different spellings of ZMod and it's the wrong one</p>",
        "id": 373797701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688948579
    },
    {
        "content": "<p>In particular we seem to be missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps!]</span>\n<span class=\"kd\">def</span> <span class=\"n\">ZMod.toIntQuotient</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ZMod</span> <span class=\"n\">q</span> <span class=\"bp\">≃+</span> <span class=\"n\">ℤ</span> <span class=\"bp\">⧸</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">AddMonoidHom.toAddEquiv</span>\n    <span class=\"o\">(</span><span class=\"n\">ZMod.lift</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">QuotientAddGroup.mk'</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n    <span class=\"o\">({</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">Function.Periodic</span> <span class=\"o\">(</span><span class=\"n\">Int.cast</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ZMod</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n       <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n       <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">})</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 373798806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688949131
    },
    {
        "content": "<p>Is this not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.quotientZmultiplesEquivZMod#doc\">docs#Int.quotientZmultiplesEquivZMod</a> ?</p>",
        "id": 373891873,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1688982283
    },
    {
        "content": "<p>Or is the <code>Periodic</code> part important?</p>",
        "id": 373892066,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1688982320
    },
    {
        "content": "<p>It's the neighbouring <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.quotientZmultiplesNatEquivZMod#doc\">docs#Int.quotientZmultiplesNatEquivZMod</a></p>",
        "id": 373896314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688983212
    }
]