[
    {
        "content": "<p>I'm trying to define dinatural transformations but it seems that some constraints can't be solved automatically; what's the insight to take away from here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Opposites</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Products.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">v₃</span> <span class=\"n\">v₄</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span> <span class=\"n\">u₄</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Opposite</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DinatTrans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">×</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">v₂</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The component of a dinatural transformation. -/</span>\n  <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"sd\">/-- The commutativity square for a given morphism. -/</span>\n  <span class=\"n\">commute</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">⦄</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 398875623,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1698404528
    },
    {
        "content": "<p>I'm not sure what your question is.</p>\n<p>Have you tried writing <code>:= by aesop_cat</code> at the end of <code>commute</code>?</p>",
        "id": 398875837,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698404592
    },
    {
        "content": "<p>It doesn't typecheck in the <code>commute</code> field, but I have no idea why... I tried simplifying in each field but it doesn't help. I tried using <code>@F.app</code>to specify the implicit fields but it's apparently incorrect syntax. I do agree it would be a good idea to later put <code>aesop_cat</code> at the end of commute.</p>",
        "id": 398876376,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1698404807
    },
    {
        "content": "<p>Solved by explicitly providing all arguments to each <code>map</code> call:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">commute</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">⦄</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">op</span> <span class=\"n\">Y</span> <span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">op</span> <span class=\"n\">X</span> <span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">op</span> <span class=\"n\">Y</span> <span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">op</span> <span class=\"n\">Y</span> <span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>\n<p>Managed to golf my way to this one, but not any further:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">commute</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">⦄</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>\n<p>If I give <code>op</code> to identities, then the implicit arguments only need the \"shape\" of a tuple, so I guess it's a problem of implicit arguments when having products:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">commute</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">⦄</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>",
        "id": 399900759,
        "sender_full_name": "Andrea Laretto",
        "timestamp": 1698920756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568205\">Andrea Laretto</span> has marked this topic as resolved.</p>",
        "id": 399900839,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698920767
    },
    {
        "content": "<p>Ah, yes, this has been an issue since Lean 3. Lean struggles typechecking compositions between product objects.</p>",
        "id": 399908716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698923012
    }
]