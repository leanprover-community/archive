[
    {
        "content": "<p>Why do we have both <code>refine</code> and <code>refine'</code>? Why do we have to put interrogation marks before holes in <code>refine</code> now?</p>",
        "id": 313712809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670086988
    },
    {
        "content": "<p>Also, why am I see a handful of terminal <code>refine'</code> in mathlib4?</p>",
        "id": 313712847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670087028
    },
    {
        "content": "<p><code>refine'</code> is equivalent to Lean 3 <code>refine</code>.</p>",
        "id": 313714245,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670087898
    },
    {
        "content": "<p>Why is it primed if we're going to use this one mainly?</p>",
        "id": 313714285,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670087925
    },
    {
        "content": "<p>In Lean 4, <code>refine</code> won't create goals for natural holes and will fail if it can't fill them in.</p>",
        "id": 313714306,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670087934
    },
    {
        "content": "<p>I use <code>refine</code> generally.</p>",
        "id": 313714358,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670087964
    },
    {
        "content": "<p>It's possible we'll even deprecate <code>refine'</code> after the port.</p>",
        "id": 313714391,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670087994
    },
    {
        "content": "<p>But what is a natural hole? Why do we not want them?</p>",
        "id": 313714460,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670088013
    },
    {
        "content": "<p>It's nice because you can distinguish between holes you want goals for and holes Lean should fill.</p>",
        "id": 313714465,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670088015
    },
    {
        "content": "<p><code>?_</code> for the former and <code>_</code> for the latter.</p>",
        "id": 313714535,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670088056
    },
    {
        "content": "<p>So whatever the option, the refine syntax got longer?</p>",
        "id": 313714593,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670088088
    },
    {
        "content": "<p>Or put differently, whatever the option, the refine syntax got more precise.</p>",
        "id": 313716652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670089225
    },
    {
        "content": "<p>One user-side nice thing about <code>refine</code> vs. <code>refine'</code> is that you can name your goals to keep track of them in the tactic state as different <code>case</code>s, e.g. <code>refine (?x, ?y)</code></p>",
        "id": 313722976,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670093387
    },
    {
        "content": "<p>(Which is especially useful for clarity/interactivity if you have a few goals and the resulting types of those goals depend on each other, e.g. maybe one of your goals winds up with type <code>?x = ?y</code>!)</p>",
        "id": 313723283,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670093620
    },
    {
        "content": "<p>Is there a preference between using <code>refine</code> and <code>refine'</code>? For instance, is the latter a mathport-ism or did I dream this <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> ? (If the latter, is this documented anywhere? I find it quickly.)</p>",
        "id": 403550755,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700644665
    },
    {
        "content": "<p><code>refine'</code> was added for mathport, yeah. I don't see a reason to use it for new code, but there's at least one person who seems to prefer it</p>",
        "id": 403551529,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700644941
    },
    {
        "content": "<p>Rarely the primed version is useful for when you want goals from implicit variables and don't want to add an <code>@</code></p>",
        "id": 403553482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700645578
    },
    {
        "content": "<p>I would prefer if we could remove <code>refine'</code>. Best not to have too many ways to say the same thing.</p>",
        "id": 403570175,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700651249
    },
    {
        "content": "<p>A few <code>@</code>s are not really worth another tactic to learn.</p>",
        "id": 403570207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700651261
    },
    {
        "content": "<p>Presumably you can also write <code>refine my_lemma (implicitArg := ?_)</code> (if the implicit argument is named)? (edit: this syntax is indeed allowed)</p>",
        "id": 403573426,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700652596
    },
    {
        "content": "<p>Does <code>refine?</code> know how to do that?</p>",
        "id": 403574618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700653007
    },
    {
        "content": "<p>(assuming it actually exists)</p>",
        "id": 403574674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700653023
    },
    {
        "content": "<p><code>refine?</code> doesn't seem to exist, but I think it'd be really good to have!</p>",
        "id": 403575656,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700653400
    },
    {
        "content": "<p><code>apply?</code> gives <code>refine</code> suggestions. I doubt that it will get this syntax correct, but if it gets the lemma name, that's most of its usage anyway.</p>",
        "id": 403575698,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700653419
    },
    {
        "content": "<p><code>refine'</code> is really useful to build a <code>refine</code> call.</p>",
        "id": 403583069,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700656382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/refine.20vs.20refine'/near/403575698\">said</a>:</p>\n<blockquote>\n<p><code>apply?</code> gives <code>refine</code> suggestions. I doubt that it will get this syntax correct, but if it gets the lemma name, that's most of its usage anyway.</p>\n</blockquote>\n<p>Sometimes you already have a lemma ready, though</p>",
        "id": 403584223,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700656781
    },
    {
        "content": "<p>If I already know what lemma I want to apply next, I never use <code>apply?</code> anymore. Do you?</p>",
        "id": 403585770,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700657373
    },
    {
        "content": "<p>no, but I would like to generate a full <code>refine</code> statement!</p>",
        "id": 403590744,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700659191
    },
    {
        "content": "<p>i.e. <code>apply X</code> works, but I want it as <code>refine X ?_ _ ?_ ...</code>, and sometimes with long lemmas that isn't the most fun thing to figure out:)</p>",
        "id": 403590922,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700659256
    },
    {
        "content": "<p>Does <code>show_term</code> do what you would like?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span> <span class=\"n\">apply</span> <span class=\"n\">X</span>\n  <span class=\"c1\">-- Try this: refine X a ?b c ?d</span>\n</code></pre></div>",
        "id": 403597949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700661618
    },
    {
        "content": "<p>Unfortunately that fails for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span> <span class=\"n\">apply</span> <span class=\"n\">X</span>\n  <span class=\"c1\">-- Try this: refine X a c ?d</span>\n</code></pre></div>",
        "id": 403598519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700661766
    },
    {
        "content": "<p>That sounds pretty fixable though</p>",
        "id": 403598648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700661799
    },
    {
        "content": "<p>It works with <code>set_option pp.analyze true in</code></p>",
        "id": 403598762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700661841
    },
    {
        "content": "<p>Ah, we could have a syntax extension <code>refine? X</code> that does <code>set_option pp.analyze true in show_term X</code>.</p>",
        "id": 403599029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700661933
    },
    {
        "content": "<p><del>Or maybe even <code>fill_term!</code> and <code>fill_term</code>, if you want/do not want implicit arguments to be made explicit.</del></p>",
        "id": 403599278,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700662004
    },
    {
        "content": "<p>Well, if you don't make the implicit argument explicit in this example it just fails.</p>",
        "id": 403599471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700662074
    },
    {
        "content": "<p>Do you have an example where <code>pp.analyze</code> prints something different but both work?</p>",
        "id": 403599576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700662103
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"refine?\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"kd\">set_option</span> <span class=\"n\">pp.analyze</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"n\">show_term</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span><span class=\"bp\">?</span> <span class=\"n\">apply</span> <span class=\"n\">X</span>\n  <span class=\"c1\">-- refine X a (b := ?b) c ?d</span>\n</code></pre></div>",
        "id": 403599700,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700662153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/refine.20vs.20refine'/near/403599576\">said</a>:</p>\n<blockquote>\n<p>Do you have an example where <code>pp.analyze</code> prints something different but both work?</p>\n</blockquote>\n<p>I do not know...</p>\n<p>The <code>refine?</code> macro uses your solution!</p>",
        "id": 403600034,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700662259
    },
    {
        "content": "<p>I edited the name above to be <code>refine?</code>, since it seems more in line with the naming conventions/expectations.</p>",
        "id": 403600867,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700662520
    },
    {
        "content": "<p>I think the feature request here is that the current <code>refine'</code> should be renamed to <code>refine?</code>, and should emit the diagnostics of your <code>show_term!</code></p>",
        "id": 403601310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700662658
    },
    {
        "content": "<p>So... simply renaming <code>show_term!</code> to <code>refine?</code>?  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 403601589,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700662740
    },
    {
        "content": "<p>No, because there's also the request to remove <code>refine'</code>, which would make <code>show_term! refine' oh _ no</code> stop working</p>",
        "id": 403602476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700662964
    },
    {
        "content": "<p><code>apply</code> isn't a substitute for <code>refine'</code></p>",
        "id": 403602579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700662992
    },
    {
        "content": "<p>Ok, though removing <code>refine'</code> seems like a much bigger PR than just adding <code>refine?</code>.</p>",
        "id": 403602955,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700663093
    },
    {
        "content": "<p>(besides, for the next several hours I will not be able to PR anything anyway!)</p>",
        "id": 403603115,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700663144
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">grep</span> <span class=\"s2\">\"refine'\"</span> <span class=\"bp\">'*.</span><span class=\"n\">lean'</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span>\n  <span class=\"mi\">12301</span>  <span class=\"mi\">107506</span> <span class=\"mi\">1226928</span>\n</code></pre></div>\n<p>I can look into this, but not soon.</p>",
        "id": 403603871,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700663368
    },
    {
        "content": "<p>Because no one seems to know this PR exists: Thomas started <code>refine?</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8364\">#8364</a></p>",
        "id": 403642164,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1700676394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>  see the discussion above.</p>",
        "id": 403642261,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1700676439
    },
    {
        "content": "<p>I would be opposed to removing <code>refine'</code> altogether, although I would be fine with a lint/style proscription against it. It is very useful when debugging proofs and \"using lean in anger\"</p>",
        "id": 403658764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700683803
    },
    {
        "content": "<p>I don't know whether there are any cases that actually need it though in a completed proof, unlike <code>let'</code> / <code>have'</code></p>",
        "id": 403658944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700683881
    },
    {
        "content": "<p>Given the PR that Thomas has, I will not then add a PR for the simple <code>macro</code> above: I am sure that dealing with edge cases would take a long time and it seems that Thomas has already invested quite a bit of effort into it!</p>\n<p>And in the meantime, <code>show_term</code> is a good option that requires no further effort!</p>",
        "id": 403659971,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700684369
    },
    {
        "content": "<p>Having <code>refine? &lt;tactic&gt;</code> is a really cool idea! However, I think some care ought to be taken before using this as a solution for the term version, where the syntax ought to be <code>refine? &lt;term&gt;</code></p>\n<p>Mainly, <code>show_term</code> has the unfortunate effect of instantiating <code>_</code>’s. In the middle of complicated proofs—exactly when we probably want to use <code>refine?</code>—terms might be really long, and we ought to use <code>_</code> where possible. (As such, it also uses assignments produced by tactics which might come after <code>refine?</code>, which can be confusing.)</p>\n<p>Further, as you anticipate <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, I found quite a few edge cases! :P <code>show_term</code> doesn’t seem to work in all cases, even with <code>pp.analyze true</code>: it gets delayed mvars wrong, for instance, and loses goals in type ascriptions. It also uses <code>headBeta</code>, which isn’t appropriate in this case, since we might accidentally put a <code>?_</code> in a function application position (where it then fails).</p>\n<p>It also doesn’t seem to insert goals for unsynthesizable implicit arguments all the time? E.g. <code>set_option pp.analyze true in show_term f ?_ _</code> where <code>def f {A} : A → (p : Prop) → p := sorry</code>.</p>",
        "id": 403660435,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700684618
    },
    {
        "content": "<p>what does that print?</p>",
        "id": 403660663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700684732
    },
    {
        "content": "<p><code>refine f ?refine'_2 (a + c = 0)</code></p>",
        "id": 403660783,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700684782
    },
    {
        "content": "<p>(Using the <code>a + c = 0</code> example goal above)</p>",
        "id": 403660818,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700684805
    },
    {
        "content": "<p>what's wrong with that?</p>",
        "id": 403660948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700684871
    },
    {
        "content": "<p>Can’t synthesize the implicit argument <code>A</code> (type of <code>?refine'_2</code>)! :)</p>",
        "id": 403661032,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700684908
    },
    {
        "content": "<p>oh so this is a pp.analyze issue?</p>",
        "id": 403661097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700684950
    },
    {
        "content": "<p>I’m not sure…I mean, if <code>?refine'_2</code> has a pre-existing type, it makes sense not to include it. I think maybe the issue is pp.analyze doesn’t know what <code>refine</code> needs, and that <code>refine</code> is creating (and needs to synthesize) this argument (and therefore needs it to be explicit to become a goal).</p>",
        "id": 403661336,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700685069
    },
    {
        "content": "<p>Like, pp.analyze is happening “after the fact” (of <code>refine'</code>) here</p>",
        "id": 403661416,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700685118
    },
    {
        "content": "<p>Going back to the original topic for a sec: it seems like one way or another there’s interest here in making <code>refine?</code> insert implicit arguments!</p>",
        "id": 403662045,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700685461
    },
    {
        "content": "<p>Currently <a href=\"https://github.com/leanprover-community/mathlib4/pull/8364\">#8364</a> is awaiting review, but tacitly regards turning implicit arguments into goals as a job for <code>refine'</code> (it only replaces unassigned syntactic <code>_</code>’s with <code>?_</code>’s). I’d like to avoid delaboration if possible, but delaboration will be necessary in the presence of notation or macros. Still, maybe it would be best to only delaborate as a fallback.</p>",
        "id": 403662398,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700685638
    },
    {
        "content": "<p>More broadly, I wonder if it would make sense to have custom delaborators to refinable syntax, which could be passed the necessary information on which mvars must be explicit for <code>refine</code> to work.</p>",
        "id": 403663006,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700685974
    }
]