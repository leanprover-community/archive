[
    {
        "content": "<p>There is an inconsistency between <code>apply?</code> and <code>rw?</code> when the first suggestion closes the goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- no error</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- unsolved goal</span>\n  <span class=\"n\">rw</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>I prefer the <code>apply?</code> behavior because i leave those tactics in my lecture notes when I want to point out there is no need to remember a lemma name.</p>",
        "id": 391706816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695045647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 391706838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695045654
    },
    {
        "content": "<p>Wait, my example isn't  good.</p>",
        "id": 391707011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695045701
    },
    {
        "content": "<p>I meant to write an example where there is no remaining goal at all.</p>",
        "id": 391707057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695045716
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- no error</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- unsolved goal</span>\n  <span class=\"n\">rw</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>is what I meant</p>",
        "id": 391707253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695045775
    },
    {
        "content": "<p>This is currently <code>rw?!</code>. I guess there is no harm in just making it the default.</p>",
        "id": 391792349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695080249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/7247\">#7247</a></p>",
        "id": 391792976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695080657
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 391795089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695081983
    },
    {
        "content": "<p>There are also moments where I want to do some rewrite. My strategy then is to construct an <code>example</code> which asserts the equality and to search for a proof using <code>apply?</code>. But very often, its answer is <code>rfl</code> and I'm stuck in my ignorance.</p>",
        "id": 391877763,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695118119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>, doesn't <code>rw?</code> solve this problem for you? It won't ever say <code>rfl</code>. It's also often easy to use because you don't need to \"isolate\" the fact you know you need.</p>",
        "id": 391891422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695122923
    },
    {
        "content": "<p>I'm not sure I ever tried that… I'll try next time, thanks for the hint!</p>",
        "id": 391892514,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695123320
    },
    {
        "content": "<p>Yeah, I also use it for this purpose. (Though it would be nice if <code>apply?</code> didn't insist on suggesting <code>rfl</code> so much)</p>",
        "id": 391893469,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695123634
    },
    {
        "content": "<p>The hooks are all there in <code>solve_by_elim</code> to reject that solution!</p>",
        "id": 391893546,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695123673
    },
    {
        "content": "<p>(Although I do plan to rewrite all those hooks in the new future, so maybe it is best not to learn/use them right now. :-)</p>",
        "id": 391893669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695123717
    }
]