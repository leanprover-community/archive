[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DFinsupp.ext#doc\">docs#DFinsupp.ext</a> has no <code>[ext]</code>attribute while <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.ext\">docs3#dfinsupp.ext</a> has one.<br>\nIs there any reason for this?</p>",
        "id": 377425224,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689972633
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FunLike.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">dfinsupp.ext</span> <span class=\"n\">DFinsupp.ext</span>\n</code></pre></div>\n<p>Looks like it's just not rendered in the docs</p>",
        "id": 377426979,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1689973218
    },
    {
        "content": "<p>But what surprises me is that on my current setup, <code>apply DFinsupp.ext</code> works, while <code>ext</code> doesn't<br>\n(and worked in the Lean3 version of the file I am presently porting…)</p>",
        "id": 377427410,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689973379
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 377427480,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689973409
    },
    {
        "content": "<p>This is probably due to a change in the way the <code>ext</code> tactic works between lean3 and 4. In lean3, it was much more aggressive, essentially trying all possible ext lemmas as a failsafe, while the lean4 version doesn't do this.</p>",
        "id": 377427548,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1689973437
    },
    {
        "content": "<p>Do LHS and RHS have type <code>DFinsupp</code> or some <code>T</code> where <code>def T := DFinsupp</code>?</p>",
        "id": 377427562,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689973441
    },
    {
        "content": "<p>In such situations in lean4, it usually means that some API is missing.</p>",
        "id": 377427683,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1689973469
    },
    {
        "content": "<p>Well that's one interpretation; another is that <code>ext!</code> is missing.</p>",
        "id": 377437476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689977054
    },
    {
        "content": "<p>Here is a MWE :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.LinearMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">DirectSum.mk_apply</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">DirectSum.mk</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">DirectSum.mk_eq_sum'</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">DirectSum.mk</span> <span class=\"n\">β</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">s.sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DirectSum.of</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.coe_sort_coe</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ext does not work</span>\n  <span class=\"n\">apply</span> <span class=\"n\">DFinsupp.ext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">DirectSum.mk_apply</span><span class=\"o\">,</span> <span class=\"n\">DFinsupp.finset_sum_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hi</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_eq_single_of_mem</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">DirectSum.lof_eq_of</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">DirectSum.lof_apply</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">_</span> <span class=\"n\">hij</span>\n      <span class=\"n\">exact</span> <span class=\"n\">DirectSum.of_eq_of_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hij</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">symm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_eq_zero</span>\n    <span class=\"n\">intro</span> <span class=\"n\">j</span> <span class=\"n\">hj</span>\n    <span class=\"n\">exact</span> <span class=\"n\">DirectSum.of_eq_of_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_of_mem_of_not_mem</span> <span class=\"n\">hj</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 377437963,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689977249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ext.20for.20DFinsupp.2Eext/near/377427562\">said</a>:</p>\n<blockquote>\n<p>Do LHS and RHS have type <code>DFinsupp</code> or some <code>T</code> where <code>def T := DFinsupp</code>?</p>\n</blockquote>\n<p>So the answer to this is \"Yes, with <code>T = DirectSum</code>\"</p>",
        "id": 377438031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689977278
    },
    {
        "content": "<p>I don't really like the idea of duplicating all the dfinsupp API for direct_sum, but duplicating <code>ext</code> seems fairly standard (we already do it for all the <code>FunLike</code> types)</p>",
        "id": 377438162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689977324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ext.20for.20DFinsupp.2Eext/near/377427562\">said</a>:</p>\n<blockquote>\n<p>Do LHS and RHS have type <code>DFinsupp</code> or some <code>T</code> where <code>def T := DFinsupp</code>?</p>\n</blockquote>\n<p>both live in <code>⨁ (i : ι), β i</code></p>",
        "id": 377438489,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689977454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ext.20for.20DFinsupp.2Eext/near/377438162\">said</a>:</p>\n<blockquote>\n<p>I don't really like the idea of duplicating all the dfinsupp API for direct_sum, but duplicating <code>ext</code> seems fairly standard (we already do it for all the <code>FunLike</code> types)</p>\n</blockquote>\n<p>Do you mean I'm erring here?<br>\n(I don't like the idea of duplicating stuff, especially if I have to do it. IIRC, I had to write this in order to provide quotient of graded modules by homogeneous submodules with a grading.)</p>",
        "id": 377438928,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689977631
    },
    {
        "content": "<p>(<code>⨁ i, β i</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum#doc\">docs#DirectSum</a>, <code>Π₀ i, β i</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DFinsupp#doc\">docs#DFinsupp</a>)</p>",
        "id": 377439062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689977667
    },
    {
        "content": "<p>I think you only need to duplicate the <code>ext</code> lemma (and I think it is fine to do so)</p>",
        "id": 377439086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689977681
    },
    {
        "content": "<p>The problem is that <code>ext</code> and some other tactics in Lean 4 (like <code>simp</code>) match lemmas based on types of terms. So, it is possible that some <code>simp</code> lemma about <code>DFinsupp</code> will not apply because you have <code>(f : DirectSum _)</code> instead of <code>f : DFinsupp _</code>.</p>",
        "id": 377444055,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689979955
    },
    {
        "content": "<p>BTW, are there any instances on <code>DirectSum</code> that don't agree with <code>DFinsupp</code>? If no, then should we make <code>DirectSum</code> reducible?</p>",
        "id": 377444111,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689980002
    },
    {
        "content": "<p>Yes, only direct_sum has the convolutive multiplication (it is to DFinsupp as AddMonoidAlgebra is to Finsupp)</p>",
        "id": 377445307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689980611
    },
    {
        "content": "<p>In principle dfinsupp should have pointwise multiplication to match finsupp, though I don't think we ever added it</p>",
        "id": 377445352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689980642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ext.20for.20DFinsupp.2Eext/near/377437476\">said</a>:</p>\n<blockquote>\n<p>Well that's one interpretation; another is that <code>ext!</code> is missing.</p>\n</blockquote>\n<p>How about someone implements <code>ext!</code> so that is applies all <code>@[ext]</code> lemmas, regardless of whether the <code>DiscrTree</code> approves, but then prints a message like \"<code>XYZ.ext</code> applies here. If you would like to be able to use this with <code>ext</code>, please make a copy of this lemma written in terms of the type <code>PQR</code>.\"</p>",
        "id": 377709644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690074478
    },
    {
        "content": "<p>Should it be <code>ext!?</code>, to fit the pattern of \"tactics ending in <code>?</code> shouldn't be committed\"?</p>",
        "id": 377773055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690102583
    },
    {
        "content": "<p>Added an implementation of <code>ext!?</code> to <a href=\"https://github.com/leanprover/std4/pull/120\">std4#120</a> where I also implemented <code>ext?</code> a while ago.<br>\n<a href=\"/user_uploads/3121/vOIXFaVTYtPeV5KuhrGGxOU2/Screenshot_20230724_033331.png\">Screenshot_20230724_033331.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vOIXFaVTYtPeV5KuhrGGxOU2/Screenshot_20230724_033331.png\" title=\"Screenshot_20230724_033331.png\"><img src=\"/user_uploads/3121/vOIXFaVTYtPeV5KuhrGGxOU2/Screenshot_20230724_033331.png\"></a></div>",
        "id": 377962840,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1690162497
    }
]