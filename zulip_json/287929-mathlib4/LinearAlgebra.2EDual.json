[
    {
        "content": "<p>Quite a few proofs in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3659\">!4#3659</a> fail for the same reason: <code>simp</code> can't apply lemmas about <code>LinearMap</code> to <code>Module.Dual</code>. What should we do? Duplicate API? Write a tactic to automate this? Something else?</p>",
        "id": 353099424,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1682575311
    },
    {
        "content": "<p>Not for the same reason, but <code>ext</code> is weaker in lean 4 and to compensate I've been adding extra lemmas.</p>",
        "id": 353126038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682579300
    },
    {
        "content": "<p>Ping here</p>",
        "id": 355974059,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683273756
    },
    {
        "content": "<p>Shouldn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.dual\">docs#module.dual</a> be reducible?</p>",
        "id": 355977848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683274688
    },
    {
        "content": "<p>I don't see what the point is in having it not be; are there any instances that disagree between the dual and underlying map?</p>",
        "id": 355978220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683274778
    },
    {
        "content": "<p>Let me try to make it reducible in Lean 3.</p>",
        "id": 356131977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683309457
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/weak_dual\">docs#weak_dual</a> should be reducible too I think</p>",
        "id": 356136386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683310723
    },
    {
        "content": "<p>Why? It has a different topology.</p>",
        "id": 356137098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683310942
    },
    {
        "content": "<p>UPD: You mean, <code>wek_dual</code> should reducibly unfold to <code>weak_bilin</code>. Probably, yes. I wrote the previous comment before reading the source.</p>",
        "id": 356137322,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683311000
    },
    {
        "content": "<p>I made the same assumption in another thread!</p>",
        "id": 356145203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683313402
    },
    {
        "content": "<p>I tried to make it reducible and I get a timeout in the same file.</p>",
        "id": 356192185,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683336236
    },
    {
        "content": "<p>(I'm talking about <code>module.dual</code>)</p>",
        "id": 356192245,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683336246
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/tree/YK-dual\">branch#YK-dual</a></p>",
        "id": 356192287,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683336286
    },
    {
        "content": "<p>i was looking at this, and it seems to compile fine in lean4. just that there are linting issues. is all that is left a simple clean up? or are you guys still working on it. i would be happy to attempt the clean up</p>",
        "id": 356350533,
        "sender_full_name": "Tchsurvives",
        "timestamp": 1683395501
    },
    {
        "content": "<p>The timeout seems to be a problem in <code>simps</code></p>",
        "id": 356364624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683403326
    },
    {
        "content": "<p>I pushed a fix, the rest of that file is now happy on <a href=\"https://github.com/leanprover-community/mathlib/tree/YK-dual\">branch#YK-dual</a></p>",
        "id": 356365366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683403872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Thanks! <span class=\"user-mention\" data-user-id=\"451706\">@Tchsurvives</span> I think that we should merge <a href=\"https://github.com/leanprover-community/mathlib/pull/18963\">#18963</a>, wait for <code>mathport</code>, then sync <a href=\"https://github.com/leanprover-community/mathlib4/pull/3659\">!4#3659</a></p>",
        "id": 356511252,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1683473738
    },
    {
        "content": "<p>I forward ported the changes from <a href=\"https://github.com/leanprover-community/mathlib/pull/18963\">#18963</a>. If this thing ever built, it surely does not now. Issues</p>\n<ul>\n<li>broken dot notation on <code>LinearMap</code></li>\n<li>timeouts </li>\n<li>universe issues stemming from <code>Cardinal.lift.{max v u, u}</code></li>\n</ul>",
        "id": 359027273,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684340897
    },
    {
        "content": "<p>My understanding is that broken dot notation on <code>LinearMap</code> is issue <a href=\"https://github.com/leanprover/lean4/pull/1910\">lean4#1910</a> .</p>",
        "id": 359029614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684341555
    },
    {
        "content": "<p>I see. Thanks! I will do the dumb workaround until then.</p>",
        "id": 359030023,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684341671
    },
    {
        "content": "<p>That is if my computer doesn't melt through the desk after turning off heartbeats on one of these timeouts <span aria-label=\"hot\" class=\"emoji emoji-1f525\" role=\"img\" title=\"hot\">:hot:</span></p>",
        "id": 359030315,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684341745
    },
    {
        "content": "<p>This files drains all my happiness at the speed bump from <img alt=\":eta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/37966.png\" title=\"eta\"></p>",
        "id": 359081467,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684357301
    },
    {
        "content": "<blockquote>\n<p>I forward ported the changes from <a href=\"https://github.com/leanprover-community/mathlib/pull/18963\">#18963</a>.</p>\n</blockquote>\n<p>It might have been a better idea to start fresh; I think the old PR has quite a few hacks that should no longer be necessary as of <a href=\"https://github.com/leanprover-community/mathlib/pull/18963\">#18963</a></p>",
        "id": 359320317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684394080
    },
    {
        "content": "<p>I’ll step back and try this.</p>",
        "id": 359383602,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684413286
    },
    {
        "content": "<p>Did this. Did help with some timeouts. Added one. Currently working on this on a different branch. Will merge soon</p>",
        "id": 359495588,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684443423
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> for clearing one timeout. For the second (and third), <code>W.dualPairing</code> is exceptional slow for <code>[Field K]</code> and <code>W : Subspace K V</code>.  For example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">dualAnnihilator</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">Submodule.dualPairing</span> <span class=\"n\">W</span>\n</code></pre></div>\n<p>is instantaneous while </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Subspace</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">⧸</span> <span class=\"n\">dualAnnihilator</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">K</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n    <span class=\"n\">W.dualPairing</span>\n</code></pre></div>\n<p>times out to the order of <code>400000</code> heartbeats</p>",
        "id": 359685967,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684507936
    },
    {
        "content": "<p>Replacing <code>W.dualPairing</code> with <code>sorry</code> is instantaneous</p>",
        "id": 359686465,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684508045
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.dual_pairing\">docs#submodule.dual_pairing</a></p>",
        "id": 359688233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684508401
    },
    {
        "content": "<p>Does adding <code>by exact</code> to the start of either spelling change the duration?</p>",
        "id": 359688440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684508441
    },
    {
        "content": "<p>Let me check</p>",
        "id": 359688492,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684508453
    },
    {
        "content": "<p>There was some weirdness in Lean3 where the value of the definition would fill in the metavariables in its type</p>",
        "id": 359688535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684508462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2EDual/near/359688440\">said</a>:</p>\n<blockquote>\n<p>Does adding <code>by exact</code> to the start of either spelling change the duration?</p>\n</blockquote>\n<p>No improvement in time</p>",
        "id": 359692912,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684509324
    },
    {
        "content": "<p>Changing <code>(K : Type _) (V : Type _)</code> to <code>(K : Type u) (V : Type v)</code> makes it not time out (but it's still slow). I find this quite surprising!</p>",
        "id": 359692985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684509344
    },
    {
        "content": "<p>Aha!</p>",
        "id": 359693051,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684509361
    },
    {
        "content": "<p>Suggestively I already had to do some universe triage</p>",
        "id": 359693281,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684509403
    },
    {
        "content": "<p><code>(K : Type _) (V : Type v)</code> times out</p>",
        "id": 359693327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684509414
    },
    {
        "content": "<p>It is <code>K</code></p>",
        "id": 359693405,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684509433
    },
    {
        "content": "<p>It is a rather brutal time out without that. Over <code>9000000</code></p>",
        "id": 359693622,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684509481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2EDual/near/359692985\">said</a>:</p>\n<blockquote>\n<p>Changing <code>(K : Type _) (V : Type _)</code> to <code>(K : Type u) (V : Type v)</code> makes it not time out (but it's still slow). I find this quite surprising!</p>\n</blockquote>\n<p>We should definitely do this then. When we write <code>Type _</code> we almost always mean <code>Type new_u</code> and we're just lazy. In Lean3 these were basically identical, but lean 4 goes on a unification wild goose chase in every lemma</p>",
        "id": 359693860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684509519
    },
    {
        "content": "<p>Can we have a macro <code>%Type</code> such that <code>K : %Type</code> just means <code>universes uK</code>, <code>K : Type uK</code>?</p>",
        "id": 359693990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684509548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2EDual/near/359693622\">said</a>:</p>\n<blockquote>\n<p>It is a rather brutal time out without that. Over <code>9000000</code></p>\n</blockquote>\n<p><code>dualPairing_eq</code> goes down to <code>400000</code> now</p>",
        "id": 359695266,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684509802
    },
    {
        "content": "<p>There is some universe gymnastics with <code>Cardinal.lift</code> and <code>max u v</code> already in the file</p>",
        "id": 359695770,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684509907
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dualPairing_eq</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Subspace</span> <span class=\"n\">K</span> <span class=\"n\">V₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">W.dualPairing</span> <span class=\"bp\">=</span> <span class=\"n\">W.quotAnnihilatorEquiv.toLinearMap</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>takes <em>longer</em> if you make the universes explicit?! <code>ext</code> takes 11.8 seconds not 7.79 on my machine <em>shrug</em></p>",
        "id": 359699515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684510734
    },
    {
        "content": "<p>I couldn't get past the declaration without explicit universes and didn't profile yet</p>",
        "id": 359699792,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684510804
    },
    {
        "content": "<p>Here is the behaviour of <code>Type u</code> behaving better than <code>Type _</code> on mathlib master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FiniteDimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Projection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.SesquilinearForm</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Finiteness</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FreeModule.Finite.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Module</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The dual space of an R-module M is the R-module of linear maps `M → R`. -/</span>\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Dual</span> <span class=\"o\">:=</span>\n  <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">module.dual</span> <span class=\"n\">Module.Dual</span>\n\n<span class=\"sd\">/-- The canonical pairing of a vector space and its algebraic dual. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">dualPairing</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LinearMap.id</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">module.dual_pairing</span> <span class=\"n\">Module.dualPairing</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Module</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dualRestrict</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LinearMap.domRestrict'</span> <span class=\"n\">W</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dualAnnihilator</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"n\">LinearMap.ker</span> <span class=\"n\">W.dualRestrict</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CommRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dualPairing</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">W.dualAnnihilator</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">W.dualAnnihilator.liftQ</span> <span class=\"n\">W.dualRestrict</span> <span class=\"n\">le_rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">submodule.dual_pairing</span> <span class=\"n\">Submodule.dualPairing</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CommRing</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test</span> <span class=\"c1\">-- fun starts here</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Submodule</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- instant for rings.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">dualAnnihilator</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n  <span class=\"n\">W.dualPairing</span>\n\n<span class=\"c1\">-- But for fields it's slow. And how slow it is depends on whether you named your</span>\n<span class=\"c1\">-- universes!</span>\n\n<span class=\"c1\">-- Ku and Vu have explicit named universes</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Ku</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Vu</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">Ku</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">Vu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">Ku</span> <span class=\"n\">Vu</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- This is much slower than the ring example</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">Ku</span> <span class=\"n\">Vu</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">Ku</span> <span class=\"n\">Vu</span> <span class=\"bp\">⧸</span> <span class=\"n\">dualAnnihilator</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">Ku</span><span class=\"o\">]</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">Ku</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n  <span class=\"n\">W.dualPairing</span>\n\n<span class=\"c1\">-- But without explicit named universes...</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- this times out!</span>\n<span class=\"c1\">--set_option maxHeartbeats 1000000 in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">⧸</span> <span class=\"n\">dualAnnihilator</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">K</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n  <span class=\"n\">W.dualPairing</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 359705370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684512115
    },
    {
        "content": "<p>Note that this doesn't help with answering the question of why fields are slower than rings.</p>",
        "id": 359707711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684512708
    },
    {
        "content": "<p>This is slow but does not need bumps </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">comp_dualPairing_mkQ_eq</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Subspace</span> <span class=\"n\">K</span> <span class=\"n\">V₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearMap.comp</span> <span class=\"n\">W.dualPairing</span> <span class=\"o\">(</span><span class=\"n\">mkQ</span> <span class=\"n\">W.dualAnnihilator</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">LinearMap.comp</span> <span class=\"n\">W.quotAnnihilatorEquiv.toLinearMap</span> <span class=\"o\">(</span><span class=\"n\">mkQ</span> <span class=\"n\">W.dualAnnihilator</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Trying to stick this into <code>dualPairing_eq</code> is as bad as not</p>",
        "id": 359715461,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684514517
    },
    {
        "content": "<p>Here is the relevant trace for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">⧸</span> <span class=\"n\">dualAnnihilator</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">R</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n  <span class=\"n\">W.dualPairing</span>\n</code></pre></div>\n<p>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(pp.all off)\n[Meta.isDefEq] [0.003974s] ✅ Module.Dual R M ⧸ Submodule.dualAnnihilator W →ₗ[R]\n      Module.Dual R { x // x ∈ W } =?= Module.Dual R M ⧸ Submodule.dualAnnihilator W →ₗ[R] { x // x ∈ W } →ₗ[R] R ▶\n\n(pp.all on)\n@LinearMap.{?u.18485, ?u.18485, max ?u.18488 ?u.18485, max ?u.18488 ?u.18485} R R\n      (@CommSemiring.toSemiring.{?u.18485} R (@CommRing.toCommSemiring.{?u.18485} R inst✝²))\n...\n=?=\n@LinearMap.{?u.18485, ?u.18485, max (max ?u.18485 ?u.18488) ?u.18488 ?u.18485,\n          max ?u.18485 ?u.18488}\n      R R (@CommSemiring.toSemiring.{?u.18485} R (@CommRing.toCommSemiring.{?u.18485} R inst✝²))\n...\n</code></pre></div>\n<p>The universes don't quite match up, but the terms (which are huge) at least start off the same, and it wouldn't surprise me if they are very close to being the same modulo universe issues. Here in contrast is the trace for the fields, when we include the universes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Ku</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Vu</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">Ku</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">Vu</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">Ku</span> <span class=\"n\">Vu</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Submodule</span> <span class=\"n\">Ku</span> <span class=\"n\">Vu</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">Ku</span> <span class=\"n\">Vu</span> <span class=\"bp\">⧸</span> <span class=\"n\">dualAnnihilator</span> <span class=\"n\">W</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">Ku</span><span class=\"o\">]</span> <span class=\"n\">Module.Dual</span> <span class=\"n\">Ku</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n  <span class=\"n\">W.dualPairing</span>\n</code></pre></div>\n<p>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(pp.all off)\n[Meta.isDefEq] [2.535892s] ✅ Module.Dual Ku Vu ⧸ Submodule.dualAnnihilator W →ₗ[Ku]\n      Module.Dual Ku { x // x ∈ W } =?= Module.Dual Ku Vu ⧸ Submodule.dualAnnihilator W →ₗ[Ku] { x // x ∈ W } →ₗ[Ku] Ku ▼\n\n(pp.all on)\nLinearMap.{u, u, max v u, max v u} Ku Ku\n      (@DivisionSemiring.toSemiring.{u} Ku (@Semifield.toDivisionSemiring.{u} Ku (@Field.toSemifield.{u} Ku inst✝²)))\n...\n=?=\n@LinearMap.{u, u, max (max u v) v u, max u v} Ku Ku\n      (@CommSemiring.toSemiring.{u} Ku\n...\n</code></pre></div>\n<p>It takes a while to reconcile. It is not one big long thing, it's a huge tree of fairly quick things. Making the universes explicit means that Lean does not have to contemplate questions like <code>?u.18485 =?= ?u.18488</code> but allowing fields seems to make the total number of questions Lean asks rocket up. There are questions like <code>AddMonoid.toAddSemigroup =?= AddMonoid.toAddSemigroup</code> which in the ring case are just rfl and closed in 0.0000... seconds, but in the field case involve a lot of unfolding.</p>\n<p>Making universes implicit as well just pushes it over the edge. But there are two independent issues here.</p>",
        "id": 359757871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684526759
    },
    {
        "content": "<p>Yeah it goes into the quotient many times each with a decent cost.</p>",
        "id": 359758322,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684526935
    },
    {
        "content": "<p>I don't see a good near-term solution other than merge with the bumps in place for the moment so I've marked in <code>awaiting-review</code></p>",
        "id": 359763929,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684529009
    },
    {
        "content": "<p>Advert for <a href=\"https://github.com/leanprover-community/mathlib4/pull/4124\">!4#4124</a> <code>LinearAlgebra.Contraction</code>. It is almost across the line but I will be preparing/traveling this weekend. Please finish it off</p>",
        "id": 359770025,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684531286
    }
]