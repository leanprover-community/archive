[
    {
        "content": "<p>The statement of the lemma <code>count_eq_card_filter_eq</code> in Data.Multiset.Basic has been changed from <br>\n<code>s.count a = (s.filter (eq a)).card</code> <br>\nto <br>\n<code>s.count a = card (s.filter (· = a))</code><br>\nBut, if I am not mistaken, <code>eq a</code> is not defeq to <code>(· = a)</code> but to <code>(a = ·)</code>so this causes problem down the road. </p>\n<p>Was that changed on purpose?</p>",
        "id": 324611954,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675086967
    },
    {
        "content": "<p>I also saw something like this in Data.List and I was confused. I agree it should be <code>(a = .)</code>.</p>",
        "id": 324614612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675087661
    },
    {
        "content": "<p>Looks like Johan changed it in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1491/commits/e1ec67869407977d4a14f33d3fab3d428cf3d1d7\">https://github.com/leanprover-community/mathlib4/pull/1491/commits/e1ec67869407977d4a14f33d3fab3d428cf3d1d7</a></p>",
        "id": 324616488,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675088064
    },
    {
        "content": "<p>It might be worth trying to change the definition of <code>Multiset.count</code> back to using <code>a = .</code> and fixing whatever breaks as a result</p>",
        "id": 324618406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675088506
    },
    {
        "content": "<p>Hum, the problem goes all the way down to the definition of <code>List.count</code> where <code>eq a</code> was replaced by <code>(· == a)</code></p>\n<p>Let see what happens if I switch the equality...</p>",
        "id": 324627979,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675090568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> Yes, but we decided that <code>List</code> is CS world, so there we use <code>Bool</code>-valued stuff.</p>",
        "id": 324628232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675090633
    },
    {
        "content": "<p>Oh I searched for this but there are no lemmas about it in Data.List.Basic so I concluded it doesn't exist.</p>",
        "id": 324628246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675090635
    },
    {
        "content": "<p>The issue (or one issue) is the order of the equality</p>",
        "id": 324628321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675090657
    },
    {
        "content": "<p>Aha, I see. And I guess <code>List.count</code> is in Std?</p>",
        "id": 324628411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675090682
    },
    {
        "content": "<p>In that case we should make the definition of <code>Multiset.count</code> agree with the Lean 3 definition, and fix any resulting mismatches with <code>List.count</code> there.</p>",
        "id": 324628624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675090733
    },
    {
        "content": "<p>Otoh, maybe Std would be open to swapping the order?</p>",
        "id": 324628748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675090764
    },
    {
        "content": "<p>It may also be, in which case we can then unfix the mismatches</p>",
        "id": 324628967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675090811
    },
    {
        "content": "<p>I am afraid if we don't switch the order it will cause more problems down the road.</p>",
        "id": 324629512,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675090923
    },
    {
        "content": "<p>You mean switch from the current mathlib 4 definition of <code>Multiset.count</code> to the original definition as in mathlib 3, right?</p>",
        "id": 324629991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675091025
    },
    {
        "content": "<blockquote>\n<p>You mean switch from the current mathlib 4 definition of <code>Multiset.count</code> to the original definition as in mathlib 3, right?</p>\n</blockquote>\n<p>Yes, lot of lemmas assume that the order in the same as the one of <code>eq</code> as it was in mathlib3</p>",
        "id": 324630305,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675091092
    },
    {
        "content": "<p>Yes, then we agree</p>",
        "id": 324630422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675091118
    },
    {
        "content": "<p>As expected, changing the definition of <code>List.count</code> breaks a lot of things...</p>",
        "id": 324635934,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675092348
    },
    {
        "content": "<p>Yeah, I think you should just make the change at the <code>Multiset</code> boundary.</p>",
        "id": 324720135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675095604
    },
    {
        "content": "<p>It is still not so easy since <code>List.count</code> is used all over the place in <code>Multiset.Basic</code> and the two definitions would not agree anymore. I guess one way to fix it would be to have both definitions for <code>Multiset.count</code> and prove they are equal...</p>",
        "id": 324724555,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675096725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/count_eq_card_filter_eq/near/324635934\">said</a>:</p>\n<blockquote>\n<p>As expected, changing the definition of <code>List.count</code> breaks a lot of things...</p>\n</blockquote>\n<p>Can we fix those things? This sounds like we made the mistake of working around a problem when porting instead of diagnosing it, and now we're diagnosing it after already hacking everything to work.</p>",
        "id": 324724841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675096814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/count_eq_card_filter_eq/near/324724841\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/count_eq_card_filter_eq/near/324635934\">said</a>:</p>\n<blockquote>\n<p>As expected, changing the definition of <code>List.count</code> breaks a lot of things...</p>\n</blockquote>\n<p>Can we fix those things? This sounds like we made the mistake of working around a problem when porting instead of diagnosing it, and now we're diagnosing it after already hacking everything to work.</p>\n</blockquote>\n<p>Well, there are not that many errors but some of those have to do with things like <code>decide (a = b)</code> and I am not sure how to handle those. In any case,  as Johan pointed out , the definition of <code>List.count</code> is part of Std.</p>",
        "id": 324767901,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675109572
    },
    {
        "content": "<p>At this point, I see 3 possibilities:</p>\n<ol>\n<li>Leave the definitions of <code>List.count</code> and <code>Multiset.count</code> as they are and just fix proofs as we do the porting</li>\n<li>Fix only the definition of <code>Multiset.count</code> and use some auxiliary result to show that <code>List.count</code> and <code>Multiset.count</code> agree </li>\n<li>Fix the definitions of both <code>List.count</code> and <code>Multiset.count</code></li>\n</ol>\n<p>Solution 1. is probably  the easiest solution but I think 3. is the <em>right</em>  solution. I am not a big fan of solution 2 but I think it is still better than solution 1.  I am willing to work on some PR to implement solution 2 or 3 but for solution 3, as mentioned above,  since <code>List.count</code> is part of Std, that would first require that Lean 4 people agree with the change.</p>",
        "id": 324876075,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675161513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think Std would welcome a change in the defn of <code>List.count</code>?</p>",
        "id": 324988953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675190741
    },
    {
        "content": "<p>what change?</p>",
        "id": 324989332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675190848
    },
    {
        "content": "<p>swapping the order of arguments to beq I think is fine, but changing it to use eq is less so</p>",
        "id": 324989543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675190898
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> is mostly interested in changing the order of the arguments, atm</p>",
        "id": 324989750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675190961
    },
    {
        "content": "<p>are there specific arguments other than mathlib3 compatibility for the argument order one way or another?</p>",
        "id": 324990070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675191045
    },
    {
        "content": "<p>it would be nice to be consistent about this</p>",
        "id": 324990134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675191065
    },
    {
        "content": "<p>Well, I thought the compatibility with ‘eq’ could also be important since it is used in mathlib.</p>",
        "id": 324990910,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675191298
    }
]