[
    {
        "content": "<p>Could we tone down the <code>unusedVariables</code> linter? It forbids me naming a variable I don't call by name even if it appears in other hypotheses.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"n\">ha</span>\n<span class=\"c1\">-- unused variable `a` [linter.unusedVariables]</span>\n</code></pre></div>\n<p>I think that's a reasonable use case, as naming the variable makes the infoview nicer.</p>",
        "id": 319600501,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672929895
    },
    {
        "content": "<p>I think you're intended to use a name that starts with an underscore if you want to name an unused variable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_a</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 319610416,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672932760
    },
    {
        "content": "<p>I really don't like this <code>unusedVariables</code> linter for the following reasons.</p>\n<ul>\n<li>It makes the tactic state much less readable if I revisit a proof.</li>\n<li>Sometimes the names of variables gives information about the role they play. e.g. <code>hx</code> is about <code>x</code> and <code>G</code> is a group. </li>\n<li>Now that we have can give implicit arguments explicitly with <code>List.nil (α := G)</code>, we should try to make sure the names are nice.</li>\n<li>Although we can use underscores to name variables, $things£ _are _more_ -difficult'' to_ _read_ -with +-punctuation_ &amp;everywhere'</li>\n<li>We don't gain anything by using underscores.</li>\n</ul>\n<p>What do other people think?</p>",
        "id": 322771804,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674329632
    },
    {
        "content": "<p>I think that maybe it should have an option so that it only complains about genuinely unused variables, like the mathlib3 linter.</p>",
        "id": 322772087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674329818
    },
    {
        "content": "<p>A variable is not unused if it appears implicitly.</p>",
        "id": 322772111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674329843
    },
    {
        "content": "<p>by using underscores do you mean using <code>_G</code> instead of <code>G</code> for unused variables to turn off the lint?</p>",
        "id": 322772310,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674329994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unusedVariables/near/322772310\">said</a>:</p>\n<blockquote>\n<p>by using underscores do you mean using <code>_G</code> instead of <code>G</code> for unused variables to turn off the lint?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 322772350,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674330004
    },
    {
        "content": "<p>My feeling when writing lean 3 code is that sometimes I'm very happy to put in the <code>_</code>s and sometimes I just want to put in the variable names even if they're not needed, because I've used g and h above so many times and I want to call them g and h again in the code even if the unification algorithm can figure them out.</p>",
        "id": 322772451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674330100
    },
    {
        "content": "<p>for programming it's a pretty essential lint, but I can see mathlib wanting to turn it off/make it less aggressive</p>",
        "id": 322772529,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674330144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> can you explain why it is essential in its current form?</p>",
        "id": 322772823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674330341
    },
    {
        "content": "<p>Example: when you're programming with side-effects inside some stateful monad, you may forget to do something with a variable that's provided to the function. The linter is a straightforward mitigation of such issue</p>",
        "id": 322774517,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674331497
    },
    {
        "content": "<p>This is a real example: we had a hidden bug that we hadn't seen until this linter came up. We were encoding data from some types into a generic data format. Suppose you have <code>inductive X | x : Nat -&gt; Nat -&gt; X</code> and you want to put those two <code>Nat</code>s inside an array like <code>#[.nat a, .nat b]</code>. We simply forgot to add <code>b</code> and the linter flagged that <code>b</code> wasn't being used for anything.</p>\n<p>The actual example wasn't so simple, so it was hard to see with the naked eye. But the computer sees everything <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 322774961,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674331799
    },
    {
        "content": "<p>I don't think this really applies in mathlib then I guess, unless they're genuinely not used at all even implicitly. We don't have bugs because we prove everything and definitions tend not to be very long anyway.</p>",
        "id": 322777817,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674334044
    },
    {
        "content": "<p>Yes, I recall finding at least 3 issues when we first applied the linter to mathlib. It wasn't only meta stuff, some defs were wrong too</p>",
        "id": 322778387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674334446
    },
    {
        "content": "<p>also unused haves</p>",
        "id": 322778410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674334463
    },
    {
        "content": "<p>I think it is a valuable lint, even for mathlib</p>",
        "id": 322778441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674334494
    },
    {
        "content": "<blockquote>\n<p>We don't have bugs because we prove everything</p>\n</blockquote>\n<p>This is not really true, I've written about this elsewhere. We don't prove everything either, and what about the theorems themselves? We don't prove that the statements are done correctly so some sanity checking is good</p>",
        "id": 322778709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674334723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unusedVariables/near/322778387\">said</a>:</p>\n<blockquote>\n<p>Yes, I recall finding at least 3 issues when we first applied the linter to mathlib. It wasn't only meta stuff, some defs were wrong too</p>\n</blockquote>\n<p>What were the issues?</p>",
        "id": 322780921,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336638
    },
    {
        "content": "<p>referring to the wrong / a shadowed variable in definitions usually</p>",
        "id": 322780943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336666
    },
    {
        "content": "<p>I didn't keep track, I can dig them up</p>",
        "id": 322780954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336682
    },
    {
        "content": "<p>So the actual <code>a</code> was genuinely unused and not used implicitly?</p>",
        "id": 322780962,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336702
    },
    {
        "content": "<p>yes</p>",
        "id": 322780967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336708
    },
    {
        "content": "<p>if it is used implicitly it will usually not be marked by the linter</p>",
        "id": 322780971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336720
    },
    {
        "content": "<p>The lean4 linter does trigger for variables used implicitly.</p>",
        "id": 322781031,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336751
    },
    {
        "content": "<p>I'm all for the linter in the case where the variables are not used at all.</p>",
        "id": 322781048,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336777
    },
    {
        "content": "<p>For most of the issues you flagged above, you should just use leading underscore</p>",
        "id": 322781059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336787
    },
    {
        "content": "<p>But that makes it less readable. This is important. What do we gain with this linter?</p>",
        "id": 322781077,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336819
    },
    {
        "content": "<p>I disagree that this conveys no useful information - it says that the variable is intentionally unused</p>",
        "id": 322781084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336829
    },
    {
        "content": "<p>once you know what it means it's not particularly hard to read</p>",
        "id": 322781129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336853
    },
    {
        "content": "<p>the point of the linter is to have an extra check on unused variables, saying \"are you sure you wanted to ignore this variable?\"</p>",
        "id": 322781181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336916
    },
    {
        "content": "<p>because in a not insignificant fraction of cases this is a symptom of a mistake or bug</p>",
        "id": 322781193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336947
    },
    {
        "content": "<p>When porting we just use a script to get rid of the errors so I'm not sure we think about if we did want to ignore it</p>",
        "id": 322781249,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336966
    },
    {
        "content": "<p>I would not use that script until at least glancing over the warnings to make sure that they are what I wanted</p>",
        "id": 322781268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337015
    },
    {
        "content": "<p>We just don't have time for that when porting. A lot of the time I port without understanding stuff very much. I can't usefully perform this check.</p>",
        "id": 322781408,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674337133
    },
    {
        "content": "<p>but the chances of real issues in ported code is somewhat lower than new code</p>",
        "id": 322781423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337146
    },
    {
        "content": "<p>so in this particular case I am more okay than I would normally be with auto-fixing unused variable warnings</p>",
        "id": 322781532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337254
    },
    {
        "content": "<p>for a lot of warning classes it defeats the point to auto-fix them without any human intervention</p>",
        "id": 322781596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337317
    },
    {
        "content": "<p>(some warning classes like <code>unnecessarySeqFocus</code> can totally be auto-fixed and aren't right now only because of tooling limitations)</p>",
        "id": 322781664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337361
    },
    {
        "content": "<p>Actually, that one is auto-fixed by <code>./scripts/fix-lints.py</code>.</p>",
        "id": 322818230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674370441
    },
    {
        "content": "<p>Repeating this again, I see <code>unusedVariables</code> actively discouraging good style by making us drop the names of variables that show up in the tactic state. And Mario's solution of \"just add a leading underscore\" makes it feel like we're going against the linter, which is <em>not</em> encouraging.</p>",
        "id": 351807572,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682150454
    },
    {
        "content": "<p>Adding a leading underscore is <em>not</em> going against the linter. If the variable is genuinely unused, then both <code>_</code> and <code>_x</code> indicate this better than <code>x</code></p>",
        "id": 351817601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682153146
    },
    {
        "content": "<p>the goal of the linter is to make it obvious by looking at the source code whether variables are unused</p>",
        "id": 351817796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682153196
    },
    {
        "content": "<p>as well as to give you an \"are you sure?\" moment when a variable appears to be unused and it is not clear whether that was intentional</p>",
        "id": 351817932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682153243
    },
    {
        "content": "<p>But <code>_</code> doesn't mean the variable is unused, it just means it's not referred to by name</p>",
        "id": 351822741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682154794
    },
    {
        "content": "<p>I think considering variables \"used\" if they appear in the type of the result would resolve pretty much all the cases <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> is annoyed about</p>",
        "id": 351822971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682154859
    },
    {
        "content": "<p>The mathlib unused arguments linter already works like that. I see it as being mostly complementary to the lean linter</p>",
        "id": 351823757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682155043
    },
    {
        "content": "<p>I'm not sure what you mean; I'm pretty sure it rejects <code>fun x =&gt; le_refl _</code> as a proof of <code> ∀ x, x ≤ x</code></p>",
        "id": 351824791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682155260
    },
    {
        "content": "<p>the mathlib linter doesn't</p>",
        "id": 351825195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682155340
    },
    {
        "content": "<p>the one you get with <code>#lint</code></p>",
        "id": 351825302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682155362
    },
    {
        "content": "<p>I wasn't aware there were two separate linters here. The lean linter complains</p>",
        "id": 351825511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682155404
    },
    {
        "content": "<p>Are you suggesting we ignore the lean linter errors and only listen to the mathlib ones?</p>",
        "id": 351825608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682155427
    },
    {
        "content": "<p>I'm not suggesting anything, just observing that there are two linters. One acts on syntax and reports if you did not use the name itself (i.e. changing the binding would not break the proof), while the other reports if the elaborated term did not use an argument (i.e. even if you used the hypothesis in a tactic, that hypothesis did not contribute to the final term and can be removed)</p>",
        "id": 351826383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682155599
    },
    {
        "content": "<p>I think this thread is complaining only about the former</p>",
        "id": 351826568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682155639
    },
    {
        "content": "<p>Hijacking this thread for a moment, I've been meaning to ask about about how to add an <a href=\"https://github.com/leanprover-community/mathlib4/pull/3162/files#diff-093b0a168c09f785191defc81b43d49c1b15f0d18ff59ff5886ebbc7cbf5608eR171\">unused variables ignore function</a>. With that linked ignore function, it only works in the same module as where the ignore function is defined. Is this because the attribute is builtin? Is there some other way to get the attribute to stick across different modules?</p>",
        "id": 351832536,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682157162
    },
    {
        "content": "<p>It looks like the extension just stubs out saving the tagged declarations to disk:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">builtin_initialize</span> <span class=\"n\">unusedVariablesIgnoreFnsExt</span> <span class=\"o\">:</span> <span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"n\">Name</span> <span class=\"n\">Unit</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerSimplePersistentEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">addEntryFn</span>    <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n    <span class=\"n\">addImportedFn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 351833252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682157368
    },
    {
        "content": "<p>Hm yes that looks wrong</p>",
        "id": 351907229,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682179938
    },
    {
        "content": "<p>I'll just point out another problem with this linter, which is that we miss out on noticing genuinely unused variables, because this linter doesn't check for that. For example <a href=\"https://github.com/leanprover-community/mathlib4/pull/3986\">!4#3986</a>. I'm still in favour of changing this linter to check for genuinely unused variables.</p>",
        "id": 358262155,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684072032
    },
    {
        "content": "<p>the mathlib linter should be catching this?</p>",
        "id": 358264842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684072989
    },
    {
        "content": "<p>I think it can't because the variable is caught in the induction?</p>",
        "id": 358264918,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684073019
    },
    {
        "content": "<p>that certainly makes the analysis a lot harder</p>",
        "id": 358265074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684073073
    },
    {
        "content": "<p>Is this related to the way <code>induction</code> captures a bunch of unused <code>variable</code>s that it didn't in lean 3?</p>",
        "id": 358272345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684076028
    },
    {
        "content": "<p>Once again, can we please turn down/off this linter? In <a href=\"https://github.com/leanprover-community/mathlib4/pull/5810\">!4#5810</a> I now have a bunch of statements that talk about <code>_x</code>.</p>",
        "id": 375796031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689523826
    },
    {
        "content": "<p>I now think that I never want to check whether a variable introduced in a lambda is actually used or not. Constant functions are nice.</p>",
        "id": 375796288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689523911
    },
    {
        "content": "<p>Should we make a vote? Because I would vote for not removing the linter.</p>",
        "id": 375797311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689524269
    },
    {
        "content": "<p>I see nothing wrong in <code>fun _x =&gt; c</code></p>",
        "id": 375797553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689524361
    },
    {
        "content": "<p>Yury, consider the difference between <code>∀ x, true</code> and <code>λ x, 0</code>. I don't consider <code>x</code> to be unused in the second case.</p>",
        "id": 375797565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689524367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unusedVariables/near/375797553\">said</a>:</p>\n<blockquote>\n<p>I see nothing wrong in <code>fun _x =&gt; c</code></p>\n</blockquote>\n<p>You end up with <code>_x</code> in a lemma statement!</p>",
        "id": 375797624,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689524396
    },
    {
        "content": "<p>I'm more opposed to the <code>fun x hx =&gt; hx</code> version where the linter is saying \"you have to write the explicit type if you want to keep the nice name\"</p>",
        "id": 375797817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689524478
    },
    {
        "content": "<p>I think <code>fun _x =&gt; c</code> is a grayer area</p>",
        "id": 375797840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689524486
    },
    {
        "content": "<p><code>fun _ =&gt; 0</code> clearly says \"I am not going to use this input in the output\".</p>",
        "id": 375797911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689524522
    },
    {
        "content": "<p>What lemma statements are you talking about? I searched for <code>_x</code> in the PR and found nothing.</p>",
        "id": 375797999,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689524546
    },
    {
        "content": "<p>I am about to push the fixes. Give me 5min.</p>",
        "id": 375798088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689524578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unusedVariables/near/375797840\">said</a>:</p>\n<blockquote>\n<p>I think <code>fun _x =&gt; c</code> is a grayer area</p>\n</blockquote>\n<p>I don't even see what is gray about this, the value is quite clearly unused</p>",
        "id": 375798189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689524610
    },
    {
        "content": "<p>The problem is that I never wrote <code>fun x =&gt; c</code>. I wrote <code>∫ x, c</code>!</p>",
        "id": 375798313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689524647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  is complaining that <code>⨍⁻ x, (0 : ℝ≥0∞) ∂μ</code> has to be written as <code>⨍⁻ _x, (0 : ℝ≥0∞) ∂μ</code></p>",
        "id": 375798333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689524654
    },
    {
        "content": "<p>yeah it looks unused there too</p>",
        "id": 375798342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689524657
    },
    {
        "content": "<p>I'm not seeing a gray area here</p>",
        "id": 375798377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689524669
    },
    {
        "content": "<p>What's \"gray\" is whether the second version is nicer to read</p>",
        "id": 375798384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689524674
    },
    {
        "content": "<p>There's no grayness as to whether it's unused</p>",
        "id": 375798403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689524683
    },
    {
        "content": "<p>Why not just <code>⨍⁻ _, 0 ∂μ</code>?</p>",
        "id": 375798474,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689524708
    },
    {
        "content": "<p>I think it is valuable information to be able to clearly see that the value is unused as a precursor to applying some theorem about how it's equal to the body times the measure of a set</p>",
        "id": 375798500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689524715
    },
    {
        "content": "<p>the use of prefix underscore to mean \"unused\" was not really a convention in lean 3, so I can understand why it is unfamiliar, but the point of the linter is to enforce exactly this convention in lean 4</p>",
        "id": 375798795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689524809
    },
    {
        "content": "<p>you could say it is another aspect of the \"naming convention\"</p>",
        "id": 375798972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689524870
    },
    {
        "content": "<p>I think we should get an option in unusedVariables for the issue Eric is bringing up: the linter could be suppressed when the type is dependent</p>",
        "id": 375799406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689525010
    },
    {
        "content": "<p>I won't take a stance on whether it should be enabled or not in mathlib</p>",
        "id": 375799591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689525074
    },
    {
        "content": "<p>Just to add another reason in favor of having the linter:</p>\n<p>I remember that back when the linter was originally introduced it did actually help to find a few mistakes in Lean compiler code because people had introduced identifiers they wanted to refer to and accidentally referred to others. So it's not only useful as a tool for code style but also for silly bugs actually.</p>",
        "id": 375800551,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689525453
    },
    {
        "content": "<p>I maintain that in mathlib it's just noise:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- doesn't complain</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Iic</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.ofFinset</span> <span class=\"o\">(</span><span class=\"n\">Finset.Iic</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_Iic</span><span class=\"o\">,</span> <span class=\"n\">mem_Iic</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- unused variable `x` [linter.unusedVariables]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Iic</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.ofFinset</span> <span class=\"o\">(</span><span class=\"n\">Finset.Iic</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.mem_Iic</span>\n</code></pre></div>",
        "id": 375801015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689525604
    },
    {
        "content": "<p>(I didn't even have to look for long to find this example, it happened to me literally now)</p>",
        "id": 375801212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689525677
    },
    {
        "content": "<p>the linter doesn't always trigger when we would like - I think the intention is for both to warn there</p>",
        "id": 375801413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689525731
    },
    {
        "content": "<p>That one is the one that Mario was in favor of adding an option for, right?</p>",
        "id": 375801521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689525773
    },
    {
        "content": "<p>yes</p>",
        "id": 375801539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689525780
    },
    {
        "content": "<p>I think this has something to do with the revert/intro idiom, which is the same reason for the \"variables get pulled in by <code>cases</code>\" issue</p>",
        "id": 375801628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689525810
    },
    {
        "content": "<p>Ping here. I really want this linter <del>gone</del> watered down. In <a href=\"https://github.com/leanprover-community/mathlib4/pull/6846\">#6846</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lt_mem_sets_of_limsSup_lt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.IsBounded</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">f.limsSup</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀ᶠ</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">hcb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_lt_of_csInf_lt</span> <span class=\"n\">h</span> <span class=\"n\">l</span>\n  <span class=\"c1\">-- unused variable `c` [linter.unusedVariables]</span>\n  <span class=\"n\">mem_of_superset</span> <span class=\"n\">h</span> <span class=\"k\">fun</span> <span class=\"n\">_a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hcb.trans_le'</span>\n</code></pre></div>\n<p>I'm literally referring to <code>c</code> in the same line.</p>",
        "id": 387940626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693333829
    },
    {
        "content": "<p>I'll make my point again: If a variable appears in another variable's type, it should be considered used. Else that encourages stripping off names that are never referred to in the code but still contribute positively to the readability of the infoview.</p>",
        "id": 387940795,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693333903
    },
    {
        "content": "<p>Btw tagging the declaration with <code>@[nolint linter.unusedVariables]</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linter</span> <span class=\"bp\">'</span><span class=\"n\">linter.unusedVariables'</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n</code></pre></div>\n<p>Same deal with <code>@[nolint unusedVariables]</code>.</p>",
        "id": 387941018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693333998
    },
    {
        "content": "<p>(Orthogonal to the point, but btw, I think you're looking for <code>set_option linter.unusedVariables false in</code>—I think this is because of the \"two kinds of linters\" deal, with <code>unusedVariables</code> being a core linter, and <code>@[nolint]</code> being applicable only to <code>std</code> (\"<code>mathlib</code>\") linters. Maybe <code>@[nolint]</code> ought to be expanded to cover core linters too, or at least indicate to the user that they ought to use <code>set_option</code> instead if they pass a core linter's name...)</p>",
        "id": 387947739,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1693336688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, if you could make a Mathlib-free example, and create an issue on the Lean repo, that would be helpful!</p>",
        "id": 387984571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693350024
    },
    {
        "content": "<p>a similar issue happens when variables are used only in <code>Q(_)</code> annotations. If you look in <code>norm_num</code> or <code>ring</code> for instances of variables like <code>_a</code> or <code>_c</code> that's usually what they are working around</p>",
        "id": 388022957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693366111
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c1\">-- unused variable x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- ok</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Based on this it might just be an issue in that type ascriptions in patterns are not checked</p>",
        "id": 388024094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693366616
    },
    {
        "content": "<p>Note that this isn't just an issue of the <code>unusedVariables</code> linter. The linter piggybacks on data collected for many purposes, it's just that the linter is the most obvious indicator that something has gone wrong. For example, if you ctrl-click on the <code>x</code> in <code>let h : Q($x = 0) := h</code> it jumps to the <code>x</code> binder, but it fails if you click on the <code>x</code> in <code>(h : Q($x = 0))</code></p>",
        "id": 388024367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693366757
    },
    {
        "content": "<p>in fact the exact same example works without Qq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.symm.trans</span> <span class=\"n\">h</span> <span class=\"c1\">-- unused variable x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- ok</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">h.symm.trans</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 388024567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693366896
    }
]