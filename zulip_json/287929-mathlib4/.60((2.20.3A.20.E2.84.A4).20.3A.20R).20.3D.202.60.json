[
    {
        "content": "<p>How do I show (easily) that <code>((2 : ℤ) : R) = 2</code> in a <code>NonAssocRing R</code>? Note that only the last one of the following examples succeeds. The reason is doesn't work for <code>NonAssocRing R</code> is that <code>norm_num</code> does many things inside an <code>AddMonoidWithOne</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">NonAssocRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">NonAssocRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 341466932,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678715467
    },
    {
        "content": "<p>Do the suggestions in this thread help? <a href=\"#narrow/stream/287929-mathlib4/topic/ofReal_two\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/ofReal_two</a></p>",
        "id": 341468586,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678715864
    },
    {
        "content": "<p>A NonAssocRing should be an AddMonoidWithOne though right? Can you say more about why it's failing?</p>",
        "id": 341469480,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678716070
    },
    {
        "content": "<p>Does <code>etaExperiment</code> change anything here?</p>",
        "id": 341469936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678716171
    },
    {
        "content": "<p><code>etaExperiment</code> doesn't help.</p>",
        "id": 341471044,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678716403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60.28.282.20.3A.20.E2.84.A4.29.20.3A.20R.29.20.3D.202.60/near/341469480\">said</a>:</p>\n<blockquote>\n<p>A NonAssocRing should be an AddMonoidWithOne though right? Can you say more about why it's failing?</p>\n</blockquote>\n<p>Yes, <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>, I saw <code>Monoid</code> and thought \"associativity\", so I'm not sure what the problem is.</p>",
        "id": 341471185,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678716430
    },
    {
        "content": "<p>According to that thread maybe we're just missing norm_cast lemmas for numerals, I'll investigate.</p>",
        "id": 341471577,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678716512
    },
    {
        "content": "<p>But that still doesn't explain why <code>norm_num</code> fails I don't think.</p>",
        "id": 341471689,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678716535
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Iterate</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.ModEq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Dvd</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.OrderOfElement</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Nilpotent</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Tactic.norm_num</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">NonAssocRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- expected 'false', 'true', numeral or string literal</span>\n</code></pre></div>",
        "id": 341472304,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678716654
    },
    {
        "content": "<p>Can you add the imports to your example above?</p>",
        "id": 341472483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678716688
    },
    {
        "content": "<p><code>set_option trace.Tactic.norm_num true</code></p>",
        "id": 341472550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678716700
    },
    {
        "content": "<p>I'm working on <code>Algebra.CharP.Basic</code> hence the random collection.</p>",
        "id": 341472745,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678716732
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Meta.NormNum.isNat_int_cast#doc\">docs4#Mathlib.Meta.NormNum.isNat_int_cast</a> is to blame</p>",
        "id": 341472895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678716762
    },
    {
        "content": "<p>It assumes <code>Ring</code></p>",
        "id": 341472923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678716767
    },
    {
        "content": "<p>I guess it should just assume <code>AddGroupWithOne</code>?</p>",
        "id": 341473096,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678716803
    },
    {
        "content": "<p>I can do it.</p>",
        "id": 341473193,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678716828
    },
    {
        "content": "<p>This seems like more work than I had guessed, at least for me (maybe Mario can do it in 5 minutes, I don't know).</p>\n<p>In particular, I think it requires some design decisions about <code>norm_num</code> and whether it wants to support  <code>AddGroupWithOne</code> in some way. Right now, it seems like <code>norm_num</code> sees a nat and thinks <code>AddMonoidWithOne</code>, it sees an int and thinks <code>Ring</code> and it sees a rat and thinks <code>DivisionRing</code>. It feels like in order to support this we would need to change the behavior when it sees an integer, but then that would break multiplication without the <code>Ring</code> instance.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> please forgive me if I have utterly misunderstood. <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 341481739,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678718610
    },
    {
        "content": "<p>For now I have just added the <code>norm_cast</code> lemma in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2845\">!4#2845</a></p>",
        "id": 341504139,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678723045
    }
]