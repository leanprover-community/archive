[
    {
        "content": "<p>I've just noticed that we don't have Lean 4 versions of at least the following <code>Decidable</code> instances:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.decidable_ball\">docs#list.decidable_ball</a></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.decidable_bex\">docs#list.decidable_bex</a></li>\n<li>decidability for <code>Subset</code> on <code>List</code>s (not in <code>mathlib3</code> either).</li>\n</ul>\n<p>The easiest way to prove them is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.all_iff_forall_prop#doc\">docs4#List.all_iff_forall_prop</a>. Is this the right place or they should proved in a way that can be moved to <code>Std</code>?</p>",
        "id": 321105726,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673599159
    },
    {
        "content": "<p>I thought these were in std already</p>",
        "id": 321105809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673599195
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.decidableBEx#doc\">docs4#List.decidableBEx</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.decidableBAll#doc\">docs4#List.decidableBAll</a></p>",
        "id": 321105923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673599235
    },
    {
        "content": "<blockquote>\n<p>The easiest way to prove them is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.all_iff_forall_prop#doc\">docs4#List.all_iff_forall_prop</a>. Is this the right place or they should proved in a way that can be moved to Std?</p>\n</blockquote>\n<p><code>List.all_iff_forall_prop</code> can definitely be moved to std</p>",
        "id": 321106231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673599339
    },
    {
        "content": "<p>How do I make PRs to Std?</p>",
        "id": 321106422,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673599433
    },
    {
        "content": "<p>I want to add <code>Decidable</code> for <code>Subset</code> on <code>List</code>s.</p>",
        "id": 321106509,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673599456
    },
    {
        "content": "<p>it's a normal github project</p>",
        "id": 321106527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673599468
    },
    {
        "content": "<p>PR from a fork</p>",
        "id": 321106534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673599473
    },
    {
        "content": "<p>Is there already a way to convince the machine that <code>∀(k : Fin n), p k</code> is decidable if <code>p : Fin n → Prop</code> is decidable? If not, what's the idiomatic way to go about it? Add an instance of <code>Decidable</code> (having instances for compound expressions looks scary to me)?</p>",
        "id": 395631226,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696834674
    },
    {
        "content": "<p>That instance should already be in mathlib</p>",
        "id": 395631967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696835001
    },
    {
        "content": "<p>@loogle Decidable, Fintype, \"forall\"</p>",
        "id": 395632002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696835027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Decidable, Fintype, \"forall\"</p>",
        "id": 395632101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696835063
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Basic.html#Fintype.decidableForallFintype\">Fintype.decidableForallFintype</a></p>",
        "id": 395632105,
        "sender_full_name": "loogle",
        "timestamp": 1696835063
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>gives me <code>failed to synthesize Decidable (∀ (k : Fin 6), k = k)</code>. So I am doing something wrong, a missing import perhaps?</p>",
        "id": 395634488,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696836028
    },
    {
        "content": "<p>As you can see in the link given by loogle, the instance you want to use is defined in <code>Mathlib.Data.Fintype.Basic</code>, so you should import this file.</p>",
        "id": 395634866,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1696836167
    },
    {
        "content": "<p>If in doubt, <code>import Mathlib</code></p>",
        "id": 395639919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696838147
    },
    {
        "content": "<p><code>import Lean</code> is fairly useless; this means roughly \"I am going to augment the lean compiler/syntax in some way\", not \"I am going to write a program/proof in lean\"</p>",
        "id": 395640447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696838343
    },
    {
        "content": "<p>(for which <code>import Std</code>/<code>import Mathlib</code> are respectively reasonable choices)</p>",
        "id": 395640554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696838390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/missing.20Decidable.20instances/near/395639919\">said</a>:</p>\n<blockquote>\n<p>If in doubt, <code>import Mathlib</code></p>\n</blockquote>\n<p>Still getting used to the difference between <code>import Lean</code> and <code>import Mathlib</code>.</p>",
        "id": 395654749,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696843286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/missing.20Decidable.20instances/near/395639919\">said</a>:</p>\n<blockquote>\n<p>If in doubt, <code>import Mathlib</code></p>\n</blockquote>\n<p>What does it cost (in terms of speed or energy) to do so?</p>",
        "id": 395738320,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1696871254
    },
    {
        "content": "<p>In lean 3 -- a lot. In lean 4 very little.</p>",
        "id": 395738672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696871412
    }
]