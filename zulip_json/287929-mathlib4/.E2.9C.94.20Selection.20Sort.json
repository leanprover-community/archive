[
    {
        "content": "<p>I don't think Mathlib has a selection sort.<br>\nSo I wanted to implement selection sorting using Mathlib. However, I get an error when I take the minimum value. <code>minimum?</code> raise an error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n    <span class=\"k\">let</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">minimum</span><span class=\"bp\">?</span> <span class=\"n\">l</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395525695,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696760952
    },
    {
        "content": "<p>It's helpful to post the error. Do you understand why <code>Min</code> is not available from the variables you've specified?</p>",
        "id": 395527891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696761661
    },
    {
        "content": "<p>sorry the error message is here:</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>failed to synthesize instance\n  Min α\n</code></pre></div>",
        "id": 395528835,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696761992
    },
    {
        "content": "<p>I think the assumption <code>Preorder</code> for <code>α</code> is the reason for the error that there is no Min.</p>",
        "id": 395529112,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696762096
    },
    {
        "content": "<p>Is it sufficient to give the total order to <code>α</code>?</p>",
        "id": 395529682,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696762376
    },
    {
        "content": "<p>Did you want something like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Min</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">minimum</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Please note <em>all</em> changes I made to your code.</p>",
        "id": 395532058,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696764089
    },
    {
        "content": "<p>Thanks a lot. </p>\n<p>I have implemented SelectionSort by modifying the code you gave me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">uu</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Min</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">minimum</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"n\">min</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">μ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but I get an error at <code>#eval</code>. The error message is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">SelectionSort</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"bp\">.</span>\n<span class=\"n\">argument</span>\n  <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.529</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.528</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.443</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.443</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I dont know why the error occurs...</p>",
        "id": 395533931,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696765451
    },
    {
        "content": "<p>Make the first argument implicit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 395534466,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696765895
    },
    {
        "content": "<p>Thank you very much. There are no errors in the code.</p>\n<p>The following section, the whole branch at <code>none</code> after <code>match</code> is wasted, can't you get the μ out without matching it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">minimum</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"n\">min</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">μ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Since the value of <code>min</code> is never <code>none</code>, we want to use it to take the minimum value directly.</p>",
        "id": 395536773,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696767649
    },
    {
        "content": "<p>Perhaps there is another similar definition?</p>",
        "id": 395537280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696768057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> List, Min</p>",
        "id": 395537287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696768068
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/List/Basic.html#List.minimum%3F\">List.minimum?</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a>, and <a href=\"https://loogle.lean-fro.org/?q=List%2C%20Min\">17 more</a></p>",
        "id": 395537288,
        "sender_full_name": "loogle",
        "timestamp": 1696768069
    },
    {
        "content": "<p>I guess not.</p>",
        "id": 395537671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696768359
    },
    {
        "content": "<p>But I think also your algorithm doesn't terminate on <code>[NaN]</code></p>",
        "id": 395537683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696768378
    },
    {
        "content": "<p>Thanks. Are you saying that <code>#eval SelectionSort [NaN]</code> does not terminate?</p>",
        "id": 395537747,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696768438
    },
    {
        "content": "<p>I don't know what <code>NaN</code> means. Does it mean something other than a number?</p>",
        "id": 395537893,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696768546
    },
    {
        "content": "<p>It's a special float value where <code>NaN == NaN</code> is false</p>",
        "id": 395538089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696768666
    },
    {
        "content": "<p>BTW when I was implementing sorting algorithms, I was using these implicit declarations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">DecidableRel</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>However, I was then implementing the sorting (both \"cycles\" in case of algorithms like SelectSort) myself using the <code>≤</code> rather than <code>min</code>.</p>",
        "id": 395538364,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696768834
    },
    {
        "content": "<p>how to use <code>NaN</code> ? <code>Float.nan</code> does not work.</p>",
        "id": 395538606,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696769018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Selection.20Sort/near/395537683\">said</a>:</p>\n<blockquote>\n<p>But I think also your algorithm doesn't terminate on <code>[NaN]</code></p>\n</blockquote>\n<p>You are right. This input crashes Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 395538843,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696769171
    },
    {
        "content": "<p>I see that <code>minimum? [(0.0 : Float) / 0.0]</code> is <code>some NaN</code>, so the list size does not decrease after <code>erase</code>... Thank you.</p>",
        "id": 395539047,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696769322
    },
    {
        "content": "<p>Would it be better to deal with this by not accepting lists containing <code>NaN</code>?</p>",
        "id": 395539339,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696769516
    },
    {
        "content": "<p>Try to rather specify what properties you <em>want</em>.</p>",
        "id": 395539448,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696769553
    },
    {
        "content": "<p>I hope <code>x  ==  x</code> holds.</p>",
        "id": 395539516,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696769600
    },
    {
        "content": "<p>What are the constraints on α such that the above condition <code>x == x</code> is achieved?</p>",
        "id": 395539642,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696769690
    },
    {
        "content": "<p><code>LawfulBEq</code> or <code>DecidableEq</code>. The latter implies the former and is preferred.</p>",
        "id": 395540162,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696770083
    },
    {
        "content": "<p>I wanted to practice removing <code>partial</code> from your function. Golfing suggestions welcome (I don't like how complicated going from <code>h1</code> to the next line is): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">List.minimum_of_length_pos</span> <span class=\"n\">hl</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">List.minimum_mem</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">l.length.pred</span> <span class=\"o\">:=</span> <span class=\"n\">List.length_erase_of_mem</span> <span class=\"n\">mem</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span> <span class=\"n\">h1.trans_lt</span> <span class=\"o\">(</span><span class=\"n\">pred_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.ne_of_lt</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"o\">[]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">SelectionSort</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n</code></pre></div>",
        "id": 395540323,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696770187
    },
    {
        "content": "<p>Thank you very much ... I supposed <code>[DecidableEq α]</code>, but I still get an error.</p>\n<p>The code is as follows, running on lean4 web.</p>",
        "id": 395540452,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696770287
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">uu</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Min</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">minimum</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"n\">min</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">μ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- this line gives an error!</span>\n<span class=\"k\">#eval</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 395540484,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696770313
    },
    {
        "content": "<p>BTW, your code is interesting.<br>\nusing <code>List.minimum_of_length_pos</code> is very good idea!</p>",
        "id": 395540598,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696770396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Selection.20Sort/near/395540452\">said</a>:</p>\n<blockquote>\n<p>Thank you very much ... I supposed <code>[DecidableEq α]</code>, but I still get an error.</p>\n<p>The code is as follows, running on lean4 web.</p>\n</blockquote>\n<p>You should remove the <code>[BEq α]</code> too, otherwise the BEq instance will be used for Floats.</p>",
        "id": 395540771,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696770515
    },
    {
        "content": "<p>Without <code>[BEq α]</code>, the line <code>μ :: SelectionSort ((x :: xs).erase μ)</code> will result in an error. Using <code>[LinearOrder α]</code>, as in your code, will not result in an error.</p>",
        "id": 395541011,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696770699
    },
    {
        "content": "<p>The code below (literally just removing the <code>BEq</code> variable) works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">uu</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Min</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">minimum</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"n\">min</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">μ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 395541107,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696770752
    },
    {
        "content": "<p>Do you get an error with it?</p>",
        "id": 395541160,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696770797
    },
    {
        "content": "<p>You are right. I must be mistaken ... sorry.</p>",
        "id": 395541191,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696770822
    },
    {
        "content": "<p>No problem, I was just curious :)</p>",
        "id": 395541251,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696770847
    },
    {
        "content": "<p>Am I correct in assuming that <code>[LinearOrder α]</code> is too strong an assumption?</p>",
        "id": 395541426,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696770986
    },
    {
        "content": "<p>Depends on what properties you want of the output. What is the expected output if the input list has exactly two elements and they're not comparable?</p>",
        "id": 395541915,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696771337
    },
    {
        "content": "<blockquote>\n<p>the input list has exactly two elements and they're not comparable</p>\n</blockquote>\n<p>In the context of sorting algorithms, I think any input that is not comparable should be an error.</p>",
        "id": 395542015,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696771436
    },
    {
        "content": "<p>But why do you think a linear order is too strong an assumption? The strong part of it is precisely asking that every two elements be comparable.</p>",
        "id": 395542402,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696771695
    },
    {
        "content": "<p>I think it is natural to assume [LinearOrder α], but I don't think other sorting algorithms in Mathlib4 necessarily assume this.</p>\n<p>In Mathlib4 , I was heard that assumptions are preferred to be stripped down to the bare minimum.</p>",
        "id": 395542657,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696771912
    },
    {
        "content": "<p>By the way, I have edited the code you gave me in my own way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">uu</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_mem</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"n\">l.length</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_erase_add_one</span> <span class=\"n\">mem</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"o\">[]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">SelectionSort</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n</code></pre></div>",
        "id": 395542772,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696771986
    },
    {
        "content": "<p>Oh, nice! <code>linarith [ha] </code> makes it much better. And the calc version is much more readable too.</p>",
        "id": 395543094,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696772218
    },
    {
        "content": "<p>Thank you.<br>\nI've rewritten it again ... I like to use calc.</p>",
        "id": 395543169,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696772271
    },
    {
        "content": "<p>About your previous remark: I don't know if that's the case here, but one thing that's very common in Mathlib is adding extra constraints in theorems instead of having them in definitions. This makes it easier to use the defined functions, while still being able to prove the relevant theorems under appropriate conditions. See <a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/</a> for discussion on this.</p>",
        "id": 395543252,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696772322
    },
    {
        "content": "<p>Maybe that's what happening in the sort examples as well.</p>",
        "id": 395543269,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696772332
    },
    {
        "content": "<p>That means that you'll sometimes get \"garbage\" output instead of an error if the additional order constraints are not satisfied, but that tends to be a good tradeoff. Which is the reason behind me asking what return value you expected in case of incomparable elements.</p>",
        "id": 395543569,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696772533
    },
    {
        "content": "<p>Thanks. That Kevin's article is nice.</p>\n<p>I can't decide what assumptions to make. Without <code>[LinearOrder α]</code> I can't give a termination proof, so I'll have to proceed as is.</p>",
        "id": 395544037,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696772815
    },
    {
        "content": "<p>Yeah, this is basically an issue in every programming language: if your comparator is badly behaved, so is your sorting function</p>",
        "id": 395544603,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696773231
    },
    {
        "content": "<p>With the difference that lean does want every safe function to terminate</p>",
        "id": 395544698,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696773282
    },
    {
        "content": "<p>You can, for example, return the empty list if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> is not in l. Then it's easy to show termination.</p>",
        "id": 395544713,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696773296
    },
    {
        "content": "<p>Thank you for your suggestion.</p>",
        "id": 395545391,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696773757
    },
    {
        "content": "<p>I have rewritten it according to your suggestion. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">uu</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Min</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">minimum</span><span class=\"bp\">?</span> <span class=\"n\">l</span>\n    <span class=\"k\">match</span> <span class=\"n\">min</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">μ</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"k\">then</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n        <span class=\"k\">calc</span> <span class=\"n\">l.length</span>\n          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_erase_add_one</span> <span class=\"n\">mem</span><span class=\"o\">]</span>\n          <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n        <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">SelectionSort</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"o\">[]</span>\n  <span class=\"k\">else</span> <span class=\"o\">[]</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">SelectionSort</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n</code></pre></div>",
        "id": 395545461,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696773819
    },
    {
        "content": "<p>If you want to prove that this is really a sorting algorithm (that is, the output is a permutation of the input, and no later element is smaller than an earlier one), then you'll need stronger hypotheses in your theorem. But that's the mathlib way, at least.</p>",
        "id": 395546174,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696774260
    },
    {
        "content": "<p>OK. I'm going to try to prove that this is sorting algorithm.</p>",
        "id": 395546562,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696774543
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Pairwise#doc\">docs#List.Pairwise</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Perm#doc\">docs#List.Perm</a> can be useful in stating the theorem</p>",
        "id": 395546800,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696774685
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 395546914,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696774788
    },
    {
        "content": "<p>I'm not sure there'd be any point adding this algorithm to mathlib, since it's \"equal' to <code>mergeSort</code> in all the cases that are interesting</p>",
        "id": 395548146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696775690
    },
    {
        "content": "<p>I want to show myself a theorem that's not in Mathlib. :)</p>",
        "id": 395549001,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696776212
    },
    {
        "content": "<p>It satisfies my curiosity too.</p>",
        "id": 395549168,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696776309
    },
    {
        "content": "<p>Asei, you should feel free to work on whatever you want. Eric is only commenting on the idea of including this in Mathlib.</p>",
        "id": 395549351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696776424
    },
    {
        "content": "<p>This topic is misleading as it is contained in the mathlib4 stream. Sorry.</p>",
        "id": 395549796,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1696776743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 395550673,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696777327
    },
    {
        "content": "<p>Yes, sorry: I certainly was not trying to deter you working on this, and a set of \"write this sorting algorithm in lean and prove it's correct\" examples could make great exercises.</p>",
        "id": 395554153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696779808
    },
    {
        "content": "<p>I think a simpler way to avoid the extra assumptions and make it more obviously terminating and a permutation is to <em>remove</em> the minimum at the same time as finding it. That is, make a variant of <code>minimum?</code> with the type <code>List A -&gt; Option (A x List A)</code></p>",
        "id": 395571846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696794780
    },
    {
        "content": "<p>deleted</p>",
        "id": 398258157,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698143421
    },
    {
        "content": "<p>deleted</p>",
        "id": 398258462,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698143559
    },
    {
        "content": "<p>I have completed the proof that selection sort is a sort algorithm! Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- \"4.2.0-rc4\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"c1\">-- `α` は線形順序を持つ</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  選択ソート.</span>\n<span class=\"sd\">  `List.` を名前に付けることにより，リスト `l` に対して `l.selection_sort` で実行できるようになる</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.selection_sort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"n\">hl</span>\n\n    <span class=\"c1\">-- `μ` はリストの要素</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">minimum_mem</span>\n      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_minimum_of_length_pos</span><span class=\"o\">]</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span>\n\n    <span class=\"c1\">-- 停止性を示すための補題</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&gt;</span> <span class=\"n\">rest.length</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n      <span class=\"n\">l.length</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">rest.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">length_erase_add_one</span> <span class=\"n\">mem</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"n\">rest.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n    <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">selection_sort</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n  <span class=\"c1\">-- 再帰呼び出しのたびにリストの長さが短くなるので，有限回で停止する</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n\n<span class=\"sd\">/-- 選択ソートが返すリストは，元のリストと要素の順番だけしか異ならない -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">perm_selection_sort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">selection_sort</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- リスト `l` の長さに対する帰納法を使う</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"n\">generalizing</span> <span class=\"n\">l</span>\n\n  <span class=\"c1\">-- `selection_sort` を展開する</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">(</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">selection_sort</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"c1\">-- リストの長さが 0 のとき</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n      <span class=\"n\">exact</span> <span class=\"n\">length_eq_zero.mp</span> <span class=\"n\">ih</span>\n\n  <span class=\"c1\">-- リストの長さが `n + 1` であるとき</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- ゴールが複雑で見づらいので変数を導入する</span>\n    <span class=\"n\">set</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"n\">set</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span>\n\n    <span class=\"c1\">-- `μ` が `l` の要素であることを再度示す</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">minimum_mem</span>\n      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_minimum_of_length_pos</span><span class=\"o\">]</span>\n\n    <span class=\"c1\">-- `rest` の長さについての補題を再度示す</span>\n    <span class=\"k\">have</span> <span class=\"n\">rlen</span> <span class=\"o\">:</span> <span class=\"n\">rest.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">convert</span> <span class=\"n\">List.length_erase_of_mem</span> <span class=\"n\">mem</span>\n      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Nat.pred_succ</span><span class=\"o\">]</span>\n\n    <span class=\"c1\">-- 帰納法の仮定により，`selection_sort rest ~ rest` が言える</span>\n    <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span> <span class=\"bp\">~</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Perm.symm</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">rest</span> <span class=\"n\">rlen</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- 置換の推移性により，`l ~ μ :: rest` を示せばいい</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">μ</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"k\">from</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">this.trans</span>\n      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">hr.symm</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">perm_cons</span><span class=\"o\">,</span> <span class=\"n\">hr.symm</span><span class=\"o\">]</span>\n\n    <span class=\"c1\">-- `List.erase` の性質から示せる</span>\n    <span class=\"n\">exact</span> <span class=\"n\">perm_cons_erase</span> <span class=\"n\">mem</span>\n\n<span class=\"sd\">/-- selection sort が返すリストは，並び替え済み -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sorted_selection_sort</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sorted</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">l.selection_sort</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"n\">generalizing</span> <span class=\"n\">l</span>\n\n  <span class=\"n\">all_goals</span> <span class=\"o\">(</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">selection_sort</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- ゴールが複雑で見づらいので変数を導入する</span>\n    <span class=\"n\">set</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">minimum_of_length_pos</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"n\">set</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">l.erase</span> <span class=\"n\">μ</span>\n\n    <span class=\"c1\">-- `rest` は `l` の部分集合</span>\n    <span class=\"k\">have</span> <span class=\"n\">rsub</span> <span class=\"o\">:</span> <span class=\"n\">rest</span> <span class=\"bp\">⊆</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">exact</span> <span class=\"n\">erase_subset</span> <span class=\"n\">μ</span> <span class=\"n\">l</span>\n\n    <span class=\"c1\">-- `selection_sort` が置換を返すことを利用する</span>\n    <span class=\"k\">have</span> <span class=\"n\">rperm</span> <span class=\"o\">:</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span> <span class=\"bp\">~</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Perm.symm</span> <span class=\"o\">(</span><span class=\"n\">perm_selection_sort</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- `selection_sort rest` は `l` の部分集合</span>\n    <span class=\"k\">have</span> <span class=\"n\">subh</span> <span class=\"o\">:</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span> <span class=\"bp\">⊆</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Perm.subset_congr_left</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">Perm.symm</span> <span class=\"n\">rperm</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rsub</span>\n\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">selection_sort</span> <span class=\"n\">rest</span> <span class=\"bp\">→</span> <span class=\"n\">minimum</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">b</span>\n      <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n      <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n        <span class=\"n\">exact</span> <span class=\"n\">minimum_le_of_mem'</span> <span class=\"o\">(</span><span class=\"n\">subh</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"k\">show</span> <span class=\"n\">Sorted</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">selection_sort</span> <span class=\"n\">rest</span><span class=\"o\">)</span>\n      <span class=\"n\">apply</span> <span class=\"n\">IH</span> <span class=\"n\">rest</span>\n\n      <span class=\"c1\">-- `μ` が `l` の要素であることを再度示す(3回目)</span>\n      <span class=\"k\">have</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">apply</span> <span class=\"n\">minimum_mem</span>\n        <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"n\">says</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_minimum_of_length_pos</span><span class=\"o\">]</span>\n\n      <span class=\"c1\">-- あとは `rest` の長さが `n` であることを示すだけ</span>\n      <span class=\"n\">convert</span> <span class=\"n\">List.length_erase_of_mem</span> <span class=\"n\">mem</span>\n      <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"n\">says</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">Nat.pred_succ</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 398836650,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698390149
    },
    {
        "content": "<p>There are far too few formally verified algorithms in lean -- well done!</p>",
        "id": 398844312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698393048
    }
]