[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.String.Defs</span>\n\n<span class=\"k\">#eval</span> <span class=\"s2\">\"Bulhwi Cha\"</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"mi\">7</span> <span class=\"c1\">-- output: \"Cha\"</span>\n<span class=\"k\">#eval</span> <span class=\"s2\">\"Bulhwi Cha\"</span><span class=\"bp\">.</span><span class=\"n\">popn</span> <span class=\"mi\">7</span> <span class=\"c1\">-- \"Cha\"</span>\n</code></pre></div>\n<p>I suspect <code>String.drop</code> and <code>String.popn</code> are the same, but it's hard to prove the equality of them because their definitions are different. Should I change <code>String.popn</code> to an alias for <code>String.drop</code>?</p>",
        "id": 352696451,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682489396
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.drop#doc\">docs4#String.drop</a> (core)<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.popn#doc\">docs4#String.popn</a> (mathlib)</p>",
        "id": 352696682,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1682489476
    },
    {
        "content": "<p>I've managed to prove <code>String.drop</code> and <code>String.popn</code> are equal:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Proof</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.String.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">extract.go₂.add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">go₂</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">go₂</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">utf8InductionOn</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">go₂</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">go₂</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">go₂</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"n\">h</span> <span class=\"n\">ih</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Pos.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">Pos.addChar_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">extract.go₂.zero_endPos</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">go₂</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">endPos</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">utf8ByteSize.go</span> <span class=\"n\">cs</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_pos_right</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">csize_pos</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">go₂</span><span class=\"o\">,</span> <span class=\"n\">endPos</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize.go</span><span class=\"o\">,</span> <span class=\"n\">Pos.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Pos.addChar_eq</span><span class=\"o\">,</span> <span class=\"n\">Pos.byteIdx_zero</span><span class=\"o\">,</span> <span class=\"n\">add_right_cancel</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">extract.go₁.add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">go₁</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">go₁</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">utf8InductionOn</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">go₁</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i.byteIdx</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">go₁</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">go₁</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">cs</span>\n    <span class=\"n\">apply</span> <span class=\"n\">go₂.add_right_cancel</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">c</span> <span class=\"n\">cs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"n\">h</span> <span class=\"n\">ih</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Pos.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">Pos.addChar_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">extract.go₁.cons_add_csize</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">go₁</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">⟨</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">go₁</span> <span class=\"n\">cs</span> <span class=\"mi\">0</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_pos_right</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">csize_pos</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">go₁</span><span class=\"o\">,</span> <span class=\"n\">Pos.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Pos.addChar_eq</span><span class=\"o\">,</span> <span class=\"n\">Pos.byteIdx_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_right_cancel</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">extract.go₁.zero_endPos</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">go₁</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">endPos</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">go₁</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">go₂.zero_endPos</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extract.cons_add_csize</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">extract</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">extract</span> <span class=\"o\">⟨</span><span class=\"n\">cs</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">extract</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">go₁.cons_add_csize</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extract.zero_endPos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">),</span> <span class=\"n\">s.extract</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">endPos</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">endPos</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">byteIdx</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_pos_right</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">csize_pos</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">extract</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">go₁.zero_endPos</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">toString_toSubstring</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">),</span> <span class=\"n\">s.toSubstring.toString</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">toSubstring</span><span class=\"o\">,</span> <span class=\"n\">Substring.toString</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">extract.zero_endPos</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">drop_nil</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">drop</span> <span class=\"o\">⟨[]⟩</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">⟨[]⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">drop</span><span class=\"o\">,</span> <span class=\"n\">Substring.drop</span><span class=\"o\">,</span> <span class=\"n\">toSubstring</span><span class=\"o\">,</span> <span class=\"n\">Substring.nextn</span><span class=\"o\">,</span> <span class=\"n\">Substring.next</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">String</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">String</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Substring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">next.cons_zero</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">next</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">endPos</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩⟩</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">endPos</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_pos_right</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">csize_pos</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">Pos.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">String.next</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">next.cons_add_csize</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">next</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">endPos</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">next</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">endPos</span> <span class=\"o\">⟨</span><span class=\"n\">cs</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">Pos.add_eq</span><span class=\"o\">,</span> <span class=\"n\">endPos</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize</span><span class=\"o\">,</span> <span class=\"n\">utf8ByteSize.go</span><span class=\"o\">,</span> <span class=\"n\">Pos.ext_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">String.next</span><span class=\"o\">,</span> <span class=\"n\">Ne.symm</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">get.cons_add_csize</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nextn.InductionOn.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Pos</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">Substring</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ind</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">ss.next</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">zero</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ind</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">InductionOn</span> <span class=\"n\">ss</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">ss.next</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"n\">ind</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nextn.next_eq</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">Substring</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ss.nextn</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">ss</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">ss.next</span> <span class=\"o\">(</span><span class=\"n\">ss.nextn</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">InductionOn</span> <span class=\"n\">ss</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">ss.nextn</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">next</span> <span class=\"n\">ss</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ss.next</span> <span class=\"o\">(</span><span class=\"n\">ss.nextn</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nextn</span><span class=\"o\">,</span> <span class=\"n\">next</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nextn.cons_add_csize</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">nextn</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">endPos</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩⟩</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">nextn</span> <span class=\"o\">⟨⟨</span><span class=\"n\">cs</span><span class=\"o\">⟩,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">endPos</span> <span class=\"o\">⟨</span><span class=\"n\">cs</span><span class=\"o\">⟩⟩</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">i</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nextn</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nextn.next_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Pos.addChar_eq</span><span class=\"o\">,</span> <span class=\"n\">next.cons_add_csize</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Substring</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">drop_cons_succ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">drop</span> <span class=\"o\">⟨</span><span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">cs</span><span class=\"o\">⟩</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">drop</span> <span class=\"o\">⟨</span><span class=\"n\">cs</span><span class=\"o\">⟩</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">drop</span><span class=\"o\">,</span> <span class=\"n\">Substring.toString</span><span class=\"o\">,</span> <span class=\"n\">Substring.drop</span><span class=\"o\">,</span> <span class=\"n\">toSubstring</span><span class=\"o\">,</span> <span class=\"n\">Substring.nextn</span><span class=\"o\">,</span>\n        <span class=\"n\">Substring.next.cons_zero</span><span class=\"o\">,</span> <span class=\"n\">Pos.add_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.zero_add</span> <span class=\"o\">(</span><span class=\"n\">csize</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">Substring.nextn.cons_add_csize</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">extract.cons_add_csize</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">drop_eq_popn</span> <span class=\"o\">:</span> <span class=\"n\">drop</span> <span class=\"bp\">=</span> <span class=\"n\">popn</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span> <span class=\"n\">n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">toString_toSubstring</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">drop_nil</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">cs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">drop_cons_succ</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">cs</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">String</span>\n</code></pre></div>\n</div></div>",
        "id": 354615705,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682835652
    },
    {
        "content": "<p>Do we want to add the theorem <code>String.drop_eq_popn : drop = popn</code> to Mathlib4?</p>",
        "id": 354616087,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682835816
    },
    {
        "content": "<p>I think we should instead just delete the duplicate</p>",
        "id": 354616202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682835873
    },
    {
        "content": "<p>and your theorem would be <code>(s.drop n).toList = s.toList.drop n</code></p>",
        "id": 354616409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682835995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60String.2Edrop.60.20and.20.60String.2Epopn.60.20are.20the.20same/near/354616202\">said</a>:</p>\n<blockquote>\n<p>I think we should instead just delete the duplicate</p>\n</blockquote>\n<p>I'll do it after <a href=\"https://github.com/leanprover/std4/pull/124\">std4#124</a> gets merged!</p>",
        "id": 354616909,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1682836223
    },
    {
        "content": "<p>looking at it now</p>",
        "id": 354617604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682836600
    }
]