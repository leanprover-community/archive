[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> here is a (very minor!) usability issue concerning <code>to_additive</code>. Consider the following situation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">scoped</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Group.pow_eq_mul_self</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">pow_two</span> <span class=\"n\">g</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AddGroup</span>\n\n<span class=\"c1\">-- 'AddGroup.nsmul_eq_add_self' does not have [simp] attribute</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">AddGroup.nsmul_eq_add_self</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Group</span>\n\n<span class=\"c1\">-- works, so `AddGroup.nsmul_eq_add_self` is scoped to `Group`.</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">AddGroup.nsmul_eq_add_self</span>\n</code></pre></div>\n<p>So <code>to_additive</code> scopes the additive version into the namespace of the multiplicative version, even when the namespace changes for the additivized version.</p>",
        "id": 405134324,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701356021
    },
    {
        "content": "<p>Yeah, that makes sense. I'm not sure how easy that is to fix. I added it to the issue <a href=\"https://github.com/leanprover-community/mathlib4/pull/1074\">#1074</a>.</p>",
        "id": 405135159,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701356245
    },
    {
        "content": "<p>Fair enough. It's a very minor problem anyway, and one I expect is relatively rare.</p>",
        "id": 405135214,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701356269
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 405135237,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701356273
    }
]