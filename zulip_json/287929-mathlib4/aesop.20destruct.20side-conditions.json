[
    {
        "content": "<p>I am playing around with <code>aesop</code>; great so far, and in particular thanks for the high quality README at <a href=\"https://github.com/JLimperg/aesop\">https://github.com/JLimperg/aesop</a>.</p>\n<p>I currently have this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[aesop safe (destruct (immediate := [h1]</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">NatElim</span><span class=\"o\">])]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">le_sub</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.add_le_of_le_sub</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n</code></pre></div>\n<p>What it does is it finds hyps of type  <code>i ≤ n - j</code> and replaces them with <code>j ≤ n → i + j ≤ n</code>.<br>\nWhat I want it to do is to find hyps of type <code>i ≤ n - j</code>, <code>have</code> a new goal to prove <code>j ≤ n</code> (again using aesop), and finally replace the hyp with <code>i + j ≤ n</code>.<br>\nIs that possible somehow to tell <code>aesop</code> that <code>h2</code> isn’t immediate (it’s not present in the goal, but needs to be proven), but also that it’s not just part of the replacement?<br>\n(I think in Isabelle this was possible using elimination-style rule, but my attempts at this didn’t work.)</p>",
        "id": 359409578,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684419433
    },
    {
        "content": "<p>Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">@[aesop safe (destruct (immediate := [h1]</span><span class=\"o\">))]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[aesop safe apply]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n  <span class=\"c1\">-- Goal has fwd : B → C</span>\n  <span class=\"c1\">-- Goal should have C</span>\n</code></pre></div>",
        "id": 359411390,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684419853
    },
    {
        "content": "<p>This is not currently possible, but I can see that it could be useful. Do you want the side condition for <code>h2</code> to become an additional goal (so the <code>le_sub</code> rule always succeeds when it sees a hypothesis that matches <code>h1</code>, but we may later discover that <code>h2</code> cannot be discharged) or do you want <code>h2</code> to be discharged immediately by a nested Aesop call (making <code>le_sub</code> a very expensive rule)?</p>\n<p>Performance may suffer in any case since we don't currently remember that the side goal for <code>h2</code> could or couldn't be proved.</p>",
        "id": 359429484,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684424141
    },
    {
        "content": "<p>In this case I'd like the rule to always succeed and and the side condition to become an additional goal.</p>",
        "id": 359435560,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684425580
    },
    {
        "content": "<p>What mechanisms are there to create new goals with the existing builders? I guess <code>apply</code> creates new goals, but besides that?</p>",
        "id": 359435817,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684425631
    },
    {
        "content": "<p>Hmm, maybe I should use a destruct rule to create a disjunction instead of an implication, and let Aesop split that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">~</span> <span class=\"n\">B</span> <span class=\"bp\">\\/</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">/\\</span> <span class=\"n\">C</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 359436961,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684425921
    },
    {
        "content": "<p>Oh yeah, that might work as a stopgap measure.</p>",
        "id": 359440026,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684426699
    },
    {
        "content": "<p>This may actually work reasonably well; here is the beginning of an aesop-based tactic that eliminates uses of <code>Nat.sub</code> around inequalities before handing the goal over to <code>linarith</code>, to hopefully handle the typical cases of array bounds calculations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n<span class=\"kn\">import</span> <span class=\"n\">RerollingSixes.NatSubElimRuleSet</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SC</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">@[aesop norm simp (rule_sets [NatElim]</span><span class=\"o\">)]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sc</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SC</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/\\</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[aesop safe apply (rule_sets [NatElim]</span><span class=\"o\">)]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">le_intro</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[aesop safe apply (rule_sets [NatElim]</span><span class=\"o\">)]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_intro</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[aesop safe (destruct (immediate := [h1]</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">NatElim</span><span class=\"o\">])]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">le_sub</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SC</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.add_le_of_le_sub</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n<span class=\"kd\">@[aesop safe (destruct (immediate := [h1]</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">NatElim</span><span class=\"o\">])]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_sub</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SC</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">linarithTactic</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">linarith</span><span class=\"o\">))</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">NatElim</span><span class=\"o\">])]</span> <span class=\"n\">linarithTactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"nat_intervals\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">nat_intervals</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">NatElim</span><span class=\"o\">):</span><span class=\"n\">ident</span><span class=\"o\">])</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">nat_intervals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">nat_intervals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">nat_intervals</span>\n</code></pre></div>",
        "id": 359443383,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684427516
    },
    {
        "content": "<p>But it seems that <code>aesop</code>’s <code>Aesop.BuiltinRules.applyHyps</code> quickly loops when the goal is <code>False</code>, and there are hyps of the form <code>¬ …</code> around, as it tries to apply them. I probably need to hide them somehow, maybe a <code>norm simp</code> rule?</p>",
        "id": 359445521,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684428118
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">rule</span> <span class=\"n\">applications</span> <span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">)</span> <span class=\"n\">reached.</span> <span class=\"n\">Set</span> <span class=\"n\">the</span> <span class=\"bp\">'</span><span class=\"n\">maxRuleApplications'</span> <span class=\"n\">option</span> <span class=\"n\">to</span> <span class=\"n\">increase</span> <span class=\"n\">the</span> <span class=\"n\">limit.</span>\n</code></pre></div>",
        "id": 359445725,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684428167
    },
    {
        "content": "<p>I can work around it by changing my goal not to <code>False</code>, but to a differnt <code>MyFalse</code>.</p>",
        "id": 359446116,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684428295
    },
    {
        "content": "<p>Pretty neat; these examples are annoying boring proof obligations from a little project of mine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">nat_intervals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">nat_intervals</span>\n</code></pre></div>",
        "id": 359458369,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684431480
    },
    {
        "content": "<p>Make sure that the <code>False</code> loop is opened as an issue if it's not solved during this thread, that's a great MWE you have.</p>",
        "id": 359554847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684478029
    },
    {
        "content": "<p>Against the <code>aesop</code> repo or the <code>mathlib4</code> repo?</p>",
        "id": 359574560,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684483996
    },
    {
        "content": "<p>Aesop. The loop happens because <code>applyHyps</code> transforms <code>not P, not Q |- False</code> into <code>not P, not Q |- P</code> and <code>simp</code> transforms this back into <code>not P, not Q |- False</code>. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> Negation in general is much more annoying to deal with than I thought.</p>\n<p>Your <code>nat_intervals</code> tactic looks very nice btw. I've occasionally wanted something that deals with these annoying array index side conditions.</p>",
        "id": 359601626,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684490089
    },
    {
        "content": "<p><a href=\"https://github.com/JLimperg/aesop/pull/54\">JLimperg/aesop#54</a></p>",
        "id": 359602240,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684490210
    },
    {
        "content": "<p>While we are at it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>will print</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"k\">in</span> <span class=\"n\">norm</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">maximum</span> <span class=\"n\">recursion</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">maxRecDepth</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;`</span> <span class=\"n\">to</span> <span class=\"n\">increase</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I assume this is because it gets <code>n = n-1</code> into the goal state, and then keeps simplifying with it.</p>\n<p>I believe the Isabelle simplifier, while generally tring to use hypotheses, has some code to recognize “obviously looping” ones like this one, and doesn't use that.</p>\n<p>Not sure if that is a bug here, and if so, if it’s a bug with <code>simp</code> or <code>aesop</code>?</p>",
        "id": 359628832,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684496077
    },
    {
        "content": "<p>Ah, certainly a problem with <code>simp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>\n<p>but maybe <code>aesop</code> by default should somehow run <code>simp</code> in a way that avoids this?</p>",
        "id": 359629328,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684496189
    },
    {
        "content": "<p>Aesop could heuristically exclude equations that will almost certainly loop from its <code>simp</code> call. I suspect that core wouldn't want to add functionality for this because it's not really relevant when <code>simp</code> is used interactively. <a href=\"https://github.com/JLimperg/aesop/pull/55\">JLimperg/aesop#55</a></p>",
        "id": 359639492,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684498393
    }
]