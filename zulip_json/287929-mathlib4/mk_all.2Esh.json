[
    {
        "content": "<p>While writing the mathport makefile modifications for archive/counterexamples, I noticed that <code>mk_all.sh</code> is currently broken when running on the archive, as it produces a file like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.16_abel_ruffini</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.30_ballot_problem</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.37_solution_of_cubic</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.42_inverse_triangle_sum</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.45_partition</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.54_konigsberg</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.57_herons_formula</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.70_perfect_numbers</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.73_ascending_descending_sequences</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.81_sum_of_prime_reciprocals_diverges</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.82_cubing_a_cube</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.83_friendship_graphs</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.93_birthday_problem</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list.9_area_of_a_circle</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">arithcc</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">examples.mersenne_primes</span>\n</code></pre></div>",
        "id": 361809410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301631
    },
    {
        "content": "<p>This is the mathlib3 mk-all right?</p>",
        "id": 361809450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685301658
    },
    {
        "content": "<p>yes</p>",
        "id": 361809463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301663
    },
    {
        "content": "<p>I made a PR to fix this long ago, but the response was \"use <code>leanproject mk-all</code> instead\"</p>",
        "id": 361809487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685301675
    },
    {
        "content": "<p>the shell script, not the leanproject command</p>",
        "id": 361809488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301675
    },
    {
        "content": "<p>mathport doesn't depend on leanproject currently</p>",
        "id": 361809512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301689
    },
    {
        "content": "<p>if you have a shell script handy that would be swell</p>",
        "id": 361809537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301707
    },
    {
        "content": "<p>even just putting french quotes around everything would suffice</p>",
        "id": 361809650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301761
    },
    {
        "content": "<p>but this is really not fun to read:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">sed</span> <span class=\"bp\">'</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">^\\./</span><span class=\"o\">,,</span><span class=\"bp\">;</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">^\\.\\./</span><span class=\"o\">[</span><span class=\"bp\">^/</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">,,</span><span class=\"bp\">;</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">/</span><span class=\"o\">,</span><span class=\"bp\">.</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"bp\">;</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">\\.</span><span class=\"n\">lean</span><span class=\"bp\">$</span><span class=\"o\">,,</span><span class=\"bp\">;</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">^</span><span class=\"o\">,</span><span class=\"kn\">import</span> <span class=\"o\">,</span><span class=\"bp\">'</span> <span class=\"bp\">\\</span>\n</code></pre></div>",
        "id": 361809701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301793
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11001\">#11001</a></p>",
        "id": 361809729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685301814
    },
    {
        "content": "<p>I'm sure I just have to put a french quote in there... somewhere...</p>",
        "id": 361809734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301817
    },
    {
        "content": "<p>Yeah, this is why the \"use <code>leanproject</code>\" argument is convincing</p>",
        "id": 361809839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685301856
    },
    {
        "content": "<p>now if only that PR can be revived and merged</p>",
        "id": 361809929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301915
    },
    {
        "content": "<p>otherwise I'll be copying it into mathport</p>",
        "id": 361809945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301931
    },
    {
        "content": "<p>I don't think there is any good reason to have a script in mathlib with a known bug</p>",
        "id": 361810030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685301980
    },
    {
        "content": "<p>I've re-opened it, feel free to merge</p>",
        "id": 361810081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685302008
    },
    {
        "content": "<p>Alternatively, if you want to drop the gross <code>sed</code> stuff I have some python functions <a href=\"https://github.com/leanprover-community/mathlib-port-status/blob/main/get_mathlib4_history.py#L20-L40\">here</a></p>",
        "id": 361810189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685302073
    },
    {
        "content": "<p>lean would of course also be an option</p>",
        "id": 361810356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302136
    },
    {
        "content": "<p>ah, not quite...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"bp\">«».«</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list</span><span class=\"bp\">».«</span><span class=\"mi\">16</span><span class=\"n\">_abel_ruffini</span><span class=\"bp\">»</span>\n</code></pre></div>",
        "id": 361810581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302225
    },
    {
        "content": "<p>Ah, I didn't try to fix relative imports</p>",
        "id": 361810984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685302435
    },
    {
        "content": "<p>Or maybe the script is just garbage</p>",
        "id": 361811058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685302454
    },
    {
        "content": "<p>it's not a relative import, it seems to be a weird interaction with the funny directory traversal stuff</p>",
        "id": 361811077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302461
    },
    {
        "content": "<p>Should <a href=\"https://github.com/leanprover-community/mathlib/pull/11001\">#11001</a> come back off the queue?</p>",
        "id": 361811109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685302473
    },
    {
        "content": "<p>it wants me to call <code>./scripts/mk_all.sh ../archive</code></p>",
        "id": 361811115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302477
    },
    {
        "content": "<p>I think you probably want <code>(cd archive &amp;&amp; ./scripts/mk_all.sh)</code></p>",
        "id": 361811155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685302500
    },
    {
        "content": "<p>but the <code>find</code> returns</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">../</span><span class=\"n\">archive</span><span class=\"bp\">/</span><span class=\"n\">imo</span><span class=\"bp\">/</span><span class=\"n\">imo1962_q4.lean</span>\n<span class=\"bp\">../</span><span class=\"n\">archive</span><span class=\"bp\">/</span><span class=\"n\">imo</span><span class=\"bp\">/</span><span class=\"n\">imo2011_q3.lean</span>\n<span class=\"bp\">../</span><span class=\"n\">archive</span><span class=\"bp\">/</span><span class=\"n\">imo</span><span class=\"bp\">/</span><span class=\"n\">imo1981_q3.lean</span>\n<span class=\"bp\">../</span><span class=\"n\">archive</span><span class=\"bp\">/</span><span class=\"n\">imo</span><span class=\"bp\">/</span><span class=\"n\">imo2013_q1.lean</span>\n<span class=\"bp\">../</span><span class=\"n\">archive</span><span class=\"bp\">/</span><span class=\"n\">imo</span><span class=\"bp\">/</span><span class=\"n\">imo2013_q5.lean</span>\n</code></pre></div>\n<p>and <code>sed</code> doesn't seem to be expecting it</p>",
        "id": 361811166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302501
    },
    {
        "content": "<p>Are you sure you don't just want to add <code>leanproject</code> as a dependency? For better or for worse, it's the monolith that contains random tools you need to write somewhat sane scripts to mangle lean</p>",
        "id": 361811256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685302540
    },
    {
        "content": "<p>I think so too, but the first part of the script is baking in some stuff which makes it absolute wrt <code>src/</code></p>",
        "id": 361811265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302547
    },
    {
        "content": "<p><code>sed</code> first replaces a single initial dot, then does not find two initial dots left...</p>",
        "id": 361811267,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685302549
    },
    {
        "content": "<p>try removing the first <code>sed</code> instruction.</p>",
        "id": 361811356,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685302567
    },
    {
        "content": "<p>if you do <code>cd archive &amp;&amp; ../scripts/mk_all.sh</code> you still get the contents of <code>src</code></p>",
        "id": 361811387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302584
    },
    {
        "content": "<p>I think I will just write the 3-line bash call at the end in the makefile</p>",
        "id": 361811663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302720
    },
    {
        "content": "<p>Is this what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">ls</span><span class=\"bp\">-</span><span class=\"n\">files</span> <span class=\"bp\">|</span> <span class=\"n\">sed</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">'/\\.</span><span class=\"n\">lean</span><span class=\"bp\">/</span> <span class=\"o\">{</span> <span class=\"n\">s</span><span class=\"bp\">=\\.</span><span class=\"n\">lean</span><span class=\"bp\">$==</span> <span class=\"bp\">;</span> <span class=\"n\">s</span><span class=\"bp\">=/=.=</span><span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">s</span><span class=\"bp\">=^</span><span class=\"n\">src</span><span class=\"bp\">\\.==;</span> <span class=\"n\">s</span><span class=\"bp\">=^=</span><span class=\"kn\">import</span> <span class=\"bp\">=</span> <span class=\"bp\">;</span> <span class=\"n\">p</span> <span class=\"o\">}</span><span class=\"bp\">'</span>\n</code></pre></div>",
        "id": 361811864,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685302812
    },
    {
        "content": "<p>what i have so far is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">find</span> <span class=\"bp\">.</span> <span class=\"bp\">-</span><span class=\"n\">name</span> <span class=\"bp\">\\*.</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">not</span> <span class=\"bp\">-</span><span class=\"n\">name</span> <span class=\"n\">archive_all.lean</span> <span class=\"bp\">\\</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sed</span> <span class=\"bp\">'</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">^\\./</span><span class=\"o\">,,</span><span class=\"bp\">;</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">^\\.\\./</span><span class=\"o\">[</span><span class=\"bp\">^/</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">,,</span><span class=\"bp\">;</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">/</span><span class=\"o\">,</span><span class=\"bp\">».«</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"bp\">;</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">\\.</span><span class=\"n\">lean</span><span class=\"bp\">$</span><span class=\"o\">,</span><span class=\"bp\">»</span><span class=\"o\">,</span><span class=\"bp\">;</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"bp\">^</span><span class=\"o\">,</span><span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"o\">,</span><span class=\"bp\">'</span> <span class=\"bp\">\\</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sort</span>\n</code></pre></div>",
        "id": 361811929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302875
    },
    {
        "content": "<p>your script looks to be the same except it is missing the french quote handling</p>",
        "id": 361811980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302910
    },
    {
        "content": "<p>oh, you need french quotes and src present?</p>",
        "id": 361812039,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685302925
    },
    {
        "content": "<p>no src, I'm running it from <code>archive/</code> and the result is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list</span><span class=\"bp\">».«</span><span class=\"mi\">16</span><span class=\"n\">_abel_ruffini</span><span class=\"bp\">»</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list</span><span class=\"bp\">».«</span><span class=\"mi\">30</span><span class=\"n\">_ballot_problem</span><span class=\"bp\">»</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list</span><span class=\"bp\">».«</span><span class=\"mi\">37</span><span class=\"n\">_solution_of_cubic</span><span class=\"bp\">»</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list</span><span class=\"bp\">».«</span><span class=\"mi\">42</span><span class=\"n\">_inverse_triangle_sum</span><span class=\"bp\">»</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list</span><span class=\"bp\">».«</span><span class=\"mi\">45</span><span class=\"n\">_partition</span><span class=\"bp\">»</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"mi\">100</span><span class=\"bp\">-</span><span class=\"n\">theorems</span><span class=\"bp\">-</span><span class=\"n\">list</span><span class=\"bp\">».«</span><span class=\"mi\">54</span><span class=\"n\">_konigsberg</span><span class=\"bp\">»</span>\n<span class=\"bp\">...</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"n\">miu_language</span><span class=\"bp\">».«</span><span class=\"n\">decision_suf</span><span class=\"bp\">»</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"n\">oxford_invariants</span><span class=\"bp\">».«</span><span class=\"mi\">2021</span><span class=\"n\">summer</span><span class=\"bp\">».«</span><span class=\"n\">week3_p1</span><span class=\"bp\">»</span>\n<span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"n\">sensitivity</span><span class=\"bp\">»</span>\n</code></pre></div>",
        "id": 361812087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685302969
    },
    {
        "content": "<p>so, how is this from archive?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">ls</span><span class=\"bp\">-</span><span class=\"n\">files</span> <span class=\"bp\">|</span> <span class=\"n\">sed</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">'/\\.</span><span class=\"n\">lean</span><span class=\"bp\">/</span> <span class=\"o\">{</span> <span class=\"n\">s</span><span class=\"bp\">=\\.</span><span class=\"n\">lean</span><span class=\"bp\">$==</span> <span class=\"bp\">;</span> <span class=\"n\">s</span><span class=\"bp\">=^</span><span class=\"n\">src</span><span class=\"bp\">/==;</span> <span class=\"n\">s</span><span class=\"bp\">=/=».«=</span><span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">s</span><span class=\"bp\">=^=</span><span class=\"kn\">import</span> <span class=\"bp\">«=</span> <span class=\"bp\">;</span> <span class=\"n\">s</span><span class=\"bp\">=$=»=</span> <span class=\"bp\">;</span> <span class=\"n\">p</span> <span class=\"o\">}</span><span class=\"bp\">'</span>\n</code></pre></div>",
        "id": 361812340,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685303089
    },
    {
        "content": "<p>seems to work</p>",
        "id": 361812461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685303146
    },
    {
        "content": "<p>the <code>src</code> part is obviously not needed if you only run in in archive...</p>",
        "id": 361812632,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685303216
    },
    {
        "content": "<p>I think you are overestimating how much I can parse of that line</p>",
        "id": 361812886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685303334
    },
    {
        "content": "<p>the spaces are appreciated though</p>",
        "id": 361812924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685303354
    },
    {
        "content": "<p>Semicolons split instructions.  The instructions in that case are simple substitutions.</p>",
        "id": 361813368,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685303596
    },
    {
        "content": "<p>Anyway, if that works, great!  If it misses something, let me know!</p>",
        "id": 361813391,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685303613
    },
    {
        "content": "<p>It is quite surprising the contrast between the usefulness of sed and how much its syntax looks like white noise.</p>",
        "id": 361814667,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685304270
    },
    {
        "content": "<p>Woohoo, it (almost) worked! It made it through the whole archive and got caught on <code>Archive::all</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Archive.Imo.Imo2005Q4</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">contains</span> <span class=\"sc\">'a'</span> <span class=\"k\">from</span> <span class=\"n\">Archive.Imo.Imo1998Q2</span>\n</code></pre></div>",
        "id": 361815502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685304769
    },
    {
        "content": "<p>I thought this was fixed?</p>",
        "id": 361815540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685304783
    },
    {
        "content": "<p>Oh I see, <code>imo1998_q2</code> defines <code>A</code> and <code>imo2005_q4</code> defines <code>a</code></p>",
        "id": 361815867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685304968
    },
    {
        "content": "<p>we need a linter for one-letter global declarations</p>",
        "id": 361815916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685305012
    },
    {
        "content": "<p>Yeah, I don't think anything was fixed: the mathlib3 docs are still generating spurious links to things like <code>M</code> and <code>f</code> (see e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/geometry/manifold/cont_mdiff.html\">here</a> (\"Let f : M → M'.\"). The suggestion  was to put everything in archive into a namespace.</p>",
        "id": 361815954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685305033
    },
    {
        "content": "<p>I thought that was already done and dusted or else I wouldn't have written the script to import everything to one top level <code>all.lean</code> file</p>",
        "id": 361815990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685305077
    },
    {
        "content": "<p>I made a PR that properly namespaced all the IMO files, but it was based on top of my \"move everything to src\" PR. Let me see if I can disentangle.</p>",
        "id": 361817797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685306178
    },
    {
        "content": "<p>while you are at it, please add <code>*.tlean</code> and <code>*.ast.json</code> to the mathlib <code>.gitignore</code></p>",
        "id": 361817986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685306295
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19122\">#19122</a></p>",
        "id": 361818198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685306460
    },
    {
        "content": "<p>The one downside to namespacing everything is all the docs pages about the imo problems become harder to read</p>",
        "id": 361822328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685308859
    },
    {
        "content": "<p>Could the namespace be a non-printing character?</p>",
        "id": 361822452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685308936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mk_all.2Esh/near/361822328\">said</a>:</p>\n<blockquote>\n<p>The one downside to namespacing everything is all the docs pages about the imo problems become harder to read</p>\n</blockquote>\n<p>That seems like a peculiarity of our docgen though. Most code documentation tools I can think of display functions in a module without the namespace</p>",
        "id": 361823505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685309669
    },
    {
        "content": "<p>I somewhat agree; doc-gen certainly bears some of the blame here</p>",
        "id": 361823560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685309730
    },
    {
        "content": "<p>we could implement something like the vscode sticky namespace line</p>",
        "id": 361823565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685309732
    },
    {
        "content": "<p>What code documentation tools are you thinking of?</p>",
        "id": 361823605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685309762
    },
    {
        "content": "<p>java, python, c / doxygen, rustdoc</p>",
        "id": 361823646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685309783
    },
    {
        "content": "<p>haskell</p>",
        "id": 361823656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685309796
    },
    {
        "content": "<p>Python has a pretty different namespacing model, and c doen't have one at all!</p>",
        "id": 361823685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685309825
    },
    {
        "content": "<p>Choosing a random doxygen example, <a href=\"https://eigen.tuxfamily.org/dox/group__SparseCore__Module.html\">https://eigen.tuxfamily.org/dox/group__SparseCore__Module.html</a> seems to show the full <code>Eigen</code> namespace everywhere</p>",
        "id": 361823807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685309907
    },
    {
        "content": "<p>rustdoc is probably the closest, in that functions are often distributed into \"impls\" that are roughly the size of namespace scopes in a lean file</p>",
        "id": 361823808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685309910
    },
    {
        "content": "<p>I think my argument here is that the best compromise might be to namespace separate archive files in <code>imo_XXXX</code> and <code>imo_YYYY</code>, but not make the statement even less readable with an <code>archive</code> on the front of everything</p>",
        "id": 361823879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685309988
    },
    {
        "content": "<p>not everywhere, e.g. <a href=\"https://eigen.tuxfamily.org/dox/classEigen_1_1SparseCompressedBase.html#a197111c1289644f1ea38fe683ccdd82a\">here</a> the headline is <code>innerIndexPtr()</code> without the namespace</p>",
        "id": 361823993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310043
    },
    {
        "content": "<p>I don't think anyone was suggesting an <code>archive.*</code> on everything</p>",
        "id": 361824027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310086
    },
    {
        "content": "<p>That's what Scott's <a href=\"https://github.com/leanprover-community/mathlib/pull/19122\">#19122</a> does, so at least one person was!</p>",
        "id": 361824035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685310095
    },
    {
        "content": "<p>oh, yeah I think <code>imo1234_q17</code> is plenty specific</p>",
        "id": 361824065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310121
    },
    {
        "content": "<p>Why can't doc-gen have a first step that strips the namespace on the archive files, before actually producing the docs?</p>",
        "id": 361824120,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685310141
    },
    {
        "content": "<p>because then all uses of <code>a</code> will get linked again</p>",
        "id": 361824137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310165
    },
    {
        "content": "<p>but also, it's a misuse of the global namespace</p>",
        "id": 361824200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310207
    },
    {
        "content": "<p>this is 100% a display issue</p>",
        "id": 361824220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310217
    },
    {
        "content": "<p>So the namespace could be <code>&lt;!--archive--&gt;</code>?  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 361824314,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685310278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mk_all.2Esh/near/361824220\">said</a>:</p>\n<blockquote>\n<p>this is 100% a display issue</p>\n</blockquote>\n<p>The <code>archive</code> bit is, but the <code>imo</code> bit is a genuine hygiene problem that can cause archive entries to clash with one another</p>",
        "id": 361824382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685310335
    },
    {
        "content": "<p>I already fixed the existing clashes in mathlib3, but I didn't give every problem its own namespace</p>",
        "id": 361824408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685310358
    },
    {
        "content": "<p>I mean that they should be namespaced, because that's the right way to build a collection of theorems about this stuff, and the display issue is not showing the namespace everywhere in the docs</p>",
        "id": 361824497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310417
    },
    {
        "content": "<p>Would it be hard to run a script on the docs with the namespace that removes the namespace for archive only in the visible html, but not on the actual URLs?</p>",
        "id": 361824762,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685310610
    },
    {
        "content": "<p>or we could just fix docgen...?</p>",
        "id": 361824823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310668
    },
    {
        "content": "<p>It would be easy to add a special case in doc-gen to not display the \"archive\" prefix</p>",
        "id": 361824825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685310671
    },
    {
        "content": "<p>But that's not a very good solution if other projects not called \"archive\" want this behavior</p>",
        "id": 361824838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685310686
    },
    {
        "content": "<p>are you talking about the lean 4 doc-gen here? Can i help you?</p>",
        "id": 361824849,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1685310697
    },
    {
        "content": "<p>I guess it affects both docgens</p>",
        "id": 361824866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310713
    },
    {
        "content": "<p>Lean4 doc-gen doesn't yet have the offending lean files that cause the issue; but it will soon!</p>",
        "id": 361824947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685310748
    },
    {
        "content": "<p>There could be a \"blacklist\" of namespaces, that do not show up on the webpages, but are present in the URLs, right?  So, we can initially have archive as blacklisted.  And we could add more, if needed.</p>",
        "id": 361825124,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685310891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mk_all.2Esh/near/361822328\">said</a>:</p>\n<blockquote>\n<p>The one downside to namespacing everything is all the docs pages about the imo problems become harder to read</p>\n</blockquote>\n<p>I see you haven't read much <code>category_theory</code> documentation <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 361825140,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685310904
    },
    {
        "content": "<p>I do think the situation is just a tiny bit worse when the namespace looks like a hash</p>",
        "id": 361825300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310983
    },
    {
        "content": "<p>(In case it wasn't clear, I think that <code>imo2010_q2</code> is a <em>terrible</em> name for a theorem. Unless you keep a database of IMO problems in your head and keep it up to date, it is way too easy to confuse it with <code>imo2001_q2</code> even if you aren't dyslexic. And it is completely non-descriptive of what the theorem is actually about.)</p>",
        "id": 361827643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685312736
    },
    {
        "content": "<p>I don't think it's terrible when the end goal is for the <code>archive</code> folder to be that database</p>",
        "id": 361827915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685312928
    },
    {
        "content": "<p>Maybe I am misunderstanding: i find <code>imo2010_q2</code> a not-so-bad for a namespace, though not for the theorem name.</p>",
        "id": 361828149,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685313104
    },
    {
        "content": "<p>Can we merge the PR, and finetune the namespacing solution later?</p>",
        "id": 361856864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685336129
    },
    {
        "content": "<p>IMHO, facts from <code>archive/imo</code> should not be used outside of their files, thus <code>imo2010_q2</code> is a good namespace/name for formalization of IMO 2010 Q2. In many cases, the only reason this problem is interesting to somebody is that it was at IMO.</p>",
        "id": 361872276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685344822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, my impression is that the re-namespacing is not blocking mathport any more</p>",
        "id": 361872489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685344905
    },
    {
        "content": "<p>If a problem has meaning outside of the IMO context, then we can have an alias with a better name.</p>",
        "id": 361872686,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685344977
    },
    {
        "content": "<p>So given we have a majority of people in favor of dropping <code>archive</code> from the namespace and there is no longer any urgency, I think it makes sense to do that before merging.</p>",
        "id": 361872711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685344985
    },
    {
        "content": "<p>(I think the most principled answer would be to give the theorems descriptive names if possible, and then have <code>archive/imo.yaml</code> which correlates the problems with their proofs, like we do for Freek's list - but also this is the very definition of bikeshedding, in a context where the wrong decision can easily be fixed later)</p>",
        "id": 361874811,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1685345841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mk_all.2Esh/near/361872489\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>, my impression is that the re-namespacing is not blocking mathport any more</p>\n</blockquote>\n<p>It might still help with preventing <span aria-label=\"down\" class=\"emoji emoji-2b07\" role=\"img\" title=\"down\">:down:</span> <br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mk_all.2Esh/near/361815502\">said</a>:</p>\n<blockquote>\n<p>Woohoo, it (almost) worked! It made it through the whole archive and got caught on <code>Archive::all</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Archive.Imo.Imo2005Q4</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">contains</span> <span class=\"sc\">'a'</span> <span class=\"k\">from</span> <span class=\"n\">Archive.Imo.Imo1998Q2</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 361875464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685346069
    },
    {
        "content": "<p>Somehow I'd assumed that Mario had already fixed that and shipped it, but I now see the PR is still open after all</p>",
        "id": 361876907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685346590
    },
    {
        "content": "<p>I fixed it locally, but seeing as there was an active PR about it I didn't commit it to mathlib3</p>",
        "id": 361880037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685347653
    },
    {
        "content": "<p>Sorry, I won't have a chance to look at the namespacing PR for 24 hours, if someone want to take it over please do.</p>",
        "id": 362054904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685409506
    },
    {
        "content": "<p>I can try to renamespace the files in archive.</p>",
        "id": 362071509,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685422510
    },
    {
        "content": "<p>I am going to use the filename for the <code>imo</code> problems as the first layer of namespace, plus whatever they already had.  Is everyone happy with this decision?  This is very easy to change later on, anyway.</p>",
        "id": 362071558,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685422558
    },
    {
        "content": "<p>In fact, for the files contained inside a folder within <code>archive</code>, I would use the folder name.  Thus use <code>100-theorems(-list)</code>, <code>imo</code>.</p>",
        "id": 362071966,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685422753
    },
    {
        "content": "<p>The files directly in the archive folder <code>arithcc</code> and <code>sensitivity</code>, already had their own namespace, so I am tempted to leave them as they were (namely, remove the <code>archive</code> namespace.</p>",
        "id": 362072106,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685422816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Just to make sure... you are aware of <a href=\"https://github.com/leanprover-community/mathlib/pull/19122\">#19122</a>?</p>",
        "id": 362089189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685429955
    },
    {
        "content": "<p>Johan, yes, thanks!  I am editing that pr, in fact.</p>",
        "id": 362089427,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685430023
    },
    {
        "content": "<p>That PR introduced the <code>archive</code> namespace for everything, while I think that the consensus is to have slightly more bespoke namespaces for the files in archive.</p>",
        "id": 362089540,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685430063
    },
    {
        "content": "<p>Namespacing everything causes issues with name resolution: <code>open</code> and <code>namespace</code> do not interact very well.</p>",
        "id": 362091553,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685430722
    },
    {
        "content": "<p>Ok, it seems that not that many files are affected: should I fix these issues by changing <code>open ...</code> and possibly adding some explicit namespaces/<code>_root_.</code> to declarations?</p>",
        "id": 362092069,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685430884
    },
    {
        "content": "<p>I opened  <a href=\"https://github.com/leanprover-community/mathlib/pull/19129\">#19129</a>: it is a PR similar to Scott's, but so far only deals with <code>archive</code>.  I add the two namespaces</p>\n<ul>\n<li><code>imo</code> and</li>\n<li><code>theorems_100</code>,</li>\n</ul>\n<p>though less aggressively (i.e. not in all files contained in <code>imo</code> or <code>100-theorems-list</code>).</p>\n<p>The PR description gives some more context.</p>\n<p>Let me know if this looks ok!  On my computer,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span> <span class=\"c1\">--make archive</span>\n</code></pre></div>\n<p>is successful.</p>",
        "id": 362189368,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685454472
    },
    {
        "content": "<p>If I did not make mistakes, all the added namespaces are in files where a namespace is wanted.  There may be files in which we would like to add a namespace, but this PR has not added it (yet).</p>",
        "id": 362190453,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685454681
    },
    {
        "content": "<p>If this is in line with what everyone likes, then I can process similarly also <code>counterexamples</code>.</p>",
        "id": 362190554,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685454708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mk_all.2Esh/near/362189368\">said</a>:</p>\n<blockquote>\n<p>Let me know if this looks ok!  On my computer,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span> <span class=\"c1\">--make archive</span>\n</code></pre></div>\n<p>is successful.</p>\n</blockquote>\n<p>the real test is whether <code>./scripts/mk_all.sh &amp;&amp; lean --make archive</code> is successful</p>",
        "id": 362191572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685454922
    },
    {
        "content": "<p>i.e. can you import everything in the archive at once</p>",
        "id": 362191657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685454943
    },
    {
        "content": "<p>(substitute the scripts from up-thread for <code>mk_all.sh</code>)</p>",
        "id": 362191881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685454982
    },
    {
        "content": "<p>Let me try!</p>",
        "id": 362192403,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685455084
    },
    {
        "content": "<p>CI already tests this</p>",
        "id": 362192546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685455112
    },
    {
        "content": "<p>(and it already passes on master)</p>",
        "id": 362192601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685455122
    },
    {
        "content": "<p>It just doesn't pass when you let mathport rename two different names to the same name</p>",
        "id": 362192702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685455141
    },
    {
        "content": "<p>Eric, I made the mistake of merging master half-way, so I think that CI has to rebuild (almost) all master, before getting to the tests.</p>",
        "id": 362193057,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685455215
    },
    {
        "content": "<p>So, I am going to try locally, to see if there are further issues, before addressing <code>counterexamples</code>.</p>",
        "id": 362193223,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685455244
    },
    {
        "content": "<p>I don't think there's any need to do so immediately; I would guess the only clash mathport cares about is in the <code>imo</code> folder</p>",
        "id": 362193638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685455302
    },
    {
        "content": "<p>Ok, I'll wait, since I am not sure that I am testing the right thing on my computer and the real test is whether it passes CI or not!</p>",
        "id": 362196632,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685455876
    },
    {
        "content": "<p>(the reason this is already in CI is because doc-gen would crash if we got it wrong, and no one looks at those CI logs)</p>",
        "id": 362197900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685456121
    },
    {
        "content": "<p>Is it the \"check archive and counterexample directories have unique identifiers \"?</p>",
        "id": 362221058,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685460635
    },
    {
        "content": "<p>Ok, good, that check passed , then!</p>",
        "id": 362224160,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685461284
    },
    {
        "content": "<p>Looking at the files in <code>counterexamples</code>, I think that adding a blanket namespace is probably better.</p>",
        "id": 362244557,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685465762
    },
    {
        "content": "<p>I am going to add <code>namespace counteraxample</code> (singular) to all of them.  Let me know if you prefer otherwise!</p>",
        "id": 362244754,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685465795
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19129\">#19129</a> is ready, I hope!</p>\n<p>I namespace 54 files, as opposed to the 69 that Scott's PR namespaced.  There may still be some of the currently non-namespaced files that might benefit from a namespace, but I'll leave this be for the moment.</p>\n<p>Let me know if you have any comments or namespace requests!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 362264796,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685470322
    },
    {
        "content": "<p>Given Eric's comment about 100-theorems being mostly unported, Scott merged the namespacing PR!</p>\n<p>What else is needed to get the files in <code>archive</code> and <code>counterexamples</code> available for porting?</p>",
        "id": 362874035,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685651476
    },
    {
        "content": "<p>My understanding is the answer is:</p>\n<ul>\n<li>Mario needs to revive their mathport PR to add the necessary CI scripts</li>\n<li>I might need to tweak the script that <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> runs in order to correctly consume data about these new files</li>\n</ul>",
        "id": 362890229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685656993
    },
    {
        "content": "<p>the mathport PR has the CI scripts already, that's what the PR was about</p>",
        "id": 362925043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685678410
    },
    {
        "content": "<p>Ok, great!</p>\n<p>Of course, this is not a priority.  I also think that porting these files should be mostly fun and straightforward.</p>",
        "id": 362936799,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685685385
    },
    {
        "content": "<p>Do we have a mathlib4 <code>mk_all</code> somewhere?</p>",
        "id": 390159037,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694360622
    },
    {
        "content": "<p>Isn't there already by default <code>Mathlib.lean</code>?</p>",
        "id": 390159359,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694360931
    },
    {
        "content": "<p>Or do you mean to <code>lake build</code> <em>all</em>?</p>",
        "id": 390159373,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694360960
    },
    {
        "content": "<p>Nah, I want a script to generate <code>MyProject.lean</code>.</p>",
        "id": 390159655,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694361251
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>ls-files<span class=\"w\"> </span><span class=\"s1\">'Mathlib/*.lean'</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sort<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sed<span class=\"w\"> </span><span class=\"s1\">'s=^.=import &amp;=; s=/=.=g ; s=\\.lean$=='</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span>MyPath.lean\n</code></pre></div>\n<p>This might work...</p>",
        "id": 390159783,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694361404
    },
    {
        "content": "<p>Running</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>ls-files<span class=\"w\"> </span><span class=\"s1\">'Mathlib/*.lean'</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sed<span class=\"w\"> </span><span class=\"s1\">'s=^.=import &amp;=; s=/=.=g ; s=\\.lean$=='</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>diff<span class=\"w\"> </span>-<span class=\"w\"> </span>Mathlib.lean\n</code></pre></div>\n<p>produces no output.  So, I think that</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>ls-files<span class=\"w\"> </span><span class=\"s1\">'*.lean'</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sed<span class=\"w\"> </span><span class=\"s1\">'s=^.=import &amp;=; s=/=.=g ; s=\\.lean$=='</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span>my/path.lean\n</code></pre></div>\n<p>also has good chances of working!</p>",
        "id": 390161935,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694363177
    },
    {
        "content": "<p>The exact command to use can be found in the CI script</p>",
        "id": 390261937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694421741
    }
]