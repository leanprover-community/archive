[
    {
        "content": "<p>Does anybody have experience with getting a global mathlib installation to work? The background is that I want a fixed mathlib version built on the university server so that all students' lake projects reference this one as they don't have space for there own mathlib each. I'm facing in particular a few issues:</p>\n<ol>\n<li>the lakefile seems to only allow relative paths <code>require mathlib from \"..\"/\"mathlib4\"</code>, but not absolute ones, is that true?</li>\n<li>even with the downloaded cache in the <code>mathlib4</code> repo, opening the repo with the local mathlib import seems to try and rebuild all of mathlib. (and yes, the toolchain is correctly set)</li>\n<li>this local import still clones all packages mathlib depends on into <code>myproject/lake-packages/std</code> and thelike.</li>\n</ol>\n<p>Can anybody explain why any of these things happen? And does anybody know how to get a centralised mathlib? Do I need to manually put simlinks inside <code>myproject/lake-packages/</code> maybe?</p>",
        "id": 392339882,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1695308422
    },
    {
        "content": "<p>Jon and I will probably use a custom <code>packagesDir</code> (<a href=\"https://github.com/leanprover/lake#package-configuration-options\">https://github.com/leanprover/lake#package-configuration-options</a>) instead. But still, it's weird that the local mathlib dependency does not work properly.</p>",
        "id": 392393094,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1695328815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> may be able to answer questions 1. and 3., or otherwise record issues for them to address later.</p>",
        "id": 392421684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695345498
    },
    {
        "content": "<ol start=\"2\">\n<li>sounds like a problem with <code>cache</code> (provided by Mathlib). If you could provide an easy to reproduce setup that shows this problem that would be helpful.</li>\n</ol>",
        "id": 392421747,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695345533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> Some answers:</p>\n<ol>\n<li>Lake does do anything special to forbid them. However, as Lake may relocated package (as you see in 3), absolute paths will break often. This is because Lake prepends local requires with the prefix of the package, package directory, and workspace they are situated in.</li>\n<li>Cache hard codes the directory structure of where it expects mathlib to be based on the default Lake setup. It does not use Lake's information. It assumes mathlib is either the root package or located with a folder called <code>lake-packages</code>.</li>\n<li>Lake stores all non-local packages in the dependency tree with the workspace's packages directory (i.e., by default, <code>lake-packages</code>).  You could can tell it store them elsewhere via the <code>packagesDir</code> configuration,, but that will still break cache.</li>\n</ol>",
        "id": 392422489,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695345938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, can you advise how <code>cache</code> could get this information from <code>lake</code>?</p>",
        "id": 392422807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695346099
    },
    {
        "content": "<p>In the long run this will just be taken over by <code>cache</code>'s replacement, but it sounds like a fix for this is warranted now if possible.</p>",
        "id": 392422839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695346122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It would be a non-trivial addition and add non-trivial overhead (as it would need to either get lake to give them information to it or load the Lake configuration).</p>",
        "id": 392423153,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695346322
    },
    {
        "content": "<p>Is this on your roadmap? Should we create an issue for being able to access this information? Or should <code>cache</code> resort to regex'ing the lakefile for now? I don't particularly mind which, but this use case (deployment for a university course) seems worth supporting even if very hackily.</p>",
        "id": 392424466,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695347267
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover/lean4/pull/2542\">https://github.com/leanprover/lean4/pull/2542</a> is perhaps related here?</p>",
        "id": 392425796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695348199
    },
    {
        "content": "<p>Indeed. Perhaps all the information needed is available in this incantation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">releases</span><span class=\"o\">:</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"mi\">2542</span> <span class=\"n\">dump</span><span class=\"bp\">-</span><span class=\"n\">config</span> <span class=\"bp\">|</span> <span class=\"n\">jq</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">'.</span><span class=\"n\">packages</span><span class=\"o\">[]</span> <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">dir</span><span class=\"o\">,</span> <span class=\"n\">remoteUrl</span><span class=\"o\">,</span> <span class=\"n\">libs</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">libs</span><span class=\"o\">[]</span> <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">srcDir</span><span class=\"o\">,</span> <span class=\"n\">roots</span><span class=\"o\">}]}</span><span class=\"bp\">'</span>\n</code></pre></div>",
        "id": 392428080,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695349814
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"s2\">\"dir\"</span><span class=\"o\">:</span><span class=\"s2\">\"./lake-packages/std\"</span><span class=\"o\">,</span><span class=\"s2\">\"remoteUrl\"</span><span class=\"o\">:</span><span class=\"s2\">\"https://github.com/leanprover/std4\"</span><span class=\"o\">,</span><span class=\"s2\">\"libs\"</span><span class=\"o\">:[{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Std\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"Std\"</span><span class=\"o\">]}]}</span>\n<span class=\"o\">{</span><span class=\"s2\">\"dir\"</span><span class=\"o\">:</span><span class=\"s2\">\"./lake-packages/Qq\"</span><span class=\"o\">,</span><span class=\"s2\">\"remoteUrl\"</span><span class=\"o\">:</span><span class=\"s2\">\"https://github.com/gebner/quote4\"</span><span class=\"o\">,</span><span class=\"s2\">\"libs\"</span><span class=\"o\">:[{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Qq\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"Qq\"</span><span class=\"o\">]}]}</span>\n<span class=\"o\">{</span><span class=\"s2\">\"dir\"</span><span class=\"o\">:</span><span class=\"s2\">\"./lake-packages/aesop\"</span><span class=\"o\">,</span><span class=\"s2\">\"remoteUrl\"</span><span class=\"o\">:</span><span class=\"s2\">\"https://github.com/JLimperg/aesop\"</span><span class=\"o\">,</span><span class=\"s2\">\"libs\"</span><span class=\"o\">:[{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Aesop\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"Aesop\"</span><span class=\"o\">]},{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"AesopTest\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"AesopTest\"</span><span class=\"o\">]}]}</span>\n<span class=\"o\">{</span><span class=\"s2\">\"dir\"</span><span class=\"o\">:</span><span class=\"s2\">\"./lake-packages/Cli\"</span><span class=\"o\">,</span><span class=\"s2\">\"remoteUrl\"</span><span class=\"o\">:</span><span class=\"s2\">\"https://github.com/mhuisi/lean4-cli\"</span><span class=\"o\">,</span><span class=\"s2\">\"libs\"</span><span class=\"o\">:[{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Cli\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"Cli\"</span><span class=\"o\">]}]}</span>\n<span class=\"o\">{</span><span class=\"s2\">\"dir\"</span><span class=\"o\">:</span><span class=\"s2\">\"./lake-packages/proofwidgets\"</span><span class=\"o\">,</span><span class=\"s2\">\"remoteUrl\"</span><span class=\"o\">:</span><span class=\"s2\">\"https://github.com/EdAyers/ProofWidgets4\"</span><span class=\"o\">,</span><span class=\"s2\">\"libs\"</span><span class=\"o\">:[{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"ProofWidgets\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"ProofWidgets\"</span><span class=\"o\">]}]}</span>\n<span class=\"o\">{</span><span class=\"s2\">\"dir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"remoteUrl\"</span><span class=\"o\">:</span><span class=\"n\">null</span><span class=\"o\">,</span><span class=\"s2\">\"libs\"</span><span class=\"o\">:[{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Mathlib\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"Mathlib\"</span><span class=\"o\">]},{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Cache\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"Cache\"</span><span class=\"o\">]},{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"MathlibExtras\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"MathlibExtras\"</span><span class=\"o\">]},{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Archive\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"Archive\"</span><span class=\"o\">]},{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"Counterexamples\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"Counterexamples\"</span><span class=\"o\">]},{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"ImportGraph\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"ImportGraph\"</span><span class=\"o\">]},{</span><span class=\"s2\">\"name\"</span><span class=\"o\">:</span><span class=\"s2\">\"docs\"</span><span class=\"o\">,</span><span class=\"s2\">\"srcDir\"</span><span class=\"o\">:</span><span class=\"s2\">\".\"</span><span class=\"o\">,</span><span class=\"s2\">\"roots\"</span><span class=\"o\">:[</span><span class=\"s2\">\"docs\"</span><span class=\"o\">]}]}</span>\n</code></pre></div>",
        "id": 392428134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695349853
    },
    {
        "content": "<p>I am liking <a href=\"https://github.com/leanprover/lean4/pull/2542\">lean4#2542</a>. :-)</p>",
        "id": 392428169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695349885
    },
    {
        "content": "<p>Thanks for the insight! I think my problem is not directly that <code>cache</code> breaks, but rather, that lake/lean is not able to use the build of a package. Here is a MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">mathlib4</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>        <span class=\"bp\">#</span> <span class=\"n\">works</span> <span class=\"n\">all</span> <span class=\"n\">fine</span>\n<span class=\"n\">cd</span> <span class=\"bp\">..</span>\n<span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">MyProject</span>\n<span class=\"n\">cp</span> <span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">MyProject</span><span class=\"bp\">/</span>\n<span class=\"n\">cd</span> <span class=\"n\">MyProject</span>\n<span class=\"n\">nano</span> <span class=\"n\">lakefile.lean</span>                 <span class=\"bp\">#</span> <span class=\"n\">add</span> <span class=\"bp\">`</span><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"s2\">\"..\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"mathlib4\"</span><span class=\"bp\">`</span>\n<span class=\"n\">nano</span> <span class=\"n\">MyProject.lean</span>           <span class=\"bp\">#</span> <span class=\"n\">add</span> <span class=\"bp\">`</span><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span><span class=\"bp\">`</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>                 <span class=\"bp\">#</span> <span class=\"n\">builds</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">scratch</span>\n</code></pre></div>\n<p>Now, I think I start to understand why: The <code>.olean</code>s from the <code>cache</code> command are in <code>mathlib4/build/lib/</code> but it seems that you can't use these when mathlib is imported as local packages, because we only use built oleans that lie inside <code>MyProject/build/lib</code> and there is nothing there yet. Does that sound correct <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> ?</p>",
        "id": 392434128,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1695353859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> Lake does not hoist build files (currently). Thus, what you are doing there should work.</p>",
        "id": 392434960,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695354468
    },
    {
        "content": "<p>I am confused why it is not.</p>",
        "id": 392434969,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695354481
    },
    {
        "content": "<p>Is is just rebuilding mathlib or is it also rebuilding its dependencies?</p>",
        "id": 392435062,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695354528
    },
    {
        "content": "<p>(I am most interested in what proof widgets is doing)</p>",
        "id": 392435361,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695354740
    },
    {
        "content": "<p>both. Although the dependencies I get because they are not actually the same ones, but clones thereof (<code>MyProject/lake-packages/std</code> as opposed to <code>mathlib4/lake-packages/std</code>) and there is no inherit reason these two have to be the same. And then <code>mathlib</code> has to be rebuilt against these new clones (which might apriori be different versions)</p>\n<p>\"Does not hoist\", doesn't that mean you are expecting this to fail? Or do I missunderstand what hoist means?</p>",
        "id": 392435381,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1695354755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> No, I am not expecting this to fail. \"Hoist\" here means copy the build files of a dependencies build directory into the root's build directory (which Lake does not do). It does however \"hoist\" dependencies (e.g., put mathlib's dependencies in <code>MyProject</code>'s <code>lake-packages</code> rather than mathlib's).</p>",
        "id": 392435682,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695354988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> In addition to the relative import, you could also try setting <code>MyProject</code>'s <code>packagesDir</code> to mathlib's <code>lake-packages</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">MyProject</span> <span class=\"n\">where</span>\n  <span class=\"n\">packagesDir</span> <span class=\"o\">:=</span> <span class=\"s2\">\"..\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"mathlib4\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"lake-packages\"</span>\n  <span class=\"c1\">-- ...</span>\n</code></pre></div>",
        "id": 392435780,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695355073
    },
    {
        "content": "<p>Yea, Alex &amp; I thought, the solution would be to do <code>lake exe cache get &amp;&amp; lake build</code> inside <code>MyProject</code>, then take <code>MyProject/lake-packages</code> (which includes mathlib and all) and copy this manually to a central location and reference it with <code>packagesDir</code>. Your suggestion sounds quite similar to that. Ofc that's quite a hack, but I think that should would</p>",
        "id": 392436098,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1695355270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Global.20Installation/near/392435682\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> No, I am not expecting this to fail. \"Hoist\" here means copy the build files of a dependencies build directory into the root's build directory (which Lake does not do). It does however \"hoist\" dependencies (e.g., put mathlib's dependencies in <code>MyProject</code>'s <code>lake-packages</code> rather than mathlib's).</p>\n</blockquote>\n<p>Now Im confused that Im expecting it to fail. When calling <code>lake build</code> inside <code>MyProject</code>, where exactly would you expect it to find the (mathlib/std)-olean files?</p>",
        "id": 392436323,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1695355414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> Lake would expect to find mathlib's OLeans in <code>../mathlib4/build/lib</code> and std's in <code>MyProject/lake-packages/std/build/lib</code> (without the change to <code>packagesDir</code>). Why that is not working confuses me too.</p>",
        "id": 392436600,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695355592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Global.20Installation/near/392436600\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> Lake would expect to find mathlib's OLeans in <code>../mathlib4/build/lib</code> and std's in <code>MyProject/lake-packages/std/build/lib</code>. Why that is not working confuses me too.</p>\n</blockquote>\n<p>and then it would use the mathlib-oleans mixed with std-oleans that might have a completely incompatible version? I agree though that your expectations are how I'd hoped it would work</p>\n<p>I thought the entire point of the flat package structure was that if I update std to a newer version in my project, then all of mathlib would be rebuild against this newer version instead of relying on the std-version it was written for.</p>",
        "id": 392436787,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1695355777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Global.20Installation/near/392436787\">said</a>:</p>\n<blockquote>\n<p>and then it would use the mathlib-oleans mixed with std-oleans that might have a completely incompatible version?</p>\n</blockquote>\n<p>No, it would/should rebuild them if the versions do not match. In fact, the current problem is that it thinks they do not for some reason despite the fact it should be getting which versions of mathlib's dependencies to download into MyProject's <code>lake-packages</code> from mathlib. (Unless <code>MyProject</code> is requesting new versions in its <code>lakefile.lean</code>?)</p>",
        "id": 392617931,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695426875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> I tried the approach using <code>packagesDir</code> you suggested. It seems to work fine if all users have write access to the <code>packagesDir</code>. But I'd prefer to get it to work without write access if possible. Without write access, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">permission</span> <span class=\"n\">denied</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">13</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">eugster</span><span class=\"bp\">/</span><span class=\"n\">cgbf2023</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Command.trace</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">permission</span> <span class=\"n\">denied</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">13</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">eugster</span><span class=\"bp\">/</span><span class=\"n\">cgbf2023</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Unreachable.trace</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">permission</span> <span class=\"n\">denied</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">13</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">eugster</span><span class=\"bp\">/</span><span class=\"n\">cgbf2023</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Parser.trace</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">permission</span> <span class=\"n\">denied</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">13</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Why do the trace files need to be rewritten? <code>lake exe cache get</code> has already been performed by the other user who has write access.</p>",
        "id": 394806205,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696414599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Global.20Installation/near/394806205\">said</a>:</p>\n<blockquote>\n<p>Why do the trace files need to be rewritten? <code>lake exe cache get</code> has already been performed by the other user who has write access.</p>\n</blockquote>\n<p>Was <code>lake exe cache get</code> <em>and</em> <code>lake build</code> run. Usually there are some files that still need to be built once after a <code>lake exe cache get</code>.</p>",
        "id": 394856424,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696430474
    },
    {
        "content": "<p>Yes, I also ran <code>lake build</code> via the priviledged user.</p>",
        "id": 394859896,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696431449
    },
    {
        "content": "<p>could it be that it happens because there are two different users?</p>",
        "id": 394861743,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696431967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib.20Global.20Installation/near/394859896\">said</a>:</p>\n<blockquote>\n<p>Yes, I also ran <code>lake build</code> via the priviledged user.</p>\n</blockquote>\n<p>Ah, this may be the problem. If the file is owned by a privileged user, and unprivileged user may be be unable to read it (which would prevent their Lake from checking the traces). Can you check the permissions on the file and ensure that it is readable by everyone (and probably do the same for the oleans and ileans as well).</p>",
        "id": 394957470,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696477373
    },
    {
        "content": "<p>I set all files and directories to <code>chmod 755</code>. The trace files are definitely readable by the unpriviledged user.</p>",
        "id": 394980802,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696490872
    },
    {
        "content": "<p>When developing NNG and trying to get dev containers to work I once ended up with root downloading a bunch of files into lake-packages. I made all of them 777 expecting it would just fix the problem, but to my surprise it didn't. I didn't investigate any further though, I just deleted lake-packages</p>",
        "id": 394981243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696491026
    },
    {
        "content": "<p>Okay, that must have been something else. chmod 777 solves the issue. I'd just prefer not to give write access. Maybe it's because none of my two users is root?</p>",
        "id": 394984317,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696492416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> That is weird. Lake shouldn't need write access to verify the files are up-to-date (and from Lake's code I cannot see a place where it would be trying to gain it). If you could produces a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> example of such a permissions error that may help debug it.</p>",
        "id": 395094465,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696529008
    },
    {
        "content": "<p>Ok, I'll try.</p>",
        "id": 395101335,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696531862
    },
    {
        "content": "<p>Sorry, can't reproduce it. It seems to go wrong only in our computer lab...</p>",
        "id": 395115483,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1696538348
    },
    {
        "content": "<p>Ah, the wonderful world of Heisenbugs. <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 395330520,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696627396
    }
]