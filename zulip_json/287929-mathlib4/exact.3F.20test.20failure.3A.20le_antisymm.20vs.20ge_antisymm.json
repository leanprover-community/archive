[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">LibrarySearch</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"mi\">228</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"bp\">`</span><span class=\"n\">exact</span><span class=\"bp\">?`</span> <span class=\"n\">produced</span> <span class=\"bp\">`</span><span class=\"n\">exact</span> <span class=\"n\">ge_antisymm</span> <span class=\"n\">hyx</span> <span class=\"n\">hxy</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n<span class=\"n\">but</span> <span class=\"n\">was</span> <span class=\"n\">expecting</span> <span class=\"n\">it</span> <span class=\"n\">to</span> <span class=\"n\">produce</span> <span class=\"bp\">`</span><span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">hxy</span> <span class=\"n\">hyx</span><span class=\"bp\">`!</span>\n</code></pre></div>\n<p>Seems unfortunate to fail CI over that</p>",
        "id": 405122456,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701352555
    },
    {
        "content": "<p>Arguably that's a bug in <code>exact?</code>; it should be preferring <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_antisymm#doc\">docs#le_antisymm</a> over <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ge_antisymm#doc\">docs#ge_antisymm</a></p>",
        "id": 405122826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701352631
    },
    {
        "content": "<p>why do we even have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ge_antisymm#doc\">docs#ge_antisymm</a> ?</p>",
        "id": 405135117,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701356237
    },
    {
        "content": "<p>Good question, I assumed it would be in core, but it's in mathlib</p>",
        "id": 405136459,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701356575
    },
    {
        "content": "<p>4 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Obscure.20test.20fail\">#mathlib4 &gt; Obscure test fail</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 405139806,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701357582
    },
    {
        "content": "<p><code>ge_antisymm</code> was an ematch lemma in Lean 3. The port should have deleted it in favor of <code>le_antisymm</code>.</p>",
        "id": 405150306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701360552
    },
    {
        "content": "<p>Thanks for volunteering to remove it :)</p>",
        "id": 405151193,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701360827
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8760\">#8760</a></p>",
        "id": 405298030,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701415933
    },
    {
        "content": "<p>I see you were talking about <code>ge_antisymm</code>, not <code>le_antisymm'</code>. I added <code>ge_antisymm</code> ages ago to make sure the API is symmetric (sometimes one <code>≤</code> is much eaier than the other, and you want it to come last).</p>",
        "id": 405298211,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701416008
    },
    {
        "content": "<p>This is also useful for dualising proofs without having to shuffle arguments.</p>",
        "id": 405298416,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701416067
    },
    {
        "content": "<p>Yeah, not sure what made you think about <code>le_antisymm'</code></p>",
        "id": 405301627,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701417061
    },
    {
        "content": "<p>Well, it's an exact copy of <code>le_antisymm</code>, so that was fitting with <code>exact?</code> getting confused.</p>",
        "id": 405301793,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701417115
    },
    {
        "content": "<p>Seems I was quite spot on <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> : <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/7057097484/job/19210170676\">https://github.com/leanprover-community/mathlib4/actions/runs/7057097484/job/19210170676</a></p>",
        "id": 405314717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701420816
    },
    {
        "content": "<p>Getting the same CI error in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8397\">#8397</a>. Is there a fix?</p>",
        "id": 405457004,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1701475182
    },
    {
        "content": "<p>I think the fix was merged yesterday; have you merged master recently?</p>",
        "id": 405530896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701519305
    },
    {
        "content": "<p>Merged master again just now. Problem went away. Thanks!</p>",
        "id": 405585965,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1701566303
    }
]