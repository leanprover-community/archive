[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiffDef</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">continuity</span>\n</code></pre></div>\n<p>This fails, but the equivalent works in mathlib3. The error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">aesop</span><span class=\"o\">:</span> <span class=\"n\">exceeded</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">normalisation</span> <span class=\"n\">iterations</span> <span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">This</span> <span class=\"n\">means</span> <span class=\"n\">normalisation</span> <span class=\"n\">probably</span> <span class=\"n\">got</span> <span class=\"n\">stuck</span> <span class=\"k\">in</span> <span class=\"n\">an</span> <span class=\"n\">infinite</span> <span class=\"n\">loop.</span>\n</code></pre></div>",
        "id": 398168064,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698102046
    },
    {
        "content": "<p>I remain unconvinced that <code>continuity</code> should be implemented on top of <code>aesop</code>, and think that the mathlib3 implementation on top of <code>solve_by_elim</code> is likely to be more performant. It just doesn't need the full power of <code>aesop</code>.</p>",
        "id": 398168975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698102555
    },
    {
        "content": "<p>Is this the <code>HPow</code> bug?</p>",
        "id": 398170622,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698103701
    },
    {
        "content": "<p>Can someone remind me why we haven't just merged that one line of gobble-de-gook which fixes it 9 times out of 10?</p>",
        "id": 398170686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698103765
    },
    {
        "content": "<p>We don't even need to merge that one line, we can remove the line in core that makes us need the gobble-de-gook</p>",
        "id": 398170877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698103910
    },
    {
        "content": "<p>I think the problem is that a better solution is in the pipeline, and so no one wants to think about the fast solution</p>",
        "id": 398170942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698103943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Regression.20in.20continuity/near/398170622\">said</a>:</p>\n<blockquote>\n<p>Is this the <code>HPow</code> bug?</p>\n</blockquote>\n<p>No - adding the usual incantation doesn't help, nor does it change how the goal here is elaborated</p>",
        "id": 398171530,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698104490
    },
    {
        "content": "<p>I'm curious how elaboration gets it right here but wrong everywhere else. That's strange.</p>",
        "id": 398171758,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698104699
    },
    {
        "content": "<p>because it doesn't import <code>Analysis.SpecialFunctions.Pow.Real</code></p>",
        "id": 398212875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698127994
    },
    {
        "content": "<p>The cause of the timeout is that <code>npowRec</code> is registered as an <code>unfold</code> rule. Aesop <code>unfold</code> works like the <code>unfold</code> tactic, so it'll unfold recursive functions over and over again, until timeout. (I should probably just forbid <code>unfold</code> rules for recursive declarations.) Registering <code>npowRec</code> as a <code>simp</code> rule instead makes progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiffDef</span>\n\n<span class=\"n\">erase_aesop_rules</span> <span class=\"o\">[</span><span class=\"n\">npowRec</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">])]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">npowRec</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>\n<p>This leaves the goal <code>Continuous (npowRec n)</code>.</p>",
        "id": 398264570,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698146068
    },
    {
        "content": "<p>Hmm, this still isn't a complete fix because in mathlib3 continuity closes the goal, rather than leaving another goal...</p>",
        "id": 398319374,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698163406
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=npowRec#doc\">docs#npowRec</a> shouldn't be a rule at all... It should be <code>pow_succ</code> or similar if we really want such a rule</p>",
        "id": 398322332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698164340
    },
    {
        "content": "<p><code>npowRec</code> is an implementation detail used to implement <code>Monoid.npow</code> for only some types.</p>",
        "id": 398322388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698164361
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiffDef</span>\n\n<span class=\"n\">erase_aesop_rules</span> <span class=\"o\">[</span><span class=\"n\">npowRec</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">])]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">apply</span> <span class=\"n\">norm</span><span class=\"o\">]</span> <span class=\"n\">Continuous.pow</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>",
        "id": 398387876,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1698197715
    },
    {
        "content": "<p>I think we may need a separate theorem when the exponent is a numeric literal, but I may be wrong.</p>",
        "id": 398391739,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698199729
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>\n<p>works as well</p>",
        "id": 398392398,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1698200044
    },
    {
        "content": "<p>the problem seems to be that the <code>safe</code> version does not fire, but the <code>norm</code>-one does and the standard way of adding continuity lemmas is through <code>apply safe</code>.</p>",
        "id": 398392937,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1698200280
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7909\">mathlib4#7909</a></p>",
        "id": 398406633,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1698207155
    },
    {
        "content": "<p>I'm puzzled why the first two succeeds but the last fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousOn</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span><span class=\"o\">}</span> <span class=\"bp\">↦</span> <span class=\"n\">p.val.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span>\n<span class=\"c\">/-</span><span class=\"cm\"> tactic 'aesop' failed, failed to prove the goal. Some goals were not explored because the</span>\n<span class=\"cm\">  maximum rule application depth (30) was reached. Set option 'maxRuleApplicationDepth' to</span>\n<span class=\"cm\">  increase the limit. -/</span>\n</code></pre></div>\n<p>I have to switch to <code>apply_rules [continuous_fst, continuous_subtype_val, Continuous.comp]</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/3b46e01bec77ccc8d422fe7355bdd93553177faf/Mathlib/Topology/SeparatedMap.lean#L104\">here</a>.</p>",
        "id": 398408593,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698208353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Regression.20in.20continuity/near/398392937\">said</a>:</p>\n<blockquote>\n<p>the problem seems to be that the <code>safe</code> version does not fire, but the <code>norm</code>-one does and the standard way of adding continuity lemmas is through <code>apply safe</code>.</p>\n</blockquote>\n<p>This is just a bandaid; please don't start adding continuity rules as <code>norm</code> rules. The underlying issue is:</p>\n<ul>\n<li>Aesop runs <code>apply</code> rules with <code>default</code> transparency.</li>\n<li>Usually, this is somewhat hidden because Aesop's index selects rules which match the goal at <code>reducible</code> transparency.</li>\n<li>The index doesn't seem to work well for <code>continuity</code> rules, in the sense that it just returns any rule matching <code>Continuous _</code> (making it quite pointless <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span>).</li>\n<li>As a result, <code>Continuous.mul</code> is applied to the goal, since it is defeq to a multiplication after unfolding <code>npowRec</code>. <code>Continuous.mul</code> also happens to fire before <code>Continuous.pow</code>, so the latter doesn't get a chance any more.</li>\n</ul>\n<p>The correct fix is to make sure that <code>continuity</code> rules are only applied at <code>reducible</code> transparency:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiffDef</span>\n\n<span class=\"n\">erase_aesop_rules</span> <span class=\"o\">[</span><span class=\"n\">npowRec</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">]),</span> <span class=\"n\">Continuous.mul</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">])]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">transparency</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"n\">reducible</span><span class=\"o\">))]</span> <span class=\"n\">Continuous.pow</span> <span class=\"n\">Continuous.mul</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>\n<p>(I learned all this from <code>set_option trace.aesop true</code>.)</p>",
        "id": 398438012,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698223120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Regression.20in.20continuity/near/398438012\">said</a>:</p>\n<blockquote>\n<p>The index doesn't seem to work well for <code>continuity</code> rules, in the sense that it just returns any rule matching <code>Continuous _</code> (making it quite pointless <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span>).</p>\n</blockquote>\n<p>This is a limitation of <code>DiscrTree</code> as currently implemented: it doesn't index lambdas, treating them as wildcards.</p>",
        "id": 398442347,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698224691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Regression.20in.20continuity/near/398408593\">said</a>:</p>\n<blockquote>\n<p>I'm puzzled why the first two succeeds but the last fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousOn</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span><span class=\"o\">}</span> <span class=\"bp\">↦</span> <span class=\"n\">p.val.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span>\n<span class=\"c\">/-</span><span class=\"cm\"> tactic 'aesop' failed, failed to prove the goal. Some goals were not explored because the</span>\n<span class=\"cm\">  maximum rule application depth (30) was reached. Set option 'maxRuleApplicationDepth' to</span>\n<span class=\"cm\">  increase the limit. -/</span>\n</code></pre></div>\n<p>I have to switch to <code>apply_rules [continuous_fst, continuous_subtype_val, Continuous.comp]</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/3b46e01bec77ccc8d422fe7355bdd93553177faf/Mathlib/Topology/SeparatedMap.lean#L104\">here</a>.</p>\n</blockquote>\n<p>The issue here is that <code>simp</code> rewrites the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span> <span class=\"o\">})</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"n\">x</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span> <span class=\"o\">})</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n   <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span> <span class=\"o\">})</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.2</span>\n</code></pre></div>\n<p>and from there Aesop doesn't do anything useful any more. So Aesop with <code>simp</code> disabled solves it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span><span class=\"o\">}</span> <span class=\"bp\">↦</span> <span class=\"n\">p.val.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">simp_options</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">enabled</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>Possible fixes:</p>\n<ul>\n<li>Disable the <code>simp</code> rule in <code>continuity</code> (also good for performance).</li>\n<li>Erase this particular <code>simp</code> lemma.</li>\n<li>Teach Aesop how to make progress from the 'simplified' goal.</li>\n</ul>",
        "id": 398447779,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698226765
    },
    {
        "content": "<p>Without trying any of these, my feeling is that removing the simp rule from <code>continuity</code> is the most sensible. It brings <code>continuity</code> back to its old method (which seemed to work reasonably well) of trying continuity rules until you can't any more, it's a performance boost as you say, and it makes the <code>continuity</code> tactic more modular.</p>",
        "id": 398584548,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698283216
    },
    {
        "content": "<p>I am testing out these changes right now, let's hope that they don't break anything major.</p>",
        "id": 398584640,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1698283362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">Adomas Baliuka</span> has marked this topic as resolved.</p>",
        "id": 398584964,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698283738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"638715\">Adomas Baliuka</span> has marked this topic as unresolved.</p>",
        "id": 398584970,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698283743
    },
    {
        "content": "<p>Sorry, I misclicked... (Wanted to mark the topic to get notifications) </p>\n<p>To add some content to the useless apology, the idea of removing the <code>simp</code> rule also suggested itself while working on a new <code>differentiability</code> tactic modeled after <code>continuity</code>. Since I probably won't get any more comments on the PR or the previous topics discussing it: does anyone have insights into how much the two tactics should be the same? Is there any significant conceptual difference I should keep in mind?</p>",
        "id": 398585223,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698284013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"638715\">@Adomas Baliuka</span> can you link to the PR please?</p>",
        "id": 398587798,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698286221
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7892\">PR, WIP</a>. I asked about it <a href=\"#narrow/stream/113489-new-members/topic/Differentiable.20because.20composition.20of.20differentiables/near/398283039\">here</a>. It's basically exactly like <code>continuity</code> (maybe it should be slightly different) but it's slow (often needs heartbeat increase) and I'm confused by some of the behaviours, need to keep looking into it.</p>",
        "id": 398589758,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1698287286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> let me know if you'd like me to take a look at this.</p>",
        "id": 400023714,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698961695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Regression.20in.20continuity/near/398442347\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Regression.20in.20continuity/near/398438012\">said</a>:</p>\n<blockquote>\n<p>The index doesn't seem to work well for <code>continuity</code> rules, in the sense that it just returns any rule matching <code>Continuous _</code> (making it quite pointless <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span>).</p>\n</blockquote>\n<p>This is a limitation of <code>DiscrTree</code> as currently implemented: it doesn't index lambdas, treating them as wildcards.</p>\n</blockquote>\n<p>Is there a tracking issue for this?</p>",
        "id": 400853067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699410120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Regression.20in.20continuity/near/400853067\">said</a>:</p>\n<blockquote>\n<p>Is there a tracking issue for this?</p>\n</blockquote>\n<p>I would be very interested in this! In the tactic I'm writing I stopped using <code>DiscrTree</code> for this exact reason as it was returning too many candidates.</p>\n<p>Does anybody know how to properly index lambdas? At least in principle, I would be happy to implement it.</p>\n<p>What I'm concerned is how to properly handle eta reduction such that <code>Continuous fun x =&gt; Real.exp x</code> matches  <code>Continuous fun x =&gt; Real.exp (f x)</code> with <code>f = fun x =&gt; x</code> and <code>Continuous fun x =&gt; exp x + x</code> matches <code>Continuous fun x =&gt; (f x) + (g x)</code>. Or what to do when there are move bound variables and they appear in the head of the lambda body like <code>Continuous fun array i =&gt; array (i+1)</code>.</p>",
        "id": 400950383,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1699452205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Regression.20in.20continuity/near/400853067\">said</a>:</p>\n<blockquote>\n<p>Is there a tracking issue for this?</p>\n</blockquote>\n<p>I have created <a href=\"#narrow/stream/341532-lean4-dev/topic/Indexing.20lambdas.20with.20.60DiscrTree.60\">thread</a> for it on <a class=\"stream\" data-stream-id=\"341532\" href=\"/#narrow/stream/341532-lean4-dev\">#lean4 dev</a> . If it is really considered an issue I can convert it into github  issue.</p>",
        "id": 401220286,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1699557185
    }
]