[
    {
        "content": "<p>Do we have a policy about using new style <code>induction</code> in mathlib4? I just wrote <a href=\"https://github.com/leanprover-community/mathlib4/commit/609f55046d748c758ddbac56f2a376947ff78e37\">https://github.com/leanprover-community/mathlib4/commit/609f55046d748c758ddbac56f2a376947ff78e37</a> on my not yet ready <a href=\"#narrow/stream/287929-mathlib4/topic/Labelling.20abuse/near/351604648\">but merged anyway</a> PR. Should we spend time on such edits?</p>",
        "id": 351606155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682079554
    },
    {
        "content": "<p>I think it probably falls under the general policy I've assumed which is \"don't cleanup proofs unless they're already non-trivially broken\"</p>",
        "id": 351606541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682079638
    },
    {
        "content": "<p>I certainly think we want to use new-style induction as much as possible, but I don't think the port is the necessarily the time to make the switch</p>",
        "id": 351606713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682079675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/induction.20in.20mathlib4/near/351606713\">said</a>:</p>\n<blockquote>\n<p>I certainly think we want to use new-style induction as much as possible, but I don't think the port is the necessarily the time to make the switch</p>\n</blockquote>\n<p>I don't understand that bit. Switching doesn't make anything more difficult downstream, right? I would understand that we don't <em>enforce</em> switching during the port.</p>",
        "id": 351610623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682080551
    },
    {
        "content": "<p>Switching makes porting PRs have bigger diffs, which makes them harder to review. It also makes it hard to forward-port changes, since the diff won't match up as well.</p>",
        "id": 351611511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682080741
    },
    {
        "content": "<p>I think forward ports might be the strongest argument at this point, yeah</p>",
        "id": 351611738,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682080787
    },
    {
        "content": "<p>I think this yet another argument in favor of avoiding anything that creates a forward-port obligation.</p>",
        "id": 351612363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682080920
    },
    {
        "content": "<p>I think \"keep porting PRs easy to review\" is a good reason too</p>",
        "id": 351616163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682081692
    },
    {
        "content": "<p>The shorter porting PRs are (compared to the mathport output) the quicker the review and the sooner we finish mathlib4</p>",
        "id": 351616328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682081727
    },
    {
        "content": "<p>Also keep in mind that, like the function arrow switch, upgrading induction proofs to the new style is something that can be done fully automatically post-port, so doing it early is likely a waste of effort</p>",
        "id": 351622715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682082969
    },
    {
        "content": "<p>(Tools for making large-scale syntactic transformations to lean code will come eventually, but they are not a high priority right now and it will be easier to think about this stuff after the port)</p>",
        "id": 351623223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682083078
    },
    {
        "content": "<p>Why isn't it done by mathport if it can be made fully automatically? This is a honest naive question, I'm not complaining about anything.</p>",
        "id": 351623333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682083092
    },
    {
        "content": "<p>It can only be done knowing the elaborated context</p>",
        "id": 351623444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682083115
    },
    {
        "content": "<p>which means it can be done by e.g. a linter but not by mathport which sees syntax only</p>",
        "id": 351623520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682083134
    },
    {
        "content": "<p>basically it relies on the human input to fix all the red squiggles before it can be applied</p>",
        "id": 351623714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682083171
    },
    {
        "content": "<p>Ok, makes sense. Then I'll definitely refrain from doing this in future porting PRs.</p>",
        "id": 351623727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682083175
    },
    {
        "content": "<p>Speaking of priorities, it would be nice to prioritize restoring the structure skeleton code action and get a <code>induction</code> code action, because writing the layout of those new style <code>induction</code> proofs by hand is really tedious and feels like we are working for the computer instead of having the computer work for us.</p>",
        "id": 351624192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682083269
    }
]