[
    {
        "content": "<p>Is there an intention behind both <code>0 &lt; x</code> and <code>1 &lt;= x</code> being simp-normal? It seems a bit awkward to duplicate defeq lemmas like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">count_pos</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">count</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">count</span><span class=\"o\">,</span> <span class=\"n\">countp_pos</span><span class=\"o\">,</span> <span class=\"n\">beq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">one_le_count_iff_mem</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">count</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">count_pos</span>\n</code></pre></div>",
        "id": 325207570,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675269877
    },
    {
        "content": "<p>(I searched a tiny bit in history for discussion but didn't come across any -- if this is a duplicate thread let me know)</p>",
        "id": 325207796,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675269931
    },
    {
        "content": "<p>I guess I'm also curious about <code>¬x = 0</code>, since I'd expect its simp normal form to also be <code>0 &lt; x</code>, but it might be an entirely different case since it's not defeq to the other two</p>",
        "id": 325210054,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675270502
    },
    {
        "content": "<p>Should I just try marking those lemmas simp and see what the fallout is? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 325210147,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675270524
    },
    {
        "content": "<p>Certainly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x \\ne 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> vs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">0 &lt; x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> has been discussed at length before</p>",
        "id": 325220531,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675271971
    },
    {
        "content": "<p>The conclusion <a href=\"#narrow/stream/116395-maths/topic/Hypotheses.2Fconclusions.20for.20strictly.20positive.20natural.20numbers\">here</a> seemed to be that we should prefer <code>Ne 0 x</code>in hypotheses and <code>0 &lt; x</code> in conclusions (since for arbitrary preorders this gives the strongest statement). But there was no discussion of adding a <code>simp</code> lemma in the general case (since it doesn't hold).</p>",
        "id": 325222957,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675272586
    },
    {
        "content": "<p>I don't think a simp lemma is likely to be a good idea.</p>",
        "id": 325223532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675272722
    },
    {
        "content": "<p>I think adding one right now is definitely a very bad idea</p>",
        "id": 325223580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675272730
    },
    {
        "content": "<p>Definitely. I'm currently figuring out whether to include both of these in Std or just one. Either way both will remain in mathlib for the foreseeable future.</p>\n<p>But if we have a (long-term) plan to move to one or the other I'd rather Std just include the \"preferred\" one</p>",
        "id": 325223767,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675272775
    },
    {
        "content": "<p>(And it seems like <code>0 &lt; x</code> should be the preferred form? Since it's the \"strongest\" from the view of a preorder?)</p>",
        "id": 325224149,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675272875
    },
    {
        "content": "<p>Given that there is no simp lemma in either direction (for the reasons Reid stated), I would expect to have <em>both</em> versions of that count lemma as simp lemmas.</p>",
        "id": 325225595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675273256
    },
    {
        "content": "<p>normally simp lemmas exist to get you \"out\" of the bad form and into the good form so it is not unusual to have simp lemmas from slightly weird representations into a more canonical one</p>",
        "id": 325225952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675273349
    },
    {
        "content": "<p>Hm, okay. So having a simp lemma in any direction for any of these three forms in Std is a bad idea even if we set aside mathlib's conflicting usage?</p>",
        "id": 325226875,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675273570
    },
    {
        "content": "<p>I can see that in the case of <code>Ne x 0</code> since there are many lemmas stated in that form generalized across all types, so if a hypothesis was simplified from <code>Ne x 0</code> to <code>0 &lt; x</code> then simp would not find <code>Ne x 0</code>.</p>",
        "id": 325227323,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675273685
    }
]