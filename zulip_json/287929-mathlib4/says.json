[
    {
        "content": "<p>Currently the <code>says</code> combinator shows the following text in a hover tooltip:</p>\n<blockquote>\n<p>A sequence of tactics in brackets, or a delimiter-free indented sequence of tactics. Delimiter-free indentation is determined by the first tactic of the sequence.</p>\n</blockquote>\n<p>Is it easy to change this to something a bit more appropriate?</p>",
        "id": 397826748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697874512
    },
    {
        "content": "<p>Can you give an example usage? I can't seem to find it<br>\nBut usually the \"fix\" is to add documentation to the operator, see <code>&lt;;&gt;</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`tac &lt;;&gt; tac'` runs `tac` on the main goal and `tac'` on each produced goal,</span>\n<span class=\"sd\">concatenating all goals produced by `tac'`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\" &lt;;&gt; \"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"o\">:</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n  <span class=\"n\">focus</span>\n    <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">tactic</span>\n    <span class=\"c1\">-- annotate token with state after executing `x`</span>\n    <span class=\"n\">with_annotate_state</span> <span class=\"bp\">$</span><span class=\"n\">tk</span> <span class=\"n\">skip</span>\n    <span class=\"n\">all_goals</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So that if you hover over <code>&lt;;&gt;</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">âˆ§</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>There is documentation</p>",
        "id": 397829644,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697877265
    },
    {
        "content": "<p>I guess we need to add such a docstring somewhere in <code>Mathlib/Tactic/Says.lean</code></p>",
        "id": 397830881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697878431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/7818\">#7818</a></p>",
        "id": 397831183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697878705
    },
    {
        "content": "<p>Please change the doc-string to whatever you like!</p>",
        "id": 397831189,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697878714
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 397832287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697879761
    }
]