[
    {
        "content": "<p>Whether or not there is a pretty printer option, it would be nice if there was a post-tactic cleanup hook. Imagine you could tell Lean to run <code>dsimp only at *</code> after every tactic completes. Then students wouldn't need to see beta reduceable lambdas, they wouldn't be frustrated by linarith not working when it obviously should, and no one would have to make their own copies of every tactic.</p>",
        "id": 351822692,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682154781
    },
    {
        "content": "<p>I was thinking, could it be as simple as (famous last words <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>) overriding the tactic block macro so that it inserts those <code>dsimp</code> after each tactic call?</p>",
        "id": 351823432,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682154966
    },
    {
        "content": "<p>For technical reasons I don't think that would be convenient for teaching, since <code>dsimp only</code> resolves numeric goals about Nats.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>See <a href=\"https://github.com/leanprover/lean4/pull/1994\">lean4#1994</a>.</p>",
        "id": 351823552,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682154997
    },
    {
        "content": "<p><code>dsimp</code> has extensive configuration options, though. You can instruct it to only beta-reduce.</p>",
        "id": 351823716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682155034
    },
    {
        "content": "<p>Oh, what's that option?</p>",
        "id": 351823810,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682155057
    },
    {
        "content": "<p>.. unless those numeric goals also are beta reduction? I would think not, and instead come from the <code>decide</code> call.</p>",
        "id": 351823874,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682155075
    },
    {
        "content": "<p><code>dsimp</code> doesn't call <code>decide</code> any more.</p>",
        "id": 351823974,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682155090
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1888\">lean4#1888</a></p>",
        "id": 351824095,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682155118
    },
    {
        "content": "<p>Hmm, puzzling. Let me do some trace-gazing.</p>",
        "id": 351824419,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682155187
    },
    {
        "content": "<p>Okay, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Simp.Config#doc\">docs4#Lean.Meta.Simp.Config</a> is the relevant declaration. I wish it was easier to find <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 351825814,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682155465
    },
    {
        "content": "<p>I assume <code>simp</code> and <code>dsimp</code> both use this as configuration? Not so sure, actually...</p>",
        "id": 351826038,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682155518
    },
    {
        "content": "<p><code>dsimp only</code> is sometimes harmful if you have something like <code>(fun x =&gt; 1 * x) '' s</code>, which in lean3 it would reduce to <code>has_mul.mul 1 '' s</code></p>",
        "id": 351826165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682155554
    },
    {
        "content": "<p>Ahah! There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.DSimp.Config#doc\">docs4#Lean.Meta.DSimp.Config</a></p>",
        "id": 351826565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682155638
    },
    {
        "content": "<p>This looks like it's above my paygrade, but here's my attempt</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">heatherConfig</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Meta.DSimp.Config</span> <span class=\"n\">where</span>\n  <span class=\"n\">zeta</span>       <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">beta</span>       <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">eta</span>        <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">etaStruct</span>  <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n  <span class=\"n\">iota</span>       <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">proj</span>       <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">decide</span>     <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"n\">autoUnfold</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"n\">heatherConfig</span><span class=\"o\">)</span>  <span class=\"c1\">-- works??</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"n\">heatherConfig</span><span class=\"o\">)</span> <span class=\"c1\">-- works??</span>\n</code></pre></div>",
        "id": 351827896,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682155957
    },
    {
        "content": "<p>I believe the point is what I wrote up in <a href=\"https://github.com/leanprover/lean4/pull/1994\">lean4#1994</a>, as I linked before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>also works.</p>",
        "id": 351828334,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682156051
    },
    {
        "content": "<p>Here's a previous discussion:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/use/near/317444788\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/use/near/317444788</a></p>",
        "id": 351828462,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682156082
    },
    {
        "content": "<p>Does <code>dsimp</code> try <code>rfl</code>?</p>",
        "id": 351828811,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682156152
    },
    {
        "content": "<p>17 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/pp.2Ebeta\">#mathlib4 &gt; pp.beta</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 351831081,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682156741
    },
    {
        "content": "<p>I wouldn't be surprised if <code>dsimp</code> tried <code>with_reducible rfl</code>.  But the real reason I suspect it's the same issue is that it's again a Nat-only issue.</p>",
        "id": 351926517,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682186572
    },
    {
        "content": "<p>Here's a <code>beta_reduce</code> tactic that definitely only does beta reduction and nothing else:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">beta_reduce</span><span class=\"o\">)</span> <span class=\"s2\">\"beta_reduce\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">Core.betaReduce</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">changeLocalDecl'</span> <span class=\"n\">h</span> <span class=\"n\">ty</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">Core.betaReduce</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"n\">ty</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"beta_reduce failed\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">())</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 351930164,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682187597
    },
    {
        "content": "<p>I haven't found where this can be hooked into anything in a general way though...</p>",
        "id": 351930337,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682187634
    },
    {
        "content": "<p>This lets you do <code>beta_reduce at *</code></p>",
        "id": 351930467,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682187667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20only.20for.20universal.20cleanup/near/351930337\">said</a>:</p>\n<blockquote>\n<p>I haven't found where this can be hooked into anything in a general way though...</p>\n</blockquote>\n<p>If you do find it, this seems like a good solution.</p>",
        "id": 351931360,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682187918
    },
    {
        "content": "<p>Since we're here, I figured it would be worth abstracting that code a bit to be able to quickly define tactics for other kinds of transformations, for example <code>whnf</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myeq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myeq</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">whnf</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--import Mathlib.Lean.Expr.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/-- `f` is some function that transforms a type to a defeq type. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">TacticM</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.location</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">changeLocalDecl'</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">))</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"{name} failed\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">beta_reduce</span><span class=\"o\">)</span> <span class=\"s2\">\"beta_reduce\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"s2\">\"beta_reduce\"</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">loc</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">whnf</span><span class=\"o\">)</span> <span class=\"s2\">\"whnf\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">whnf</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"s2\">\"whnf\"</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Meta.whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">())</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myeq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myeq</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">whnf</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 351933804,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682188621
    },
    {
        "content": "<p>I have extended <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s code to implement <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>'s suggestion of modifying the <code>by</code> tactic to perform a beta-reduction after each tactic call.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--import Mathlib.Lean.Expr.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"sd\">/-- `f` is some function that transforms a type to a defeq type. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">TacticM</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.location</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">changeLocalDecl</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">))</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"{name} failed\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">beta_reduce</span><span class=\"o\">)</span> <span class=\"s2\">\"beta_reduce\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"s2\">\"beta_reduce\"</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">loc</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">whnf</span><span class=\"o\">)</span> <span class=\"s2\">\"whnf\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">whnf</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"s2\">\"whnf\"</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Meta.whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">())</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myeq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myeq</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">whnf</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Array</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">interleave</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">as</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"n\">x</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Array</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"c1\">-- a clone of the `by` tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">byTactic'</span><span class=\"o\">)</span> <span class=\"s2\">\"by' \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[term_elab byTactic']</span> <span class=\"kd\">def</span> <span class=\"n\">elabByTactic'</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">expectedType</span> <span class=\"n\">MetavarKind.syntheticOpaque</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">ref</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"n\">registerSyntheticMVar</span> <span class=\"n\">ref</span> <span class=\"n\">mvarId</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SyntheticMVarKind.tactic</span> <span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveContext</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">mvar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">tryPostpone</span>\n    <span class=\"n\">throwError</span> <span class=\"o\">(</span><span class=\"s2\">\"invalid 'by</span><span class=\"se\">\\'</span><span class=\"s2\">' tactic, expected type has not been provided\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tacs'</span> <span class=\"o\">:=</span> <span class=\"n\">tacs.interleave</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span><span class=\"bp\">'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs'</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myeq</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">whnf</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This almost does what is needed - in the final example, the hypothesis is automatically simplified to <code>x = 3</code> when the cursor is placed before <code>rw [h]</code>. However, I don't know how to make the change happen immediately, instead of on the next line.</p>",
        "id": 352019355,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682239627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> Nice; maybe there's a way to tag the <code>beta_reduce at *</code> tactic with a fake source position so that the generated info is available where you'd expect.</p>\n<p>I wish overriding <code>by</code> were a complete solution. This doesn't help with <code>·</code> tactic blocks, or blocks of tactics that appear inside other tactics (like structured <code>cases</code> or <code>induction</code>) unfortunately, since those call <code>evalTactic</code> themselves directly without going through <code>by</code> syntax.</p>",
        "id": 352020393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682240027
    },
    {
        "content": "<p>If there were a way to override <code>evalTactic</code> at runtime then that would be a clear place to insert a hook... (Lean 3 would let you do this, but since Lean 4 is compiled this doesn't seem to be possible.)</p>\n<p>If <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/Basic.lean#L142\">evalTactic</a> started with a call to some user-defined hook (ideally, something to wrap the whole evaluation, like what <code>profileitM</code> is doing), then we could insert this <code>beta_reduce</code> cleanup code easily.</p>",
        "id": 352021613,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682240460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I think it might be still possible to get this to work by overriding the <code>by</code> tactic block. The problem you mentioned seems to arise precisely when a tactic uses a <code>tacticSeq</code> as a part of its syntax. I have been working on intercepting the <code>by</code> tactic for unrelated reasons (my code is <a href=\"https://github.com/0art0/mathlib4/blob/c308c0337fbbada6bef25cef00f018c0d4e526e0/TacticExtraction/TacticExtraction.lean#L157\">here</a>), and I think I might be able to adapt this to produce a \"nested\" version of the code I posted above.</p>",
        "id": 352024884,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682241753
    },
    {
        "content": "<p>I wonder if we could take the raw <code>Syntax</code>, scan through the whole thing looking for <code>tacticSeq</code>, and then intersperse whatever we want between everything. That might save you some work in your <code>traceTacticSnap</code> function, so you don't have to parse every piece of tactic syntax yourself. On the other hand, it might not be 100% accurate to do what I'm suggesting.</p>",
        "id": 352025926,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682242201
    },
    {
        "content": "<p>That seems like a sound approach that should work in general - even with completely new tactics that use <code>tacticSeq</code> as a part of their syntax. I don't mind doing a case-by-case analysis of the tactic syntax for now though, since there are not too many tactics in Lean core and <code>mathlib4</code> that use <code>tacticSeq</code>.  I'd like to implement try your approach too, since it is probably more robust and I'll get to learn how to do a deep traversal of a syntax tree.</p>",
        "id": 352027536,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682242828
    },
    {
        "content": "<p><code>rw [a, b, c]</code> is morally <code>rw a, rw b, rw c</code>, so I'm wondering whether we should have somewhere in the tactic framework a \"tactic clock\" that each tactic is free to tick when a tactic call \"morally\" happened. So for example every tactic would tick at least once, and <code>rw [a, b, c]</code> would tick thrice. Then we could run the tactic hook at every tactic tick.</p>",
        "id": 352028537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682243207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <code>rw</code> is implemented as a macro that expands out to three <code>rewrite</code> tactics in that case, so that should happen automatically (if I understand it correctly -- <strong>edit</strong> I didn't, it doesn't work this way).</p>",
        "id": 352029761,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682243749
    },
    {
        "content": "<p>Here is a version of my code that works for \"nested\" tactic sequences:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--import Mathlib.Lean.Expr.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"sd\">/-- `f` is some function that transforms a type to a defeq type. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">TacticM</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.location</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">changeLocalDecl</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">))</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"{name} failed\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">beta_reduce</span><span class=\"o\">)</span> <span class=\"s2\">\"beta_reduce\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"s2\">\"beta_reduce\"</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">loc</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">whnf</span><span class=\"o\">)</span> <span class=\"s2\">\"whnf\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">whnf</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"s2\">\"whnf\"</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Meta.whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">())</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myeq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myeq</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">whnf</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Array</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">interleave</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">as</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"n\">x</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Array</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">reduce_and_eval_tac</span><span class=\"o\">)</span> <span class=\"s2\">\"reduce_and_eval_tac\"</span> <span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">reduce_seq</span><span class=\"o\">)</span> <span class=\"s2\">\"reduce_seq\"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tacs'</span> <span class=\"bp\">←</span> <span class=\"n\">tacs.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">tac</span> <span class=\"bp\">↦</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">reduce_and_eval_tac</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs'</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matchAltTac</span> <span class=\"o\">:=</span> <span class=\"n\">Term.matchAlt</span> <span class=\"o\">(</span><span class=\"n\">rhsParser</span> <span class=\"o\">:=</span> <span class=\"n\">matchRhs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[tactic reduce_and_eval_tac]</span>\n<span class=\"kd\">def</span> <span class=\"n\">reduceAndEvalTac</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">reduce_and_eval_tac</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">tac</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">focus</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">focus</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">·</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">·</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">})</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">hs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">hs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">hs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">hs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">induction</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span>  <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">generalizing</span> <span class=\"bp\">$</span><span class=\"n\">gs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">is'</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">``</span><span class=\"n\">inductionAlt</span> <span class=\"bp\">←</span>\n        <span class=\"n\">is.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">inductionAlt</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">il</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">inductionAlt</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">il</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span>\n          <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">induction</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span>  <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">generalizing</span> <span class=\"bp\">$</span><span class=\"n\">gs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">is'</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">is'</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">``</span><span class=\"n\">inductionAlt</span> <span class=\"bp\">←</span>\n        <span class=\"n\">is.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">inductionAlt</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">il</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">inductionAlt</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">il</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span>\n          <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">is'</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">gen</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">motive</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">discrs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">alts</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">alts'</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">``</span><span class=\"n\">matchAlt</span> <span class=\"bp\">←</span>\n        <span class=\"n\">alts.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltTac</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">pats</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n              <span class=\"k\">let</span> <span class=\"n\">alt</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltTac</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">pats</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span>\n              <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">alt</span><span class=\"o\">⟩</span>\n          <span class=\"bp\">|</span> <span class=\"n\">alt</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">alt</span><span class=\"o\">⟩</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">gen</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">motive</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">discrs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">alts'</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n      <span class=\"n\">evalTactic</span> <span class=\"n\">tac</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span><span class=\"s2\">\"Invalid syntax for `eval_tac_and_reduce`.\"</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- a clone of the `by` tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">byTactic'</span><span class=\"o\">)</span> <span class=\"s2\">\"by' \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[term_elab byTactic']</span> <span class=\"kd\">def</span> <span class=\"n\">elabByTactic'</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">expectedType</span> <span class=\"n\">MetavarKind.syntheticOpaque</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">ref</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"n\">registerSyntheticMVar</span> <span class=\"n\">ref</span> <span class=\"n\">mvarId</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SyntheticMVarKind.tactic</span> <span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveContext</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">mvar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">tryPostpone</span>\n    <span class=\"n\">throwError</span> <span class=\"o\">(</span><span class=\"s2\">\"invalid 'by</span><span class=\"se\">\\'</span><span class=\"s2\">' tactic, expected type has not been provided\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span><span class=\"bp\">'</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unreachableTactic</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myeq</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">whnf</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 352030473,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682244042
    },
    {
        "content": "<p>The rough idea is that I have two new tactics - <code>reduce_and_eval_tactic</code> and <code>reduce_seq</code>. The first is meant to run <code>beta_reduce at *</code> and then evaluate the given tactic, while the second is meant to modify a <code>tacticSeq</code> to perform the intermediate beta-reduction. The behaviour of <code>reduce_and_eval_tac</code> for   <code>·</code> tactic blocks, <code>induction</code> applications, and a few other cases is handled in a special way by making a call to <code>reduce_seq</code>. My code covers most of the main tactics in Lean4 and <code>mathlib4</code> that use <code>tacticSeq</code>; there are a few like <code>classical</code> and <code>permute_goals</code> that I have excluded for now.</p>",
        "id": 352031495,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682244325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I have modified my code to perform a beta-reduction after each rewrite:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--import Mathlib.Lean.Expr.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"sd\">/-- `f` is some function that transforms a type to a defeq type. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">TacticM</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.location</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">changeLocalDecl</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">))</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">newGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">newGoal</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"{name} failed\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">beta_reduce</span><span class=\"o\">)</span> <span class=\"s2\">\"beta_reduce\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"s2\">\"beta_reduce\"</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">loc</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">whnf</span><span class=\"o\">)</span> <span class=\"s2\">\"whnf\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">whnf</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">mkTypeTransformerTactic</span> <span class=\"s2\">\"whnf\"</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Meta.whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">())</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myeq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myeq</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">whnf</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n  <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Array</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">interleave</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">as</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"n\">x</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Array</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">reduce_and_eval_tac</span><span class=\"o\">)</span> <span class=\"s2\">\"reduce_and_eval_tac\"</span> <span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">reduce_seq</span><span class=\"o\">)</span> <span class=\"s2\">\"reduce_seq\"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">tacs'</span> <span class=\"bp\">←</span> <span class=\"n\">tacs.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">tac</span> <span class=\"bp\">↦</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">reduce_and_eval_tac</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs'</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matchAltTac</span> <span class=\"o\">:=</span> <span class=\"n\">Term.matchAlt</span> <span class=\"o\">(</span><span class=\"n\">rhsParser</span> <span class=\"o\">:=</span> <span class=\"n\">matchRhs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[tactic reduce_and_eval_tac]</span>\n<span class=\"kd\">def</span> <span class=\"n\">reduceAndEvalTac</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">reduce_and_eval_tac</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">tac</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">focus</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">focus</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">·</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">·</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">})</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">hs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">hs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">hs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">case'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">hs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cfg</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">rs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n        <span class=\"n\">for</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.rwRule</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n          <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cfg</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n          <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">rs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n        <span class=\"n\">for</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.rwRule</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n          <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n          <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">rs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n      <span class=\"n\">for</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.rwRule</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n          <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">induction</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span>  <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">generalizing</span> <span class=\"bp\">$</span><span class=\"n\">gs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">is'</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">``</span><span class=\"n\">inductionAlt</span> <span class=\"bp\">←</span>\n        <span class=\"n\">is.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">inductionAlt</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">il</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">inductionAlt</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">il</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span>\n          <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">induction</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span>  <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">generalizing</span> <span class=\"bp\">$</span><span class=\"n\">gs</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">is'</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">is</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">is'</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">``</span><span class=\"n\">inductionAlt</span> <span class=\"bp\">←</span>\n        <span class=\"n\">is.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">inductionAlt</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">il</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">inductionAlt</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">il</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span>\n          <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">cases</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">is'</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">gen</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">motive</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">discrs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">alts</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">alts'</span> <span class=\"o\">:</span> <span class=\"n\">TSyntaxArray</span> <span class=\"bp\">``</span><span class=\"n\">matchAlt</span> <span class=\"bp\">←</span>\n        <span class=\"n\">alts.mapM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltTac</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">pats</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n              <span class=\"k\">let</span> <span class=\"n\">alt</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltTac</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">pats</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">|*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">rhs</span><span class=\"o\">)</span>\n              <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">alt</span><span class=\"o\">⟩</span>\n          <span class=\"bp\">|</span> <span class=\"n\">alt</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">alt</span><span class=\"o\">⟩</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">gen</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">motive</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">discrs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">alts'</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n      <span class=\"n\">evalTactic</span> <span class=\"n\">tac</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"n\">evalTactic</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">beta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span><span class=\"s2\">\"Invalid syntax for `eval_tac_and_reduce`.\"</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- a clone of the `by` tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">byTactic'</span><span class=\"o\">)</span> <span class=\"s2\">\"by' \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[term_elab byTactic']</span> <span class=\"kd\">def</span> <span class=\"n\">elabByTactic'</span> <span class=\"o\">:</span> <span class=\"n\">TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">expectedType</span> <span class=\"n\">MetavarKind.syntheticOpaque</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">ref</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"n\">registerSyntheticMVar</span> <span class=\"n\">ref</span> <span class=\"n\">mvarId</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SyntheticMVarKind.tactic</span> <span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveContext</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">mvar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">tryPostpone</span>\n    <span class=\"n\">throwError</span> <span class=\"o\">(</span><span class=\"s2\">\"invalid 'by</span><span class=\"se\">\\'</span><span class=\"s2\">' tactic, expected type has not been provided\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span><span class=\"bp\">'</span> <span class=\"n\">reduce_seq</span> <span class=\"bp\">$</span><span class=\"n\">tacs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unreachableTactic</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myeq</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">whnf</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 352033493,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682245129
    },
    {
        "content": "<p>This is correct only if the substitution <code>rw [a, b, c]</code> -&gt; <code>rw [a]; rw [b]; rw [c]</code> is valid in Lean.</p>",
        "id": 352033601,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682245176
    },
    {
        "content": "<p>It's not valid if <code>rw [a, b]</code> already gets the goal in a state where the implicit <code>rfl</code> solves it - in that case <code>rw [c]</code> separately will fail with \"no goals\"</p>",
        "id": 352039873,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682247542
    },
    {
        "content": "<p>Here's another implementation that overrides a number of sequencing forms and doesn't peer into too much syntax, so it's fairly short. It's not able to do anything between <code>rw</code> steps though (I was wrong about how <code>rw</code> works -- handles inserting tactic info step by step itself, and it doesn't macro expand into anything).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/-- Runs `f` on every local variable and the target. `f` is allowed to fail, and if it</span>\n<span class=\"sd\">does that local variable or target is not changed. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">transformAllTypes</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">mvarId</span>\n  <span class=\"n\">for</span> <span class=\"n\">fvarId</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lctx.getFVarIds.reverse</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lctx.get</span><span class=\"bp\">!</span> <span class=\"n\">fvarId</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n      <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.changeLocalDecl'</span> <span class=\"n\">fvarId</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.change</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">))</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">return</span> <span class=\"n\">mvarId</span>\n\n<span class=\"sd\">/-- Beta reduce all local variables and targets across all goals. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">betaReduceEverything</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">getGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs'</span> <span class=\"bp\">←</span> <span class=\"n\">gs.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">transformAllTypes</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n  <span class=\"n\">setGoals</span> <span class=\"n\">gs'</span>\n\n<span class=\"sd\">/-- `tactic_wrapper` is inserted around every tactic in a tactic sequence.</span>\n<span class=\"sd\">Implement this tactic to alter the behavior of the tactic processor. -/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">wrapper</span><span class=\"o\">)</span> <span class=\"s2\">\"tactic_wrapper \"</span> <span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sepByTacticWrapper</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span> <span class=\"bp\">|</span> <span class=\"n\">throwUnsupportedSyntax</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">arg</span> <span class=\"k\">in</span> <span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">args.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">arg.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">wrapper</span> <span class=\"k\">then</span>\n        <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"n\">args'.push</span> <span class=\"n\">arg</span>\n      <span class=\"k\">else</span>\n       <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"n\">args'.push</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withRef</span> <span class=\"n\">arg</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tactic_wrapper</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">arg</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">raw</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"n\">args'.push</span> <span class=\"n\">arg</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args'</span>\n\n<span class=\"sd\">/-- Inserts a `tactic_wrapper` around every tactic in a tactic sequence.</span>\n\n<span class=\"sd\">Different sequence-like tactics store their tactic sequences in different syntax positions. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">transformTacticSeq</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span> <span class=\"bp\">|</span> <span class=\"n\">throwUnsupportedSyntax</span>\n  <span class=\"k\">let</span> <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"n\">args.setD</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">sepByTacticWrapper</span> <span class=\"o\">(</span><span class=\"n\">args.getD</span> <span class=\"n\">pos</span> <span class=\"n\">default</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args'</span>\n\n<span class=\"kd\">@[tactic tacticSeq1Indented]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTacticSeq1Indented'</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTacticSeq1Indented</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformTacticSeq</span> <span class=\"n\">stx</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[tactic tacticSeqBracketed]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTacticSeqBracketed'</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTacticSeqBracketed</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformTacticSeq</span> <span class=\"n\">stx</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[tactic cdot]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTacticCDot'</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTacticCDot</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformTacticSeq</span> <span class=\"n\">stx</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[tactic seq1]</span> <span class=\"kd\">def</span> <span class=\"n\">evalSeq1'</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalSeq1</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformTacticSeq</span> <span class=\"n\">stx</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tactic_wrapper</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"c1\">--logInfo m!\"tactic: {tac}\"</span>\n    <span class=\"n\">betaReduceEverything</span>\n    <span class=\"n\">evalTactic</span> <span class=\"n\">tac</span>\n    <span class=\"n\">betaReduceEverything</span>\n    <span class=\"c1\">--logInfo m!\"finished {tac}\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">())</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- works! (would usually need `dsimp at h`)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 352041666,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682248292
    },
    {
        "content": "<p>This at least solves the problem I ran into myself with Tutorial 0079 and linarith. Here's an analog:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- works! (would usually need `dsimp at h`)</span>\n</code></pre></div>",
        "id": 352042995,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682248766
    },
    {
        "content": "<p>Here's a test that it still works even with structured tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 352043312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682248895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> It doesn't appear to be necessary to do it, but if you're interested here's another version that overrides <code>by</code> without needing to re-implement <code>by</code> or create any new syntax. It does a syntax transformation ahead of time, while also overriding the other sequencing tactics just in case there's a macro expansion and we want to intervene.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/-- Runs `f` on every local variable and the target. `f` is allowed to fail, and if it</span>\n<span class=\"sd\">does that local variable or target is not changed. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">transformAllTypes</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">mvarId</span>\n  <span class=\"n\">for</span> <span class=\"n\">fvarId</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lctx.getFVarIds.reverse</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lctx.get</span><span class=\"bp\">!</span> <span class=\"n\">fvarId</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n      <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.changeLocalDecl'</span> <span class=\"n\">fvarId</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">mvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.change</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">))</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">return</span> <span class=\"n\">mvarId</span>\n\n<span class=\"sd\">/-- Beta reduce all local variables and targets across all goals. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">betaReduceEverything</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">getGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs'</span> <span class=\"bp\">←</span> <span class=\"n\">gs.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">transformAllTypes</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n  <span class=\"n\">setGoals</span> <span class=\"n\">gs'</span>\n\n<span class=\"sd\">/-- `tactic_wrapper` is inserted around every tactic in a tactic sequence.</span>\n<span class=\"sd\">Implement this tactic to alter the behavior of the tactic processor. -/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">wrapper</span><span class=\"o\">)</span> <span class=\"s2\">\"tactic_wrapper \"</span> <span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sepByTacticWrapper</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span> <span class=\"bp\">|</span> <span class=\"n\">throwUnsupportedSyntax</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">arg</span> <span class=\"k\">in</span> <span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">args.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">arg.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">wrapper</span> <span class=\"k\">then</span>\n        <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"n\">args'.push</span> <span class=\"n\">arg</span>\n      <span class=\"k\">else</span>\n       <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"n\">args'.push</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withRef</span> <span class=\"n\">arg</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tactic_wrapper</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">arg</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">raw</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"n\">args'.push</span> <span class=\"n\">arg</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args'</span>\n\n<span class=\"sd\">/-- Inserts a `tactic_wrapper` around every tactic in a tactic sequence.</span>\n\n<span class=\"sd\">Different sequence-like tactics store their tactic sequences in different syntax positions. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">transformTacticSeq</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span> <span class=\"bp\">|</span> <span class=\"n\">throwUnsupportedSyntax</span>\n  <span class=\"k\">let</span> <span class=\"n\">args'</span> <span class=\"o\">:=</span> <span class=\"n\">args.setD</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">sepByTacticWrapper</span> <span class=\"o\">(</span><span class=\"n\">args.getD</span> <span class=\"n\">pos</span> <span class=\"n\">default</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args'</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">transformTacticSeqs</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">atom</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ident</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">missing</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">args.mapM</span> <span class=\"n\">transformTacticSeqs</span>\n    <span class=\"k\">if</span> <span class=\"n\">kind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">tacticSeq1Indented</span> <span class=\"k\">then</span>\n      <span class=\"n\">transformTacticSeq</span> <span class=\"n\">s</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">kind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">tacticSeqBracketed</span> <span class=\"k\">then</span>\n      <span class=\"n\">transformTacticSeq</span> <span class=\"n\">s</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">kind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">cdot</span> <span class=\"k\">then</span>\n      <span class=\"n\">transformTacticSeq</span> <span class=\"n\">s</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">kind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">seq1</span> <span class=\"k\">then</span>\n      <span class=\"n\">transformTacticSeq</span> <span class=\"n\">s</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">return</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">@[tactic tacticSeq1Indented]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTacticSeq1Indented'</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTacticSeq1Indented</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformTacticSeqs</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[tactic tacticSeqBracketed]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTacticSeqBracketed'</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTacticSeqBracketed</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformTacticSeqs</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[tactic cdot]</span> <span class=\"kd\">def</span> <span class=\"n\">evalTacticCDot'</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTacticCDot</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformTacticSeqs</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[tactic seq1]</span> <span class=\"kd\">def</span> <span class=\"n\">evalSeq1'</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalSeq1</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformTacticSeqs</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[term_elab byTactic]</span> <span class=\"kd\">def</span> <span class=\"n\">elabByTactic'</span> <span class=\"o\">:</span> <span class=\"n\">Term.TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">transformTacticSeqs</span> <span class=\"n\">stx</span>\n  <span class=\"n\">Term.elabByTactic</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tactic_wrapper</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"c1\">--logInfo m!\"tactic: {tac}\"</span>\n    <span class=\"n\">betaReduceEverything</span>\n    <span class=\"n\">evalTactic</span> <span class=\"n\">tac</span>\n    <span class=\"n\">betaReduceEverything</span>\n    <span class=\"c1\">--logInfo m!\"finished {tac}\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">())</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span><span class=\"bp\">ₛ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n</div></div>",
        "id": 352049825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682250944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I think so long as you don't have any student tacticians who might try writing something too fancy, the meta code in <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20only.20for.20universal.20cleanup/near/352041666\">this comment</a> should do global beta reduction between all tactic steps, except for inside tactics like <code>rw</code>. (Caveat emptor: it should probably be better tested!)</p>",
        "id": 352050472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682251161
    },
    {
        "content": "<p>Wow! Progress was quick.</p>",
        "id": 352052419,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682251770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20only.20for.20universal.20cleanup/near/352049825\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> It doesn't appear to be necessary to do it, but if you're interested here's another version that overrides <code>by</code> without needing to re-implement <code>by</code> or create any new syntax. It does a syntax transformation ahead of time, while also overriding the other sequencing tactics just in case there's a macro expansion and we want to intervene.</p>\n</blockquote>\n<p>Thanks! This is very helpful.</p>",
        "id": 352052988,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682251960
    },
    {
        "content": "<p>I'm surprised it worked out! <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span>'s idea of transforming the syntax (which I hadn't considered myself since it seemed impractical) ended up actually being practical, which I'm not sure I'd have believed without seeing the first implementation.</p>",
        "id": 352053107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682252003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/pp.2Ebeta/near/351821791\">said</a>:</p>\n<blockquote>\n<p>I do want to mention that in Patrick's tutorials, number 0079 is a source of periodic questions since pp.beta is set to true but it's easy to get lambdas in this exercise, and these cause linarith to mysteriously fail.</p>\n</blockquote>\n<p>Eg <a href=\"#narrow/stream/113489-new-members/topic/Unexpected.20behaviour.20of.20linarith\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Unexpected.20behaviour.20of.20linarith</a></p>",
        "id": 352053111,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682252004
    },
    {
        "content": "<p>Thank you for working on this, Anand and Kyle!</p>\n<p>I tried it and it solves my beta-reduction problem with <code>Function.Injective</code> beautifully.  Here is another related annoyance which it doesn't solve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"forall_sufficiently_large \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">forall_sufficiently_large</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"mi\">5</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Need to add the import </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Mathport.Notation</span>\n</code></pre></div>\n<p>to Kyle's code.)</p>",
        "id": 352082934,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682263045
    },
    {
        "content": "<p>I get the goal state</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>⊢ ∀ (x : ℤ), x ≥ 5 → x ^ 3 ≥ 4 * x ^ 2 + 7\n</code></pre></div>\n<p>after the <code>use 5</code>, just as desired.  But the goal state before the <code>use</code> is not beta-reduced:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>⊢ ∃ C, ∀ (x : ℤ), x ≥ C → (fun n =&gt; n ^ 3 ≥ 4 * n ^ 2 + 7) x\n</code></pre></div>",
        "id": 352083177,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682263108
    },
    {
        "content": "<p>Some ideas for fixing this:</p>\n<ul>\n<li>also beta-reduce at the start of the tactic block, before any tactic?</li>\n<li>fix this one by just pretty-printing with <code>pp.beta</code> (once that's implemented) and ignoring the internals?</li>\n<li>fix my \"sufficiently large\" notation so that it pretty-prints (it doesn't currently) so that this issue is moot?</li>\n</ul>",
        "id": 352083682,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682263257
    },
    {
        "content": "<p>I'm now wondering whether beta-reducing everything in sight might have undesirable side effects. It will turn <code>∑ x, f x</code> into <code>finset.univ.sum f</code>, which is unfortunate. Is it possible to tag specific arguments to a function as \"beta-irreducible\"? (Note, this isn't specific to this \"beta-reduce everything\" approach. I personally get this kind of misbehavior a lot when using <code>simp_rw</code>)</p>",
        "id": 352087827,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682264810
    },
    {
        "content": "<p>It looks like it's beta reducing <em>is</em> happening before <code>use</code>, but it's just not being reported if your cursor is in any of the whitespace leading up to <code>use</code>. Your cursor has to be right before the <code>u</code>. I haven't been able to figure out how to fix this (even using the idea to wrap the contents of a <code>by</code> block with the beta reducer).</p>",
        "id": 352088438,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682265072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Isn't that eta reduction, not beta reduction?</p>",
        "id": 352088473,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682265089
    },
    {
        "content": "<p>Maybe then we want a hybrid approach: the po.beta option to make it display correctly, together with the tactic block beta-reduction-at-each-step to make it behave correctly.</p>",
        "id": 352088806,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682265263
    },
    {
        "content": "<p>Another question is whether we can make a hook of our own to preprocess expressions before they're pretty printed, since then we can ensure we perform the exact same transformations.</p>",
        "id": 352089047,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682265398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Here's a \"pretty printer option\" hack for <code>pp.beta</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">betaReduceFirst</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">SubExpr.getExpr</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e</span>\n  <span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"bp\">==</span> <span class=\"n\">e'</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n  <span class=\"n\">withTheReader</span> <span class=\"n\">SubExpr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">cfg</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">cfg</span> <span class=\"k\">with</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">e'</span><span class=\"o\">})</span> <span class=\"n\">delab</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">delab</span> <span class=\"n\">app</span><span class=\"o\">,</span> <span class=\"n\">delab</span> <span class=\"n\">lam</span><span class=\"o\">,</span> <span class=\"n\">delab</span> <span class=\"n\">forallE</span><span class=\"o\">,</span> <span class=\"n\">delab</span> <span class=\"n\">letE</span><span class=\"o\">,</span> <span class=\"n\">delab</span> <span class=\"n\">mdata</span><span class=\"o\">,</span> <span class=\"n\">delab</span> <span class=\"n\">proj</span><span class=\"o\">]</span>\n  <span class=\"n\">betaReduceFirst</span>\n</code></pre></div>",
        "id": 352090165,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682265923
    },
    {
        "content": "<p>Maybe it's safe (or even better) doing just <code>delab app</code> rather than every expression type, and if so there's probably a better function than <code>Core.betaReduce</code> that would just beta reduce the current application.</p>\n<p>(<code>attribute [delab app] betaReduceFirst</code> alone definitely works for the <code>forall_sufficiently_large</code> example)</p>",
        "id": 352090623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682266125
    },
    {
        "content": "<p>Nice!!  Thanks!</p>",
        "id": 352091131,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682266391
    },
    {
        "content": "<p>Oh yeah, sorry. I shall repost my concerns in an eta thread.</p>",
        "id": 352091208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682266432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Can you PR it?  It would be nice to make sure this continues to work, I'm not confident in my ability to maintain it.</p>",
        "id": 352091328,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682266470
    },
    {
        "content": "<p>Would it be reasonable/possible to make the notation <code>forall_sufficiently_large</code> itself beta reduce the application <code>P x</code>?</p>",
        "id": 352093815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682267626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Looks like it. This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">beta_reduce</span><span class=\"o\">)</span> <span class=\"s2\">\"beta_reduced% \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kd\">@[term_elab beta_reduce]</span> <span class=\"kd\">def</span> <span class=\"n\">elabBetaReduce</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e</span>\n  <span class=\"n\">return</span> <span class=\"n\">e</span>\n\n<span class=\"n\">notation3</span> <span class=\"s2\">\"forall_sufficiently_large \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">beta_reduced</span><span class=\"bp\">%</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 352095656,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682268471
    },
    {
        "content": "<p>Nice! Does <code>Core.betaReduce</code> only beta-reduce the outermost application, or could it also apply to stuff inside <code>P</code>?</p>",
        "id": 352096014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682268600
    },
    {
        "content": "<p>It's global, so this would be more controlled:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">beta_reduce</span><span class=\"o\">)</span> <span class=\"s2\">\"beta_reduce_app% \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"kd\">@[term_elab beta_reduce]</span> <span class=\"kd\">def</span> <span class=\"n\">elabBetaReduce</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.beta</span> <span class=\"n\">e.getAppFn</span> <span class=\"n\">e.getAppArgs</span>\n  <span class=\"n\">return</span> <span class=\"n\">e</span>\n\n<span class=\"n\">notation3</span> <span class=\"s2\">\"forall_sufficiently_large \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">beta_reduce_app</span><span class=\"bp\">%</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 352096260,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682268701
    },
    {
        "content": "<p>It might still beta reduce more than you bargained for, but at least it's localized to a single application sequence.</p>",
        "id": 352096373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682268737
    }
]