[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3274\">!4#3274</a> there are two remaining instances of the typeclass instance problem being stuck here, can you help?</p>",
        "id": 347017878,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680668346
    },
    {
        "content": "<p>did you try the usual <img alt=\":2074:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/44725.png\" title=\"2074\"> fixes?</p>",
        "id": 347019255,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680669249
    },
    {
        "content": "<p>(or as a better question: what is the offending code?)</p>",
        "id": 347019735,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680669517
    },
    {
        "content": "<p>One of them is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">incMatrix_mul_transpose_apply_of_adj</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G.Adj</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">G.incMatrix</span> <span class=\"n\">R</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">G.incMatrix</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Matrix.mul_apply</span><span class=\"o\">,</span> <span class=\"n\">Matrix.transpose_apply</span><span class=\"o\">,</span> <span class=\"n\">incMatrix_apply_mul_incMatrix_apply</span><span class=\"o\">,</span>\n      <span class=\"n\">Set.indicator_apply</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">one_apply</span><span class=\"o\">,</span> <span class=\"n\">sum_boole</span><span class=\"o\">]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">Nat.cast_one</span> <span class=\"c1\">-- here</span>\n    <span class=\"n\">convert</span> <span class=\"n\">card_singleton</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">coe_eq_singleton</span><span class=\"o\">,</span> <span class=\"n\">coe_filter_univ</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">G.incidenceSet_inter_incidenceSet_of_adj</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 347020121,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680669783
    },
    {
        "content": "<p>The other is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">incMatrix_apply_eq_one_iff</span> <span class=\"o\">:</span> <span class=\"n\">G.incMatrix</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G.incidenceSet</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">one_ne_zero.ite_eq_left_iff</span> <span class=\"c1\">-- here; I've tried @ on this to no avail</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 347020157,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680669818
    },
    {
        "content": "<p>ah yeah, that happens sometimes with convert. I usually rewrite the proofs to avoid <code>convert</code>.</p>",
        "id": 347020487,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680670045
    },
    {
        "content": "<p>I would not be surprised if the second one is just <code>apply one_ne_zero.ite_eq_left_iff</code></p>",
        "id": 347020716,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680670194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233274.20typeclass.20instance.20problem/near/347020716\">said</a>:</p>\n<blockquote>\n<p>I would not be surprised if the second one is just <code>apply one_ne_zero.ite_eq_left_iff</code></p>\n</blockquote>\n<p>There's still an error with the one-line replacement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">incidenceSet</span> <span class=\"n\">G</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 347021012,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680670364
    },
    {
        "content": "<p>(that error also showed up when I tried to do the <code>@</code> on that)</p>",
        "id": 347021054,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680670398
    },
    {
        "content": "<p>oh, the first problem (<code>Nat.cast_one</code>) is solved with <code>convert @Nat.cast_one R _</code></p>",
        "id": 347022759,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680671480
    },
    {
        "content": "<p>and now I fixed the other error, so it compiles now</p>",
        "id": 347026369,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680673094
    }
]