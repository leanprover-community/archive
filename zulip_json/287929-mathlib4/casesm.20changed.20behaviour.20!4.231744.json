[
    {
        "content": "<p>While porting Data.Sign (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1744\">!4#1744</a>), I have noticed that <code>casesm</code>does not seem to work as it did in lean 3,<del> most importantly, it does not seem to act on the goal anymore, but only on hypotheses. </del></p>\n<p>For example, proving <code>le_total</code> in <code>instance : LinearOrder SignType</code> of the PR above used to be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">casesm</span><span class=\"bp\">*</span><span class=\"n\">_</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>In lean 4 however, neither <code>casesm* (_ ∨ _)</code> nor <code>casesm* _</code> do anything to the goal <code>⊢ a ≤ b ∨ b ≤ a</code>. But, as a silly example, if I move the goal into the hypotheses with <code>by_contra h; rw [not_or] at h;</code>, then <code>casesm* (_ ∧ _)</code> very happily acts on the new hypothesis<code>h: ¬a ≤ b ∧ ¬b ≤ a</code>. Notably, <code>casesm* _</code> still does not do anything.</p>\n<p>Is this an intended change?</p>",
        "id": 324896486,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1675167574
    },
    {
        "content": "<p>I don't think <code>casesm</code> is supposed to act on the goal in Lean 3. <a href=\"https://github.com/leanprover-community/mathlib/blob/ed60ee25ed00d7a62a0d1e5808092e1324cee451/src/tactic/lean_core_docs.lean#L149-L164\">https://github.com/leanprover-community/mathlib/blob/ed60ee25ed00d7a62a0d1e5808092e1324cee451/src/tactic/lean_core_docs.lean#L149-L164</a></p>\n<blockquote>\n<p><code>cases_matching p</code> applies the <code>cases</code> tactic to a hypothesis <code>h : type</code><br>\nif <code>type</code> matches the pattern <code>p</code>.</p>\n</blockquote>",
        "id": 324902091,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675169270
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> where <code>casesm</code> works on the goal in Lean 3?</p>",
        "id": 324902228,
        "sender_full_name": "David Renshaw",
        "timestamp": 1675169306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/casesm.20changed.20behaviour.20!4.231744/near/324902228\">said</a>:</p>\n<blockquote>\n<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> where <code>casesm</code> works on the goal in Lean 3?</p>\n</blockquote>\n<p>Thanks for the response, constructing the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> made me see my misunderstanding: Neither in lean 3 nor in lean 4 does <code>casesm</code> act on the goal, but the difference is that in lean3, <code>casesm _</code> recognizes that <code>a</code> and <code>b</code> are of inductive types and deconstructs them. In lean 4, not anymore.</p>\n<p>In lean3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">two_points</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">two_points</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">two_points</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">casesm</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span> <span class=\"n\">two_points</span>\n</code></pre></div>\n<p>In lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.CasesM</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">twoPoints</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">one</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">twoPoints</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">twoPoints</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">casesm</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"c1\">-- no match</span>\n<span class=\"kd\">end</span> <span class=\"n\">twoPoints</span>\n</code></pre></div>\n<p>So the question is now: Is <em>that</em> intended?</p>",
        "id": 324907273,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1675170661
    },
    {
        "content": "<p>Created an issue to not lose track of this: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2018\">mathlib4#2018</a></p>\n<p>One of these days I'll learn how to write tactics, then I won't be so helpless with these things :)</p>",
        "id": 325451395,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1675358057
    }
]