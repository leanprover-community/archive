[
    {
        "content": "<p>Mathlib has quite a lot of type synonyms. Another one was added in this PR:</p>\n<blockquote>\n<p>feat: Type synonym for the specialisation order <a href=\"https://github.com/leanprover-community/mathlib4/pull/6985\">#6985</a> </p>\n</blockquote>\n<p>Every type synonym goes through the dance of setting up an equiv and some simp-lemmas, etc...<br>\nCan we automate away this boilerplate, so that setting up an irreducible type synonym becomes a 1- or 2-liner?</p>",
        "id": 389416715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694005881
    },
    {
        "content": "<p>it would be extra nice if we could <em>choose</em> the kind of <code>equiv</code> we want (e.g., <code>≃ₗ[R]</code>), with all <code>rfl</code> proofs of course.</p>",
        "id": 389424162,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694007735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonym.20boilerplate/near/389424162\">said</a>:</p>\n<blockquote>\n<p>it would be extra nice if we could <em>choose</em> the kind of <code>equiv</code> we want (e.g., <code>≃ₗ[R]</code>), with all <code>rfl</code> proofs of course.</p>\n</blockquote>\n<p>A prerequisite of that would be to fix the delta deriving handler (in core) or reimplement it somehow as both sides would need typeclasses on them to make sense of the equiv</p>",
        "id": 389431933,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694009320
    },
    {
        "content": "<p>That said, I think its now quite easy to write commands to elaborate such boilerplate in a fairly natural looking way e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"n\">Parser</span> <span class=\"n\">Category</span> <span class=\"n\">PrettyPrinter</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkBoilerplate</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n\n  <span class=\"n\">elabCommandTopLevel</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n  <span class=\"n\">elabCommandTopLevel</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n    <span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">elabCommandTopLevel</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n    <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">})</span>\n\n  <span class=\"n\">elabCommandTopLevel</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n    <span class=\"sd\">/-- `toEquiv` is the \"identity\" function to the `$n` of a type. -/</span>\n    <span class=\"kd\">@[match_pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">toEquiv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">elabCommandTopLevel</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n    <span class=\"sd\">/-- `ofEquiv` is the identity function from the `$n` of a type.  -/</span>\n    <span class=\"kd\">@[match_pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">ofEquiv</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n  <span class=\"n\">elabCommandTopLevel</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n    <span class=\"kd\">end</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">mkBoilerplate</span>\n<span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"n\">mkBoilerplate</span> <span class=\"bp\">`</span><span class=\"n\">Specialization</span>\n<span class=\"k\">#eval</span> <span class=\"n\">mkBoilerplate</span> <span class=\"bp\">`</span><span class=\"n\">Additive'</span>\n<span class=\"k\">#check</span> <span class=\"n\">Specialization.ofEquiv</span>\n<span class=\"k\">#check</span> <span class=\"n\">Additive'.ofEquiv</span>\n</code></pre></div>",
        "id": 389445442,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694011925
    },
    {
        "content": "<p>This could of course be improved, the docstrings don't work <del>and the first declaration added doesn't have a range (though the others do)</del>.<br>\nBut I think using such commands to generate boilerplate would be worth it for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n &gt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> instances</p>",
        "id": 389445949,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694012048
    },
    {
        "content": "<p>As usual with such requests, we first need to collect half a dozen examples written by hand and see what is indeed repeated.</p>",
        "id": 389445963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694012050
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderDual#doc\">docs#OrderDual</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lex#doc\">docs#Lex</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Colex#doc\">docs#Finset.Colex</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithUpperSetTopology#doc\">docs#WithUpperSetTopology</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Specialization#doc\">docs#Specialization</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Additive#doc\">docs#Additive</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiplicative#doc\">docs#Multiplicative</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Opposite#doc\">docs#Opposite</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddOpposite#doc\">docs#AddOpposite</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOpposite#doc\">docs#MulOpposite</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithLp#doc\">docs#WithLp</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformFun#doc\">docs#UniformFun</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Tropical#doc\">docs#Tropical</a> etc... Those are the ones I can remember off the top of my head, so there's more.</p>",
        "id": 389450751,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694013204
    },
    {
        "content": "<p>I made an effort for <a href=\"https://tqft.net/mathlib4files/Order/Synonym\">file#Order/Synonym</a> to exactly represent what the boilerplate should look like</p>",
        "id": 389451098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694013280
    },
    {
        "content": "<p>On the other hand, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Specialization#doc\">docs#Specialization</a> is a throwaway synonym. Its sole purpose is to construct the functor <code>Top =&gt; Preord</code>. I don't think it'll see any more use.</p>",
        "id": 389451660,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694013406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonym.20boilerplate/near/389451660\">said</a>:</p>\n<blockquote>\n<p>On the other hand, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Specialization#doc\">docs#Specialization</a> is a throwaway synonym. Its sole purpose is to construct the functor <code>Top =&gt; Preord</code>. I don't think it'll see any more use.</p>\n</blockquote>\n<p>I think thats all the more reason to automate it (I can imagine automation failing for things which have more specific requirements due to being used more widely)</p>",
        "id": 389467691,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694016105
    }
]