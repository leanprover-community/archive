[
    {
        "content": "<p>I believe there must be easier way to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.eq_add_of_sub_eq</span> <span class=\"n\">hn</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.one_le_pow'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">9</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_mul_of_one_le_left'</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>What can Mathlib4 offer?</p>",
        "id": 339803989,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678091606
    },
    {
        "content": "<p>You shouldn't be using \\ge . All lemmas and tactics in mathlib expect \\le. There should be a pow_le_pow lemma (but there will be no pow_ge_pow lemma)</p>",
        "id": 339804774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678091833
    },
    {
        "content": "<p>PS: I don't want golfing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.eq_add_of_sub_eq</span> <span class=\"n\">hn</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_mul_of_one_le_left'</span> <span class=\"o\">(</span><span class=\"n\">Nat.one_le_pow'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">9</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339804860,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678091861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/10.5En.20.E2.89.A5.2010/near/339804774\">said</a>:</p>\n<blockquote>\n<p>You shouldn't be using \\ge . All lemmas and tactics in mathlib expect \\le. There should be a pow_le_pow lemma (but there will be no pow_ge_pow lemma)</p>\n</blockquote>\n<p>Oh! I have to do this, then <code>library_search</code> succeeds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">10</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span>\n  <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n  <span class=\"k\">show</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n  <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 339805697,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678092117
    },
    {
        "content": "<p>Actually <code>≥</code> was not the problem. This <code>library_search</code> gives me the solution as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span>\n  <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n  <span class=\"k\">show</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">1</span>\n  <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 339806082,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678092235
    },
    {
        "content": "<p>FYI this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">pow_le_pow</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"n\">hn</span>\n</code></pre></div>",
        "id": 339806408,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678092320
    },
    {
        "content": "<p>Looks like a golf to me <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 339806851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678092439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/10.5En.20.E2.89.A5.2010/near/339806851\">said</a>:</p>\n<blockquote>\n<p>Looks like a golf to me <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>Yes, the last step was golfing, sure. I just wanted to specify that I wanted to find a different proof from scratch, rather than golf the long ugly proof I provided.</p>",
        "id": 339807960,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678092789
    },
    {
        "content": "<p>The most difficult part for me is to not forget to explicitly write <code>1 ≤ 10</code> and similar trivial stuff.</p>",
        "id": 339808700,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678093026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 339814437,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678094554
    }
]