[
    {
        "content": "<p>I'm clearly not understanding how to get tag attributes working. For instance, I try to register a new one in this file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Attributes</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"sd\">/-- user attribute used to mark lemmas used by `continuity`. -/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">continuity</span><span class=\"o\">)</span> <span class=\"s2\">\"continuity\"</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">continuityTag</span> <span class=\"o\">:</span> <span class=\"n\">TagAttribute</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerTagAttribute</span> <span class=\"bp\">`</span><span class=\"n\">continuity</span> <span class=\"s2\">\"Tag for marking lemmas used by the `continuity` tactic\"</span>\n</code></pre></div>\n<p>and then use it here, but I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Topology.Attr</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">continuity</span><span class=\"o\">]</span> <span class=\"n\">continuous_id</span> <span class=\"n\">continuous_const</span> <span class=\"c1\">-- unexpected attribute argument</span>\n</code></pre></div>",
        "id": 325720866,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675456981
    },
    {
        "content": "<p>A <code>TagAttribute</code> can only be given to a declaration in the same file as where the declaration is defined (this allows TagAttributes to have to do almost no initialization when resolving imports).</p>",
        "id": 325744902,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675468439
    },
    {
        "content": "<p>Also, you should remove the <code>syntax</code> line. Just </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Attributes</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">continuityTag</span> <span class=\"o\">:</span> <span class=\"n\">TagAttribute</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerTagAttribute</span> <span class=\"bp\">`</span><span class=\"n\">continuity</span> <span class=\"s2\">\"Tag for marking lemmas used by the `continuity` tactic\"</span>\n</code></pre></div>\n<p>is enough</p>",
        "id": 325746068,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675469029
    },
    {
        "content": "<p>Oh, I guess a <code>TagAttribute</code> is not what I want then. How do I create an attribute which just acts like a flag?</p>",
        "id": 325750276,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675471757
    },
    {
        "content": "<p>why is <code>TagAttribute</code> not what you want? It is the cheapest attribute that is just a flag. You just have to make <code>Mathlib.Topology.Basic</code> import <code>Mathlib.Tactic.Topology.Attr</code> and flag the declarations in that file.</p>",
        "id": 325822801,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675515351
    },
    {
        "content": "<p>But won't Jireh want to tag lots of lemmas from different files with his attribute?</p>",
        "id": 325843673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675524183
    },
    {
        "content": "<p>Oh I see -- the idea is that the lemmas are all in different files, but you do the tagging all in one file?</p>",
        "id": 325843728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675524211
    },
    {
        "content": "<p>No, that can't be the case.</p>",
        "id": 325843773,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675524230
    },
    {
        "content": "<p>Floris, did you mean \"in that file, or in files imported by it\"?</p>",
        "id": 325843936,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675524280
    },
    {
        "content": "<p>I mean, <code>simp</code> doesn't work like that -- imagine not being able to tag a lemma with <code>@[simp]</code> as you write it, but having to add it to some gigantic file with many imports which needs to be imported if you want to use <code>simp</code>.</p>",
        "id": 325843942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675524283
    },
    {
        "content": "<p>Kevin, it wouldn't work anyway because then you would have circular dependencies.</p>",
        "id": 325844011,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675524316
    },
    {
        "content": "<p>What I said was probably confusing. If you want to tag <code>continuous_id</code> with <code>@[continuity]</code>, this has to be done in the file where <code>continuous_id</code> is defined. You can still write <code>@[continuity] lemma continuous_id ...</code>.<br>\nIsn't that what you want?</p>",
        "id": 325844090,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675524357
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325844096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675524359
    },
    {
        "content": "<p>I think I tried doing that in this file and still had the same error. I'll check in about an hour when I can sit down again at my machine.</p>",
        "id": 325844357,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675524424
    },
    {
        "content": "<p>Oh I had misread \"in the same file as where the declaration is defined\" as \"in the same file as where the attribute is defined\" :-)</p>",
        "id": 325844374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675524431
    },
    {
        "content": "<p>Me too, Kevin</p>",
        "id": 325844389,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675524443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/TagAttribute/near/325746068\">said</a>:</p>\n<blockquote>\n<p>Also, you should remove the <code>syntax</code> line.</p>\n</blockquote>\n<p>Did you do this?</p>",
        "id": 325844398,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675524448
    },
    {
        "content": "<p>Ah, not at the time, that's probably the issue</p>",
        "id": 325844423,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675524464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/TagAttribute/near/325844090\">said</a>:</p>\n<blockquote>\n<p>What I said was probably confusing. If you want to tag <code>continuous_id</code> with <code>@[continuity]</code>, this has to be done in the file where <code>continuous_id</code> is defined.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> This isn't the only way, right?  You can also tag things <code>@[continuity]</code> after the fact, it just has to be in a different file from where <code>@[continuity]</code> is defined.  See <a href=\"https://github.com/leanprover-community/mathlib4/pull/1740\">!4#1740</a> for an example.</p>",
        "id": 325864413,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675533162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  After a little bit of investigation, we are both right and we are talking about different things.</p>\n<p>In Lean there is a notion of <code>TagAttribute</code> defined in <code>Lean.Attributes</code>, which you can declare using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">someName</span> <span class=\"o\">:</span> <span class=\"n\">TagAttribute</span> <span class=\"bp\">←</span> <span class=\"n\">registerTagAttribute</span> <span class=\"bp\">`</span><span class=\"n\">tagName</span> <span class=\"s2\">\"description\"</span>\n</code></pre></div>\n<p>If you then run <code>attribute [tagName] id</code> in a different file, you get the error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid attribute 'tagName', declaration is in an imported module\n</code></pre></div>\n<p>However, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> defined a separate notion in <code>Mathlib.Tactic.TagAttr</code> called <code>TagExtension</code> which you declare using <code>register_tag_attr attrName</code>. This is <em>not</em> implemented using <code>TagAttribute</code>, but instead with <code>SimpleScopedEnvExtension</code>. This is a type of attribute that is closer to what you are expecting in Lean 3: you can tag declarations in files different from where the declaration (that you're tagging) is defined, and (I think) you can tag things locally in a section or file, or locally remove the attribute. However, they are a little less efficient, since you have to collect all the declarations with this attribute whenever you execute the imports of a file, unlike <code>TagAttribute</code>.</p>\n<p>So the problem is that we have two different notions that have the same name. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> can you please rename your type of attribute, so that it doesn't sound like <code>TagAttribute</code>? There are plenty of possible names: <code>SimpleAttribute</code>, <code>MarkAttribute</code>, <code>NoArgumentAttribute</code>, ... It is just confusing to have a difference between tag attributes and \"tag\" attributes.</p>",
        "id": 325879024,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675542699
    },
    {
        "content": "<p>Or as Reid's emoji suggest <code>LabelAttribute</code> or just <code>Label</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 325879352,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675542919
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2124\">!4#2124</a></p>",
        "id": 326272248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1675736180
    }
]