[
    {
        "content": "<p>In <code>mathlib</code>, when we had a property <code>P : Z → Prop</code> and <code>hx : P x</code> and wanted to prove <code>P y</code>, <code>convert hx</code> was creating the goal <code>x = y</code>, but while attempting at porting <code>Topology.Homotopy.Basic</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/2825\">!4#2825</a> <code>convert</code> would not produce the same goal, and I had to introduce the following lemma instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.congr_prop</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hx</span>\n</code></pre></div>\n<p>Where should I put this basic lemma? (Also, I am not sure <code>congr_prop</code> is the best name.)</p>",
        "id": 341277246,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678626497
    },
    {
        "content": "<p>That looks like a pretty weird lemma to me; the proof is just <code>Eq.subst h hx</code> or something</p>",
        "id": 341281712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678628441
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 341283976,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678629384
    },
    {
        "content": "<p>what goal was it creating?</p>",
        "id": 341286326,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1678630389
    },
    {
        "content": "<p>convert seems to be a bit more aggressive in lean4. Maybe <code>convert … using 1</code> has the same behaviour as in lean3 (in this case)?</p>",
        "id": 341286512,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678630468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> has marked this topic as resolved.</p>",
        "id": 341326835,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678649220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> Could you leave porting notes where you changed it from <code>convert</code>? I've been working on improving convert, and it'd be nice to see what's different here.</p>",
        "id": 341345168,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678662349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20congr_prop.20.3F/near/341345168\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> Could you leave porting notes where you changed it from <code>convert</code>? I've been working on improving convert, and it'd be nice to see what's different here.</p>\n</blockquote>\n<p>This is <a href=\"https://github.com/leanprover-community/mathlib4/pull/2825/commits/a88488975bf5707fe175cd35894ff2ee830dfbc6\">https://github.com/leanprover-community/mathlib4/pull/2825/commits/a88488975bf5707fe175cd35894ff2ee830dfbc6</a></p>",
        "id": 341347404,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678664377
    },
    {
        "content": "<p>I haven't tested it with the current mathlib 4, but with the version of <code>convert</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2606\">mathlib4#2606</a> <code>convert F.prop 1 using 1</code> works, giving the goal <code>↑(Homotopy.extend F.toHomotopy) t = ↑(Homotopy.curry F.toHomotopy) 1</code>.</p>\n<p>Without limiting it with <code>using 1</code>, it goes down a path where it gives you goals like <code>ℝ = ↑I</code> and <code>HEq UniformSpace.toTopologicalSpace instTopologicalSpaceSubtype</code>.  This newer <code>convert</code> is more aggressive in that it's more willing to equate things than the old one, but it's also much less aggressive in how it unfolds definitions. Maybe it would be a good default setting to have it require that any type equalities be definitional equalities... (Though that might be too strict -- for example, it's fine having an equality <code>Subtype p = Subtype q</code> so long <code>p</code> and <code>q</code> have the same type.)</p>",
        "id": 341361568,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678676569
    },
    {
        "content": "<p>I'm testing out a heuristic for <code>convert</code>/<code>congr!</code> to keep it from going down unlikely paths. When congruence would equate two types <code>ty1</code> and <code>ty2</code> that aren't definitionally equal, it will entertain it if it's plausible that they might be equal, where plausibility is defined recursively:</p>\n<ul>\n<li>If the types are propositions, they are plausibly equal (that is, iffs are plausible).</li>\n<li>If the types are from different universes, they are not plausibly equal.</li>\n<li>Suppose in whnf we have <code>ty1 = f a1 ... am</code> and <code>ty2 = g b1 ... bn</code>. If <code>f</code> isn't definitionally equal to <code>g</code> or <code>m != n</code> then the types aren't plausibly equal.</li>\n<li>If there's some i such that <code>ai</code> and <code>bi</code> are types that aren't plausibly equal, then <code>ty1</code> and <code>ty2</code> aren't plausibly equal.</li>\n<li>Otherwise, <code>ty1</code> and <code>ty2</code> are plausibly equal.</li>\n</ul>\n<p>This lets things like <code>Subtype p = Subtype q</code> or <code>Fin n = Fin m</code> be plausible, but it keeps <code>ℝ = ↑I</code> from being plausible.</p>",
        "id": 341468717,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678715889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> thanks for this work on <code>convert</code>! One thing I have noticed, which still seems to be the case by looking at the <code>test/convert.lean</code> on <a href=\"https://github.com/leanprover-community/mathlib4/pull/2606\">!4#2606</a> (e.g., <a href=\"https://github.com/leanprover-community/mathlib4/blob/kmill_congr_fallback/test/convert.lean#L38\">line 38</a>), is that <code>convert</code> seems to be especially bad at unification. Overall, I still feel like Lean 4 is significantly worse at unification, so maybe it's just that problem, but it bites especially hard when using convert with holes (or implicit arguments) in the term. Do you have any ideas about this?</p>",
        "id": 341536535,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678730293
    },
    {
        "content": "<p>That particular line is due to the way <code>convert</code> elaborates the expression. It's possible to use the <code>allowNaturalHoles := true</code> option for <code>elabTermWithHoles</code>, but then this leads to some (hopefully surmountable) issues with metavariables that don't seem to be eager to be unified against.</p>",
        "id": 341542063,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678731851
    },
    {
        "content": "<p>This is sort of a MWE illustrating something in the general area of this issue. It's surprising to me that the <code>apply</code> here doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">rfl</span>\n    <span class=\"c1\">-- tactic 'apply' failed, failed to unify</span>\n    <span class=\"c1\">--  ?a = ?a</span>\n    <span class=\"c1\">-- with</span>\n    <span class=\"c1\">--  n = ?m.7847</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>An <code>exact rfl</code> works in the same place.</p>",
        "id": 341542158,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678731884
    },
    {
        "content": "<p>I've seen that the function <code>withAssignableSyntheticOpaque</code> can be used to make these metavariables unifiable -- is that something <code>apply</code> is missing? And more generally, is this something tactics should use when using <code>isDefEq</code> specifically to set metavariables that arise in tactics? (Related: <a href=\"https://github.com/leanprover/lean4/pull/492\">lean4#492</a>)</p>",
        "id": 341542606,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678732008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I've got at least <code>test/convert.lean</code> working without needing to include that <code>(f := f)</code> hint. Now it's back on CI, and hopefully it doesn't break anything in the rest of mathlib!</p>\n<p>There were two ingredients:</p>\n<ol>\n<li>when <code>convert</code> elaborates its term, it needs the <code>(allowNaturalHoles := true)</code> option, otherwise you get the \"cannot synthesize placeholders\" error</li>\n<li>when <code>congr!</code> does its preprocessing, where it tentatively tries to apply <code>rfl</code>, it does so with <code>withAssignableSyntheticOpaque</code> to mimic how <code>exact rfl</code> works. This gives <code>congr!</code> the ability to assign the placeholders from (1)</li>\n</ol>",
        "id": 341556520,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678736095
    }
]