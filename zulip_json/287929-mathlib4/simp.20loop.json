[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"c1\">-- in `std` and tagged @[simp]</span>\n<span class=\"k\">#check</span> <span class=\"n\">Int.ofNat_add_ofNat</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Int.ofNat_add_ofNat (m n : ℕ) : ↑m + ↑n = ↑(m + n)</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- in `mathlib` and tagged @[simp]</span>\n<span class=\"k\">#check</span> <span class=\"n\">Nat.cast_add</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Nat.cast_add.{u_1} {R : Type u_1} [inst✝ : AddMonoidWithOne R] (m n : ℕ) : ↑(m + n) = ↑m + ↑n</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- hangs</span>\n</code></pre></div>",
        "id": 390045631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694274735
    },
    {
        "content": "<p>(credit to <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> who ran into this on the train from Duessoldorf and now has a flat laptop battery)</p>",
        "id": 390045747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694274884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>Nat.cast_add</code> was <code>simp</code> in Lean 3. Should <code>simp</code> be removed from <code>Int.ofNat_add_ofNat</code>?</p>",
        "id": 390049515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694278099
    },
    {
        "content": "<p>Or maybe the lemma should simply be turned around?</p>",
        "id": 390049690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694278318
    },
    {
        "content": "<p>Usually with simp lemmas, you want more primitive and unary operations to moved inside of less primitive and nary operations. So turning it around seems the right call, I'd say</p>",
        "id": 390050137,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694278758
    },
    {
        "content": "<p>My understanding that with lemmas like this, the simplifier is in fact ill-equipped to deal with the problem. Sometimes you want to push casts in and sometimes out. This is why we have <code>norm_cast</code> and <code>push_cast</code>. Because of this I've never quite known what to do with <code>simp</code> and lemmas like this. What works for one application might not work for another.</p>",
        "id": 390050467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694279054
    },
    {
        "content": "<p>Just to be clear, is the suggestion to turn <code>Int.ofNat_add_ofNat</code> around, or <code>Nat.cast_add</code>? My vote is to turn the former around, and keep the latter as it is, and keep it <code>simp</code></p>",
        "id": 390057535,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694286087
    },
    {
        "content": "<p>Turn <code>Int.ofNat_add_ofNat</code> around. It's a distributivity lemma, and distributivity lemmas should have their RHS distributed.</p>",
        "id": 390057636,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694286170
    },
    {
        "content": "<p>Then we're in agreement :)</p>",
        "id": 390057896,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694286442
    },
    {
        "content": "<p>The reason <code>ofNat_add_ofNat</code> is in the order it is is because this is one of four equational lemmas for <code>Int.add</code></p>",
        "id": 390170668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694370620
    },
    {
        "content": "<p>so it should probably just be <code>@[local simp]</code></p>",
        "id": 390170692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694370644
    },
    {
        "content": "<p>What does local simp mean? Only until the current scope ends I guess (section, namespace or file)?</p>",
        "id": 390173055,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694372286
    },
    {
        "content": "<p>Haha, I had not read this thread, but had just independently decided to put <code>local simp</code> there, and just searched zulip thinking \"surely someone has wanted this previously\".</p>",
        "id": 390829234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694654532
    },
    {
        "content": "<p>This gets done, amongst other things, in <a href=\"https://github.com/leanprover/std4/pull/261\">std4#261</a>, with mathlib bump <a href=\"https://github.com/leanprover-community/mathlib4/pull/7141\">#7141</a></p>",
        "id": 390832964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694656011
    },
    {
        "content": "<p>Thanks Scott! I was thinking of making a Std PR but realised I had no idea how to actually do this and also realised that even if I could make a change and get std compiling, this was no guarantee that I'd not broken mathlib. This and the imminent start of term stopped me from working on this...</p>",
        "id": 390883692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694681528
    }
]