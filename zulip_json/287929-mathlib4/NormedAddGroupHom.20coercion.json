[
    {
        "content": "<p>Currently, <code>normed_add_group_hom</code> is a structure which does <em>not</em> extend <code>add_hom</code> or <code>add_monoid_hom</code>, and there is no associated <code>normed_add_group_hom_class</code>. I assume that not extending <code>add_monoid_hom</code> is intentional, because it is proven early and an instance of <code>add_monoid_hom_class</code> is given, although it's not clear why it doesn't extend <code>add_hom</code> (guess: historical accident of development).</p>\n<p>However, the problem is that a <code>has_coe_to_fun</code> instance is declared using <code>normed_add_group_hom.to_fun</code> instead of using the <code>fun_like</code> instance. Of course, because coercions are now inlined, this wreaks havoc since we really want the <code>FunLike.coe</code> to appear everywhere. Which of the following should I do while porting:</p>\n<ol>\n<li>move the <code>AddMonoidHomClass</code> instance up ~70 lines and make the <code>CoeFn</code> instance (re)use the <code>FunLike.coe</code> coercion.</li>\n<li>follow the morphism refactor and make <code>NormedAddGroupHom</code> a structure which extends <code>AddHom</code> and provide an associated <code>NormedAddGroupHomClass</code>.</li>\n<li>something else</li>\n</ol>\n<p>I assume if I go with (2) it would require a backport, but would it be acceptable to do (1) without backporting? This is what I am leaning towards.</p>",
        "id": 340611623,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678369956
    },
    {
        "content": "<p>There are a bunch of <code>hom</code>-classes (in Lean 4) which have no <code>FunLike</code> instances, or some that have a <code>CoeFun</code> instance in addition to a <code>FunLike</code> instance. I think this happens a couple of times in the order folder, and I feel like we should transition all of them to <code>FunLike</code> instances (without manual <code>CoeFun</code> instances), potentially only after the port. <br>\nSo I'm for option (1), removing the (second) coercion to functions. <br>\nI'd think it's fine without backporting, but it might be safer to backport it.</p>",
        "id": 340612337,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678370142
    },
    {
        "content": "<p>I agree precisely with Floris' suggestions. We have reordered/redefined the <code>FunLike</code> instance and removed <code>CoeFun</code> before in the port. Option 2 would quite definitely warrant a backport.</p>",
        "id": 340613244,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1678370353
    },
    {
        "content": "<p>okay, I'll go with that and put a TODO stating we should transition to the new morphism classes.</p>",
        "id": 340617841,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678371326
    }
]