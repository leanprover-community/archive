[
    {
        "content": "<p>I feel like Lean is sometimes too eager to include redundant assumptions. For instance, is this intended behaviour?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"k\">#check</span> <span class=\"n\">one</span> <span class=\"c1\">-- (n : ℕat) (h : n = n) : n = n</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"k\">#check</span> <span class=\"n\">two</span> <span class=\"c1\">-- (n : ℕat) : n = n</span>\n</code></pre></div>\n<p>Here <code>rcases n</code> modifies <code>h</code>, so Lean thinks <code>one</code> needs <code>h</code>. I can hide <code>h</code> by doing <code>clear</code> as in <code>two</code>.</p>",
        "id": 371582124,
        "sender_full_name": "David Ang",
        "timestamp": 1688249507
    },
    {
        "content": "<p>How could <code>rcases</code> guess that it shouldn't touch <code>h</code>?</p>",
        "id": 371585085,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688251193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464700\">David Ang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rcases.20modifies.20assumptions/near/371582124\">said</a>:</p>\n<blockquote>\n<p>I feel like Lean is sometimes too eager to include redundant assumptions. For instance, is this intended behaviour?</p>\n</blockquote>\n<p>As far as I understand, if you come up with a solution to this problem that doesn't slow down Lean too much, it would be very nice. In the meantime, don't have extra assumptions in <code>variable</code>s.</p>",
        "id": 371585358,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688251336
    },
    {
        "content": "<p>That's to say, there have been a number of long discussions about this problem on the Zulip already. If not intended, it's definitely a known behavior.</p>",
        "id": 371589695,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688254048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rcases.20modifies.20assumptions/near/371585085\">said</a>:</p>\n<blockquote>\n<p>How could <code>rcases</code> guess that it shouldn't touch <code>h</code>?</p>\n</blockquote>\n<p>I think it’s fine that <code>rcases</code> touches <code>h</code>, but once the lemma proof ends Lean can perhaps find out exactly which assumptions are actually used (and not just modified) and delete the rest. I don’t know whether this is the way it’s currently handled or whether it’s feasible to do it this way though.</p>",
        "id": 371667409,
        "sender_full_name": "David Ang",
        "timestamp": 1688289911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rcases.20modifies.20assumptions/near/371589695\">said</a>:</p>\n<blockquote>\n<p>That's to say, there have been a number of long discussions about this problem on the Zulip already. If not intended, it's definitely a know behavior.</p>\n</blockquote>\n<p>Could you link me to a topic? I searched for <code>rcases</code> and none of the existing topics I found talked about this exact problem.</p>",
        "id": 371667895,
        "sender_full_name": "David Ang",
        "timestamp": 1688290072
    },
    {
        "content": "<p>See eg <a href=\"#narrow/stream/287929-mathlib4/topic/Lean.204.20adds.20variable.20to.20args.20for.20no.20reason\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Lean.204.20adds.20variable.20to.20args.20for.20no.20reason</a></p>",
        "id": 371668933,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688290371
    },
    {
        "content": "<p>This is not specific to <code>rcases</code> at all.</p>",
        "id": 371668970,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688290382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464700\">David Ang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rcases.20modifies.20assumptions/near/371667409\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rcases.20modifies.20assumptions/near/371585085\">said</a>:<br>\nI think it’s fine that <code>rcases</code> touches <code>h</code>, but once the lemma proof ends Lean can perhaps find out exactly which assumptions are actually used (and not just modified) and delete the rest.</p>\n</blockquote>\n<p>I've had this thought too, but it seems like it would be complicated to implement and probably not possible with the current tactic architecture.  <code>rcases</code> (and <code>cases</code> and <code>induction</code> and ...) works by reverting all the local hypotheses that depend on the given variable, computing a motive from that, and applying the variable's type's recursor, and then intro-ing variables in the resulting goals to make them look like the obvious results of a case analysis. Remember that tactics are constructing partial proof terms -- reverting variables causes them to be used, even if they're not \"used\". To eliminate these used but \"unused\" variables, you'd need to go back and change the proof terms. It doesn't seem impossible, but I don't think you can do it without re-engineering much more than just individual tactics.</p>",
        "id": 371686072,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688294592
    },
    {
        "content": "<p>Another thread <a href=\"#narrow/stream/270676-lean4/topic/.60induction.60.20tactic.20changes.20type.20signature.3F/near/338448701\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60induction.60.20tactic.20changes.20type.20signature.3F/near/338448701</a></p>",
        "id": 371686440,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688294704
    },
    {
        "content": "<p>And another <a href=\"#narrow/stream/270676-lean4/topic/Auto.20include.20variables/near/366740413\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Auto.20include.20variables/near/366740413</a></p>",
        "id": 371686747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688294768
    },
    {
        "content": "<p>Also, regardless of whether the removal of \"unnecessary\" hypothesis can be easily implemented or not, my preference would be that, once you begin the proof, <em>everything</em> in the infoview survives the final term.</p>",
        "id": 371697992,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1688297521
    },
    {
        "content": "<p>I prefer to remove by hand \"unused\" hypotheses, than to leave it to an automated process.  Of course, I would also very much welcome an \"unused hypotheses\" linter that would highlight these hypotheses automatically!</p>",
        "id": 371698061,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1688297525
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6594\">#6594</a> is another example of this coming up</p>",
        "id": 385437237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692183541
    },
    {
        "content": "<p>Do we have a tracking issue for this?</p>",
        "id": 385437573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692183689
    }
]