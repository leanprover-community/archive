[
    {
        "content": "<p>There's currently a diamond on <code>DecidableEq (Fin n)</code>. One comes from Core (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instDecidableEqFin#doc\">docs#instDecidableEqFin</a>), the other one comes from <code>LinearOrder (Fin n)</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instDecidableEq#doc\">docs#instDecidableEq</a>). What should we do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instDecidableEqFin</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">instDecidableEq</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 392849565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695573301
    },
    {
        "content": "<p>Isn't the decidable eq on linear orders free to set for this reason?</p>",
        "id": 392849857,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695573550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> LinearOrder (Fin _)</p>",
        "id": 392849865,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695573573
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fin/Basic.html#Fin.instLinearOrderFin\">Fin.instLinearOrderFin</a></p>",
        "id": 392849866,
        "sender_full_name": "loogle",
        "timestamp": 1695573574
    },
    {
        "content": "<p>Yeah sure, but both decidability instances do \"the same thing\" by reducing <code>x = y</code> for <code>x y : Fin n</code> to <code>x.val = y.val</code>. They just do it slightly differently.</p>",
        "id": 392849968,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695573647
    },
    {
        "content": "<p>I think the problem here is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrder.liftWithOrd#doc\">docs#LinearOrder.liftWithOrd</a></p>",
        "id": 392853683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695576761
    },
    {
        "content": "<p>That should be taking <code>DecidableEq</code> as an argument, probably</p>",
        "id": 392853728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695576815
    },
    {
        "content": "<p>Though changing the core implementation to be defeq by coincidence seems pretty reasonable too</p>",
        "id": 392853829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695576891
    },
    {
        "content": "<p>I would agree that liftWithOrd should be fixed</p>",
        "id": 392869612,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695591348
    },
    {
        "content": "<p>I suspect the default implementation there is going to be the right one for everything except weird instances in core</p>",
        "id": 392872618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695594771
    }
]