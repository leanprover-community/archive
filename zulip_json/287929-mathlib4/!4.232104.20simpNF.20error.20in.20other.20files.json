[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2104\">!4#2104</a> there were simpNF linting errors in files that seem unrelated to the one that has been ported. One such case boils down to the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span> <span class=\"c1\">-- just an import to get the linter</span>\n\n<span class=\"c1\">-- File one</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">PUnit</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">PUnit.unit</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lemma₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c1\">-- succeeds: lemma₁ is in simpNF.</span>\n\n\n<span class=\"c1\">-- File two</span>\n<span class=\"kd\">class</span> <span class=\"n\">BooleanRing</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lemma₂</span> <span class=\"o\">[</span><span class=\"n\">BooleanRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">BooleanRing.mul_self</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">BooleanRing</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">only</span> <span class=\"n\">simpNF</span> <span class=\"c1\">-- fail: lemma₁ is *not* in simpNF anymore.</span>\n</code></pre></div>\n<p>i.e. after the instance <code>BooleanRing PUnit</code> is imported, previous simp lemmas simplify further than they did when they were proven.</p>\n<p>What's the point of action here? Removing <code>@[simp]</code> from either lemma seems not ideal, but the <code>simpNF</code>-linter is also kinda right when looking at the entire mathlib...</p>",
        "id": 355276069,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1683066349
    },
    {
        "content": "<p>I think the argument goes that <code>rfl</code> lemmas are always worth keeping, so just no-lint the rfl lemma</p>",
        "id": 355276418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683066510
    },
    {
        "content": "<p>I have to check tomorrow, but there were a lot of files and lemmas affected. I hope I don't have to nolint all of them.</p>",
        "id": 355276562,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1683066605
    },
    {
        "content": "<p>Yeah, <code>simpNF</code> really should be taught about the difference between <code>simp</code> and <code>dsimp</code> lemmas.</p>",
        "id": 355276574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683066607
    },
    {
        "content": "<p>Hmm, would that just amount to a check in<br>\n<a href=\"https://github.com/leanprover/std4/blob/6006307d2ceb8743fea7e00ba0036af8654d0347/Std/Tactic/Lint/Simp.lean#L113-L129\">https://github.com/leanprover/std4/blob/6006307d2ceb8743fea7e00ba0036af8654d0347/Std/Tactic/Lint/Simp.lean#L113-L129</a><br>\nthat <code>lhs</code> and <code>rhs</code> are defEq or something?</p>",
        "id": 355277609,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1683067104
    },
    {
        "content": "<p>That would work, although you can hopefully just fetch the data of whether it's a <code>dsimp</code> lemma or not.</p>",
        "id": 355278148,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683067351
    },
    {
        "content": "<p>That's not enough; lemmas which <em>can</em> be proved by <code>rfl</code> don't count as dsimp lemmas unless they're <em>actually</em> proved by <code>rfl</code></p>",
        "id": 355279033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683067688
    },
    {
        "content": "<p>I see. And the simpNF linter should never check/report any dsimp lemma? or what would be the right condition?</p>",
        "id": 355334902,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1683095912
    },
    {
        "content": "<p>It shouldn't report that a simp lemma simplifies the LHS of a dsimp lemma. It's fine if it checks that a dsimp lemma doesn't simplify the LHS of a dsimp lemma (which rarely ever occurs, to be quite fair. The only example I can think of is the pairs <code>coe_bundled_function : ⇑f = g</code> and <code>bundled_function_apply : ⇑f a = g a</code>).</p>",
        "id": 355335161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683096037
    }
]