[
    {
        "content": "<p>I am experiencing big slowdowns that I believe to be related to quotients and I would like to know how I can improve the situation. The following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is extracted from the work on Dirichlet unit's theorem. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Torsion</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.NumberField.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">torsion</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span> <span class=\"n\">CommGroup.torsion</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">300000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">100000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"o\">((</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">torsion</span> <span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- 8 sec.</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">800000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">70000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"bp\">‚àè</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">torsion</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àè</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- 22 sec.</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">QuotientGroup.mk'_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">map_prod</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"o\">(</span><span class=\"n\">torsion</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"n\">Finset.univ</span>\n</code></pre></div>\n<p>The first example takes about 8 sec. on my machine which is still okay, but that's only for the statement to compile. The second example takes more than 20 sec. and also is the only way I have found to prove this result (<code>map_prod</code> should work directly here, I think, without having to do the <code>rw</code> first and without using <code>convert</code>). </p>\n<p>Is there anything I can do to speed up things?</p>",
        "id": 382006676,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1691197954
    },
    {
        "content": "<p>There's a <code>with</code> -&gt; <code>let src</code> in Algebra.Group.TypeTags which might be the cause: you could try this change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Additive.addCommMonoid</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toAddMonoid</span> <span class=\"o\">:=</span> <span class=\"n\">Additive.addMonoid</span>\n    <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">Additive.addCommSemigroup.add_comm</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and then you have to compile a few hundred files to see if it made any difference.</p>",
        "id": 382114875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691235044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> do you have some PR where you methodically remove these? There are a bunch in <code>Algebra.Group.TypeTags</code> on <code>master</code>.</p>",
        "id": 382115173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691235122
    },
    {
        "content": "<p>Only in  the <code>Data</code> folder.</p>",
        "id": 382115336,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691235159
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a> actually has some outside there but not this one</p>",
        "id": 382115662,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691235244
    },
    {
        "content": "<p>That change didn't speed it up: next one is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive \"Additive units of an additive monoid form an additive group.\"]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">Inv.inv</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"n\">u.inv_val</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>in <code>Algebra.Group.Units</code>. And then wait ages for it to compile again. etc etc.</p>",
        "id": 382117986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691235832
    },
    {
        "content": "<p>Trying this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toDivInvMonoid</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">toMonoid</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">toSemigroup</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n          <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">*</span> <span class=\"bp\">¬∑</span><span class=\"o\">)</span>\n          <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span>\n        <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span>\n      <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"n\">u.inv_val</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 382119722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691236142
    },
    {
        "content": "<p>Oh I shouldn't have given <code>mul</code> explicitly. Now trying this (but also going out)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive \"Additive units of an additive monoid form an additive group.\"]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toDivInvMonoid</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">toMonoid</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">toSemigroup</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n          <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span>\n        <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span>\n      <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"n\">u.inv_val</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 382126882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691237771
    },
    {
        "content": "<p>It's slowly getting quicker. Next problem is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">group</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">M‚ÇÅ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M‚ÇÅ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‚Åª¬π</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">‚Åª¬π</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">div</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zpow</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">M‚ÇÇ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">hf.divInvMonoid</span> <span class=\"n\">f</span> <span class=\"n\">one</span> <span class=\"n\">mul</span> <span class=\"n\">inv</span> <span class=\"n\">div</span> <span class=\"n\">npow</span> <span class=\"n\">zpow</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">hf.forall.2</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>in <code>Algebra.Group.InjSurj</code></p>",
        "id": 382213534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691263099
    },
    {
        "content": "<p>Now </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">toDivInvMonoid</span> <span class=\"o\">:=</span> <span class=\"n\">hf.divInvMonoid</span> <span class=\"n\">f</span> <span class=\"n\">one</span> <span class=\"n\">mul</span> <span class=\"n\">inv</span> <span class=\"n\">div</span> <span class=\"n\">npow</span> <span class=\"n\">zpow</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">hf.forall.2</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and I'm going out again. Sorry things are so slow!</p>",
        "id": 382213632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691263153
    },
    {
        "content": "<p>Kevin if you like playing with this kind of stuff, can we send you requests for speed up ? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 382213838,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691263246
    },
    {
        "content": "<p>no, these need to be sent directly to the Lean 4 repo so that the devs begin to understand the problem better. If possible can you make a mathlib-free version first? Thanks. ;-)</p>",
        "id": 382213957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691263310
    },
    {
        "content": "<p>More seriously, here is the very long and protracted method I use to see if the <code>let</code> issue is causing slowdown problems in your file.</p>\n<p>0) Make sure the problem is still there on current <code>master</code> (there have been several PRs recently which make stuff much quicker).</p>\n<p>1) Minimise the problem down to a single short file. Xavier has done a great job of this in his first post but I deleted the second example just so I could concentrate on the first (hopefully progress in the first will also help the second). So the game is to try and find out why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"o\">((</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">torsion</span> <span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is taking 8 seconds and needs raised heartbeats.</p>\n<p>2) We want to look at the number of heartbeats the declaration is using, and also the wall clock time that the declaration is using, so I add some <code>set_option</code> stuff to trace this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span> <span class=\"c1\">-- prints heartbeat count in the declaration (and sets `maxHeartbeats` to infinity)</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">100000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"c1\">-- prints wall clock times in the declaration</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span> <span class=\"c1\">-- makes output much shorter</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"o\">((</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">torsion</span> <span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- 8 sec.</span>\n</code></pre></div>\n<p>The <code>pp.proofs.withType false</code> line makes proofs all appear as <code>_</code>; the default in Lean 4 is that they appear as <code>(_ : \\forall a b c, a + b + c = a + (b + c))</code> and this clutters stuff up immensely, so we swich that off.</p>\n<p>Check that by clicking on various blue lines in the file that you're seeing output such as</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Used 256641 heartbeats, which is greater than the current maximum of 200000.\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Elab.command] [6.939679s] example : Basis (Fin n) ‚Ñ§ (Additive ((ùìû K)À£ ‚ß∏ (torsion K))) :=\n      sorry ‚ñ∂\n</code></pre></div>\n<p>(it was on 8 seconds but I've already started the process with this one; I'm writing this half way through the process). Unfold the triangle in <code> sorry ‚ñ∂</code> in the infoview, and keep unfolding and follow the biggest number. If you see stuff ilke this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>            [] [2.875129s] ‚úÖ Additive.addCommMonoid =?= AddCommGroup.toAddCommMonoid ‚ñ∂\n</code></pre></div>\n<p>then this means \"Lean's typeclass inference system just took 2.8 seconds to verify (that's the tick) that two AddCommMonoid structures were equal by <code>rfl</code>\" and that's the sort of problem which <code>with</code> is causing right now in mathlib.</p>\n<p>3) Put your test file in the <code>Mathlib</code> directory, e.g. my copy is <code>Mathlib/scratch37.lean</code>; this makes it easier to compile on the command line. </p>\n<p>4) Create a new branch off master e.g. I made <code>kbuzzard-torsion-slowness</code>.</p>\n<p>Now exit VS Code for a while. We need to make sure all imports are building, so in this case that's</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Mathlib.GroupTheory.Torsion<span class=\"w\"> </span>Mathlib.NumberTheory.NumberField.Basic\n</code></pre></div>\n<p>Now this is the start of the cycle: we keep repeating these steps until we get bored or strike gold.</p>\n<p>5) Exit VS Code (this might not be necessary but I'm paranoid) and pipe the trace output to a file (remember to change the filename if you've already done steps 5-10 once)</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Mathlib.scratch37<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>traceoutput1.txt\n</code></pre></div>\n<p>This should take about as long as it takes the file to be processed in VS Code, unless you have hundreds of millions of lines of trace, in which case you might want to do a better job of minimising the problem (note that apparently we have <code>extract_goal</code> now, or will have it soon, which will be a great help if you find yourself in this position; use the trace output to find which line of your 20 line tactic proof is the super-slow one and just profile that line instead). Xavier's output is about 4000 lines.</p>\n<p>6) Now fire up VS Code again and open <code>traceoutput1.txt</code> and have a look around. Search for <code>let src := </code>, that's probably a bad <code>with</code>. I've got rid of all the <code>let</code>s in this particular trace with the edits I've already made. One thing that I see in this trace is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">321421</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">CommGroup.toGroup</span> <span class=\"bp\">=?=</span> <span class=\"n\">Units.instGroupUnits</span>\n                            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">321335</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">CommGroup.toGroup</span> <span class=\"bp\">=?=</span> <span class=\"n\">Group.mk</span> <span class=\"n\">_</span>\n                              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">321273</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Units.instCommGroupUnitsToMonoid.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Group.mk</span> <span class=\"n\">_</span>\n                                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">321246</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Group.mk</span> <span class=\"n\">_</span> <span class=\"bp\">=?=</span> <span class=\"n\">Group.mk</span> <span class=\"n\">_</span>\n                                  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">313584</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Group.toDivInvMonoid</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivInvMonoid.mk</span> <span class=\"n\">zpowRec</span>\n                                    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">313522</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">inferInstance.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivInvMonoid.mk</span> <span class=\"n\">zpowRec</span>\n                                      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">313500</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">DivInvMonoid.mk</span> <span class=\"n\">zpowRec</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivInvMonoid.mk</span> <span class=\"n\">zpowRec</span>\n                                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">061008</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">zpowRec</span> <span class=\"bp\">=?=</span> <span class=\"n\">zpowRec</span>\n                                        <span class=\"bp\">...</span>\n                                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">108075</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Monoid.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">=?=</span> <span class=\"n\">Monoid.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span>\n                                        <span class=\"bp\">...</span>\n                                        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">129239</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"o\">{</span>\n                                              <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"n\">DivInvMonoid.div'</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"n\">DivInvMonoid.div'</span> <span class=\"o\">}</span>\n                                        <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Note that by this point</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">313500</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">DivInvMonoid.mk</span> <span class=\"n\">zpowRec</span> <span class=\"bp\">=?=</span> <span class=\"n\">DivInvMonoid.mk</span> <span class=\"n\">zpowRec</span>\n</code></pre></div>\n<p>Lean is spending 0.3 seconds checking that two terms that by now <em>look syntactically equal</em> are equal. This is a symptom of the issue that we're trying to debug. It's only 0.3 seconds but now you have access to the full trace you can just search for <code>DivInvMonoid.mk zpowRec =?= DivInvMonoid.mk zpowRec</code> and see that it's showing up 13 times, so there is 4 seconds of your 8 seconds right now.</p>\n<p>7) Now we have to try a change to see if we can fix it. A few lines above where the equalities become apparently syntactic, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">295745</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">‚úÖ</span> <span class=\"n\">Units.instGroupUnits</span> <span class=\"bp\">=?=</span> <span class=\"n\">CommGroup.toGroup</span>\n</code></pre></div>\n<p>and <code>Units.instGroupUnits =?= CommGroup.toGroup</code> shows up 16 times in the trace, always costing 0.3 seconds; this is the claim that two group structures on the units of something are defeq and it's taking too long. Let's take a look at <code>Units.instGroupUnits</code>. Now this is where it all comes experimental as far as I am concerned, and people like Eric and Matt I think understand better what's going on. I'm going to try changing it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toDivInvMonoid</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">toMonoid</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">toSemigroup</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n        <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">instMulOneClassUnits.one_mul</span>\n        <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">instMulOneClassUnits.mul_one</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"n\">u.inv_val</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and I'm unclear about whether I should make a <code>toDivInvMonoid</code> instance separately. But Ok I've made a change. So now let's compile.</p>\n<p>8) Commit the changes to your branch. </p>\n<p>9) Now we have to compile Lean because we've changed a file high up in the hierarchy. I'll do it on the command line; another possibility is pushing the branch to github, possibly opening a PR (tag it WIP) and letting CI do it (this takes longer if you have a half-decent machine to do the compiling on yourself). Building might take a long time, it all depends on how complex your MWE imports are and how far up in the import tree you were fiddling around)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">Mathlib.GroupTheory.Torsion</span> <span class=\"n\">Mathlib.NumberTheory.NumberField.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">429</span><span class=\"bp\">/</span><span class=\"mi\">1189</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Group.Units</span>\n<span class=\"o\">[</span><span class=\"mi\">433</span><span class=\"bp\">/</span><span class=\"mi\">1189</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Group.InjSurj</span>\n<span class=\"o\">[</span><span class=\"mi\">477</span><span class=\"bp\">/</span><span class=\"mi\">1189</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Group.TypeTags</span>\n<span class=\"o\">[</span><span class=\"mi\">559</span><span class=\"bp\">/</span><span class=\"mi\">1189</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.TypeTags</span>\n<span class=\"o\">[</span><span class=\"mi\">559</span><span class=\"bp\">/</span><span class=\"mi\">1189</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.TypeTags</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>You might want to do <code>time lake buid...</code> if you want to get a feel for how long this part of the process takes.</p>\n<p>10) Go back to step 5. If the file is now quick, open a PR with the branch. If it's still slow, then repeat until either it's quick or you give up.</p>",
        "id": 382360610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691327911
    },
    {
        "content": "<p>Occasionally you might want to compare diffs of traces. This is a pain with the timings in because it means the traces differ on basically every line. You can remove the traces by explaining the problem to ChatGPT, who came up with <code>sed -E 's/\\[[0-9]+\\.[0-9]+s\\]/[s]/g' input_file &gt; output_file</code> (which changes all <code>[0.1234s]</code> to <code>[s]</code>) and then the diffs are far more useful.</p>",
        "id": 382368325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691330072
    },
    {
        "content": "<p>I only skimmed this, but my comment would be that when making these types of changes you should compare <code>#print</code> before and after: sometimes the messy nested syntax is identical to what is generated anyway</p>",
        "id": 382369185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691330334
    },
    {
        "content": "<p>I think I general <code>toFoo := ...</code> is only worth writing if the <code>...</code> isn't a <code>{ ... }</code></p>",
        "id": 382369352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691330394
    },
    {
        "content": "<p>So for example do you think that changing <a href=\"https://github.com/leanprover-community/mathlib4/blob/4412853e2b44449d06f0461dd97599fe7913392b/Mathlib/Algebra/Group/Units.lean#L200-L202\">this</a> <br>\nfrom</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommGroup</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommGroup</span> <span class=\"n\">Œ±</span><span class=\"bp\">À£</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>will have any effect? Oh -- what do you mean by \"isn't a <code>{}</code>\" -- I interpreted as meaning \"isn't empty\" but this might be the mathematician in me coming out.</p>",
        "id": 382370240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691330646
    },
    {
        "content": "<p>I think you want a clean projection onto the parent class. You don't want Lean trying to build it out of pieces from the <code>with</code> including if it is the list of instances specified before the <code>with</code>. If you don't have the parent class that cleanly, it is a sign you should break it out.</p>",
        "id": 382370734,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691330783
    },
    {
        "content": "<p>I think you want to change that for multiple reasons</p>",
        "id": 382371025,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691330863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> that last change took number of heartbeats down from 268578 to 11541 (an order of magnitude) so your problems are now hopefully solved. If you want local access to a fast version quickly then just make the change in the definition of <code>CommGroup Œ±À£</code> above and your file should now be fast.</p>",
        "id": 382372710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691331384
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"bp\">‚àè</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">À£</span> <span class=\"bp\">‚ß∏</span> <span class=\"o\">(</span><span class=\"n\">torsion</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àè</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_prod</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"o\">(</span><span class=\"n\">torsion</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"n\">Finset.univ</span>\n</code></pre></div>\n<p>works fine on my branch now. </p>\n<p>So now we have to do some clean-up. I have made 4 changes in my branch and only one of them fixed the problem (the other changes all made the size of the trace go up slightly in fact). In the past I was just pushing all changes and then Eric was saying \"waitwaitwait, are you sure we need to make all those changes?\". So I'll now start again from master with just the last change I made and see if your file is still fast. If it is I'll make a PR.</p>",
        "id": 382373348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691331567
    },
    {
        "content": "<p>Yes, it just needs that CommGroup fix and the example file is now much faster. Mathlib still compiles locally for me (completely) with the change. I've made a PR and branched off a commit which is currently being benchmarked, so we should be able to compare the result across all mathlib. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6398\">#6398</a> (WIP for now)</p>",
        "id": 382382914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691334139
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6398#issuecomment-1666934052\">Results are in</a>. Several number theory files are faster :D</p>",
        "id": 382418028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691345121
    },
    {
        "content": "<p>Kevin, thanks a lot for all your work and excellent speedup! I can now work in this file without having to wait after each keystroke <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Thanks also for the very enlightening explanation. Next time, I hit a slowdown, I can now try to fix it myself thanks to you.</p>",
        "id": 382454016,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1691365688
    },
    {
        "content": "<p>Can we please make sure that any changes to structures that fiddle with the <code>with</code> in this way come with clear comments about the performance implications, and a warning not to change it? This stuff will decay very quickly otherwise.</p>",
        "id": 382494258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691384208
    },
    {
        "content": "<p>I don't understand the suggestion. Where am I supposed to put this warning in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6398\">#6398</a> ?</p>",
        "id": 382510087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691389842
    },
    {
        "content": "<p>Maybe <code>-- TODO(lean4#XXX): once `with` is fixed, add back `(inferInstance : Group Œ±À£)` </code>?</p>",
        "id": 382545287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691398378
    },
    {
        "content": "<p>Why do we want to add it back? It's been inferred by typeclass inference anyway. We don't write <code>have hG : Group G := inferInstance</code> in the middle of a proof about groups.</p>",
        "id": 382552592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691399832
    },
    {
        "content": "<p>If removing the <code>X with</code> is the helpful thing, then that doesn't require a comment.</p>\n<p>Any situation where adding something (either an <code>X with</code> or a field) that could be removed without breaking something, but would cause a slowdown downstream, needs to be guarded by a comment. That's all I meant.</p>",
        "id": 382555987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691400559
    },
    {
        "content": "<p>Yeah I've got it now. I'll add a note</p>",
        "id": 382557579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691400836
    },
    {
        "content": "<blockquote>\n<p>Why do we want to add it back?</p>\n</blockquote>\n<p>Because removing <code>with</code>s greatly increases the chances of introducing accidental diamonds due to default fields</p>",
        "id": 382577249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691404568
    },
    {
        "content": "<p>I am still a bit confused about how this can happen. The user would have to explicitly delete a <code>nsmul</code> field, or other field with a default, for this to happen, right?</p>",
        "id": 382582366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691405628
    },
    {
        "content": "<p>I'll make a mwe</p>",
        "id": 382582583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691405666
    },
    {
        "content": "<p>Re: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6262\">#6262</a> did you try changing the auto to synthesizing instead of deleting?</p>",
        "id": 382583107,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691405774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">D</span> <span class=\"kd\">extends</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">20</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instC</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span>\n  <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">30</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instD</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">instB</span><span class=\"o\">,</span> <span class=\"n\">instC</span> <span class=\"k\">with</span>\n    <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">40</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- careless `with` removal</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instDBad</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">40</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">instD.c</span> <span class=\"bp\">=</span> <span class=\"n\">instC.c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">instD.b</span> <span class=\"bp\">=</span> <span class=\"n\">instB.b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">instDBad.c</span> <span class=\"bp\">=</span> <span class=\"n\">instC.c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">instDBad.b</span> <span class=\"bp\">=</span> <span class=\"n\">instB.b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 382584035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691405952
    },
    {
        "content": "<p>Suppose <code>boo </code> is field of a class <code> Mummy</code> with  an auto. If you currently have <code>mummy with ‚Ä¶</code> and delete it, then Lean will fall back to the auto for <code>boo</code> instead whatever you carefully put in <code>mummy</code></p>",
        "id": 382584079,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691405963
    },
    {
        "content": "<p>Or what Eric wrote</p>",
        "id": 382584161,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691405984
    },
    {
        "content": "<p>Note that this isn't just caused by carelessly removing a <code>with</code> now; it's also caused by swapping the order of the parents in <code>D</code> in a future refactor (try it and see above)</p>",
        "id": 382584299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691406006
    },
    {
        "content": "<p>Changing <a href=\"https://github.com/leanprover-community/mathlib4/blob/4412853e2b44449d06f0461dd97599fe7913392b/Mathlib/Algebra/Group/Defs.lean#L589\">the default</a> to something like <code>exact Monoid.npow</code> and fallback to  a try this suggestion for <code>npowRec</code> would help.</p>",
        "id": 382587089,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691406578
    },
    {
        "content": "<p>Yikes. Thanks for the explanation Eric.</p>",
        "id": 382587498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691406669
    },
    {
        "content": "<p>Removing all the defaults would also fix this, but be annoying for teaching</p>",
        "id": 382596811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691408769
    }
]