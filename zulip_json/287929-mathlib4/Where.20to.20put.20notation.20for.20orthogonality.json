[
    {
        "content": "<p>I decided to try and add some stuff about factorization systems, and for these I want to be able to write <code>i ⟂ p</code> to mean that either (1) lifting problems framed by <code>i</code> and <code>p</code> have solutions, i.e. <code>HasLiftingProperty i p</code>, or that (2) lifting problems framed by <code>i</code> and <code>p</code> have <em>unique</em> solutions. So (1) is used in the notion of a weak factorization system and (2) in an orthogonal factorization system. I have seen people frequently write <code>⟂</code> for the \"weak orthogonality\" notion of (1), and beyond these two there are also more notions of orthogonality in use in category theory (eg orthogonality of objects in a triangulated category). Also for (1) and (2) we inevitably want to talk about single morphisms which are orthogonal to a <em>class</em> of morphisms, so not only are orthogonality relations common but heterogeneous ones (heterogeneous in the sense of HAdd vs Add); heterogeneity is appealing to me also because it gives a nice way of talking about lifting problems that happen across an adjunction, or more generally across a profunctor. As far as I can tell, the only place orthogonality comes up in mathlib at the moment is in vector spaces. I would like to create a notation and typeclass for an orthogonality relation (and a heterogeneous orthogonality one). Where should I put this?</p>",
        "id": 400411498,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699206731
    },
    {
        "content": "<p>I ask because I'm not really familiar with the typeclass/notation hierarchy of mathlib and it seems intricate but robust(?)</p>",
        "id": 400411515,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699206765
    },
    {
        "content": "<p>Also, it occurs to me that when we consider an orthogonality relation on first order things (vectors, morphisms, objects) we immediately start wanting to consider an orthogonality relation on second order things (submodules, classes of morphisms, classes of objects). And on these we want to consider the left and right orthogonal complements Xᗮ and ᗮX of second order things, which form a galois connection. I'm not sure how to fit this into a typeclass framework but I would appreciate suggestions</p>",
        "id": 400411718,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699207004
    },
    {
        "content": "<p>Just noting we already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.IsOrtho#doc\">docs#Submodule.IsOrtho</a></p>",
        "id": 400417055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699211637
    },
    {
        "content": "<p>Yeah, if there were no existing instances of the notion of orthgonality I wouldn't sweat structuring the code as much</p>",
        "id": 400417107,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699211666
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 400417139,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699211711
    },
    {
        "content": "<p>Edited above</p>",
        "id": 400417155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699211732
    },
    {
        "content": "<p>In my draft implementation of model categories (Lean3), I defined a predicate <code>morphism_property.has_lifting_property</code> taking two <code>morphism_properties</code> as inputs. Given a class of morphisms <code>G</code> (i.e. <code>morphism_property</code>), I defined two others <code>morphism_property</code> <code>G.llp_with</code> and <code>G.rlp_with</code> in order to denote those morphisms which have the left (resp. right) lifting property with respect to <code>G</code>. Then, to say that a morphism is \"(weak) left orthogonal to <code>G</code>\" means that it belongs to <code>G.llp_with</code>. Then, I am not so sure we need to introduce a heterogeneous notation in this situation.<br>\n(See <a href=\"https://github.com/joelriou/homotopical_algebra/blob/main/src/for_mathlib/category_theory/lifting_properties/morphism_property.lean\">https://github.com/joelriou/homotopical_algebra/blob/main/src/for_mathlib/category_theory/lifting_properties/morphism_property.lean</a> )</p>",
        "id": 400431516,
        "sender_full_name": "Joël Riou",
        "timestamp": 1699228124
    },
    {
        "content": "<p>I'll take a look at that draft. I understand that it's possible to work only with the homogenous version of the relation, but the heterogenous one feels closer to the natural language use of the terms \"orthogonal\" and \"has the _ lifting property\". Also, I have been interested in thinking about heterogenous lifting properties across profunctors recently (in non-lean math) and so I'm inclined to set up the notation in a way that would allow me to talk about these</p>",
        "id": 400431860,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699228560
    },
    {
        "content": "<p>I had a similar setup.<br>\n<a href=\"https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/category_theory/model/wfs.lean\">https://github.com/rwbarton/lean-model-categories/blob/top-dev/src/category_theory/model/wfs.lean</a><br>\nIf mathlib had a notation like <code>f \\in C</code> for simply <code>C f</code>, then it would be pretty natural to write e.g. <code>f \\in llp S</code>.</p>",
        "id": 400435877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1699231480
    },
    {
        "content": "<p>I'm going to tentatively put it in Mathlib.Init.Algebra.Classes, I guess?</p>",
        "id": 400594881,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699297755
    },
    {
        "content": "<p>I think that's a bad place, most of Init is vestigial stuff from Lean3 core</p>",
        "id": 400598811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699299476
    },
    {
        "content": "<p>Where else would you suggest?</p>",
        "id": 400598903,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699299511
    },
    {
        "content": "<p>also to be clear, where to put it is orthogonal (heh) to whether it should have both a heterogeneous and homogeneous version or just a homogeneous version</p>",
        "id": 400599167,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699299626
    },
    {
        "content": "<p>Maybe I could put it with galois connection stuff, since orthogonality relations usually induce a galois connection?</p>",
        "id": 400599227,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699299655
    },
    {
        "content": "<p>Also, just looking at other places where there's notation in mathlib, the <code>HImp</code> class that gives notation for heyting algebra implication clashes with the naming convention of <code>HAdd</code>, <code>HSub</code>, <code>HEq</code>, etc</p>",
        "id": 400601595,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699300747
    },
    {
        "content": "<p><code>H</code> for Heyting vs <code>H</code> for heterogeneous</p>",
        "id": 400601624,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699300765
    },
    {
        "content": "<p>I wouldn't bother with the heterogenous version</p>",
        "id": 400602378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699301023
    },
    {
        "content": "<p>Heterogeneous operators have proven pretty useless so far, except for making our life harder with weaker unification. I think we should scrap them back.</p>",
        "id": 400607782,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699303610
    },
    {
        "content": "<p>They were useful for <code>Matrix</code>, but not overwhelmingly so.</p>",
        "id": 400608036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699303748
    },
    {
        "content": "<p>Either way, I think the takeaway is that heterogeneous operations came from Lean core not mathlib, and mathlib doesn't really make use of them, or necessarily ever intend to.</p>",
        "id": 400608121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699303794
    },
    {
        "content": "<p>Should we drop <code>HSMul</code> then?</p>",
        "id": 400663195,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699332543
    },
    {
        "content": "<p>Just so you know, in <code>kmill_lean_fixes_2778</code> I'm putting <code>HSMul</code> onto the same type coercion algorithm as the rest of the operators, once <a href=\"https://github.com/leanprover/lean4/pull/2778\">lean4#2778</a> is merged after a bit more work. This makes it so that in <code>a • b</code> the expected type influences the type of <code>b</code>, and also that the type of <code>b</code> influences the type of the entire algebraic expression.</p>",
        "id": 400669982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699337263
    }
]