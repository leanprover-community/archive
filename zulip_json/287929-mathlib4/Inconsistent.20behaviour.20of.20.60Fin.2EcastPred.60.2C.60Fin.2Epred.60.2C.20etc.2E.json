[
    {
        "content": "<p>Fin.castPred embeds <code>Fin (n + 2)</code> into <code>Fin (n + 1)</code> by reducing <code>last (n + 1)</code> to <code>last n</code>. It's defined as <code>Fin.predAbove (last n)</code>.</p>\n<p>However, <code>Fin.pred</code> (which to be fair is more fundamental - the order in which these functions are built also confuses me) more or less acts similarly, except instead it requires a proof that its input isn't 0 before reducing it. But it would be as easy for it to reduce everything by 1, and send 0 to 0 (and this would be more similar to the behaviour of Nat.pred which also doesn't filter its input).</p>\n<p>This came from thinking about <code>Fin.exists_succAbove_eq</code>, which gurantees the existing of a z for x, y non-equal such that y.succAbove z = x. But we don't have an explictly way of getting such a thing even though it is well-defined and calculable.</p>\n<p>There are other issues around here: for instance, <code>succAbove</code> and <code>predAbove</code> are highly analogous yet have inconsistent definitions: in particular the former branches on <code>i.1 &lt; p.1</code>yet the latter branches on <code>castSucc p &lt; i</code> (where the roles of p and i are swapped here - the weirdness is the use of the values in the former and the <code>Fin</code> lt in the latter). In general I am unable to discern the design goals here - it seems to come about in part because some functions (like <code>castSucc</code> or <code>pred</code> are defined in <code>std</code> wheras others are extensions in <code>mathlib</code>. It is all a bit annoying to use!</p>",
        "id": 407927431,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702549072
    },
    {
        "content": "<p>Regarding the latter - arguably there is a cast for redefining <code>predAbove</code> in these terms. It would make theorems like <code>Fin.succAbove_predAbove</code> more useful!</p>",
        "id": 407930103,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702549954
    },
    {
        "content": "<p>You also have issues like e.g. <code>Fin.predAbove_below</code> rewrites predAbove in terms of a funtion <em>which is itself defined in terms of predAbove</em>, wheras <code>Fin.predAbove_above</code> correctly unfolds the definition!</p>",
        "id": 407941425,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702553835
    },
    {
        "content": "<p>For an example of what I mean, here's what some alternative definitions could look like.</p>\n<p>Whether you use <code>pred'</code> or <code>pred</code> is much of a muchness (it is somewhat useful to match definitions as much as possible, perhaps), but I think a) <code>castPred'</code> would be more consistent than <code>castPred</code>, <code>predAbove'</code> is a much better approach than <code>predAbove</code>.</p>\n<p>In general I just think there should be a consistent approach here, where currently there is a lot of friction in my experience.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Fin</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pred'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">i.pred</span> <span class=\"n\">h.ne.symm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">castPred'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">castLT</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">predAbove'</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">j.pred</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span>\n  <span class=\"k\">else</span> <span class=\"n\">j.castLT</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">hij.lt_or_lt.resolve_right</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_last</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_below</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hij'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">hij.ne</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">predAbove'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij'</span> <span class=\"bp\">=</span> <span class=\"n\">j.castLT</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hij</span> <span class=\"o\">(</span><span class=\"n\">le_last</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_gt</span> <span class=\"n\">hij</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_above</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hij'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">hij.ne.symm</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">predAbove'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij'</span> <span class=\"bp\">=</span> <span class=\"n\">j.pred</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hij</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span> <span class=\"o\">:=</span> <span class=\"n\">dif_pos</span> <span class=\"n\">hij</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succAbove_predAbove'</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">succAbove</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">predAbove'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hij.lt_or_lt</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_below</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">succAbove_castLT</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_above</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">succAbove_pred</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_succAbove</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succAbove</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">succAbove_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">predAbove'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">succAbove</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">succAbove_ne</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt_or_lt</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_below</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">castLT_succAbove</span> <span class=\"o\">((</span><span class=\"n\">succAbove_lt_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_above</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pred_succAbove</span> <span class=\"o\">(((</span><span class=\"n\">lt_succAbove_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">))]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_zero_eq_pred</span> <span class=\"o\">:</span> <span class=\"n\">predAbove'</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span>\n  <span class=\"n\">exact</span> <span class=\"n\">predAbove'_above</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_lt_last_eq_predAbove</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">predAbove'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hij</span> <span class=\"bp\">=</span> <span class=\"n\">predAbove</span> <span class=\"o\">(</span><span class=\"n\">i.castPred</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hij.lt_or_lt</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_below</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">predAbove_below</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">castSucc_castPred</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h.le</span><span class=\"o\">),</span> <span class=\"n\">ext_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">coe_castPred</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h.trans</span> <span class=\"n\">hi</span><span class=\"o\">),</span> <span class=\"n\">coe_castLT</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_above</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">predAbove_above</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">castSucc_castPred</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_last_eq_castLT</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">predAbove'</span> <span class=\"o\">(</span><span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"n\">hij</span> <span class=\"bp\">=</span> <span class=\"n\">j.castLT</span> <span class=\"o\">(</span><span class=\"n\">val_lt_last</span> <span class=\"n\">hij</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">predAbove'_below</span> <span class=\"o\">(</span><span class=\"n\">Ne.lt_top</span> <span class=\"n\">hij</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_last_eq_castPred</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">predAbove'</span> <span class=\"o\">(</span><span class=\"n\">Fin.last</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"n\">hij</span> <span class=\"bp\">=</span> <span class=\"n\">j.castPred</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_last_eq_castLT</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">coe_castPred</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">val_lt_last</span> <span class=\"n\">hij</span><span class=\"o\">),</span> <span class=\"n\">coe_castLT</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Fin</span>\n</code></pre></div>",
        "id": 407952619,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702558073
    },
    {
        "content": "<p>Compare <code>succAbove_predAbove'</code> and <code>predAbove'_succAbove</code> to <code>succAbove_predAbove</code> and <code>predAbove_succAbove</code> and you will see why I think this is a better definition.</p>",
        "id": 407953067,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702558210
    },
    {
        "content": "<p>(It might also be the case that we <em>also</em> want something that does what <code>predAbove</code> currently does. The point is that there are a few things you could do, but no consistent approach.)</p>",
        "id": 407967194,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702562834
    },
    {
        "content": "<p>I also think that there's some issues with <code>insertNth</code>. I have some real type resolution issues here: in particular the fact that <code>succ i</code> is not defeq to <code>succAbove 0 i</code>causes some big problems.</p>",
        "id": 408048457,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702588906
    },
    {
        "content": "<p>Kinda don't know where to document these bugs/weirdnesses but there's something quite fragile about this part of the library that could do with an expert looking at it. It's related I think to the fact that you can only say that <code>cons = insertNth 0</code> for homogenous tuples - \"inserting in a different order\", which on some level is the primary thing I am interested in, can get real twisted round.</p>",
        "id": 408049072,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702589072
    },
    {
        "content": "<p>Which at its core I think possibly reflects a deficiency with <code>succAboveCases</code> as an elaborator.</p>",
        "id": 408050017,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702589409
    },
    {
        "content": "<p>I think I've come up with an even better definition of <code>predAbove</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_unique_succAbove_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">Fin.succAbove</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">h.lt_or_lt.by_cases</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hlt</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">succAbove_castLT</span> <span class=\"n\">hlt</span><span class=\"o\">,</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove_right_injective</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">succAbove_castLT</span> <span class=\"n\">hlt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span><span class=\"o\">)⟩)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hlt</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">succAbove_pred</span> <span class=\"n\">hlt</span><span class=\"o\">,</span>\n    <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove_right_injective</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">succAbove_pred</span> <span class=\"n\">hlt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span><span class=\"o\">)⟩)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">predAbove'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Fintype.choose</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Fin.exists_unique_succAbove_eq</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succAbove_predAbove'</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">y.succAbove</span> <span class=\"o\">(</span><span class=\"n\">y.predAbove'</span> <span class=\"n\">x</span> <span class=\"n\">hij</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.choose_spec</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Fin.exists_unique_succAbove_eq</span> <span class=\"n\">hij</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_below</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hij'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hij.ne</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">y.predAbove'</span> <span class=\"n\">x</span> <span class=\"n\">hij'</span> <span class=\"bp\">=</span> <span class=\"n\">x.castLT</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hij</span> <span class=\"o\">(</span><span class=\"n\">le_last</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Fin.succAbove_right_injective</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">succAbove_predAbove'</span><span class=\"o\">,</span> <span class=\"n\">succAbove_castLT</span> <span class=\"n\">hij</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_above</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hij'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hij.ne.symm</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">y.predAbove'</span> <span class=\"n\">x</span> <span class=\"n\">hij'</span> <span class=\"bp\">=</span> <span class=\"n\">x.pred</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hij</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Fin.succAbove_right_injective</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">succAbove_predAbove'</span><span class=\"o\">,</span> <span class=\"n\">succAbove_pred</span> <span class=\"n\">hij</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_predAbove'_below</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hij'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hij.ne</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y.predAbove'</span> <span class=\"n\">x</span> <span class=\"n\">hij'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_below</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">coe_castLT</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_predAbove'_above</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hij'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">hij.ne.symm</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y.predAbove'</span> <span class=\"n\">x</span> <span class=\"n\">hij'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_above</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">coe_pred</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predAbove'_succAbove</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succAbove</span> <span class=\"n\">i</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">succAbove_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">predAbove'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">succAbove</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">succAbove_ne</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt_or_lt</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_below</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">castLT_succAbove</span> <span class=\"o\">((</span><span class=\"n\">succAbove_lt_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove'_above</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pred_succAbove</span> <span class=\"o\">(((</span><span class=\"n\">lt_succAbove_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">))]</span>\n</code></pre></div>",
        "id": 408156998,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702635748
    },
    {
        "content": "<p>This has the advantage of defining it in terms of its characteristic property - it's never correct to unpack the definition but you don't need to.</p>",
        "id": 408157330,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702635859
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">insertNth_apply_ne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">insertNth</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">predAbove</span><span class=\"bp\">!</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"n\">hij</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">succAbove_predAbove</span><span class=\"bp\">!</span> <span class=\"n\">hij</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insertNth_apply_succAbove</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">insertNth_apply</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">insertNth</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">predAbove</span><span class=\"bp\">!</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">eq_or_ne</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insertNth_apply_same</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">insertNth_apply_ne</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Further \"this would be a real useful change/addition\" evidence.</p>",
        "id": 408188506,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702647597
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">predPAbove</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p.succAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">predAbove</span><span class=\"bp\">!</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">succAbove_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predPAbove_def</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p.predPAbove</span> <span class=\"n\">i</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">p.succAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">predAbove</span><span class=\"bp\">!</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">succAbove_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succAbove_of_succAbove_predPAbove</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p.succAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span> <span class=\"o\">(</span><span class=\"n\">p.predPAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predPAbove_def</span><span class=\"o\">,</span> <span class=\"n\">succAbove_predAbove</span><span class=\"bp\">!</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predPAbove_of_succAbove_predPAbove</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p.succAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">predPAbove</span> <span class=\"o\">(</span><span class=\"n\">p.predPAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">predPAbove_def</span><span class=\"o\">,</span> <span class=\"n\">succAbove_predAbove</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">predAbove</span><span class=\"bp\">!</span><span class=\"n\">_succAbove</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predPAbove_predAbove</span><span class=\"bp\">!</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hij'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hij.symm</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y.predPAbove</span> <span class=\"o\">(</span><span class=\"n\">y.predAbove</span><span class=\"bp\">!</span> <span class=\"n\">x</span> <span class=\"n\">hij</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x.predAbove</span><span class=\"bp\">!</span> <span class=\"n\">y</span> <span class=\"n\">hij'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">predPAbove_def</span><span class=\"o\">,</span> <span class=\"n\">succAbove_predAbove</span><span class=\"bp\">!</span> <span class=\"n\">hij</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predPAbove_predPAbove_predPAbove</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x.predPAbove</span> <span class=\"o\">(</span><span class=\"n\">y.predPAbove</span> <span class=\"o\">(</span><span class=\"n\">y.predAbove</span><span class=\"bp\">!</span> <span class=\"n\">x</span> <span class=\"n\">hij</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y.predAbove</span><span class=\"bp\">!</span> <span class=\"n\">x</span> <span class=\"n\">hij</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">predPAbove_predAbove</span><span class=\"bp\">!</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">predPAbove_predAbove</span><span class=\"bp\">!</span> <span class=\"n\">hij.symm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predPAbove_below</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p.succAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">p.predPAbove</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">castLT</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">le_last</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predPAbove_def</span><span class=\"o\">,</span> <span class=\"n\">predAbove</span><span class=\"bp\">!</span><span class=\"n\">_below</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predPAbove_above</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.succAbove</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">p.predPAbove</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">pred</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne.symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predPAbove_def</span><span class=\"o\">,</span> <span class=\"n\">predAbove</span><span class=\"bp\">!</span><span class=\"n\">_above</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">succAbove_predPAbove_equiv</span> <span class=\"o\">:</span> <span class=\"n\">Equiv.Perm</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p.succAbove</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p.predPAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">p.succAbove</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p.predPAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">predPAbove_of_succAbove_predPAbove</span><span class=\"o\">,</span> <span class=\"n\">succAbove_of_succAbove_predPAbove</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">predPAbove_of_succAbove_predPAbove</span><span class=\"o\">,</span> <span class=\"n\">succAbove_of_succAbove_predPAbove</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">predPAbove_eq</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">}:</span>\n<span class=\"n\">predPAbove</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">predAbove</span> <span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">predAbove</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">H</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">predPAbove_above</span> <span class=\"o\">((</span><span class=\"n\">succAbove_below</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">predPAbove_below</span> <span class=\"o\">((</span><span class=\"n\">succAbove_above</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_lt</span> <span class=\"n\">H</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span>\n    <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_lt</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">castSucc_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Re-implemented our existing \"predAbove\" in terms of this new utlity - it behaves somewhat better I think.</p>",
        "id": 408278673,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702686753
    },
    {
        "content": "<p>I really ought to make a PR out of all this.</p>",
        "id": 408278692,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702686763
    },
    {
        "content": "<p>But I'm not sure what would be most useful.</p>",
        "id": 408278709,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702686771
    },
    {
        "content": "<p>I do not have a strong opinion about this, but if you want to try this new design, you may test it with the proof of the simplicial relations, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.%CE%B4_comp_%CE%B4\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/AlgebraicTopology/SimplexCategory.html#SimplexCategory.%CE%B4_comp_%CE%B4</a> and similar lemmas, which make extensive use of <code>succAbove</code>and <code>predAbove</code>.</p>",
        "id": 408319576,
        "sender_full_name": "Joël Riou",
        "timestamp": 1702715475
    },
    {
        "content": "<p>Thanks, that's very useful.</p>",
        "id": 408322546,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702717711
    },
    {
        "content": "<p>Given the amount of unfolding definitions and case bashing going on here,  I definitely think there's room for improvement. It's also useful to see the interpretation of our current predAbove as the degeneracy map - it makes a lot of sense!</p>",
        "id": 408323962,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702718953
    },
    {
        "content": "<p>Indeed I somewhat suspect that the relations I had very ugly proofs of are precisely the simplicial relations... which would be why they occurred at all.</p>",
        "id": 408325362,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702720128
    },
    {
        "content": "<p>Note that using <code>Fintype.choose</code> makes your definition O(n) rather than O(1)</p>",
        "id": 408325626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702720328
    },
    {
        "content": "<p>Yes, I suspect, having played around with it a bunch, that the thing to do is just define it using the ite and then prove the nice properties. But it should absolutely be possible to then avoid having to dig into the definitions each time and casesplit.</p>",
        "id": 408325703,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702720407
    },
    {
        "content": "<p>So there are nice interpretations of our existing succAbove and predAbove as the face and degeneracy maps. But I wonder if this map I've defined, predAbove!, has a categorical meaning. It's defined effectively for pairs of distinct elements in [n + 1], and gives you the \"equivalent of one in [n] using the other as a pivot\". Obviously you can do this both ways round so it's a map [n + 1] \\times [n + 1] to [n] \\times [n], with the exception that the two initial coordinates must be distinct. I suppose you could extend it. This must be a thing! It's deeply related to the face and degeneracy maps.</p>",
        "id": 408326329,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702720762
    },
    {
        "content": "<p>It preserves order as well I think?</p>",
        "id": 408326342,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702720777
    },
    {
        "content": "<p>Actually thinking about it as a binary op, the thing you do when they're equal is clearer...</p>",
        "id": 408326787,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702721044
    },
    {
        "content": "<p>Except on the edges...</p>",
        "id": 408326863,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702721105
    },
    {
        "content": "<p>Yeah. Hmm! Still think the design has merit. In particular it's quite difficult to explicitly extract predAbove! (as I define it) from succAbove and predAbove, but easy to go the other way (predAbove! and predAbove contain the same data, but the use of the ne condition gives it a symmetry that makes it easier to control).</p>",
        "id": 408336185,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702727022
    },
    {
        "content": "<p>Started a refactor today in my free time. Lot of gains to be made I think. Found some choices that give some better defeqs.</p>",
        "id": 408494899,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702859469
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/9145\">#9145</a>.</p>",
        "id": 408712353,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702946488
    },
    {
        "content": "<p>That PR looks a little on the large side; I think it includes changes from another PR but doesn't mark it as a dependency?</p>",
        "id": 408856395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702976437
    },
    {
        "content": "<p>Yes, I realised that I branched from the wrong place.</p>",
        "id": 408872018,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702979396
    },
    {
        "content": "<p>I was originally intending to use that other PR, but didn't.</p>",
        "id": 408872156,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702979417
    },
    {
        "content": "<p>What is the syntax for adding dependencies?</p>",
        "id": 408875906,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702979995
    },
    {
        "content": "<p>You can find it in the invisible HTML comment in the default PR description</p>",
        "id": 408876258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702980038
    },
    {
        "content": "<p>Yeah unfortunately I deleted that in my current ones &lt;_&lt;</p>",
        "id": 408876719,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702980107
    },
    {
        "content": "<p><code>- [ ] depends on: #number</code></p>",
        "id": 408877231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702980181
    },
    {
        "content": "<p>Thanks. I might remove the dependency later but I should record it for now.</p>",
        "id": 408877602,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702980233
    }
]