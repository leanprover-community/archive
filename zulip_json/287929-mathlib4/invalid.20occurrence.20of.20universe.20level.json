[
    {
        "content": "<p>I have a universe error which I can't fathom out; this arises when porting Logic.Equiv.Basic.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prodCongr</span> <span class=\"o\">{</span><span class=\"n\">α₁</span> <span class=\"n\">β₁</span> <span class=\"n\">α₂</span> <span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">β₁</span> <span class=\"bp\">≃</span> <span class=\"n\">β₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">×</span> <span class=\"n\">β₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span> <span class=\"bp\">×</span> <span class=\"n\">β₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Prod.map</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">Prod.map</span> <span class=\"n\">e₁.symm</span> <span class=\"n\">e₂.symm</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">equiv.prod_congr</span> <span class=\"n\">Equiv.prodCongr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prodPUnit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">PUnit.unit</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">PUnit.unit</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prodUnique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodCongr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">equivPUnit</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">prodPUnit</span> <span class=\"n\">α</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid occurrence of universe level 'u_3' at 'Equiv.prodUnique', it does not occur at the declaration type, nor it is explicit universe level provided by the user, occurring at expression</span>\n<span class=\"cm\">  Equiv.trans.{max (u_1 + 1) (u_2 + 1), max (u_1 + 1) (u_3 + 1), u_1 + 1}</span>\n<span class=\"cm\">    (prodCongr.{u_1, u_2, u_1, u_3} (Equiv.refl.{u_1 + 1} α) (equivPUnit.{u_2 + 1, u_3 + 1} β)) (prodPUnit.{u_3, u_1} α)</span>\n<span class=\"cm\">at declaration body</span>\n<span class=\"cm\">  fun (α : Type u_1) (β : Type u_2) [Unique β] =&gt; Equiv.trans (prodCongr (Equiv.refl α) (equivPUnit β)) (prodPUnit α)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Any clues?</p>",
        "id": 310908770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668800911
    },
    {
        "content": "<p>It means that the universe level of the <code>PUnit</code> is unspecified in the body of the definition.</p>",
        "id": 310909374,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668801136
    },
    {
        "content": "<p>It could be <code>v+1</code> or <code>v+100</code> or etc. (if <code>β : Type v</code>)</p>",
        "id": 310909413,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668801153
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prodUnique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodCongr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">equivPUnit.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">10</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">prodPUnit</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 310909524,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668801200
    },
    {
        "content": "<p>Not sure where to best put the level annotation.</p>",
        "id": 310909565,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668801219
    },
    {
        "content": "<p>Thanks! This worked in Lean 3. Is this something which needs flagging?</p>",
        "id": 310909596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668801235
    },
    {
        "content": "<p>wooah I went for <code>v + 37</code> of course, and I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"n\">offset</span> <span class=\"n\">threshold</span> <span class=\"o\">(</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span><span class=\"o\">,</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">increase</span> <span class=\"n\">the</span> <span class=\"n\">limit</span> <span class=\"n\">using</span> <span class=\"n\">option</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">maxUniverseOffset</span> <span class=\"bp\">&lt;</span><span class=\"n\">limit</span><span class=\"bp\">&gt;`</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">you</span> <span class=\"n\">are</span> <span class=\"n\">probably</span> <span class=\"n\">misusing</span> <span class=\"kd\">universe</span> <span class=\"n\">levels</span> <span class=\"n\">since</span> <span class=\"n\">offsets</span> <span class=\"n\">are</span> <span class=\"n\">usually</span> <span class=\"n\">small</span> <span class=\"n\">natural</span> <span class=\"n\">numbers</span>\n</code></pre></div>",
        "id": 310909741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668801286
    },
    {
        "content": "<p>lol at \"you are probably misusing universe levels\"</p>",
        "id": 310909840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668801323
    },
    {
        "content": "<p>PS is the name <code>pUnitProd</code> for <code>PUnit × α ≃ α</code>? My understanding is that we're not going for <code>lE</code> but perhaps <code>pUnit</code> is less bad</p>",
        "id": 310910111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668801425
    },
    {
        "content": "<p>I've been using <code>punitProd</code> when it shows up at the beginning of a word... I guess that's not consistent with the current advice</p>",
        "id": 310910368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668801513
    },
    {
        "content": "<p>I like <code>punit</code> too.</p>",
        "id": 310953406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668821855
    },
    {
        "content": "<p>Can someone have a look at PR 649 which typecheck but lints with similar issues?</p>",
        "id": 310956801,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668825172
    },
    {
        "content": "<p>Sorry PR <a href=\"https://github.com/leanprover-community/mathlib/pull/638\">#638</a></p>",
        "id": 310957080,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668825520
    },
    {
        "content": "<p>(On mobile- excuse the bad link)</p>",
        "id": 310957116,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668825560
    },
    {
        "content": "<p>Related question: why is the second style of <code>epi</code> invalid?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">epi</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">⦄,</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epi'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">⦃</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">invalid occurrence of universe level 'u_3' at 'epi'', it does not occur at the declaration type, nor it is explicit universe level provided by the user, occurring at expression</span>\n<span class=\"cm\">  ∀ {Z : Type u_3} ⦃g g' : B → Z⦄,</span>\n<span class=\"cm\">    Eq.{max (u_1 + 1) (u_3 + 1)} (Function.comp.{u_1 + 1, u_2 + 1, u_3 + 1} g f)</span>\n<span class=\"cm\">        (Function.comp.{u_1 + 1, u_2 + 1, u_3 + 1} g' f) →</span>\n<span class=\"cm\">      Eq.{max (u_2 + 1) (u_3 + 1)} g g'</span>\n<span class=\"cm\">at declaration body</span>\n<span class=\"cm\">  fun {A : Type u_1} {B : Type u_2} (f : A → B) =&gt; ∀ {Z : Type u_3} ⦃g g' : B → Z⦄, g ∘ f = g' ∘ f → g = g'</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 358295464,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684085883
    },
    {
        "content": "<p>Does anything change if you make all universes explicit?</p>",
        "id": 358297503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684086755
    },
    {
        "content": "<p>Yes, that's better, thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epi</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">⦄,</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epi'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">⦃</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">⦄,</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Surjective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">epi</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">hg</span>\n    <span class=\"n\">funext</span> <span class=\"n\">b</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"n\">hg</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n    <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">a</span>\n      <span class=\"n\">exact</span> <span class=\"n\">eq_true</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">congrFun</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">epi'</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">hg</span>\n    <span class=\"n\">funext</span> <span class=\"n\">b</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"n\">hg</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n    <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">a</span>\n      <span class=\"n\">exact</span> <span class=\"n\">eq_true</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">congrFun</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 358299893,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684087769
    },
    {
        "content": "<p>Is this expected behaviour or a bug? I'm surprised by it.</p>",
        "id": 358306537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684090680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/invalid.20occurrence.20of.20universe.20level/near/310908770\">said</a>:</p>\n<blockquote>\n<p>I have a universe error which I can't fathom out; this arises when porting Logic.Equiv.Basic.<br>\n&lt;snip&gt;</p>\n</blockquote>\n<p>I am having a similar problem while trying to port Shing Tak Lam's formalization of abstract simplicial complexes from Lean3 to Lean4.  I am also not sure how to adapt Gabriel's solution to my case, I tried sticking universes everywhere but, well, I'm not that good with Lean4 and I just get more errors. I'm getting really sleepy now, so I'll try some more tomorrow and maybe extract a MWE if nothing works.</p>",
        "id": 358565987,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1684182791
    },
    {
        "content": "<p>Universes are a bit of a dark art in Lean 4; I guess the community are slowly learning how to tame them. Is your port part of the official porting effort? If so you could post a link to the PR.</p>",
        "id": 358566238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684182888
    },
    {
        "content": "<p>No, it's part of my translating my personal project into Lean4., though I do hope that abstract simplicial complexes eventually are integrated into mathlib4. (I started learning Lean4 about a week ago, so I'm not sure I should be trusted anywhere near the official porting effort.)</p>",
        "id": 358571498,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1684184936
    },
    {
        "content": "<p>Okay, I think one of my problems is coming from the fact that I define a <code>Bot</code> instance using the empty set, but Lean doesn't know which universe this empty set lives in. How do I tell it \"you know, I mean the smallest element of <code>(Set (Finset α))</code>, it's definitely still in the same universe <code>u</code>\" ? I've been embarrassingly stuck on this particular point for like 30 minutes. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span><br>\nUh, never mind, it was <code>∅ : Set (Finset V) </code> of course.</p>",
        "id": 358626525,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1684215527
    },
    {
        "content": "<p>Okay, the problem seems to have gone away but I have no idea why... I was trying to put a <code>CompleteLattice</code> instance on the type of abstract simplicial complex on a type <code>V</code> (defined as a set of finsets of V with some properties), I had already defined <code>Bot</code> and <code>Top</code> instances, Lean was complaining that there was some universe problem to do with them. So I defined <code>OrderBot</code> and <code>OrderTop</code> instances separately with explicit universe declarations, used them in the definition of the <code>CompleteLattice</code> instance (instead of just using <code>Bot</code> and <code>Top</code> plus proofs of <code>bot_le</code> and <code>le_top</code>), and suddenly Lean is happy ? <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span></p>",
        "id": 358627953,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1684216228
    },
    {
        "content": "<p>Tune back in for the next 5 minutes, when I will try to make the <code>CompleteLattice`` into a </code>CompleteDistribLattice``` and the problem will come back with a vengeance...</p>",
        "id": 358628032,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1684216272
    },
    {
        "content": "<p>Whether or not the <code>epi</code>/<code>epi'</code> behavior was intended, it definitely seems good to me--it's very rare that you want to make a declaration like <code>epi'</code>, and if you do you should be explicit about what you're doing.</p>",
        "id": 358637122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684219848
    },
    {
        "content": "<p>A priori the propositions <code>epi'.{u v w} f</code> are all different for different <code>w</code>--in this case we know they actually are equal.  Though I'm pretty sure your example only proves this for <code>epi'.{u v 0} f</code>. Note you can't even see this by looking at the statement, you have to look at the proof!</p>",
        "id": 358637511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684220008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span>, if you give us a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> we can have a go at debugging.</p>",
        "id": 358644510,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684222277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Thanks, but I solved the problem by myself. I'm still not sure what happened, but Lean is happy, so I am happy.</p>",
        "id": 358651924,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1684224515
    },
    {
        "content": "<p>(In fact it was while trying to produce a MWE short enough for Zulip that I accidentally solved the problem.)</p>",
        "id": 358661475,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1684227198
    },
    {
        "content": "<p>This is actually one of the reasons why we ask for MWE. Note this also happen with real life math conversations.</p>",
        "id": 358729603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684243235
    },
    {
        "content": "<p>@Reid, how would you formalize this exercise?<br>\n<a href=\"/user_uploads/3121/MSYnX4LxpYb76ZXUTEUFPn9r/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/uH24TOCDJnHnZD8u_WT1tAcM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MSYnX4LxpYb76ZXUTEUFPn9r/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MSYnX4LxpYb76ZXUTEUFPn9r/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uH24TOCDJnHnZD8u_WT1tAcM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/uH24TOCDJnHnZD8u_WT1tAcM/image.png\"></a></div>",
        "id": 358784990,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684254336
    },
    {
        "content": "<p>BTW, switching from <code>example</code> to <code>theorem</code> breaks the proofs</p>",
        "id": 358785160,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684254370
    },
    {
        "content": "<p>Just use one universe for everything</p>",
        "id": 358785815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684254541
    },
    {
        "content": "<p>So one has to specify universes more explicitly, and yes, the proofs end up in <code>Sort 1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epi</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">⦄,</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epi'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">⦃</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">⦄,</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Surjective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">epi.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">hg</span>\n    <span class=\"n\">funext</span> <span class=\"n\">b</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"n\">hg</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n    <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">a</span>\n      <span class=\"n\">exact</span> <span class=\"n\">eq_true</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">congrFun</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">epi'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">hg</span>\n    <span class=\"n\">funext</span> <span class=\"n\">b</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"n\">hg</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n    <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">a</span>\n      <span class=\"n\">exact</span> <span class=\"n\">eq_true</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">congrFun</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 358785851,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684254548
    },
    {
        "content": "<p>That's what the author of those texts meant anyways</p>",
        "id": 358785914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684254560
    },
    {
        "content": "<p>Yes, I guess so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">epi</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">hg</span>\n    <span class=\"n\">funext</span> <span class=\"n\">b</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"n\">hg</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n    <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">a</span>\n      <span class=\"n\">exact</span> <span class=\"n\">eq_true</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">congrFun</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">epi'</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">hg</span>\n    <span class=\"n\">funext</span> <span class=\"n\">b</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"n\">hg</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n    <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"kt\">Prop</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">a</span>\n      <span class=\"n\">exact</span> <span class=\"n\">eq_true</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">congrFun</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 358786300,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684254640
    },
    {
        "content": "<p>What would be the proof in other universes? With <code>ulift Prop</code>?</p>",
        "id": 358786460,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684254681
    },
    {
        "content": "<p>You can also make your theorem <code>bar</code> work for any <code>w</code>, by using <code>ULift Prop</code>, and some extra messing about. (Okay, maybe not <code>w = 0</code>, didn't think about it.)</p>",
        "id": 358786467,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684254682
    },
    {
        "content": "<p>(There are also other constructions that work, e.g., take Z to be the quotient of two copies of B by the relation that identifies the two copies of f(a) for each a in A)</p>",
        "id": 358786965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684254782
    },
    {
        "content": "<p>If this was a general notion of epimorphism in a category being specialized to the category of types, then you would be forced to put <code>A</code>, <code>B</code>, <code>Z</code> all in a single universe anyways.</p>",
        "id": 358788587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684255142
    },
    {
        "content": "<p>But the main point I think is that your <code>epi'</code> does not say that \"for all sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> and ...\". Rather, there is a whole family of different <code>epi'.{u,v,w}</code> which say that \"for all <code>w</code>-small sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> and ...\", i.e., you've defined what it means for <code>f</code> to be a <code>w</code>-epimorphism for each <code>w</code>, where <code>w</code> is some universe variable that is totally independent of <code>f</code>.</p>",
        "id": 358789682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684255374
    },
    {
        "content": "<p>In this case the meanings of those statements seem to be</p>\n<ul>\n<li>Every map <code>f</code> is a <code>0</code>-epimorphism (because any two maps into a propositions are equal), while</li>\n<li>a map <code>f</code> is  <code>w+1</code>-epimorphism if and only if it is an epimorphism in the usual sense</li>\n</ul>",
        "id": 358790119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684255460
    },
    {
        "content": "<p>I think we can assume that this is not what the author of those texts had in mind.</p>",
        "id": 358790275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684255499
    },
    {
        "content": "<p>I'm not saying it is a useless thing or that you don't want to do it, just that probably it should not be as easy to do accidentally as writing a <code>Type _</code> on autopilot.</p>",
        "id": 358790459,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684255537
    },
    {
        "content": "<p>Thanks for that detailed explanation</p>",
        "id": 358790733,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684255599
    },
    {
        "content": "<p>So, having one universe for A B Z, and probably just doing Type is good enough. For posterity, this is what I now have, just experimentation that does compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"c1\">-- set_option pp.universes true</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epi</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">⦄,</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">epi'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">⦃</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">⦄,</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Surjective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">epi</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">hg</span>\n    <span class=\"n\">funext</span> <span class=\"n\">b</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"n\">hg</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n    <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ULift.up</span> <span class=\"bp\">$</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ULift.up</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">a</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_true</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">ULift.down</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ULift.down_up</span><span class=\"o\">,</span> <span class=\"n\">ULift.down_up</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">epi'</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">hg</span>\n    <span class=\"n\">funext</span> <span class=\"n\">b</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">congrFun</span> <span class=\"n\">hg</span> <span class=\"n\">a</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n    <span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ULift.up</span> <span class=\"bp\">$</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ULift.up</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">a</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_true</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">ULift.down</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ULift.down_up</span><span class=\"o\">,</span> <span class=\"n\">ULift.down_up</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 358790922,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684255642
    },
    {
        "content": "<p>Probably what you'd really like to write is <code>epi'' f :=</code> \"for all universes <code>w</code> and <code>Z : Type w</code>, and ...\" but Lean doesn't allow this.</p>",
        "id": 358791275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684255715
    }
]