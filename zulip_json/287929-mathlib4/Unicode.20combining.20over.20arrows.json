[
    {
        "content": "<p>I am interested in getting the unicode combining over arrows of  U+20D7 and U+20E1 included into VSCode.</p>\n<p>Not only do they make great notation for vectors.</p>\n<p>Are there VSCode extensions which make more unicode characters available?</p>\n<p>Are there ways of reaching out to Microsoft to ask for the inclusion of particular characters?</p>",
        "id": 405439073,
        "sender_full_name": "Dean Young",
        "timestamp": 1701465285
    },
    {
        "content": "<p>What do you mean by \"include\"?</p>",
        "id": 405439194,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701465356
    },
    {
        "content": "<p>They don't display properly right now; we get something like this:<br>\n<a href=\"/user_uploads/3121/w0a9BLRGjuMNQFCAj5D-FN6H/Screenshot-2023-12-01-at-4.16.19-PM.png\">Screenshot-2023-12-01-at-4.16.19-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/w0a9BLRGjuMNQFCAj5D-FN6H/Screenshot-2023-12-01-at-4.16.19-PM.png\" title=\"Screenshot-2023-12-01-at-4.16.19-PM.png\"><img src=\"/user_uploads/3121/w0a9BLRGjuMNQFCAj5D-FN6H/Screenshot-2023-12-01-at-4.16.19-PM.png\"></a></div>",
        "id": 405439271,
        "sender_full_name": "Dean Young",
        "timestamp": 1701465383
    },
    {
        "content": "<p>That seems most likely to be a font issue</p>",
        "id": 405439303,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701465403
    },
    {
        "content": "<p>Can you paste the code here that you're using? It's a lot easer to debug font issues if we have the text that your font is failing with</p>",
        "id": 405439320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701465419
    },
    {
        "content": "<p>These six factored functors P⃗ , P⃡ , P : D(∞-Grpd₀), p⃗ (𝟙 C), p⃡ (𝟙 X), p are each fully faithful and produce categorical equivalences; we later construct functors B⃗, B⃡, B, b⃗, b⃡, b defined on the essential image of these six, which are inverse to them up to natural isomorphism.\\\\</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">directed</span> <span class=\"n\">path</span> <span class=\"n\">space</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">path</span> <span class=\"n\">space</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">loop</span> <span class=\"n\">space</span> <span class=\"n\">form</span> <span class=\"n\">components</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">functors</span> <span class=\"n\">P</span><span class=\"bp\">⃗</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">⃡</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">are</span> <span class=\"n\">valued</span> <span class=\"k\">in</span> <span class=\"n\">internal</span> <span class=\"n\">categories</span><span class=\"o\">,</span> <span class=\"n\">internal</span> <span class=\"n\">groupoids</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">internal</span> <span class=\"n\">groups</span> <span class=\"n\">respectively.</span>\n<span class=\"bp\">\\</span><span class=\"kd\">begin</span><span class=\"o\">{</span><span class=\"n\">enumerate</span><span class=\"o\">}</span>\n<span class=\"bp\">\\</span><span class=\"n\">item</span> <span class=\"n\">P</span><span class=\"bp\">⃗</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"bp\">∞-</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"bp\">⭢</span> <span class=\"n\">Cat</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"bp\">∞-</span><span class=\"n\">Cat</span><span class=\"o\">)</span>\n<span class=\"bp\">\\</span><span class=\"n\">item</span> <span class=\"n\">P</span><span class=\"bp\">⃡</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"bp\">∞-</span><span class=\"n\">Grpd</span><span class=\"o\">)</span> <span class=\"bp\">⭢</span> <span class=\"n\">Grpd</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"bp\">∞-</span><span class=\"n\">Grpd</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is a sample of the code.</p>\n<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> wait so... maybe I can change the font to one with more extensive unicode support?</p>",
        "id": 405439518,
        "sender_full_name": "Dean Young",
        "timestamp": 1701465524
    },
    {
        "content": "<p>Please put the whole thing within <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 405439695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701465611
    },
    {
        "content": "<p>Just to be clear it's latex code. But the same problem arises with lean code within the VSCode app.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">These</span> <span class=\"n\">six</span> <span class=\"n\">factored</span> <span class=\"n\">functors</span> <span class=\"n\">P</span><span class=\"bp\">⃗</span> <span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">⃡</span> <span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"bp\">∞-</span><span class=\"n\">Grpd₀</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"bp\">⃗</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"bp\">⃡</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">are</span> <span class=\"n\">each</span> <span class=\"n\">fully</span> <span class=\"n\">faithful</span> <span class=\"n\">and</span> <span class=\"n\">produce</span> <span class=\"n\">categorical</span> <span class=\"n\">equivalences</span><span class=\"bp\">;</span> <span class=\"n\">we</span> <span class=\"n\">later</span> <span class=\"n\">construct</span> <span class=\"n\">functors</span> <span class=\"n\">B</span><span class=\"bp\">⃗</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"bp\">⃡</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⃗</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⃡</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">defined</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">essential</span> <span class=\"n\">image</span> <span class=\"n\">of</span> <span class=\"n\">these</span> <span class=\"n\">six</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">are</span> <span class=\"n\">inverse</span> <span class=\"n\">to</span> <span class=\"n\">them</span> <span class=\"n\">up</span> <span class=\"n\">to</span> <span class=\"n\">natural</span> <span class=\"n\">isomorphism.</span><span class=\"bp\">\\\\</span>\n\n<span class=\"n\">The</span> <span class=\"n\">directed</span> <span class=\"n\">path</span> <span class=\"n\">space</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">path</span> <span class=\"n\">space</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">loop</span> <span class=\"n\">space</span> <span class=\"n\">form</span> <span class=\"n\">components</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">functors</span> <span class=\"n\">P</span><span class=\"bp\">⃗</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">⃡</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">are</span> <span class=\"n\">valued</span> <span class=\"k\">in</span> <span class=\"n\">internal</span> <span class=\"n\">categories</span><span class=\"o\">,</span> <span class=\"n\">internal</span> <span class=\"n\">groupoids</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">internal</span> <span class=\"n\">groups</span> <span class=\"n\">respectively.</span>\n<span class=\"bp\">\\</span><span class=\"kd\">begin</span><span class=\"o\">{</span><span class=\"n\">enumerate</span><span class=\"o\">}</span>\n<span class=\"bp\">\\</span><span class=\"n\">item</span> <span class=\"n\">P</span><span class=\"bp\">⃗</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"bp\">∞-</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"bp\">⭢</span> <span class=\"n\">Cat</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"bp\">∞-</span><span class=\"n\">Cat</span><span class=\"o\">)</span>\n<span class=\"bp\">\\</span><span class=\"n\">item</span> <span class=\"n\">P</span><span class=\"bp\">⃡</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"bp\">∞-</span><span class=\"n\">Grpd</span><span class=\"o\">)</span> <span class=\"bp\">⭢</span> <span class=\"n\">Grpd</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"bp\">∞-</span><span class=\"n\">Grpd</span><span class=\"o\">)</span>\n<span class=\"bp\">\\</span><span class=\"kd\">end</span><span class=\"o\">{</span><span class=\"n\">enumerate</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This is a sample of the code.</p>",
        "id": 405439795,
        "sender_full_name": "Dean Young",
        "timestamp": 1701465670
    },
    {
        "content": "<p>That renders ok in julia mono, but perhaps not in vscode</p>",
        "id": 405440319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701465918
    },
    {
        "content": "<p>(<a href=\"https://jsfiddle.net/43kx0rh1/1\">https://jsfiddle.net/43kx0rh1/1</a>)</p>",
        "id": 405440776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701466141
    },
    {
        "content": "<p>Ok, right, it was just a font thing. Now I'm using <code>STIX Two Text</code>.</p>",
        "id": 405443453,
        "sender_full_name": "Dean Young",
        "timestamp": 1701467542
    }
]