[
    {
        "content": "<p>I just opened a PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/5263\">!4#5263</a> which golfs a proof using <code>tauto</code>. This golf was possible in Lean 3 but was unacceptably slow but happily in Lean 4 it is nice and fast.</p>\n<p><strong>However</strong> while making this change, I noticed that the rest of the proof takes maybe twice as a long in Lean 4 as in Lean 3. I had a quick look using the profiler and I see that most of the slowness in Lean 4 is due to repeated typeclass searches for <code>CoeT</code>. To be precise I see 20 instances of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">384</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">368</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">328</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">306</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">307</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">309</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">307</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">308</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">335</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">307</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">307</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">309</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">307</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">308</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">306</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">306</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">312</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">324</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">319</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeT</span> <span class=\"n\">took</span> <span class=\"mi\">312</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>(adding up to nearly 6.5 seconds).</p>",
        "id": 367632540,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687179826
    },
    {
        "content": "<p>I would be grateful for help answering:</p>\n<ol>\n<li>Is this a known regression in Mathlib 4?</li>\n<li>How can I debug this further?</li>\n</ol>",
        "id": 367632841,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687179874
    },
    {
        "content": "<p>Use <code>set_option trace.Meta.synthInstance true</code> to figure out what thing it's trying to coerce</p>",
        "id": 367638145,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687180769
    },
    {
        "content": "<p>Thanks, I'll try that now!</p>",
        "id": 367638263,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687180797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Slow.20coercions/near/367638145\">said</a>:</p>\n<blockquote>\n<p>Use <code>set_option trace.Meta.synthInstance true</code> to figure out what thing it's trying to coerce</p>\n</blockquote>\n<p>Using this I learned that Lean was (repeatedly) taking about 500ms to find a way to coerce from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Primes#doc\">docs4#Nat.Primes</a> to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real#doc\">docs4#Real</a> so I added a commit which does:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--  set u : Nat.Primes ‚Üí ùïä := fun p =&gt; ‚Üë((‚Üë(1 : ‚Ñï) : ‚Ñù) / p * T)</span>\n<span class=\"gi\">+  set u : Nat.Primes ‚Üí ùïä := fun p =&gt; ‚Üë((‚Üë(1 : ‚Ñï) : ‚Ñù) / ((p : ‚Ñï) : ‚Ñù) * T)</span>\n</code></pre></div>\n<p>This makes most of the slow <code>CoeT</code> searches disappear, and knocks about 5s off the proof which is great.</p>",
        "id": 367649855,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687182976
    },
    {
        "content": "<p>I'm still disappointed that:</p>\n<ol>\n<li>This explicit coercion is now necessary when it was not in Lean 3, but more importantly,</li>\n<li>Apparently any edit anywhere inside this ~100 line proof triggers the whole proof to recompile resulting in a near-impossible workflow: the Lean 3 proof suffered much less from this phenomenon.</li>\n</ol>\n<p>Any further advice most gratefully received.</p>",
        "id": 367650731,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687183158
    },
    {
        "content": "<p><code>stop</code> can help with 2 (but maybe the proof should be split)</p>",
        "id": 367652399,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687183478
    },
    {
        "content": "<p>I admit many a 100-line proof should be split but I contend that this proof should not need splitting and that we should demand our tools can handle something like this.</p>\n<p>Something to think about once the port is finished I guess.</p>",
        "id": 367654053,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687183719
    },
    {
        "content": "<p>Does <code>save</code> also help here?</p>",
        "id": 367654204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687183743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Slow.20coercions/near/367654204\">said</a>:</p>\n<blockquote>\n<p>Does <code>save</code> also help here?</p>\n</blockquote>\n<p>It seems neither <code>save</code> nor <code>stop</code> helps.</p>",
        "id": 367654717,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687183813
    },
    {
        "content": "<p><del>Btw <code>save</code> is familar but <code>stop</code> is new: are the synonyms?</del> Oh I see not.</p>",
        "id": 367655048,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687183872
    }
]