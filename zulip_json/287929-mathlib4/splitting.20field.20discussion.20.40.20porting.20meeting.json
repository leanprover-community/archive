[
    {
        "content": "<p>I'm just re-watchig the porting meeting video so I can try and understand better what's happening. Here are some questions</p>\n<p>1) At some point <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> suggests making <code>AdjoinRoot</code> irreducible. I'd know how to do this in mathlib3 but I have no idea how to do it in mathlib4. If I just write <code>@[irreducible] def AdjoinRoot [CommRing R] ...</code> then everything is immediately broken, for example the next declaration</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instCommRing</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">AdjoinRoot</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Ideal.Quotient.commRing</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>fails with</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  Quotient.commRing ?m.1045\nhas type\n  CommRing (?m.1043 ⧸ ?m.1045) : Type u\nbut is expected to have type\n  CommRing (AdjoinRoot f) : Type u\n</code></pre></div>\n<p>In Lean 3 you could make something irreducible later on but in Lean 4 I think you can't do this. How does one make <code>AdjoinRoot</code> irreducible? Is that even possible? Everyone in the meeting seemed to think that this was not a totally crazy idea so I'm probably missing something.</p>\n<p>2) Looking at <code>Algebra.Field.Defs</code> I noticed we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">DivisionRing.toDivisionSemiring</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DivisionSemiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">›,</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Whatever is that about? If I just delete <code>, (inferInstance : Semiring α)</code>then the file still compiles. Surely every field of a division semiring is going to be a field of division ring? Why do we even need that instance?</p>\n<p>3) Getting back to the discussion at the porting meeting, we have (in the same file, <code>Algebra.Field.Defs</code>),</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommRing</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">DivisionRing</span> <span class=\"n\">K</span>\n</code></pre></div>\n<p>Did we establish that the slowdowns were due to colliding fields which were not obviously <code>rfl</code> and indeed took a long time to prove they were <code>rfl</code>? Does this mean that our definition of <code>Field</code> should not have so many overlapping fields? It could just extend <code>DivisionRing</code> and any structure with a commutative multiplication, like <code>CommSemigroup</code> or whatever. Is there a chance that this would make life better, or is it litkely to only make things stay the same? I tried making the change and most of mathlib compiles but there was some breakage in <code>RingTheory.TensorProduct</code> which I didn't understand (\"error: typeclass instance problem is stuck, it is often due to metavariables\" -- I don't really understand that message).</p>\n<p>4) I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/4507\">!4#4507</a> on the basis that this was my understanding of the conclusions of the meeting. I need to sleep now but it would be interesting to see if this helps with the splitting field PR.</p>",
        "id": 362311059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685485693
    },
    {
        "content": "<blockquote>\n<p>Surely every field of a division semiring is going to be a field of division ring? Why do we even need that instance?</p>\n</blockquote>\n<p>This wasn't true of Lean3; <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring\">docs#ring</a> has no mul_zero field</p>",
        "id": 362311341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685485824
    },
    {
        "content": "<p>I think we added one accidentally during ad-hoc porting and never bothered to remove it because it didn't really matter</p>",
        "id": 362311400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685485852
    },
    {
        "content": "<p>Do you have a link to the video?</p>",
        "id": 362311495,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685485900
    },
    {
        "content": "<blockquote>\n<p>It could just extend DivisionRing and any structure with a commutative multiplication, like CommSemigroup or whatever. Is there a chance that this would make life better, or is it likely to only make things stay the same?</p>\n</blockquote>\n<p>This won't make any difference. As described in a paper you recently refereed, <code>class Foo extends Bar, Baz</code> means \"embed a copy of <code>Bar</code>, copy the fields as needed from <code>Baz</code>\". The fields that would be copied are identical in your proposed change.</p>",
        "id": 362311757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685486021
    },
    {
        "content": "<p>My understanding is that you need to use the <code>irreducible_def</code> command <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/IrreducibleDef.html#Lean.Elab.Command.command_Irreducible_def____\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/IrreducibleDef.html#Lean.Elab.Command.command_Irreducible_def____</a> . This gives you an irreducible definition and a lemma you can rewrite with to actually unfold the definition when you want to prove things about it (but tactics wont be able to see through the def otherwise).</p>",
        "id": 362311870,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1685486068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/splitting.20field.20discussion.20.40.20porting.20meeting/near/362311495\">said</a>:</p>\n<blockquote>\n<p>Do you have a link to the video?</p>\n</blockquote>\n<p>Found.</p>",
        "id": 362311879,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685486075
    },
    {
        "content": "<p>Changing the order of DivisionRing and CommRing could easily make a difference, but I'd expect it to make things worse</p>",
        "id": 362311900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685486083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/splitting.20field.20discussion.20.40.20porting.20meeting/near/362311757\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is there a chance that this would make life better, or is it likely to only make things stay the same?</p>\n</blockquote>\n<p>This won't make any difference. As described in a paper you recently refereed, <code>class Foo extends Bar, Baz</code> means \"embed a copy of <code>Bar</code>, copy the fields as needed from <code>Baz</code>\". The fields that would be copied are identical in your proposed change.</p>\n</blockquote>\n<p>Are you talking about my PR? My understanding is that it makes a much nicer term because <code>Field.mk</code> now no longer eats a comm_ring instance which is constructed from a field instance piecewise, it just eats the comm_ring instance I give it.</p>",
        "id": 362312683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685486470
    },
    {
        "content": "<p>Edited, I didn't quote a long enough part of the top message; I was talking about your third item</p>",
        "id": 362315113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685487761
    },
    {
        "content": "<p>I searched for the phrase you quoted, but you also fixed a typo in it so my search failed :-)</p>",
        "id": 362404423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685527172
    },
    {
        "content": "<p>I saw the video, thanks for digging into this!</p>\n<p>I am not sure I understand the conclusion, should we try to provide the \"main parent instance\" (meaning the one with embedded copy) explicitly, as you did for <code>toCommRing</code>? It seems something long but definitely doable everywhere in the library.</p>",
        "id": 362420324,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685530954
    },
    {
        "content": "<p>There are two competing additions on AdjoinRoot f if f is irreducible; one coming from the fact that AdjoinRoot f is always a ring and one coming from the fact that it's a field if f is irreducible. The two definitions are defeq but <code>rfl</code> takes one second to prove this because of...I dunno, because it apparently has to unfold a whole bunch of stuff, and each level of unfolding (equality of CommRing structures, equality of AddCommGroup structures, equality of AddCommMonoid structures, equality of Add structures) takes a quarter of a second, for reasons I still don't fully understand and which seem to be incredibly hard to fix.</p>\n<p>So the trick is to make sure that, whenever possible, Lean listens to the \"I'm a ring\" message before the \"I'm a field\" message, because most of the additions are coming from \"I'm a ring\".</p>",
        "id": 362454209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685538953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/splitting.20field.20discussion.20.40.20porting.20meeting/near/362311879\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/splitting.20field.20discussion.20.40.20porting.20meeting/near/362311495\">said</a>:</p>\n<blockquote>\n<p>Do you have a link to the video?</p>\n</blockquote>\n<p>Found.</p>\n</blockquote>\n<p>Where?</p>",
        "id": 362455353,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1685539218
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib4.20porting.20meeting.20series/near/362040095\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Mathlib4.20porting.20meeting.20series/near/362040095</a> -- the meetings are recorded every week. I found this one particularly instructional -- I attended the meeting but I watched the entire thing again a day later and learnt more</p>",
        "id": 362456634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685539508
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 362456696,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1685539523
    },
    {
        "content": "<p>Thanks for the link, Kevin!</p>",
        "id": 362462332,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685540758
    },
    {
        "content": "<p>I feel somewhat responsible for these issues: <code>AdjoinRoot</code> was one of the first files that I helped porting.  Also, <code>RatFunc</code> is having typeclass issues.</p>\n<p>I have not had a chance to watch at the recording yet, but seeing that this is generating some discussion among the experts makes me feel at the same time better and a little worse!</p>",
        "id": 362463524,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685541011
    },
    {
        "content": "<p>The issues are not ones introduced during porting, so I don't think you need to feel responsible</p>",
        "id": 362466094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685541570
    },
    {
        "content": "<p>yeah, the problems with AdjoinRoot being slow were already there in Lean 3 as I think you are well aware!</p>",
        "id": 362466976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685541736
    },
    {
        "content": "<p>I am aware, but in Lean 3, splitting field still worked...  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 362467291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685541796
    },
    {
        "content": "<p>Anyway, I never really understand how something works, if it never breaks...</p>",
        "id": 362467410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685541820
    },
    {
        "content": "<p>The issue probably is that <code>old_structure_cmd</code> is now not being used (this no longer exists) and we are currently enjoying having to learn about what the consequences of this design decision are.</p>",
        "id": 362468121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685541960
    },
    {
        "content": "<p>Eric wrote a paper about it but it's top secret.</p>",
        "id": 362468266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685541985
    },
    {
        "content": "<p>/me should really face the arXiv LaTeX build error gauntlet and get it over with</p>",
        "id": 362468607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685542058
    },
    {
        "content": "<p>15 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/latex.20woes\">#general &gt; latex woes</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 362490101,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685546422
    },
    {
        "content": "<p>(thanks Heather!)</p>\n<p>Back to the point: I'm trying to make some kind of sense of the slowness of <code>AdjoinRoot</code> and <code>SplittingField</code>. In Lean 3 it was slow and it was just one of those things. In Lean 4 we have better tracing so it's easier to try and debug, although I am now totally confused by what I found.</p>\n<p>Here's some code (an instance from the middle of a proof in <code>RingTheory/Adjoin/Field</code>) :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.AdjoinRoot</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">300000</span> <span class=\"k\">in</span> <span class=\"c1\">-- necessary</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">300000</span> <span class=\"k\">in</span> <span class=\"c1\">-- also necessary</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span>  <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n    <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">-- [Meta.synthInstance] [10.692269s] ✅ Algebra { x // x ∈ Algebra.adjoin F s } { x // x ∈ Algebra.adjoin { x // x ∈ Algebra.adjoin F s } {a} } ▶</span>\n\n<span class=\"c1\">-- -&gt; 3382 lines if unfolded</span>\n\n<span class=\"c1\">-- -&gt; 8 occurences of [] [0.792442s] ✅ CommSemiring.toSemiring =?= Ring.toSemiring</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Subsemiring.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span><span class=\"o\">)</span>  <span class=\"bp\">=</span>\n<span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- [0.145732s]</span>\n</code></pre></div>\n<p>The first example takes between 8 and 17 seconds to compile on my machine, depending on what mood it's in. The trace has one line which is taking all the time, and if you unfold it by clicking on the triangle then, after a pause, if VS Code doesn't crash, it turns into 3382 lines of trace; I have uploaded them <a href=\"https://gist.github.com/kbuzzard/f3883ff3f9af708dfc96e91ee837472b\">here</a>. Most of the entries are super-quick, but there are four, all the same, which take over 1 second. Here's one of them, unfolded a little:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">895163</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"n\">to</span> <span class=\"n\">IsDomain</span>\n        <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">895058</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">IsDomain</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">≟</span> <span class=\"n\">IsDomain</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">987253</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">IsDomain</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDomain</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m.11010</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000256</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m.11010</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">986885</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">907486</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.10431</span> <span class=\"bp\">=?=</span> <span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">?</span><span class=\"n\">m.10431</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"n\">SubringClass.instIsDomainSubtypeMemInstMembershipToSemiringToRing</span>\n              <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">907405</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">IsDomain</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">IsDomain</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000002</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">907329</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>Each of the (equal) 1.8 seconds problems splits into two equal problems each taking 0.9 seconds, meaning that a sizeable proportion of the 10 seconds is spent solving, 8 times, <code>CommSemiring.toSemiring =?= Ring.toSemiring</code>, and taking about a second each time. But the second example in the code block above shows that <code>rfl</code> solves this really quickly.</p>\n<p>Is this sort of behaviour expected? Is the example an unreasonable question for typeclass inference in some way? Note that bypassing typeclass inference by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n    <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subalgebra.algebra</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>is 0.1 seconds. So right now I propose hacking some proofs by overriding type class inference and simply telling it the answer. Is this a reasonable path to go down?</p>\n<p>Added two weeks later: the <code>example</code> above is misleading. The issue is I think coming from instances higher up the chain which are not visible in the example.</p>",
        "id": 362518519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685552607
    },
    {
        "content": "<p>The trace of the second example looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">214863</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"kd\">example</span> <span class=\"o\">:</span>\n        <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"n\">Subsemiring.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">132841</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.24838</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n      <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n          <span class=\"o\">(</span><span class=\"n\">Subsemiring.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n        <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">132825</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.24838</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n        <span class=\"n\">binrel</span><span class=\"bp\">%</span> <span class=\"n\">Eq</span><span class=\"bp\">✝</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"n\">Subsemiring.toCommSemiring</span>\n              <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span>\n                  <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span><span class=\"o\">))(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">014974</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n          <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"n\">Subsemiring.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span><span class=\"o\">)</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">117559</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n          <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">114713</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">},</span> <span class=\"n\">term</span>\n            <span class=\"o\">(</span><span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">114697</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">},</span> <span class=\"n\">term</span>\n              <span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">090839</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SubringClass</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"bp\">▶</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">021623</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">?</span><span class=\"n\">m.25433</span> <span class=\"bp\">=?=</span> <span class=\"n\">Subalgebra.instSubringClassSubalgebraToCommSemiringToSemiringInstSetLikeSubalgebra</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">035314</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">rfl</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>while in the first one I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">089981</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">089745</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">SubringClass.toRing</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">089608</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span> <span class=\"o\">}),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span> <span class=\"o\">}),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                  <span class=\"n\">Semiring.npow</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">Monoid.npow</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">026117</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.npow</span> <span class=\"bp\">=?=</span> <span class=\"n\">Monoid.npow</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000571</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubsemiring</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">305916</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalSemiring.mk</span>\n                    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"o\">}),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">388143</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toOne</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddMonoidWithOne.toOne</span> <span class=\"bp\">▶</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">368348</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toNatCast</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddMonoidWithOne.toNatCast</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>It seems it is taking different paths, right?</p>",
        "id": 362527367,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685554604
    },
    {
        "content": "<p>I'm very confused about the difference between <code>set_option profiler true</code> and <code>set_option trace.profiler true</code> so I'm not sure if it's taking different paths. Is one output from one option and the other from the other?</p>",
        "id": 362535752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685556689
    },
    {
        "content": "<p>Ah, that's possible...</p>",
        "id": 362539885,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685557770
    },
    {
        "content": "<p>I will note that I did change both of these files reasonably recently, so maybe it's worth looking at the past duffs for solutions. (on mobile, can't find the PRs) I don't remember the changes having a super performance impact in lean3, but maybe it's different now.</p>",
        "id": 362560469,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1685563487
    },
    {
        "content": "<p>The file with the definition of <code>AdjoinRoot</code> is already slow, and I don't think you modified it</p>",
        "id": 362560765,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685563585
    },
    {
        "content": "<p>It's the base case of the induction that caused all the diamond, so it was probably irrelevant to your problem</p>",
        "id": 362560884,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685563629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/splitting.20field.20discussion.20.40.20porting.20meeting/near/362535752\">said</a>:</p>\n<blockquote>\n<p>I'm very confused about the difference between <code>set_option profiler true</code> and <code>set_option trace.profiler true</code> so I'm not sure if it's taking different paths. Is one output from one option and the other from the other?</p>\n</blockquote>\n<p>This is indeed confusing:</p>\n<ol>\n<li><code>set_option profiler true</code> adds timing information to trace messages, but you need to enable the trace messages yourself.</li>\n<li><code>set_option trace.profiler true</code> enables all trace messages that take more than 10 milliseconds, and as a bonus also adds the timing information.</li>\n</ol>",
        "id": 362823751,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685638896
    },
    {
        "content": "<p>Perhaps we should remove the trace messages behavior of <code>profiler</code>. The reason the two options exist is that <code>profiler</code> gives you a grand total per Lean component (for each declaration and the whole file), while <code>trace.profiler</code> gives you a structured view of the processing of a specific declaration. So they have slightly different purposes.</p>",
        "id": 362825097,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685639175
    },
    {
        "content": "<blockquote>\n<p>Perhaps we should remove the trace messages behavior of <code>profiler</code>. </p>\n</blockquote>\n<p>I very much like the behavior you get by enabling <code>profiler</code>.  While <code>trace.profiler</code> is great to get a first bearing on the culprit, I find it really hard to see what's going on when the majority of trace messages are missing.</p>",
        "id": 362836856,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685641970
    },
    {
        "content": "<p>My ideal UI would be one where traces always included timing information, and you could (optional) enable color-coding in the editor where slow parts are highlighted.  And for <code>trace.profiler</code> there should be a button to expand the hidden messages.</p>",
        "id": 362836863,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685641972
    },
    {
        "content": "<p>But in the meantime we should keep <code>profiler</code>.</p>",
        "id": 362837057,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685642022
    },
    {
        "content": "<p>Can we put a docstring in profiler that alerts users to the existence of <code>trace.profiler</code>?</p>",
        "id": 362841680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685643038
    },
    {
        "content": "<p>Coming from Lean 3, the muscle memory is <code>profiler</code> but the behavior I actually want is usually <code>trace.profiler</code></p>",
        "id": 362841770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685643061
    },
    {
        "content": "<blockquote>\n<p>[...] <code>profiler</code> gives you a grand total per Lean component (for each declaration and the whole file), while <code>trace.profiler</code> gives you a structured view of the processing of a specific declaration.</p>\n</blockquote>\n<p>I don't think this helps the confusion.  Both options give a structured view, they both have the same output format, they only differ in the way they filter which trace messages to show.</p>",
        "id": 362849326,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685644919
    },
    {
        "content": "<p>That is only a happy little side effect of <code>profiler</code> that I added, I think not that long ago? The main task of <code>profiler</code>, going back to Lean 3 or earlier, is producing the \"elaboration (of X took) 100ms\" messages, it used to have nothing to do with traces. Always including timing in trace nodes (or introducing an opt-out setting for that) would indeed help with making the two options orthogonal again</p>",
        "id": 362867604,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685649536
    },
    {
        "content": "<p>You can also set <code>trace.profiler.threshold</code> to 0 :) ... but I assume you might only want to view a specific trace class</p>",
        "id": 362867779,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685649599
    },
    {
        "content": "<p><code>profiler</code>/<code>--profile</code> is also what drives the speedcenter categories</p>",
        "id": 362868011,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685649663
    },
    {
        "content": "<p>I know that it used be different.  But the new behavior is so much more useful. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  Introducing a new option for the timing info is obviously fine as well.</p>",
        "id": 362907431,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685665623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/splitting.20field.20discussion.20.40.20porting.20meeting/near/362468266\">said</a>:</p>\n<blockquote>\n<p>Eric wrote a paper about it but it's top secret.</p>\n</blockquote>\n<p><a href=\"https://arxiv.org/abs/2306.00617\">arxiv#2306.00617</a> (this version doesn't address reviewer comments on content)</p>",
        "id": 362908173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685666050
    }
]