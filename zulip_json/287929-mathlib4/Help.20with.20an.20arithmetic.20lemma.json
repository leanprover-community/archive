[
    {
        "content": "<p>I'm trying to formulate and prove a lemma, as part of a bigger theorem.</p>\n<p>My lemma is that if <code>p</code> and <code>q</code> are prime numbers and <code>m &lt; p*q</code> is a natural number not coprime with <code>p*q</code>, then there exists natural integers <code>k &gt; 0</code> and <code>M</code> such that <code>m = p^k * M</code> (or same with <code>q</code>) and <code>M</code>is coprime with <code>p * q</code>.</p>\n<p>I think I wrote it correctly (although I'm open to suggestions to write it in a more efficient/concise way):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mylemma</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmgt</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmlt</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Coprime</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Coprime</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This theorem seems obvious to me but I have no idea how to prove it using the results and tactics available in mathlib.</p>\n<p>Would you have some suggestion?</p>",
        "id": 402567864,
        "sender_full_name": "ElCondor",
        "timestamp": 1700173611
    },
    {
        "content": "<p>If <code>m = q</code> then you shouldn't be able to extract factor(s) of <code>p</code> from it? (if p and q are distinct)</p>",
        "id": 402568297,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700173801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Help.20with.20an.20arithmetic.20lemma/near/402568297\">said</a>:</p>\n<blockquote>\n<p>If <code>m = q</code> then you shouldn't be able to extract factor(s) of <code>p</code> from it? (if p and q are distinct)</p>\n</blockquote>\n<p>Yes I updated it to add \"(or same with q)\" (I believe the signature of the lemma below is correct though).</p>",
        "id": 402571706,
        "sender_full_name": "ElCondor",
        "timestamp": 1700175522
    },
    {
        "content": "<p>This needs another hypothesis <code>m &gt; 0</code>.</p>",
        "id": 402571931,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700175626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666160\">ElCondor</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Help.20with.20an.20arithmetic.20lemma/near/402567864\">said</a>:</p>\n<blockquote>\n<p>This theorem seems obvious to me but I have no idea how to prove it using the results and tactics available in mathlib.</p>\n<p>Would you have some suggestion?</p>\n</blockquote>\n<p>My first suggestion would be to first write down a careful mathematics proof; \"it's obvious\" is not mathematics. Once we have a maths proof to work on, we can think about how to translate it into Lean.</p>",
        "id": 402575216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700176986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582393\">Yongyi Chen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Help.20with.20an.20arithmetic.20lemma/near/402571931\">said</a>:</p>\n<blockquote>\n<p>This needs another hypothesis <code>m &gt; 0</code>.</p>\n</blockquote>\n<p>Of course! I forgot to add it in my lemma, but I had it in as an hypothesis<br>\nin my theorem... (I updated the signature)</p>",
        "id": 402575687,
        "sender_full_name": "ElCondor",
        "timestamp": 1700177196
    },
    {
        "content": "<p>Here's something I made to get you started.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p_part</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_dvd_of_padicValNat_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">padicValNat.eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">x_ne_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">|</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hp.out.elim</span>\n  <span class=\"bp\">.</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne_zero_of_div_of_dvd</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hxy</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">),</span> <span class=\"n\">Nat.div_self</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">hy</span><span class=\"o\">)]</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_dvd_of_div_p_part</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">p_part</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_ne_one</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hp.out.elim</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_part_dvd</span> <span class=\"o\">:</span> <span class=\"n\">p_part</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">pow_padicValNat_dvd</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">p_part</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_zero_of_div_of_dvd</span> <span class=\"n\">x_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">NeZero.ne</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">p_part_dvd</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">p_part</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">padicValNat.eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_div_iff</span><span class=\"o\">,</span> <span class=\"n\">IsUnit.mul_iff</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">p_part_dvd</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">p_part</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">p_part</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">padicValNat.div_of_dvd</span> <span class=\"n\">pow_padicValNat_dvd</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p_part</span><span class=\"o\">,</span> <span class=\"n\">padicValNat.prime_pow</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">tsub_eq_zero_of_le</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_self</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mylemma</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pq</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">q.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">mpos</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m.Coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">M.Coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">exists_and_left</span><span class=\"o\">]</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>\n  <span class=\"bp\">.</span> <span class=\"n\">subst</span> <span class=\"n\">hpq</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hpq</span>\n  <span class=\"k\">have</span> <span class=\"n\">pq_coprime</span> <span class=\"o\">:</span> <span class=\"n\">p.Coprime</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.coprime_primes</span> <span class=\"n\">pp.out</span> <span class=\"n\">pq.out</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mpr</span> <span class=\"n\">hpq</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hpm</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hqm</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span>\n  <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">pq_coprime.mul_dvd_of_dvd_of_dvd</span> <span class=\"n\">hpm</span> <span class=\"n\">hqm</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_dvd</span> <span class=\"n\">mpos</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hmpq</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.Coprime.gcd_mul</span> <span class=\"n\">m</span> <span class=\"n\">pq_coprime</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_one</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">pp.out.coprime_iff_not_dvd.mpr</span> <span class=\"n\">hpm</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">pq.out.coprime_iff_not_dvd.mpr</span> <span class=\"n\">hqm</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 402581790,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700180145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<blockquote>\n<p>My first suggestion would be to first write down a careful mathematics proof; \"it's obvious\" is not mathematics. Once we have a maths proof to work on, we can think about how to translate it into Lean.</p>\n</blockquote>\n<p>Mathematically, my proof would be the following:</p>\n<ol>\n<li><code>m</code> is not coprime with <code>p * q</code> (by <code>hmpq</code>) so <code>m</code> and <code>p * q</code> share a common prime divisor, invoking the fundamental theorem of arithmetic (FTA)</li>\n<li><code>p</code> and <code>q</code> are primes (<code>hp</code> and <code>hq</code>)  so this divisor can be taken to be either <code>p</code> or <code>q</code> : let's say it's <code>p</code> (the other case is symmetric)</li>\n<li>Applying the FTA to <code>m</code> (because of <code>hmgt : 0 &lt; m</code>), consider <code>k &gt; 0</code> the multiplicity of <code>p</code> and <code>M</code> the product (defaulting to <code>1</code>) of all the primes different from <code>k</code> with their multiplicities.</li>\n<li>By the FTA, we have <code>m = p^k * M</code> and by construction <code>p</code> is not a divisor of <code>M</code></li>\n<li>By <code>hmlt</code>, if <code>q</code>differs from <code>p</code>it  cannot be a divisor of <code>M</code>either because otherwise <code>m &gt;= p * q</code> (contradiction)</li>\n<li>Using FTA again, we see that <code>M</code> and <code>p * q</code> are coprime, which completes the result.</li>\n</ol>\n<p>So I guess I should try and find a way to implement all these steps in Lean. Also, I don't know what would be the best way to formulate the \" let's say it's <code>p</code> (the other case is symmetric)\" argument in (2) so that I don't duplicate the cases in Lean.</p>\n<p><span class=\"user-mention\" data-user-id=\"582393\">@Yongyi Chen</span> thanks I will also have a look at your proposal.</p>",
        "id": 402618445,
        "sender_full_name": "ElCondor",
        "timestamp": 1700198886
    },
    {
        "content": "<p>Yeah, that's the proof I was thinking of and right now that's the kind of thing you have to do step by step in a formalisation system. The only step which I wouldn't be able to immediately start formalising is step 2, because for lean's WLOG tactic to work you might need to isolate a precise symmetric statement which implies the theorem.</p>",
        "id": 402635381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700208341
    },
    {
        "content": "<p>ElCondor, it seems you are well on your way to appreciate formalized math, going from \"This theorem seems obvious to me\" to: \"Actually it misses two assumptions and the proof has six steps\" in less than six hours <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 402709085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700230963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Help.20with.20an.20arithmetic.20lemma/near/402709085\">said</a>:</p>\n<blockquote>\n<p>ElCondor, it seems you are well on your way to appreciate formalized math, going from \"This theorem seems obvious to me\" to: \"Actually it misses two assumptions and the proof has six steps\" in less than six hours <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>You know, I feel a bit like if I was writing assembly code before people invented programming languages.<br>\nI guess the analogy is that the programming language will be something (better tactics, GPT-things) writing part of the proofs for us?</p>",
        "id": 402719365,
        "sender_full_name": "ElCondor",
        "timestamp": 1700234125
    },
    {
        "content": "<p>With my number theory hat on I totally agree that your lemma is mathematically trivial. With my formalisation hat on I can see all the problems. With my optimist's hat on I hope that one day GPT-things or maybe just good-old-fashioned-AI things will be able to turn the obvious sketch into Lean code. With my realists hat on, well, that's why I asked you to spell out the argument, because that's where we are right now.</p>",
        "id": 402735434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700238932
    },
    {
        "content": "<p>What's the difference between GPT things and old fashioned AI? Or do you mean old fashioned AI in the sense of automated reasoning procedures?</p>",
        "id": 402737041,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700239550
    },
    {
        "content": "<p>See e.g. <a href=\"https://gowers.wordpress.com/2022/04/28/announcing-an-automatic-theorem-proving-project/\">https://gowers.wordpress.com/2022/04/28/announcing-an-automatic-theorem-proving-project/</a></p>",
        "id": 402737231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700239607
    },
    {
        "content": "<p>By GOFAI I meant \"stuff like <code>aesop</code>\": you spell out the statements of the six steps in Lean and then some tactic just finds the proofs for you.</p>",
        "id": 402750384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700244418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Help.20with.20an.20arithmetic.20lemma/near/402635381\">said</a>:</p>\n<blockquote>\n<p>for lean's WLOG tactic to work you might need to isolate a precise symmetric statement which implies the theorem.</p>\n</blockquote>\n<p>I think <code>wlog p ∣ m generalizing p q</code> should do exactly what <span class=\"user-mention\" data-user-id=\"666160\">@ElCondor</span> wants.</p>",
        "id": 402784569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700257513
    },
    {
        "content": "<blockquote>\n<p>Mathematically, my proof would be the following:</p>\n<ol>\n<li><code>m</code> is not coprime with <code>p * q</code> (by <code>hmpq</code>) so <code>m</code> and <code>p * q</code> share a common prime divisor, invoking the fundamental theorem of arithmetic (FTA)</li>\n</ol>\n</blockquote>\n<p>I'm finding it very hard to even write this first step, because the way theorems about <code>Nat</code> are formulated there is not much that I can do with a negated hypothesis <code>¬Coprime m (p * q)</code>.</p>\n<p>For instance, shouldn't the theorem <a href=\"https://github.com/leanprover-community/mathlib4/blob/b9e2e6567d11cc8a870b2e187d01aa583ecad9b9/Mathlib/Data/Nat/Factors.lean#L263C9-L263C33\">coprime_factors_disjoint</a> be formulated as an equivalence in <code>PNat</code>?</p>",
        "id": 402853346,
        "sender_full_name": "ElCondor",
        "timestamp": 1700298466
    },
    {
        "content": "<p>I think I'd do it as follows:</p>\n<p>1a. Their GCD is not equal to one or zero<br>\n1b. The GCD has a prime factor p<br>\n1c. p divides m and p*q</p>",
        "id": 402857686,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700301508
    },
    {
        "content": "<p>You might put those substeps in an independent reusable lemma</p>",
        "id": 402857824,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700301615
    },
    {
        "content": "<p>By the way, my code no longer compiles as is due to a <code>simp </code>change in Lean v4.3.0-rc2, but I also finished it shortly after writing up the skeleton. I didn't include the <code>wlog</code> strategy. Here's the finished code for you to play around with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.NumberTheory.Padics.PadicVal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pPart</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_dvd_of_padicValNat_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">padicValNat.eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">x_ne_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">|</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">Nat.not_prime_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hp.out.elim</span>\n  <span class=\"bp\">.</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ne_zero_of_div_of_dvd</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hxy</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_div_assoc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">y</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">),</span> <span class=\"n\">Nat.div_self</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">hy</span><span class=\"o\">)]</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_dvd_of_div_pPart</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">p.Prime</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">pPart</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_ne_one</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.not_prime_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hp.out.elim</span>\n  <span class=\"k\">have</span> <span class=\"n\">pPart_dvd</span> <span class=\"o\">:</span> <span class=\"n\">pPart</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">pow_padicValNat_dvd</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">pPart</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_zero_of_div_of_dvd</span> <span class=\"n\">x_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">NeZero.ne</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">pPart_dvd</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">pPart</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">padicValNat.eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_div_iff</span><span class=\"o\">,</span> <span class=\"n\">IsUnit.mul_iff</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">pPart_dvd</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">pPart</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">pPart</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">padicValNat.div_of_dvd</span> <span class=\"n\">pow_padicValNat_dvd</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pPart</span><span class=\"o\">,</span> <span class=\"n\">padicValNat.prime_pow</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">tsub_eq_zero_of_le</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_self</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_pkm_or_qkm_of_lt_and_coprime_p_times_q</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pq</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"n\">q.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">mpos</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m.Coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">M.Coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">M</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">exists_and_left</span><span class=\"o\">]</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>\n  <span class=\"bp\">.</span> <span class=\"n\">subst</span> <span class=\"n\">hpq</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">or_self</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.pow_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hmpq</span>\n    <span class=\"n\">change</span> <span class=\"bp\">¬</span><span class=\"n\">Nat.Coprime</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">hmpq</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.coprime_pow_right_iff</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">),</span> <span class=\"n\">Nat.coprime_comm</span><span class=\"o\">,</span> <span class=\"n\">pp.out.coprime_iff_not_dvd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hmpq</span>\n    <span class=\"n\">use</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">one_le_padicValNat_of_dvd</span> <span class=\"n\">mpos</span> <span class=\"n\">hmpq</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">pPart</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.coprime_mul_iff_right</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">not_dvd_of_div_pPart</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">mpos</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pp.out.coprime_iff_not_dvd.mpr</span> <span class=\"n\">this</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.eq_mul_of_div_eq_right</span> <span class=\"n\">pow_padicValNat_dvd</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hpq</span>\n  <span class=\"k\">have</span> <span class=\"n\">pq_coprime</span> <span class=\"o\">:</span> <span class=\"n\">p.Coprime</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.coprime_primes</span> <span class=\"n\">pp.out</span> <span class=\"n\">pq.out</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mpr</span> <span class=\"n\">hpq</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hpm</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hqm</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span>\n  <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">pq_coprime.mul_dvd_of_dvd_of_dvd</span> <span class=\"n\">hpm</span> <span class=\"n\">hqm</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_dvd</span> <span class=\"n\">mpos</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"bp\">.</span> <span class=\"n\">use</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">one_le_padicValNat_of_dvd</span> <span class=\"n\">mpos</span> <span class=\"n\">hpm</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">pPart</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.coprime_mul_iff_right</span><span class=\"o\">]</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">pp.out.coprime_iff_not_dvd.mpr</span> <span class=\"o\">(</span><span class=\"n\">not_dvd_of_div_pPart</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">mpos</span><span class=\"o\">))</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n      <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.Coprime.coprime_div_left</span> <span class=\"n\">_</span> <span class=\"n\">pow_padicValNat_dvd</span>\n        <span class=\"n\">exact</span> <span class=\"n\">pq.out.coprime_iff_not_dvd.mpr</span> <span class=\"n\">hqm</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.eq_mul_of_div_eq_right</span> <span class=\"n\">pow_padicValNat_dvd</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">.</span> <span class=\"n\">use</span> <span class=\"n\">padicValNat</span> <span class=\"n\">q</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">one_le_padicValNat_of_dvd</span> <span class=\"n\">mpos</span> <span class=\"n\">hqm</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">pPart</span> <span class=\"n\">q</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.coprime_mul_iff_right</span><span class=\"o\">]</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.Coprime.coprime_div_left</span> <span class=\"n\">_</span> <span class=\"n\">pow_padicValNat_dvd</span>\n        <span class=\"n\">exact</span> <span class=\"n\">pp.out.coprime_iff_not_dvd.mpr</span> <span class=\"n\">hpm</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">pq.out.coprime_iff_not_dvd.mpr</span> <span class=\"o\">(</span><span class=\"n\">not_dvd_of_div_pPart</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_iff_ne_zero.mp</span> <span class=\"n\">mpos</span><span class=\"o\">))</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.eq_mul_of_div_eq_right</span> <span class=\"n\">pow_padicValNat_dvd</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">.</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hmpq</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.Coprime.gcd_mul</span> <span class=\"n\">m</span> <span class=\"n\">pq_coprime</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_one</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">pp.out.coprime_iff_not_dvd.mpr</span> <span class=\"n\">hpm</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">pq.out.coprime_iff_not_dvd.mpr</span> <span class=\"n\">hqm</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 402886858,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700321636
    },
    {
        "content": "<p>Most likely this is because <code>simp</code> no longer tries <code>decide</code> by default. Possibly just running that afterwards will work</p>",
        "id": 402890739,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700324194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I added <code>Nat.not_prime_one</code> to the simp list to get it to work. Unfortunately, since my simp was a <code>simp [...] at hp</code>, <code>decide at hp</code> is not a valid syntax so I couldn't use that strategy.</p>",
        "id": 402891114,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1700324486
    }
]