[
    {
        "content": "<p>The final part of <code>adjoin_root</code> contains results about \"double quotients\".  These results seem to be only used there, with the unique exception of <code>quotient_equiv_quotient_minpoly_map</code> that is used in <code>number_theory.kummer_dedekind</code>.</p>\n<p>How would people feel if I split the final two sections of <code>adjoin_root</code> to simplify the port and concentrate on the earlier time outs in this file, before dealing with the double time outs of the double quotients?</p>",
        "id": 360636686,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684875183
    },
    {
        "content": "<p>Well, it's true that the final part is annoying, but I can make it working in a couple of hours.</p>",
        "id": 360636917,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684875288
    },
    {
        "content": "<p>Either way would make me happy, I'd like to go ahead with porting dependents of this file.</p>",
        "id": 360636943,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1684875299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> let me see if I can make the PR green today. If tomorrow is still causing problems we can split</p>",
        "id": 360637263,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684875417
    },
    {
        "content": "<p>Sure, take your time!</p>",
        "id": 360637323,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684875449
    },
    {
        "content": "<p>I have started the split in mathlib3, to make sure that it would be clean in practice, not just in theory!</p>",
        "id": 360637408,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684875483
    },
    {
        "content": "<p>(I am not going to PR it, though, until we agree that it is a good idea!)</p>",
        "id": 360637476,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684875503
    },
    {
        "content": "<p>(For the record, the split worked: I created a new file with the last part of <code>adjoin_root</code> and imported it only in <code>kummer_dedekind</code> and CI built <code>mathlib3</code>.)</p>",
        "id": 360639314,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684876206
    },
    {
        "content": "<p>So, the mathlb4 PR should become green, but at some point we want to split the file, the end is really technical</p>",
        "id": 360654123,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684883133
    },
    {
        "content": "<p>It's not green, but only the linter is complaining</p>",
        "id": 360655756,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684884125
    },
    {
        "content": "<p>It's now green. I didn't fix any indentation thought.</p>",
        "id": 360665707,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684890117
    },
    {
        "content": "<p>It's now better</p>",
        "id": 360666336,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684890430
    },
    {
        "content": "<p>Thank you so much, Riccardo!  I'll take a closer look in s couple of hours, but it seems great!</p>",
        "id": 360689338,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684905395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> has marked this topic as resolved.</p>",
        "id": 360825993,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684942548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> if you want another challenge,  <a href=\"https://github.com/leanprover-community/mathlib4/pull/4303\">!4#4303</a> is incredibly slow too</p>",
        "id": 360826733,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684942723
    },
    {
        "content": "<p>Mostly, it was <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> who fixed the timeouts, but I'll try to take a look!  Although, I may not have much time today.</p>\n<p>I'm also quite stuck on <a href=\"https://github.com/leanprover-community/mathlib4/pull/4293\">!4#4293</a>, in case someone else wants to take a look.</p>",
        "id": 360827894,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684942985
    },
    {
        "content": "<p>I am also having a look, but I will not have a lot of time today</p>",
        "id": 360832879,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684944180
    },
    {
        "content": "<p>I had pushed what I thought was a speed up, replacing <code>refine</code> by <code>apply</code>s, but I see that CI is unhappy...</p>",
        "id": 360834139,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684944505
    },
    {
        "content": "<p>CI was unhappy even before..</p>",
        "id": 360843215,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684946792
    },
    {
        "content": "<p>Ah, so its just unhappy earlier now...</p>",
        "id": 360843621,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684946885
    },
    {
        "content": "<p>It seems it's OK now, increasing <code>maxHeartbeats</code></p>",
        "id": 360844188,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684947025
    },
    {
        "content": "<p>This is still quite esoteric...</p>",
        "id": 360844528,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684947116
    },
    {
        "content": "<p>It wasn't find a rather bizarre instance, probably because it had problem in unifying stuff, so it makes sense. It's sad that Lean3 was better at it</p>",
        "id": 360844723,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684947164
    },
    {
        "content": "<p>Yes, I find it disappointing that currently, we either wait more or we have to explicitly pass information that Lean can find on its own, albeit slowly.</p>",
        "id": 360844902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684947210
    },
    {
        "content": "<p>In defense of Lean 4, the proofs for Lean 3 were incrementally adjusted, while also adjusting the whole hierarchy, so that they would fit together.</p>",
        "id": 360845016,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684947240
    },
    {
        "content": "<p>With the port, we are trying to get Lean 4 parse almost literally the Lean 3 Frankenstein monster...</p>",
        "id": 360845114,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684947262
    },
    {
        "content": "<p>The error was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Algebra</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Algebra.adjoin</span> <span class=\"n\">F</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>And I <em>think</em> that the problem is getting that <code>{ x // x ∈ Algebra.adjoin F ↑s }</code> is the same as <code>Algebra.adjoin F ↑s</code></p>",
        "id": 360845124,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684947264
    },
    {
        "content": "<p>I was trying to get a proof exactly of what you wrote, but Lean was not even typechecking it.</p>",
        "id": 360845227,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684947295
    },
    {
        "content": "<p>This is why I wrote <em>is the same</em> instead of putting a <code>=</code> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 360845352,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1684947334
    },
    {
        "content": "<p>Anyway, let's hope that these issues can be solved after the port, rather than during it...</p>",
        "id": 360845549,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684947374
    },
    {
        "content": "<p>There is now <a href=\"https://github.com/leanprover-community/mathlib4/pull/4339\">!4#4339</a> (we can maybe open a new thread). I am not sure that adding <code>set_option maxHeartbeats bignumber</code> everywhere is the correct solution...</p>",
        "id": 361088805,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685027296
    }
]