[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2776\">!4#2776</a> there are a bunch of failures of Type class inference that are solved using <code>haveI</code>. This doesn't seem like it's because of any bug with Lean4's type class inference, but a sensible seeming design decision, and in fact I'm surprised that the code worked in Lean3.</p>\n<p>As an example of a failure, on line <a href=\"https://github.com/leanprover-community/mathlib4/blob/dd1c13aa6a6958897a9399ee2cb5b9ff2b5af64b/Mathlib/CategoryTheory/Limits/Comma.lean#L184\">184</a> there is a <code>haveI : HasLimit (F ⋙ Comma.fst _ _) := i₁</code> where <code>i₁ : HasLimit (F ⋙ leftFunc)</code>. These two types are defeq, but Lean4's inference doesn't infer <code>HasLimit (F ⋙ Comma.fst _ _)</code> from <code>HasLimit (F ⋙ leftFunc)</code>. Type class inference works without <code>haveI</code> if I write <code>delta leftFunc at i₁</code>. There are others similar to this elsewhere. Making <code>leftFunc</code> <code>reducible</code> does not help.</p>\n<p>I think we need a new strategy for these situations in Lean4, and I'm not sure if that should come during the port or after.</p>",
        "id": 340849207,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678451921
    },
    {
        "content": "<p>Note : the original <code>mathlib</code> code was <code>@@comma.has_limit _ _ _ _ _ _ i₁ i₂</code>. Initially, I had written <code>@Comma.hasLimit _ _ _ _ _ _ _ _ _ _ _ i₁ i₂ _</code> which worked as well, but I thought it was cleaner to introduce these two <code>haveI</code> with the classes as <code>Comma.hasLimit</code> expects them to be. It seems that doing <code>delta</code>as you suggest would be even cleaner. (I do not think we need to make <code>leftFunc</code>more reducible.)</p>",
        "id": 340883437,
        "sender_full_name": "Joël Riou",
        "timestamp": 1678460002
    },
    {
        "content": "<p>The specific line that was linked is essentially API duplication. I think using haveI in such instances is perfectly appropriate.</p>",
        "id": 340884903,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678460350
    },
    {
        "content": "<p>I ran into similar issues as well in some places where it was not just for API duplication. And in such cases, I suppose the correct approach is to add the necessary duplication…</p>",
        "id": 340885210,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678460412
    },
    {
        "content": "<p>The file ‘CategoryTheory.Limits.KanExtension’ has some examples that come to mind.</p>",
        "id": 340885442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678460469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20class.20inference.20in.20category.20theory/near/340883437\">said</a>:</p>\n<blockquote>\n<p>Note : the original <code>mathlib</code> code was <code>@@comma.has_limit _ _ _ _ _ _ i₁ i₂</code>. Initially, I had written <code>@Comma.hasLimit _ _ _ _ _ _ _ _ _ _ _ i₁ i₂ _</code> which worked as well, but I thought it was cleaner to introduce these two <code>haveI</code> with the classes as <code>Comma.hasLimit</code> expects them to be. It seems that doing <code>delta</code>as you suggest would be even cleaner. (I do not think we need to make <code>leftFunc</code>more reducible.)</p>\n</blockquote>\n<p>That's a good point. I will merge the PR, I don't think this thread was necessary.</p>",
        "id": 340908253,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1678465692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> has marked this topic as resolved.</p>",
        "id": 340908265,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678465696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20Type.20class.20inference.20in.20category.20theory/near/340908253\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20class.20inference.20in.20category.20theory/near/340883437\">said</a>:</p>\n<blockquote>\n<p>Note : the original <code>mathlib</code> code was <code>@@comma.has_limit _ _ _ _ _ _ i₁ i₂</code>. Initially, I had written <code>@Comma.hasLimit _ _ _ _ _ _ _ _ _ _ _ i₁ i₂ _</code> which worked as well, but I thought it was cleaner to introduce these two <code>haveI</code> with the classes as <code>Comma.hasLimit</code> expects them to be. It seems that doing <code>delta</code>as you suggest would be even cleaner. (I do not think we need to make <code>leftFunc</code>more reducible.)</p>\n</blockquote>\n<p>That's a good point. I will merge the PR, I don't think this thread was necessary.</p>\n</blockquote>\n<p>I thought that we never needed all this <code>_ _ _ _</code> now becasue we can do <code>(\\alpha := i_1)</code></p>",
        "id": 340920824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678468777
    },
    {
        "content": "<p>While the original issue that generated this stream is resolved, I think some further documentation/discussion is a good idea. </p>\n<p>For example, I learned today that Lean preferred <code>by intros...</code> to <code>fun ... =&gt; by</code> when trying to synthesize instances.</p>",
        "id": 340963954,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678482104
    }
]