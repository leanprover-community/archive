[
    {
        "content": "<p>Hi,</p>\n<p>I found that the <code>ring</code> tactic can prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>but cannot prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>  <span class=\"c1\">-- failed</span>\n</code></pre></div>\n<p>Is that expected? What would be a workaround? Thank you!</p>",
        "id": 398338259,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1698171140
    },
    {
        "content": "<p>Just do <code>simp only [succ_eq_add_one]</code> before <code>ring</code>.</p>",
        "id": 398339317,
        "sender_full_name": "Joël Riou",
        "timestamp": 1698171620
    },
    {
        "content": "<p>This came up before: <code>ring</code> does not support <code>Nat.succ</code>,  except that in some cases defeq with <code>n + 1</code> gets in the way and makes <code>ring</code> work!</p>",
        "id": 398339406,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698171670
    },
    {
        "content": "<p>Ah, I see. Thanks a lot! I'm actually quite surprised that basic facts such as <code>succ_eq_add_one</code> is not supported by <code>ring</code> nor tagged by <code>@[simp]</code>.</p>",
        "id": 398339995,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1698171911
    },
    {
        "content": "<p>As related question, it can prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>but cannot prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>  <span class=\"c1\">-- failed</span>\n</code></pre></div>",
        "id": 398341851,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1698172574
    },
    {
        "content": "<p>Nat subtraction is a nightmare, you should try really hard to avoid it.</p>",
        "id": 398342544,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698172907
    },
    {
        "content": "<p>Presumably in the first case it'll normalize the additions within the outer natural subtraction and that finishes the proof. Does it tell you to use <code>ring_nf</code>?</p>",
        "id": 398342611,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698172926
    },
    {
        "content": "<blockquote>\n<p>Does it tell you to use ring_nf?</p>\n</blockquote>\n<p>Yes, it does.</p>",
        "id": 398342857,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1698173054
    },
    {
        "content": "<blockquote>\n<p>Nat subtraction is a nightmare, you should try really hard to avoid it.</p>\n</blockquote>\n<p>I changed the <code>Nat</code> in the second example to <code>ℤ</code> and it worked. <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 398343453,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1698173371
    },
    {
        "content": "<p><code>succ</code> is not part of the structure of a ring, so why should <code>ring</code> know about it? The same comment holds for subtraction of naturals. That has nothing to do with rings!</p>",
        "id": 398343672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698173492
    },
    {
        "content": "<p>I hope we will soon decide on how to make a standard induction tactic for mathlib which invokes \"0\" and \"n + 1\", so that no one in mathlib ever encounters \"succ\" at all.</p>",
        "id": 398344128,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698173706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That makes sense. I'm wondering if there is a tactic in Lean/mathlib that can automate this kind of trivial calculations even if they do not fall into the responsibility of <code>ring</code>.</p>",
        "id": 398344163,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1698173722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20tactic.20on.20.60.28n.2B1.29.5E2.3Dn.5E2.2B2n.2B1.60/near/398343672\">said</a>:</p>\n<blockquote>\n<p><code>succ</code> is not part of the structure of a ring, so why should <code>ring</code> know about it? The same comment holds for subtraction of naturals. That has nothing to do with rings!</p>\n</blockquote>\n<p>This is a bit subtle, so I will try to explain Kevin's comment a bit more. As explained at the beginning of the <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C08_Groups_and_Rings.html#rings\">ring section in MIL</a>, the <code>ring</code> tactic is doubly misnamed: it should be called <code>commsemiring</code> since it assumes commutativity and works in semirings. However, Kaiyu's goal does not follow from the axioms of semirings, it requires knowing something special about Nat since the subtraction operation simply does not appear at all in the definition of semirings.</p>",
        "id": 398344698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698173982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20tactic.20on.20.60.28n.2B1.29.5E2.3Dn.5E2.2B2n.2B1.60/near/398344128\">said</a>:</p>\n<blockquote>\n<p>I hope we will soon decide on how to make a standard induction tactic for mathlib which invokes \"0\" and \"n + 1\", so that no one in mathlib ever encounters \"succ\" at all.</p>\n</blockquote>\n<p>I wonder whether we can add support for tagging induction lemmas as \"default\" and have the usual <code>induction</code> tactic use the default lemma by default. Either that or we could make the <code>@[match_pattern]</code> attribute more flexible/powerful.</p>",
        "id": 398345893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698174514
    },
    {
        "content": "<p>Adam, this already exists, but tagging the nice induction principle for Nat breaks cases.</p>",
        "id": 398346446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698174801
    },
    {
        "content": "<p>This has been discussed many times.</p>",
        "id": 398346461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698174809
    },
    {
        "content": "<p>For instance the first search result is <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/An.20exercise.20using.20induction/near/370365516\">https://leanprover.zulipchat.com/#narrow/stream/187764-Lean-for-teaching/topic/An.20exercise.20using.20induction/near/370365516</a></p>",
        "id": 398346594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698174866
    },
    {
        "content": "<p>Ah I didn't know that the eliminator attribute had this behavior.</p>",
        "id": 398347074,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698175094
    },
    {
        "content": "<p>That's not the only issue, it seems. It seems that adding such an eliminator also breaks the ability to write structured proofs with induction. I can't get any permutation of <code>(n+1)</code>, <code>succ n</code>, whatever, to work in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">eliminator</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.rec'</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.rec</span> <span class=\"n\">zero</span> <span class=\"n\">add_one</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The only thing I can get to work is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398348464,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698175756
    },
    {
        "content": "<p>Why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">eliminator</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.rec'</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.rec</span> <span class=\"n\">zero</span> <span class=\"n\">add_one</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">add_one</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398349054,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698176036
    },
    {
        "content": "<p>Sure, that also works, although it's a bit verbose, and our nice code action for <code>induction</code> doesn't do this by default :)</p>",
        "id": 398349133,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698176071
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add_one</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(not sure if there is a difference between using <code>with</code> and using <code>case</code>; I use the latter usually and am confused that we have both)</p>",
        "id": 398349144,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698176074
    },
    {
        "content": "<p>aha!</p>",
        "id": 398349161,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698176083
    },
    {
        "content": "<p>Ah, yes, the code action does something wrong</p>",
        "id": 398349198,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698176104
    },
    {
        "content": "<p><code>case</code> is still useful when there are many cases to consider, whereas I tend to use<code>|</code> when there aren't too many. I think both are useful.</p>",
        "id": 398349402,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698176197
    },
    {
        "content": "<p>Ok, so what I said above really is just a bug in the code action.</p>",
        "id": 398349658,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698176311
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover/std4/pull/311\">std4#311</a></p>",
        "id": 398350122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698176537
    },
    {
        "content": "<p>Is there a difference beyond minor syntactic variation? Syntax variability means non-uniformity, and that comes at the cost of some amount of confusion. I guess with <code>with</code> there is an error message for missing cases, whereas with <code>case</code> you just have some more goals around.</p>",
        "id": 398350259,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698176622
    },
    {
        "content": "<p>Ah, and there is also <code>induction' … with</code>, doing something different altogether. There must be a reason for having three ways, but what are they?<br>\nI also wonder, with name goals, if the code action even needs to be induction-specific. Would a code action that detects that new named goals have created in general not work equally well for induction as well as for many other tactics (e.g. refine)?<br>\n(I am derailing this thread, sorry for not starting a new one.)</p>",
        "id": 398351973,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698177391
    },
    {
        "content": "<p><code>induction'</code> exists only to ease the port from lean 3</p>",
        "id": 398352047,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698177425
    },
    {
        "content": "<p>(It matches the syntax that lean 3 <code>induction</code> had)</p>",
        "id": 398352110,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698177457
    },
    {
        "content": "<p>That's what I was hoping for. So at least that can eventually be phased out and make space in our brains :-)</p>",
        "id": 398352312,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698177529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20tactic.20on.20.60.28n.2B1.29.5E2.3Dn.5E2.2B2n.2B1.60/near/398352312\">said</a>:</p>\n<blockquote>\n<p>and make space in our brains :-)</p>\n</blockquote>\n<p>... I need some more of that :-/</p>",
        "id": 398352416,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698177568
    },
    {
        "content": "<p>In any case, I don't think it would be too hard to modify <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.getCustomEliminator%3F#doc\">docs#Lean.Meta.getCustomEliminator?</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.CustomEliminator#doc\">docs#Lean.Meta.CustomEliminator</a> itself to include some <code>isInd : Bool</code> parameter that says whether or not the eliminator is for induction or cases.</p>",
        "id": 398353107,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698177834
    },
    {
        "content": "<p>such a flag is already present in the <code>induction</code> and <code>cases</code> tactics themselves.</p>",
        "id": 398353204,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698177868
    },
    {
        "content": "<p>I'd say <code>induction with</code> encourages a more \"rigid\" proof structure. Whether that's good depends on your personal style and the proof at hand</p>",
        "id": 398354239,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698178347
    },
    {
        "content": "<p>You mean it’s more rigid because you *have * to name all the cases, and can’t, for example mix <code>. </code> with <code>case</code> focusing? Or is there some other form of rigidity that I am missing? And maybe more importantly: Is that a form of rigidity that we want for <code>induction</code> specifically, and not for every multi-goal tactic?<br>\n(I remember that either Coq or Isabelle had an option that would complain if a tactic would produce multiple subgoals and they were not properly focused with bullets or named caess.)</p>\n<p>Reading through the code I see that <code>with |</code> supports a tactic to run first on all cases, and supports running tactics on multiple goals. So that’s presumably some extra power that’s not (easily) available with <code>case</code>.</p>",
        "id": 398358287,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698180433
    },
    {
        "content": "<p>I made some changes to a fork of core here: <a href=\"http://github.com/adamtopaz/lean4\">github.com/adamtopaz/lean4</a><br>\nWith those changes, the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">induction_eliminator</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.rec'</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.rec</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">cases_eliminator</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.cases'</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">motive</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.rec</span> <span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    P: Nat → Prop</span>\n<span class=\"cm\">    ⊢ P 0</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    P: Nat → Prop</span>\n<span class=\"cm\">    n: Nat</span>\n<span class=\"cm\">    ih: P n</span>\n<span class=\"cm\">    ⊢ P (n + 1)</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    P: Nat → Prop</span>\n<span class=\"cm\">    ⊢ P 0</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    P: Nat → Prop</span>\n<span class=\"cm\">    n: Nat</span>\n<span class=\"cm\">    ⊢ P (n + 1)</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398372230,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698188144
    },
    {
        "content": "<p>(It took more time to figure out how to develop in core than actually making the changes :-/)</p>",
        "id": 398372320,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698188181
    },
    {
        "content": "<p>When you're developing the very very basic theory of naturals (eg addition!) you really need <code>succ</code>, but beyond a certain point it just gets in the way. This is very cool :-)</p>",
        "id": 398412856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698211615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Ring.20tactic.20on.20.60.28n.2B1.29.5E2.3Dn.5E2.2B2n.2B1.60/near/398358287\">said</a>:</p>\n<blockquote>\n<p>Reading through the code I see that <code>with |</code> supports a tactic to run first on all cases,</p>\n</blockquote>\n<p>Can you show an example?</p>",
        "id": 398437059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698222793
    },
    {
        "content": "<p>Beware, I haven't run the code, just read the docstrings:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/170fd845f2ea818bb0c0efc8650f7125371cfc1b/src/Init/Tactics.lean#L539\">https://github.com/leanprover/lean4/blob/170fd845f2ea818bb0c0efc8650f7125371cfc1b/src/Init/Tactics.lean#L539</a></p>",
        "id": 398439556,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698223697
    }
]