[
    {
        "content": "<p>Can anyone reproduce a stack overflow in linarith on the following code?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">T</span> <span class=\"n\">m</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hTp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">T</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hm1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmp</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmT</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hl1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">T</span> <span class=\"bp\">*</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>I get in the infoview</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Server process for *** crashed, likely due to a stack overflow or a bug.\n</code></pre></div>\n<p>and pop-ups</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Lean server printed an error: libc++abi.dylib: terminating with uncaught exception of type lean::heartbeat_exception: (deterministic) timeout\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>The Lean Server has stopped processing this file.\n</code></pre></div>",
        "id": 329628487,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677128033
    },
    {
        "content": "<p>For me Lean just tries to compile the example for many minutes, without finishing or crashing.</p>",
        "id": 329700860,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677154078
    },
    {
        "content": "<p>Note that this is not a stack overflow but a heartbeat timeout. Heartbeats are a concept for Lean 4 to track how much work it has done on some task and abort if it exceeds a certain limit so things dont hang up...I've never seen a heartbeat timeout from C++ though usually lean throws them on its own.</p>",
        "id": 329793091,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677177634
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/2715\">!4#2715</a> to track this issue.</p>",
        "id": 340286340,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678261102
    }
]