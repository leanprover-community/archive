[
    {
        "content": "<p>I was looking at porting  GroupTheory.CommutingProbability and there we define a rational number </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The commuting probability of a finite type with a multiplication operation -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">commProb</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.card</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">M</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">p.1</span> <span class=\"o\">}</span> <span class=\"bp\">/</span> <span class=\"n\">Nat.card</span> <span class=\"n\">M</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">comm_prob</span> <span class=\"n\">commProb</span>\n</code></pre></div>\n<p>But this fails with <code>failed to synthesize instance  HDiv ℚ ℕ ℚ</code>. I'm trying to understand what is going on, and what is the correct way to fix this. It can be made to not complain anymore in many ways, for instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.card</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">M</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">p.1</span> <span class=\"o\">}</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.card</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">M</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">p.1</span> <span class=\"o\">}</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I'm unsure what to do.<br>\nWhen playing around with this I noticed there is already something about how heterogenous powers work.<br>\nWhy does this work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- works:</span>\n<span class=\"kd\">def</span> <span class=\"n\">qpow_example_1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">qpow_example_2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">qpow_example_3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">qpow_example_4</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">HPow.hPow</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>but this doesn't?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- \"failed to synthesize instance  HPow ℕ ℕ ℚ\":</span>\n<span class=\"kd\">def</span> <span class=\"n\">qpow_example_5</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 327865462,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1676405697
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Nat.card</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">M</span> <span class=\"bp\">//</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span> <span class=\"bp\">*</span> <span class=\"n\">p.1</span> <span class=\"o\">}</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Sounds good</p>",
        "id": 327866992,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676406257
    },
    {
        "content": "<p>I assume in the first four cases it's casting  to <code>ℚ</code>, and in the last case for some reason it fails to insert the coercion? I'm not sure what the issue is exactly.</p>",
        "id": 327867083,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676406296
    },
    {
        "content": "<p>Does it work if you add an <code>↑</code>?</p>",
        "id": 327867117,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676406306
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">qpow_example_6</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>works</p>",
        "id": 327868145,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1676406713
    },
    {
        "content": "<p>It would probably also work if you wrote something like <code>((3 ^ 2) : ℕ)</code> or <code> ((3^2) : ℕ) : ℚ)</code>; that way it knows to compute the power in <code>ℕ</code>, then cast. My guess is that this is more efficient (if that’s a concern here) since we get to just use <code>Nat.pow</code>.</p>\n<p>As for what exactly the rules are for things like <code>HPow.hPow</code> and notations like <code>^</code>, it’s a bit of a mystery to me as well…I’m not sure why it chooses some things in some cases or how I should know what to expect.</p>",
        "id": 327876091,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676409747
    }
]