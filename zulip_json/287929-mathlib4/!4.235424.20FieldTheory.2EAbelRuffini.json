[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5424\">!4#5424</a> There seems to be some sort of diamond issue in a rewrite in <code>induction2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hγ</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">α</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">β</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.splits_of_splits_mul</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">mul_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">minpoly.ne_zero</span> <span class=\"o\">(</span><span class=\"n\">isIntegral</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">minpoly.ne_zero</span> <span class=\"o\">(</span><span class=\"n\">isIntegral</span> <span class=\"n\">β</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">SplittingField.splits</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">SplittingField</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choice</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">algHom_mk_adjoin_splits</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">hx</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">isIntegral</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">hpq.1</span><span class=\"o\">⟩</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hx</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">isIntegral</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">hpq.2</span><span class=\"o\">⟩)</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">γ</span> <span class=\"bp\">=</span> <span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">hγ</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">minpoly.eq_of_irreducible_of_monic</span>\n      <span class=\"o\">(</span><span class=\"n\">minpoly.irreducible</span> <span class=\"o\">(</span><span class=\"n\">isIntegral</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">minpoly.monic</span> <span class=\"o\">(</span><span class=\"n\">isIntegral</span> <span class=\"n\">γ</span><span class=\"o\">))</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">aeval</span> <span class=\"o\">(⟨</span><span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">hγ</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aeval_algHom_apply</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">AlgHom.map_zero</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- Porting note: this instance is needed for the following `apply`</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">IntermediateField.toAlgebra</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span>\n      <span class=\"o\">(</span><span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Algebra.id</span> <span class=\"o\">(</span><span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">injective</span>\n    <span class=\"n\">haveI</span> <span class=\"n\">alge</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.id</span> <span class=\"o\">(</span><span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"n\">haveI</span> <span class=\"n\">modu</span> <span class=\"o\">:=</span> <span class=\"n\">alge.toModule</span>\n    <span class=\"n\">haveI</span> <span class=\"n\">ist</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯.</span><span class=\"n\">isScalarTower_mid'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">RingHom.map_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">aeval_algebraMap_apply</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ist</span><span class=\"o\">]</span> <span class=\"c1\">-- here</span>\n    <span class=\"n\">exact</span> <span class=\"n\">minpoly.aeval</span> <span class=\"n\">F</span> <span class=\"n\">γ</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">]</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">gal_isSolvable_of_splits</span> <span class=\"o\">⟨</span><span class=\"n\">Normal.splits</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">hγ</span><span class=\"o\">⟩)⟩</span> <span class=\"o\">(</span><span class=\"n\">gal_mul_isSolvable</span> <span class=\"n\">hα</span> <span class=\"n\">hβ</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">SplittingField.instNormal</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">aeval_algebraMap_apply</span> <span class=\"n\">F</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">}</span> <span class=\"n\">Semifield.toCommSemiring</span>\n    <span class=\"o\">(</span><span class=\"n\">Subalgebra.toCommSemiring</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯.</span><span class=\"n\">toSubalgebra</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSubalgebra</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">algebra</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"n\">ist</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">ist</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">}</span> <span class=\"n\">Algebra.toSMul</span>\n    <span class=\"o\">(</span><span class=\"n\">Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯.</span><span class=\"n\">toSubalgebra</span><span class=\"o\">)</span>\n    <span class=\"n\">Algebra.toSMul</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">⟯</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">solvableByRad</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">}</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"n\">Algebra.toSMul</span>\n    <span class=\"n\">Algebra.toSMul</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>How can I get the hidden arguments to line up? (note that in mathlib3 <code>ist</code> could be synthed perfectly and it was just <code>rw [← aeval_algebraMap_apply]</code></p>",
        "id": 369083853,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1687586334
    },
    {
        "content": "<p>Also the last <code>exact minpoly.aeval F γ</code> can't close the goal</p>",
        "id": 369084461,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1687586582
    },
    {
        "content": "<p>Having a look</p>",
        "id": 369120604,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687598302
    },
    {
        "content": "<p>It's fixed.</p>",
        "id": 369125290,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687599401
    },
    {
        "content": "<p>The problem with <code>exact minpoly.aeval F γ </code> is that the goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">hγ</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>so you are evaluating the minimal polynomial of <code>γ</code> not exactly at <code>γ</code>, but at <code>γ</code> as an element of <code>F⟮α, β⟯</code>, that is a subtype of the type of <code>γ</code>. Of course evaluating a polynomial commutes with the coercion to the original type, and this is what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.aeval_subalgebra_coe#doc\">docs#Polynomial.aeval_subalgebra_coe</a> says.</p>",
        "id": 369126144,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687599608
    }
]