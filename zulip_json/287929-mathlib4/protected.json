[
    {
        "content": "<p>What is the meaning and use of the <code>protected</code> attribute for theorems? <br>\nIt seems that they force us to use the full namespace declaration to be usable and prevent to use the dot notation…</p>",
        "id": 385423825,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692178493
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> showing it preventing dot notation?</p>",
        "id": 385424166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692178573
    },
    {
        "content": "<p>I'll try to get a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (I'm adding Equivariant morphisms, so things happen here and there), but basically it seems to be related to the problem indicated before the code of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.map#doc\">docs#LinearMap.map</a>_smulₛₗ :</p>\n<blockquote>\n<p>-- Porting note: <code>simp</code> wasn't picking up <code>map_smulₛₗ</code> for <code>LinearMap</code>s without specifying<br>\n-- <code>map_smulₛₗ f</code>, so we marked this as <code>@[simp]</code> in Mathlib3.<br>\n-- For Mathlib4, let's try without the <code>@[simp]</code> attribute and hope it won't need to be re-enabled.</p>\n</blockquote>",
        "id": 385425152,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692178839
    },
    {
        "content": "<p>I think those problems are unrelated to <code>protected</code></p>",
        "id": 385425459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692178951
    },
    {
        "content": "<p>Hence my question about the meaning of protected. (Because when I delete the <code>protected</code>, I get access to the stuff…)</p>",
        "id": 385426514,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692179312
    },
    {
        "content": "<p>Do you have a branch showing this behavior, if a mwe is too much work?</p>",
        "id": 385426589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692179345
    },
    {
        "content": "<p>Yes, this is <a href=\"https://github.com/leanprover-community/mathlib4/tree/SMulSemiHom\">branch#SMulSemiHom</a>, you can have a look at line 588 of file Mathlib/Algebra/Hom/GroupAction.lean,  see <a href=\"https://github.com/leanprover-community/mathlib4/blob/4682c890ebb31af7a22c856909d4c0c9e5c8259d/Mathlib/Algebra/Hom/GroupAction.lean\">https://github.com/leanprover-community/mathlib4/blob/4682c890ebb31af7a22c856909d4c0c9e5c8259d/Mathlib/Algebra/Hom/GroupAction.lean</a></p>",
        "id": 385427810,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692179822
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/4682c890ebb31af7a22c856909d4c0c9e5c8259d/Mathlib/Algebra/Hom/GroupAction.lean#L587\">https://github.com/leanprover-community/mathlib4/blob/4682c890ebb31af7a22c856909d4c0c9e5c8259d/Mathlib/Algebra/Hom/GroupAction.lean#L587</a></p>",
        "id": 385427877,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692179859
    },
    {
        "content": "<p>(but you're right, that example does not show the problem with the dot notation).</p>",
        "id": 385428451,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692180069
    },
    {
        "content": "<p>(I try to solve several problem at once :-())<br>\nThe problem with the dot notation that I don't understand is on line 657, <a href=\"https://github.com/leanprover-community/mathlib4/blob/4682c890ebb31af7a22c856909d4c0c9e5c8259d/Mathlib/Algebra/Hom/GroupAction.lean#L657\">https://github.com/leanprover-community/mathlib4/blob/4682c890ebb31af7a22c856909d4c0c9e5c8259d/Mathlib/Algebra/Hom/GroupAction.lean#L657</a> .<br>\nIf I type <code>comp' g f</code>, Lean understand what I means, but <code>g.comp' f</code> does not work (and works for another class).</p>",
        "id": 385428765,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692180167
    },
    {
        "content": "<p>Does removing <code>protected</code> make both work?</p>",
        "id": 385429047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692180274
    },
    {
        "content": "<p>Or are you now agreeing that <code>protected</code> is unrelated?</p>",
        "id": 385429109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692180297
    },
    {
        "content": "<p>I think I definitively have to agree that it is unrelated…</p>",
        "id": 385429373,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692180390
    },
    {
        "content": "<p>Can you explain what <code>protected</code> means ? <br>\n— why did <code>#check map_smulₑ f</code> fail while it succeeded if I removed <code>protected</code>?</p>",
        "id": 385429963,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692180625
    },
    {
        "content": "<p>For the dot notation, I see that there, <code>f</code> is a <code>DistribMulActionSemiHom</code> while the namespace is <code>DistribMulActionHom</code>.  (The former are additive maps which are equivariant for a morphism of the stuffs that act, the latter is the classic case of identity.)<br>\nI try to copy the principles of my generalization on what has been done for <code>LinearMap</code>,  sometimes the adverb <code>Semi</code> is present, sometimes not, but I am not sure I do it consistently and in the right way.</p>",
        "id": 385430290,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692180762
    },
    {
        "content": "<p>The goal is that <code>LinearMap</code> and whatever follows does require minimal adaptations. But maybe it's irrealistic.</p>",
        "id": 385430365,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692180800
    },
    {
        "content": "<p><code>protected</code> solves this issue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">_root_.foo</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bar.foo</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kn\">open</span> <span class=\"n\">Bar</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- error: which foo did you mean</span>\n</code></pre></div>",
        "id": 385430397,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692180817
    },
    {
        "content": "<p>so all those <code>foo</code> which do not have the explicit namespace <code>Bar</code> are supposed to use <code>_root_.foo</code>?<br>\nThat may solve many problems of mine where I had to include <code>_root_.</code> all over the place!</p>",
        "id": 385430676,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692180943
    },
    {
        "content": "<p><code>protected</code> means that you <em>have</em> to use the full name, even if you have <code>open</code>ed the corresponding namespace. It should work fine with doc notation though.</p>",
        "id": 385431457,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692181284
    },
    {
        "content": "<p>Note that you can override protected with <code>open MyNamespace (a_protected_lemma)</code></p>",
        "id": 385432722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692181758
    }
]