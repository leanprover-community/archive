[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2420\">!4#2420</a>, (<code>Topology.Algebra.Group.Compact</code>), <code>G ≃ₜ G</code> fails as a <code>simp</code> <code>proposition expected</code>, but works on the Lean3 side... Is there a trivial way to transform the hypothesis, or some missing machinery in the port here?</p>",
        "id": 329300102,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677016669
    },
    {
        "content": "<p>The answer was <code>Homeomorph.coe_toEquiv</code></p>",
        "id": 329300864,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677016942
    },
    {
        "content": "<p>You can just do <code>by simp [Homeomorph.mulLeft_symm]</code> (without the <code>F</code>) in this case, since <code>F</code> was introduced locally with a <code>let</code>.</p>",
        "id": 329301029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677017018
    },
    {
        "content": "<p>Ah, that works as well. Though I tried that :-)</p>",
        "id": 329301186,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677017075
    },
    {
        "content": "<p>It's weird, because <code>simp [Homeomorph.mulLeft_symm]</code> works, but <code>simp only [Homeomorph.mulLeft_symm]</code> doesn't, and any use of <code>simp?</code> suggests <code>simp only [Homeomorph.mulLeft_symm]</code> &amp; <code>simp only [Homeomorph.coe_toEquiv F Homeomorph.mulLeft_symm]]</code> doesn't work either...</p>",
        "id": 329301611,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677017243
    },
    {
        "content": "<p>simp? gave me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Homeomorph.mulLeft_symm</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span>\n      <span class=\"n\">inv_inv</span><span class=\"o\">,</span> <span class=\"n\">Homeomorph.coe_mulLeft</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel_right</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which works</p>",
        "id": 329301768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677017300
    },
    {
        "content": "<p>not on my side? So weird?</p>",
        "id": 329301950,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677017383
    },
    {
        "content": "<p>That is strange.</p>",
        "id": 329302048,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677017409
    },
    {
        "content": "<p>I'm using <code>simp? [Homeomorph.mulLeft_symm]</code>, is that what you're using as well?</p>",
        "id": 329302107,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677017438
    },
    {
        "content": "<p>Oh, I was using <code>simp? only [Homeomorph.mulLeft_symm]</code></p>",
        "id": 329302938,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677017752
    },
    {
        "content": "<p>ah that's the issue :)</p>",
        "id": 329303070,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677017797
    },
    {
        "content": "<p>that tells lean to look for the lemmas used but also to only use <code>Homeomorph.mulLeft_symm</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 329303113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677017820
    },
    {
        "content": "<p>I'm surprised that syntax is even allowed with <code>simp?</code></p>",
        "id": 329303151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677017833
    },
    {
        "content": "<p>it's slightly counterintuitive, yes.</p>",
        "id": 329303205,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677017859
    },
    {
        "content": "<p>It is useful syntax, yes. I sometimes wanted to reduce 3 lines simp calls without opening the the door the new simp lemmas being added, because I was purposefully introducing non-confluency locally.</p>",
        "id": 329309993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677020748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/invalid.20'simp'.20.20.20G.20.E2.89.83.E2.82.9C.20G.20in.20!4.232420/near/329300864\">said</a>:</p>\n<blockquote>\n<p>The answer was <code>Homeomorph.coe_toEquiv</code></p>\n</blockquote>\n<p>Actually, I don't think that's true; I just handed <code>simp</code> an equality, and the fact that it closed was a coincidence. So again, did Lean3 <code>simp</code> accept an <code>Equiv</code> and Lean4 <code>simp</code> doesn't?</p>",
        "id": 329332020,
        "sender_full_name": "Arien Malec",
        "timestamp": 1677034319
    }
]