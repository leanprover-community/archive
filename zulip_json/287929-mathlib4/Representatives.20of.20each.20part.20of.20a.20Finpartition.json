[
    {
        "content": "<p>I have a <code>Finpartition</code> of a <code>Finset</code> over some type, say <code>{{1, 2, 3}, {4, 5, 6, 7}, {8, 9}}</code>. Now I want to (obviously noncomputably) get representatives of each part of this <code>Finpartition</code> and collect them in a new <code>Finset</code> – <code>{2, 4, 9}</code> for example. The code to do this would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Partition.Finpartition</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Finpartition</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Finpartition.representatives</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">P.parts.image</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">st</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">st.some</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>except that this doesn't work. How can I make it work?</p>",
        "id": 405520373,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1701512381
    },
    {
        "content": "<p>What's that <code>.some</code> supposed to be?</p>",
        "id": 405520658,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701512638
    },
    {
        "content": "<p>Surely you mean something like <code>P.parts.attach.map ⟨fun s ↦ (P.nonempty_of_mem_parts s.2).some, sorry⟩</code>?</p>",
        "id": 405520865,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701512775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Representatives.20of.20each.20part.20of.20a.20Finpartition/near/405520658\">said</a>:</p>\n<blockquote>\n<p>What's that <code>.some</code> supposed to be?</p>\n</blockquote>\n<p>\"Choose some element from <code>st</code>\"</p>",
        "id": 405523305,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1701514449
    },
    {
        "content": "<p>Okay, but what is the Lean declaration corresponding to it?</p>",
        "id": 405523375,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701514529
    },
    {
        "content": "<p>Context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">notAdj_card_parts_le'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">notAdjFinpartition</span> <span class=\"n\">hmax</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">parts.card</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">fp</span> <span class=\"o\">:=</span> <span class=\"n\">notAdjFinpartition</span> <span class=\"n\">hmax</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- `z` is to be proved to be an `r + 1`-clique in G, contradicting Turán-maximality!</span>\n  <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">fp.parts.attach.map</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">fp.nonempty_of_mem_parts</span> <span class=\"n\">p.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.Injective</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">e</span>\n    <span class=\"n\">simp_all</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 405544917,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1701532120
    },
    {
        "content": "<p>(Yeah I was wrong, <code>.choose</code> is the right method)</p>",
        "id": 405544965,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1701532175
    }
]