[
    {
        "content": "<p>On the following test <code>polyrith</code> gives the output</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>polyrith found the following certificate, but it failed to close the goal:\n↑s * ↑y * h₁ + ↑r * ↑x * h₂ - 1 * h₃ + (↑b + 1) * h₄ + (↑a + 1) * h₅ + h₆\n</code></pre></div>\n<p>as well as quite a number of other complaints (\"ring failed, ring expressions not equal\", \"ring failed: not an equality\", \"failed to synthesize instance <code>HMul ℕ ℕ ℤ</code>\"):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Polyrith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">polyrith</span>\n</code></pre></div>",
        "id": 339764147,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678066970
    },
    {
        "content": "<p>Any ideas?  I think it's something to do with the interaction with casting, because the same test works fine when the variables are integers.</p>",
        "id": 339764163,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678066994
    },
    {
        "content": "<p><code>polyrith</code> actually has to go through an <code>Expr -&gt; Syntax -&gt; Expr</code> roundtrip because it is trying to produce something that can be fed to <code>linear_combination</code>. So things like lossy pretty printing do affect it</p>",
        "id": 339764679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678067549
    },
    {
        "content": "<p>there are some tricks it could pull to make the roundtrip lossless even though users can't write it, but I think that would weaken the claim of a <code>Try this: &lt;stuff that doesn't work&gt;</code> prompt</p>",
        "id": 339764789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678067682
    },
    {
        "content": "<p>It works in mathlib3!  Is there a different mechanism there?</p>",
        "id": 339764896,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678067832
    },
    {
        "content": "<p>Maybe coercions could be rendered in an \"input form\", though; if you replace up-arrows with type annotations the following call to <code>linear_combination</code> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₁</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₂</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h₃</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₄</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₅</span> <span class=\"bp\">+</span> <span class=\"n\">h₆</span>\n</code></pre></div>",
        "id": 339765036,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678067971
    },
    {
        "content": "<p>Oh, I just noticed that the \"failed to synthesize instance\" error occurs at position 0:0 which makes it look like the import line didn't work</p>",
        "id": 339765245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678068140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bug.20in.20.60polyrith.60.3F/near/339765036\">said</a>:</p>\n<blockquote>\n<p>Maybe coercions could be rendered in an \"input form\", though; if you replace up-arrows with type annotations the following call to <code>linear_combination</code> works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₁</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₂</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">h₃</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₄</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₅</span> <span class=\"bp\">+</span> <span class=\"n\">h₆</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Sure, but lossless pretty printing has been a dream for ages and it's a huge project</p>",
        "id": 339765292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678068213
    },
    {
        "content": "<p>I see, so not worth doing piecemeal?</p>",
        "id": 339765417,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678068358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bug.20in.20.60polyrith.60.3F/near/339764896\">said</a>:</p>\n<blockquote>\n<p>It works in mathlib3!  Is there a different mechanism there?</p>\n</blockquote>\n<p>Yes, <code>linear_combination</code> works differently in mathlib4, being primarily a macro now which manipulates syntax directly instead of working on exprs</p>",
        "id": 339765426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678068362
    },
    {
        "content": "<p>It is pretty funny (but expected) that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"n\">polyrith</span>\n</code></pre></div>",
        "id": 339766066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678068978
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> can you elaborate on what you mean by \"it works in mathlib3\"? Does it actually produce something you can successfully copy-paste?</p>",
        "id": 339766121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678069057
    },
    {
        "content": "<p>I don't know whether there is an option for coercions to show the expected type like <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> suggests. Using <code>set_option pp.coercions false</code> causes it to print <code>Nat.cast</code> applications, which doesn't really fix the type ambiguities here</p>",
        "id": 339766228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678069148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> On the following Lean 3 code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.polyrith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">polyrith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get \"goals accomplished <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>\" with a blue underline \"try this\" for</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>linear_combination ↑s * ↑y * h₁ + ↑r * ↑x * h₂ - h₃ + (↑b + 1) * h₄ + (↑a + 1) * h₅ + h₆\n</code></pre></div>\n<p>and when you click the \"try this\" to insert that code, it also works.</p>",
        "id": 339774737,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678076508
    },
    {
        "content": "<p>Maybe the key point is that (as you said) <code>linear_combination</code> is more robust in mathlib3: this (without coercions)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linear_combination</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">h₁</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">h₂</span> <span class=\"bp\">-</span> <span class=\"n\">h₃</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₄</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₅</span> <span class=\"bp\">+</span> <span class=\"n\">h₆</span>\n</code></pre></div>\n<p>solves the example in mathlib3 but not in mathlib4.</p>",
        "id": 339774933,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678076704
    },
    {
        "content": "<p>To give a simpler example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">polyrith</span>\n</code></pre></div>\n<p>expands to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linear_combination</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₁</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>which expands to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic.LinearCombination</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"n\">eq_of_add</span> <span class=\"o\">(</span><span class=\"n\">add_pf</span> <span class=\"o\">(</span><span class=\"n\">c_mul_pf</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c_mul_pf</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">h₂</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">ring1</span>\n</code></pre></div>\n<p>which fails due to elaboration issues in the <code>refine</code> line</p>",
        "id": 339775375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678077157
    },
    {
        "content": "<p>Does the mathlib3 implementation effectively do that, too?</p>",
        "id": 339775580,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678077374
    },
    {
        "content": "<p>The mathlib3 version assumes everything is over a single type and elaborates everything in advance of constructing the term. In this case we are literally constructing a syntax to pass to <code>refine</code></p>",
        "id": 339775719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678077575
    },
    {
        "content": "<p>one of the things the new implementation buys us is that it can be <em>much</em> more flexible with regard to putting <code>h</code>'s in different places. The mathlib3 version is limited to linear combinations (as the name suggests) with the <code>h</code>'s on the right, but the mathlib4 version can do stuff like <code>h1 * h2 + 3 / h3</code> as well</p>",
        "id": 339775827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678077679
    },
    {
        "content": "<p>Perhaps we could have both.  It would be nice to have a very robust version which we could even just call <code>polyrith_with_witness</code>, which fixes a type and doesn't need the flexibility since the syntax is provided by autogenerated output.  That could follow the mathlib3 implementation.  And also keep the current macro version.</p>",
        "id": 339776014,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678077860
    },
    {
        "content": "<p>but at the end of the day it is more or less just a macro over <code>refine</code>, so the issues here can be traced back to elaborator troubles. For example, it is odd that this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">c_mul_pf</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">c_mul_pf</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h₁</span>\n</code></pre></div>\n<p><code>have := c_mul_pf (α := ℤ) (↑b + 1) h₁</code> works</p>",
        "id": 339776015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678077863
    },
    {
        "content": "<p>In this case we know the types of the <code>h</code>'s, so I can add more type ascriptions if that's what is needed to keep the elaborator from getting confused</p>",
        "id": 339776072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678077949
    },
    {
        "content": "<p>It seems that putting the variable second is sufficient to fix the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">c_mul_pf'</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">c_mul_pf'</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339776183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678078068
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2678\">!4#2678</a></p>",
        "id": 339778050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678079407
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 339778068,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678079431
    },
    {
        "content": "<p>You give the test case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₁</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>Does this also work on your branch?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h₁</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>If I understand correctly, it would have in mathlib3.</p>",
        "id": 339778118,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678079498
    },
    {
        "content": "<p>yes it does. The version with the up arrows is relevant for being the style that <code>polyrith</code> generates</p>",
        "id": 339778192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678079560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bug.20in.20.60polyrith.60.3F/near/339775827\">said</a>:</p>\n<blockquote>\n<p>one of the things the new implementation buys us is that it can be <em>much</em> more flexible with regard to putting <code>h</code>'s in different places. The mathlib3 version is limited to linear combinations (as the name suggests) with the <code>h</code>'s on the right, but the mathlib4 version can do stuff like <code>h1 * h2 + 3 / h3</code> as well</p>\n</blockquote>\n<p>What the heck does <code>3 / h3</code> mean?</p>",
        "id": 339784233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678083641
    },
    {
        "content": "<p>if <code>h3 : x = y</code> then it is a proof of <code>3 / x = 3 / y</code></p>",
        "id": 339784283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678083667
    },
    {
        "content": "<p>You can basically write arbitrary expressions involving equations this way, it's just a variation on <code>congr</code></p>",
        "id": 339784461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678083734
    },
    {
        "content": "<p>There was another mathlib3 tactic that was added to construct things like this with a <code>congr</code> like name but I can't find it now... it had syntax like <code>apply_fun a + _1 * _2</code>, does this ring any bells?</p>",
        "id": 339784977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678084042
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congrm\">tactic#congrm</a>?</p>",
        "id": 339786327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678084893
    },
    {
        "content": "<p>I think someone is porting that to lean 4</p>",
        "id": 339786348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678084911
    },
    {
        "content": "<p>yeah, that</p>",
        "id": 339791475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678087389
    },
    {
        "content": "<p>basically <code>linear_combination</code> does that but specialized to +,-,*,/, and then passes the results to <code>ring1</code></p>",
        "id": 339791638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678087463
    },
    {
        "content": "<p>I think the following might be another bug in polyrith (cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Polyrith</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linear_combination</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">polyrith</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">polyrith</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">polyrith failed to retrieve a solution from Sage! TypeError:</span>\n<span class=\"cm\">a is neither an integer nor a rational</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 346281922,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680402588
    },
    {
        "content": "<p>hm, this is annoying to solve. It appears that sage doesn't like it when you give it a \"polynomial expression\" like <code>a ^ k * y</code></p>",
        "id": 346283002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680403312
    },
    {
        "content": "<p>But here <code>a ^ k</code> should be sent as a single token, right?  Because <code>k</code> is not a numeral.</p>",
        "id": 346283483,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680403640
    },
    {
        "content": "<p>I guess the issue is to parse <code>a ^ 17</code> differently from <code>a ^ k</code>.</p>",
        "id": 346283508,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680403663
    },
    {
        "content": "<p>(It works in mathlib3.)</p>",
        "id": 346284217,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680404054
    },
    {
        "content": "<p>...or not: <a href=\"https://github.com/leanprover-community/mathlib4/pull/3224\">!4#3224</a></p>",
        "id": 346284426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680404180
    },
    {
        "content": "<p>The issue is that polyrith builds on <code>ring</code>, which has a more permissive concept of \"polynomial\" due to its <code>ring_exp</code> heritage in lean 3</p>",
        "id": 346284508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680404259
    },
    {
        "content": "<p>so it has to explicitly not parse things the same way <code>ring</code> would in order to not produce non-polynomial expressions that will confuse sage</p>",
        "id": 346284574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680404302
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 346284912,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680404621
    }
]