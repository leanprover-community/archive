[
    {
        "content": "<p>The tactic <code>push_cast</code> seems to put <code>OfScientific</code> instances into some bad/non-canonical form.  This happens both on current master and also on the branch for the possibly relevant PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">!4#1707</a> (cc <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>).</p>\n<p>Consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">6</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">7</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_cast</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>After the <code>push_cast</code>, the infoview displays the goal as</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>⊢ OfScientific.ofScientific 4 true 1 * OfScientific.ofScientific 16 true 1 ^ n &lt;\n  OfScientific.ofScientific 5 true 1 * OfScientific.ofScientific 17 true 1 ^ n\n</code></pre></div>",
        "id": 343275128,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679374940
    },
    {
        "content": "<p>It appears that the canonical form of fractional numerals like <code>1.6</code> uses raw nats for the arguments to <code>ofScientific</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"mi\">15</span> <span class=\"n\">true</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- OfScientific.ofScientific 15 false 1 : Float</span>\n<span class=\"k\">#check</span> <span class=\"n\">OfScientific.ofScientific</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">15</span><span class=\"o\">)</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 1.5 : Float</span>\n</code></pre></div>\n<p><code>simp</code> automatically normalizes raw nats to regular nat literals (i.e. an <code>ofNat</code> application); I think it needs a special case for <code>ofScientific</code> next to the one it presumably already has for <code>ofNat</code> (to keep it from making <code>ofNat (ofNat 37)</code> which would be bad if iterated)</p>",
        "id": 343278363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679377036
    },
    {
        "content": "<p>you get the same behavior using <code>simp only</code> instead of <code>push_cast</code></p>",
        "id": 343278390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679377051
    },
    {
        "content": "<p>So is this a Lean core issue?</p>",
        "id": 343278588,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679377152
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/lean4/pull/2159\">lean4#2159</a> for this.</p>",
        "id": 343400144,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679411492
    }
]