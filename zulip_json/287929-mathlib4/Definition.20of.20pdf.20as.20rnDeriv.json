[
    {
        "content": "<p>Why is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.pdf#doc\">docs#MeasureTheory.pdf</a> not defined as <code>pdf X ℙ μ := (map X ℙ).rnDeriv μ</code>? It seems to me the RN derivative is a more natural definition, and <code>HasPDF X ℙ μ</code> can be defined (rather than proven as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.pdf.hasPDF_iff#doc\">docs#MeasureTheory.pdf.hasPDF_iff</a>) as <code>Measurable X ∧ (map X ℙ).HaveLebesgueDecomposition μ ∧ map X ℙ ≪ μ</code>. As far as I can understand,  this definition is equivalent to the current definition. Then it seems many lemmas about pdf can use lemmas about <code>rnDeriv</code>.</p>\n<p>Also having the (definitional) equality <code>pdf X ℙ μ = (map X ℙ).rnDeriv μ</code> would be really nice. Right now both <code>pdf</code> and <code>rnDeriv</code> are defined using <code>Classical.choose</code>, and one can only prove this equality in general up to ae under additional assumptions like SigmaFinite μ.</p>",
        "id": 403227535,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700506452
    },
    {
        "content": "<p>Does it predate <code>rnDeriv</code>?</p>",
        "id": 403227844,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700506579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Definition.20of.20pdf.20as.20rnDeriv/near/403227844\">said</a>:</p>\n<blockquote>\n<p>Does it predate <code>rnDeriv</code>?</p>\n</blockquote>\n<p>It could; the headers of both files say 2021 written by <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span>  and I'm not familiar with development of mathlib3. <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> was there any reason pdf was defined independent of rnDeriv?</p>",
        "id": 403232810,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700508667
    },
    {
        "content": "<p>They were written at the same time IIRC which is the reason. I think it would be a good idea to try changing the definition of pdfs since I'm not very happy with the definition myself. <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> has also added a lot of API for working with rnDeriv so it is probably much easier to do so now as well</p>",
        "id": 403234375,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700509356
    },
    {
        "content": "<p>I think one reason why pdf is defined like this is that with the current formulation you can talk about density wrt any measure while with rnDeriv it is only meaningful when you have a HaveLebesgueDecompositon</p>",
        "id": 403234982,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700509674
    },
    {
        "content": "<p>But I suppose in probability theory you only really care about the density wrt to the Lebesgue measure anyhow so it is not a big reason</p>",
        "id": 403235157,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700509759
    },
    {
        "content": "<p>Yes, and also doesn't HasPDF already imply HaveLebesgueDecomposition? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.pdf.haveLebesgueDecomposition_of_hasPDF#doc\">docs#MeasureTheory.pdf.haveLebesgueDecomposition_of_hasPDF</a></p>",
        "id": 403235679,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700510029
    },
    {
        "content": "<p>Oh yes, that correct. So I guess I have no worries then :)</p>",
        "id": 403236001,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700510182
    },
    {
        "content": "<p>I am willing to do a draft PR of changing the definition of <code>pdf</code> to <code>rnDeriv</code> if that's a better definition.</p>",
        "id": 403236015,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700510195
    },
    {
        "content": "<p>The reason this came up is that I am working on some entropy lemmas for my own, and it would be nice to define entropy of a measure to be the expectation of the log RN derivative wrt this measure, but also the entropy of a random variable to be the expectation of pdf * log(pdf). If pdf is definitionally equal to rnDeriv, then the measure definition of entropy would be essentially the same as the entropy of a random variable.</p>",
        "id": 403236233,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700510296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"631691\">@Thomas Zhu</span>, you should check out <a href=\"http://teorth.github.io/pfr\">teorth.github.io/pfr</a>. We have a definition of entropy and an ever growing list of lemmas about it.</p>",
        "id": 403247313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700515226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Definition.20of.20pdf.20as.20rnDeriv/near/403247313\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"631691\">Thomas Zhu</span>, you should check out <a href=\"http://teorth.github.io\">teorth.github.io</a>. We have a definition of entropy and an ever growing list of lemmas about it.</p>\n</blockquote>\n<p>Hi! I just found out about this amazing project. I was working on some lemmas on my own (for fun, not intending to PR), but your lemmas are already covering much more than what I have! I would only be additionally interested in entropy over an infinite probability space over a reference measure other than the counting measure (i.e. <code>H(ν) = ∫ log(dν/dμ) ∂ν</code> vs <code>H(p) = ∑ -p(x)log(p(x))</code>), which I think the project doesn't need?</p>",
        "id": 403249178,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700516036
    },
    {
        "content": "<p>We will not prove lemmas about that for the PFR project, indeed. I have proved a few in this branch of mathlib, if you want to have a look: <a href=\"https://github.com/leanprover-community/mathlib4/tree/RD_kl\">branch#RD_kl</a> . Look at the file Mathlib/Probability/Divergences/KullbackLeibler</p>",
        "id": 403249507,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700516180
    },
    {
        "content": "<p>I proved that it's nonnegative, as well as a version of the Donsker-Varadhan duality formula</p>",
        "id": 403249704,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700516282
    },
    {
        "content": "<p>What's the plan for integration in mathlib, actually? Should we migrate the PFR lemmas about entropy to your definition?</p>",
        "id": 403249767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700516307
    },
    {
        "content": "<p>(I am slowly PRing stuff to mathlib about withDensity, rnDeriv and soon tilted measures. Those results come next)</p>",
        "id": 403249982,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700516406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Definition.20of.20pdf.20as.20rnDeriv/near/403249767\">said</a>:</p>\n<blockquote>\n<p>What's the plan for integration in mathlib, actually? Should we migrate the PFR lemmas about entropy to your definition?</p>\n</blockquote>\n<p>I don't know exactly how we should transfer the entropy results of PFR to mathlib, but I think there is room for a definition of entropy in finite spaces, separate from the Kullback-Leibler divergence definition.</p>",
        "id": 403250222,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700516530
    },
    {
        "content": "<p>I agree, I think proving results / algorithms on finite spaces like the Huffman code are still significant.</p>",
        "id": 403251840,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700517426
    },
    {
        "content": "<p>On an unrelated note, I think <code>HasPDF</code> should be defined as a <code>def</code> or <code>structure</code> like <code>HasDerivAt</code> or <code>HasSum</code>, not a <code>class</code>? Currently I don't think there should be many scenarios where you would want to infer an instance of HasPDF implicitly rather than explicitly showing HasPDF. <a href=\"https://github.com/leanprover-community/mathlib4/blob/c6979569edc545f999b82d8a833b190c918aec2e//Mathlib/Probability/Density.lean#L68-L71\">https://github.com/leanprover-community/mathlib4/blob/c6979569edc545f999b82d8a833b190c918aec2e//Mathlib/Probability/Density.lean#L68-L71</a></p>",
        "id": 403251917,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700517471
    }
]