[
    {
        "content": "<p>While poking around slow instances, I found a note about making <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingCon#doc\">docs#RingCon</a> extend <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCon#doc\">docs#AddCon</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Con#doc\">docs#Con</a> instead of extending <code>Add</code> and <code>Mul</code> with some fields. </p>\n<p>Performance-wise, it doesn't make much difference. Is there an argument against this change?</p>",
        "id": 387157852,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692909059
    },
    {
        "content": "<p>Was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/con\">docs3#con</a> a new-style structure?</p>",
        "id": 387160764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692910543
    },
    {
        "content": "<p>Yes, it was. The port was catching up in Lean3 and I didn't want to have to go back and make <code>setoid</code> an old-style structure</p>",
        "id": 387160863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692910589
    },
    {
        "content": "<p>So you are saying you have none now?</p>",
        "id": 387161179,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692910748
    },
    {
        "content": "<p>There is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6722\">#6722</a> which I can clean up unless people object</p>",
        "id": 387162363,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692911291
    },
    {
        "content": "<p>The only counterargument I have is a general distaste for nested inheritance and the asymmetry it forces</p>",
        "id": 387162433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692911335
    },
    {
        "content": "<p>Wrong issue number?</p>",
        "id": 387162485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692911374
    },
    {
        "content": "<p>I do not know if this helps, but I always had in the back of my mind this relationship between <code>Con</code> and <code>Covariant</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Congruence</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span> <span class=\"n\">Setoid</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Setoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Con.of_covariants</span> <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Con</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul'</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"n\">wx</span> <span class=\"n\">yz</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">left</span>  <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">CovariantClass.elim</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"n\">y</span> <span class=\"n\">wx</span>\n    <span class=\"k\">have</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">CovariantClass.elim</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"n\">yz</span>\n    <span class=\"n\">Setoid.iseqv.trans</span> <span class=\"n\">left</span> <span class=\"n\">right</span>\n</code></pre></div>\n<p>I do not know if this is useful to break some proofs up...</p>",
        "id": 387201133,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692934648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RingCon.20extends/near/387162363\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6722\">#6722</a> which I can clean up unless people object</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6772\">#6772</a>?</p>",
        "id": 387202042,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692935294
    },
    {
        "content": "<p>Apologies! Semester is starting <span aria-label=\"brain\" class=\"emoji emoji-1f9e0\" role=\"img\" title=\"brain\">:brain:</span> <span aria-label=\"cooking\" class=\"emoji emoji-1f373\" role=\"img\" title=\"cooking\">:cooking:</span></p>",
        "id": 387245517,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692957330
    },
    {
        "content": "<p>Eric suggested switching the parent order and now  mathlib natively compiles 13% faster (somewhat skeptical). </p>\n<p>Marked as <code>awaiting-review</code></p>",
        "id": 387299179,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692977532
    },
    {
        "content": "<p>If you click on the metric to get to its graph, you can see that it has quite a bit of variance, especially now that Mario has significantly decreased its total time <a href=\"http://speed.lean-fro.org/mathlib4/repo-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e?zoomXStart=1692568800000&amp;zoomXEnd=1693346400000&amp;dimensions=build%3Anative%20compilation&amp;dayEquidistant=true\">http://speed.lean-fro.org/mathlib4/repo-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e?zoomXStart=1692568800000&amp;zoomXEnd=1693346400000&amp;dimensions=build%3Anative%20compilation&amp;dayEquidistant=true</a></p>",
        "id": 387306318,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692980356
    },
    {
        "content": "<p>We don't have a good means of taking that variance into account when reporting yet but I can exclude the metric from significance reporting manually if desired</p>",
        "id": 387306633,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692980495
    },
    {
        "content": "<p>I don’t think it needs to be excluded. That drop is crazy though.</p>",
        "id": 387312193,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692982903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/RingCon.20extends/near/387162433\">said</a>:</p>\n<blockquote>\n<p>The only counterargument I have is a general distaste for nested inheritance and the asymmetry it forces</p>\n</blockquote>\n<p>I'm exploring restoring this symmetry in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6791\">#6791</a></p>",
        "id": 387312451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692983012
    },
    {
        "content": "<p>I can also believe the drop here though since I can imagine compilation of algebraic quotient types is more intense but I don’t really know.</p>",
        "id": 387321010,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692987059
    }
]