[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/317450264\">said</a>:</p>\n<blockquote>\n<p>Is that true? Lean 3 didn't use mod here so it was irrelevant how it was defined</p>\n</blockquote>\n<p>I misdiagnosed this; the cause is that in Lean3, this is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat.mod</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but in Lean4, it's not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.mod</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>What prevents us using the Lean3 definition of mod here?</p>",
        "id": 319683008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672957229
    },
    {
        "content": "<p>For comparison, the two definitions are (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mod\">docs#nat.mod</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mod_core</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">mod_core</span> <span class=\"n\">fuel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.mod_core</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod#doc\">docs4#Nat.mod</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"n\">Nat.mod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">apply</span> <span class=\"n\">div_rec_lemma</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 319683088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672957272
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod#doc\">docs4#Nat.mod</a> -- bleurgh it's in core</p>",
        "id": 319683360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672957390
    },
    {
        "content": "<p>Yeah, so I guess my question should have been \"would MSR care if we pushed for the definition we used to have?\"</p>",
        "id": 319683557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672957463
    },
    {
        "content": "<p>Because if we have the old definition, then <code>Fin.val 0 = 0</code> is true by rfl</p>",
        "id": 319683619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672957494
    },
    {
        "content": "<p>Actually we used to have the lean 4 definition in lean 3 (definition by well founded recursion), it was refactored in community lean because the fuel based definition evaluates by rfl and in decidable instances</p>",
        "id": 319684674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672957972
    },
    {
        "content": "<p>Is that an argument for doing the same in Lean4, or is the claim that Lean4 achieves those goals without the refactor?</p>",
        "id": 319684775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958017
    },
    {
        "content": "<p>lean4 does not achieve those goals without the refactor, but also refactoring everything to avoid well founded recursion is not a sustainable solution</p>",
        "id": 319684896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958059
    },
    {
        "content": "<p>div/mod just happen to be especially important definitions</p>",
        "id": 319684957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958086
    },
    {
        "content": "<p>I think we would rather have a solution which allows well founded recursions to compute by rfl, without unfolding proofs</p>",
        "id": 319685028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958118
    },
    {
        "content": "<p>Is there any disadvantage to the Lean3 spelling?</p>",
        "id": 319685065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958147
    },
    {
        "content": "<p>it's not as good for the compiler, although in this particular case that's probably not a problem since the definition is overridden anyway</p>",
        "id": 319685162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958183
    },
    {
        "content": "<p>right now the main disadvantage seems to be that it's not the same as the lean 4 spelling. What is the motivation behind changing the definition?</p>",
        "id": 319685175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672958189
    },
    {
        "content": "<p>you don't want the compiled code to actually have a fuel variable</p>",
        "id": 319685182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958198
    },
    {
        "content": "<p>Kevin, are you asking what my motivation is for changing it back or Leo's for the version that's different from Lean3?</p>",
        "id": 319685210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958216
    },
    {
        "content": "<p>I guess I'm asking why Leo changed it but I guess actually he didn't change it, we changed it.</p>",
        "id": 319685340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672958281
    },
    {
        "content": "<p>I think the only difficulty in changing the definition In Lean4 to match Lean3 is we have to reprove <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod_eq#doc\">docs4#Nat.mod_eq</a>; and that's only difficult because I've never written a Lean4 proof before</p>",
        "id": 319686081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958579
    },
    {
        "content": "<p>What does the <code>@&amp; Nat</code> mean in the definition? Is this to do with <code>@[extern]</code>?</p>",
        "id": 319686408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672958719
    },
    {
        "content": "<p>it's a borrow annotation, these are only relevant for <code>@[extern]</code>s</p>",
        "id": 319686471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958746
    },
    {
        "content": "<p>It does not make any type theoretic difference, it's just meta data in an Expr tree</p>",
        "id": 319686553,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672958766
    },
    {
        "content": "<p>Lean 4 has special kernel support for computation with <code>Nat.mod</code> (as well as special extern functions for VM computation), so it shouldn't make a big difference if we change the <code>Nat.mod</code> definition.</p>",
        "id": 319691067,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672960719
    },
    {
        "content": "<p>That said, it's a huge coincidence that <code>nat.mod 0 n</code> reduces in Lean 3.  If I had picked a different value for the initial fuel, then we wouldn't have that defeq (because <code>0 &lt; n ∧ n ≤ 0</code> doesn't reduce).</p>",
        "id": 319691487,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672960924
    },
    {
        "content": "<p>Given a fair bit of mathlib builds upon that coincidence, it seems a shame to throw away the coincidence without a compelling reason</p>",
        "id": 319691625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672961007
    },
    {
        "content": "<p>20 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Porting.20Nat.2Emod_def\">#mathlib4 &gt; Porting Nat.mod_def</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 319692774,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672961546
    },
    {
        "content": "<p>24 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29\">#mathlib4 &gt; Data.Fin.Basic (mathlib4#1084)</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 319695131,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672962886
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover/lean4/pull/2014\">https://github.com/leanprover/lean4/pull/2014</a> as a draft, mainly to see if CI is happy. What are your thoughts on this, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>?</p>",
        "id": 319695433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Nat.2Emod.200.20n.20.3D.200.20no.20longer.20true.20by.20rfl/near/319691067\">said</a>:</p>\n<blockquote>\n<p>Lean 4 has special kernel support for computation with <code>Nat.mod</code> (as well as special extern functions for VM computation), so it shouldn't make a big difference if we change the <code>Nat.mod</code> definition.</p>\n</blockquote>\n<p>Oh, so I guess that means that the kernel would have to change to match the new implementation?</p>",
        "id": 319696330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963542
    },
    {
        "content": "<p>the kernel implementation is only for literals</p>",
        "id": 319696351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672963558
    },
    {
        "content": "<p>I get a pretty weird error in CI from my change above</p>",
        "id": 319696416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963578
    },
    {
        "content": "<p>A downstream <code>simp</code> call produces an invalid term</p>",
        "id": 319696432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963587
    },
    {
        "content": "<p>so as long as you haven't actually changed the value of the definition (and since you proved the same defining equation I think it's safe to say this is not the case) the kernel doesn't have to change</p>",
        "id": 319696458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672963610
    },
    {
        "content": "<p>This proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">gcd_zero_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gcd_succ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq.ndrec</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gcd</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">of_eq_true</span>\n      <span class=\"o\">(</span><span class=\"n\">Eq.trans</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">zero_mod</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">eq_self</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">))))</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gcd</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gcd</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 319696530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963662
    },
    {
        "content": "<p>Which is scary because the term which has a type mismatch is being produced by <code>simp</code></p>",
        "id": 319696608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963691
    },
    {
        "content": "<p>it works fine as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">gcd_zero_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gcd_succ</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gcd_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">gcd_zero_left</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 319696796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963808
    },
    {
        "content": "<p>But I feel like the failure might be a warning sign</p>",
        "id": 319696819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963825
    },
    {
        "content": "<p>does <code>simp only [gcd_succ]; sorry</code> work in the second branch?</p>",
        "id": 319696895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672963883
    },
    {
        "content": "<p>No, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 319696990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963926
    },
    {
        "content": "<p>Can you replicate this outside core?</p>",
        "id": 319697042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672963962
    },
    {
        "content": "<p>If I  stupidly edited things in <code>.elean/toolchains/...</code>, how do I wipe them and start afresh?</p>",
        "id": 319697124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672964032
    },
    {
        "content": "<p>I think you can use <code>elan toolchain uninstall bla</code></p>",
        "id": 319697407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672964202
    },
    {
        "content": "<p>I think this image is toast, I'll spin up a new one</p>",
        "id": 319697618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672964362
    },
    {
        "content": "<p>Yes, it reproduces outside core</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.WF</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.WFTactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.Data.Nat.Basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">modCore</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">fuel</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">Nat.modCore</span> <span class=\"n\">y</span> <span class=\"n\">fuel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mod'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">Nat.modCore</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">zero_mod'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.mod'</span> <span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">gcdF'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod'</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"gr\">sorry</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">gcd'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">WellFounded.fix</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"n\">gcdF'</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">gcd'_zero_left</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd'</span> <span class=\"mi\">0</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">gcd'_succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd'</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">gcd'</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod'</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"c1\">--              VVVVVVVVVVVVVVV error here</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">gcd'_zero_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd'</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gcd'_succ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n</div></div>",
        "id": 319698001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672964600
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 319698617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672964997
    },
    {
        "content": "<p>Oh I meant using <code>mod'</code>, no <code>prelude</code></p>",
        "id": 319698784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672965084
    },
    {
        "content": "<p>Edited above</p>",
        "id": 319698964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672965158
    },
    {
        "content": "<p>Shall I make a lean4 bug report?</p>",
        "id": 319699216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672965322
    },
    {
        "content": "<p>great, now I can use <code>show_term</code> on the simp call:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Basic</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">gcd'_zero_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd'</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gcd'_succ</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">show_term</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gcd'_succ</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- @id (gcd' (succ n) 0 = succ n) (sorryAx (gcd' (Nat.mod' 0 (succ n)) (succ n) = succ n))</span>\n</code></pre></div>",
        "id": 319699338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672965392
    },
    {
        "content": "<p>it seems that something was marked as a dsimp lemma that isn't rfl</p>",
        "id": 319699364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672965417
    },
    {
        "content": "<p>Changing <code>gcd'_succ</code>  to be proved by <code>id rfl</code> makes the error go away</p>",
        "id": 319699506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672965502
    },
    {
        "content": "<p>this could be one of those rare instances of non-transitivity of defeq</p>",
        "id": 319700120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672965913
    },
    {
        "content": "<p>It is surprising that <code>gcd'_succ</code> is provable by <code>rfl</code> in the first place, so using <code>id rfl</code> seems reasonable</p>",
        "id": 319700184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672965954
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/pull/2021\">leanprover/lean4#2021</a></p>",
        "id": 320068370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673180050
    }
]