[
    {
        "content": "<p>This is the result of a discussion with <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  last February where she lamented the fact that there aren't a lot of examples of smooth manifolds in mathlib, and in particular we don't have projective space. So I put the manifold structure on <code>‚Ñô ùïú E</code> as a way to learn a bit of differential geometry in Lean4:<br>\n<a href=\"https://github.com/smorel394/ProjectiveSpace_lean4\">https://github.com/smorel394/ProjectiveSpace_lean4</a></p>\n<p>The level of generality is the following: k is a complete nontrivially normed field, E is a normed k-vector space. The charts are modeled on closed hyperplanes so we need to have these, which means that we need a <code>SeparatingDual</code> instance on E. As a side note, I couldn't find code in  <code>Mathlib.Analysis.NormedSpace.HahnBanach.SeparatingDual</code> that proved that E has a separating dual of it is finite-dimensional, so I wrote it. </p>\n<p>An annoying technical thing is that we need to choose a particular nonzero continuous linear form to define <code>ChartedSpace</code> and <code>SmoothManifoldWithCorners</code> instances on projective space, because we need to have a fixed model. I pick it using a choice function, but this forces me to have a <code>Nonempty</code> instance on <code>{u : E // u ‚â† 0}</code> and somehow this instance seems hard to generate (say from the fact that E is of finrank at least 1). This instance is also needed to get the manifold structure on <code>{u : E // u ‚â† 0}</code> from its open embedding into E.</p>\n<p>As a test of the definition, I also wrote some helper lemmas to prove that functions to/from projective space are smooth. More precisely:</p>\n<ul>\n<li>The quotient map from <code>{u : E // u ‚â† 0}</code> to projective space is smooth;</li>\n<li>The quotient map has local sections which are smooth;</li>\n<li>A map from projective space to a manifold M is smooth if its composition with the quotient map is smooth. Also a more general version where the source is a product <code>N √ó ‚Ñô ùïú E</code>.</li>\n</ul>\n<p>And to test these lemmas, I constructed the action of <code>(E ‚ÜíL[ùïú] E)À£</code> on projective space and proved that the action map <code>(E ‚ÜíL[ùïú] E)À£ √ó (‚Ñô ùïú E) ‚Üí (‚Ñô ùïú E)</code> is smooth. This requires E to be complete. I also wrote the fact that the map from the unit sphere in E to projective space is smooth (if E is a euclidian space), but that was almost trivial at this point.</p>\n<p>Here comes my final question: should any of these be added to mathlib ? If so, how should I go about it ? (There might be code duplication, for example.) I once contributed to mathlib3 but that was a long long time ago.</p>",
        "id": 392069826,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695199505
    },
    {
        "content": "<p>Oh my, yes, all of those things should go in Mathlib. :-)</p>",
        "id": 392069978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695199570
    },
    {
        "content": "<p>I would guess this will need to be chopped up into quite a few separate PRs. This unfortunately adds some bureaucratic overhead, but is the best way to get things reviewed efficiently.</p>",
        "id": 392070166,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695199673
    },
    {
        "content": "<p>I would guess so too. The fact about <code>SeparatingDual</code> for example should probably go somewhere near <code>Mathlib.Analysis.NormedSpace.HahnBanach.SeparatingDual</code>, unless it is already in mathlib and I missed it.</p>",
        "id": 392070312,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695199729
    },
    {
        "content": "<p>As a first step, I've just given you write permissions on the mathlib4 repository. You'll need to check <a href=\"https://github.com/leanprover-community/mathlib4/invitations\">https://github.com/leanprover-community/mathlib4/invitations</a> to accept this.</p>",
        "id": 392070526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695199803
    },
    {
        "content": "<p>(It's easiest if you make PRs from branches in the main repository: CI runs better than PRs from a fork.)</p>",
        "id": 392070636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695199832
    },
    {
        "content": "<p>There is also a fact which I used several times: if we have an <code>OpenEmbedding u</code> from <code>A</code> to <code>B</code> and <code>B</code> has a smooth manifold structure, if we have the open embedding to put a smooth manifold structure on <code>A</code>, then a map from a manifold <code>M</code> to <code>A</code> is smooth if and only if its composition with <code>u</code> is smooth. I also couldn't find code for it in mathlib, and to be honest I didn't (yet) write a separate lemma for it, but it might be worth it.</p>",
        "id": 392070819,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695199903
    },
    {
        "content": "<p>About the <code>Nonempty</code> instance on <code>{u : E // u ‚â† 0}</code>, the standard assumption for this kind of things is to require <code>[Nontrivial E]</code>. It has the advantage of not mentioning the base field, so it is something that can be found by typeclass inference.</p>",
        "id": 392071019,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695199964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/270676-lean4/topic/Projective.20space/near/392071019\">said</a>:</p>\n<blockquote>\n<p>About the <code>Nonempty</code> instance on <code>{u : E // u ‚â† 0}</code>, the standard assumption for this kind of things is to require <code>[Nontrivial E]</code>. It has the advantage of not mentioning the base field, so it is something that can be found by typeclass inference.</p>\n</blockquote>\n<p>Thank you, I did not know about <code>Nontrivial E</code> ! I am going to rewrite a couple lemmas with it.</p>",
        "id": 392071162,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695200010
    },
    {
        "content": "<p>In the <code>Mathlib.Geometry.Manifold.Instances.Sphere</code> file we don't have <code>Nontrivial E</code>, but we have <code>Fact (FiniteDimensional.finrank ‚Ñù E = n + 1)]</code> which implies it. I don't know what typeclass inference will think of that.</p>",
        "id": 392071611,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695200168
    },
    {
        "content": "<p>I think that belongs in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> or <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a>! Think of all the mathematicians who never check the computer science talk going on in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 392072204,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1695200391
    },
    {
        "content": "<p>You can not have an instance that <code>[Fact (FiniteDimensional.finrank ‚Ñù E = n + 1)]</code> implies <code>[Nonempty E]</code>, because Lean can not guess <code>n</code> when trying to apply this would-be instance. If you are constructing your charted space based on <code>ùïú^n</code>, you should probably also use a similar assumption <code>[Fact (FiniteDimensional.finrank ùïú E = n + 1)]</code>.</p>",
        "id": 392072291,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695200404
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Projective.20space\">#lean4 &gt; Projective space</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 392072386,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695200431
    },
    {
        "content": "<p>I am not constructing my charted space based on <code>ùïú^n</code> even in the finite-dimensional case; in fact, I never distinguish the finite-dimensional case from the general case. The issue only arises when I am constructing the map from the euclidian sphere, since Heather used <code>‚Ñù‚Åø</code> as a model and has a <code>[Fact (FiniteDimensional.finrank ‚Ñù E = n + 1)]</code>.</p>",
        "id": 392072938,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695200638
    },
    {
        "content": "<p>The easiest solution would be to have a <code>Nontrivial E</code> instance floating around in that case, but it hurts my mathematical pride to have to add an assumption that is implied by another already existing one.</p>",
        "id": 392073211,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695200732
    },
    {
        "content": "<p>If you are using an arbitrary hyperplane as the reference vector space for your construction, do I understand correctly that you don't get the usual <code>‚Ñù^n</code> manifold structure on the projective space of an <code>(n+1)</code>-dimensional real vector space?</p>",
        "id": 392074104,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695201029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392074104\">said</a>:</p>\n<blockquote>\n<p>If you are using an arbitrary hyperplane as the reference vector space for your construction, do I understand correctly that you don't get the usual <code>‚Ñù^n</code> manifold structure on the projective space of an <code>(n+1)</code>-dimensional real vector space?</p>\n</blockquote>\n<p>I don't, but I could if I wanted. I wrote some code that does that and commented it, because what the model didn't seem to make a difference, and this way I can handle the finite-dimensional and infinite-dimensional cases in a uniform way.</p>",
        "id": 392074598,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695201203
    },
    {
        "content": "<p>By which I mean, if you convince me that it would be useful to specifically have a ‚Ñù^n manifold structure on the projective space of an (n+1)-dimensional real vector space, I'll write it. I was planning to do that at first, but then I realized that all continuous linear maps are smooth, so it made no difference in proofs of smoothness (which should mostly go through maps to/from E-{0} once you have a few basic results).</p>",
        "id": 392075088,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695201385
    },
    {
        "content": "<p>I don't know if it is important to have a ‚Ñù^n manifold structure on the projective space of an (n+1)-dimensional real vector space. Only applications can tell. It would just feel a little bit weird to have a different design for spheres and projective spaces -- but time will probably tell which one works better.</p>",
        "id": 392077416,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695202233
    },
    {
        "content": "<p>I don't have much to add, except that I want to say that I think it's really cool that you did all this, and that I agree with others that this certainly deserves to be part of mathlib.</p>",
        "id": 392116383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695216082
    },
    {
        "content": "<p>I think another nice (and even harder) project would be to put a complex manifold structure on the complex points of a smooth scheme of finite type over the complexes.</p>",
        "id": 392129130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695219872
    },
    {
        "content": "<p>We need a nerdsnipe emoji</p>",
        "id": 392138588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695222716
    },
    {
        "content": "<p>I don't think there is any natural model space for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">P</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span>. There is a natural atlas but the model depends on the chart. Forgetting topology for a while, I think the story is the following. Given any hyperplane <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, the affine chart associated to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is the set of lines transverse to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span>, which an affine space over the vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>H</mi><mo separator=\"true\">,</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(E/H, H)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span></span></span></span>. Indeed, denoting by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œÄ</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œÄ</span></span></span></span> the projection of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> onto <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">E/H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œÜ</mi><mo>:</mo><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>H</mi><mo separator=\"true\">,</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi : Hom(E/H, H)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">œÜ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span></span></span></span> onto a line <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Œî</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Œî</span></span></span></span> transverse to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>I</mi><mi>d</mi><mo>+</mo><mi>œÜ</mi><mo>‚àò</mo><mi>œÄ</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Œî</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Id + \\varphi \\circ \\pi)(\\Delta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">œÜ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">‚àò</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">œÄ</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">Œî</span><span class=\"mclose\">)</span></span></span></span>. If we want a map from the model <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>H</mi><mo separator=\"true\">,</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(E/H, H)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">P</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> then we need to also fix a line transverse to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span>. This way we get an atlas indexed by pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>H</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Œî</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(H, \\Delta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Œî</span><span class=\"mclose\">)</span></span></span></span> made of a transverse hyperplanes and lines, with model space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>H</mi><mo separator=\"true\">,</mo><mi>H</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(E/H, H)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mclose\">)</span></span></span></span>.  Of course this has a lot more charts than necessary, but it does not involve any choice. If we want to include topology to the discussion than we can use closed hyperplanes and get a nice <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">E/H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span>. </p>\n<p>But none of this fits with our current formalization where the model space needs to be fixed and we must choose a preferred chart for each point.</p>",
        "id": 392168249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695232692
    },
    {
        "content": "<p>When I thought about this some time ago, I wanted to fix some perfect pairing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>√ó</mo><mi>E</mi><mtext>‚Äô</mtext><mo>‚Üí</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">E \\times E‚Äô \\to k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">‚Äô</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> and to use this fixed pairing to obtain the charts. You can get whatever definitional properties you want by changing the pairing.</p>",
        "id": 392169968,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695233396
    },
    {
        "content": "<p>Sure, a more elementary special case is you can fix an inner product structure. Then any line <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Œî</mi><mo>:</mo><mi mathvariant=\"double-struck\">P</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Delta : \\mathbb{P}(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Œî</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> gets its pair <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"normal\">Œî</mi><mo>‚ä•</mo></msup><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Œî</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\Delta^\\perp, \\Delta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">Œî</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mrel mtight\">‚ä•</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Œî</span><span class=\"mclose\">)</span></span></span></span> indexing a preferred chart containing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Œî</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Œî</span></span></span></span>. But I don't think it gives you a fixed model space.</p>",
        "id": 392170588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695233642
    },
    {
        "content": "<p>Yeah it doesn‚Äôt give a fixed model space. IIRC I was thinking of how one might mimic Heather‚Äôs approach for the manifold structure on the sphere (where each point has some ‚Äúcanonical‚Äù chart) and that‚Äôs what I came up with. It‚Äôs been a while since I thought about this‚Ä¶</p>",
        "id": 392174607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695235310
    },
    {
        "content": "<p>In finite dimensions, the topology is unique, so it's natural to use k^{dim-1} as the model space. In infinite dimensions, maybe we can always use E itself as the model space, I'm not sure. In either case, I think the charts should be indexed by ContinuousLinearEquiv <code>f</code> between <code>E</code> and <code>M √ó k</code>, where <code>M</code> is the model space: the domain of the chart should be (the image in the projectivization of) <code>{e : E | (f e).2 ‚â† 0}</code> (i.e. where the <code>k</code> component of <code>f e</code> doesn't vanish) and the map to <code>M</code> is given by <code>(f e).1 / (f e).2</code>. (No choice is involved.)</p>\n<p>By the way, is it possible/easy to generalize to DivisionRing k?</p>",
        "id": 392194024,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695237655
    },
    {
        "content": "<p>I spent some time thinking about whether the projective space of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> should be the set of lines in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> or the set of hyperplanes. I wanted to say hyperplanes because I'm an algebraic geometer, but unfortunately projective space is already defined in mathlib as the quotient of $E\\setminus\\{0\\}$$ by homotheties. :-(<br>\nAnyway, my charts are indexed by pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>œÜ</mi><mo separator=\"true\">,</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\varphi,v)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">œÜ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œÜ</mi></mrow><annotation encoding=\"application/x-tex\">\\varphi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">œÜ</span></span></span></span> is a continuous linear form and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> is a vector such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œÜ</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\varphi(v)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">œÜ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>. (It would be just as natural to require <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œÜ</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\">‚â†</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\varphi(v)\\ne 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">œÜ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\">ÓÄ†</span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, but it makes the formulas nicer to take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œÜ</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\varphi(v)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">œÜ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, and we get enough charts anyway.) The domain of the chart is the set of lines tranverse to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>œÜ</mi><mo>=</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{\\varphi = 1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">œÜ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>, the chart sends such a line to its unique intersection point with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>œÜ</mi><mo>=</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{\\varphi =1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">œÜ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>, then uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> to construct an affine isomorphism between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>œÜ</mi><mo>=</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{\\varphi =1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">œÜ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>œÜ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Ker(\\varphi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">Ker</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">œÜ</span><span class=\"mclose\">)</span></span></span></span>. <br>\nTo get charts with a fixed codomain, I brutally use choice to pick a fixed continuous linear <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œá</mi></mrow><annotation encoding=\"application/x-tex\">\\chi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">œá</span></span></span></span> form on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, then use choice again to pick a continuous linear equivalence between $Ker(\\varphi)<span class=\"tex-error\">$$ and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>œá</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Ker(\\chi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">Ker</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">œá</span><span class=\"mclose\">)</span></span></span></span> for every $$</span>\\varphi$$. In finite dimension, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>dim</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\dim(E)=n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">dim</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, I used to have an alternative definition that used choice to pick a continuous linear equivalence between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>œÜ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Ker(\\varphi)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">Ker</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">œÜ</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">k</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, but it didn't seem to make any difference.</p>",
        "id": 392198828,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695240004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392194024\">said</a>:</p>\n<blockquote>\n<p>In finite dimensions, the topology is unique, so it's natural to use k^{dim-1} as the model space. In infinite dimensions, maybe we can always use E itself as the model space, I'm not sure. In either case, I think the charts should be indexed by ContinuousLinearEquiv <code>f</code> between <code>E</code> and <code>M √ó k</code>, where <code>M</code> is the model space: the domain of the chart should be (the image in the projectivization of) <code>{e : E | (f e).2 ‚â† 0}</code> (i.e. where the <code>k</code> component of <code>f e</code> doesn't vanish) and the map to <code>M</code> is given by <code>(f e).1 / (f e).2</code>. (No choice is involved.)</p>\n<p>By the way, is it possible/easy to generalize to DivisionRing k?</p>\n</blockquote>\n<p>I like your idea for charts, it is elegant. I don't know whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>‚äï</mo><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">E\\oplus\\mathbb{k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">‚äï</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">k</span></span></span></span> are always isomorphic as topological vector spaces if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is infinite-dimensional, it is true for Hilbert spaces but seems too good to be true for general normed vector spaces. So choice might be needed to get a chart. <br>\nWe also have to use choice in the construction because the current implementation of manifolds in mathlib requires the choice of a preferred chart at each point.<br>\nI have not thought about normed divison rings, some things like the construction of the charts might still work. But all the differentiability stuff in mathlib requires <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">k</span></span></span></span> to be a field.</p>",
        "id": 392200832,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695240990
    },
    {
        "content": "<p>Thank you for doing this!</p>\n<p>At the risk of making you feel that \"no good deed goes unpunished\" I'll also add two quick passing remarks:</p>\n<ol>\n<li>It would be nice if we could use this machinery to obtain the canonical smooth real manifold structure on quaternionic projective space</li>\n<li>I claim that it is often eventually painful to have a typeclass indexed by a non-carrier type(s). With that in mind it would be nice if we had <code>ChartedSpace F (‚Ñô ùïú E)</code> where <code>F : Type*</code> together with appropriate typeclasses on <code>F</code> etc.</li>\n</ol>\n<p>Thank you again for doing all of this. It's a big deal IMHO and the best way forward is definitely to start the PR process.</p>",
        "id": 392204673,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1695242817
    },
    {
        "content": "<p>Yeah, I think we can even get a canonical (analytic) complex manifold structure on quaternionic projective spaces (we probably won't define <a href=\"https://en.wikipedia.org/wiki/Quaternionic_manifold\">quaternionic manifolds</a> yet). I think we can be satisfied with ‚Ñç^n (or a more general ‚Ñç-vector spaces) as the model space with complex analytic transition functions. The current code already produces a (smooth = analytic) complex manifold structure on complex projective spaces, I think. If we work with a general model space, then going from complex to real is just a matter of switching to a larger StructureGroupoid, which should be trivial to do. (But we need to assume something like <code>[Module ‚Ñù V] [Module ‚ÑÇ V] [Module ‚Ñç V] [IsScalarTower ‚Ñù ‚ÑÇ V] [IsScalarTower ‚ÑÇ ‚Ñç V]</code> which can be annoying.) If we work with ‚Ñç^n then we probably need an instance from <code>[ChartedSpace (‚Ñç^n) P]</code> to <code>[ChartedSpace (‚ÑÇ^2n) P]</code>, another similar complex-to-real instance,  and corresponding HasGroupoid instances.</p>\n<blockquote>\n<p>I don't know whether E and E‚äïk are always isomorphic as topological vector spaces if E is infinite-dimensional, it is true for Hilbert spaces but seems too good to be true for general normed vector spaces. </p>\n</blockquote>\n<p>Indeed some <a href=\"https://math.stackexchange.com/q/4772764/12932\">TVS has trivial dual</a> and therefore such isomorphism can't exist. There's still hope for locally convex spaces, though. For <a href=\"https://en.wikipedia.org/wiki/Complemented_subspace#Indecomposable_Banach_spaces\">Banach spaces enough such isomorphisms exist</a>, but you're not assuming completeness ...</p>\n<blockquote>\n<p>We also have to use choice in the construction because the current implementation of manifolds in mathlib requires the choice of a preferred chart at each point.</p>\n</blockquote>\n<p>Sounds like we're missing a constructor that takes in charts whose domains form an open cover ... I'd prefer ChartedSpace to not have such preferred choices as part of its data, but instead provide preferred choices through its API, but I wouldn't urge anyone to change the current design.</p>",
        "id": 392248490,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695272263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392129130\">said</a>:</p>\n<blockquote>\n<p>I think another nice (and even harder) project would be to put a complex manifold structure on the complex points of a smooth scheme of finite type over the complexes.</p>\n</blockquote>\n<p>Well, while you wish to push in this direction, do it over any complete normed field. And that could be a good test of what has to be known about smooth schemes.</p>",
        "id": 392259210,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695279374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392248490\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't know whether E and E‚äïk are always isomorphic as topological vector spaces if E is infinite-dimensional, it is true for Hilbert spaces but seems too good to be true for general normed vector spaces. </p>\n</blockquote>\n<p>Indeed some <a href=\"https://math.stackexchange.com/q/4772764/12932\">TVS has trivial dual</a> and therefore such isomorphism can't exist. There's still hope for locally convex spaces, though. For <a href=\"https://en.wikipedia.org/wiki/Complemented_subspace#Indecomposable_Banach_spaces\">Banach spaces enough such isomorphisms exist</a>, but you're not assuming completeness ...<br>\n</p>\n</blockquote>\n<p>I am assuming that the dual is separating so that weeds out the obvious counterexamples , but it is true that I am not assuming completeness to defined the charted space structure. I'll have a look at the proof that finite codimension subspaces of an infinite-dimensional Banach are isomorphic to it, maybe we don't need completeness ? It would be nice to limit the number of times choice is used. (On the other hand, while I like your description of the charts mathematically, if it becomes to painful to implement in Lean I might still stick to mine.)</p>",
        "id": 392272572,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695284773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392248490\">said</a>:</p>\n<blockquote>\n<p>Yeah, I think we can even get a canonical (analytic) complex manifold structure on quaternionic projective spaces (we probably won't define <a href=\"https://en.wikipedia.org/wiki/Quaternionic_manifold\">quaternionic manifolds</a> yet). I think we can be satisfied with ‚Ñç^n (or a more general ‚Ñç-vector spaces) as the model space with complex analytic transition functions.</p>\n</blockquote>\n<p>I remember being surprised when I first learned this but quaternionic projective spaces are not complex manifolds. More precisely, <code>‚Ñç‚Ñô‚Åø</code> does not even admit any almost complex structure (I think this is an old theorem of Massey from the 1960s). It starts to be less surprising when you recall that <code>‚Ñç‚Ñô¬π = S‚Å¥</code>.</p>\n<p>(Of course the question then is: \"where is the quaternionic geometry that <code>‚Ñç‚Ñô‚Åø</code> should carry?\" and the answer is that its natural metric has reduced holonomy giving it a quaternion-Kahler structure.)</p>",
        "id": 392272599,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1695284782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392204673\">said</a>:</p>\n<blockquote>\n<p>Thank you for doing this!</p>\n<p>At the risk of making you feel that \"no good deed goes unpunished\" I'll also add two quick passing remarks:</p>\n<ol>\n<li>It would be nice if we could use this machinery to obtain the canonical smooth real manifold structure on quaternionic projective space</li>\n<li>I claim that it is often eventually painful to have a typeclass indexed by a non-carrier type(s). With that in mind it would be nice if we had <code>ChartedSpace F (‚Ñô ùïú E)</code> where <code>F : Type*</code> together with appropriate typeclasses on <code>F</code> etc.</li>\n</ol>\n<p>Thank you again for doing all of this. It's a big deal IMHO and the best way forward is definitely to start the PR process.</p>\n</blockquote>\n<p>I'm afraid I don't understand your second point. Do you mean that it would be nice to define <code>ChartedSpace F (‚Ñô ùïú E)</code> where <code>F</code> is any normed <code>ùïú</code>-vector space with a continuous linear equivalence between <code>F ‚äï ùïú </code> and <code>E</code>, for example ? I wanted to pick a particular <code>F</code> because I wanted to make the <code>ChartedSpace</code> an instance, otherwise I run into a lot of pain when talking about <code>ContMDiff</code> maps, but I thought that instances didn't like to have non-canonical arguments ? (Maybe this is all stupid, I am still treating instances like black magic mostly.)</p>",
        "id": 392273594,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695285134
    },
    {
        "content": "<p>I think you have understood my point :) I did indeed mean indexing the <code>ChartedSpace</code> instance using any <code>F</code> together with additional data (which as you suggest should just be an equivalence between <code>F ‚äï ùïú</code> and <code>E</code>). I'm not sure at all that this would be worth the trouble so you should probably not action this suggestion, but I think you could still set up everything using typeclass instances.</p>",
        "id": 392274505,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1695285455
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- We'd need some new data-carrying typeclass like this:</span>\n<span class=\"kd\">class</span> <span class=\"n\">MySpecialEquiv</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">myEquiv</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚âÉ</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MySpecialEquiv</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ChartedSpace</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">‚Ñô</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and then the idea would be that we could create instances of <code>MySpecialEquiv</code> corresponding to the various model spaces we'd like to use in various situations.</p>\n<p>(None of the above was tested in Lean btw --- it may be full of syntax errors or worse.)</p>",
        "id": 392275167,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1695285673
    },
    {
        "content": "<p>And (unless I'm talking through my hat) you'd recover your current instance once you also authored:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MySpecialEquiv</span> <span class=\"o\">(</span><span class=\"n\">LinearMap.ker</span> <span class=\"o\">(</span><span class=\"n\">Chi</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 392275703,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1695285844
    },
    {
        "content": "<p>Ah, I see, thanks! <br>\nAnd for your first suggestion, I guess what you mean is do as much as possible for <code>E</code> a <code>NormedSpace</code> over a <code>NormedDivisionRing</code>, and then when we get to the manifold/differentiability stuff make the <code>NormedDivisionRing</code> an algebra over a <code>NormedField</code> (with a scalar tower in the appropriate place). It seems that the linear algebra stuff should go through, but of course I have to try it.<br>\nI'll start the PR process on the basic linear algebra lemmas at least (well, I'll see again if I can find some of them in mathlib first), and see if I can use some of the nice suggestions people made.</p>",
        "id": 392277314,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695286374
    },
    {
        "content": "<p>Yes, exactly. But if it turns out to be too tricky to get this working then we can settle for just a single set of scalars and leave the quaternions for another day.</p>",
        "id": 392279246,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1695287049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392248490\">said</a>:</p>\n<blockquote>\n<p>Indeed some <a href=\"https://math.stackexchange.com/q/4772764/12932\">TVS has trivial dual</a> and therefore such isomorphism can't exist. There's still hope for locally convex spaces, though. For <a href=\"https://en.wikipedia.org/wiki/Complemented_subspace#Indecomposable_Banach_spaces\">Banach spaces enough such isomorphisms exist</a>, but you're not assuming completeness ...</p>\n</blockquote>\n<p>I'm a bit confused by this problem ( = if a normed vector space has enough continuous linear forms to separate points, then is it isomorphic to its closed hyperplanes ?). The wikipedia article you refer to asserts that a subspace of finite codimension in an infinite-dimensional Banach space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> is isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> (I assume that the subspace is closed), but gives no reference. On the other hand, there is something  called Banach's hyperplane problem, which asks whether any infinite-dimensional Banach space is isomorphic to its (closed) hyperplanes, and that problem seems to have a negative solution, cf <a href=\"https://zbmath.org/0838.46011\">https://zbmath.org/0838.46011</a>.<br>\nSince the wikipedia article gives no reference, I am going to trust Gowers instead.</p>",
        "id": 392300744,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695295159
    },
    {
        "content": "<p>This assertion in Wikipedia is really strange,  and I wonder whether it could be caused by a misinterpretion of a typo in Lindenstrauss (1971), <em>Decompositions in Banach spaces</em>. There, he defines indecomposable,  prime and primary Banach spaces and writes: ‚ÄúClearly, =&gt; prime =&gt; primary.‚Äù The temptation is huge to add ‚Äúindecomposable‚Äù before the first ‚Äú=&gt;‚Äù sign, while that sign should probably just be deleted.</p>",
        "id": 392409294,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695338293
    },
    {
        "content": "<p>On the other hand,  all (closed) hyperplanes are isomorphic, and apparently that suffices for this approach...</p>",
        "id": 392409509,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695338425
    },
    {
        "content": "<p>Thanks for finding and sharing the counterexample! Looks like we have to use closed hyperplanes as model spaces in the infinite dimensional case as well.</p>\n<blockquote>\n<p>all (closed) hyperplanes are isomorphic, and apparently that suffices for this approach...</p>\n</blockquote>\n<p>Indeed, I think this holds for any Hausdorff TVS (proof is found <a href=\"https://math.stackexchange.com/a/3796437/12932\">here</a>) (w* can be taken to be one of u* , v* , and u* + v*). </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MySpecialEquiv</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">myEquiv</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚âÉ</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Do you really want that to be data carrying? I think the isomorphism will almost never be canonical, apart from the case <code>F := Fin n ‚Üí ‚Ñù</code> and <code>E := Fin (n+1) ‚Üí ‚Ñù</code>.</p>\n<blockquote>\n<p>if a normed vector space has enough continuous linear forms to separate points</p>\n</blockquote>\n<p>Normed vector spaces over the reals are locally convex and therefore by Hahn-Banach has enough continuous linear forms to separate points (SeparatingDual), and Lean knows about this (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instSeparatingDualRealInstRingRealToTopologicalSpaceToUniformSpacePseudoMetricSpace#doc\">docs#instSeparatingDualRealInstRingRealToTopologicalSpaceToUniformSpacePseudoMetricSpace</a>), but I don't know whether it generalizes to a general complete NontriviallyNormedField.</p>\n<p>Certainly, SeparatingDual is equivalent to the domains of the charts forming an open cover, at least in my approach: for any linear nonzero (continuous) linear functional <code>f : E ‚Üí ùïú</code> and any <code>e : E</code> not in the kernel we<br>\nget a decomposition into closed subspaces <code>E ‚âÖ ker f ‚äï ùïúe</code>.</p>\n<p>I guess we're not assuming anything weaker than NormedSpace because we want to talk about differentiability. If we only want a topological manifold there's a lot <a href=\"https://mathoverflow.net/questions/219644/two-vector-spaces-with-homeomorphic-open-subsets-are-isomorphic\">more flexibility</a> in choosing the model space.</p>",
        "id": 392436856,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695355812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392272599\">said</a>:</p>\n<blockquote>\n<p>I remember being surprised when I first learned this but quaternionic projective spaces are not complex manifolds. More precisely, <code>‚Ñç‚Ñô‚Åø</code> does not even admit any almost complex structure (I think this is an old theorem of Massey from the 1960s). It starts to be less surprising when you recall that <code>‚Ñç‚Ñô¬π = S‚Å¥</code>.</p>\n</blockquote>\n<p>Indeed, thanks for pointing this out! My thoughts were flawed in two ways: first there isn't even a canonical embedding of ‚ÑÇ into ‚Ñç (there's a S¬≤'s worth of them). Second, if I sat down and do the calculation with the most obvious embedding <code>a + bi ‚Ü¶ a + bi + 0j + 0k</code> I would quickly find out (from the expressions involving complex conjugates) that multiplication on ‚Ñç is not ‚ÑÇ-differentiable in the first argument, and inverse isn't ‚ÑÇ-differentiable either.</p>",
        "id": 392439666,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695358261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392436856\">said</a>:</p>\n<blockquote>\n<p>Normed vector spaces over the reals are locally convex and therefore by Hahn-Banach has enough continuous linear forms to separate points (SeparatingDual), and Lean knows about this (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instSeparatingDualRealInstRingRealToTopologicalSpaceToUniformSpacePseudoMetricSpace#doc\">docs#instSeparatingDualRealInstRingRealToTopologicalSpaceToUniformSpacePseudoMetricSpace</a>), but I don't know whether it generalizes to a general complete NontriviallyNormedField.</p>\n</blockquote>\n<p>It does not, Hahn-Banach is false even for some complete p-adic fields (it fails for non spherically complete fields like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">C</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>). I don't want to have to restrict to real and complex vector spaces, hence the <code>SeparatingDual</code> assumption.</p>\n<blockquote>\n<p>Certainly, SeparatingDual is equivalent to the domains of the charts forming an open cover, at least in my approach: for any linear nonzero (continuous) linear functional <code>f : E ‚Üí ùïú</code> and any <code>e : E</code> not in the kernel we<br>\nget a decomposition into closed subspaces <code>E ‚âÖ ker f ‚äï ùïúe</code>.</p>\n</blockquote>\n<p>Yes, it is equivalent to the domains of the chart forming an open cover in the approach I coded (which is equivalent to yours).</p>\n<blockquote>\n<p>I guess we're not assuming anything weaker than NormedSpace because we want to talk about differentiability. If we only want a topological manifold there's a lot <a href=\"https://mathoverflow.net/questions/219644/two-vector-spaces-with-homeomorphic-open-subsets-are-isomorphic\">more flexibility</a> in choosing the model space.</p>\n</blockquote>\n<p>Yes, that was because of differentiability. Some of the lemmas are more general, for example I wrote a proof that all closed hyperplanes are isomorphic that would probably work verbatim in any TVS.</p>",
        "id": 392445731,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695362553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Projective.20space/near/392436856\">said</a>:</p>\n<blockquote>\n<p>Do you really want that to be data carrying? I think the isomorphism will almost never be canonical, apart from the case <code>F := Fin n ‚Üí ‚Ñù</code> and <code>E := Fin (n+1) ‚Üí ‚Ñù</code>.</p>\n</blockquote>\n<p>Yes, I would want such a typeclass to contain data.The point about there being pairs <code>F</code>, <code>E</code> where there is no (or many) \"canonical\" equivalences  says to me that one should be careful about global instances (like we are with <code>algebra</code>) but I claim the typeclass itself makes good sense.</p>\n<p>However to be clear, I'm not pushing this approach at all: I was just trying to highlight that indexing typeclasses on non-carrier types can lead to pain eventually (and to suggest a way around this). I'd rather not harp on more about this point because I feel I've derailed this thread enough already.</p>",
        "id": 392468973,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1695371922
    },
    {
        "content": "<blockquote>\n<p>Yes, I would want such a typeclass to contain data.</p>\n</blockquote>\n<p>I think it would use <code>[Nonempty (MySpecialEquiv F E)]</code> in the infinite-dimensional case then. In the finite-dimensional case I still prefer to use <code>k^{dim E-1}</code> as the (only) model.</p>",
        "id": 392642687,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695443068
    },
    {
        "content": "<p>I realized we can also do Grassmannians under the same setup. For any subspace W of E of finite dimension r, the image of E* in W* must be the whole space, because any proper subspace U of W* annihilate some nonzero vector in W, but E* doesn't annihilate any nonzero vector by SeparatingDual. (This isn't proved in the file defining SeparatingDual.) Therefore, there exists continuous linear <code>f : E ‚Üí k^r</code> that restricts to an isomorphism on <code>W</code>, and we obtain a decomposition <code>E = ker f ‚äï W ‚âÖ ker f ‚äï k^r</code>. <code>U := ker f</code> is a closed subspace of E of finite codimension r, and <a href=\"https://math.stackexchange.com/questions/1009060/subspaces-of-same-finite-codimension-are-isomorphic\">all such subspaces</a> are isomorphic (again I think this is true in any Hausdorff (implied by SepartingDual) TVS), so <code>U^r</code> serves as the model space. Given an isomorphism <code>g : E ‚âÖ U ‚äï k^r</code>, the corresponding chart has domain consisting of r-dimensional subspaces <code>W</code> such that <code>g</code> composed with the projection to <code>k^r</code> restricts to an isomorphism from <code>W</code> to <code>k^r</code>. Then we can take images of the <code>r</code> standard basis vectors in <code>k^r</code> under the map <code>k^r ‚Üí W ‚äÜ E -g‚Üí U ‚äï k^r ‚Üí U</code> to obtain the image of <code>W</code> in <code>U^r</code> under the chart.</p>",
        "id": 392642695,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695443077
    },
    {
        "content": "<p>I think it would be particularly nice to do Grassmannians as it's unknown how to do them synthetically.</p>",
        "id": 392647294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695446872
    },
    {
        "content": "<p>I had written (on paper) the charts for Grassmannians (I don't remember where those notes are, I was using something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>W</mi><mo separator=\"true\">,</mo><mi>V</mi><mi mathvariant=\"normal\">/</mi><mi>W</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(W,V/W)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span></span></span></span> as model for the chart around a point corresponding to a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>-dimensional subspace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span>. I concentrated on projective space because I was already have enough trouble at the time proving that all closed hyperplanes are isomorphic (not mathematical trouble, lean trouble). Maybe I'll have a look again.</p>",
        "id": 392702214,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695477262
    },
    {
        "content": "<blockquote>\n<p>U := ker f is a closed subspace of E of finite codimension r, and all such subspaces are isomorphic (again I think this is true in any Hausdorff (implied by SepartingDual) TVS)</p>\n</blockquote>\n<p>Actually, not even Hausdorffness is needed. The simplest proof I currently have of this fact is as follows: if V and W both have finite codimension r in E, then <code>V ‚à© W</code> has some finite codimension s in both V and W, and there exists an algebraic isomorphism <code>(V ‚à© W) ‚äï k^s ‚âÖ V</code> that restricts to the inclusion on <code>V ‚à© W</code>, which is trivially continuous (similarly for W). We just need to show the inverse is also continuous: the projection to the k^s component has kernel <code>V ‚à© W</code>, which is closed because both V and W are, so the projection is continuous by <a href=\"https://math.stackexchange.com/a/135805/12932\">this answer</a>; mathlib has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.ker_closedComplemented_of_finiteDimensional_range#doc\">docs#ContinuousLinearMap.ker_closedComplemented_of_finiteDimensional_range</a> but it needs to be generalized from the normed setting. The projection to the <code>V ‚à© W</code> component is then also continuous because it's identity minus the composition of the map <code>V ‚Üí k^s</code> that we've just shown to be continuous and the trivially continuous map <code>k^s ‚Üí V</code>.</p>\n<p>(A more principled approach would be to prove the equivalent conditions of being a topological direct sum on <a href=\"https://en.wikipedia.org/wiki/Complemented_subspace#Motivation\">this Wikipedia page</a>,  and use condition 2d, where we'd need to show that any algebraic complement of a closed subspace (which always contain the closure of {0}) is Hausdorff.)</p>",
        "id": 392771622,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695527296
    }
]