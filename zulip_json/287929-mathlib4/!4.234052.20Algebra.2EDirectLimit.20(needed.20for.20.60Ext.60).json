[
    {
        "content": "<p>This PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/4052\">!4#4052</a> is on the way to Ext groups, which would be really good to get into Lean 4 because we need them for cohomology theories. One definition from the file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">DirectLimit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum</span> <span class=\"n\">ι</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span>\n    <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">|</span>\n        <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n          <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">DirectSum.lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">G</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">})</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">module.direct_limit</span> <span class=\"n\">Module.DirectLimit</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> is this the sort of thing which is now done with <code>TypeMax</code>?</p>",
        "id": 360353992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684782024
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">DirectSum.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 360354076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684782044
    },
    {
        "content": "<p>(Matt Ballard told me \"no, unless it's causing problems\")</p>",
        "id": 360394226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684797959
    },
    {
        "content": "<p>There are some rewrites failing in this PR, and I am dreading having to fill in the underscores manually in things like <code>rw [(FreeCommRing.lift _).map_neg]</code></p>",
        "id": 360396841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684799764
    },
    {
        "content": "<p>I had meant to look at this again today but haven't had the time yet. There are some failing rewrites.</p>",
        "id": 360534924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684849175
    },
    {
        "content": "<p>There's also</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Error: ./././Mathlib/Algebra/DirectLimit.lean:590:11: error: synthesized type class instance is not definitionally equal to expression inferred by typing rules, synthesized\n  fun a ↦ Set.decidableUnion s t a\ninferred\n  fun a ↦ propDecidable ((fun x ↦ x ∈ s ∪ t) a)\n</code></pre></div>",
        "id": 360535176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684849235
    },
    {
        "content": "<p>That looks like a misplaced <code>open Classical</code></p>",
        "id": 360536068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684849439
    },
    {
        "content": "<p>OK there's only a few errors left but I can't get rid of them.</p>",
        "id": 360634091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684874174
    },
    {
        "content": "<p>This now compiles. Thanks a lot <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> !</p>",
        "id": 360671453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684893856
    }
]