[
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/2891#discussion_r1137173310\">https://github.com/leanprover-community/mathlib4/pull/2891#discussion_r1137173310</a></p>\n<blockquote>\n<p>can <code>dsimp</code> use <code>Iff.rfl</code> lemmas in Lean 4?</p>\n</blockquote>",
        "id": 343677059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1679491554
    },
    {
        "content": "<p>Looks like no:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_id_apply</span> <span class=\"o\">:</span> <span class=\"n\">my_id</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_id</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"c1\">-- goal is still my_id p ↔ p</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 343693361,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679495035
    },
    {
        "content": "<p>Is that a \"bug\"? (Also, sorry for being so lame that I didn't test this myself. That should've been the obvious thing to do.)</p>",
        "id": 343693841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1679495120
    },
    {
        "content": "<p>I think this was added in the community fork of Lean 3, so, unsurprising that it is not supported in Lean 4</p>",
        "id": 343694399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679495245
    },
    {
        "content": "<p>Maybe a workaround for now is to give both the iff and rfl lemmas with a porting note?</p>",
        "id": 343695271,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679495447
    },
    {
        "content": "<p>By the way, do we have something like this somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Eq.iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">Iff.rfl</span>\n</code></pre></div>\n<p>It'd make it very slightly easier to use Eq lemmas in proof terms (<code>thm.iff.mp</code> and <code>thm.iff.mpr</code>), but maybe we don't want to encourage having Eq lemmas for propositions.</p>",
        "id": 343696381,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679495699
    },
    {
        "content": "<p>Found the rfl theorem check: <a href=\"https://github.com/leanprover/lean4/blob/a4acf084c85d8f1a4a3ec0f5d20f90799c27d46f/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L106\">https://github.com/leanprover/lean4/blob/a4acf084c85d8f1a4a3ec0f5d20f90799c27d46f/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L106</a></p>\n<p>It accepts more than just <code>rfl</code>, but it doesn't look at <code>Iff</code>s at all.</p>",
        "id": 343697538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679495963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20and.20Iff.2Erfl/near/343694399\">said</a>:</p>\n<blockquote>\n<p>I think this was added in the community fork of Lean 3, so, unsurprising that it is not supported in Lean 4</p>\n</blockquote>\n<p>Yes, I added this recently. I would hope  it would be reasonable to request it be added to Lean 4 too.</p>",
        "id": 343707435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679498027
    },
    {
        "content": "<blockquote>\n<p>but maybe we don't want to encourage having Eq lemmas for propositions.</p>\n</blockquote>\n<p>This was the main motivation; to allow us to retire using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a> in favor of the more reasonable <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of\">docs#set.mem_set_of</a></p>",
        "id": 343707714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679498094
    },
    {
        "content": "<p>Recently? I think <code>dsimp</code> has used <code>iff.rfl</code> lemmas for ages? At least that is how I've always experienced Lean 3.</p>",
        "id": 343707758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1679498103
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/723\">https://github.com/leanprover-community/lean/pull/723</a> was the PR</p>",
        "id": 343708107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679498168
    },
    {
        "content": "<p>2022-06-26 was about when it went live</p>",
        "id": 343708307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679498209
    },
    {
        "content": "<p>huh! That shows how well I understood the system that I was using to work on LTE <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 343709430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1679498446
    }
]