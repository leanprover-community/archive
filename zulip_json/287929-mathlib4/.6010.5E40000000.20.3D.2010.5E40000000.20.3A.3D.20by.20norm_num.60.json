[
    {
        "content": "<p>When I try testing mathlib locally, I'm finding that <code>test/norm_num.lean</code> is hanging (and not failing). In particular, this test:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Check that we avoid deep recursion in evaluating large powers.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">40000000</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">40000000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>These are large numbers, but they're only tens of megabytes to store when calculated so it's not an absurd test.</p>\n<p>I wonder if this is OS- or architecture-dependent. I'm working on an M2 Mac.</p>",
        "id": 402795350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700263135
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I <a href=\"#narrow/stream/287929-mathlib4/topic/Archive.2EExamples.2EMersennePrimes.20.235704/near/372846167\">remember</a> you adding this test. Pinging you in case it's something you want to be aware of.)</p>",
        "id": 402795750,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700263335
    },
    {
        "content": "<p>It works in the web editor</p>",
        "id": 402795993,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700263456
    },
    {
        "content": "<p>I recall something suggesting that it was OS dependent. It might be GMP dependent? (GMP is not enabled on M2 Mac)</p>",
        "id": 402796044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700263485
    },
    {
        "content": "<p>can you play with the exponent to find smaller failing examples?</p>",
        "id": 402796166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700263555
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/9-3RkvnJrcTbnNkIzQNMaWIb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9-3RkvnJrcTbnNkIzQNMaWIb/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9-3RkvnJrcTbnNkIzQNMaWIb/image.png\"></a></div>",
        "id": 402796193,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700263563
    },
    {
        "content": "<p>If I remove two zeros from each side it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">400000</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">400000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">norm_num took 612ms</span>\n<span class=\"cm\">norm_num took 621ms</span>\n<span class=\"cm\">type checking took 615ms</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I'm waiting to see what the timing is when I remove one zero</p>",
        "id": 402796323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700263624
    },
    {
        "content": "<p>It works for me locally. Maybe Kyle needs to restart a server or something?</p>",
        "id": 402796327,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700263624
    },
    {
        "content": "<p>it doesn't show up on the profiler at all for 10^400000</p>",
        "id": 402796429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700263673
    },
    {
        "content": "<p>I was running lean from scratch on the command line, using mathlib from one of the last few commits.</p>\n<p>Maybe you can give me the current commit ID of mathlib you're using <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> ?</p>",
        "id": 402796491,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700263688
    },
    {
        "content": "<p>0847db5433fdbb1d19479b86ec43038191b2745b</p>",
        "id": 402796550,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700263711
    },
    {
        "content": "<p>What command are you using? I'm opening the file in emacs.</p>",
        "id": 402796581,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700263726
    },
    {
        "content": "<p><code>10^4000000</code> is also below the threshold, <code>10^40000000</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">norm_num</span> <span class=\"n\">took</span> <span class=\"mi\">581</span><span class=\"n\">ms</span>\n<span class=\"n\">norm_num</span> <span class=\"n\">took</span> <span class=\"mi\">591</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">616</span><span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 402796584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700263728
    },
    {
        "content": "<p>I was about to give up, but three minutes later I got this result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">4000000</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">4000000</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">norm_num took 59.1s</span>\n<span class=\"cm\">norm_num took 58.1s</span>\n<span class=\"cm\">type checking took 59.1s</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 402796738,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700263808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.6010.5E40000000.20.3D.2010.5E40000000.20.3A.3D.20by.20norm_num.60/near/402796550\">said</a>:</p>\n<blockquote>\n<p>0847db5433fdbb1d19479b86ec43038191b2745b</p>\n</blockquote>\n<p>It's slow for me on this commit too</p>",
        "id": 402796858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700263872
    },
    {
        "content": "<p>can you run it in perf?</p>",
        "id": 402796887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700263896
    },
    {
        "content": "<p>ah, indeed, on my M1 mac it is slow</p>",
        "id": 402797025,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700263953
    },
    {
        "content": "<p>Is there <code>perf</code> for Mac, or do I need to find some equivalent?</p>",
        "id": 402797121,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700264017
    },
    {
        "content": "<p>I don't know, I think it exists</p>",
        "id": 402797139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700264036
    },
    {
        "content": "<p>i think \"Instruments\" is what I've used in the past</p>",
        "id": 402797199,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700264055
    },
    {
        "content": "<p>Looks like it's part of XCode</p>",
        "id": 402797292,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700264111
    },
    {
        "content": "<p>Ok, I suppose it's time to install xcode</p>",
        "id": 402797293,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700264111
    },
    {
        "content": "<p>alternatively, gdb and breakpoint</p>",
        "id": 402797371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700264155
    },
    {
        "content": "<p>Just did a profile here and most of the time is spent in <code>__gmpn_mul_basecase</code>, so apparently this is GMP-enabled</p>",
        "id": 402797619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700264282
    },
    {
        "content": "<p>It seems to be spending a lot of time doing <code>lean::mpn_mul</code> (caveat: this is the first time I'm using Instruments)</p>\n<p>I tried using <del>gdb</del> lldb, but I can't get it to run without a <code>EXC_BAD_ACCESS</code>, probably something about dynamic libraries through lldb somehow loading different...</p>",
        "id": 402799104,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700265257
    },
    {
        "content": "<p>yeah, I'm seeing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mpn_mul</span><span class=\"o\">(</span><span class=\"n\">unsigned</span> <span class=\"n\">int</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">long</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span> <span class=\"n\">const</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">long</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>show up prominently, but I don't really know how to interpret the rest of what I'm seeing</p>",
        "id": 402799300,
        "sender_full_name": "David Renshaw",
        "timestamp": 1700265405
    },
    {
        "content": "<p>my guess is that lean is implementing an asymptotically slower algorithm than GMP for multiplication</p>",
        "id": 402800777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700266100
    },
    {
        "content": "<p>Yeah, I checked, it's the O(n^2) algorithm</p>",
        "id": 402802012,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700266702
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8523\">#8523</a></p>",
        "id": 403082434,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700448996
    },
    {
        "content": "<p>Should there also be a lean4 issue for this?</p>",
        "id": 403087860,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1700452715
    },
    {
        "content": "<p>I guess... it's a big one though, so unlikely to see short term progress. We're not really ready to touch that bignum library.</p>",
        "id": 403089874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700454069
    }
]