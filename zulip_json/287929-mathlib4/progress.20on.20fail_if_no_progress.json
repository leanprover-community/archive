[
    {
        "content": "<p>I'm (finally!) taking a look again at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3757\">#3757</a>. :) I've revamped what I think the config ought to look like in the spirit of providing all knobs you might want, in part informed by what I think a <em>generic</em> configurable equality assertion ought to look like—though I'm doing this \"by hand\" instead of attempting to actually produce something general, since it's probably more important to get it working first and <em>then</em> take care of the general case, rather than the other way around! (Though I would like to address the general case here at some point! I have some ideas if anyone's curious.)</p>\n<p>In part, I'm trying to make it more natural to write your own bespoke <code>FailIfNoProgress.Config</code> instance by propagating defaults down from global settings, as per <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Inheriting.20defaults.20from.20parent.20structures\">#lean4 &gt; Inheriting defaults from parent structures</a> .</p>\n<p>I need to tweak and fill out the actual implementation to match the new configs, but this should be mostly mechanical; then more docstrings are needed, which is again straightforward. I'd also like to rewrite some of the code in that PR, as it looks quite a bit worse now than it did then...though I'm told that's a common experience :)</p>",
        "id": 373671919,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688900199
    },
    {
        "content": "<p>I'll ask a couple miscellaneous questions in this thread as I try to finish it up! <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, I hope to have it cleaned up enough to be commentable-on (comment-on-able?) in a day or two if you're interested (though my current circumstances are a bit volatile when it comes to being sure of such a thing); or, if there are obvious tasks either of you would like to address there, please feel free. :)</p>\n<p>Here's one such misc. question: I have functions <code>zip?</code>, <code>zipM?</code>, <code>zipWith?</code>, <code>zipWithM?</code>, <code>zipWithFold?</code>, and <code>zipWithFoldM?</code> which return <code>none</code> if the lengths of the lists don't match. The relevance here is that we ought to check that the lengths of two lists (of e.g. goals or hypotheses) which we're comparing match before we actually start comparing the elements. Besides the fact that I think a couple of them weren't implemented correctly back then (oops!), (1) do these exist somewhere and (2) if not, where should they go? They seem more general than <code>fail_if_no_progress</code>.</p>",
        "id": 373673037,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688900499
    },
    {
        "content": "<p>I doubt these exist. It's not obvious to me that an <code>Option</code> valued version of <code>zip</code> is the right answer here, however.</p>\n<p>Why not just separately compare the lengths, before ever looking at the <code>zip</code>? If the length don't match we can just terminate, as clearly the goal has changed by any of the standards.<br>\nWe're just comparing things like lists of hypotheses here, so there is no performance issue to worry about. </p>\n<p>If there were a reason for a richer version of <code>zip</code>, maybe something like <code>zipWithLeftovers : List α → List β → List (α × β) × List α × List β</code> (possibly an <code>⊕</code> at the end there?) would be the right answer. You can match on it to detect whether the lists had different lengths. I don't like the <code>Option</code> valued alternative because it is throwing away some but not all of the additional information available beyond <code>zip</code>, and it seems overly specific.</p>",
        "id": 373686035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688904147
    },
    {
        "content": "<p>Related are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.zipWithLeft#doc\">docs#List.zipWithLeft</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.zipWithRight#doc\">docs#List.zipWithRight</a> (and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.zipLeft#doc\">docs#List.zipLeft</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=zipRight#doc\">docs#zipRight</a>).  <code>List.zipWithLeftovers</code> and a corresponding <code>List.zipLeftovers</code> seem like they'd be a nice addition (modulo the names, since <code>With</code> implies there's a function being mapped over the zipping, and <code>List.zipLeftovers</code> isn't so descriptive on its own)</p>",
        "id": 373687182,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688904432
    },
    {
        "content": "<p><code>zipAndTail(s)</code>?</p>",
        "id": 373687317,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688904475
    },
    {
        "content": "<p>plus, <code>zipLeftovers</code> implies the existence of <code>zipRightovers</code> :)</p>",
        "id": 373697282,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688907535
    },
    {
        "content": "<p>also it’s a moot point, but just curious, what did you mean by throwing away some but not all of the information available beyond zip? Wouldn’t we be throwing it all away?</p>",
        "id": 373697930,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688907708
    },
    {
        "content": "<p>In python, it's called zip_longest</p>",
        "id": 373698038,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1688907737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/progress.20on.20fail_if_no_progress/near/373697930\">said</a>:</p>\n<blockquote>\n<p>also it’s a moot point, but just curious, what did you mean by throwing away some but not all of the information available beyond zip? Wouldn’t we be throwing it all away?</p>\n</blockquote>\n<p><code>zipwithTail : List α → List β → List (α × β) × (List α ⊕ List β)</code> is (EDIT: err, not quite...) an isomorphism from the inputs to the output. <code>zip</code> throws away \"everything\" except the <code>List (α × β)</code> part, while your <code>zip?</code> throws away everything except whether one of the two tails is non-empty. The fact that there are several intermediate options between <code>zipWithTail</code> and <code>zip</code> besides <code>zip?</code> made me dubious that any of them were generally useful.</p>",
        "id": 373803565,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688951198
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/leanprover-community/mathlib4/pull/3757\">#3757</a> <del>essentially passes CI, besides a build-trivial refactor</del> passes CI and is out for review! A couple finishing review questions that I can think of right now:</p>",
        "id": 374570417,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689158539
    },
    {
        "content": "<ul>\n<li>I introduce the obvious instance for <code>BEq MetavarKind</code> by hand. Is there a better way of doing this? Or a better location? (Should I or someone else even PR lean4 so that <code>inductive MetavarKind</code> is <code>deriving ... DecidableEq</code>?)</li>\n</ul>",
        "id": 374570447,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689158547
    },
    {
        "content": "<ul>\n<li>The last three commits refactor the comparison machinery to a new file, since it seemed a bit crowded in <code>FailIfNoProgress.lean</code>, and the content could serve an independent purpose. That is, it seems like a single \"functional unit\" not specific to <code>fail_if_no_progress</code>, and imo makes the files and logic cleaner if it's an import. But, it's only used in <code>fail_if_no_progress</code> at the moment, so I'm not sure if it should really be split off. Yea or nay? (I can simply revert if nay.)</li>\n</ul>",
        "id": 374570472,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689158552
    },
    {
        "content": "<p>I really like the gist of this PR, and I agree that the comparison functions are more widely applicable and should live in their own files. I have two questions about the functionality:</p>\n<ul>\n<li>Would it be possible to get a mode which ignores changes to <code>FVarId</code>s? That is, fvars at the same position in the context with the same type should be considered the same, even if they have different <code>FVarId</code>s. Rationale: <code>FVarId</code>s are an implementation detail and only affect the respective goal. Use case: a tactic which uses the revert-intro trick, but then ends up not doing anything between <code>revert</code> and <code>intro</code>, changes all the <code>FVarId</code>s but has not made progress.</li>\n<li>Would it be possible to get a mode which checks whether mvars occurring in the goal are the same, even if they have different <code>MVarId</code>s? The difficulty with this is that we still want to ensure that if an mvar appears multiple times in the same goal, its equivalent in the other goal also occurs in the same positions. Not sure if this is relevant for <code>fail_if_no_progress</code>; if not, it probably shouldn't be part of this PR.</li>\n</ul>",
        "id": 376961656,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689856439
    },
    {
        "content": "<p>Nice! :)</p>\n<ul>\n<li>Yes, it is! The basic version of this is the default—this is <code>checkFVarId := false</code> in <code>LocalDeclComparisonConfig</code>. However, this doesn't do the analogous thing you're suggesting for <code>MVarId</code>s, i.e. consider equivalent <code>FVarId</code>s to be equivalent when they appear in subsequent expressions. And on that note:</li>\n<li>Hmm—I'd definitely be interested in doing this (and likewise for <code>FVarId</code>s), and I think it is relevant to <code>fail_if_no_progress</code>! But it might be worth splitting it into a separate PR, as it breaks the (current) modularity of the implementation and would probably be worthy of review by itself. That would probably necessitate keeping track of the <code>MVarId</code>s and <code>FVarId</code>s that were taken to be equivalent, and then replacing them in each type expression we encountered when we compare them.</li>\n</ul>\n<p>This sort of flow would also be more efficient! Currently, we check each component against each other component in sequence, when we really ought to defer all the potentially-expensive <code>isDefEq</code> checks until the end, to see if the easier-to-check properties are sufficient for distinguishing our two states. But being able to defer checks would complicate the types of the comparison functions (or have us introduce primed versions of each comparison def which could defer checks). Or maybe we could just pass all the equivalence info from previous hypotheses/goals as arguments to the comparison functions without changing the return types—that would be less efficient, but probably easier and cleaner type-wise. (Or maybe there's an implementation involving <code>Task</code>, which I don't know anything about yet, but the name sounds possibly relevant.)</p>",
        "id": 377040222,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689869723
    },
    {
        "content": "<p>I dug up my implementation. It's more lengthy than I thought... (In fact, it doesn't quite fit into a Zulip message.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Lean.Meta.SavedState</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Aesop</span>\n\n<span class=\"c1\">-- TODO caching -- but maybe the ptrEq optimisation is enough</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">EqualUpToIdsM</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Context</span> <span class=\"n\">where</span>\n  <span class=\"n\">commonMCtx</span> <span class=\"o\">:</span> <span class=\"n\">MetavarContext</span>\n  <span class=\"n\">mctx₁</span> <span class=\"o\">:</span> <span class=\"n\">MetavarContext</span>\n  <span class=\"n\">mctx₂</span> <span class=\"o\">:</span> <span class=\"n\">MetavarContext</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"n\">equalMVarIds</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">MVarId</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"n\">equalLMVarIds</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">LMVarId</span> <span class=\"n\">LMVarId</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"n\">equalFVarIds</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">FVarId</span> <span class=\"n\">FVarId</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">EqualUpToIdsM</span>\n\n\n<span class=\"n\">abbrev</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ReaderT</span> <span class=\"n\">EqualUpToIdsM.Context</span> <span class=\"bp\">$</span> <span class=\"n\">StateRefT</span> <span class=\"n\">EqualUpToIdsM.State</span> <span class=\"n\">MetaM</span>\n\n<span class=\"c1\">-- Make the compiler generate specialized `pure`/`bind` so we do not have to optimize through the</span>\n<span class=\"c1\">-- whole monad stack at every use site. May eventually be covered by `deriving`.</span>\n<span class=\"kd\">@[inline, always_inline]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Monad</span> <span class=\"n\">EqualUpToIdsM</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">EqualUpToIdsM.run</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">commonMCtx</span> <span class=\"n\">mctx₁</span> <span class=\"n\">mctx₂</span> <span class=\"o\">:</span> <span class=\"n\">MetavarContext</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">{</span> <span class=\"n\">commonMCtx</span><span class=\"o\">,</span> <span class=\"n\">mctx₁</span><span class=\"o\">,</span> <span class=\"n\">mctx₂</span> <span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Unsafe</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">ptrEq</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">true</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">levelsEqualUpToIdsCore'</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n\n  <span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">levelsEqualUpToIdsCore'</span> <span class=\"o\">:</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">Level</span> <span class=\"bp\">→</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">l₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"n\">l₁</span> <span class=\"n\">m₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"n\">l₂</span> <span class=\"n\">m₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span> <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">imax</span> <span class=\"n\">l₁</span> <span class=\"n\">m₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">imax</span> <span class=\"n\">l₂</span> <span class=\"n\">m₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span> <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"n\">n₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">n₁</span> <span class=\"bp\">==</span> <span class=\"n\">n₂</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">m₁</span><span class=\"o\">),</span> <span class=\"n\">l₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">compareMVar</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">m₁</span> <span class=\"n\">l₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">compareMVar</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>  <span class=\"n\">m₂</span> <span class=\"n\">l₁</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"n\">where</span>\n    <span class=\"kd\">@[inline, always_inline]</span>\n    <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n      <span class=\"k\">if</span> <span class=\"n\">swap</span> <span class=\"k\">then</span>\n        <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"n\">l₂</span> <span class=\"n\">l₁</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n\n    <span class=\"kd\">@[inline, always_inline]</span>\n    <span class=\"n\">checkMVarEquality</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">LMVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">commonMCtx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">commonMCtx</span>\n      <span class=\"k\">if</span> <span class=\"n\">commonMCtx.lDepth.contains</span> <span class=\"n\">m₁</span> <span class=\"bp\">||</span> <span class=\"n\">commonMCtx.lDepth.contains</span> <span class=\"n\">m₂</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">m₁</span> <span class=\"bp\">==</span> <span class=\"n\">m₂</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">m₂'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">equalLMVarIds.find</span><span class=\"bp\">?</span> <span class=\"n\">m₁</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">m₂'</span> <span class=\"bp\">==</span> <span class=\"n\">m₂</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">modify</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">equalLMVarIds</span> <span class=\"o\">:=</span> <span class=\"n\">s.equalLMVarIds.insert</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">}</span>\n        <span class=\"n\">return</span> <span class=\"n\">true</span>\n\n    <span class=\"kd\">@[specialize]</span>\n    <span class=\"n\">compareMVar</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">LMVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">l₁</span> <span class=\"bp\">←</span> <span class=\"n\">getLevelMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">m₁</span> <span class=\"k\">then</span>\n        <span class=\"n\">go</span> <span class=\"n\">swap</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span> <span class=\"n\">l₂</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">l₂</span> <span class=\"bp\">←</span> <span class=\"n\">getLevelMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">m₂</span> <span class=\"k\">then</span>\n          <span class=\"n\">go</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"n\">l₂</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">swap</span> <span class=\"k\">then</span>\n          <span class=\"n\">checkMVarEquality</span> <span class=\"n\">m₂</span> <span class=\"n\">m₁</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">checkMVarEquality</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"n\">false</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Unsafe</span>\n\n<span class=\"kd\">@[implemented_by Unsafe.levelsEqualUpToIdsCore]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">namesEqualUpToMacroScopes</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n₁.hasMacroScopes</span> <span class=\"bp\">==</span> <span class=\"n\">n₂.hasMacroScopes</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"n\">n₁.eraseMacroScopes</span> <span class=\"bp\">==</span> <span class=\"n\">n₂.eraseMacroScopes</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">lctxDecls</span> <span class=\"o\">(</span><span class=\"n\">lctx</span> <span class=\"o\">:</span> <span class=\"n\">LocalContext</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">LocalDecl</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lctx.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">lctx.numIndices</span><span class=\"o\">)</span> <span class=\"bp\">λ</span> <span class=\"n\">decls</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decls.push</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">GoalContext</span> <span class=\"n\">where</span>\n  <span class=\"n\">mdecl₁</span> <span class=\"o\">:</span> <span class=\"n\">MetavarDecl</span>\n  <span class=\"n\">mdecl₂</span> <span class=\"o\">:</span> <span class=\"n\">MetavarDecl</span>\n  <span class=\"n\">equalFVarIds</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">FVarId</span> <span class=\"n\">FVarId</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Unsafe</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">localDeclsEqualUpToIdsCore</span> <span class=\"o\">:</span>\n      <span class=\"n\">LocalDecl</span> <span class=\"bp\">→</span> <span class=\"n\">LocalDecl</span> <span class=\"bp\">→</span> <span class=\"n\">ReaderT</span> <span class=\"n\">GoalContext</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cdecl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">userName₁</span> <span class=\"n\">type₁</span> <span class=\"n\">bi₁</span> <span class=\"n\">kind₁</span><span class=\"o\">,</span>\n      <span class=\"bp\">.</span><span class=\"n\">cdecl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">userName₂</span> <span class=\"n\">type₂</span> <span class=\"n\">bi₂</span> <span class=\"n\">kind₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">namesEqualUpToMacroScopes</span> <span class=\"n\">userName₁</span> <span class=\"n\">userName₂</span> <span class=\"bp\">&amp;&amp;</span>\n            <span class=\"n\">bi₁</span> <span class=\"bp\">==</span> <span class=\"n\">bi₂</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">kind₁</span> <span class=\"bp\">==</span> <span class=\"n\">kind₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">type₁</span> <span class=\"n\">type₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ldecl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">userName₁</span> <span class=\"n\">type₁</span> <span class=\"n\">v₁</span> <span class=\"n\">_</span> <span class=\"n\">kind₁</span><span class=\"o\">,</span>\n      <span class=\"bp\">.</span><span class=\"n\">ldecl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">userName₂</span> <span class=\"n\">type₂</span> <span class=\"n\">v₂</span> <span class=\"n\">_</span> <span class=\"n\">kind₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">namesEqualUpToMacroScopes</span> <span class=\"n\">userName₁</span> <span class=\"n\">userName₂</span> <span class=\"bp\">&amp;&amp;</span>\n            <span class=\"n\">kind₁</span> <span class=\"bp\">==</span> <span class=\"n\">kind₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">type₁</span> <span class=\"n\">type₂</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n  <span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">ReaderT</span> <span class=\"n\">GoalContext</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">ptrEq</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">true</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">exprsEqualUpToIdsCore'</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n\n  <span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">exprsEqualUpToIdsCore'</span> <span class=\"o\">:</span>\n      <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">ReaderT</span> <span class=\"n\">GoalContext</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">j</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">fvarId₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">fvarId₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">equalFVarIds.find</span><span class=\"bp\">?</span> <span class=\"n\">fvarId₁</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"n\">fvarId₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">levelsEqualUpToIdsCore</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">decl₁</span> <span class=\"n\">lvls₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">decl₂</span> <span class=\"n\">lvls₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">return</span> <span class=\"n\">decl₁</span> <span class=\"bp\">==</span> <span class=\"n\">decl₂</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">lvls₁</span> <span class=\"bp\">==</span> <span class=\"n\">lvls₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f₁</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f₂</span> <span class=\"n\">x₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span> <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n₁</span> <span class=\"n\">t₁</span> <span class=\"n\">e₁</span> <span class=\"n\">bi₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n₂</span> <span class=\"n\">t₂</span> <span class=\"n\">e₂</span> <span class=\"n\">bi₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">==</span> <span class=\"n\">n₂</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">bi₁</span> <span class=\"bp\">==</span> <span class=\"n\">bi₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">n₁</span> <span class=\"n\">t₁</span> <span class=\"n\">e₁</span> <span class=\"n\">bi₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">n₂</span> <span class=\"n\">t₂</span> <span class=\"n\">e₂</span> <span class=\"n\">bi₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">==</span> <span class=\"n\">n₂</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">bi₁</span> <span class=\"bp\">==</span> <span class=\"n\">bi₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">letE</span> <span class=\"n\">n₁</span> <span class=\"n\">t₁</span> <span class=\"n\">v₁</span> <span class=\"n\">e₁</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">letE</span> <span class=\"n\">n₂</span> <span class=\"n\">t₂</span> <span class=\"n\">v₂</span> <span class=\"n\">e₂</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">==</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span>\n      <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"n\">l₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">l₁</span> <span class=\"bp\">==</span> <span class=\"n\">l₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mdata</span> <span class=\"n\">_</span> <span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">mdata</span> <span class=\"n\">_</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">n₁</span> <span class=\"n\">i₁</span> <span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">n₂</span> <span class=\"n\">i₂</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">==</span> <span class=\"n\">n₂</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">i₁</span> <span class=\"bp\">==</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;&amp;&amp;&gt;</span> <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">m₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">compareMVar</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">m₁</span> <span class=\"n\">e₂</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">m₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">compareMVar</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>  <span class=\"n\">m₂</span> <span class=\"n\">e₁</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"n\">where</span>\n    <span class=\"kd\">@[inline, always_inline]</span>\n    <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReaderT</span> <span class=\"n\">GoalContext</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n      <span class=\"k\">if</span> <span class=\"n\">swap</span> <span class=\"k\">then</span>\n        <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">e₂</span> <span class=\"n\">e₁</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n\n    <span class=\"kd\">@[inline, always_inline]</span>\n    <span class=\"n\">checkMVarEquality</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">commonMCtx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">commonMCtx</span>\n      <span class=\"k\">if</span> <span class=\"n\">commonMCtx.decls.contains</span> <span class=\"n\">m₁</span> <span class=\"bp\">||</span> <span class=\"n\">commonMCtx.decls.contains</span> <span class=\"n\">m₂</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">m₁</span> <span class=\"bp\">==</span> <span class=\"n\">m₂</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">m₂'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">equalMVarIds.find</span><span class=\"bp\">?</span> <span class=\"n\">m₁</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">m₂'</span> <span class=\"bp\">==</span> <span class=\"n\">m₂</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">mvarIdsEqualUpToIdsCore</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"k\">then</span>\n        <span class=\"n\">modify</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">equalMVarIds</span> <span class=\"o\">:=</span> <span class=\"n\">s.equalMVarIds.insert</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">}</span>\n        <span class=\"n\">return</span> <span class=\"n\">true</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n    <span class=\"kd\">@[specialize]</span>\n    <span class=\"n\">compareMVar</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"n\">ReaderT</span> <span class=\"n\">GoalContext</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">e₁</span> <span class=\"bp\">←</span> <span class=\"n\">getExprMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">m₁</span> <span class=\"k\">then</span>\n        <span class=\"n\">go</span> <span class=\"n\">swap</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">m₂</span> <span class=\"o\">:=</span> <span class=\"n\">e₂</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">e₂</span> <span class=\"bp\">←</span> <span class=\"n\">getExprMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">m₂</span> <span class=\"k\">then</span>\n          <span class=\"n\">go</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"n\">e₂</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">swap</span> <span class=\"k\">then</span>\n          <span class=\"n\">checkMVarEquality</span> <span class=\"n\">m₂</span> <span class=\"n\">m₁</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">checkMVarEquality</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n  <span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">mvarIdsEqualUpToIdsCore</span> <span class=\"o\">(</span><span class=\"n\">mvarId₁</span> <span class=\"n\">mvarId₂</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">gctx</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">mdecl₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">gctx.mctx₁.decls.find</span><span class=\"bp\">?</span> <span class=\"n\">mvarId₁</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span>\n      <span class=\"s2\">\"unknown metavariable '?{mvarId₁.name}'\"</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">mdecl₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">gctx.mctx₂.decls.find</span><span class=\"bp\">?</span> <span class=\"n\">mvarId₂</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span>\n      <span class=\"s2\">\"unknown metavariable '?{mvarId₂.name}'\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">decls₁</span> <span class=\"o\">:=</span> <span class=\"n\">lctxDecls</span> <span class=\"n\">mdecl₁.lctx</span>\n    <span class=\"k\">let</span> <span class=\"n\">decls₂</span> <span class=\"o\">:=</span> <span class=\"n\">lctxDecls</span> <span class=\"n\">mdecl₂.lctx</span>\n    <span class=\"k\">if</span> <span class=\"n\">decls₁.size</span> <span class=\"bp\">!=</span> <span class=\"n\">decls₂.size</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">false</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">gctx</span> <span class=\"o\">:</span> <span class=\"n\">GoalContext</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">mdecl₁</span><span class=\"o\">,</span> <span class=\"n\">mdecl₂</span> <span class=\"o\">}</span>\n    <span class=\"n\">for</span> <span class=\"n\">ldecl₁</span> <span class=\"k\">in</span> <span class=\"n\">decls₁</span><span class=\"o\">,</span> <span class=\"n\">ldecl₂</span> <span class=\"k\">in</span> <span class=\"n\">decls₂</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">localDeclsEqualUpToIdsCore</span> <span class=\"n\">ldecl₁</span> <span class=\"n\">ldecl₂</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"n\">gctx</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">false</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">equalFVarIds</span> <span class=\"o\">:=</span> <span class=\"n\">gctx.equalFVarIds.insert</span> <span class=\"n\">ldecl₁.fvarId</span> <span class=\"n\">ldecl₂.fvarId</span>\n        <span class=\"n\">gctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">gctx</span> <span class=\"k\">with</span> <span class=\"n\">equalFVarIds</span> <span class=\"o\">}</span>\n    <span class=\"n\">exprsEqualUpToIdsCore</span> <span class=\"n\">mdecl₁.type</span> <span class=\"n\">mdecl₂.type</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"n\">gctx</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Unsafe</span>\n\n<span class=\"kd\">@[implemented_by Unsafe.mvarIdsEqualUpToIdsCore]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">mvarIdsEqualUpToIdsCore</span> <span class=\"o\">(</span><span class=\"n\">mvarId₁</span> <span class=\"n\">mvarId₂</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EqualUpToIdsM</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mvarIdsEqualUpToIds</span> <span class=\"o\">(</span><span class=\"n\">commonMCtx</span> <span class=\"n\">mctx₁</span> <span class=\"n\">mctx₂</span> <span class=\"o\">:</span> <span class=\"n\">MetavarContext</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mvarId₁</span> <span class=\"n\">mvarId₂</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">mvarIdsEqualUpToIdsCore</span> <span class=\"n\">mvarId₁</span> <span class=\"n\">mvarId₂</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"n\">commonMCtx</span> <span class=\"n\">mctx₁</span> <span class=\"n\">mctx₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tacticStatesEqualUpToIds</span> <span class=\"o\">(</span><span class=\"n\">commonMCtx</span> <span class=\"n\">mctx₁</span> <span class=\"n\">mctx₂</span> <span class=\"o\">:</span> <span class=\"n\">MetavarContext</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">goals₁</span> <span class=\"n\">goals₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">goals₁.length</span> <span class=\"bp\">!=</span> <span class=\"n\">goals₂.length</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">for</span> <span class=\"n\">g₁</span> <span class=\"k\">in</span> <span class=\"n\">goals₁</span><span class=\"o\">,</span> <span class=\"n\">g₂</span> <span class=\"k\">in</span> <span class=\"n\">goals₂</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarIdsEqualUpToIds</span> <span class=\"n\">commonMCtx</span> <span class=\"n\">mctx₁</span> <span class=\"n\">mctx₂</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">false</span>\n    <span class=\"n\">return</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 377048912,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689871612
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">assertEqualTactics</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">commonMCtx</span> <span class=\"bp\">←</span> <span class=\"n\">getMCtx</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state₁</span><span class=\"o\">,</span> <span class=\"n\">goals₁</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">runTactic</span> <span class=\"n\">t₁</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state₂</span><span class=\"o\">,</span> <span class=\"n\">goals₂</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">runTactic</span> <span class=\"n\">t₂</span>\n  <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"bp\">←</span>\n    <span class=\"n\">tacticStatesEqualUpToIds</span> <span class=\"n\">commonMCtx</span> <span class=\"n\">state₁.meta.mctx</span> <span class=\"n\">state₂.meta.mctx</span>\n      <span class=\"n\">goals₁</span> <span class=\"n\">goals₂</span>\n  <span class=\"k\">if</span> <span class=\"bp\">!</span> <span class=\"n\">eq</span> <span class=\"k\">then</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"Tactics produced different tactic states.</span><span class=\"se\">\\n</span><span class=\"s2\">Tactic 1:{indentD $ ← ppTacticState state₁ goals₁}</span><span class=\"se\">\\n</span><span class=\"s2\">Tactic 2:{indentD $ ← ppTacticState state₂ goals₂}\"</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">runTactic</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"o\">(</span><span class=\"n\">Meta.SavedState</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">withoutModifyingState</span> <span class=\"k\">do</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">saveState</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">s.term.meta</span><span class=\"o\">,</span> <span class=\"n\">s.tactic.goals</span><span class=\"o\">)</span>\n\n  <span class=\"n\">ppTacticState</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">Meta.SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">goals</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">MetaM</span> <span class=\"n\">MessageData</span> <span class=\"o\">:=</span>\n    <span class=\"n\">state.runMetaM'</span> <span class=\"k\">do</span>\n      <span class=\"n\">addMessageContext</span> <span class=\"bp\">$</span> <span class=\"bp\">.</span><span class=\"n\">joinSep</span> <span class=\"o\">(</span><span class=\"n\">goals.map</span> <span class=\"n\">toMessageData</span><span class=\"o\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"assert_equal_tactics \"</span>\n    <span class=\"s2\">\" { \"</span> <span class=\"n\">ts₁</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"s2\">\" } \"</span> <span class=\"s2\">\" { \"</span> <span class=\"n\">ts₂</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"s2\">\" } \"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">assertEqualTactics</span> <span class=\"o\">(</span><span class=\"n\">evalTactic</span> <span class=\"n\">ts₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">evalTactic</span> <span class=\"n\">ts₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">assert_equal_tactics</span> <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">assert_equal_tactics</span> <span class=\"o\">{</span> <span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fail_if_success</span> <span class=\"n\">assert_equal_tactics</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"o\">}</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span>\n  <span class=\"n\">assert_equal_tactics</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_succ_self</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_succ_self</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">case</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">all_goals</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span>\n  <span class=\"n\">assert_equal_tactics</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">case</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">all_goals</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Aesop</span>\n</code></pre></div>",
        "id": 377048964,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689871623
    },
    {
        "content": "<p>Oh nice! :D That seems to use some neat low-level functionality I'm not yet familiar with—e.g., when exactly to use <code>@[inline]</code> or <code>@[always_inline]</code>, what <code>@[specialize]</code> means, etc. (I keep meaning to dig a bit deeper on those.)</p>\n<p>Would it be useful to pepper in <code>ptrEq</code> throughout the PR'd <code>fail_if_no_progress</code> in the way you've done here, or is that already taken care of by <code>beq</code>/<code>isDefEq</code>?</p>\n<p>In the <code>fail_if_no_progress</code> context (which is a bit more general, I suppose) I wonder if it instead makes sense to traverse the expression and e.g. replace <code>mvar1</code> with <code>mvar2</code> in <code>e₁</code> once they've been deemed equivalent, then compare this <code>e₁'</code> with <code>e₂</code>. That way, we get to use <code>isDefEq</code> if we like. Though I'm not sure how to handle different levels in that context...maybe they could be abstracted out into level mvars for <code>isDefEq</code>? For <code>beq</code>, maybe a more specific implementation like the one you have here would be useful. It might also be useful to simply use your implementation as a drop-in replacement for <code>beq</code> when ignoring id's (instead of traversing &amp; replacing)!</p>",
        "id": 377053404,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1689872545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/progress.20on.20fail_if_no_progress/near/377053404\">said</a>:</p>\n<blockquote>\n<p>Oh nice! :D That seems to use some neat low-level functionality I'm not yet familiar with—e.g., when exactly to use <code>@[inline]</code> or <code>@[always_inline]</code>, what <code>@[specialize]</code> means, etc. (I keep meaning to dig a bit deeper on those.)</p>\n</blockquote>\n<p>I'm mostly cargo-culting this stuff myself; haven't done any measurements. <code>@[specialize]</code> should be analogous to Haskell's <code>{- SPECIALIZE -}</code>, which, for a function with instance argument <code>[C α]</code>, generates a specialized version of the function for each instance of <code>C</code> at which the function is used.</p>\n<blockquote>\n<p>Would it be useful to pepper in <code>ptrEq</code> throughout the PR'd <code>fail_if_no_progress</code> in the way you've done here, or is that already taken care of by <code>beq</code>/<code>isDefEq</code>?</p>\n</blockquote>\n<p>The core functions should already be using pointer equality where appropriate.</p>\n<blockquote>\n<p>In the <code>fail_if_no_progress</code> context (which is a bit more general, I suppose) I wonder if it instead makes sense to traverse the expression and e.g. replace <code>mvar1</code> with <code>mvar2</code> in <code>e₁</code> once they've been deemed equivalent, then compare this <code>e₁'</code> with <code>e₂</code>. That way, we get to use <code>isDefEq</code> if we like. Though I'm not sure how to handle different levels in that context...maybe they could be abstracted out into level mvars for <code>isDefEq</code>? For <code>beq</code>, maybe a more specific implementation like the one you have here would be useful. It might also be useful to simply use your implementation as a drop-in replacement for <code>beq</code> when ignoring id's (instead of traversing &amp; replacing)!</p>\n</blockquote>\n<p>For <code>beq</code>, you should probably use my code or something like it. That'll be more efficient than replacing mvars. (Also more complex though.) For <code>isDefEq</code>, I guess replacing mvars is the only practicable way.</p>",
        "id": 377060953,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689874217
    },
    {
        "content": "<p>BTW my impression was (though I could be wrong), that in Lean instance arguments were always considered for specialization by the compiler, so for lean it is mostly helpful when you have something higher order, like a function argument, but that isn't a typeclass.</p>",
        "id": 377131097,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689894769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> I've now tested my equality checking algorithm and of course it turned out to be more than a little buggy. A new version is now <a href=\"https://github.com/JLimperg/aesop/blob/d13a9666e6f430b940ef8d092f1219e964b52a09/Aesop/Util/EqualUpToIds.lean\">in Aesop</a>. This one is used all over the Aesop test suite, so I'm fairly confident that it is mostly correct.</p>",
        "id": 383925304,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1691753893
    }
]