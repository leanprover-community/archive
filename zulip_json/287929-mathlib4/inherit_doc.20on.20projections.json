[
    {
        "content": "<p>Can we add a linter to protect against the documentation mess at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Bicone#doc\">docs#CategoryTheory.Limits.Bicone</a> ? The docs tell me the same thing 5 times</p>",
        "id": 390183911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694378956
    },
    {
        "content": "<p>The culprit is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">inherit_doc</span> <span class=\"n\">Bicone</span><span class=\"o\">]</span> <span class=\"n\">Bicone.pt</span> <span class=\"n\">Bicone.π</span> <span class=\"n\">Bicone.ι</span> <span class=\"n\">Bicone.ι_π</span>\n</code></pre></div>\n<p>which I think is a sloppy attempt to silence the doc linter</p>",
        "id": 390184066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694379057
    },
    {
        "content": "<p>Well, the attempt was successful...</p>",
        "id": 390184197,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694379137
    },
    {
        "content": "<p>Well, not really since the linter was globally disabled at the time it was written anyway...</p>",
        "id": 390184237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694379173
    },
    {
        "content": "<p>Is the proposal that the linter would prevent assigning the same docs to a field of a structure?</p>",
        "id": 390184377,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694379271
    },
    {
        "content": "<p>Yes, that seems like something that is never the right thing to do</p>",
        "id": 390184449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694379345
    },
    {
        "content": "<p>The linter could be called <code>docs.WellFounded</code>.</p>",
        "id": 390184731,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694379564
    },
    {
        "content": "<p>The empty string counts as a doc-string:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"sd\">/---/</span>\n<span class=\"kd\">def</span> <span class=\"n\">IamDocumented</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">-- Found 0 errors in 1 declarations (plus 2 automatically generated ones) in the current file with 12 linters</span>\n\n\n<span class=\"cm\">-- All linting checks passed!</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Should this be disallowed?  My idea of doc-string is that there will be something to read and there is not much reading to do with the empty string.</p>",
        "id": 390187958,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694381901
    },
    {
        "content": "<p>Reid always argued that an empty docstring was better than a docstring written just to shut a linter up by someone who didn't know or care about the material</p>",
        "id": 390193945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694385911
    },
    {
        "content": "<p>I wonder if every time that we hover over an empty doc-strings, Chat-GPT could make a new attempt at describing the object, until we are happy with the outcome.</p>",
        "id": 390194911,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694386482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/inherit_doc.20on.20projections/near/390193945\">said</a>:</p>\n<blockquote>\n<p>Reid always argued that an empty docstring was better than a docstring written just to shut a linter up by someone who didn't know or care about the material</p>\n</blockquote>\n<p>This situation should never happen; if the linter is complaining about a missing docstring, it is because the definition was added by the very person who should be writing the docstring! And if they don't know about the material, they shouldn't be the one to PR it...</p>",
        "id": 390257350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694419992
    },
    {
        "content": "<p>This was not at all the case during the port though; people ported \"the next file on the list\" regardless of whether they knew the material, and fields of structures did not have to be docstringed in Lean 3.</p>",
        "id": 390257620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694420113
    },
    {
        "content": "<p>They didn't in lean4 either, for most of the port</p>",
        "id": 390259169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694420725
    },
    {
        "content": "<p>People got confused by <code>#lint</code> which was much stricter than CI and told people to do things we didn't actually want them to do</p>",
        "id": 390259219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694420751
    }
]