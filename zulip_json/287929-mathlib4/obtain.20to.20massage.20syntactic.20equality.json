[
    {
        "content": "<p>One feature of mathlib3 <code>obtain</code> was that it could change the type of a term to something defeq, using a type annotation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.rcases</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.nat.lemmas</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">ha1</span> <span class=\"bp\">|</span> <span class=\"n\">ha2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- `ha2` has type `3 ≤ a`</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It seems that std4 <code>obtain</code> has lost this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Lemmas</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">ha1</span> <span class=\"bp\">|</span> <span class=\"n\">ha2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">a</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- `ha2` has type `2 &lt; a`</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Would it be difficult to port this useful feature?</p>",
        "id": 324526570,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675056123
    },
    {
        "content": "<p>Hm, this std MWE does not show the same behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.RCases</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">ha1</span> <span class=\"bp\">|</span> <span class=\"n\">ha2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Decidable.or_iff_not_imp_left.2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat.not_le</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">inl</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">ha1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n<span class=\"n\">case</span> <span class=\"n\">inr</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">ha2</span><span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 324527780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675056923
    },
    {
        "content": "<p>FTR this is already supposed to be implemented</p>",
        "id": 324527811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675056952
    },
    {
        "content": "<p>fixed on master</p>",
        "id": 324530723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675058797
    }
]