[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Tauto</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- do nothing (?)</span>\n  <span class=\"n\">tauto</span> <span class=\"c1\">-- fails if no previous line</span>\n</code></pre></div>",
        "id": 370505747,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1687971397
    },
    {
        "content": "<p>Even <code>set_option pp.all true</code> shows that nothing is changing. Here's the goal state before and after the <code>simp</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Not</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">And</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instDecidableAnd</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">Classical.propDecidable</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Classical.propDecidable</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">0</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 370512019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687972590
    },
    {
        "content": "<p>Could <code>simp only at h</code> be clearing away some sort of <code>.mdata</code>?</p>",
        "id": 370513086,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1687972803
    },
    {
        "content": "<p>No mdata, but it is instantiating a metavariable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Tauto</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"print_term\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{t} : {ty}\"</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">print_term</span> <span class=\"n\">h</span> <span class=\"c1\">-- _uniq.2545 : ?_uniq.2544</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">print_term</span> <span class=\"n\">h</span> <span class=\"c1\">-- _uniq.2545 : Not (And _uniq.2515 _uniq.2516)</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 370514463,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687973062
    },
    {
        "content": "<p>Metaprogramming consists of only three tasks:</p>\n<ol>\n<li>remembering <code>withMainContext</code></li>\n<li>remembering <code>whnf</code></li>\n<li>remembering <code>instantiateMVars</code></li>\n</ol>",
        "id": 370576262,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1687986707
    },
    {
        "content": "<p>So this is bug with <code>tauto</code> not calling <code>instantiateMVars</code> somewhere? Do we know where / have a fix?</p>",
        "id": 370600563,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687996877
    },
    {
        "content": "<p>I'm working on it</p>",
        "id": 370601948,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687997638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/weird.20tactic.20bug/near/370576262\">said</a>:</p>\n<blockquote>\n<p>Metaprogramming consists of only three tasks:</p>\n<ol>\n<li>remembering <code>withMainContext</code></li>\n<li>remembering <code>whnf</code></li>\n<li>remembering <code>instantiateMVars</code></li>\n</ol>\n</blockquote>\n<p>Based on prior evidence I would say that metaprogramming seems to consist of:</p>\n<ol>\n<li>forgetting <code>withMainContext</code> and bugfixing it later</li>\n<li>forgetting <code>whnf</code> and bugfixing it later</li>\n<li>forgetting <code>instantiateMVars</code> and bugfixing it later</li>\n</ol>",
        "id": 370602976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687998277
    },
    {
        "content": "<p>I prefer to think of them as the three patron saints of metaprogramming <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20error.20in.20structured.20proof/near/322950305\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/linarith.20error.20in.20structured.20proof/near/322950305</a></p>",
        "id": 370603482,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687998615
    },
    {
        "content": "<p>I think in the successful case, this happens:</p>\n<p>1. <code>distrib_not_once_at</code> rewrites <code>h</code> with <code>Decidable.not_and'</code><br>\n  2. <code>casesMatching</code> splits the resulting <code>Or</code>.<br>\n  3. <code>solve_by_elim</code> closes both the resulting branches</p>",
        "id": 370603725,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687998774
    },
    {
        "content": "<p>And in the unsuccessful case, (1) does not happen for some reason</p>",
        "id": 370603757,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687998791
    },
    {
        "content": "<p>I've done my genuflection to two of the three patron saints. <a href=\"https://github.com/leanprover-community/mathlib4/pull/5565\">#5565</a></p>",
        "id": 370604159,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687999058
    },
    {
        "content": "<p>Never mind, it was just to one of them. It turned out the problem was entirely that the <code>Prop</code> check was using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.isProp#doc\">docs4#Lean.Expr.isProp</a> rather than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.isProp#doc\">docs4#Lean.Meta.isProp</a> and the latter knows about instantiating metavariables. (These function names are a little confusing in relation to each other: <code>Expr.isProp e</code> is whether the expression <code>e</code> is literally <code>Sort 0</code>, and <code>Meta.isProp e</code> is whether <code>e : Sort 0</code> is true.)</p>",
        "id": 370615223,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688006518
    },
    {
        "content": "<p>I didn't realize that Qq <code>match</code> expressions already do their matching up to reducible defeq, if I understand it correctly, so there's no need to do things like <code>whnfR</code> or <code>cleanupAnnotations</code> when using them.</p>",
        "id": 370615353,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688006589
    },
    {
        "content": "<p>Yes, this is not documented in the quote4 readme, so I can never remember whether I should recommend it to people facing these issues</p>",
        "id": 370651648,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688019966
    }
]