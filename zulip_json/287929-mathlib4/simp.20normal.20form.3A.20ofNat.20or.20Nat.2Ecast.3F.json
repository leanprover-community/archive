[
    {
        "content": "<p>Do we simplify either of <code>OfNat.ofNat n</code> and <code>Nat.cast n</code> to another?</p>",
        "id": 328353259,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676588589
    },
    {
        "content": "<p><code>OfNat.ofNat</code> should not be simplified to <code>Nat.cast</code> because this loops.  We'd get <code>42 = OfNat.ofNat R (nat_lit 42) --&gt; Nat.cast (OfNat.ofNat Nat (nat_lit 42)) --&gt; ...</code></p>",
        "id": 328353431,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588651
    },
    {
        "content": "<p>Do we simplify it in the other direction?</p>",
        "id": 328353499,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676588679
    },
    {
        "content": "<p>The other way around would make sense, but only for numeric literals.  That is, <code>Nat.cast (OfNat.ofNat Nat n) = OfNat.ofNat R n</code> would be a reasonable simp lemma.</p>",
        "id": 328353530,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588693
    },
    {
        "content": "<p>Also, what is the right way to write simp lemmas about natural literals?</p>",
        "id": 328353549,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676588698
    },
    {
        "content": "<p>That is a sore point.</p>",
        "id": 328353566,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588706
    },
    {
        "content": "<p>We have three different \"kinds\" of numeric literals.</p>",
        "id": 328353590,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588716
    },
    {
        "content": "<p>There's 0.</p>",
        "id": 328353599,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588721
    },
    {
        "content": "<p>There's 1.</p>",
        "id": 328353603,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588724
    },
    {
        "content": "<p>I'm trying to port <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.bit0_smul_bit0\">docs#algebra.bit0_smul_bit0</a></p>",
        "id": 328353608,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676588728
    },
    {
        "content": "<p>And there's <code>n</code> but only for <code>[n.AtLeastTwo]</code>.</p>",
        "id": 328353619,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588734
    },
    {
        "content": "<p>Right, instead of 0/1/bit0/bit1 we now need 0/1/AtLeastTwo</p>",
        "id": 328353658,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588753
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">ofNat_smul_ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m.AtLeastTwo</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">n.AtLeastTwo</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>doesn't work because we don't have <code>AtLeastTwo</code> for <code>m * n</code>.</p>",
        "id": 328353831,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676588825
    },
    {
        "content": "<p>Should I use <code>m * n</code> in the RHS?</p>",
        "id": 328353847,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676588838
    },
    {
        "content": "<p>Mmh, you could add <code>(m * n).AtLeastTwo</code> here.</p>",
        "id": 328353906,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588867
    },
    {
        "content": "<p>I'm thinking about adding a LawfulOfNat class, then that lemma would require <code>[LawfulOfNat R m] [LawfulOfNat A n] [LawfulOfNat A (m * n)]</code>.</p>",
        "id": 328354119,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588961
    },
    {
        "content": "<p>And would also work for n ∈ {0, 1}.</p>",
        "id": 328354166,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588988
    },
    {
        "content": "<p>Is it a <code>Prop</code> class?</p>",
        "id": 328354596,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676589159
    },
    {
        "content": "<p>If it's in Prop, you need to write <code>[OfNat R n] [LawfulOfNat R n]</code>.  Otherwise <code>[LawfulOfNat R n]</code> would be enough.  Not sure whats better.</p>",
        "id": 328354737,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676589236
    },
    {
        "content": "<p>I propose going for a mixin.</p>",
        "id": 328400348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676619022
    },
    {
        "content": "<p>But that is predicated on the following orthogonal proposal: extend auto-implicit syntax so that if you write <code>[LawfulOfNat R n]</code> and there is no <code>OfNat R n</code> in scope, then automatically add <code>[OfNat R n]</code> as variable or assumption.</p>",
        "id": 328400480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676619090
    },
    {
        "content": "<p>Coq has special syntax for this kind of arguments (I don't remember the details). What about <code>[[LawfulOfNat R n]]</code>?</p>",
        "id": 328418022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676625301
    },
    {
        "content": "<p>61 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/mixin.20algebraic.20typeclasses\">#mathlib4 &gt; mixin algebraic typeclasses</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 328526326,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676655219
    },
    {
        "content": "<p>What about <code>Int.ofNat</code> vs <code>Nat.cast</code>? I don't understand what's going on here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Cast.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Coe</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span>  <span class=\"c1\">-- instCoeNatInt aka `Int.ofNat`</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- `Nat.cast`</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- `fun x =&gt; Int.ofNat ↑x`; why isn't this `fun x =&gt; Nat.cast ↑x`?</span>\n</code></pre></div>\n<p>Why does <code>Coe</code> find the \"wrong\" instance?</p>",
        "id": 338362123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677512541
    },
    {
        "content": "<p>YSK that <code>Coe</code> is only one way to <em>declare</em> a coercion.  What <code>(↑)</code> searches for is <code>CoeT</code> (amongst other things; there are special cases hardcoded for sorts, functions, monads, etc.).</p>",
        "id": 338422549,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677523692
    },
    {
        "content": "<p>As for the coercion <code>Fin 2 → ℤ</code>.  I think we need to add a <code>[NatCast R] : Coe ℕ R</code> instance as well (in addition to the already existing <code>CoeTail ℕ R</code> and <code>CoeHTCT ℕ R</code> instances).  <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 338423289,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677523897
    },
    {
        "content": "<p>Ah, right; we need the instance to be exactly the same type as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instCoeNatInt#doc\">docs4#instCoeNatInt</a> ?</p>",
        "id": 338425552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677524500
    },
    {
        "content": "<p>It also needs to be <code>Coe</code>, so that it applies instead of the <code>Coe Nat Int</code> instance.</p>",
        "id": 338426029,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677524626
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#coercion%20into%20rings\">https://leanprover-community.github.io/mathlib_docs/notes.html#coercion%20into%20rings</a> says it can't be <code>Coe</code></p>",
        "id": 341791381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678800143
    },
    {
        "content": "<p>Should I just add the special case of <code>Coe Nat Int</code>?</p>",
        "id": 341791507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678800175
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2878\">!4#2878</a> does that. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, should this instance be in Std?</p>",
        "id": 341793287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678800579
    },
    {
        "content": "<p>Just FYI, I'm delegating those kinds of questions (re: instance design) to <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> . I'll merge it if he approves (and in this case it seems like he does)</p>",
        "id": 341928484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678837565
    }
]