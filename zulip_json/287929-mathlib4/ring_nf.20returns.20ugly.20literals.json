[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- Porting note: See issue lean4#2220</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span>\n</code></pre></div>\n<p>After the <code>ring_nf</code> call, the goal looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">19</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>which seems unnecessarily ugly.  For comparison, <code>ring_nf SOP</code> in Lean 3 gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">19</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>which is clearer. This can be remedied in Lean 4 by using a bunch of simp lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.ofNat_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">Int.int_cast_ofNat</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_ofNat</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>turns the goal into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">19</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>which is something I would be satisfied with, but can we make <code>ring_nf</code> alone give something like this instead?</p>",
        "id": 400988184,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699463361
    },
    {
        "content": "<p>(This came up in porting the exponential ramsey project)</p>",
        "id": 400988274,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699463400
    },
    {
        "content": "<p>I also faced this in the <code>rpow_simp</code> tactic post-processor <a href=\"https://github.com/teorth/symmetric_project/blob/master/SymmetricProject/Tactic/RPowSimp.lean#L305-L306\">here</a>.</p>",
        "id": 401003586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699469208
    },
    {
        "content": "<p>I even created <a href=\"https://github.com/teorth/symmetric_project/blob/master/SymmetricProject/Tactic/RPowSimp.lean#L288-L292\">those lemmas</a> for this purpose, but maybe they are equivalent to the lemmas you cite.</p>",
        "id": 401003684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699469250
    },
    {
        "content": "<p>Ah yeah, I think those lemmas are implied by some subset of the ones I gave. But really, it seems like <code>ring_nf</code> shouldn't need this post-processing step at all (it didn't in Lean 3)</p>",
        "id": 401005440,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699469962
    },
    {
        "content": "<p>Sure, I was only agreeing with you here.</p>",
        "id": 401005860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699470102
    },
    {
        "content": "<p>yes this seems to be a bug, something is wrong with the simp lemmas</p>",
        "id": 401063896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699500000
    },
    {
        "content": "<p>Is this something that's being worked on, or is it worth me making an issue on mathlib4 to track it?</p>",
        "id": 401421094,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699640080
    },
    {
        "content": "<p>best make an issue</p>",
        "id": 401427148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699643890
    },
    {
        "content": "<p>Is it weird that <code>ring_nf (config := {mode := .raw})</code> takes forever here?</p>",
        "id": 402299949,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700071424
    },
    {
        "content": "<p>A simpler mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 406057407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701783214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ring_nf.20returns.20ugly.20literals/near/402299949\">said</a>:</p>\n<blockquote>\n<p>Is it weird that <code>ring_nf (config := {mode := .raw})</code> takes forever here?</p>\n</blockquote>\n<p>It seems like there's an infinite loop somewhere...</p>",
        "id": 406181575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701821455
    },
    {
        "content": "<p>I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">A \"raw rat cast\" is an expression of the form:</span>\n\n<span class=\"sd\">* `(Nat.rawCast lit : α)` where `lit` is a raw natural number literal</span>\n<span class=\"sd\">* `(Int.rawCast (Int.negOfNat lit) : α)` where `lit` is a nonzero raw natural number literal</span>\n<span class=\"sd\">* `(Rat.rawCast n d : α)` where `n` is a raw int cast, `d` is a raw nat cast, and `d` is not 1 or 0.</span>\n</code></pre></div>\n<p>is being violated, as the <code>Rat.rawCast</code> does not have raw casts as arguments</p>",
        "id": 406183949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701822632
    },
    {
        "content": "<p>The <code>Int.ofNat</code> seem to be coming from <a href=\"https://github.com/leanprover-community/mathlib4/blob/c6ea155e725345888c36b7c1629e8c922d88e7e8/Mathlib/Tactic/NormNum/Inv.lean#L156\">here</a>. Should that be using <code>Nat.rawCast</code> instead? Or is there no strict convention here?</p>",
        "id": 406187987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701824276
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>)</p>",
        "id": 406188045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701824286
    },
    {
        "content": "<p>there is a strict convention indeed, but there are some smart constructors that will remove those indirections in some cases</p>",
        "id": 406191827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701825813
    },
    {
        "content": "<p>And I believe this one is using the smart constructor (<code>Result.isRat'</code> calls <code>Result.isInt</code> which strips off the <code>.ofNat</code>)</p>",
        "id": 406192039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701825907
    },
    {
        "content": "<p>Oh wait, the doc string is wrong</p>",
        "id": 406192455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701826094
    },
    {
        "content": "<p>The one I quote above?</p>",
        "id": 406192472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701826109
    },
    {
        "content": "<p>in the last case <code>n</code> and <code>d</code> should be raw int/nat numerals, not raw casts</p>",
        "id": 406192489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701826120
    },
    {
        "content": "<p>The <code>ofNat</code> is definitely not being stripped off</p>",
        "id": 406192507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701826129
    },
    {
        "content": "<p>What is a \"raw int numeral\"?</p>",
        "id": 406192546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701826150
    },
    {
        "content": "<p>that is, <code>ofNat (nat_lit N)</code> or <code>negOfNat (nat_lit N)</code></p>",
        "id": 406192554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701826156
    },
    {
        "content": "<p>Ah, so if the docstring is wrong then it really is just a missing simp lemma</p>",
        "id": 406192684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701826216
    },
    {
        "content": "<p>Though maybe that doesn't explain why <code>mode := .raw</code> hangs</p>",
        "id": 406192712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701826235
    },
    {
        "content": "<p>the simp lemma <code>rat_rawCast_2</code> looks suspicious / needs to be coupled with something else</p>",
        "id": 406193083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701826439
    },
    {
        "content": "<p>I'll make a patch</p>",
        "id": 406193521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701826664
    },
    {
        "content": "<p>I'm testing these lemmas now (in place of the existing simp lemmas)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">int_rawCast_pos</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Int.rawCast</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.rawCast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">int_rawCast_neg</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Int.rawCast</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">negOfNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">Nat.rawCast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rat_rawCast</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Rat.rawCast</span> <span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Int.rawCast</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">Nat.rawCast</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 406193608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701826699
    },
    {
        "content": "<p>hm, it seems to work on the original problem but <code>mode := .raw</code> still hangs</p>",
        "id": 406193747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701826801
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8836\">#8836</a></p>",
        "id": 406193997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701826926
    },
    {
        "content": "<p>(your message above only just arrived for me)</p>",
        "id": 406195039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701827579
    },
    {
        "content": "<p>I wouldn't expect this to make any diference to <code>.raw</code>, because <code>.raw</code> skips out on using any of these lemmas anyway</p>",
        "id": 406195127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701827636
    },
    {
        "content": "<p>It seems that in <code>.raw</code> mode you have to set <code>singlePass := true</code> or else it will revisit raw expressions and expand <code>1</code> to <code>Nat.rawCast 1 + 0</code> infinitely</p>",
        "id": 406197618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701828696
    },
    {
        "content": "<p>I pushed to your branch</p>",
        "id": 406197674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701828720
    },
    {
        "content": "<p>I think this should be good to go now</p>",
        "id": 406577308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701965947
    }
]