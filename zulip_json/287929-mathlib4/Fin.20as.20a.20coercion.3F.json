[
    {
        "content": "<p>I think about adding a scoped instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">NatCoeSort</span>\n\n<span class=\"n\">scoped</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Nat</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span>\n</code></pre></div>\n<p>It works with variables but doesn't allow one to write <code>Matrix 2 2 Int</code>. I can add an <code>OfNat</code> instance but Lean won't unfold it during parsing.</p>",
        "id": 372981417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688666396
    },
    {
        "content": "<p>What should I do? Abandon this idea? Make the <code>OfNat</code> instance reducible and hope that Lean can see through it?</p>",
        "id": 372983565,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688666854
    },
    {
        "content": "<p>I do not suggest that we start writing <code>i : n</code> in random parts of the library. The suggested applications are arguments of the definitions like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix#doc\">docs#Matrix</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MultilinearMap#doc\">docs#MultilinearMap</a>, where we build most of the theory about a type with a <code>[Fintype]</code> instance (BTW, should it be <code>FinType</code>?) but in most cases we apply it to <code>Fin n</code>.</p>",
        "id": 372984262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688667023
    },
    {
        "content": "<p>I worry about abuse of this (like the one you mentioned), especially because throughout the matrix library we have variables like <code>{n : Type _} [Fintype n]</code>, where <code>i : n</code> <em>does</em> make sense. Therefore I expect such abuse to be a bit hard for reviewers to catch at a glance. If it's also hard to get working, my opinion would be to abandon it.</p>",
        "id": 372987284,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1688667816
    }
]