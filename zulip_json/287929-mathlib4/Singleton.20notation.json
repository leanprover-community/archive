[
    {
        "content": "<p>Consider these example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>The second one works, but the first gives the error \"typeclass instance problem is stuck\".  It seems that Lean can't figure out the type of <code>{x}</code>.  But it knows that <code>x</code> has type <code>Nat</code>.  Shouldn't that be enough information for it to figure out that <code>{x}</code> has type <code>Set Nat</code>?</p>",
        "id": 324354109,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1674944646
    },
    {
        "content": "<p>It can be <code>Finset Nat</code> as well.</p>",
        "id": 324354316,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674944791
    },
    {
        "content": "<p>In <code>x ∈ s</code>, Lean can find the type of <code>x</code> from the type of <code>s</code>, not vice versa.</p>",
        "id": 324354334,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674944812
    },
    {
        "content": "<p>Oh, I see.</p>",
        "id": 324354335,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1674944813
    },
    {
        "content": "<p>This is a common gotcha and it became annoying from the moment mathlib3 was extended to allow <code>{x,y,...}</code> notation for finsets, but at the end of the day you can see the logic and I just got used to it.</p>",
        "id": 324363020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674951628
    },
    {
        "content": "<p>Aha, but lean 4 has a new trick up its sleeve for this situation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_instance</span><span class=\"o\">]</span> <span class=\"n\">Set.instSingletonSet</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span> <span class=\"c1\">-- look ma, no type ascription</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.mem_singleton_self</span> <span class=\"n\">_</span> <span class=\"c1\">-- still works</span>\n</code></pre></div>",
        "id": 324436969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674999856
    },
    {
        "content": "<p>Is this necessarily a good thing? People can accidentally change the statement of a theorem by changing its proof.</p>",
        "id": 324485141,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1675023455
    },
    {
        "content": "<p>no, the two are elaborated separately. The following does not typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.mem_singleton_self</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 324486744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675024598
    },
    {
        "content": "<p>Thanks Mario, that's very helpful.  Now, what's going on here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_instance</span><span class=\"o\">]</span> <span class=\"n\">Set.instSingletonSet</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span>    <span class=\"c1\">--this works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">_</span>    <span class=\"c1\">--error</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>The first example works, but the second doesn't.  The error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Eq.refl</span> <span class=\"bp\">?</span><span class=\"n\">m.692</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.692</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.692</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m.645</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 324494343,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1675030669
    }
]