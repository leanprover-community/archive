[
    {
        "content": "<p>I think I might have discovered a bug related to precedence of boolean operators. When using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_and</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"bp\">!</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">bool.bnot_band</span> <span class=\"n\">Bool.not_and</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_or</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">bool.bnot_bor</span> <span class=\"n\">Bool.not_or</span>\n</code></pre></div>\n<p>from <code>Mathlib.Data.Bool.Basic</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bool.not_and#doc\">docs4#Bool.not_and</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bool.not_or#doc\">docs4#Bool.not_or</a>) These theorems give me the statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">decide</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"bp\">!</span><span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>But I don't think this is what we want these statements to mean right? It would be better if they were actual equalities to rewrite over. If they are written as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_and</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"bp\">!</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>\n<p>instead I get the desired equality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"bp\">!</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is this a bug? if yes how do we fix this? Changing precedence of ! in lean? Adding the extra pair of parentehsis? If no, how can I get the equational rewriting behaviour that I want from the current theorem?</p>",
        "id": 325955297,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675601767
    },
    {
        "content": "<p>Thanks for catching this bug! If you want a quick fix, then you should add extra parentheses in Mathlib. If you can wait longer, then you should fix it in the core. Here is the current definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inherit_doc]</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"!\"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 325988274,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675616864
    },
    {
        "content": "<p>I don't know for sure how <code>notation</code> works an why it \"eats\" the equality sign.</p>",
        "id": 325988371,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675616892
    },
    {
        "content": "<p><code>40</code> looks very low precedence for such an operator. I would have expected at least <code>200</code>. In comparison, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_compl.compl\">docs#has_compl.compl</a> has priority <code>1025</code>.</p>",
        "id": 325989447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675617365
    },
    {
        "content": "<p>You could check what the precedence is in Lean 3.</p>",
        "id": 325989511,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1675617407
    },
    {
        "content": "<p>BTW,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"mi\">999</span> <span class=\"s2\">\"ᶜ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">compl</span>\n</code></pre></div>\n<p>sometimes eats too much on the left.</p>",
        "id": 325989757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675617549
    },
    {
        "content": "<p>1024 is the priority of function application IIRC.</p>",
        "id": 325989787,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675617578
    },
    {
        "content": "<p>So 999 is not high enough.</p>",
        "id": 325989801,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675617586
    },
    {
        "content": "<p>I can't say I remember ever seeing a precedence in the range [100, 900].</p>",
        "id": 325989874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675617607
    },
    {
        "content": "<p>e.g. <code>^</code> has pretty high precedence, and it's 80.</p>",
        "id": 325990055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675617715
    },
    {
        "content": "<p>Probably the precedence of boolean NOT should be higher than the precedence of boolean AND, right?</p>",
        "id": 325990275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675617821
    },
    {
        "content": "<p>Mathlib 3 has <code>prefix `!`:90 := bnot</code></p>",
        "id": 325990401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675617874
    },
    {
        "content": "<p>Probably, we should add some tests for precedence of operations like <code>a * b + c = (a * b) + c := rfl</code> etc.</p>",
        "id": 325991196,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675618231
    },
    {
        "content": "<p>Oh I see--boolean NOT is indeed higher than boolean AND, it's <code>=</code> that messes it up.</p>",
        "id": 325991317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675618309
    },
    {
        "content": "<p>I think the way we got away with this in Lean 3 is by basically never using <code>!</code> or <code>&amp;&amp;</code></p>",
        "id": 325991618,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675618464
    },
    {
        "content": "<p>There's a tension between \"I want to write equations about the results of boolean operations\" and \"I want to combine the truth values of equations using boolean operations\". In Lean 3, we never really did the second one with <code>bool</code>.</p>",
        "id": 325991698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675618526
    },
    {
        "content": "<p>So all the boolean operations have much higher priority than <code>=</code>, and it works fine.</p>",
        "id": 325991732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675618548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/De.20Morgan.20Laws.20for.20booleans/near/325991698\">said</a>:</p>\n<blockquote>\n<p>There's a tension between \"I want to write equations about the results of boolean operations\" and \"I want to combine the truth values of equations using boolean operations\". In Lean 3, we never really did the second one with <code>bool</code>.</p>\n</blockquote>\n<p>In Lean 4, for the second one we can use <code>==</code>.</p>",
        "id": 326019979,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675637874
    }
]