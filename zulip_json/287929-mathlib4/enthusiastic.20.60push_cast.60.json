[
    {
        "content": "<p>The following is resolved by <code>push_cast</code> in mathlib4, but not by <code>push_cast</code> in mathlib3.  It would be convenient for me for teaching to have the mathlib3 behaviour, but before engaging in serious advocacy, I'd just like to understand it -- what is the reason for the difference?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">push_cast</span>\n</code></pre></div>",
        "id": 338737498,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677642177
    },
    {
        "content": "<p>Lean 4 is so fast that the tactics happily do more work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>",
        "id": 338738905,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677643405
    },
    {
        "content": "<p><code>push_cast</code> is essentially a macro on top of <code>simp</code></p>",
        "id": 338738930,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677643442
    },
    {
        "content": "<p>Hmm, but <code>simp only</code> doesn't solve that in Lean 3 (where <code>push_cast</code> is also implemented on top of <code>simp</code>, IIRC).</p>\n<p>I wonder if it's the decidability-checking feature of <code>simp</code> that is dealing with this?  I'll try turning it off ...</p>",
        "id": 338739164,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677643668
    },
    {
        "content": "<p>Yup!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">push_cast</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>has the mathlib3 behaviour.</p>",
        "id": 338739227,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677643725
    },
    {
        "content": "<p>ah that came up when Scott was using <code>zify</code> for <code>linarith</code> as well</p>",
        "id": 338739257,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1677643790
    },
    {
        "content": "<p>I even opened an issue for this (<a href=\"https://github.com/leanprover/lean4/pull/2068\">lean4#2068</a>) after being surprised by it some other time.</p>",
        "id": 338739437,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677643965
    }
]