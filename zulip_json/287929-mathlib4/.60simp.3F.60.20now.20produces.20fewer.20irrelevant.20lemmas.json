[
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2923\">lean4#2923</a> has just landed in the <code>2023-12-12</code> nightly. This results in <code>simp?</code> suggesting fewer irrelevant lemmas.</p>",
        "id": 407581531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702419444
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9011\">#9011</a> is an adaptation PR (targeting the <code>bump/v4.5.0</code> branch, correcting a few <code>simp? [...] says ...</code> statements.</p>\n<p>This can be reviewed and merged into <code>bump/v4.5.0</code> now.</p>",
        "id": 407581654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702419491
    },
    {
        "content": "<p><em>Many</em> further <code>simp only</code> statements in Mathlib contain spurious lemmas which would now no longer be produced by a fresh <code>simp?</code>, and I would strongly encourage anyone interested in removing these! For now such changes will need to be made in a PR targeting <code>bump/v4.5.0</code> (like this PR), or in January they can be done on <code>master</code>.</p>",
        "id": 407581685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702419505
    },
    {
        "content": "<p>How viable is teaching <code>simp</code> to emit a warning on unused lemmas?</p>",
        "id": 407836280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702514087
    },
    {
        "content": "<p>I was thinking of implementing that as a lint (so that it can avoid false positives when <code>simp</code> is used after <code>&lt;;&gt;</code> with different goals)</p>",
        "id": 407836385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702514152
    },
    {
        "content": "<p>I wonder if we would run into false positives, e.g. when providing additional congr lemmas? Not sure.</p>",
        "id": 407836464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702514178
    },
    {
        "content": "<p>It seems a nice idea.</p>",
        "id": 407836468,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702514181
    },
    {
        "content": "<p>the main issue is that <code>simp</code> doesn't record the <code>UsedLemmas</code> in the elaboration trace</p>",
        "id": 407836517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702514209
    },
    {
        "content": "<p>Perhaps the mechanism should be for simp to record a \"use count\" attached to the syntax of each lemma in the tactic, and then at the end of the entire tactic block,  we check for any with total 0</p>",
        "id": 407836608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702514257
    },
    {
        "content": "<p>(Which would handle <code>&lt;;&gt;</code>)</p>",
        "id": 407836723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702514308
    },
    {
        "content": "<p>yes, this is what e.g. the unreachable tactic linter does</p>",
        "id": 407837056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702514475
    },
    {
        "content": "<p>I think it's better not to do too much logic in <code>simp</code> though since the linter might not be on</p>",
        "id": 407837139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702514514
    },
    {
        "content": "<p>Is it possible to make <code>simp?</code> suggest a <code>simp_rw</code> block as well? I think changing <code>simp only</code> in its output to <code>simp_rw</code> already almost work (i.e. the order is almost good), but sometimes the output may be <code>simp only [a,b]</code> when it's necessary to do <code>simp_rw [a,b,a]</code>.</p>\n<p>(The main benefit of <code>simp_rw</code> is being able to view the goal state by placing the cursor around the commas, as is the case for <code>rw</code>.)</p>",
        "id": 407837537,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702514707
    },
    {
        "content": "<p>But I guess for <code>&lt;;&gt; simp</code> it is generally not possible to turn it into a <code>simp_rw</code>, right? Would you want <code>simp?</code> to emit two <code>Try this</code> suggestions?</p>",
        "id": 407897196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702538448
    },
    {
        "content": "<p>Interesting, you're saying in such situations <code>simp?</code> currently doesn't output multiple <code>simp only</code> (minimized for each subgoal separately), but instead outputs a single <code>simp only</code> block that simultaneously solves multiple goals? In such situations the <code>simp only</code> proof reduces duplication and may be a lot shorter, so there's less appetite to replace it with <code>simp_rw</code>.</p>",
        "id": 407908809,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702542941
    },
    {
        "content": "<p>I don't think that is what <code>simp?</code> does right now, but I would be very happy if that is what it would do.</p>",
        "id": 407915429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702545474
    },
    {
        "content": "<p>Anyway, my point was mainly that if <code>simp</code> is working on multiple goals, then you can reasonably turn it into a <code>simp only</code>, but it is unlikely that a <code>simp_rw</code> would successfully work on all those goals.</p>",
        "id": 407915578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702545517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60simp.3F.60.20now.20produces.20fewer.20irrelevant.20lemmas/near/407837537\">said</a>:</p>\n<blockquote>\n<p>Is it possible to make <code>simp?</code> suggest a <code>simp_rw</code> block as well? I think changing <code>simp only</code> in its output to <code>simp_rw</code> already almost work (i.e. the order is almost good), but sometimes the output may be <code>simp only [a,b]</code> when it's necessary to do <code>simp_rw [a,b,a]</code>.</p>\n<p>(The main benefit of <code>simp_rw</code> is being able to view the goal state by placing the cursor around the commas, as is the case for <code>rw</code>.)</p>\n</blockquote>\n<p>I think this is indeed the main benefit. I looked into this around a year ago (<a href=\"#narrow/stream/113488-general/topic/tactic.20caching/near/304586058\">discussion</a>) and I apparently found that it is often possible to replace <code>simp</code>/<code>simp only</code> with <code>simp_rw</code>.</p>",
        "id": 408199092,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1702651438
    },
    {
        "content": "<p>Mario commented before that</p>\n<blockquote>\n<p>lean 4 simp? will automatically order the lemmas in the order they were used as rewrite rules</p>\n</blockquote>\n<p>So it might be low-hanging fruit to write a script that runs through the directory tree testing replacing <code>simp only</code> with <code>simp_rw</code>.</p>",
        "id": 408200793,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1702651978
    },
    {
        "content": "<p>It is probably not too hard, but <code>simp?</code> returns a list with no duplicates, I think.  So there is still some potential fiddling around to get <code>simp_rw</code> to work from the output of <code>simp?</code>.</p>",
        "id": 408201454,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702652185
    },
    {
        "content": "<p>This would be immensely useful for the informal Lean project, but it's clearly non trivial.</p>",
        "id": 408201655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702652268
    },
    {
        "content": "<p>Potentially also useful: <a href=\"https://github.com/leanprover-community/mathlib/pull/17062\">!3#17062</a>, which contains a Python script I was using to do this.</p>",
        "id": 408202423,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1702652498
    },
    {
        "content": "<p>Here it is now in mathlib4 <a href=\"https://github.com/leanprover-community/mathlib4/pull/9079\">#9079</a></p>",
        "id": 408204378,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1702653098
    },
    {
        "content": "<p>(<code>lean --make</code> no longer works. <del>How do I build a single lean file?</del>) Answered in another thread.</p>",
        "id": 408205929,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1702653605
    }
]