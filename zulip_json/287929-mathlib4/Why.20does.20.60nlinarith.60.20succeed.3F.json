[
    {
        "content": "<p>For reasons I don't understand, <code>nlinarith</code> succeeds here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>However, it does not work here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>If I hint a proof, everything is all right again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert_to</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ring</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>In my attempt to narrow down where <code>nlinarith</code> clicks, I multiplied the original inequality by ten. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">20</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">60</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">90</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>This does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">19</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">60</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">90</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>I made a few more attempts but I failed to learn to predict whether <code>nlinarith</code> succeeds.</p>\n<p>I am not complaining about cases where <code>nlinarith</code> cannot close the goal automatically.<br>\nI am puzzled by what <code>nlinarith</code> does to succeed in cases <code>2*x^2 - 6*x + 9 ≥ 0</code> and similar.</p>",
        "id": 384572483,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1691955550
    },
    {
        "content": "<p><code>nlinarith</code> is not complete for nonlinear arithmetic (I don't think it is decidable). The algorithm is described in the doc string:</p>\n<blockquote>\n<p>The preprocessing is as follows:</p>\n<ul>\n<li>For every subterm <code>a ^ 2</code> or <code>a * a</code> in a hypothesis or the goal,<br>\n the assumption <code>0 ≤ a ^ 2</code> or <code>0 ≤ a * a</code> is added to the context.</li>\n<li>For every pair of hypotheses <code>a1 R1 b1</code>, <code>a2 R2 b2</code> in the context, <code>R1, R2 ∈ {&lt;, ≤, =}</code>,<br>\n  the assumption <code>0 R' (b1 - a1) * (b2 - a2)</code> is added to the context (non-recursively),<br>\n  where <code>R ∈ {&lt;, ≤, =}</code> is the appropriate comparison derived from <code>R1, R2</code>.</li>\n</ul>\n</blockquote>",
        "id": 384576580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691957168
    },
    {
        "content": "<p>But every subterm means <em>every subterm</em>, not just <code>x^2 ≥ 0</code> but also <code>(x^2)^2 ≥ 0</code> and <code>(2*x^2 - 6*x + 9)^2 ≥ 0</code>, as well as <code>x^2 * (2*x^2 - 6*x + 9) ≤ 0</code> because we are assuming by contradiction that <code>2*x^2 - 6*x + 9 &lt; 0</code>. It turns out that linarith was able to find a very clever contradiction from these facts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">expression</span>\n      <span class=\"mi\">81</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span>\n      <span class=\"mi\">18</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n      <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n      <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span><span class=\"o\">))</span> <span class=\"bp\">+</span>\n      <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span><span class=\"o\">))</span>\n<span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">both</span> <span class=\"mi\">0</span> <span class=\"n\">and</span> <span class=\"n\">negative</span>\n</code></pre></div>",
        "id": 384577187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691957418
    },
    {
        "content": "<p>How do you generate the explanation?</p>",
        "id": 384583711,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1691960266
    },
    {
        "content": "<p><code>set_option trace.linarith true</code></p>",
        "id": 384585705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691961293
    },
    {
        "content": "<p>Note that this option is explicitly mentioned in the docstring.</p>",
        "id": 384594056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691965856
    }
]