[
    {
        "content": "<p>Do we have a way to write <code>(2 : â„•+)</code> in mathlib4 yet?</p>",
        "id": 318632279,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672423092
    },
    {
        "content": "<p>Looking at the instances listed here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#OfNat\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#OfNat</a>, I suspect not.</p>",
        "id": 318632570,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1672423211
    },
    {
        "content": "<p>I suppose we just have to define <code>ofNat 0 = 1</code> or something for PNat. Could get confusing sometimes</p>",
        "id": 318635163,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672424408
    },
    {
        "content": "<p>When I'm defining <code>nat.pred</code> in class with the equation compiler, in order to prove <code>nat.succ a = nat.succ b -&gt; a = b</code>, I always define <code>pred 0</code> to be 37, stressing that it's a junk value. Do we <em>have</em> to define <code>ofNat 0</code>? Why not let it be 37 if so?</p>",
        "id": 318679114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672452615
    },
    {
        "content": "<p>12 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/version.20incompatibilities\">#mathlib4 &gt; version incompatibilities</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 318769321,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672510335
    },
    {
        "content": "<p>Sorry if I'm misunderstanding, but I thought I read in Functional Programming in Lean 4 that the <code>ofNat</code> type class was flexible enough to specify which natural numbers that could be converted. A version of <code>ofNat</code> for only positive numbers is described <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/pos.html#literal-numbers\">here</a>.</p>",
        "id": 318916577,
        "sender_full_name": "Niels Voss",
        "timestamp": 1672616844
    }
]