[
    {
        "content": "<p>Leo has put up <a href=\"https://github.com/leanprover/lean4/pull/2734\">lean4#2734</a>, which proposes to fix:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/pull/2669\">lean4#2669</a>: simp unfolding let even with zeta := false option </li>\n<li><a href=\"https://github.com/leanprover/lean4/pull/2281\">lean4#2281</a>: simp (with beta/zeta disabled) and discrimination trees</li>\n<li><a href=\"https://github.com/leanprover/lean4/pull/2682\">lean4#2682</a>: RFC: simp should not reduce tactic-defined lets.</li>\n</ul>",
        "id": 397988050,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698023946
    },
    {
        "content": "<p>I've got this more or less working (<a href=\"https://github.com/leanprover/std4/pull/316\">std4#316</a>,  <a href=\"https://github.com/leanprover-community/aesop/pull/79\">https://github.com/leanprover-community/aesop/pull/79</a>) at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7847\">#7847</a>, but there are a number of broken proofs, and I'd be happy to have help with these.</p>",
        "id": 397988062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698023954
    },
    {
        "content": "<p>Likely these are \"expert mode\" requests, as we don't just want to get the proofs working again, but to understand why the tactic behaviours have changed, and decided what we want to do.</p>",
        "id": 397988068,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698023958
    },
    {
        "content": "<p>Current problems are in:</p>\n<ul>\n<li><code>Mathlib.Topology.DenseEmbedding</code>, where a <code>unfold_let</code> is not firing: <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> or <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>?</li>\n<li><code>Mathlib.CategoryTheory.Functor.Flat</code>, where there is complicated porting note about <code>simp</code> expanding <code>let</code>, and separately failing to use a lemma!</li>\n<li><code>Mathlib.NumberTheory.PythagoreanTriples</code>, where a proof by <code>norm_cast; apply Rat.den_nz q</code> is no longer working.</li>\n</ul>",
        "id": 397988074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698023960
    },
    {
        "content": "<p>Thanks a lot. I'll wait to get oleans before investigating the topology issue (unless Kyle is faster).</p>",
        "id": 397988289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698024083
    },
    {
        "content": "<p>I handled the topology issue. It was all good. The issue was not at all about that <code>unfold_let</code>. The discrepancy was created by a <code>filter_upwards</code> a couple of lines above. <code>filter_upwards</code> calls <code>dsimp (config := {zeta := false})</code> but the config used to be ignored. So the proof in master was using that <code>filter_upwards</code> unfolded a let.</p>",
        "id": 398092501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698069823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> just a quick question about usage: let's say I have the following situation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- simp (config := {zeta := false}) only [a]</span>\n  <span class=\"c1\">-- fails with: invalid 'simp', proposition expected ℕ</span>\n  <span class=\"c1\">-- rw [a]</span>\n  <span class=\"c1\">-- fails with: tactic 'rewrite' failed, equality or iff proof expected ℕ</span>\n  <span class=\"n\">unfold_let</span> <span class=\"n\">a</span> <span class=\"c1\">-- works, but can't do rewriting like I want</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I know the new change should make the <code>zeta := false</code> unnecessary, but how are we supposed to do rewriting with a <code>let</code> bound variable? In Lean 3 it was just <code>simp only [a]</code>.</p>",
        "id": 398134511,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698084538
    },
    {
        "content": "<p>Update coming soon. :-)</p>",
        "id": 398170020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698103256
    },
    {
        "content": "<p>Can I summon some more assistance on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7847\">#7847</a>? There are quite a few things we still need to fix up here, but I think the payoff is great: we get lots of improvements to <code>simp</code>. (And, under the hood, much more configuration for <code>DiscrTree</code>.)</p>",
        "id": 398181273,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698111000
    },
    {
        "content": "<ul>\n<li>Mathlib.LinearAlgebra.QuadraticForm.Complex has a messy proof which has gone off the rails. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> or <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>?</li>\n</ul>",
        "id": 398181440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698111093
    },
    {
        "content": "<ul>\n<li>There are many failures due to a change in behaviour in <code>norm_cast</code> which I haven't looked at yet.<ul>\n<li><code>Mathlib.Combinatorics.SimpleGraph.Chunk</code></li>\n<li><code>Mathlib.Analysis.MeanInequalities</code></li>\n<li><code>Mathlib.Algebra.Order.CompleteField</code></li>\n<li><code>Mathlib.NumberTheory.Padics.RingHoms</code></li>\n<li><code>Mathlib.NumberTheory.PythagoreanTriples</code></li>\n</ul>\n</li>\n</ul>\n<p>(these should presumably be fixed not by changing the proofs!)</p>",
        "id": 398181568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698111176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/fixes.20to.20simp.20regressions/near/398170020\">said</a>:</p>\n<blockquote>\n<p>Update coming soon. :-)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, Leo has just pushed a change to <a href=\"https://github.com/leanprover/lean4/pull/2734\">lean4#2734</a> so both <code>simp [a]</code> and <code>rw [a]</code> should work. The toolchain is still coming!</p>",
        "id": 398184776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698113236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/fixes.20to.20simp.20regressions/near/398181440\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Mathlib.LinearAlgebra.QuadraticForm.Complex has a messy proof which has gone off the rails. <strong>Eric Wieser</strong> or <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span>?</li>\n</ul>\n</blockquote>\n<p>Sorry, not sure how to help here. I don't see any changes to that file in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7847\">#7847</a> and there are build errors in its dependencies so I can't see what is going wrong.</p>",
        "id": 398254363,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698141851
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, Leo pushed another commit which further changed things, so some earlier stuff broke. I think it's now back to the point where <code>QuadraticForm.Complex</code> is failing again.</p>\n<p>You may want to <code>elan toolchain uninstall leanprover/lean4-pr-releases:pr-release-2734</code> to make sure you get the toolchain with Leo's latest changes.</p>",
        "id": 398259775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698144159
    },
    {
        "content": "<p>Okay! I'll check it out right after lunch, in half an hour or so :)</p>",
        "id": 398259872,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698144206
    },
    {
        "content": "<p>Compilation (finally!) finished and indeed there seems to be a failure. One moment please...</p>",
        "id": 398276941,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698149765
    },
    {
        "content": "<p>Looks like the cause is essentially the following: we have a <code>let w := if _ then _ else _</code> and <code>split_ifs</code> doesn't see through the <code>let</code> binding any more.</p>",
        "id": 398278476,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698150344
    },
    {
        "content": "<p>Okay. I propose we add a <code>unfold_let</code>, and <code>-- After leanprover/lean4#2734, we need to do the zeta reduction before split_ifs</code></p>",
        "id": 398279248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698150625
    },
    {
        "content": "<p>Hmm, maybe its not that simple. Not sure where the unfolding would have to happen.</p>",
        "id": 398279579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698150771
    },
    {
        "content": "<p>Ah:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">Units.val_mk0</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>does the trick?</p>",
        "id": 398279696,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698150823
    },
    {
        "content": "<p>(on line 57)</p>",
        "id": 398279738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698150840
    },
    {
        "content": "<p>We need to do a zeta followed by beta. So my approach was to do a <code>simp only [w]</code> right before the <code>split_ifs</code>.</p>",
        "id": 398279808,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698150854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/fixes.20to.20simp.20regressions/near/398279696\">said</a>:</p>\n<blockquote>\n<p>Ah:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">Units.val_mk0</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>does the trick?</p>\n</blockquote>\n<p>Interesting, so it's not so much that <code>split_ifs</code> doesn't do zeta reduction, it's that it disagrees with <code>simp</code> whether to do so.</p>",
        "id": 398280109,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698150981
    },
    {
        "content": "<p>Wooohoo! Builds.</p>",
        "id": 398282384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698151824
    }
]