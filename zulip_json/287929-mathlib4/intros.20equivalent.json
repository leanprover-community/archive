[
    {
        "content": "<p>Is there an equivalent of <code>intros</code> called without arguments somewhere? If there's nothing to introduce, <code>intro</code> complains with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">introN'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">insufficient</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">binders</span>\n</code></pre></div>",
        "id": 342512898,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679046791
    },
    {
        "content": "<p>I might be mistaken but I believe <code>intros</code> called without arguments is, well, <code>intros</code> called without arguments? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> (Stuck building atm, can't check)</p>",
        "id": 342513979,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679047101
    },
    {
        "content": "<p>Or, wait—do you mean something that behaves like <code>intro</code> when there is something to introduce but <code>intros</code> when there isn't?</p>",
        "id": 342514397,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679047224
    },
    {
        "content": "<p>(In which case, does <code>try intro</code> work?)</p>",
        "id": 342514466,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679047248
    },
    {
        "content": "<p><code>intros</code> introduces \"all\" the arguments (for some definition of all) when you don't pass any arguments to it</p>",
        "id": 342515077,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679047432
    },
    {
        "content": "<p>Right, so isn't that \"<code>intros</code>, but without arguments\"? I must be misunderstanding—what's the desired behavior?</p>",
        "id": 342516185,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679047731
    },
    {
        "content": "<p>Does <code>intros</code> still exist? It wasn't recognized as an identifier.</p>",
        "id": 342517003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679047962
    },
    {
        "content": "<p>Hmm, it does, and it behaves the way you're expecting it to. What's the context where it's not recognized?</p>",
        "id": 342518526,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679048420
    },
    {
        "content": "<p>You can try things out in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2911\">!4#2911</a>. Compare with the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift.division_semiring\">docs#ulift.division_semiring</a></p>",
        "id": 342521149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679049103
    },
    {
        "content": "<p>The following works just fine for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">divisionSemiring</span> <span class=\"o\">[</span><span class=\"n\">DivisionSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DivisionSemiring</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">down_injective.divisionSemiring</span> <span class=\"n\">down</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 342527861,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679050872
    },
    {
        "content": "<p>Okay, I don't know what I've done!</p>",
        "id": 342528404,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679050973
    },
    {
        "content": "<p>Or, more compactly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">divisionSemiring</span> <span class=\"o\">[</span><span class=\"n\">DivisionSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DivisionSemiring</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">down_injective.divisionSemiring</span> <span class=\"n\">down</span> <span class=\"bp\">..</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 342528930,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679051098
    },
    {
        "content": "<p>Ohh, based on the error, here's one possibility: maybe one in that extremely long string of underscores got lost, and then <code>intros</code> tried to be interpreted as a term instead of a tactic. If I delete an underscore and the punctuation, that's what happens!</p>",
        "id": 342530801,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679051592
    },
    {
        "content": "<p>Oh, that's quite a confusing error message then!</p>",
        "id": 342531162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679051716
    }
]