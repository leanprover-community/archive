[
    {
        "content": "<p>This is not urgent at all, but something I think should be solved at some point.</p>\n<p>Currently we cannot tag the lemma <code>lintegral_mono</code> with the <code>gcongr</code>-attribute, although that should be an extremely natural use case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Lebesgue</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">gcongr</span><span class=\"o\">]</span> <span class=\"n\">lintegral_mono</span>\n    <span class=\"c1\">-- @[gcongr] attribute only applies to lemmas proving</span>\n    <span class=\"c1\">-- x₁ ~₁ x₁' → ... xₙ ~ₙ xₙ' → f x₁ ... xₙ ∼ f x₁' ... xₙ',</span>\n    <span class=\"c1\">-- got ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}</span>\n    <span class=\"c1\">-- ⦃f g : α → ℝ≥0∞⦄, f ≤ g → ∫⁻ (a : α), f a ∂μ ≤ ∫⁻ (a : α), g a ∂μ</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> showed me a solution, below. If I'm not mistaken, it indicates that the only problem is that the integral notation prevents tagging the lemma with the attribute.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Lebesgue</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"c1\">-- This would solve it!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">MeasureTheory.lintegral_mono''</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lintegral</span> <span class=\"n\">μ</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">lintegral</span> <span class=\"n\">μ</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lintegral_mono</span> <span class=\"n\">hfg</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">gcongr</span><span class=\"o\">]</span> <span class=\"n\">MeasureTheory.lintegral_mono''</span> <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">lintegral_mono</span>\n<span class=\"k\">#check</span> <span class=\"n\">lintegral_mono''</span> <span class=\"c1\">-- same except from the use of notation</span>\n</code></pre></div>\n<p>I assume we don't want to be adding duplicate lemmas that avoid notation, and that we don't want this issue to hold back the full power of the great <code>gcongr</code> tactic.</p>\n<p>Does someone understand how difficult it would be to solve this issue? (Again, not urgent, just asking!)</p>",
        "id": 391543563,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694972518
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.lintegral_mono#doc\">docs#MeasureTheory.lintegral_mono</a></p>",
        "id": 391544253,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694972715
    },
    {
        "content": "<p>From what I understand of the <code>gcongr</code> tactic, this shouldn't be an issue at all, which makes me suspect that there is a separate problem in the above example. Have you managed to <em>use</em> the double prime version successfully (as opposed to just tagging it)? If you can, does it work with or without notation, or both?</p>",
        "id": 391545352,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694973042
    },
    {
        "content": "<p>I think I have... (But maybe the type ascription was particularly explicit or something.) Let me dig up an example.</p>",
        "id": 391545602,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694973107
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Bochner</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.ContinuousFunction.Bounded</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span> <span class=\"n\">BoundedContinuousFunction</span>\n\n<span class=\"c1\">-- This would solve it!</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">MeasureTheory.lintegral_mono''</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lintegral</span> <span class=\"n\">μ</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">lintegral</span> <span class=\"n\">μ</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lintegral_mono</span> <span class=\"n\">hfg</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">gcongr</span><span class=\"o\">]</span> <span class=\"n\">MeasureTheory.lintegral_mono''</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace.SecondCountableTopology</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">BoundedContinuousFunction.integrable</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">f.continuous.measurable.aestronglyMeasurable</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hasFiniteIntegral_def</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"k\">calc</span>  <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‖₊</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">f</span><span class=\"bp\">‖₊</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span>                       <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">‖</span><span class=\"n\">f</span><span class=\"bp\">‖₊</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span>                 <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lintegral_const</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span>                                   <span class=\"o\">:=</span> <span class=\"n\">ENNReal.mul_lt_top</span>\n                                                <span class=\"n\">ENNReal.coe_ne_top</span> <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">μ</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">gcongr</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">ENNReal.coe_le_coe.mpr</span> <span class=\"o\">(</span><span class=\"n\">nnnorm_coe_le_nnnorm</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 391546205,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694973245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> the above seems like a bug in the tooling for <code>gcongr</code> to correctly identify lemmas that have the required form in the presence of notation. It's weird to me because notation is just a macro, so I would have expected it to see right through it. But you probably know more.</p>",
        "id": 391546759,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694973377
    },
    {
        "content": "<p>Sorry, the above example  had a missing <code>import</code> and a missing <code>open scoped</code>. Fixed now.</p>",
        "id": 391546899,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694973409
    },
    {
        "content": "<p>I think this isn't a problem of notation per se -- there's a difference between <code>∫⁻ (a : α), f a ∂μ</code> and <code>lintegral μ f</code> in that the former is <code>lintegral μ (fun a =&gt; f a)</code>.</p>\n<p>I'm not sure how much it makes sense, but something that'd fix the problem is if <code>gcongr</code> were to be able to eta-unexpand terms in the conclusion of a theorem. (For example, turning <code>fun a =&gt; f a</code> into <code>f</code>.)</p>",
        "id": 391548395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694973759
    },
    {
        "content": "<p>I think it's not the notation per se, but the difference between <code>f</code> and <code>fun x ↦ f x</code>.  The integral notation uses the latter, <code>gcongr</code> requires the former.  At least, this was the situation for sums, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GCongr.sum_le_sum#doc\">docs#GCongr.sum_le_sum</a></p>",
        "id": 391548457,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694973774
    },
    {
        "content": "<p>Sorry, my example still had a missing <code>variable</code> and was not working. Now it in fact fails... I thought I had it working before... I'll try to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> or tell if <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> is right and only the tagging works.</p>\n<p>(It indeed works in a different file, but not in my minimal example above...)</p>",
        "id": 391548576,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694973798
    },
    {
        "content": "<p>It has been on my to-do list to go through the library and write variants like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GCongr.sum_le_sum#doc\">docs#GCongr.sum_le_sum</a> for <code>tsum</code>, <code>lintegral</code>, <code>integral</code>, ..., but I haven't got around to it yet.  Someone else is very welcome to do it, or to implement Kyle's idea for a cleverer fix!</p>",
        "id": 391549266,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694973991
    },
    {
        "content": "<p>Ah, got it. The function is eta-expanded in notation.</p>",
        "id": 391549269,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694973992
    },
    {
        "content": "<p>For some reason I'm struggling to create a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. I only have a working example which is not minimal and a minimal example which is not working.</p>\n<p>But since clever people above understood the issue, maybe it doesn't matter that my minimal example didn't work --- the possibility to tag perhaps already indicates an issue in some way.</p>\n<p>For now, I'm happy to know that solutions exist.</p>",
        "id": 391551445,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1694974584
    },
    {
        "content": "<p>I also had the same issue with big-O notation a while back (see <a href=\"#narrow/stream/116395-maths/topic/New.20tactic.20for.20.22relational.20congruence.22/near/364157668\">here</a>).</p>",
        "id": 391576807,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1694986936
    }
]