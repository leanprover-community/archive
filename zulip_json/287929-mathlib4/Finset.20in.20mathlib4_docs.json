[
    {
        "content": "<p>In the documentation page <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Basic.html#Finset\">Mathlib.Data.Finset.Basic</a>, the entry <code>structure Finset</code> says :</p>\n<blockquote>\n<p>structure Finset <br>\n    (α  :  Type u_4)  :  <br>\n  Type u_4<br>\nval  :  Multiset α<br>\n  The underlying multiset<br>\n  nodup  :  Nodup s. val<br>\n<code>val</code> contains no duplicates</p>\n</blockquote>\n<p>while the <a href=\"https://github.com/leanprover-community/mathlib4/blob/bf083fc28a4dd9c6ca1b54fbadbbb5444ad3ae46//Mathlib/Data/Finset/Basic.lean#L138-L142\">source</a> says: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Finset</span>\n<span class=\"o\">(</span><span class=\"n\">α</span>  <span class=\"o\">:</span>  <span class=\"kt\">Type</span> <span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The underlying multiset -/</span>\n  <span class=\"n\">val</span>  <span class=\"o\">:</span>  <span class=\"n\">Multiset</span> <span class=\"n\">α</span>\n  <span class=\"sd\">/-- `val` contains no duplicates -/</span>\n  <span class=\"n\">nodup</span> <span class=\"o\">:</span>  <span class=\"n\">Nodup</span> <span class=\"n\">val</span>\n</code></pre></div>\n<p>Isn't <code>s.val</code> incorrect in the doc page? Shouldn't it say <code>Multiset.Nodup val</code> instead? </p>\n<p>Of course, there are other discrepancies between the doc and the code, for instance <code>Type u_4</code> instead of <code>Type*</code>, so maybe I am misunderstanding how the doc page is generated from the source. If so, I'd be happy to hear if there is a reason why <code>s.val</code> is okay there <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 397241206,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1697611029
    },
    {
        "content": "<p>Hmm you're right, that's weird... Do you have other examples like that?</p>",
        "id": 397241456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697611133
    },
    {
        "content": "<p>I'm afraid I don't, I bumped into that randomly.</p>",
        "id": 397241617,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1697611209
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span></p>",
        "id": 397241802,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697611282
    },
    {
        "content": "<p>The Type u_4 is normal and not something I can do anything about. u_4 is a universe variable that was automatically introduced since you were too lazy to name it with Type*. If you want this to render differently, that's a core issue.</p>\n<p>The s.val issue is probably (I won't be on a lean machine until the evening to verify this) the s from this line: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/StructureInfo.lean#L23\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/StructureInfo.lean#L23</a> which is used to figure out the type of the field...I dont really know how I could refactor this code to make the s disappear fully? I could name it \"self\" instead, in the spirit of python etc.</p>\n<p>Other than that if you want this to disappear a better meta programmer than me will have to do the job.</p>",
        "id": 397243241,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697611915
    },
    {
        "content": "<p>Oh and \"the reason\" s.val shows up here, if you can't read meta: To print out the type of a structure field we assume there exists some value s of that structure type and then print the type of s.field.</p>",
        "id": 397243749,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697612138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Finset.20in.20mathlib4_docs/near/397243241\">said</a>:</p>\n<blockquote>\n<p>The Type u_4 is normal and not something I can do anything about. u_4 is a universe variable that was automatically introduced since you were too lazy to name it with Type*.</p>\n</blockquote>\n<p>I don't get it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Did I do something something wrong? Why was I lazy? <span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span></p>\n<blockquote>\n<p>The s.val issue is probably (I won't be on a lean machine until the evening to verify this) the s from this line: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/StructureInfo.lean#L23\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/StructureInfo.lean#L23</a> which is used to figure out the type of the field...I dont really know how I could refactor this code to make the s disappear fully? I could name it \"self\" instead, in the spirit of python etc.</p>\n</blockquote>\n<p>Yes, I thought about interpreting <code>s.val</code> as <code>self.val</code>, but then I was still surprised by the discrepancy between the docs and the source, so I became curious.</p>\n<blockquote>\n<p>Other than that if you want this to disappear a better meta programmer than me will have to do the job.</p>\n</blockquote>\n<p>I don't want it to disappear, I was just wondering if I may be misunderstanding something. And I certainly did not imply anything else <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Thank you very much for your explanations!</p>",
        "id": 397249076,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1697614094
    },
    {
        "content": "<p>\"lazy\" is perhaps a bit of a strong word. <code>Type*</code> is the (encouraged) syntax for \"make up a universe variable <code>u_xxx</code> and replace me by <code>Type u_xxx</code>\", so that's what you see in the output</p>",
        "id": 397250572,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697614533
    }
]