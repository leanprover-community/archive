[
    {
        "content": "<p>Is there a Lean 4 analogue of the Lean 3 <code>pp.beta</code>, the option to pretty-print <code>(fun x =&gt; x ^ 2) a</code> as <code>a ^ 2</code>?  I remember this came up in the tutorials project in hiding a pain point for newbies<br>\n<a href=\"https://github.com/leanprover-community/tutorials/blob/79a6872a755c4ae0c2aca57e1adfdac38b1d8bb1/src/exercises/03_forall_or.lean#L4\">https://github.com/leanprover-community/tutorials/blob/79a6872a755c4ae0c2aca57e1adfdac38b1d8bb1/src/exercises/03_forall_or.lean#L4</a><br>\nand I've also encountered it in teaching.</p>",
        "id": 351768677,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682131667
    },
    {
        "content": "<p>Yes I run into this too with teaching -- I tell the students that whenever they see a lambda they should try dsimp</p>",
        "id": 351792372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682146351
    },
    {
        "content": "<p>Is it better to hide it or to automatically simp it away at every tactic step? Hiding has the downside of creating unexpected errors.</p>",
        "id": 351804545,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682149545
    },
    {
        "content": "<p>Perhaps you misunderstood my question, I asked if there was an <em>option</em> to hide it.</p>",
        "id": 351807457,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682150408
    },
    {
        "content": "<p>Oh no, I just thought I would mention another (imo better) solution in case the option doesn't exist <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 351807708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682150508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/pp.2Ebeta/near/351804545\">said</a>:</p>\n<blockquote>\n<p>Is it better to hide it or to automatically simp it away at every tactic step? Hiding has the downside of creating unexpected errors.</p>\n</blockquote>\n<p>For various reasons, I don't think this would work for me.  Consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Function</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">h</span> <span class=\"c1\">-- `h` displays as `h: (fun x =&gt; x - 12) x1 = (fun x =&gt; x - 12) x2`</span>\n</code></pre></div>\n<p>Are you seriously proposing that I write my own <code>intro</code> variant to perform beta reduction?</p>\n<p>Anyway, let's not derail the thread.  This is an existing option from Lean 3 and the question is simply whether it's a \"we'll get around to it someday\" in Lean 4 or a \"we've deliberately left it out.\"</p>",
        "id": 351815054,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682152239
    },
    {
        "content": "<p>I think that using a custom <code>intro</code> is actually a better suggestion, whatever the answer to your actual question.</p>",
        "id": 351817241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682153006
    },
    {
        "content": "<p>I hope you don't mind if I derail the thread a little more, but I do want to mention that in Patrick's tutorials, number 0079 is a source of periodic questions since pp.beta is set to true but it's easy to get lambdas in this exercise, and these cause linarith to mysteriously fail.</p>\n<p>It led to my first Zulip question as well.</p>",
        "id": 351821791,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1682154484
    },
    {
        "content": "<p>OK, OK .... next question, will the devs let us make such a custom <code>intro</code> tactic available as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">intro.beta</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>?</p>",
        "id": 351822291,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682154669
    },
    {
        "content": "<p>17 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/dsimp.20only.20for.20universal.20cleanup\">#mathlib4 &gt; dsimp only for universal cleanup</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 351831083,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682156741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/pp.2Ebeta/near/351815054\">said</a>:</p>\n<blockquote>\n<p>This is an existing option from Lean 3 and the question is simply whether it's a \"we'll get around to it someday\" in Lean 4 or a \"we've deliberately left it out.\"</p>\n</blockquote>\n<p>This I can answer: the option did not make the cut in my initial implementation of the pretty printer together with a few more options and I never came back to implementing the rest of them (did anyone miss the other ones so far?), but there was no conscious decision to drop them forever <a href=\"https://github.com/leanprover/lean4/blob/f9da1d8b55ca6989297fb952985b7d8d6c77e14b/src/Lean/PrettyPrinter/Delaborator/Options.lean#L138-L180\">https://github.com/leanprover/lean4/blob/f9da1d8b55ca6989297fb952985b7d8d6c77e14b/src/Lean/PrettyPrinter/Delaborator/Options.lean#L138-L180</a></p>",
        "id": 351898897,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682176986
    },
    {
        "content": "<p>[Quoting…]</p>\n<p>Is this also the case in the new thread that just got posted in <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Unexpected.20behaviour.20of.20linarith\">#new members &gt; Unexpected behaviour of linarith</a>?</p>",
        "id": 352054052,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682252345
    },
    {
        "content": "<p>(I think my quote didn't work, tube WiFi, but it was <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s comment about the exercises by Patrick</p>",
        "id": 352054069,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1682252351
    },
    {
        "content": "<p>Yes, absolutely.</p>",
        "id": 352054251,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682252412
    }
]