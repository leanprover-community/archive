[
    {
        "content": "<p>When applying gcongr to products I can't conclude because the bound variables I need to use are hidden from view.  For instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">gcongr</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><code>gcongr</code> reduces (as it should) to asking to show that <code>j+1 \\leq n</code> for all <code>j \\in range n</code>, except that I can't actually access the variable <code>j</code>.  Is there a way to make <code>gcongr</code> make the bound variables usable?</p>\n<p>(In this case I can proceed using <code>prod_le_prod</code> instead, but I think it would be nice to have <code>gcongr</code> be a \"one-stop-shop\" for all these sorts of reductions.)</p>",
        "id": 397884318,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697930981
    },
    {
        "content": "<p>(First, it's helpful if code blocks compile right away: e.g. adding <code>import Mathlib</code> at the top of this one.)</p>",
        "id": 397884559,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697931288
    },
    {
        "content": "<p>You can work around this behaviour using the <code>rename_i</code> tactic, which lets you give accessible names to \"tombstoned\" hypotheses.</p>",
        "id": 397884576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697931313
    },
    {
        "content": "<p>and <code>gcongr with i a</code> is the actual solution.</p>",
        "id": 397884646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697931403
    },
    {
        "content": "<p>For the original inequality, I also found this solution, though I do not recommend it :P</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unhygienic</span> <span class=\"c1\">-- !</span>\n  <span class=\"n\">gcongr</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 397897302,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697941459
    },
    {
        "content": "<p>16 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/gcongr.20handling.20equality.3F\">#mathlib4 &gt; gcongr handling equality?</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 397906248,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697950442
    }
]