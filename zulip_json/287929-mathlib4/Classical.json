[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2168\">!4#2168</a> has several instances failing, eg.<br>\n<code>failed to synthesize instance  Fintype (Sym2 α)</code><br>\n<code>failed to synthesize instance DecidableEq (Sym α n)</code><br>\nThese can all be solved by adding <code>open Classical</code> at the beginning of the file.<br>\n Is that an acceptable solution (together with a porting note)? </p>\n<p>Note that there is proof by <code>rfl</code> that does not work anymore and that I cannot fix...</p>",
        "id": 326812233,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675948672
    },
    {
        "content": "<p>That's not a good fix</p>",
        "id": 326813509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675948989
    },
    {
        "content": "<p>Is there a missing forward-port for a dependency of <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/data/finset/sym\">port-status#data/finset/sym</a>?</p>",
        "id": 326813887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675949070
    },
    {
        "content": "<p>I'll check that</p>",
        "id": 326813963,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675949093
    },
    {
        "content": "<p>I will push an update to the dashboard to display that shortly...</p>",
        "id": 326814043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675949115
    },
    {
        "content": "<p>In the meantime, check out the mathlib3 version and work out which instance it's finding</p>",
        "id": 326814125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675949133
    },
    {
        "content": "<p>Ok, so adding manually the proof for each missing instance does solve the problem. Thanks!</p>",
        "id": 326818512,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950194
    },
    {
        "content": "<p>I still have a failing <code>rfl</code> though...</p>",
        "id": 326818640,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950230
    },
    {
        "content": "<p>What do you mean by that? The instance still exists, but Lean can no longer find them?</p>",
        "id": 326818664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950236
    },
    {
        "content": "<p>Well, I add to add the following lines: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≈</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Classical.decRel</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">≈</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2.Rel.setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 326818849,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950287
    },
    {
        "content": "<p>And then Lean stopped complaining about <code>failed to synthesize instance</code></p>",
        "id": 326818970,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950325
    },
    {
        "content": "<p>What instance is being found in mathlib3?</p>",
        "id": 326818984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950328
    },
    {
        "content": "<p>These instances were automatically generated in mathlib3. I just asked Lean3 to tell me explicitly the proof of these instances and copy them to mathlib4.</p>",
        "id": 326819376,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950426
    },
    {
        "content": "<blockquote>\n<p>These instances were automatically generated in mathlib3</p>\n</blockquote>\n<p>Sure, but all instances have a name. Which instance is it finding?</p>",
        "id": 326819432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950443
    },
    {
        "content": "<p>Was <code>Classical.decRel </code> really being used in mathlib3?</p>",
        "id": 326819663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950495
    },
    {
        "content": "<p>Oh, I see what you mean. I did <code>library_search</code> to find the proof but I should have used <code>show_term</code> instead, I guess.</p>",
        "id": 326820218,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950634
    },
    {
        "content": "<p>Or just use <code>set_option pp.implicit true</code> to inspect the statement</p>",
        "id": 326820274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950652
    },
    {
        "content": "<p>The fist one is named <code>sym2.rel.decidable_rel</code></p>",
        "id": 326820300,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950658
    },
    {
        "content": "<p>Great, does that exist in mathlib4?</p>",
        "id": 326820348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950672
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sym2.instDecidableRelProdRel#doc\">docs4#Sym2.instDecidableRelProdRel</a> ?</p>",
        "id": 326820405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950686
    },
    {
        "content": "<p>Nope</p>",
        "id": 326820494,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950710
    },
    {
        "content": "<p>Edited with the real name</p>",
        "id": 326820587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950731
    },
    {
        "content": "<p>Ok, it's there and it is imported in the file. Ok, so I use that to prove the instance now?</p>",
        "id": 326820841,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950803
    },
    {
        "content": "<p>No, now you ask \"why can lean find this instance in Lean3, but not in Lean4\"</p>",
        "id": 326820928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950824
    },
    {
        "content": "<p>Let me have a look at it...</p>",
        "id": 326821167,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675950884
    },
    {
        "content": "<p>Which might be some combination of:</p>\n<ul>\n<li>There is a bug in lean4</li>\n<li>There is another missing instance it needs</li>\n<li>Mathport didn't port something correctly and your context is not what it's supposed to be</li>\n<li>A human didn't port something correct, either you higher up in the file, or someone else in an upstream file.</li>\n</ul>",
        "id": 326821202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675950894
    },
    {
        "content": "<p>My guess is that probably the fix is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- porting note: Lean3 unfolded `Sym2` to find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.fintype</span> <span class=\"n\">_</span>  <span class=\"c1\">-- check `infer_instance` doesn't work here</span>\n</code></pre></div>",
        "id": 326822255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675951170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Classical/near/326814043\">said</a>:</p>\n<blockquote>\n<p>I will push an update to the dashboard to display that shortly...</p>\n</blockquote>\n<p>Done, see the link above</p>",
        "id": 326823045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675951343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Classical/near/326822255\">said</a>:</p>\n<blockquote>\n<p>My guess is that probably the fix is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- porting note: Lean3 unfolded `Sym2` to find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.fintype</span> <span class=\"n\">_</span>  <span class=\"c1\">-- check `infer_instance` doesn't work here</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This fails with error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">DecidableRel</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≈</span> <span class=\"n\">x_1</span>\n</code></pre></div>",
        "id": 326823504,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675951450
    },
    {
        "content": "<p>Did you put that right after <code>Sym2.instDecidableRelProdRel</code>? (<a href=\"https://github.com/leanprover-community/mathlib4/blob/c16c0c414d4ea87bd10716ffd38b93d9d66aa215/Mathlib/Data/Sym/Sym2.lean#L674\">right here</a>)</p>",
        "id": 326823915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675951558
    },
    {
        "content": "<p>Ok, so if I add the lines as Kyle suggested: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"n\">Sym2.Rel</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">decidable_of_bool</span> <span class=\"o\">(</span><span class=\"n\">relBool</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relBool_spec</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- porting note: Lean3 unfolded `Sym2` to find this</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.fintype</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I get a new error:  the <code>Fintype</code> is in red and it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">binder</span> <span class=\"n\">annotation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.77695</span>\n<span class=\"n\">use</span> <span class=\"n\">the</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">checkBinderAnnotations</span> <span class=\"n\">false</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">disable</span> <span class=\"n\">the</span> <span class=\"n\">check</span>\n</code></pre></div>",
        "id": 326826777,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675952158
    },
    {
        "content": "<p>Yeah, that's because <code>Fintype</code> is not imported in this file...</p>",
        "id": 326828731,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675952615
    },
    {
        "content": "<p>Ok, if I import <code>Data.Set.finite</code> so that it knows about <code>fintype</code> and product of <code>fintype</code> being also a <code>fintype</code>, I still get the same error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">DecidableRel</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≈</span> <span class=\"n\">x_1</span>\n</code></pre></div>",
        "id": 326830507,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675953002
    },
    {
        "content": "<p>Same error if I give explicitly the setoid: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2.Rel.setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 326832144,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675953369
    },
    {
        "content": "<p>The issue is that <code>Fintype</code> is not imported in this file. (Edit: oh, missed that comment in the middle where you said that.)</p>",
        "id": 326832236,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675953392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Classical/near/326832236\">said</a>:</p>\n<blockquote>\n<p>The issue is that <code>Fintype</code> is not imported in this file.</p>\n</blockquote>\n<p>Yes, I fixed that, but that still does not work...</p>",
        "id": 326832486,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675953453
    },
    {
        "content": "<p>Can you give the full error message including the context?</p>",
        "id": 326832642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675953482
    },
    {
        "content": "<p>It's possible that the problem is that Lean4 no longer sees through the <code>equiv</code> symbol</p>",
        "id": 326832845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675953523
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/JjJk-r6helb1PkHf8eBbLCve/Screenshot-2023-02-09-at-15.39.14.png\">Screenshot-2023-02-09-at-15.39.14.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JjJk-r6helb1PkHf8eBbLCve/Screenshot-2023-02-09-at-15.39.14.png\" title=\"Screenshot-2023-02-09-at-15.39.14.png\"><img src=\"/user_uploads/3121/JjJk-r6helb1PkHf8eBbLCve/Screenshot-2023-02-09-at-15.39.14.png\"></a></div>",
        "id": 326832999,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675953570
    },
    {
        "content": "<p>I suspect we want a <code>Quotient.fintype'</code> that is expressed in terms of <code>setoid.r</code> instead of <code>\\approx</code></p>",
        "id": 326833323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675953645
    },
    {
        "content": "<p>Can you add that to the line above and see if it helps?</p>",
        "id": 326833384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675953658
    },
    {
        "content": "<p>Here's one way to get it to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≈</span> <span class=\"bp\">·</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">instRelDecidable</span> <span class=\"n\">_</span>\n  <span class=\"n\">Quotient.fintype</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 326833832,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675953774
    },
    {
        "content": "<p>I gave the preceding instance a name:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instRelDecidable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"n\">Sym2.Rel</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">decidable_of_bool</span> <span class=\"o\">(</span><span class=\"n\">relBool</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relBool_spec</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 326833892,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675953788
    },
    {
        "content": "<p>I'd prefer that we add the <code>fintype'</code> instance to that <code>have</code> statement</p>",
        "id": 326833995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675953814
    },
    {
        "content": "<p>I think this will come up for other quotient types</p>",
        "id": 326834017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675953820
    },
    {
        "content": "<p>What that would make sense for other quotients, here <code>Sym2</code> uses a global setoid instance on Prod, which isn't great. I'd prefer we fix that instead.</p>",
        "id": 326834244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675953882
    },
    {
        "content": "<p>In that case we should make the <code>DecidableRel (· ≈ · : α × α → α × α → Prop)</code> instance global too (until we make the refactor you suggest)</p>",
        "id": 326834353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675953914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Classical/near/326833384\">said</a>:</p>\n<blockquote>\n<p>Can you add that to the line above and see if it helps?</p>\n</blockquote>\n<p>I am going to be afk for the next hour. I’ll try that when I come back</p>",
        "id": 326835511,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675954216
    },
    {
        "content": "<p>I think we instead want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- name the existing instance</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instRelDecidable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"n\">Sym2.Rel</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">decidable_of_bool</span> <span class=\"o\">(</span><span class=\"n\">relBool</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relBool_spec</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instRelDecidable'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≈</span> <span class=\"bp\">·</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">instRelDecidable</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 326835964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675954331
    },
    {
        "content": "<p>Yes, that works!</p>",
        "id": 326849624,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675957759
    },
    {
        "content": "<p>There is another instance that I added to make things work. I'll see if I can fix that using a similar method.</p>",
        "id": 326850893,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675958108
    },
    {
        "content": "<p>The missing instance is <code>DecidableEq (Sym α n) </code> which can be proved by: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.instDecidableEqSubtype</span>\n</code></pre></div>\n<p>This instance does not exists in mathlib3 nor in mathlib4. In mathlib3, it is synthesized automatically but not in mathlib4 for some reason. Should I jut add it to <code>Data.Sym.Basic</code> where <code>Sym α n</code> is defined?</p>",
        "id": 326856076,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675959330
    },
    {
        "content": "<p>There seems to be a common theme about synthesizing <code>DecidableEq</code> instances, presumably involving the amount of unfolding that Lean 4 allows differing from Lean 3. It would be great if someone could isolate an example of this.</p>",
        "id": 326856710,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675959472
    }
]