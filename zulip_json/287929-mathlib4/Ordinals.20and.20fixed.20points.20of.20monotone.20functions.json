[
    {
        "content": "<p>Hi everyone,</p>\n<p>I am a PhD student who has previously worked quite a bit in Isabelle and is currently trying out Lean. I have some questions about whether something already exists or if it could be appropriate as a contribution. General thoughts would also be appreciated :)</p>\n<p>In an Isabelle project on weakest preconditions and program verification I needed to create some new machinery for working with fixed points of monotone functions over complete lattices. The problem with the existing framework was that they define the least fixed point (lfp) of a monotone function f as infimum({x | f(x) &lt;= x}) and then show that a transfinite induction principle is admissible: (forall x. P(x) ==&gt; P(f(x))) &amp;&amp; (forall X. (forall x in X. P(x)) ==&gt; P (supremum(X))) ==&gt; P(lfp(f)). This works for properties of a single function, but not for relations between the least fixed points of different monotone functions. </p>\n<p>I found, for example, that showing that the weakest preconditions of a simple while-language is conjunctive (wp(s,Q) &amp;&amp; wp(s,P) ==&gt; wp(s,Q &amp;&amp; P)) was quite hard with the existing framework. My solution was to define new machinery for finding the least fixed point of a monotone function as follows:</p>\n<p>We define the transfinite iteration of a function f<br>\nf^0 (x) = x<br>\nf^(o+1) (x) = f (f^o (x))<br>\nf^o (x) = bound({ f^o' (x) |  o' &lt; o})        for limit ordinal o</p>\n<p>We can show that if we use bound=supremum then there is an ordinal o such that for all o' &gt;= o we have that f^o' (bot) is the least fixed point of f. </p>\n<p>This means that we can show P(lfp f, lfp g) for monotone functions f and g by showing P(f^o (bot), g^o (bot)) (for all o) by transfinite induction on o.  </p>\n<p>What do you think? Does something like this already exists? Would it be relevant for mathlib?</p>\n<p>Best,<br>\nSimon</p>",
        "id": 407451226,
        "sender_full_name": "Simon Tobias Lund",
        "timestamp": 1702379377
    },
    {
        "content": "<p>Do you have an example of an argument that would use this style of induction? In lean, it's pretty rare to directly perform transfinite induction on ordinals, because induction on carefully chosen inductive types usually more directly relates to the problem domain.</p>",
        "id": 407454912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702380701
    },
    {
        "content": "<p>Here is a thing I have used it for in Isabelle:</p>\n<p>If we have a programming language with while-statements, if-statements, and a variable declarations/havoc-statement (non-deterministically assign an arbitrary value to a variable), then the weakest precondition (given a set of acceptable states at the end of a program, return the acceptable states at the start) of that language is not scott-continuous, but it is monotone. I will write wp(s,Q) for the weakest precondition of program s for postcondition Q</p>\n<p>The weakest precondition of while(b){s} is lfp (λ X. (b ==&gt; wp(s,X)) &amp;&amp; (¬b ==&gt; Q)). I will call λ X. (b ==&gt; wp(s,X)) &amp;&amp; (¬b ==&gt; Q) for phi(Q) from now on. </p>\n<p>To show that the weakest precondition is conjunctive (wp(s,P) &amp;&amp; wp(s,Q) ==&gt; wp(s,P &amp;&amp; Q)) we then need to show:<br>\nlfp(phi(P)) &amp;&amp; lfp (phi(Q)) ==&gt; lfp (phi(P &amp;&amp; Q))</p>\n<p>It is easy enough to show that if X &amp;&amp; Y ==&gt; Z then phi(P)(X) &amp;&amp; phi(Q)(Y) ==&gt; phi(P &amp;&amp; Q)(Z) and that if all the elements of three sets U, V, and W can be ordered into tuples (X,Y,Z) with X in U, Y in V, and Z in W such that X &amp;&amp; Y ==&gt; Z, then supremum(U) &amp;&amp; supremum(V) ==&gt; supremum(W). These are the two proofs required for showing that phi(P)^o (bot) &amp;&amp; phi(Q)^o (bot) ==&gt; phi(P &amp;&amp; Q)^o (bot) by induction on o. I could, however, not find any way to use these proofs to show conjunctivity with the existing induction principles for fixed points in Isabelle.</p>\n<p>Other ways of showing this property that I have considered all seem far more complicated. </p>\n<p>Best,<br>\nSimon</p>",
        "id": 407459640,
        "sender_full_name": "Simon Tobias Lund",
        "timestamp": 1702382417
    },
    {
        "content": "<p>This sounds like something used to fill a gap in isabelle. It's not clear at all from this whether this is a gap in lean/mathlib; you would have to do something at least vaguely analogous in lean and find out if/when you get stuck</p>",
        "id": 407460276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702382608
    },
    {
        "content": "<p>Right, that is a good point. I'll try to do so.</p>",
        "id": 407460617,
        "sender_full_name": "Simon Tobias Lund",
        "timestamp": 1702382741
    }
]