[
    {
        "content": "<p>The following bit in Lean 3</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">has_lt'</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">ltb</span> <span class=\"n\">s₁.mk_iterator</span> <span class=\"n\">s₂.mk_iterator</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_lt</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">decidable_rel</span> <span class=\"n\">string</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- short-circuit type class inference</span>\n</code></pre></div>\n<p>doesn't work without adaption in Lean 4, but instead I have to do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">lt'</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ltb</span> <span class=\"n\">s₁.mkIterator</span> <span class=\"n\">s₂.mkIterator</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_lt</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">DecidableRel</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lt'</span><span class=\"o\">]</span>\n  <span class=\"n\">infer_instance</span>  <span class=\"c1\">-- short-circuit type class inference</span>\n</code></pre></div>\n<p>Does anybody know why this is? Is this intended?</p>",
        "id": 316134928,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1671136546
    },
    {
        "content": "<p>I guess the inference doesn't unfold exactly the same was as before?</p>",
        "id": 316135426,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1671136692
    },
    {
        "content": "<p>On the following example, it seems that instance transparency is not behaving correctly over <code>ℚ</code>.  There is a goal where <code>with_reducible_and_instances (apply mul_le_mul)</code> behaves differently over a generic linearly ordered field than over <code>ℚ</code>.  That's not intended, is it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> `.reducible` transparency works correctly over `ℚ`. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span><span class=\"o\">)</span> <span class=\"c1\">-- fails, as desired</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> `.instance` transparency works correctly over a generic field. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible_and_instances</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span><span class=\"o\">)</span> <span class=\"c1\">-- fails, as desired</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> `.instance` transparency does not work correctly over `ℚ`. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible_and_instances</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span><span class=\"o\">)</span> <span class=\"c1\">-- succeeds, wanted it not to</span>\n  <span class=\"n\">all_goals</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 323637092,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674709172
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> with whom I was discussing similar things recently.</p>",
        "id": 323637099,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674709188
    },
    {
        "content": "<p><code>with_reducible_and_instances</code> seems to work as expected: by unfolding the instance <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.instDivRat#doc\">docs4#Rat.instDivRat</a>, the goal becomes a multiplication. <br>\nIf you want this to fail, define a (semireducible) def <code>def Rat.div := ...</code>that is used to define this instance.</p>",
        "id": 323677011,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674727258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Thanks for investigating!  Do you think it would be acceptable to the community as a whole to make the Rat <code>Div</code> instance semireducible in this way?</p>",
        "id": 323806951,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674757492
    },
    {
        "content": "<p>I don't see any problem with that change, and it seems good if it makes <code>Rat</code> behave more like a variable type.</p>",
        "id": 323807126,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674757555
    },
    {
        "content": "<p>And while I'm at it, the same for <code>Real</code>?</p>",
        "id": 323807414,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674757600
    },
    {
        "content": "<p>It's tricky because <code>Real</code> gets its <code>Div</code> instance from the default field in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DivInvMonoid#doc\">docs4#DivInvMonoid</a>.  Do you know if there is a way to make any <code>DivInvMonoid</code> with the default value for <code>Div</code> have that instance be semireducible?</p>",
        "id": 323808142,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674757759
    },
    {
        "content": "<p>I think you just define <code>Real.div</code>, then use <code>div := Real.div</code> and <code>div_eq_mul_inv := fun _ _ =&gt; rfl</code></p>",
        "id": 323808432,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674757822
    },
    {
        "content": "<p>I mean, is there a solution which works not just for <code>Real</code> but all at once for any <code>DivInvMonoid</code> constructed to pull the default value for <code>Div</code>.</p>",
        "id": 323808578,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674757862
    },
    {
        "content": "<p>maybe make the default value <code>id (a * b⁻¹)</code> instead of <code>a * b⁻¹</code> (assuming <code>id</code> is semireducible)</p>",
        "id": 323808770,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674757907
    },
    {
        "content": "<p>Maybe, though, we should do this for every default field which is a typeclass?</p>",
        "id": 323808907,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674757933
    },
    {
        "content": "<p>Yeah, that will probably increase consistency between variable types and concrete types.</p>",
        "id": 323809280,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674758015
    },
    {
        "content": "<p>Maybe there's even a way to do this automatically.</p>",
        "id": 323809591,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674758078
    },
    {
        "content": "<p>if we go that route, it might be even better to make the default value <code>irreducible_id (a * b⁻¹)</code> (where <code>irreducible_id</code> is an irreducible version of <code>id</code>): that will increase the consistency even further.</p>",
        "id": 323809661,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674758098
    },
    {
        "content": "<p>Won't that make the default proofs fail, though?</p>",
        "id": 323809870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674758157
    },
    {
        "content": "<p>I mean that <code>(div_eq_mul_inv := rfl)</code> won't work anymore.</p>",
        "id": 323809976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674758183
    },
    {
        "content": "<p>true, but we can make the default proof the tactic that does <code>unfold irreducible_id; rfl</code></p>",
        "id": 323810937,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674758474
    },
    {
        "content": "<p>Would this be a Lean 4 change?</p>",
        "id": 323811181,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674758533
    },
    {
        "content": "<p>No, I was just thinking about manually changing this in each mathlib4 class where we want to do this.</p>",
        "id": 323811373,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674758598
    },
    {
        "content": "<p>Maybe it could be a Lean 4 change though?</p>",
        "id": 323812289,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674758851
    },
    {
        "content": "<p>Or do you think we want to experiment with that pattern in mathlib before proposing to make it the standard behaviour across Lean?</p>",
        "id": 323812439,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674758887
    },
    {
        "content": "<p>Yes, and I think the behavior is sufficiently unexpected that I don't think it's desired default behavior.</p>",
        "id": 323828849,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674763651
    },
    {
        "content": "<p>I have implemented the suggestions here for making instance transparency behave the same way on particular DivInvMonoids (Rat, Real) as on a generic one.  It seems to work: see the branch<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/compare/hrmacbeth-instance-transparency\">https://github.com/leanprover-community/mathlib4/compare/hrmacbeth-instance-transparency</a></p>\n<p>I'll PR first the change to Std (for Rat) and then the change to Mathlib4 (for the default field of DivInvMonoid).</p>",
        "id": 324207065,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674869475
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/Std4/pull/92\">Std4#92</a></p>",
        "id": 324209073,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674869938
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1896\">mathlib4#1896</a> to get that std change into mathlib</p>",
        "id": 324213034,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674871519
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib4/pull/1897\">mathlib4#1897</a> for the mathlib changes.</p>",
        "id": 324213429,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674871851
    }
]