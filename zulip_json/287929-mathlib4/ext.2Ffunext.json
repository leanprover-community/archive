[
    {
        "content": "<p>Does Mathlib4's <code>ext</code> tactic not apply <code>funext</code>? I ran into this issue a couple of times in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2424\">!4#2424</a> and it seems that <a href=\"https://github.com/leanprover-community/mathlib4/pull/2418\">!4#2418</a> is also affected.<br>\nIs this expected behavior?</p>",
        "id": 329326287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677029681
    },
    {
        "content": "<p>Probably because  <code>⟶</code> is no longer reducibly a function.  The old <code>ext</code> had a fall back where it tried to apply all ext-lemmas before failing, and that's likely why it succeeded here.</p>",
        "id": 329329566,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677032401
    },
    {
        "content": "<p>The intended solution here is to add an extensionality lemma for the type <code>Prefunctor.obj (Prefunctor.obj coyoneda.toPrefunctor (Opposite.op (Prefunctor.obj F'.toPrefunctor x))).toPrefunctor f ⟶ Prefunctor.obj (Prefunctor.obj coyoneda.toPrefunctor (Opposite.op (Prefunctor.obj F.toPrefunctor x))).toPrefunctor f </code> (at a reasonable generality of course).</p>",
        "id": 329329687,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677032474
    }
]