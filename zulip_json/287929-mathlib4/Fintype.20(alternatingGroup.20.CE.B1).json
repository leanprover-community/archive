[
    {
        "content": "<p>How do I synthesise the instance <code>fta</code> given these imports?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.ConjFinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Perm.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Simple</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.IntervalCases</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">Subgroup</span> <span class=\"n\">Fintype</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alternatingGroup</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sign.ker</span> <span class=\"n\">deriving</span> <span class=\"n\">Fintype</span> <span class=\"c1\">-- deriving Fintype doesn't work</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fta</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">alternatingGroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fintypePerm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- ???</span>\n</code></pre></div>",
        "id": 347878991,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680965089
    },
    {
        "content": "<p>deriving doesn't make sense there, since that's not a type in the first place</p>",
        "id": 347879587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680965323
    },
    {
        "content": "<p>The second instance should be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.fintype#doc\">docs4#Subtype.fintype</a></p>",
        "id": 347879716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680965378
    },
    {
        "content": "<p>The missing instance you probably need to add yourself is <code>DecidablePred (∈ alternatingGroup α)</code></p>",
        "id": 347880192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680965553
    },
    {
        "content": "<p>I would guess lean 3 just unfolded for you</p>",
        "id": 347880227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680965567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Fintype.20.28alternatingGroup.20.CE.B1.29/near/347880192\">said</a>:</p>\n<blockquote>\n<p>The missing instance you probably need to add yourself is <code>DecidablePred (∈ alternatingGroup α)</code></p>\n</blockquote>\n<p>I'm not sure how that can be proved from the given variables</p>",
        "id": 347880650,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680965761
    },
    {
        "content": "<p>It may in fact be false</p>",
        "id": 347880711,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680965775
    },
    {
        "content": "<p>…wait, this seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">alternatingGroup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidHom.decidableMemKer</span> <span class=\"n\">sign</span>\n</code></pre></div>",
        "id": 347881654,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1680966197
    },
    {
        "content": "<p>That's a pretty good indication that it's not false :)</p>",
        "id": 347884375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680967285
    },
    {
        "content": "<p><code>fun x =&gt; x ∈ alternatingGroup α</code> can be written slightly more concisely as <code>(\\. ∈ alternatingGroup α)</code></p>",
        "id": 347884496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680967325
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3371\">!4#3371</a> is as far as I could get on the relevant file</p>",
        "id": 348207763,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681130585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> would like to see if you can solve the 4 remaining errors</p>",
        "id": 348207790,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681130597
    },
    {
        "content": "<p>The last error is particularly laughable; none of <code>decide</code>, <code>ring</code>, <code>linarith</code> and <code>aesop</code> can close what simplifies to <code>(-1) ^ 5 != 1</code>!</p>",
        "id": 348208783,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681130882
    },
    {
        "content": "<p>What about <code>norm_num</code>?</p>",
        "id": 348208927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681130903
    },
    {
        "content": "<p>What is the type of these numbers?</p>",
        "id": 348208979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681130923
    },
    {
        "content": "<p>mathlib3 closes the proof of <code>(-1) ^ (Multiset.sum {4} + ↑Multiset.card {4}) ≠ 1</code> using <code>decide</code> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>\n<p><code>norm_num</code> also doesn't work, but leaves the goal as <code>¬(-1) ^ 5 = 1</code> where the <code>-1</code> is of type <code>ℤˣ</code>, the <code>5</code> is of type <code>\\N</code> and the RHS <code>1</code> is of type <code>(fun x =&gt; ℤˣ) g</code></p>",
        "id": 348213171,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681132188
    },
    {
        "content": "<p>Does <code>ext; simp</code> make some progress?</p>",
        "id": 348215256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681132763
    },
    {
        "content": "<p><code>ext</code> should turn this into a goal about <code>ℤ</code> as opposed to <code>ℤˣ</code>.</p>",
        "id": 348215310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1681132782
    },
    {
        "content": "<p>Are we missing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.decidable_eq\">docs#units.decidable_eq</a>? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instUnitsDecidableEq#doc\">docs4#instUnitsDecidableEq</a> ?</p>",
        "id": 348216109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681132994
    },
    {
        "content": "<p>Hmm, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.instDecidableEqUnits#doc\">docs4#Units.instDecidableEqUnits</a> exists (though I hate that it's no longer easy to guess instance names)</p>",
        "id": 348216374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681133078
    },
    {
        "content": "<p><code>ext</code> doesn't work, it gives another error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">applyExtLemma</span> <span class=\"n\">only</span> <span class=\"n\">applies</span> <span class=\"n\">to</span> <span class=\"n\">equations</span><span class=\"o\">,</span> <span class=\"n\">not</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 348216433,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681133102
    },
    {
        "content": "<p>Right, <code>ext</code> doesn't work on <code>ne</code></p>",
        "id": 348216474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681133117
    },
    {
        "content": "<p>does <code>rw [ne.def]</code> allow <code>decide</code> to work?</p>",
        "id": 348216534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681133138
    },
    {
        "content": "<p>Does <code>decide</code> give any diagnostics when it fails?</p>",
        "id": 348216562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681133150
    },
    {
        "content": "<p>the original <code>decide</code> gives the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">must</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"n\">free</span> <span class=\"n\">or</span> <span class=\"kd\">meta</span> <span class=\"kd\">variables</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">Multiset.sum</span> <span class=\"o\">{</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">Multiset.card</span> <span class=\"o\">{</span><span class=\"mi\">4</span><span class=\"o\">})</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 348216688,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681133179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Fintype.20.28alternatingGroup.20.CE.B1.29/near/348216433\">said</a>:</p>\n<blockquote>\n<p><code>ext</code> doesn't work, it gives another error:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">applyExtLemma</span> <span class=\"n\">only</span> <span class=\"n\">applies</span> <span class=\"n\">to</span> <span class=\"n\">equations</span><span class=\"o\">,</span> <span class=\"n\">not</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>One can always use an explicit ext lemma like Subtype.ext_iff or Units.ext_iff</p>",
        "id": 348218269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681133705
    },
    {
        "content": "<p>The <code>decide</code> works if you put a <code>dsimp only</code> before it. This looks like a bug in <code>decide</code>.</p>",
        "id": 348218334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681133724
    },
    {
        "content": "<p><code>ext</code> only works on <code>=</code> not  <code>≠</code></p>",
        "id": 348218567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681133787
    },
    {
        "content": "<p><code>simp only [Set.singleton_subset_iff, SetLike.mem_coe, ne_eq, mk_eq_one_iff]</code> also works</p>",
        "id": 348219025,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681133911
    },
    {
        "content": "<p>Right. I meant my message as an interpretation of Johan's message</p>",
        "id": 348219085,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681133932
    },
    {
        "content": "<p>simp [Something.ext_iff]</p>",
        "id": 348219147,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1681133948
    },
    {
        "content": "<p>Right, I pushed the <code>dsimp only</code> fix</p>",
        "id": 348219493,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681134021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Fintype.20.28alternatingGroup.20.CE.B1.29/near/348219025\">said</a>:</p>\n<blockquote>\n<p><code>simp only [Set.singleton_subset_iff, SetLike.mem_coe, ne_eq, mk_eq_one_iff]</code> also works</p>\n</blockquote>\n<p>So does <code>simp only</code> because that uses <code>decide</code> under the hood, so here <code>simp only</code> is essentially the same as <code>dsimp only; decide</code></p>",
        "id": 348220112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681134229
    },
    {
        "content": "<p>I tested <code>simp only</code> on Lean 4 Web, it doesn't work</p>",
        "id": 348220352,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681134300
    },
    {
        "content": "<p>It worked for me in your PR branch</p>",
        "id": 348220699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681134388
    },
    {
        "content": "<p>Though there's an error higher up the same proof that might be causing trouble</p>",
        "id": 348220727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681134398
    },
    {
        "content": "<p>I actually don't know how to fill in the underscores here, which is the last remaining non-timeout error in the alternating group file<br>\n<code>have h := SetLike.mem_coe.1 (@subset_normalClosure _ _ &gt;_&lt; _ (Set.mem_singleton _))</code></p>",
        "id": 348227813,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681136296
    },
    {
        "content": "<p>It needs a <code>Group</code> but I don't know which <code>Group</code> is the right one</p>",
        "id": 348227939,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681136327
    },
    {
        "content": "<p>Looking at the type of <code>h</code> in Lean 3 might help</p>",
        "id": 348230705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681136931
    },
    {
        "content": "<p><code>h</code>'s type is <code>h : ?m_3 ∈ normal_closure {?m_3}</code>, which I feel is totally unrelated to the existing term</p>",
        "id": 348233414,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681137568
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/lake.20exe.20cache.20get\">#mathlib4 &gt; lake exe cache get</a> by <span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span>.</p>",
        "id": 348233460,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681137579
    }
]