[
    {
        "content": "<p>I've written a proof of Newton's identities <a href=\"https://github.com/leanprover-community/mathlib4/pull/6112\">here</a> and am trying to figure out how to rewrite the condition for the <code>Finset</code> <code>pairs</code> that's in bijection to the set of monomials on the LHS of the identity. Here's a minimal working example that shows the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Subalgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pairs</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">σ</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.univ.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">card</span> <span class=\"n\">t.fst</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">card</span> <span class=\"n\">t.fst</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">t.snd</span> <span class=\"bp\">∈</span> <span class=\"n\">t.fst</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I get an error <code>failed to synthesize instance DecidablePred fun t ↦ card t.fst ≤ k ∧ (card t.fst = k → t.snd ∈ t.fst)</code> on <code>Finset.univ.filter</code>, but this predicate does seem like it should be decidable constructively. Does anyone have a suggestion as to how to resolve this? Thanks!</p>",
        "id": 378599633,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690317556
    },
    {
        "content": "<p>You're missing <code> [DecidableEq σ]</code></p>",
        "id": 378600506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690317861
    },
    {
        "content": "<p>The one on the <code>variables</code> line is useless because you discard <code>σ</code> and replace it with a new <code>σ</code> in the <code>def</code></p>",
        "id": 378600550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690317880
    },
    {
        "content": "<p>(as an aside, there's something pretty wonky with the pretty-printer if you run <code>#eval pairs (Fin 3) 3</code>)</p>",
        "id": 378600909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690317987
    },
    {
        "content": "<p>Ah shoot, you're completely right. Dumb typo on my part. Thanks so much!</p>",
        "id": 378602782,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690318627
    }
]