[
    {
        "content": "<p>I wrote something for <code>leanproject</code> that lists all files which are both ported, and all of whose downstream dependencies are ported. (PR soon). These are files which we can \"disconnect\" from mathlib3, so that people can start work again. I think this is important to do, as many people are ready to get moving!</p>\n<p>The current list is actually impressively long, I wouldn't have guessed it. In fact it is longer than the zulip limit, two messages to follow. :-)</p>",
        "id": 360251181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684758044
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra.algebra.unitization</span>\n<span class=\"n\">algebra.category.Group.injective</span>\n<span class=\"n\">algebra.category.Group.zero</span>\n<span class=\"n\">algebra.category.Module.tannaka</span>\n<span class=\"n\">algebra.char_p.local_ring</span>\n<span class=\"n\">algebra.char_p.mixed_char_zero</span>\n<span class=\"n\">algebra.field.power</span>\n<span class=\"n\">algebra.free_monoid.count</span>\n<span class=\"n\">algebra.gcd_monoid.div</span>\n<span class=\"n\">algebra.group.conj_finite</span>\n<span class=\"n\">algebra.group.unique_prods</span>\n<span class=\"n\">algebra.group.with_one.units</span>\n<span class=\"n\">algebra.hierarchy_design</span>\n<span class=\"n\">algebra.hom.centroid</span>\n<span class=\"n\">algebra.homology.augment</span>\n<span class=\"n\">algebra.homology.flip</span>\n<span class=\"n\">algebra.homology.functor</span>\n<span class=\"n\">algebra.module.bimodule</span>\n<span class=\"n\">algebra.module.injective</span>\n<span class=\"n\">algebra.module.pointwise_pi</span>\n<span class=\"n\">algebra.monoid_algebra.degree</span>\n<span class=\"n\">algebra.monoid_algebra.ideal</span>\n<span class=\"n\">algebra.monoid_algebra.no_zero_divisors</span>\n<span class=\"n\">algebra.monoid_algebra.to_direct_sum</span>\n<span class=\"n\">algebra.order.algebra</span>\n<span class=\"n\">algebra.order.field.pi</span>\n<span class=\"n\">algebra.order.group.densely_ordered</span>\n<span class=\"n\">algebra.order.group.prod</span>\n<span class=\"n\">algebra.order.monoid.to_mul_bot</span>\n<span class=\"n\">algebra.order.positive.field</span>\n<span class=\"n\">algebra.order.ring.cone</span>\n<span class=\"n\">algebra.order.sub.basic</span>\n<span class=\"n\">algebra.order.upper_lower</span>\n<span class=\"n\">algebra.quandle</span>\n<span class=\"n\">algebra.regular.pow</span>\n<span class=\"n\">algebra.ring.order_synonym</span>\n<span class=\"n\">algebra.star.chsh</span>\n<span class=\"n\">algebra.star.free</span>\n<span class=\"n\">algebra.tropical.basic</span>\n<span class=\"n\">algebra.tropical.big_operators</span>\n<span class=\"n\">algebra.tropical.lattice</span>\n<span class=\"n\">algebraic_topology.dold_kan.compatibility</span>\n<span class=\"n\">algebraic_topology.dold_kan.decomposition</span>\n<span class=\"n\">algebraic_topology.dold_kan.degeneracies</span>\n<span class=\"n\">algebraic_topology.dold_kan.equivalence_additive</span>\n<span class=\"n\">algebraic_topology.dold_kan.faces</span>\n<span class=\"n\">algebraic_topology.dold_kan.functor_gamma</span>\n<span class=\"n\">algebraic_topology.dold_kan.functor_n</span>\n<span class=\"n\">algebraic_topology.dold_kan.gamma_comp_n</span>\n<span class=\"n\">algebraic_topology.dold_kan.homotopies</span>\n<span class=\"n\">algebraic_topology.dold_kan.homotopy_equivalence</span>\n<span class=\"n\">algebraic_topology.dold_kan.n_comp_gamma</span>\n<span class=\"n\">algebraic_topology.dold_kan.n_reflects_iso</span>\n<span class=\"n\">algebraic_topology.dold_kan.normalized</span>\n<span class=\"n\">algebraic_topology.dold_kan.notations</span>\n<span class=\"n\">algebraic_topology.dold_kan.p_infty</span>\n<span class=\"n\">algebraic_topology.dold_kan.projections</span>\n<span class=\"n\">algebraic_topology.dold_kan.split_simplicial_object</span>\n<span class=\"n\">algebraic_topology.nerve</span>\n<span class=\"n\">algebraic_topology.split_simplicial_object</span>\n<span class=\"n\">analysis.complex.operator_norm</span>\n<span class=\"n\">analysis.convex.body</span>\n<span class=\"n\">analysis.convex.caratheodory</span>\n<span class=\"n\">analysis.convex.extrema</span>\n<span class=\"n\">analysis.convex.independent</span>\n<span class=\"n\">analysis.convex.join</span>\n<span class=\"n\">analysis.convex.quasiconvex</span>\n<span class=\"n\">analysis.convex.simplicial_complex.basic</span>\n<span class=\"n\">analysis.convex.stone_separation</span>\n<span class=\"n\">analysis.hofer</span>\n<span class=\"n\">analysis.locally_convex.continuous_of_bounded</span>\n<span class=\"n\">analysis.normed.group.controlled_closure</span>\n<span class=\"n\">analysis.normed.order.upper_lower</span>\n<span class=\"n\">analysis.normed.ring.seminorm</span>\n<span class=\"n\">analysis.normed_space.M_structure</span>\n<span class=\"n\">analysis.normed_space.banach_steinhaus</span>\n<span class=\"n\">analysis.normed_space.compact_operator</span>\n<span class=\"n\">analysis.normed_space.int</span>\n<span class=\"n\">analysis.normed_space.mazur_ulam</span>\n<span class=\"n\">analysis.special_functions.log.monotone</span>\n<span class=\"n\">analysis.special_functions.polynomials</span>\n<span class=\"n\">analysis.special_functions.trigonometric.chebyshev</span>\n<span class=\"n\">analysis.subadditive</span>\n<span class=\"n\">category_theory.abelian.generator</span>\n<span class=\"n\">category_theory.abelian.subobject</span>\n<span class=\"n\">category_theory.action</span>\n<span class=\"n\">category_theory.adjunction.adjoint_functor_theorems</span>\n<span class=\"n\">category_theory.adjunction.over</span>\n<span class=\"n\">category_theory.adjunction.whiskering</span>\n<span class=\"n\">category_theory.category.Cat.limit</span>\n<span class=\"n\">category_theory.category.Quiv</span>\n<span class=\"n\">category_theory.category.Rel</span>\n<span class=\"n\">category_theory.category.Twop</span>\n<span class=\"n\">category_theory.category.galois_connection</span>\n<span class=\"n\">category_theory.cofiltered_system</span>\n<span class=\"n\">category_theory.connected_components</span>\n<span class=\"n\">category_theory.core</span>\n<span class=\"n\">category_theory.endofunctor.algebra</span>\n<span class=\"n\">category_theory.generator</span>\n<span class=\"n\">category_theory.grothendieck</span>\n<span class=\"n\">category_theory.groupoid.free_groupoid</span>\n<span class=\"n\">category_theory.idempotents.biproducts</span>\n<span class=\"n\">category_theory.idempotents.functor_extension</span>\n<span class=\"n\">category_theory.idempotents.homological_complex</span>\n<span class=\"n\">category_theory.idempotents.karoubi_karoubi</span>\n<span class=\"n\">category_theory.idempotents.simplicial_object</span>\n<span class=\"n\">category_theory.limits.constructions.filtered</span>\n<span class=\"n\">category_theory.limits.constructions.weakly_initial</span>\n<span class=\"n\">category_theory.limits.essentially_small</span>\n<span class=\"n\">category_theory.limits.full_subcategory</span>\n<span class=\"n\">category_theory.limits.mono_coprod</span>\n<span class=\"n\">category_theory.limits.pi</span>\n<span class=\"n\">category_theory.limits.preserves.opposites</span>\n<span class=\"n\">category_theory.limits.shapes.disjoint_coproduct</span>\n<span class=\"n\">category_theory.limits.shapes.wide_equalizers</span>\n<span class=\"n\">category_theory.limits.small_complete</span>\n<span class=\"n\">category_theory.localization.construction</span>\n<span class=\"n\">category_theory.localization.opposite</span>\n<span class=\"n\">category_theory.localization.predicate</span>\n<span class=\"n\">category_theory.monad.products</span>\n<span class=\"n\">category_theory.monoidal.tor</span>\n<span class=\"n\">category_theory.noetherian</span>\n<span class=\"n\">category_theory.preadditive.eilenberg_moore</span>\n<span class=\"n\">category_theory.preadditive.endo_functor</span>\n<span class=\"n\">category_theory.preadditive.generator</span>\n<span class=\"n\">category_theory.preadditive.hom_orthogonal</span>\n<span class=\"n\">category_theory.preadditive.of_biproducts</span>\n<span class=\"n\">category_theory.products.associator</span>\n<span class=\"n\">category_theory.sigma.basic</span>\n<span class=\"n\">category_theory.sites.adjunction</span>\n<span class=\"n\">category_theory.sites.induced_topology</span>\n<span class=\"n\">category_theory.subobject.comma</span>\n<span class=\"n\">category_theory.subobject.types</span>\n<span class=\"n\">category_theory.sums.associator</span>\n<span class=\"n\">category_theory.sums.basic</span>\n<span class=\"n\">category_theory.triangulated.basic</span>\n<span class=\"n\">category_theory.triangulated.pretriangulated</span>\n<span class=\"n\">category_theory.triangulated.rotate</span>\n<span class=\"n\">category_theory.triangulated.triangulated</span>\n<span class=\"n\">combinatorics.additive.e_transform</span>\n<span class=\"n\">combinatorics.additive.energy</span>\n<span class=\"n\">combinatorics.additive.pluennecke_ruzsa</span>\n<span class=\"n\">combinatorics.additive.ruzsa_covering</span>\n<span class=\"n\">combinatorics.catalan</span>\n<span class=\"n\">combinatorics.colex</span>\n<span class=\"n\">combinatorics.configuration</span>\n<span class=\"n\">combinatorics.double_counting</span>\n<span class=\"n\">combinatorics.hales_jewett</span>\n<span class=\"n\">combinatorics.hall.basic</span>\n<span class=\"n\">combinatorics.hall.finite</span>\n<span class=\"n\">combinatorics.hindman</span>\n<span class=\"n\">combinatorics.quiver.arborescence</span>\n<span class=\"n\">combinatorics.set_family.compression.down</span>\n<span class=\"n\">combinatorics.set_family.compression.uv</span>\n<span class=\"n\">combinatorics.set_family.harris_kleitman</span>\n<span class=\"n\">combinatorics.set_family.intersecting</span>\n<span class=\"n\">combinatorics.set_family.kleitman</span>\n<span class=\"n\">combinatorics.set_family.lym</span>\n<span class=\"n\">combinatorics.set_family.shadow</span>\n<span class=\"n\">combinatorics.simple_graph.acyclic</span>\n<span class=\"n\">combinatorics.simple_graph.adj_matrix</span>\n<span class=\"n\">combinatorics.simple_graph.clique</span>\n<span class=\"n\">combinatorics.simple_graph.coloring</span>\n<span class=\"n\">combinatorics.simple_graph.connectivity</span>\n<span class=\"n\">combinatorics.simple_graph.degree_sum</span>\n<span class=\"n\">combinatorics.simple_graph.ends.defs</span>\n<span class=\"n\">combinatorics.simple_graph.ends.properties</span>\n<span class=\"n\">combinatorics.simple_graph.finsubgraph</span>\n<span class=\"n\">combinatorics.simple_graph.hasse</span>\n<span class=\"n\">combinatorics.simple_graph.inc_matrix</span>\n<span class=\"n\">combinatorics.simple_graph.matching</span>\n<span class=\"n\">combinatorics.simple_graph.metric</span>\n<span class=\"n\">combinatorics.simple_graph.partition</span>\n<span class=\"n\">combinatorics.simple_graph.prod</span>\n<span class=\"n\">combinatorics.simple_graph.strongly_regular</span>\n<span class=\"n\">combinatorics.simple_graph.subgraph</span>\n<span class=\"n\">combinatorics.simple_graph.trails</span>\n<span class=\"n\">combinatorics.simple_graph.triangle.basic</span>\n<span class=\"n\">combinatorics.young.semistandard_tableau</span>\n<span class=\"n\">combinatorics.young.young_diagram</span>\n<span class=\"n\">computability.DFA</span>\n<span class=\"n\">computability.NFA</span>\n<span class=\"n\">computability.ackermann</span>\n<span class=\"n\">computability.epsilon_NFA</span>\n<span class=\"n\">computability.halting</span>\n<span class=\"n\">computability.language</span>\n<span class=\"n\">computability.partrec</span>\n<span class=\"n\">computability.partrec_code</span>\n<span class=\"n\">computability.primrec</span>\n<span class=\"n\">computability.reduce</span>\n<span class=\"n\">computability.regular_expressions</span>\n<span class=\"n\">computability.tm_computable</span>\n<span class=\"n\">computability.tm_to_partrec</span>\n<span class=\"n\">computability.turing_machine</span>\n<span class=\"n\">control.fix</span>\n<span class=\"n\">control.fold</span>\n<span class=\"n\">control.lawful_fix</span>\n<span class=\"n\">data.W.cardinal</span>\n<span class=\"n\">data.W.constructions</span>\n<span class=\"n\">data.analysis.filter</span>\n<span class=\"n\">data.analysis.topology</span>\n<span class=\"n\">data.bool.all_any</span>\n<span class=\"n\">data.bool.count</span>\n<span class=\"n\">data.complex.cardinality</span>\n<span class=\"n\">data.complex.determinant</span>\n<span class=\"n\">data.countable.small</span>\n<span class=\"n\">data.dfinsupp.interval</span>\n<span class=\"n\">data.dfinsupp.lex</span>\n<span class=\"n\">data.dfinsupp.multiset</span>\n<span class=\"n\">data.dfinsupp.ne_locus</span>\n<span class=\"n\">data.dfinsupp.order</span>\n<span class=\"n\">data.dfinsupp.well_founded</span>\n<span class=\"n\">data.dlist.instances</span>\n<span class=\"n\">data.erased</span>\n<span class=\"n\">data.fin.succ_pred</span>\n<span class=\"n\">data.fin.tuple.bubble_sort_induction</span>\n<span class=\"n\">data.fin.tuple.monotone</span>\n<span class=\"n\">data.fin.tuple.nat_antidiagonal</span>\n<span class=\"n\">data.fin.tuple.reflection</span>\n<span class=\"n\">data.fin.tuple.sort</span>\n<span class=\"n\">data.fin_enum</span>\n<span class=\"n\">data.finmap</span>\n<span class=\"n\">data.finset.functor</span>\n<span class=\"n\">data.finset.interval</span>\n<span class=\"n\">data.finset.pi_induction</span>\n<span class=\"n\">data.finset.pimage</span>\n<span class=\"n\">data.finset.slice</span>\n<span class=\"n\">data.finset.sups</span>\n<span class=\"n\">data.finset.sym</span>\n<span class=\"n\">data.finsupp.alist</span>\n<span class=\"n\">data.finsupp.big_operators</span>\n<span class=\"n\">data.finsupp.lex</span>\n<span class=\"n\">data.finsupp.ne_locus</span>\n<span class=\"n\">data.finsupp.pointwise</span>\n<span class=\"n\">data.finsupp.well_founded</span>\n<span class=\"n\">data.fintype.card_embedding</span>\n<span class=\"n\">data.fintype.small</span>\n<span class=\"n\">data.fp.basic</span>\n<span class=\"n\">data.fun_like.fintype</span>\n<span class=\"n\">data.holor</span>\n<span class=\"n\">data.int.conditionally_complete_order</span>\n<span class=\"n\">data.int.dvd.pow</span>\n<span class=\"n\">data.int.nat_prime</span>\n<span class=\"n\">data.list.alist</span>\n<span class=\"n\">data.list.destutter</span>\n<span class=\"n\">data.list.func</span>\n<span class=\"n\">data.list.intervals</span>\n<span class=\"n\">data.list.lemmas</span>\n<span class=\"n\">data.list.rdrop</span>\n<span class=\"n\">data.list.sections</span>\n<span class=\"n\">data.list.to_finsupp</span>\n<span class=\"n\">data.matrix.dual_number</span>\n<span class=\"n\">data.matrix.hadamard</span>\n<span class=\"n\">data.matrix.kronecker</span>\n<span class=\"n\">data.matrix.rank</span>\n<span class=\"n\">data.matrix.reflection</span>\n<span class=\"n\">data.multiset.fintype</span>\n<span class=\"n\">data.multiset.functor</span>\n<span class=\"n\">data.multiset.interval</span>\n<span class=\"n\">data.multiset.locally_finite</span>\n<span class=\"n\">data.multiset.sections</span>\n<span class=\"n\">data.mv_polynomial.comap</span>\n<span class=\"n\">data.mv_polynomial.division</span>\n<span class=\"n\">data.nat.choose.bounds</span>\n<span class=\"n\">data.nat.choose.multinomial</span>\n<span class=\"n\">data.nat.even_odd_rec</span>\n<span class=\"n\">data.nat.factorial.big_operators</span>\n<span class=\"n\">data.nat.factorial.double_factorial</span>\n<span class=\"n\">data.nat.hyperoperation</span>\n<span class=\"n\">data.nat.upto</span>\n<span class=\"n\">data.num.prime</span>\n<span class=\"n\">data.pfunctor.multivariate.W</span>\n<span class=\"n\">data.pi.interval</span>\n<span class=\"n\">data.pnat.factors</span>\n<span class=\"n\">data.pnat.find</span>\n<span class=\"n\">data.pnat.xgcd</span>\n<span class=\"n\">data.polynomial.laurent</span>\n<span class=\"n\">data.polynomial.partial_fractions</span>\n<span class=\"n\">data.psigma.order</span>\n<span class=\"n\">data.qpf.multivariate.constructions.comp</span>\n<span class=\"n\">data.qpf.multivariate.constructions.const</span>\n<span class=\"n\">data.qpf.multivariate.constructions.fix</span>\n<span class=\"n\">data.qpf.multivariate.constructions.prj</span>\n<span class=\"n\">data.qpf.multivariate.constructions.quot</span>\n<span class=\"n\">data.qpf.multivariate.constructions.sigma</span>\n<span class=\"n\">data.qpf.univariate.basic</span>\n<span class=\"n\">data.rat.nnrat</span>\n<span class=\"n\">data.real.enat_ennreal</span>\n<span class=\"n\">data.real.hyperreal</span>\n<span class=\"n\">data.semiquot</span>\n<span class=\"n\">data.seq.parallel</span>\n<span class=\"n\">data.seq.wseq</span>\n<span class=\"n\">data.set.enumerate</span>\n<span class=\"n\">data.set.intervals.ord_connected_component</span>\n<span class=\"n\">data.set.intervals.surj_on</span>\n<span class=\"n\">data.set.intervals.with_bot_top</span>\n<span class=\"n\">data.set.opposite</span>\n<span class=\"n\">data.set.sups</span>\n<span class=\"n\">data.setoid.partition</span>\n<span class=\"n\">data.sigma.interval</span>\n<span class=\"n\">data.sigma.lex</span>\n<span class=\"n\">data.sigma.order</span>\n<span class=\"n\">data.sum.interval</span>\n<span class=\"n\">data.sym.card</span>\n<span class=\"n\">data.two_pointing</span>\n<span class=\"n\">data.vector.mem</span>\n<span class=\"n\">data.vector.zip</span>\n<span class=\"n\">data.zmod.coprime</span>\n<span class=\"n\">data.zmod.parity</span>\n<span class=\"n\">deprecated.group</span>\n<span class=\"n\">deprecated.ring</span>\n<span class=\"n\">deprecated.subfield</span>\n<span class=\"n\">deprecated.subgroup</span>\n<span class=\"n\">deprecated.submonoid</span>\n<span class=\"n\">deprecated.subring</span>\n</code></pre></div>",
        "id": 360251328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684758082
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dynamics.circle.rotation_number.translation_number</span>\n<span class=\"n\">dynamics.flow</span>\n<span class=\"n\">dynamics.omega_limit</span>\n<span class=\"n\">group_theory.commensurable</span>\n<span class=\"n\">group_theory.commuting_probability</span>\n<span class=\"n\">group_theory.double_coset</span>\n<span class=\"n\">group_theory.eckmann_hilton</span>\n<span class=\"n\">group_theory.free_abelian_group_finsupp</span>\n<span class=\"n\">group_theory.free_product</span>\n<span class=\"n\">group_theory.group_action.embedding</span>\n<span class=\"n\">group_theory.group_action.option</span>\n<span class=\"n\">group_theory.group_action.sigma</span>\n<span class=\"n\">group_theory.group_action.sum</span>\n<span class=\"n\">group_theory.group_action.support</span>\n<span class=\"n\">group_theory.is_free_group</span>\n<span class=\"n\">group_theory.nielsen_schreier</span>\n<span class=\"n\">group_theory.perm.cycle.concrete</span>\n<span class=\"n\">group_theory.presented_group</span>\n<span class=\"n\">group_theory.semidirect_product</span>\n<span class=\"n\">group_theory.specific_groups.alternating</span>\n<span class=\"n\">group_theory.subgroup.saturated</span>\n<span class=\"n\">group_theory.subsemigroup.membership</span>\n<span class=\"n\">information_theory.hamming</span>\n<span class=\"n\">linear_algebra.affine_space.matrix</span>\n<span class=\"n\">linear_algebra.affine_space.pointwise</span>\n<span class=\"n\">linear_algebra.cross_product</span>\n<span class=\"n\">linear_algebra.free_algebra</span>\n<span class=\"n\">linear_algebra.lagrange</span>\n<span class=\"n\">linear_algebra.matrix.circulant</span>\n<span class=\"n\">linear_algebra.matrix.dot_product</span>\n<span class=\"n\">linear_algebra.matrix.finite_dimensional</span>\n<span class=\"n\">linear_algebra.matrix.invariant_basis_number</span>\n<span class=\"n\">linear_algebra.matrix.is_diag</span>\n<span class=\"n\">linear_algebra.matrix.orthogonal</span>\n<span class=\"n\">linear_algebra.multilinear.finite_dimensional</span>\n<span class=\"n\">linear_algebra.projective_space.basic</span>\n<span class=\"n\">linear_algebra.projective_space.independence</span>\n<span class=\"n\">linear_algebra.projective_space.subspace</span>\n<span class=\"n\">linear_algebra.tensor_product.matrix</span>\n<span class=\"n\">logic.equiv.embedding</span>\n<span class=\"n\">logic.hydra</span>\n<span class=\"n\">measure_theory.card_measurable_space</span>\n<span class=\"n\">measure_theory.decomposition.unsigned_hahn</span>\n<span class=\"n\">measure_theory.function.floor</span>\n<span class=\"n\">model_theory.definability</span>\n<span class=\"n\">model_theory.order</span>\n<span class=\"n\">number_theory.ADE_inequality</span>\n<span class=\"n\">number_theory.fermat4</span>\n<span class=\"n\">number_theory.frobenius_number</span>\n<span class=\"n\">number_theory.lucas_lehmer</span>\n<span class=\"n\">number_theory.lucas_primality</span>\n<span class=\"n\">number_theory.multiplicity</span>\n<span class=\"n\">number_theory.pythagorean_triples</span>\n<span class=\"n\">number_theory.zsqrtd.to_real</span>\n<span class=\"n\">order.category.Frm</span>\n<span class=\"n\">order.concept</span>\n<span class=\"n\">order.countable_dense_linear_order</span>\n<span class=\"n\">order.extension.linear</span>\n<span class=\"n\">order.extension.well</span>\n<span class=\"n\">order.filter.filter_product</span>\n<span class=\"n\">order.filter.modeq</span>\n<span class=\"n\">order.filter.partial</span>\n<span class=\"n\">order.grade</span>\n<span class=\"n\">order.height</span>\n<span class=\"n\">order.heyting.boundary</span>\n<span class=\"n\">order.heyting.regular</span>\n<span class=\"n\">order.ideal</span>\n<span class=\"n\">order.ord_continuous</span>\n<span class=\"n\">order.pfilter</span>\n<span class=\"n\">order.prime_ideal</span>\n<span class=\"n\">order.rel_iso.group</span>\n<span class=\"n\">order.semiconj_Sup</span>\n<span class=\"n\">order.succ_pred.interval_succ</span>\n<span class=\"n\">order.succ_pred.linear_locally_finite</span>\n<span class=\"n\">order.upper_lower.hom</span>\n<span class=\"n\">order.upper_lower.locally_finite</span>\n<span class=\"n\">probability.cond_count</span>\n<span class=\"n\">probability.conditional_probability</span>\n<span class=\"n\">representation_theory.maschke</span>\n<span class=\"n\">ring_theory.fintype</span>\n<span class=\"n\">ring_theory.flat</span>\n<span class=\"n\">ring_theory.ideal.associated_prime</span>\n<span class=\"n\">ring_theory.ideal.idempotent_fg</span>\n<span class=\"n\">ring_theory.ideal.minimal_prime</span>\n<span class=\"n\">ring_theory.mv_polynomial.homogeneous</span>\n<span class=\"n\">ring_theory.mv_polynomial.ideal</span>\n<span class=\"n\">ring_theory.mv_polynomial.weighted_homogeneous</span>\n<span class=\"n\">ring_theory.non_unital_subsemiring.basic</span>\n<span class=\"n\">ring_theory.ore_localization.basic</span>\n<span class=\"n\">ring_theory.ore_localization.ore_set</span>\n<span class=\"n\">ring_theory.polynomial.opposites</span>\n<span class=\"n\">ring_theory.ring_invo</span>\n<span class=\"n\">ring_theory.valuation.quotient</span>\n<span class=\"n\">ring_theory.zmod</span>\n<span class=\"n\">set_theory.lists</span>\n<span class=\"n\">set_theory.ordinal.cantor_normal_form</span>\n<span class=\"n\">set_theory.ordinal.topology</span>\n<span class=\"n\">set_theory.zfc.basic</span>\n<span class=\"n\">set_theory.zfc.ordinal</span>\n<span class=\"n\">topology.algebra.equicontinuity</span>\n<span class=\"n\">topology.algebra.localization</span>\n<span class=\"n\">topology.algebra.module.linear_pmap</span>\n<span class=\"n\">topology.algebra.nonarchimedean.adic_topology</span>\n<span class=\"n\">topology.algebra.order.filter</span>\n<span class=\"n\">topology.algebra.order.t5</span>\n<span class=\"n\">topology.algebra.order.upper_lower</span>\n<span class=\"n\">topology.algebra.semigroup</span>\n<span class=\"n\">topology.category.Born</span>\n<span class=\"n\">topology.category.CompHaus.projective</span>\n<span class=\"n\">topology.category.Locale</span>\n<span class=\"n\">topology.category.Profinite.as_limit</span>\n<span class=\"n\">topology.category.Profinite.projective</span>\n<span class=\"n\">topology.continuous_function.locally_constant</span>\n<span class=\"n\">topology.continuous_function.t0_sierpinski</span>\n<span class=\"n\">topology.covering</span>\n<span class=\"n\">topology.extremally_disconnected</span>\n<span class=\"n\">topology.filter</span>\n<span class=\"n\">topology.hom.open</span>\n<span class=\"n\">topology.is_locally_homeomorph</span>\n<span class=\"n\">topology.list</span>\n<span class=\"n\">topology.locally_constant.algebra</span>\n<span class=\"n\">topology.metric_space.infsep</span>\n<span class=\"n\">topology.metric_space.shrinking_lemma</span>\n<span class=\"n\">topology.omega_complete_partial_order</span>\n<span class=\"n\">topology.order.lower_topology</span>\n<span class=\"n\">topology.order.priestley</span>\n<span class=\"n\">topology.partial</span>\n<span class=\"n\">topology.sets.order</span>\n<span class=\"n\">topology.sheaves.abelian</span>\n<span class=\"n\">topology.uniform_space.absolute_value</span>\n<span class=\"n\">topology.uniform_space.compare_reals</span>\n</code></pre></div>",
        "id": 360251364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684758093
    },
    {
        "content": "<p>We need to write some CI, now.</p>\n<ol>\n<li>files on this list should have a different warning in their mathlib3 header, warning that any further changes to these files in mathlib3 will not be forwarded ported (i.e. will effectively be dropped completely), and that the mathlib4 files might already have been modified.</li>\n<li>probably CI should alert the author of any mathlib3 PR touching one of these files that they should reconsider. :-)</li>\n</ol>",
        "id": 360252108,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684758290
    },
    {
        "content": "<p>leanproject PR at <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/163\">https://github.com/leanprover-community/mathlib-tools/pull/163</a> (<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>?)</p>",
        "id": 360252713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684758452
    },
    {
        "content": "<p>This also has the effect that import refactors in mathlib3 are no longer allowed to add new imports of these files, as that would reconnect them to unported files</p>",
        "id": 360254683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684758939
    },
    {
        "content": "<p>(which I know at least one open mathlib3 PR does)</p>",
        "id": 360255103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684759037
    },
    {
        "content": "<p>Not just import refactors. <code>algebra.order.upper_lower</code> and <code>analysis.normed.order.upper_lower</code> were PRed as prerequisites to <code>measure_theory.order.upper_lower</code>, which hasn't made it yet to master (<a href=\"https://github.com/leanprover-community/mathlib/pull/16976\">#16976</a>).</p>",
        "id": 360262367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684760584
    },
    {
        "content": "<p>For that reason, I don't think the list you just sent is particularly meaningful, Scott.</p>",
        "id": 360262679,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684760653
    },
    {
        "content": "<p>I mean, we could also just not worry? It's a one-way process, marking a file as \"abandoned\", and it's happening to all of the files sooner or later. Why would it matter if we mark a mathlib3 file as abandoned, and then have to add an import to it so that it again depends on unported files? I'd be happy to look at the example you have in mind.</p>",
        "id": 360262715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684760662
    },
    {
        "content": "<p>A more meaningful measure would be \"files whose dependents are all ported, and no open PR to mathlib3 modifies them\". Then it would make more obvious that we should take care of the open PRs!</p>",
        "id": 360263078,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684760748
    },
    {
        "content": "<p>I think that has been obvious for a year now. :-)</p>",
        "id": 360263258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684760779
    },
    {
        "content": "<p>Unfortunately it's <em>much</em> harder to implement the \"and no open PR to mathlib3 modifies them\" condition. If you'd like to do it, that would be helpful.</p>",
        "id": 360263608,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684760868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, I'm sorry I don't understand your example above about <code>upper_lower</code>? (I haven't looked at the PR.) Could you explain which file on my list you think it would be problematic to mark as abandoned, and why?</p>",
        "id": 360264396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684761030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/360262715\">said</a>:</p>\n<blockquote>\n<p>Why would it matter if we mark a mathlib3 file as abandoned, and then have to add an import to it so that it again depends on unported files? I'd be happy to look at the example you have in mind.</p>\n</blockquote>\n<p>The example I'm thinking of is a <em>non</em>-abandoned file gaining an <code>import abandoned_file</code>, which results in the file not actually being abandoned after all</p>",
        "id": 360265811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684761352
    },
    {
        "content": "<p><code>algebra.order.upper_lower</code> and <code>analysis.normed.order.upper_lower</code> are in your list but won't be anymore once <a href=\"https://github.com/leanprover-community/mathlib/pull/16976\">#16976</a> is in. They're \"abandoned\" only because the sequence of PRs that leads to <code>measure_theory.order.upper_lower</code> hasn't fully entered mathlib yet.</p>",
        "id": 360268374,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684761915
    },
    {
        "content": "<p>Okay, but I don't really see what goes wrong? They no longer satisfy the proposed condition for adding the \"no backporting required\" / \"further changes may be lost\" labels, but they can still have those labels, right?</p>",
        "id": 360300627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684768054
    },
    {
        "content": "<p>Well then it sounds like applying those labels should be a human process rather than an automated one</p>",
        "id": 360301781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684768313
    },
    {
        "content": "<p>Things go wrong if:</p>\n<ul>\n<li><code>not_abandoned.lean</code> uses declarations from <code>abandoned.lean</code> that have been refactored and removed in mathlib4. Now porting <code>not_abandoned.lean</code> is a mess.</li>\n<li>A change to <code>not_abandoned.lean</code>necessitates a change to <code>abandoned.lean</code>, which now has to be forward-ported even though the label says \"changes don't have to be forward-ported\".</li>\n</ul>",
        "id": 360302321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684768426
    },
    {
        "content": "<p>I would prefer to just go ahead with Scott's automated solution, and instead figure out a way to use mathport on the open PRs that Yaël is concerned about.</p>",
        "id": 360308302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684769753
    },
    {
        "content": "<p>We're really entering the end game of the port now.</p>",
        "id": 360308554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684769783
    },
    {
        "content": "<p>We're still regularly making changes to mathlib3 in order to speed up or unblock part of the port; I worry that Scott's suggestion is going to make that harder</p>",
        "id": 360315984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684771501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/360302321\">said</a>:</p>\n<blockquote>\n<p>Things go wrong if:</p>\n<ul>\n<li><code>not_abandoned.lean</code> uses declarations from <code>abandoned.lean</code> that have been refactored and removed in mathlib4. Now porting <code>not_abandoned.lean</code> is a mess.</li>\n</ul>\n</blockquote>\n<p>This is impossible by definition of <em>abandoned</em>.</p>",
        "id": 360317878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684771934
    },
    {
        "content": "<p>Impossible in what way?</p>",
        "id": 360318007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684771965
    },
    {
        "content": "<blockquote>\n<p>probably CI should alert the author of any mathlib3 PR touching one of these files that they should reconsider</p>\n</blockquote>\n<p>This isn't sufficient to protect against the above; you would also need CI that says \"you are not allowed to write <code>import abandoned_file</code> in any other file\".</p>",
        "id": 360318172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684772009
    },
    {
        "content": "<p>RIght now it sounds like the definition of \"abandoned\" is:</p>\n<ul>\n<li>Determined to have no unported dependent files</li>\n</ul>\n<p>but the suggested implementation seems to give it the definition</p>\n<ul>\n<li>Determined to have had no unported dependent files at some point in the past</li>\n</ul>",
        "id": 360318454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684772083
    },
    {
        "content": "<p>Yeah, we should just guarantee that once a file is abandoned it stays abandoned.</p>",
        "id": 360319251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684772322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I merged your leanproject PR. Do you need a pypi release or are you happy to install from source?</p>",
        "id": 360320880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684772805
    },
    {
        "content": "<p>I'm fine with locking these files in mathlib3, but I'd say we need a way to port PRs first, otherwise that means that PRs touching these file will need to be ported by hand.</p>",
        "id": 360325101,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684773889
    },
    {
        "content": "<p>So what this means is that someone who is working on a file <code>new_stuff.lean</code> that imports:</p>\n<ul>\n<li><code>abandoned.lean</code></li>\n<li><code>150_files_away_from_being_ported.lean</code></li>\n</ul>\n<p>is unable to do anything with their work until the port is complete; they can't write it in Lean4, but they also can't PR it to mathlib3 as that breaks the proposed rule.</p>",
        "id": 360325176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684773911
    },
    {
        "content": "<p>I think there is definitely an <code>N</code> for which this is a good choice, but <code>150</code> seems rather high.</p>",
        "id": 360325325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684773958
    },
    {
        "content": "<p>I'm not sure where the \"you may not import abandoned files\" rule comes from. I am not proposing that. An author wanting to do that would have to be aware that <code>abandoned.lean</code> may well change by the time their file is being ported, and that they might have to take responsibility themselves for doing the port (which they might achieve by taking responsibility for backporting changes to the imported abandoned file). In particular that file would become \"optional\" for declaring the port complete, precisely because it was added \"too late\".</p>",
        "id": 360328047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684774621
    },
    {
        "content": "<p>The point of freely labelling files as \"abandoned\" is that we need to enable forward progress on mathlib4, and if that comes at the expense of progress on mathlib3, that's a very easy judgement to make! Several people have mentioned here at Banff that they would like to have this freedom when adding new material in mathlib4.</p>",
        "id": 360328835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684774827
    },
    {
        "content": "<p>How about this as the message for mathlib4 files:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">All of the mathlib3 dependents of this file have been ported to mathlib4 as of 2023-05-22.</span>\n<span class=\"cm\">You may make changes to this file and its dependents without needing to backport these changes to mathlib3.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>and this for mathlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">This file, and all of its downstream dependencies, were ported to mathlib4 as of 2023-05-22.</span>\n<span class=\"cm\">This file is thus \"abandoned\", and contributors may make changes in mathlib4</span>\n<span class=\"cm\">without these changes being backported to mathlib3.</span>\n\n<span class=\"cm\">Further, we are not planning on forward porting any further changes to this file,</span>\n<span class=\"cm\">and so additional changes to this file will be preserved in the deprecated mathlib3 repository</span>\n<span class=\"cm\">but otherwise lost.</span>\n\n<span class=\"cm\">If you would like to add any new files to mathlib3 which depend on this file</span>\n<span class=\"cm\">(or any \"abandoned\" file), then you should be aware that:</span>\n<span class=\"cm\">* it will be considered as optional for declaring the porting process complete</span>\n<span class=\"cm\">* as such the author takes responsibility for porting it themselves</span>\n<span class=\"cm\">* they need to be aware that the imported \"abandoned\" file may have changed in mathlib4</span>\n<span class=\"cm\">  in the meantime, and that they will need to make changes themselves to adapt to these changes.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 360330548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684775221
    },
    {
        "content": "<p>I'd prefer a different word than \"abandoned\", which I've only been using here for effect. :-)</p>",
        "id": 360332031,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684775613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/360325101\">said</a>:</p>\n<blockquote>\n<p>I'm fine with locking these files in mathlib3, but I'd say we need a way to port PRs first, otherwise that means that PRs touching these file will need to be ported by hand.</p>\n</blockquote>\n<p>Could someone with a PR all of whose dependencies are ported please try running mathport oneshot and report their experience? I think we <em>have</em> a way to port PRs, at least ones that don't modify existing files. The documentation is a disaster, but we need authors who want to use this to help us fix it.</p>",
        "id": 360333080,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684775892
    },
    {
        "content": "<p>I'm planning on updating the documentation to explain how to port projects depending on mathlib, but haven't got there yet!</p>",
        "id": 360333235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684775937
    },
    {
        "content": "<p>We should think carefully about whether it makes sense to include SHAs in these comments, since we forgot to do that last time in mathlib4 and it was occasionally painful.</p>",
        "id": 360336258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684776767
    },
    {
        "content": "<p>(but conversely, we also previously put PR numbers in the mathlib3 comments and that was also painful)</p>",
        "id": 360336346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684776798
    },
    {
        "content": "<p>Does \"downstream dependencies\" here include such dependencies in <code>archive</code>, <code>counterexamples</code> and <code>test</code> (the first two not yet ported at all; I'm not sure what tracking there is of the porting status of <code>test</code> as a whole or individual files therein)? (I'd guess that not much in <code>archive</code> or <code>counterexamples</code> depends on files listed here, however.)</p>",
        "id": 360406671,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1684805199
    },
    {
        "content": "<p>I think we're simply not tracking <code>test</code> at all. Hopefully tactic writing are looking through these to bring across suitable test cases. (I've found it useful to bring things across wholesale and leave them commented out even if an initial port of a tactic is not feature complete.)</p>",
        "id": 360527205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847458
    },
    {
        "content": "<p>I think we should consider files imported by unported files in<code>archive</code> and <code>counterexamples</code> as ineligible for being considered abandoned</p>",
        "id": 360527419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684847499
    },
    {
        "content": "<p>Because otherwise there's a big risk they rot, and the whole point of having those directories in mathlib was to prevent their contents rotting</p>",
        "id": 360527602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684847528
    },
    {
        "content": "<p>If that means we can't declare anything abandoned until we get mathport CI working on these directories, then I think that's a good thing</p>",
        "id": 360527831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684847586
    },
    {
        "content": "<p>Oh, I was about to say the opposite: to propose that \"the porting effort\" doesn't include <code>archive</code> and <code>counterexample</code>, and leave this up to individual authors. The goal had always been that in <code>archive</code> the \"generally useful results\" had to be put directly in mathlib.</p>",
        "id": 360527937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847609
    },
    {
        "content": "<p>Obviously it would be nice to have them.</p>",
        "id": 360528043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847631
    },
    {
        "content": "<p>That's currently wrong, at least.  Erdos-Szekeres is in <code>archive</code> even though it's generally useful in combinatorics.</p>",
        "id": 360528176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684847653
    },
    {
        "content": "<p>Yaël, your example should move out of <code>archive</code> if it's useful elsewhere.</p>",
        "id": 360528365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684847689
    },
    {
        "content": "<p>Hmm, that should be fixed asap? :-) If it's not up to standard, then perhaps when it is needed in mathlib someone can just revise it directly into Lean 4.</p>",
        "id": 360528439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847702
    },
    {
        "content": "<p>What about the freek 100 list?</p>",
        "id": 360528444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684847703
    },
    {
        "content": "<p>They just stay in mathlib3?</p>",
        "id": 360528525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847714
    },
    {
        "content": "<p>They don't serve any direct purpose beyond getting Lean on the list, and Freek is not going to take them off the list just because Lean 4 arrives?</p>",
        "id": 360528663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847742
    },
    {
        "content": "<p>That's... not how an archive works. You can't just throw it all away.</p>",
        "id": 360528671,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684847744
    },
    {
        "content": "<p>I mean, authors who would like them in mathlib4 can move them.</p>",
        "id": 360528712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847754
    },
    {
        "content": "<p>What concerns me is that the motivation for throwing them out seems to just be \"oh we haven't told mathport about them\"</p>",
        "id": 360528818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684847769
    },
    {
        "content": "<p>We're not planning on deleting mathlib3.</p>",
        "id": 360528851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/360527937\">said</a>:</p>\n<blockquote>\n<p>Oh, I was about to say the opposite: to propose that \"the porting effort\" doesn't include <code>archive</code> and <code>counterexample</code>, and leave this up to individual authors. The goal had always been that in <code>archive</code> the \"generally useful results\" had to be put directly in mathlib.</p>\n</blockquote>\n<p>Well the point of having them in mathlib was that they would be kept up to date with mathlib right? Otherwise they would have been in repos depending on (a specific version of) mathlib.</p>",
        "id": 360529033,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684847812
    },
    {
        "content": "<p>I mean yes, of course, if there is capacity to port them we can and should, but I'm proposing that nothing wait on them if that capacity is not there.</p>",
        "id": 360529041,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847814
    },
    {
        "content": "<p>Things in the archive precisely are usually written by newcomers, which might have left the community afterwards. So we can't just rely on authors to port their own work.</p>",
        "id": 360529069,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684847820
    },
    {
        "content": "<p>They will still be kept up to date with mathlib3. :-)</p>",
        "id": 360529148,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847834
    },
    {
        "content": "<blockquote>\n<p>if there is capacity to port them we can and should,</p>\n</blockquote>\n<p>I think we just need capacity from someone CI oriented (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?), and then the capacity to port them will appear automatically</p>",
        "id": 360529439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684847890
    },
    {
        "content": "<p>If no one can work out how to use mathport for <code>archives</code> and <code>counterexamples</code>, things aren't looking promising for other downstream lean3 projects.</p>",
        "id": 360529825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684847979
    },
    {
        "content": "<p>I mean yes, of course if someone would like to do this (I would like to do this!) and they find the time, we will bring <code>counterexample</code> and <code>archive</code> along. But I don't think we should stop everyone who is chafing at the bit to add to mathlib4 from doing so because of worries about ease of later porting <code>counterexample</code> and <code>archive</code>!</p>\n<p>Planning to \"officially\" port them comes at a distinct cost.</p>",
        "id": 360529863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684847988
    },
    {
        "content": "<p>After my talk today I will promise to look into doing more in mathport CI. :-) At least I will write up the instructions for porting projects.</p>",
        "id": 360530160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684848049
    },
    {
        "content": "<p>is there any examples of people who are waiting for permission to put new stuff in mathlib4? furthermore, is there any of those that desperately can't just put it in a new file? I don't really see why we should throw away a lot of good old work because \"we don't want to set up mathport CI\"; archive&amp;counterexample porting could also be a really good way to teach new people how to do porting</p>",
        "id": 360530540,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684848127
    },
    {
        "content": "<p>on the other hand, I can't see these modifications of mathlib4 that can't be done in lean3 likely to cause issues porting these files in the future, either...</p>",
        "id": 360530703,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684848168
    },
    {
        "content": "<p>I absolutely agree with Scott. Freek does not keep track of version numbers. If we solve other problems in Lean 4 he will just add it to the Lean list. Random Freek list questions are really a necessary part of mathlib. But people will be welcome to port them if they want.</p>",
        "id": 360530755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684848178
    },
    {
        "content": "<p>honestly, what I see most are people who really want to get their lean3 projects in before stuff freezes, not new lean4 projects</p>",
        "id": 360530780,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684848182
    },
    {
        "content": "<blockquote>\n<p>is there any examples of people who are waiting for permission to put new stuff in mathlib4? </p>\n</blockquote>\n<p>No. Everyone who has asked has been given permission. I have a PhD student developing Krull dimension theory of rings in mathlib4. What we have are examples of people who are using the port as an excuse to wait to PR a huge <code>for_mathlib</code> directory, but they are definitely not waiting for permission.</p>",
        "id": 360531167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684848274
    },
    {
        "content": "<p>I worry that those <code>for_mathlib</code> repos will rot forever if we keep not porting them, though...</p>",
        "id": 360531917,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684848440
    },
    {
        "content": "<p>Yes. But that is also not mathlib4's problem. <em>Mathlib4 is open for business</em>.</p>",
        "id": 360532034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684848468
    },
    {
        "content": "<p>I feel like throwing away good old work for the sake of getting the port done some iota faster is just a way to lose maths instead of gain any :/ I still don't see why new development can't just stay in new files, but I do understand that people here who have far more experience disagree</p>",
        "id": 360532402,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684848568
    },
    {
        "content": "<p>Jujian's development is being done in new files in mathlib4.</p>",
        "id": 360532473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684848590
    },
    {
        "content": "<p>What we are seeing in this thread is that some people care about what's in the archive folder. Why not letting <em>those</em> people do the work of porting this stuff? It's all about priorities. Porting the actual mathlib is the important thing, and non-important things should not hold it off. But people who want to work on less important things are still welcome to do so, that's always been the rule.</p>",
        "id": 360533312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684848788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, new development can't always stay in new files for the same reason as mathlib3 development can't stay in unported files. The tradeoff is between:</p>\n<ul>\n<li>Ask mathlib4 contributors to make all such changes to mathlib3 first, then forward-port them. Nothing in mathlib3 is thrown away, but for these files this is maybe 3x more work.</li>\n<li>Allow the changes to happen in mathlib4 (only). The file is now out of sync and all future work in mathlib3 in these files is thrown away.</li>\n</ul>",
        "id": 360533316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684848790
    },
    {
        "content": "<p>And my observation is that given the current rate of porting, the second option is only a few weeks away anyway, so feel free to debate between 1 and 2 but you're just postponing the inevitable.</p>",
        "id": 360534089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684848972
    },
    {
        "content": "<p>For what it's worth, I'm maintaining the stuff that I contributed to archive/imo in <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4\">https://github.com/dwrensha/math-puzzles-in-lean4</a></p>",
        "id": 360534277,
        "sender_full_name": "David Renshaw",
        "timestamp": 1684849017
    },
    {
        "content": "<p>I think something that would really ease this pain is an easy way to run mathport for ourselves - I'm currently trying it and it's not only taking a while, but there's issues too (see <a href=\"#narrow/stream/287929-mathlib4/topic/Mathport.20oneshot\">Floris' comments</a>, too, which I don't think have really changed - it also doesn't run <code>lake exe cache get</code>...</p>",
        "id": 360540391,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684850293
    },
    {
        "content": "<p>I'd love to do stuff like e.g. <a href=\"https://github.com/leanprover-community/mathlib/pull/18861\">#18861</a> in Mathlib4, but until I can easily port files like <a href=\"https://github.com/leanprover-community/mathlib/blob/little-wedderburn/src/ring_theory/little_wedderburn.lean\">https://github.com/leanprover-community/mathlib/blob/little-wedderburn/src/ring_theory/little_wedderburn.lean</a> to Lean4 (or at least roughly), I don't _have a choice_ but to put everything in Mathlib3</p>",
        "id": 360540745,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684850361
    },
    {
        "content": "<p>I know I'm speaking very personally here, but I have a feeling this is the same for a lot of people - if people could easily run <code>Mathport</code> on their projects, and deal with any fallout easily themselves, it seems far less daunting. The only way for us to get mathport output these days seems to just be \"PR it into mathlib3\", which then gets more and more demonised by the day...</p>",
        "id": 360541210,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684850438
    },
    {
        "content": "<p>Note that there should be a working gitpod container for <code>mathport</code> now; but it still takes a while to start up</p>",
        "id": 360541327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684850461
    },
    {
        "content": "<p>Is there instructions/documentation for that? I wasn't even aware of this</p>",
        "id": 360541493,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684850495
    },
    {
        "content": "<p>Eric you can still help with the port and then port your new file by hand.</p>",
        "id": 360541548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684850510
    },
    {
        "content": "<p>I'm happy to help with the port, and I have been when I can (I just had exams!)</p>",
        "id": 360541660,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684850527
    },
    {
        "content": "<p>I don't think there is much documentation on the gitpod setup. Go to <a href=\"http://gitpod.io/#https://github.com/leanprover-community/mathport\">http://gitpod.io/#https://github.com/leanprover-community/mathport</a> and you'll get a compatible version of ubuntu with the right dependencies installed. Then you follow the regular readme on how to actually use it</p>",
        "id": 360541829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684850569
    },
    {
        "content": "<p>I think that a lot of the fears expressed in this thread (and others before) will go away once we have a good documentation on how to port PR and everyone get convinced that \"porting a PR then merging it to mathlib4\" is not harder than \"rush the PR in mathlib3 then forward-port it\". For port-complete files, it is clear that the first one should be the right approach, but currently our whole infrastructure pushes towards the second.</p>",
        "id": 360573189,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684857113
    },
    {
        "content": "<p>Let me just say that I am strongly opposed to abandoning the archive or treating it as a second class citizen here. Things in <code>archive</code> and <code>counterexamples</code> should absolutely count against <code>--port-complete</code>, modulo implementation concerns, and they are part of the port. Like Patrick says, they are at the bottom of the importance hierarchy here, just like so many leaf files in mathlib, but it is absolutely not acceptable to just leave it behind. It's also not reasonable to expect the original authors to do the porting work, as they may have moved on (or worse). We are in no hurry to get the work done, but the port won't be done until those parts are ported.</p>",
        "id": 360594368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684862277
    },
    {
        "content": "<p>So I just had a look at running <code>mathport</code> on <code>archive</code> and <code>counterexamples</code>. It is a bit painful, mostly as it is hard to create a single lean file that imports them all.</p>\n<p>An easy fix for this would just be to move <code>archive</code> and <code>counterexamples</code> under <code>src</code>! This would also have the great advantage of making current mathport CI automatically include all the files.</p>\n<p>(We could of course plan to move them back out of the <code>Mathlib</code> directory later when the port is done.)</p>",
        "id": 360653811,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684882960
    },
    {
        "content": "<p>I like this, this is a simple solution that keeps everyone happy :) they may have to be clones as there's some CI that runs against archive/counterexamples iirc</p>",
        "id": 360653913,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684883022
    },
    {
        "content": "<p>this will also make the numbers smaller temporarily which is a shame</p>",
        "id": 360653933,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684883038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/360653811\">said</a>:</p>\n<blockquote>\n<p>So I just had a look at running <code>mathport</code> on <code>archive</code> and <code>counterexamples</code>. It is a bit painful, mostly as it is hard to create a single lean file that imports them all.</p>\n<p>An easy fix for this would just be to move <code>archive</code> and <code>counterexamples</code> under <code>src</code>! This would also have the great advantage of making current mathport CI automatically include all the files.</p>\n</blockquote>\n<p>How will that fix the \"hard to create a single lean file that imports them all\" problem? I think it would be better to have <code>archive</code> and <code>counterexamples</code> be separate lake packages also hosted in the mathlib repo, assuming we can solve the importing problem.</p>\n<p>We have two directions there: we could try to fix that by a mathlib3 refactor to wrap everything in namespaces, or we could adjust the lake package setup so that we don't assume a single file can import everything (which is a more advanced configuration but IIUC possible to do). For mathport, you can specify many top level roots by passing them on the command line via <code>xargs</code> or a script.</p>",
        "id": 360654802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684883546
    },
    {
        "content": "<p>The problem is just that in a Lean 3 project we can't import files outside of <code>src</code>.</p>",
        "id": 360654980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684883664
    },
    {
        "content": "<p>I'm trying this out on <a href=\"https://github.com/leanprover-community/mathlib/pull/19074\">#19074</a>.</p>",
        "id": 360655490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684883988
    },
    {
        "content": "<p>Namespacing for archive and counterexamples was done a few months ago to the extent required to be able to import all the files together, in order to generate documentation for them (<a href=\"https://github.com/leanprover-community/mathlib/pull/18388\">#18388</a>).</p>",
        "id": 360659086,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1684886356
    },
    {
        "content": "<p>Along with mathport CI to generate ported versions of archive and counterexamples, it would be good to get the mathlib4 CI set up for wherever those files are meant to end up in mathlib4 (which is probably a no-op if they go under <code>Mathlib/</code>, maybe more work if they go somewhere else in the mathlib4 repository) - as that CI seems important to have before ported versions of archive and counterexamples files start getting added, to make sure that the ports keep working after they are added. Having that CI in mathlib4 would also allow people to add new archive / counterexamples files to mathlib4 with no mathlib3 version, should anyone wish to do so at this stage, as well as allowing people to start adding ported files there. Thus the CI (which potentially unblocks other work) seems like it should be higher priority than the actual porting of existing files from archive / counterexamples (which nothing depends on).</p>",
        "id": 360659707,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1684886733
    },
    {
        "content": "<p>I have a branch in which I've consistently namespaced everything in <code>archive</code> and <code>counterexamples</code>. Let's wait on <a href=\"https://github.com/leanprover-community/mathlib/pull/19074\">#19074</a> to deploy it.</p>",
        "id": 360661677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684888013
    },
    {
        "content": "<p>The <code>leanproject port-complete</code> list has shrunk a bit, now counting dependencies via <code>archive</code> and <code>counterexamples</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra.algebra.unitization</span>\n<span class=\"n\">algebra.algebraic_card</span>\n<span class=\"n\">algebra.category.Group.injective</span>\n<span class=\"n\">algebra.category.Group.zero</span>\n<span class=\"n\">algebra.category.GroupWithZero</span>\n<span class=\"n\">algebra.category.Module.tannaka</span>\n<span class=\"n\">algebra.char_p.local_ring</span>\n<span class=\"n\">algebra.char_p.mixed_char_zero</span>\n<span class=\"n\">algebra.dual_quaternion</span>\n<span class=\"n\">algebra.field.power</span>\n<span class=\"n\">algebra.free_monoid.count</span>\n<span class=\"n\">algebra.gcd_monoid.div</span>\n<span class=\"n\">algebra.group.with_one.units</span>\n<span class=\"n\">algebra.hierarchy_design</span>\n<span class=\"n\">algebra.hom.centroid</span>\n<span class=\"n\">algebra.homology.augment</span>\n<span class=\"n\">algebra.homology.flip</span>\n<span class=\"n\">algebra.homology.functor</span>\n<span class=\"n\">algebra.module.bimodule</span>\n<span class=\"n\">algebra.module.injective</span>\n<span class=\"n\">algebra.module.pointwise_pi</span>\n<span class=\"n\">algebra.monoid_algebra.degree</span>\n<span class=\"n\">algebra.monoid_algebra.ideal</span>\n<span class=\"n\">algebra.monoid_algebra.no_zero_divisors</span>\n<span class=\"n\">algebra.monoid_algebra.to_direct_sum</span>\n<span class=\"n\">algebra.order.algebra</span>\n<span class=\"n\">algebra.order.field.pi</span>\n<span class=\"n\">algebra.order.group.densely_ordered</span>\n<span class=\"n\">algebra.order.group.prod</span>\n<span class=\"n\">algebra.order.monoid.to_mul_bot</span>\n<span class=\"n\">algebra.order.positive.field</span>\n<span class=\"n\">algebra.order.ring.cone</span>\n<span class=\"n\">algebra.order.sub.basic</span>\n<span class=\"n\">algebra.order.upper_lower</span>\n<span class=\"n\">algebra.quandle</span>\n<span class=\"n\">algebra.regular.pow</span>\n<span class=\"n\">algebra.ring.order_synonym</span>\n<span class=\"n\">algebra.star.chsh</span>\n<span class=\"n\">algebra.star.free</span>\n<span class=\"n\">algebra.tropical.basic</span>\n<span class=\"n\">algebra.tropical.big_operators</span>\n<span class=\"n\">algebra.tropical.lattice</span>\n<span class=\"n\">algebraic_topology.dold_kan.compatibility</span>\n<span class=\"n\">algebraic_topology.dold_kan.decomposition</span>\n<span class=\"n\">algebraic_topology.dold_kan.degeneracies</span>\n<span class=\"n\">algebraic_topology.dold_kan.equivalence_additive</span>\n<span class=\"n\">algebraic_topology.dold_kan.faces</span>\n<span class=\"n\">algebraic_topology.dold_kan.functor_gamma</span>\n<span class=\"n\">algebraic_topology.dold_kan.functor_n</span>\n<span class=\"n\">algebraic_topology.dold_kan.gamma_comp_n</span>\n<span class=\"n\">algebraic_topology.dold_kan.homotopies</span>\n<span class=\"n\">algebraic_topology.dold_kan.homotopy_equivalence</span>\n<span class=\"n\">algebraic_topology.dold_kan.n_comp_gamma</span>\n<span class=\"n\">algebraic_topology.dold_kan.n_reflects_iso</span>\n<span class=\"n\">algebraic_topology.dold_kan.normalized</span>\n<span class=\"n\">algebraic_topology.dold_kan.notations</span>\n<span class=\"n\">algebraic_topology.dold_kan.p_infty</span>\n<span class=\"n\">algebraic_topology.dold_kan.projections</span>\n<span class=\"n\">algebraic_topology.dold_kan.split_simplicial_object</span>\n<span class=\"n\">algebraic_topology.nerve</span>\n<span class=\"n\">algebraic_topology.split_simplicial_object</span>\n<span class=\"n\">analysis.complex.operator_norm</span>\n<span class=\"n\">analysis.convex.body</span>\n<span class=\"n\">analysis.convex.caratheodory</span>\n<span class=\"n\">analysis.convex.extrema</span>\n<span class=\"n\">analysis.convex.independent</span>\n<span class=\"n\">analysis.convex.join</span>\n<span class=\"n\">analysis.convex.quasiconvex</span>\n<span class=\"n\">analysis.convex.simplicial_complex.basic</span>\n<span class=\"n\">analysis.convex.stone_separation</span>\n<span class=\"n\">analysis.hofer</span>\n<span class=\"n\">analysis.locally_convex.continuous_of_bounded</span>\n<span class=\"n\">analysis.locally_convex.strong_topology</span>\n<span class=\"n\">analysis.normed.group.controlled_closure</span>\n<span class=\"n\">analysis.normed.order.upper_lower</span>\n<span class=\"n\">analysis.normed.ring.seminorm</span>\n<span class=\"n\">analysis.normed_space.M_structure</span>\n<span class=\"n\">analysis.normed_space.banach_steinhaus</span>\n<span class=\"n\">analysis.normed_space.compact_operator</span>\n<span class=\"n\">analysis.normed_space.int</span>\n<span class=\"n\">analysis.normed_space.mazur_ulam</span>\n<span class=\"n\">analysis.special_functions.log.monotone</span>\n<span class=\"n\">analysis.special_functions.polynomials</span>\n<span class=\"n\">analysis.special_functions.trigonometric.chebyshev</span>\n<span class=\"n\">analysis.subadditive</span>\n<span class=\"n\">category_theory.abelian.generator</span>\n<span class=\"n\">category_theory.abelian.subobject</span>\n<span class=\"n\">category_theory.action</span>\n<span class=\"n\">category_theory.adjunction.adjoint_functor_theorems</span>\n<span class=\"n\">category_theory.adjunction.over</span>\n<span class=\"n\">category_theory.adjunction.whiskering</span>\n<span class=\"n\">category_theory.category.Cat.limit</span>\n<span class=\"n\">category_theory.category.Quiv</span>\n<span class=\"n\">category_theory.category.Rel</span>\n<span class=\"n\">category_theory.category.Twop</span>\n<span class=\"n\">category_theory.category.galois_connection</span>\n<span class=\"n\">category_theory.cofiltered_system</span>\n<span class=\"n\">category_theory.connected_components</span>\n<span class=\"n\">category_theory.core</span>\n<span class=\"n\">category_theory.endofunctor.algebra</span>\n<span class=\"n\">category_theory.generator</span>\n<span class=\"n\">category_theory.grothendieck</span>\n<span class=\"n\">category_theory.groupoid.free_groupoid</span>\n<span class=\"n\">category_theory.idempotents.biproducts</span>\n<span class=\"n\">category_theory.idempotents.functor_extension</span>\n<span class=\"n\">category_theory.idempotents.homological_complex</span>\n<span class=\"n\">category_theory.idempotents.karoubi_karoubi</span>\n<span class=\"n\">category_theory.idempotents.simplicial_object</span>\n<span class=\"n\">category_theory.limits.constructions.filtered</span>\n<span class=\"n\">category_theory.limits.constructions.weakly_initial</span>\n<span class=\"n\">category_theory.limits.essentially_small</span>\n<span class=\"n\">category_theory.limits.full_subcategory</span>\n<span class=\"n\">category_theory.limits.mono_coprod</span>\n<span class=\"n\">category_theory.limits.pi</span>\n<span class=\"n\">category_theory.limits.preserves.opposites</span>\n<span class=\"n\">category_theory.limits.shapes.disjoint_coproduct</span>\n<span class=\"n\">category_theory.limits.shapes.wide_equalizers</span>\n<span class=\"n\">category_theory.limits.small_complete</span>\n<span class=\"n\">category_theory.localization.construction</span>\n<span class=\"n\">category_theory.localization.opposite</span>\n<span class=\"n\">category_theory.localization.predicate</span>\n<span class=\"n\">category_theory.monad.products</span>\n<span class=\"n\">category_theory.monoidal.tor</span>\n<span class=\"n\">category_theory.noetherian</span>\n<span class=\"n\">category_theory.preadditive.eilenberg_moore</span>\n<span class=\"n\">category_theory.preadditive.endo_functor</span>\n<span class=\"n\">category_theory.preadditive.generator</span>\n<span class=\"n\">category_theory.preadditive.hom_orthogonal</span>\n<span class=\"n\">category_theory.preadditive.of_biproducts</span>\n<span class=\"n\">category_theory.products.associator</span>\n<span class=\"n\">category_theory.sigma.basic</span>\n<span class=\"n\">category_theory.sites.adjunction</span>\n<span class=\"n\">category_theory.sites.induced_topology</span>\n<span class=\"n\">category_theory.subobject.comma</span>\n<span class=\"n\">category_theory.subobject.types</span>\n<span class=\"n\">category_theory.sums.associator</span>\n<span class=\"n\">category_theory.sums.basic</span>\n<span class=\"n\">category_theory.triangulated.basic</span>\n<span class=\"n\">category_theory.triangulated.pretriangulated</span>\n<span class=\"n\">category_theory.triangulated.rotate</span>\n<span class=\"n\">category_theory.triangulated.triangulated</span>\n<span class=\"n\">combinatorics.additive.e_transform</span>\n<span class=\"n\">combinatorics.additive.energy</span>\n<span class=\"n\">combinatorics.additive.pluennecke_ruzsa</span>\n<span class=\"n\">combinatorics.additive.ruzsa_covering</span>\n<span class=\"n\">combinatorics.catalan</span>\n<span class=\"n\">combinatorics.colex</span>\n<span class=\"n\">combinatorics.configuration</span>\n<span class=\"n\">combinatorics.double_counting</span>\n<span class=\"n\">combinatorics.hales_jewett</span>\n<span class=\"n\">combinatorics.hall.basic</span>\n<span class=\"n\">combinatorics.hall.finite</span>\n<span class=\"n\">combinatorics.hindman</span>\n<span class=\"n\">combinatorics.quiver.arborescence</span>\n<span class=\"n\">combinatorics.set_family.compression.down</span>\n<span class=\"n\">combinatorics.set_family.compression.uv</span>\n<span class=\"n\">combinatorics.set_family.harris_kleitman</span>\n<span class=\"n\">combinatorics.set_family.intersecting</span>\n<span class=\"n\">combinatorics.set_family.kleitman</span>\n<span class=\"n\">combinatorics.set_family.lym</span>\n<span class=\"n\">combinatorics.set_family.shadow</span>\n<span class=\"n\">combinatorics.simple_graph.acyclic</span>\n<span class=\"n\">combinatorics.simple_graph.clique</span>\n<span class=\"n\">combinatorics.simple_graph.coloring</span>\n<span class=\"n\">combinatorics.simple_graph.degree_sum</span>\n<span class=\"n\">combinatorics.simple_graph.ends.defs</span>\n<span class=\"n\">combinatorics.simple_graph.ends.properties</span>\n<span class=\"n\">combinatorics.simple_graph.finsubgraph</span>\n<span class=\"n\">combinatorics.simple_graph.hasse</span>\n<span class=\"n\">combinatorics.simple_graph.inc_matrix</span>\n<span class=\"n\">combinatorics.simple_graph.matching</span>\n<span class=\"n\">combinatorics.simple_graph.metric</span>\n<span class=\"n\">combinatorics.simple_graph.partition</span>\n<span class=\"n\">combinatorics.simple_graph.prod</span>\n<span class=\"n\">combinatorics.simple_graph.strongly_regular</span>\n<span class=\"n\">combinatorics.simple_graph.triangle.basic</span>\n<span class=\"n\">combinatorics.young.semistandard_tableau</span>\n<span class=\"n\">combinatorics.young.young_diagram</span>\n<span class=\"n\">computability.DFA</span>\n<span class=\"n\">computability.NFA</span>\n<span class=\"n\">computability.ackermann</span>\n<span class=\"n\">computability.epsilon_NFA</span>\n<span class=\"n\">computability.halting</span>\n<span class=\"n\">computability.language</span>\n<span class=\"n\">computability.partrec</span>\n<span class=\"n\">computability.partrec_code</span>\n<span class=\"n\">computability.primrec</span>\n<span class=\"n\">computability.reduce</span>\n<span class=\"n\">computability.regular_expressions</span>\n<span class=\"n\">computability.tm_computable</span>\n<span class=\"n\">computability.tm_to_partrec</span>\n<span class=\"n\">computability.turing_machine</span>\n<span class=\"n\">control.fix</span>\n<span class=\"n\">control.fold</span>\n<span class=\"n\">control.lawful_fix</span>\n<span class=\"n\">data.W.cardinal</span>\n<span class=\"n\">data.W.constructions</span>\n<span class=\"n\">data.analysis.filter</span>\n<span class=\"n\">data.analysis.topology</span>\n<span class=\"n\">data.bool.all_any</span>\n<span class=\"n\">data.bool.count</span>\n<span class=\"n\">data.complex.cardinality</span>\n<span class=\"n\">data.complex.determinant</span>\n<span class=\"n\">data.countable.small</span>\n<span class=\"n\">data.dfinsupp.interval</span>\n<span class=\"n\">data.dfinsupp.multiset</span>\n<span class=\"n\">data.dfinsupp.well_founded</span>\n<span class=\"n\">data.dlist.instances</span>\n<span class=\"n\">data.erased</span>\n<span class=\"n\">data.fin.succ_pred</span>\n<span class=\"n\">data.fin.tuple.bubble_sort_induction</span>\n<span class=\"n\">data.fin.tuple.monotone</span>\n<span class=\"n\">data.fin.tuple.reflection</span>\n<span class=\"n\">data.fin.tuple.sort</span>\n<span class=\"n\">data.fin_enum</span>\n<span class=\"n\">data.finmap</span>\n<span class=\"n\">data.finset.functor</span>\n<span class=\"n\">data.finset.interval</span>\n<span class=\"n\">data.finset.pi_induction</span>\n<span class=\"n\">data.finset.pimage</span>\n<span class=\"n\">data.finset.slice</span>\n<span class=\"n\">data.finset.sups</span>\n<span class=\"n\">data.finset.sym</span>\n<span class=\"n\">data.finsupp.alist</span>\n<span class=\"n\">data.finsupp.big_operators</span>\n<span class=\"n\">data.finsupp.ne_locus</span>\n<span class=\"n\">data.finsupp.pointwise</span>\n<span class=\"n\">data.finsupp.well_founded</span>\n<span class=\"n\">data.fintype.small</span>\n<span class=\"n\">data.fp.basic</span>\n<span class=\"n\">data.fun_like.fintype</span>\n<span class=\"n\">data.holor</span>\n<span class=\"n\">data.int.conditionally_complete_order</span>\n<span class=\"n\">data.int.dvd.pow</span>\n<span class=\"n\">data.list.alist</span>\n<span class=\"n\">data.list.destutter</span>\n<span class=\"n\">data.list.func</span>\n<span class=\"n\">data.list.intervals</span>\n<span class=\"n\">data.list.lemmas</span>\n<span class=\"n\">data.list.rdrop</span>\n<span class=\"n\">data.list.sections</span>\n<span class=\"n\">data.list.to_finsupp</span>\n<span class=\"n\">data.matrix.dual_number</span>\n<span class=\"n\">data.matrix.hadamard</span>\n<span class=\"n\">data.matrix.kronecker</span>\n<span class=\"n\">data.matrix.rank</span>\n<span class=\"n\">data.matrix.reflection</span>\n<span class=\"n\">data.multiset.fintype</span>\n<span class=\"n\">data.multiset.functor</span>\n<span class=\"n\">data.multiset.interval</span>\n<span class=\"n\">data.multiset.locally_finite</span>\n<span class=\"n\">data.multiset.sections</span>\n<span class=\"n\">data.mv_polynomial.comap</span>\n<span class=\"n\">data.mv_polynomial.division</span>\n<span class=\"n\">data.nat.choose.bounds</span>\n<span class=\"n\">data.nat.choose.multinomial</span>\n<span class=\"n\">data.nat.even_odd_rec</span>\n<span class=\"n\">data.nat.factorial.big_operators</span>\n<span class=\"n\">data.nat.factorial.double_factorial</span>\n<span class=\"n\">data.nat.hyperoperation</span>\n<span class=\"n\">data.nat.upto</span>\n<span class=\"n\">data.num.prime</span>\n<span class=\"n\">data.pfunctor.multivariate.W</span>\n<span class=\"n\">data.pi.interval</span>\n<span class=\"n\">data.pnat.factors</span>\n<span class=\"n\">data.pnat.find</span>\n<span class=\"n\">data.pnat.xgcd</span>\n<span class=\"n\">data.polynomial.laurent</span>\n<span class=\"n\">data.polynomial.partial_fractions</span>\n<span class=\"n\">data.psigma.order</span>\n<span class=\"n\">data.qpf.multivariate.constructions.comp</span>\n<span class=\"n\">data.qpf.multivariate.constructions.const</span>\n<span class=\"n\">data.qpf.multivariate.constructions.fix</span>\n<span class=\"n\">data.qpf.multivariate.constructions.prj</span>\n<span class=\"n\">data.qpf.multivariate.constructions.quot</span>\n<span class=\"n\">data.qpf.multivariate.constructions.sigma</span>\n<span class=\"n\">data.qpf.univariate.basic</span>\n<span class=\"n\">data.rat.nnrat</span>\n<span class=\"n\">data.real.enat_ennreal</span>\n<span class=\"n\">data.real.hyperreal</span>\n<span class=\"n\">data.semiquot</span>\n<span class=\"n\">data.seq.parallel</span>\n<span class=\"n\">data.seq.wseq</span>\n<span class=\"n\">data.set.enumerate</span>\n<span class=\"n\">data.set.intervals.ord_connected_component</span>\n<span class=\"n\">data.set.intervals.surj_on</span>\n<span class=\"n\">data.set.intervals.with_bot_top</span>\n<span class=\"n\">data.set.opposite</span>\n<span class=\"n\">data.set.sups</span>\n<span class=\"n\">data.setoid.partition</span>\n<span class=\"n\">data.sigma.interval</span>\n<span class=\"n\">data.sigma.lex</span>\n<span class=\"n\">data.sigma.order</span>\n<span class=\"n\">data.sum.interval</span>\n<span class=\"n\">data.sym.card</span>\n<span class=\"n\">data.two_pointing</span>\n<span class=\"n\">data.vector.mem</span>\n<span class=\"n\">data.vector.zip</span>\n<span class=\"n\">data.zmod.coprime</span>\n<span class=\"n\">data.zmod.parity</span>\n<span class=\"n\">deprecated.group</span>\n<span class=\"n\">deprecated.ring</span>\n<span class=\"n\">deprecated.subfield</span>\n<span class=\"n\">deprecated.subgroup</span>\n<span class=\"n\">deprecated.submonoid</span>\n<span class=\"n\">deprecated.subring</span>\n</code></pre></div>",
        "id": 360663491,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684889033
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dynamics.circle.rotation_number.translation_number</span>\n<span class=\"n\">dynamics.ergodic.conservative</span>\n<span class=\"n\">dynamics.flow</span>\n<span class=\"n\">dynamics.omega_limit</span>\n<span class=\"n\">field_theory.ax_grothendieck</span>\n<span class=\"n\">group_theory.commensurable</span>\n<span class=\"n\">group_theory.commuting_probability</span>\n<span class=\"n\">group_theory.double_coset</span>\n<span class=\"n\">group_theory.eckmann_hilton</span>\n<span class=\"n\">group_theory.free_abelian_group_finsupp</span>\n<span class=\"n\">group_theory.free_product</span>\n<span class=\"n\">group_theory.group_action.embedding</span>\n<span class=\"n\">group_theory.group_action.option</span>\n<span class=\"n\">group_theory.group_action.sigma</span>\n<span class=\"n\">group_theory.group_action.sum</span>\n<span class=\"n\">group_theory.group_action.support</span>\n<span class=\"n\">group_theory.is_free_group</span>\n<span class=\"n\">group_theory.nielsen_schreier</span>\n<span class=\"n\">group_theory.perm.cycle.concrete</span>\n<span class=\"n\">group_theory.presented_group</span>\n<span class=\"n\">group_theory.semidirect_product</span>\n<span class=\"n\">group_theory.specific_groups.alternating</span>\n<span class=\"n\">group_theory.subgroup.saturated</span>\n<span class=\"n\">group_theory.subsemigroup.membership</span>\n<span class=\"n\">information_theory.hamming</span>\n<span class=\"n\">linear_algebra.affine_space.matrix</span>\n<span class=\"n\">linear_algebra.affine_space.pointwise</span>\n<span class=\"n\">linear_algebra.annihilating_polynomial</span>\n<span class=\"n\">linear_algebra.bilinear_form.tensor_product</span>\n<span class=\"n\">linear_algebra.cross_product</span>\n<span class=\"n\">linear_algebra.free_algebra</span>\n<span class=\"n\">linear_algebra.lagrange</span>\n<span class=\"n\">linear_algebra.matrix.circulant</span>\n<span class=\"n\">linear_algebra.matrix.dot_product</span>\n<span class=\"n\">linear_algebra.matrix.dual</span>\n<span class=\"n\">linear_algebra.matrix.finite_dimensional</span>\n<span class=\"n\">linear_algebra.matrix.invariant_basis_number</span>\n<span class=\"n\">linear_algebra.matrix.is_diag</span>\n<span class=\"n\">linear_algebra.matrix.orthogonal</span>\n<span class=\"n\">linear_algebra.multilinear.finite_dimensional</span>\n<span class=\"n\">linear_algebra.projective_space.basic</span>\n<span class=\"n\">linear_algebra.projective_space.independence</span>\n<span class=\"n\">linear_algebra.projective_space.subspace</span>\n<span class=\"n\">linear_algebra.tensor_product.matrix</span>\n<span class=\"n\">logic.hydra</span>\n<span class=\"n\">measure_theory.card_measurable_space</span>\n<span class=\"n\">measure_theory.decomposition.unsigned_hahn</span>\n<span class=\"n\">measure_theory.function.floor</span>\n<span class=\"n\">measure_theory.function.special_functions.is_R_or_C</span>\n<span class=\"n\">measure_theory.integral.lebesgue_normed_space</span>\n<span class=\"n\">measure_theory.integral.riesz_markov_kakutani</span>\n<span class=\"n\">model_theory.definability</span>\n<span class=\"n\">model_theory.order</span>\n<span class=\"n\">number_theory.ADE_inequality</span>\n<span class=\"n\">number_theory.fermat4</span>\n<span class=\"n\">number_theory.frobenius_number</span>\n<span class=\"n\">number_theory.lucas_primality</span>\n<span class=\"n\">number_theory.multiplicity</span>\n<span class=\"n\">number_theory.pythagorean_triples</span>\n<span class=\"n\">number_theory.zsqrtd.to_real</span>\n<span class=\"n\">order.category.Frm</span>\n<span class=\"n\">order.concept</span>\n<span class=\"n\">order.countable_dense_linear_order</span>\n<span class=\"n\">order.extension.linear</span>\n<span class=\"n\">order.extension.well</span>\n<span class=\"n\">order.filter.filter_product</span>\n<span class=\"n\">order.filter.modeq</span>\n<span class=\"n\">order.filter.partial</span>\n<span class=\"n\">order.grade</span>\n<span class=\"n\">order.height</span>\n<span class=\"n\">order.heyting.boundary</span>\n<span class=\"n\">order.heyting.regular</span>\n<span class=\"n\">order.ideal</span>\n<span class=\"n\">order.ord_continuous</span>\n<span class=\"n\">order.pfilter</span>\n<span class=\"n\">order.prime_ideal</span>\n<span class=\"n\">order.rel_iso.group</span>\n<span class=\"n\">order.semiconj_Sup</span>\n<span class=\"n\">order.succ_pred.interval_succ</span>\n<span class=\"n\">order.succ_pred.linear_locally_finite</span>\n<span class=\"n\">order.upper_lower.hom</span>\n<span class=\"n\">order.upper_lower.locally_finite</span>\n<span class=\"n\">representation_theory.maschke</span>\n<span class=\"n\">ring_theory.flat</span>\n<span class=\"n\">ring_theory.henselian</span>\n<span class=\"n\">ring_theory.ideal.associated_prime</span>\n<span class=\"n\">ring_theory.ideal.idempotent_fg</span>\n<span class=\"n\">ring_theory.ideal.minimal_prime</span>\n<span class=\"n\">ring_theory.mv_polynomial.homogeneous</span>\n<span class=\"n\">ring_theory.mv_polynomial.ideal</span>\n<span class=\"n\">ring_theory.mv_polynomial.weighted_homogeneous</span>\n<span class=\"n\">ring_theory.non_unital_subsemiring.basic</span>\n<span class=\"n\">ring_theory.ore_localization.basic</span>\n<span class=\"n\">ring_theory.ore_localization.ore_set</span>\n<span class=\"n\">ring_theory.polynomial.opposites</span>\n<span class=\"n\">ring_theory.ring_invo</span>\n<span class=\"n\">ring_theory.valuation.quotient</span>\n<span class=\"n\">ring_theory.zmod</span>\n<span class=\"n\">set_theory.lists</span>\n<span class=\"n\">set_theory.ordinal.cantor_normal_form</span>\n<span class=\"n\">set_theory.ordinal.topology</span>\n<span class=\"n\">set_theory.zfc.basic</span>\n<span class=\"n\">set_theory.zfc.ordinal</span>\n<span class=\"n\">topology.algebra.equicontinuity</span>\n<span class=\"n\">topology.algebra.localization</span>\n<span class=\"n\">topology.algebra.module.linear_pmap</span>\n<span class=\"n\">topology.algebra.nonarchimedean.adic_topology</span>\n<span class=\"n\">topology.algebra.order.filter</span>\n<span class=\"n\">topology.algebra.order.t5</span>\n<span class=\"n\">topology.algebra.order.upper_lower</span>\n<span class=\"n\">topology.algebra.semigroup</span>\n<span class=\"n\">topology.category.Born</span>\n<span class=\"n\">topology.category.CompHaus.projective</span>\n<span class=\"n\">topology.category.Locale</span>\n<span class=\"n\">topology.category.Profinite.as_limit</span>\n<span class=\"n\">topology.category.Profinite.projective</span>\n<span class=\"n\">topology.continuous_function.locally_constant</span>\n<span class=\"n\">topology.continuous_function.t0_sierpinski</span>\n<span class=\"n\">topology.covering</span>\n<span class=\"n\">topology.extremally_disconnected</span>\n<span class=\"n\">topology.filter</span>\n<span class=\"n\">topology.hom.open</span>\n<span class=\"n\">topology.is_locally_homeomorph</span>\n<span class=\"n\">topology.list</span>\n<span class=\"n\">topology.locally_constant.algebra</span>\n<span class=\"n\">topology.metric_space.infsep</span>\n<span class=\"n\">topology.metric_space.shrinking_lemma</span>\n<span class=\"n\">topology.omega_complete_partial_order</span>\n<span class=\"n\">topology.order.lower_topology</span>\n<span class=\"n\">topology.order.priestley</span>\n<span class=\"n\">topology.partial</span>\n<span class=\"n\">topology.sets.order</span>\n<span class=\"n\">topology.sheaves.abelian</span>\n<span class=\"n\">topology.uniform_space.absolute_value</span>\n<span class=\"n\">topology.uniform_space.compare_reals</span>\n</code></pre></div>",
        "id": 360663543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684889044
    },
    {
        "content": "<p>Oh! Actually, it made essentially no difference. The list is 5 items shorter now. :-)</p>",
        "id": 360663691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684889124
    },
    {
        "content": "<p>what do we have to do to get it in the port-progress output?</p>",
        "id": 360664682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684889617
    },
    {
        "content": "<p>Sorry, to get what in the port-progress output? The bot that posts daily in the port-progress thread runs on my machine, I can update it to add something.</p>",
        "id": 360666009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684890255
    },
    {
        "content": "<p>This output comes from the <code>master</code> branch of <code>mathlib-tools</code> (i.e. with <code>pip install .</code>), and then <code>leanproject port-complete</code>.</p>",
        "id": 360666060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684890291
    },
    {
        "content": "<p>to list that N/M files are port-complete along with the other stats</p>",
        "id": 360666786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684890615
    },
    {
        "content": "<p>where <code>N</code> is the length of the list you just posted above and <code>M</code> is the maximum size that list could get (which is probably the number of files)</p>",
        "id": 360666847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684890655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/360653811\">said</a>:</p>\n<blockquote>\n<p>So I just had a look at running <code>mathport</code> on <code>archive</code> and <code>counterexamples</code>. It is a bit painful, mostly as it is hard to create a single lean file that imports them all.<br>\n</p>\n</blockquote>\n<p>I'm confused by this claim, <code>leanproject mk-all</code> can do it.</p>",
        "id": 360682563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684901118
    },
    {
        "content": "<p>ah -- mathport can't handle relative imports</p>",
        "id": 360863933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684952224
    },
    {
        "content": "<p>What uses relative imports?</p>",
        "id": 360882304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684957295
    },
    {
        "content": "<p>Ah, I see, I was trying to use <code>scripts/mk_all.sh</code>, which claims to work with non-default directories, but gives you files with relative imports when run on <code>archive</code> and <code>counterexample</code>. I'll try again with <code>leanproject mk-all</code> at some point.</p>",
        "id": 360918826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684974839
    },
    {
        "content": "<p>It does look like some of the archive files themselves contain relative imports, but that would be an easy thing to fix</p>",
        "id": 360922909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684978368
    },
    {
        "content": "<p>I will look into making mathport support relative imports</p>",
        "id": 360924447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684979917
    },
    {
        "content": "<p>Isn't that a lot of effort for a little bit of gain? Why can't we just go along with Scott's PR. We just take the following steps.</p>\n<ol>\n<li>Move <code>archive</code> and <code>counterexamples</code> into src</li>\n<li>They are picked up immediately by all our tooling. We don't have to change mathport and we don't have to worry about other edge cases.</li>\n<li>They are ported to Lean 4 as part of the regular process.</li>\n<li>In a few months time, we move them out of the <code>Mathlib</code> directory, and make them standalone packages.</li>\n</ol>",
        "id": 361040867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685016503
    },
    {
        "content": "<p>I am very concerned about controlling the size of the <code>Mathlib</code> package. It is a multiplier on many things</p>",
        "id": 361050258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685018469
    },
    {
        "content": "<p>in both lean 3 and lean 4</p>",
        "id": 361050352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685018492
    },
    {
        "content": "<p>Everything we need to do to make this work either needs to be done eventually anyway or is relevant to things other than just those two projects. For example relative imports are not just used by the archive, several third party projects use relative imports</p>",
        "id": 361051120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685018682
    },
    {
        "content": "<p>We managed to get pretty far without addressing some things because mathlib is fairly homogeneous style-wise but once we start branching out we will need to handle more unusual lean setups and syntax</p>",
        "id": 361051400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685018759
    },
    {
        "content": "<p>again, are we going to do the same thing for LTE? sphere eversion? MIL? The mathlib PRs? There are plenty of other projects out there, we can't put it all in mathlib so we have to deal with this situation eventually.</p>",
        "id": 361052269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685018937
    },
    {
        "content": "<p>But isn't moving <code>archive</code> and <code>counterexamples</code> out of <code>src</code> (i.e. undoing the proposed changes sometime in the future) pretty simple? Moving back could happen as soon as the mathport work is complete, with the advantage of extra parallelism in the meantime.</p>",
        "id": 361054592,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1685019515
    },
    {
        "content": "<p>There's some Ci that runs against that sort of stuff so all of that has to get changed</p>",
        "id": 361055470,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1685019742
    },
    {
        "content": "<p>The docs build will break as soon as we move stuff.</p>",
        "id": 361056197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685019946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/361052269\">said</a>:</p>\n<blockquote>\n<p>again, are we going to do the same thing for LTE?</p>\n</blockquote>\n<p>I always imagined that files in <code>LTE/for_mathlib/</code> would be ported on an individual basis, to the extent that they will be ported.</p>",
        "id": 361058726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685020584
    },
    {
        "content": "<p>A whole bunch of that stuff has already been refactored (e.g. by Joël) and is being PRd to mathlib(4).</p>",
        "id": 361058877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685020622
    },
    {
        "content": "<p>I don't see the point of porting the non-for-mathlib part of LTE.</p>",
        "id": 361058976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685020648
    },
    {
        "content": "<p>Tl;dr: I thought that mathport-oneshot would suffice for the use cases outside of mathlib.</p>",
        "id": 361059111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685020678
    },
    {
        "content": "<p>The point would be to port the whole project at once, and then PR the for_mathlib directory at leisure</p>",
        "id": 361059193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685020689
    },
    {
        "content": "<p>That port is going to be insanely painful. And I don't see the point of doing it.</p>",
        "id": 361059302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685020726
    },
    {
        "content": "<p>Why can't we just leave it in Lean 3, and mathport-oneshot the for_mathlib directory at leisure, when we want to PR some file in it to mathlib4</p>",
        "id": 361059437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685020763
    },
    {
        "content": "<p>95% of LTE is not going to be used (in the next 10 years) by any other project. The 5% that is useful needs to be rewritten thoroughly anyway. So either oneshot it, or just use it as inspiration, but start over from scratch.</p>",
        "id": 361059932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685020851
    },
    {
        "content": "<p>The advantage of having the <code>for_mathlib</code> directory be in a living project is that you can remove things from that directory as they're added to mathlib</p>",
        "id": 361060942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685021116
    },
    {
        "content": "<p>I have very little feel for how hard a porting task LTE would be</p>",
        "id": 361061044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685021148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/361060942\">said</a>:</p>\n<blockquote>\n<p>The advantage of having the <code>for_mathlib</code> directory be in a living project is that you can remove things from that directory as they're added to mathlib</p>\n</blockquote>\n<p>I think that a comment along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">The contents of this file have been effectively integrated into mathlib 4.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>at the top of files in LTE3/for_mathlib would be sufficient to keep track of such things.</p>",
        "id": 361061469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685021259
    },
    {
        "content": "<p>I should do that anyways with some of the files. We are already in a situation where files in for_mathlib can't be removed because it would require a pretty annoying mathlib bump in LTE. And we just don't have time and energy for that.</p>",
        "id": 361061675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685021313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/361056197\">said</a>:</p>\n<blockquote>\n<p>The docs build will break as soon as we move stuff.</p>\n</blockquote>\n<p>Could you clarify what the problem would be there? Surely as subdirectories of <code>src</code>, <code>archive</code> and <code>counterexamples</code> would just have documentation generated in the same way as everything else.</p>",
        "id": 361061722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685021329
    },
    {
        "content": "<p>LTE/for_mathlib can serve as a source of inspiration. But it isn't in mathlib-ready shape at all.</p>",
        "id": 361061757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685021337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/361061722\">said</a>:</p>\n<blockquote>\n<p>Could you clarify what the problem would be there? Surely as subdirectories of <code>src</code>, <code>archive</code> and <code>counterexamples</code> would just have documentation generated in the same way as everything else.</p>\n</blockquote>\n<p>I think the problem is that the most recent <code>doc-gen</code> commit added special support for the <code>archive</code> and <code>counterexamples</code> directories, but worst-case it would just be a matter of (temporarily) reverting it.</p>",
        "id": 361061880,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1685021372
    },
    {
        "content": "<p>The tooling is nice, but we're talking about 68 files with no inter-dependencies and fewer than 10 open PRs touching them (most of them stale). There are so many feasible approaches, the most low-tech being to run mathport locally once, push it to a branch somewhere, declare the two directories frozen in mathlib3 and have a GH ticket tracking progress.</p>",
        "id": 361068131,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1685022769
    },
    {
        "content": "<p>Ah, that's a good point; if <code>for-mathlib</code> doesn't consume anything outside the <code>for-mathlib</code> folder, then you could just create a new <code>lte-for-mathlib</code> project and port that exhaustively</p>",
        "id": 361072970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685023777
    },
    {
        "content": "<p>There's other whole projects that want lean4 porting - flt-reg for one :)</p>",
        "id": 361094229,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1685028489
    },
    {
        "content": "<p>I am very confident we will port <code>flt-regular</code> completely during the summer <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 361095106,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685028660
    },
    {
        "content": "<p>At the moment for example we need <a href=\"https://github.com/leanprover-community/mathlib4/pull/4339\">!4#4339</a></p>",
        "id": 361095189,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1685028677
    },
    {
        "content": "<p>We're already getting to splitting fields! Woop</p>",
        "id": 361101126,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1685030031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/361059111\">said</a>:</p>\n<blockquote>\n<p>Tl;dr: I thought that mathport-oneshot would suffice for the use cases outside of mathlib.</p>\n</blockquote>\n<p>I was thinking about this tho</p>",
        "id": 361101323,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1685030078
    },
    {
        "content": "<p>I don't think it makes any sense to use it for flt-regular; why not just use mathport non-one shot to do the whole repo?</p>",
        "id": 361102062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685030246
    },
    {
        "content": "<p>Also, <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a> now includes <code>archive</code> and <code>counterexamples</code>!</p>",
        "id": 361103008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685030445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/361102062\">said</a>:</p>\n<blockquote>\n<p>I don't think it makes any sense to use it for flt-regular; why not just use mathport non-one shot to do the whole repo?</p>\n</blockquote>\n<p>I'm confused what's the issue, then - I assumed this message meant that non-one-shot was not great</p>",
        "id": 361109657,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1685032007
    },
    {
        "content": "<p>The only issue with non-one shot is that AFAIK no one has demonstrated successfully using it</p>",
        "id": 361114343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685033161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/361103008\">said</a>:</p>\n<blockquote>\n<p>Also, <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a> now includes <code>archive</code> and <code>counterexamples</code>!</p>\n</blockquote>\n<p>27 of the IMO problems are ready to port (<a href=\"https://leanprover-community.github.io/mathlib-port-status/file/imo/imo2008_q3\">port-status#imo/imo2008_q3</a> takes the prize for furthest away); I imagine that these would be fun files for people new to the port to work on once we have them as mathport output.</p>",
        "id": 361122034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685035171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/361114343\">said</a>:</p>\n<blockquote>\n<p>The only issue with non-one shot is that AFAIK no one has demonstrated successfully using it</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has been writing down instructions. I think it is quite realistic that one-shot will be usable in the near future.</p>",
        "id": 361123049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685035433
    },
    {
        "content": "<p>For \"one-shot\" or for \"multi-shot\"/\"full-project\" mode? My claim is that \"one-shot\" is a hack suitable for reviving PRs, but the wrong tool for converting an entire project</p>",
        "id": 361124693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685035866
    },
    {
        "content": "<p>We are now discussing two issues that I think are almost orthogonal:</p>\n<ul>\n<li>Refactoring mathport so that it works well on external projects</li>\n<li>Labelling completely ported downsets of mathlib</li>\n</ul>\n<h1>Mathport</h1>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> wrote a branch of the mathport repo <a href=\"https://github.com/leanprover-community/mathport/tree/projects_instructions\">https://github.com/leanprover-community/mathport/tree/projects_instructions</a> with an updated README that has instructions for using one-shot. These instructions are being tested by people here in Banff. This is work in progress, but should stabilize in the near future.</li>\n<li><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is looking at relative imports, which will be useful for archive/, counterexamples/ and external projects.</li>\n<li>To port archive/ and counterexamples/ we will need CI that publishes the output of mathport so that <code>start-port.sh</code> picks it up. <em>Alternatively</em> we move those dirs into src/ and comment out a bit of doc-gen code.</li>\n</ul>\n<h1>Completely ported downsets</h1>\n<ul>\n<li>We need bots to label files in mathlib3 and mathlib4 that have all of their downstream dependents completely ported. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> is happy to write these bots.</li>\n<li>If we don't move stuff into src/ then <code>leanproject --port-complete</code> will be slightly overeager, and need to special case ~5 files.<br>\n*</li>\n</ul>",
        "id": 361131341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1685037701
    },
    {
        "content": "<p>Do we actually care about <code>leanproject --port-complete</code>? I could quite easily expose this information on <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a>, which already does the right thing without the special cases. Is anyone going to run this on the command line?</p>",
        "id": 361136636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685039090
    },
    {
        "content": "<p>It doesn't matter where it is exposed. The main thing is that we want a bot that automatically labels files in mathlib4 which can be modified without required backporting. We can implement this right now on top of <code>leanproject --port-complete</code>, and I'd prefer not to be waiting on other intermediate steps.</p>",
        "id": 361144277,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685041259
    },
    {
        "content": "<p>But if you can do that easily based on the existing bot that updates headers in mathlib3, that would be perfect.</p>",
        "id": 361144625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685041353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, just checking, is that thumbs up saying \"yes, I'm planning on doing this at some point\"? :-)</p>",
        "id": 361638287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685217622
    },
    {
        "content": "<p>It's \"I might do that if I get around to it, but I wouldn't count on it happening in the next week\"</p>",
        "id": 361638372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685217675
    },
    {
        "content": "<p>What's the source of truth for whether a file is \"completely ported\"?</p>",
        "id": 361638415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685217705
    },
    {
        "content": "<p>For \"synchronized\" the source of truth is the mathlib4 header comment</p>",
        "id": 361638476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685217724
    },
    {
        "content": "<p>I'm not certain what you mean. We can determine if a file is \"downstream-closed-ported\" by running <code>leanproject --port-complete</code>. I was thinking to run this every day and update the headers of both mathlib3 and mathlib4 files from that?</p>",
        "id": 361639160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685218112
    },
    {
        "content": "<p>That approach can lead to a file becoming un-complete</p>",
        "id": 361639520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685218323
    },
    {
        "content": "<p>Which you said you didn't want to allow</p>",
        "id": 361639561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685218330
    },
    {
        "content": "<p>Maybe I'm confused. I thought I said I wanted the condition to be \"at some point has been in the output of <code>leanproject port-complete</code>\". People adding more stuff to mathlib during the next month or so will just have to be aware that if they depend on a file in this condition there could potentially be breaking changes in mathlib4 already. In the vast majority of cases it is just going to be additional lemmas or changed imports.</p>",
        "id": 361641039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685219061
    },
    {
        "content": "<p>That's a good definition, but it means you can't use <code>--port-complete</code> to ask \"is this file complete\"</p>",
        "id": 361642773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685219858
    },
    {
        "content": "<p>Ah, okay, I was just thinking the logic would be:</p>\n<ul>\n<li>each day, run <code>leanproject port-complete</code></li>\n<li>for each file in the output, check if the mathlib3 and mathlib4 files already have the new header</li>\n<li>if not, add the header</li>\n<li>if a tool or CI needs to check if something is \"downstream-closed-ported\", we check for these headers.</li>\n</ul>",
        "id": 361643130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685220029
    },
    {
        "content": "<p>I think it probably makes sense to make the mathlib4 header the source of truth</p>",
        "id": 361697399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685260503
    },
    {
        "content": "<p>As that's consistent with what we do for unported/ported, and prevents us having two different ways for things to fail if file are moved</p>",
        "id": 361697599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685260583
    },
    {
        "content": "<p>The CI script for processing the archive and counterexamples directories is now up at <a href=\"https://github.com/leanprover-community/mathport/pull/238\">mathport#238</a>. I am not sure whether the PR CI will already produce the relevant releases.</p>",
        "id": 361820361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685307685
    },
    {
        "content": "<p>What does it output in the source header comments?</p>",
        "id": 361821990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685308654
    },
    {
        "content": "<p>(the dashboard will be happy if it's just the same as how <code>src</code> is handled, with no mention of <code>archive</code>)</p>",
        "id": 361822074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685308690
    },
    {
        "content": "<p>that's exactly what it does</p>",
        "id": 361822119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685308736
    },
    {
        "content": "<p>Do you have an example, or should I just wait till tomorrow?</p>",
        "id": 361822278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685308814
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2022 Bhavik Mehta, Kexing Ying. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Bhavik Mehta, Kexing Ying</span>\n\n<span class=\"cm\">! This file was ported from Lean 3 source module «100-theorems-list».«30_ballot_problem»</span>\n<span class=\"cm\">! leanprover-community/mathlib commit 57ac39bd365c2f80589a700f9fbb664d3a1a30c2</span>\n<span class=\"cm\">! Please do not edit these lines, except to modify the commit id</span>\n<span class=\"cm\">! if you have ported upstream changes.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathbin.Probability.CondCount</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Ballot problem</span>\n<span class=\"cm\">...</span>\n</code></pre></div>",
        "id": 361822422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685308923
    },
    {
        "content": "<p>That looks very sensible, though I have no doubt we have a script or two to fix!</p>",
        "id": 361822667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685309100
    },
    {
        "content": "<p>We have a <a href=\"https://github.com/leanprover-community/mathport/actions/runs/5106358658/jobs/9178513160\">result from mathport</a>. It looks like the error is caused by a missing predata, so hopefully this will be fixed when the next predata runs (or possibly once it is merged and then predata runs)</p>",
        "id": 361824769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685310615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/leanproject.20--port-complete/near/361824769\">said</a>:</p>\n<blockquote>\n<p>We have a <a href=\"https://github.com/leanprover-community/mathport/actions/runs/5106358658/jobs/9178513160\">result from mathport</a>. It looks like the error is caused by a missing predata, so hopefully this will be fixed when the next predata runs (or possibly once it is merged and then predata runs)</p>\n</blockquote>\n<p>I've merged master into the branch</p>",
        "id": 361877222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685346698
    },
    {
        "content": "<p>I don't think it will make any difference, the last predata still ran using the old script. We shouldn't merge this until the archive issues are fixed though</p>",
        "id": 361879975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685347622
    }
]