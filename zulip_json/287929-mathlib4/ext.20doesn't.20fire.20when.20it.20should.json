[
    {
        "content": "<p>in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1996\">!4#1996</a> I had an issue (not my first) where <code>ext</code> didn't succeed where it did in Lean 3 and I had to manually apply the <code>ext</code> lemmas, see line 664. I don't understand why it didn't trigger, other than perhaps it failed with unification.</p>\n<p>Notice that unification had an egregious failure just a few lines higher when I also had to manually apply <code>ext</code> lemmas. I have workarounds, but this is terrible. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 325315121,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675312335
    },
    {
        "content": "<p>Can you minimise and open an issue if nobody responds here? I've seen this too and I'm sure it will keep coming up. Probably just a bug in the tactic?</p>",
        "id": 325339891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675326895
    },
    {
        "content": "<p>This came up in a previous thread; possibly about FreeMonoid?</p>",
        "id": 325395995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675344059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ext.20doesn't.20fire.20when.20it.20should/near/325395995\">said</a>:</p>\n<blockquote>\n<p>This came up in a previous thread; possibly about FreeMonoid?</p>\n</blockquote>\n<p>Yes, I think I had a similar problem, see <a href=\"#narrow/stream/287929-mathlib4/topic/ext/near/320389699\">this</a> Zulip conversation and the solution was indeed to replace each call to <code>ext</code> by the specific call to the <code>ext</code> lemma that was supposed to be used.</p>",
        "id": 325398688,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675344798
    },
    {
        "content": "<p>That's the one I was thinking of, thanks!</p>",
        "id": 325407638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675347131
    },
    {
        "content": "<p>Right now the core lean people and the tactic people are all overwhelmed so I think we just have to keep creating issues to track the main problems and then work around them until the relevant people have time</p>",
        "id": 325431603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675352920
    },
    {
        "content": "<blockquote>\n<p>the solution was indeed to replace each call to ext by the specific call to the ext lemma that was supposed to be used.</p>\n</blockquote>\n<p>In that case, the solution was to add priorities to the ext lemmas (because in Lean 3 the order the lemmas appear in the file is the reverse of the  order they're tried in, but this no longer works in Lean 4).  Replacing <code>ext</code> by <code>apply</code> is of course only a workaround.</p>",
        "id": 325454140,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675358761
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2020\">!4#2020</a> is how it should be done</p>",
        "id": 325459184,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675360064
    },
    {
        "content": "<p>Thanks! Do you understand why <code>ext</code> was able to unify, but manually doing <code>apply</code> or <code>refine</code> wasn't without help?</p>",
        "id": 325462980,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675361049
    },
    {
        "content": "<p>Could we restore the old behaviour by having the <code>ext</code> attribute:</p>\n<ul>\n<li>Call <code>ext</code> on the goal</li>\n<li>Ask which ext lemma was found</li>\n<li>Use a priority of p+1</li>\n</ul>",
        "id": 325536695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675391519
    },
    {
        "content": "<p>That's an interesting idea (i.e., default the priority so that the lemma always fires), but it would be the only attribute that works that way.  Alternatively we could also add an ext-linter.</p>",
        "id": 325542528,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675396345
    },
    {
        "content": "<p>That would only work if the other relevant <code>ext</code> lemmas are already imported though. I think a linter is a better approach.</p>",
        "id": 325544002,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675397631
    },
    {
        "content": "<p>In practice the weaker ext lemmas are always already imported; <code>linear_map.ext</code> always precedes <code>tensor_product.hom_ext</code> etc. We had this discussion in lean3 and concluded that adding manual priorities there did more harm than good.</p>",
        "id": 325584528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675417539
    },
    {
        "content": "<p>Off the top of my head I can't think of a situation where there are more than two competing lemmas</p>",
        "id": 325584671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675417582
    }
]