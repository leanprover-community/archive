[
    {
        "content": "<p>Coercing <code>Fin 10</code> to <code>Fin 5</code> is really slow. This problem could be related to the slow coercion from primes to reals, <a href=\"#narrow/stream/287929-mathlib4/topic/Slow.20coercions\">previous topic</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">--set_option trace.Meta.synthInstance true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">):</span> <span class=\"n\">CoeT</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>Takes roughly 350ms on my machine</p>\n<p>The issue is the <code>instCoeHTCT</code> instance </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">CoeTail</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CoeHTC</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeHTCT</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">CoeTail.coe</span> <span class=\"o\">(</span><span class=\"n\">CoeHTC.coe</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which takes forever to figure out that <code>β</code> should be <code>Nat</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- slow</span>\n<span class=\"kd\">def</span> <span class=\"n\">isnt1</span> <span class=\"o\">:</span> <span class=\"n\">CoeHTCT</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">-- fast</span>\n<span class=\"kd\">def</span> <span class=\"n\">inst2</span> <span class=\"o\">:</span> <span class=\"n\">CoeHTCT</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">instCoeHTCT</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">:=</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>While chasing down the right <code>β</code> there is really wild stuff going on, like trying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">InfTopHomClass.toInfHomClass</span> <span class=\"n\">to</span> <span class=\"n\">InfHomClass</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.142755</span> <span class=\"bp\">?</span><span class=\"n\">m.142756</span>\n</code></pre></div>\n<p>I do not really understand mathlib's stack of classes and instances so I have no clue what to do about this.</p>",
        "id": 391707586,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1695045877
    },
    {
        "content": "<p>Do not use this coercion. It's quite bad.</p>",
        "id": 391707844,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695045953
    },
    {
        "content": "<p>It sens <code>a : Fin m</code> to <code>↑(a.val) : Fin n</code>, for <em>any</em> <code>m</code> and <code>n ≠ 0</code>. Mathematically, that's quite bad.</p>",
        "id": 391708122,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695046027
    },
    {
        "content": "<p>I agree that I should use something else, but is that reason for this coercion to be that slow?</p>\n<p>(I'm trying to write down simple convolution</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but maybe I should rather do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where  <code>ℤ[-m,m] = {a : ℤ // -m ≤ a ∧ a ≤ m}</code>)</p>",
        "id": 391709843,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1695046489
    },
    {
        "content": "<p>It sounds like you could use <code>ℤ →₀ ℝ</code>?</p>",
        "id": 391710502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695046685
    },
    {
        "content": "<p>I'm writing a program, using <code>ℤ →₀ ℝ</code> is not on the table as it would be too slow.</p>",
        "id": 391711230,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1695046894
    },
    {
        "content": "<p>I am not sure if this is really serious, but there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LaurentPolynomial#doc\">docs#LaurentPolynomial</a> and I think that, informally, what you are doing is equivalent to taking the zero-th coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mi>g</mi><mo stretchy=\"false\">(</mo><msup><mi>t</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(t) g(t^{-1})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, with <code>f g : LaurentPolynomial ℝ</code>.</p>\n<p>Ah, your actual motivation might rule this out!</p>",
        "id": 391711365,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695046929
    },
    {
        "content": "<p>You are probably right, if</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">g</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n<span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n</code></pre></div>\n<p>Then I'm trying to compute the <code>i</code>th coeficient of the Laurent series of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mi>g</mi><mo stretchy=\"false\">(</mo><msup><mi>t</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> f(t)g(t^{-1}) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, but that does not help me to write an efficient program :)</p>",
        "id": 391712561,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1695047282
    },
    {
        "content": "<p>Speaking of <code>Fin</code> coercions, I incidentally just added this function to my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">liftFin</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_trans</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">))⟩</span>\n</code></pre></div>\n<p>The only objective is to change <code>(0 : Fin 2)</code> to <code>(0 : Fin 8)</code> and <code>(1 : Fin 2)</code> to <code>(1 : Fin 8)</code>.<br>\nIs it a bad practice? I mean the implementation (the name surely is).</p>",
        "id": 391722319,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695050078
    },
    {
        "content": "<p>That's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.castLE#doc\">docs#Fin.castLE</a></p>",
        "id": 391727154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695051519
    }
]