[
    {
        "content": "<p>Johan and I have been experimenting with a typeclass to represent universe inequalities. (With a critical clue from Reid.)</p>\n<p>The main (only?) place we need universe inequalities in mathlib is in constructing (co)limits in the category of types (or other concrete categories). If we have a <code>Type u</code> indexed family in <code>Type v</code>, then the product (or more generally the subtype of the product giving a limit) will be in <code>Type max u v</code>. However we want this to live in <code>Type v</code>.</p>\n<p>The proposal is very simple:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>Note that this is not the immediately obvious definition, which would be <code>∀ α : Type u, Small.{v} α</code>. This is weaker, and implied by the definition above. We need this stronger definition precisely for the construction of limits discussed above.</p>\n<p>This definition does have some defects, in particular not being transitive in Lean's type theory, but so far this doesn't seem to be a practical obstacle.</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/UnivLE\">branch#UnivLE</a> gives the basic definitions</p>\n</li>\n<li>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/UnivLE_types\">branch#UnivLE_types</a> uses this definition to construct the appropriate <code>HasLimitsOfSize</code> instance, depending on a <code>UnivLE</code> hypothesis.</p>\n</li>\n</ul>\n<p>With this design all of the following work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">:</span> <span class=\"n\">HasLimitsOfSize.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/tree/UnivLE_UniqueGluing\">branch#UnivLE_UniqueGluing</a> then explores how we might do the universe generalisations from <a href=\"https://github.com/leanprover-community/mathlib/pull/19153\">!3#19153</a> (since reverted in <a href=\"https://github.com/leanprover-community/mathlib/pull/19230\">!3#19230</a>) but using <code>UnivLE</code> typeclasses instead of <code>max u v</code> universes.</li>\n</ul>",
        "id": 372237990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688462968
    },
    {
        "content": "<p>Unless I hear screams of anguish, I will convert these branches into PRs soon.</p>",
        "id": 372238288,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688463032
    },
    {
        "content": "<p>Am I right that it is not transitive because nothing in the specification says that <code>max u v</code> is actually <code>u</code> or <code>v</code>?</p>",
        "id": 372421874,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688508722
    },
    {
        "content": "<p>And it becomes transitive if we add an axiom <code>∀ α : Type max u v, Small.{u} α ∨ Small.{v} α</code>?</p>",
        "id": 372421977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688508778
    },
    {
        "content": "<p><code>TypeMax</code> will be phased out with <code>UnivLE</code> phasing in, right? How does eg commutativity of limits look? That’s the most basic situation for chaining things that I can think of.</p>",
        "id": 372422889,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688509379
    },
    {
        "content": "<p>I <em>hope</em> we can phase out <code>TypeMax</code> in favour of <code>UnivLE</code>. I haven't looked at commutativity of limits yet. If you have a suggestion about which files to look at, I can try that.</p>\n<p>(Although I'd prefer not to put much more work into <code>UnivLE</code> in the near future if possible. If anyone else wants to try this that would be great.)</p>",
        "id": 372430513,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688514694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, yes, nothing says <code>max u v</code> is actually <code>u</code> or <code>v</code>. In fact I think there's not even any sense in which is the smallest thing bigger than both <code>u</code> and <code>v</code>. (i.e. not only are universe not linearly ordered, <code>max</code> is not even a least upper bound).</p>",
        "id": 372430666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688514796
    },
    {
        "content": "<p>I should have led with: I think this is a definite all around improvement and thanks for doing it!</p>",
        "id": 372430689,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688514817
    },
    {
        "content": "<p>I think this should be a def instead of an abbrev though.</p>",
        "id": 372447115,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688522835
    },
    {
        "content": "<p>Concerning transitivity: if/when we need this, we can just add the transitive inequality as an extra assumption. TC will be able to find it in concrete situations via other instances. In theory, this could lead to a blow up of assumption, but in practice I think we are quite far removed from such problems. If it ever becomes a problem, we'll cross that bridge when we get to it.</p>",
        "id": 372463342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688533060
    },
    {
        "content": "<p>These are now PRs at <a href=\"https://github.com/leanprover-community/mathlib4/pull/5723\">#5723</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5724\">#5724</a>, and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5726\">#5726</a>.</p>",
        "id": 372472373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688536682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, could you say why it should be a <code>def</code> (presumably actually a <code>class</code>)?</p>\n<p>I would need to convert the <code>example</code>s in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5723\">#5723</a> into actual instances.</p>",
        "id": 372472514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688536752
    },
    {
        "content": "<p>Ah I didn't realize that this is a class, then it's not so bad.  In general it's problematic for simp to have abbreviations that are more complex than <code>abbrev ge (x y : α) := y ≤ x</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.UnivLE</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- unsolved goals</span>\n</code></pre></div>",
        "id": 372481663,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688539778
    },
    {
        "content": "<p>This is because <code>simp</code> will see through the abbreviation when looking at the hypothesis (i.e., it gets <code>Small.{v} ?α</code>) but then won't find it when simplifying <code>UnivLE.{u,v}</code>.</p>",
        "id": 372482059,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688539894
    },
    {
        "content": "<p>I really look forward to having the option to say: this ring lives in a universe that is smaller than this module.</p>",
        "id": 372493997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1688543292
    },
    {
        "content": "<p>I think it would be okay to turn it into a one-field class, and writing a single instance going from the current definition to UnivLE (taking advantage of loops being allowed!) But I think I'd prefer to wait to see if that is useful later.</p>",
        "id": 372538725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688552886
    },
    {
        "content": "<p>If someone would like to investigate <code>UnivLE.{u+1, u} → False</code>, that might be fun. Can this be derived from Girard's paradox?</p>",
        "id": 372539088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688552971
    },
    {
        "content": "<p>It's true, thanks to <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> (<a href=\"#narrow/stream/116395-maths/topic/The.20cardinal.20.60.23.28Type.20u.29.60/near/273277875\">zulip</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">mk_iff</span><span class=\"o\">]</span> <span class=\"n\">Small</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">UnivLE</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Small_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">use</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"n\">intro</span> <span class=\"n\">α</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Function.not_surjective_Type.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">f.symm</span> <span class=\"n\">f.symm.surjective</span>\n</code></pre></div>",
        "id": 372570044,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688559588
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, PR'd as <a href=\"https://github.com/leanprover-community/mathlib4/pull/5739\">#5739</a>.</p>",
        "id": 372785321,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688625856
    },
    {
        "content": "<p>On the next <code>UnivLE</code> PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/5724\">#5724</a>, I have the following alarming situation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">X</span>   <span class=\"c1\">-- succeeds!</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>   <span class=\"c1\">-- fails!</span>\n</code></pre></div>\n<p>where the failure is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">v₁</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"n\">v₁</span> <span class=\"bp\">?</span><span class=\"n\">u.33468</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₁</span><span class=\"o\">}</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₁</span><span class=\"o\">),</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.33468</span> <span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 372801119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688630235
    },
    {
        "content": "<p>More specifically this is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">HasProducts.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v₁</span><span class=\"o\">)</span>  <span class=\"c1\">-- Succeeds!</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">HasProducts.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>  <span class=\"c1\">-- Fails!</span>\n</code></pre></div>\n<p>in the file Mathlib/CategoryTheory/Closed/Types.lean.</p>",
        "id": 372801272,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688630275
    },
    {
        "content": "<p>It's not a show-stopper, as I can provide a shortcut for the instance as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasProducts.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">hasLimitsOfShapeOfHasLimits.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and then proceed.</p>",
        "id": 372801486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688630314
    },
    {
        "content": "<p>But it feels like <code>#synth</code> succeeding and <code>inferInstance</code> failing might count as a bug?</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, do you know an explanation for why they might diverge?</p>",
        "id": 372802005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688630423
    },
    {
        "content": "<p>What if you add a shortcut instance for <code>Small</code>?</p>",
        "id": 372926679,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688655027
    },
    {
        "content": "<p>I guess this happens because <code>UnivLE</code> is unfolded somewhere (it's an abbrev after all) and we then unify <code>Small.{max ...}</code> with <code>Small.{max ...}</code>.  Can you try changing <code>UnivLE</code> to a class?</p>",
        "id": 372962087,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688661629
    },
    {
        "content": "<p>I did try changing it to a class, and it is just failure all down the line! I couldn't even get the <code>instance [UnivLE.{u, v}] (α : Type u) : Small.{v} α :=</code> example to compile, no matter how many universe annotations I added. I had to actually pass the <code>UnivLE.small</code> instances in by hand.</p>",
        "id": 373042000,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688686349
    },
    {
        "content": "<p>That is, where we currently have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n\n<span class=\"n\">pp_with_univ</span> <span class=\"n\">UnivLE</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Shrink.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"o\">⟨</span><span class=\"n\">Equiv.ulift.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">equivShrink</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">α</span><span class=\"o\">))⟩⟩</span>\n</code></pre></div>\n<p>the best I could mange with <code>UnivLE</code> a class was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">small</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">UnivLE.small</span>\n\n<span class=\"n\">pp_with_univ</span> <span class=\"n\">UnivLE</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">inferInstance</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">inferInstance</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">inferInstance</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">inferInstance</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">UnivLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Small.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">@</span><span class=\"n\">Shrink</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I.small</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">⟨</span><span class=\"n\">Equiv.ulift.symm.trans</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">equivShrink</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">UnivLE.small</span> <span class=\"n\">_</span><span class=\"o\">))⟩⟩</span>\n</code></pre></div>",
        "id": 373042097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688686400
    },
    {
        "content": "<p>SmallMax?</p>",
        "id": 373042581,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1688686655
    }
]