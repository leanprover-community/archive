[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Did you recently change <code>simps</code> config? It looks like it needs <code>toFun -&gt; apply</code> instead of, e.g., <code>toLinearMap_toFun -&gt; apply</code></p>",
        "id": 362615178,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685588286
    },
    {
        "content": "<p>Should we change these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">NormedSpace</span><span class=\"bp\">/</span><span class=\"n\">LinearIsometry.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">LinearIsometry</span> <span class=\"o\">(</span><span class=\"n\">toLinearMap_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">NormedSpace</span><span class=\"bp\">/</span><span class=\"n\">LinearIsometry.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">LinearIsometryEquiv</span> <span class=\"o\">(</span><span class=\"n\">toLinearEquiv_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">,</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">LinearAlgebra</span><span class=\"bp\">/</span><span class=\"n\">AffineSpace</span><span class=\"bp\">/</span><span class=\"n\">AffineEquiv.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">AffineEquiv</span> <span class=\"o\">(</span><span class=\"n\">toEquiv_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">,</span> <span class=\"n\">toEquiv_invFun</span> <span class=\"bp\">→</span> <span class=\"n\">symm_apply</span><span class=\"o\">,</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">NumberTheory</span><span class=\"bp\">/</span><span class=\"n\">LegendreSymbol</span><span class=\"bp\">/</span><span class=\"n\">MulCharacter.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">MulChar</span> <span class=\"o\">(</span><span class=\"n\">toMonoidHom_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">toMonoidHom</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Module</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">ContinuousLinearMap</span> <span class=\"o\">(</span><span class=\"n\">toLinearMap_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">,</span> <span class=\"n\">toLinearMap</span> <span class=\"bp\">→</span> <span class=\"n\">coe</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">ContinuousFunction</span><span class=\"bp\">/</span><span class=\"n\">Bounded.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">BoundedContinuousFunction</span> <span class=\"o\">(</span><span class=\"n\">toContinuousMap_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">Homotopy</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">Homotopy</span> <span class=\"o\">(</span><span class=\"n\">toContinuousMap_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">toContinuousMap</span><span class=\"o\">)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">Homotopy</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">HomotopyWith</span> <span class=\"o\">(</span><span class=\"n\">toHomotopy_toContinuousMap_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">,</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">Homotopy</span><span class=\"bp\">/</span><span class=\"n\">Equiv.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">HomotopyEquiv</span> <span class=\"o\">(</span><span class=\"n\">toFun_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">,</span> <span class=\"n\">invFun_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">symm_apply</span><span class=\"o\">,</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">MetricSpace</span><span class=\"bp\">/</span><span class=\"n\">Isometry.lean</span><span class=\"o\">:</span><span class=\"n\">initialize_simps_projections</span> <span class=\"n\">IsometryEquiv</span> <span class=\"o\">(</span><span class=\"n\">toEquiv_toFun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">,</span> <span class=\"n\">toEquiv_invFun</span> <span class=\"bp\">→</span> <span class=\"n\">symm_apply</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 362615214,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685588320
    },
    {
        "content": "<p>Also, sometimes <code>simp</code> fails to use lemmas generated by <code>simps</code>. I can't make an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> yet. I'll open an issue once I hit this bug again.</p>",
        "id": 362615337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685588403
    },
    {
        "content": "<p>Not recently, but yeah, that changed in Lean 4. The short version does exactly the same as the long version though. It was changed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2042\">!4#2042</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/2561\">!4#2561</a> changed some existing <code>initialize_simps_projections</code>.</p>",
        "id": 362717647,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1685618537
    },
    {
        "content": "<p>Note that projections to parent structures are now disabled by default. So the <code>-toContinuousMap</code> and friends are also not needed anymore, since they're the default behavior. You have to now do <code>+toContinuousMap</code> explicitly if you want it, which is done in some category theory structures.</p>",
        "id": 362717663,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1685618542
    },
    {
        "content": "<p>When <code>simp</code> cannot apply the lemmas generated by <code>simps</code>, can you look at whether the output <code>simps?</code> produces looks reasonable?<br>\nAnother thing I would check is whether <code>Funlike.coe</code> is the default coercion / simp-normal form in the case you're looking at.</p>",
        "id": 362717990,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1685618631
    },
    {
        "content": "<p>Unfortunately, after <code>toLinearMap_toFun -&gt; apply</code> it generates lemmas named <code>*_toFun</code>. I'll try to fix these <code>initialize_simps_projections</code></p>",
        "id": 362738443,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685622914
    },
    {
        "content": "<p>AFAIR, <code>simps?</code> output looked good and <code>rw</code> was able to use them. I'll try to reproduce it later today.</p>",
        "id": 362738869,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685623007
    },
    {
        "content": "<p>(though fixing <code>ContDiff</code> is higher on my priority list)</p>",
        "id": 362738959,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685623028
    },
    {
        "content": "<p>Oh I see, it's generating both <code>_apply</code> and <code>_toFun</code> lemmas? That sounds like a bug.</p>",
        "id": 362739752,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1685623216
    }
]