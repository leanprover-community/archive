[
    {
        "content": "<p>I want to show that if given a family of structures, then equal index implies equivalent structures. the example is following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)[</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AddEquiv.cast</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≃+</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">swap</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Equiv.cast</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cast</span>\n  <span class=\"n\">simp</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>what should I do?</p>",
        "id": 384087330,
        "sender_full_name": "loooong",
        "timestamp": 1691785976
    },
    {
        "content": "<p>This is false in general, I think</p>",
        "id": 384090109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691786924
    },
    {
        "content": "<p>Why? I think it should be right in usual math.</p>",
        "id": 384090205,
        "sender_full_name": "loooong",
        "timestamp": 1691786974
    },
    {
        "content": "<p>Oh you're right, I'm thinking of something different:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AddEquiv.cast</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≃+</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"n\">map_add'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 384090386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691787046
    },
    {
        "content": "<p>This is the false one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">AddEquiv.cast</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.cast</span> <span class=\"n\">p</span>\n  <span class=\"n\">map_add'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 384090498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691787099
    },
    {
        "content": "<p>Thank you, I'm considering a version of this theorem for modules.</p>",
        "id": 384090742,
        "sender_full_name": "loooong",
        "timestamp": 1691787171
    },
    {
        "content": "<p>I think this kind of theorem can be added in mathlib</p>",
        "id": 384090944,
        "sender_full_name": "loooong",
        "timestamp": 1691787239
    },
    {
        "content": "<p>Could you tell us a bit more about what you'd need that for? The reason we don't have those is because the statement is not super natural (because you're not only using that the types are equal, also that the structures are equal), so that may be an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem</p>",
        "id": 384091261,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691787343
    },
    {
        "content": "<p>I'm trying to formalize spectral sequence for filtered complex (module version), where I meet a lot of index. we know complex can be viewed as function from Z to Modules, so I want the fact that equal index induces equivalent modules. In particular,  I want C (p - r + (q + r - 1)) ≃ₗ[R] C (p + q - 1) for a complex C.</p>",
        "id": 384092719,
        "sender_full_name": "loooong",
        "timestamp": 1691787847
    },
    {
        "content": "<p>Lean cannot replace these index automatically, this is very surprise me.</p>",
        "id": 384092929,
        "sender_full_name": "loooong",
        "timestamp": 1691787921
    },
    {
        "content": "<p>For this kind of thing you probably want to used the type of bundled modules <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ModuleCat#doc\">docs#ModuleCat</a> used in the category theory part of the library. Then you no longer have the issue Eric mentioned above, since the structure comes with the type. But I'll let people more familiar with the category theory library comment more on that.</p>",
        "id": 384093697,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691788180
    },
    {
        "content": "<p>Often in concrete cases there is a better implementation than the cast above; for instance, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cast#doc\">docs#Fin.cast</a> when <code>f = Fin</code>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiTensorProduct.reindex#doc\">docs#PiTensorProduct.reindex</a>, etc</p>",
        "id": 384094897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691788577
    },
    {
        "content": "<p>Your comment is helpful, I will try to use CategoryTheory.iso.refl fix the problem.</p>",
        "id": 384095014,
        "sender_full_name": "loooong",
        "timestamp": 1691788628
    },
    {
        "content": "<p>You might find some of the discussion in <a href=\"https://link.springer.com/chapter/10.1007/978-3-031-16681-5_8#Sec4\">Section 2.1 of my \"Graded Rings in Lean’s Dependent Type Theory\"</a> interesting</p>",
        "id": 384095176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691788683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Equiv.2Ecast.20for.20structures/near/384094897\">said</a>:</p>\n<blockquote>\n<p>Often in concrete cases there is a better implementation than the cast above; for instance, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cast#doc\">docs#Fin.cast</a> when <code>f = Fin</code>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiTensorProduct.reindex#doc\">docs#PiTensorProduct.reindex</a>, etc</p>\n</blockquote>\n<p>Well in this context you definitely want to allow any module (ignoring universe issues) so I'm not sure if that applies</p>",
        "id": 384095262,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691788710
    },
    {
        "content": "<p>I misread \"for a complex C\" as \"for a complicated C\"</p>",
        "id": 384095499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691788798
    }
]