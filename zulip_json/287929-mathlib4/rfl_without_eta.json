[
    {
        "content": "<p>Is there a command to check if two structures are defeq without eta (emulating what instance search does when eta experiment is off)?</p>",
        "id": 356236863,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683360946
    },
    {
        "content": "<p>This isn't quite it, but there is <code>Lean.Meta.isDefEqEtaStruct</code> (private, unfortunately), which says:</p>\n<blockquote>\n<p>Return true if <code>b</code> is of the form <code>mk a.1 ... a.n</code>, and <code>a</code> is not a constructor application.<br>\n  If <code>a</code> and <code>b</code> are constructor applications, the method returns <code>false</code> to force <code>isDefEq</code> to use <code>isDefEqArgs</code>.</p>\n</blockquote>",
        "id": 356239004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683361656
    },
    {
        "content": "<p>This could definitely be helpful, but I don't know how to access a private function like that. Is there some trick here?</p>",
        "id": 356294402,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683376497
    },
    {
        "content": "<p>In the worst case scenario you can copy-paste the code somewhere.</p>",
        "id": 356301360,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683378650
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20addProjections/near/342713844\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20addProjections/near/342713844</a> Seems so</p>",
        "id": 356303927,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683379562
    },
    {
        "content": "<p>I am trying to make things a little bit more coherent, which should give a lot more straight defeqs, but I have problems above my paygrade, in tactic files. For instance, in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evalSub</span> <span class=\"o\">(</span><span class=\"n\">rα</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">va</span> <span class=\"o\">:</span> <span class=\"n\">ExSum</span> <span class=\"n\">sα</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vb</span> <span class=\"o\">:</span> <span class=\"n\">ExSum</span> <span class=\"n\">sα</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"o\">(</span><span class=\"n\">ExSum</span> <span class=\"n\">sα</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_c</span><span class=\"o\">,</span> <span class=\"n\">vc</span><span class=\"o\">,</span> <span class=\"n\">pc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">evalNeg</span> <span class=\"n\">sα</span> <span class=\"n\">rα</span> <span class=\"n\">vb</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">vd</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pd</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">_c</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">d</span><span class=\"o\">))⟩</span> <span class=\"o\">:=</span> <span class=\"n\">evalAdd</span> <span class=\"n\">sα</span> <span class=\"n\">va</span> <span class=\"n\">vc</span>\n  <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">vd</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">sub_pf</span> <span class=\"bp\">$</span><span class=\"n\">pc</span> <span class=\"bp\">$</span><span class=\"n\">pd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>I get an error on the last <code>$pd</code>, of the form </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">sub_pf</span> <span class=\"bp\">«$</span><span class=\"n\">pc</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">pd</span><span class=\"bp\">»</span>\n<span class=\"n\">argument</span>\n  <span class=\"bp\">«$</span><span class=\"n\">pd</span><span class=\"bp\">»</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Distrib.toAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toDistrib</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"n\">CommSemiring.toSemiring</span><span class=\"o\">)))))</span>\n      <span class=\"bp\">«$</span><span class=\"n\">a</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">_c</span><span class=\"bp\">»</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">«$</span><span class=\"n\">d</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Distrib.toAdd</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toDistrib</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"bp\">«$</span><span class=\"n\">α</span><span class=\"bp\">»</span> <span class=\"n\">Ring.toSemiring</span><span class=\"o\">)))))</span>\n      <span class=\"bp\">«$</span><span class=\"n\">a</span><span class=\"bp\">»</span> <span class=\"bp\">«$</span><span class=\"n\">_c</span><span class=\"bp\">»</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">?</span><span class=\"n\">m.216710</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>This is on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3809\">!4#3809</a>. Any idea?</p>",
        "id": 356335512,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683389093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, grep for <code>open private</code> in mathlib4.</p>",
        "id": 356388803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683420493
    },
    {
        "content": "<p>Regarding <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s <a href=\"https://github.com/leanprover-community/mathlib4/pull/3840\">!4#3840</a> (for those following along at home, this is the new replacement for <a href=\"https://github.com/leanprover-community/mathlib4/pull/3809\">!4#3809</a>), I've opened <a href=\"https://github.com/leanprover-community/mathlib/pull/18967\">#18967</a>, which backports the change in declaration order. It is not entirely trouble free, but given how much of an improvement this makes in mathlib4, mathlib3 is going to have to cope, I think. :-)</p>\n<p>I'm going to consider that PR as sufficient evidence that Sebastien's change is backportable, so I'd propose we move on with merging this PR!</p>",
        "id": 356600587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683525304
    },
    {
        "content": "<p>I'd like first to check that this also gives an improvement in the <code>reenable_eta</code> branch: Since in the long run we will hopefully merge this branch, it would be silly to merge something that would make it worse. I've opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/3847\">!4#3847</a> to check this (although I'm not sure of the incantations I will need to use to benchmark this branch against the reenable_eta one).</p>",
        "id": 356601554,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683525788
    },
    {
        "content": "<p>I got the benchmarks, but they are useless as they are against the branch without eta. Does anyone know how to get a comparison with respect to the branch <code>reenable_eta</code>?</p>",
        "id": 356620697,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683532225
    },
    {
        "content": "<p>I think I see how to do the comparison. We need to separately run <code>!bench</code> on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3414\">!4#3414</a>, which I've just initiated.</p>",
        "id": 356628743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683534392
    },
    {
        "content": "<p>To do the comparison, click the \"Here are the <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/run-detail/a05abf06-1496-460c-9b45-a8c679bd5221\">benchmark results</a> for commit 0193bab.\" link on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3847\">!4#3847</a>. Then there is a \"scale\" icon in the top right, with hover text \"Compare this run with another\". Clicking that, you can search for a commit sha, or branch name. But the relevant commit, 3fc0de82218c8e1285e478f8904a9144b3a5eccd, doesn't have benchmarking data yet. Hopefully it will soon.</p>",
        "id": 356629376,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683534554
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 356629460,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683534581
    },
    {
        "content": "<p>The less smart approach is just to change the base branch to <code>reenableeta</code>. I ended up doing that before noticing Scott had a better solution.</p>",
        "id": 356630321,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683534781
    },
    {
        "content": "<p>IMO we should merge the backport pr (assuming we decide to merge the mathlib4 PR) rather than just using it as an experiment; it's possible that mathlib 4 will need the same workarounds in unported downstream files, and it seems silly to ask the porters to rediscover them.</p>",
        "id": 356630438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683534814
    },
    {
        "content": "<p>This looks pretty good, according to <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/e7b27246-a3e6-496a-b552-ff4b45c7236e/to/a05abf06-1496-460c-9b45-a8c679bd5221?hash1=6cd73ad26c168dcbe403eccc12cae09c63ef6488\">http://speedcenter.informatik.kit.edu/mathlib4/compare/e7b27246-a3e6-496a-b552-ff4b45c7236e/to/a05abf06-1496-460c-9b45-a8c679bd5221?hash1=6cd73ad26c168dcbe403eccc12cae09c63ef6488</a> (which compares the previous run of reenableeta with reenableeta + <a href=\"https://github.com/leanprover-community/mathlib4/pull/3840\">!4#3840</a>)</p>",
        "id": 356633795,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683535539
    },
    {
        "content": "<p>(good except for <code>MvPolynomials</code>, which is doubled :-(</p>",
        "id": 356635002,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683535936
    },
    {
        "content": "<p>(and the global time has even a small increase -- so maybe it's not a good idea to merge it after all, or as a temporary workaround to help for the current port of linear algebra)</p>",
        "id": 356635699,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683536110
    },
    {
        "content": "<p>Results are here (thanks <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> !): <a href=\"https://github.com/leanprover-community/mathlib4/pull/3847#issuecomment-1537966700\">https://github.com/leanprover-community/mathlib4/pull/3847#issuecomment-1537966700</a></p>\n<p>Overall green, except for a very bad outcome in <code>MvPolynomial</code>. Not sure if it means we should just drop this, or try to understand what is going on with <code>MvPolynomial</code>.</p>",
        "id": 356650628,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683539677
    },
    {
        "content": "<p>MvPolynomial is a very small file, relative numbers are perhaps misleading</p>",
        "id": 356651082,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683539801
    },
    {
        "content": "<p>Yes, it's true, it just has two declarations and it feels pretty quick in both branches. So I would just discard this as irrelevant.</p>",
        "id": 356654524,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1683540679
    },
    {
        "content": "<p>I wonder if that mvpolynomial file uses a different path than most cos it has field stuff. Do we have much field theory ported?</p>",
        "id": 356657539,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1683541451
    },
    {
        "content": "<p>The current files also have workarounds which to a part are geared toward the previous set of instance priorities and/or lack of eta. Ripping those out will probably improve performance additionally.</p>",
        "id": 356659372,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1683542016
    },
    {
        "content": "<p>Merge?</p>",
        "id": 356666623,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683544031
    },
    {
        "content": "<p>If there's an increased performance almost everywhere, and the mvpolynomial stuff is so small, why is there still an overall increase in time? That seems quite weird.</p>",
        "id": 356749826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683560770
    },
    {
        "content": "<p>It's wall clock time, so there's some randomness involved. The benchmark tool didn't flag it as statistically significant.</p>",
        "id": 356750068,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1683560841
    },
    {
        "content": "<p>otoh, it also didn't flag statistically significant overall improvement...</p>",
        "id": 356750505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683560961
    },
    {
        "content": "<p>Speculatively, we have two problems in linear algebra; ring -&gt; semiring, and comm_semiring -&gt; semiring. We can make both of these behave well separately, but we're still in trouble when we get to <code>comm_ring</code></p>",
        "id": 356760398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683563417
    }
]