[
    {
        "content": "<p>This is my first AG port.  To get me started with universes, I changed <code>PresheafedSpace.{v}</code> to <code>PresheafedSpace.{_,v}</code>: is this ok?  Below is more context.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- An open immersion of PresheafedSpaces is an open embedding `f : X ⟶ U ⊆ Y` of the underlying</span>\n<span class=\"sd\">spaces, such that the sheaf map `Y(V) ⟶ f _* X(V)` is an iso for each `V ⊆ U`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">PresheafedSpace.IsOpenImmersion</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">PresheafedSpace.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Lean complains about the `C` in PresheafedSpace:</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  C</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type u : Type (u + 1)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type v : Type (v + 1)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 363896473,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686031882
    },
    {
        "content": "<p>(Just to be explicit: Lean is happy with the change, I just hope that I have not changed the meaning of the class.)</p>",
        "id": 363896610,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686031931
    },
    {
        "content": "<p>I think it would be better to reorder the universe args of <code>PresheafedSpace</code> so that this code works</p>",
        "id": 363896789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686032024
    },
    {
        "content": "<p>Ok, I'll try that and see what breaks!</p>",
        "id": 363897303,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686032241
    },
    {
        "content": "<p>Also, there are a lot of <code>LocallyRinged</code> in mathlib3 with uppercase.  Would it make sense to add them to the nolinting in mathport?</p>",
        "id": 363897439,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686032289
    },
    {
        "content": "<p>you mean <code>uppercaseLean3</code> linter?</p>",
        "id": 363897551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686032334
    },
    {
        "content": "<p>yes, use that whenever you know the original is uppercase</p>",
        "id": 363897588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686032350
    },
    {
        "content": "<p><code>set_option linter.uppercaseLean3 false</code> around individual defs, sections or a whole file</p>",
        "id": 363897674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686032393
    },
    {
        "content": "<p>Yes, that linter, but I did not think that you could use it in a whole file.  Thanks!</p>",
        "id": 363897861,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686032435
    },
    {
        "content": "<p>search for examples in mathlib</p>",
        "id": 363898001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686032497
    },
    {
        "content": "<p>Before porting more AG, I think we should discuss/merge <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span>'s refactor of concrete categories</p>",
        "id": 363899759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686033176
    },
    {
        "content": "<p>Or was that already done?</p>",
        "id": 363899774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686033181
    },
    {
        "content": "<p>This one</p>\n<blockquote>\n<p>feat: change ConcreteCategory.hasCoeToFun to FunLike <a href=\"https://github.com/leanprover-community/mathlib4/pull/4693\">!4#4693</a></p>\n</blockquote>",
        "id": 363899852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686033209
    },
    {
        "content": "<p>Sure, I'll wait!</p>",
        "id": 363902168,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686033974
    },
    {
        "content": "<p>please review that PR if you feel like it <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 363902519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686034104
    },
    {
        "content": "<p>I can try, but I have never really worked with categories in mathlib: I was hoping that working on some partly ported file with hints from neighbouring ported files would be a good entry point...</p>",
        "id": 363902898,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686034249
    },
    {
        "content": "<p>hmm, unfortunately AG seems not to be such a place right now. Hopefully it will be after (some form of) that PR is merged</p>",
        "id": 363903520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686034471
    },
    {
        "content": "<p>There are three universes involved in <code>PresheafedSpace.{u, v, w} C</code>, the universes <code>u</code> and <code>v</code> of the category <code>C</code>, and the universe <code>w</code> where the carrier topological space lives. In <code>mathlib3</code>, some definitions unnecessarily assumed <code>w=v</code>; it is no longer so after <code>AlgebraicGeometry.PresheafedSpace</code> was ported. In the mathlib4 version of this file, there are no longer any explicit universe parameters. I would think we may get rid of them also in files like <code>OpenImmersion.Basic</code>. Anyway, placing <code>v</code> explicitly in <code>PresheafedSpace.{_, v} C</code> just does nothing if we have declared <code>[Category.{v} C]</code>.</p>",
        "id": 364076839,
        "sender_full_name": "Joël Riou",
        "timestamp": 1686074391
    },
    {
        "content": "<p>I have opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/5047\">!4#5047</a> for relaxing universe constrains</p>",
        "id": 366132980,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1686739433
    },
    {
        "content": "<p><code>RingedSpace</code> in mathlib3 only has one universe variable, so it assumed that the underlying topological space and the rings have the same universe level, should we relax this as well?  <del>If so, how can I do it without <code>bad universe level</code> linter complaining</del></p>",
        "id": 366144160,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1686741544
    },
    {
        "content": "<p>Probably <code>LocallyRingedSpace</code> couldn't be relaxed as it depends on colimit</p>",
        "id": 366146457,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1686741966
    },
    {
        "content": "<p>Yes, I think you are right: one universe parameter is enough for <code>LocallyRingedSpace</code>.</p>",
        "id": 366251547,
        "sender_full_name": "Joël Riou",
        "timestamp": 1686762428
    }
]