[
    {
        "content": "<p><code>linarith</code> is acting in a way that's surprising to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">does_not_work</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- linarith failed to find a contradiction</span>\n\n<span class=\"c1\">-- Same as previous lemma, but has `a` and `haj`, which shouldn't change</span>\n<span class=\"c1\">-- anything.</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">does_work</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">haj</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>\n<p>I was hoping that <code>linarith</code> would work for the lemma <code>does_not_work</code>, but I guess the fractions are too fancy for it.<br>\nBut then in the <code>does_work</code> lemma, which adds an irrelevant hypothesis, the tactic does succeed, which I find surprising.</p>\n<p>Is this a bug?</p>",
        "id": 386718251,
        "sender_full_name": "David Renshaw",
        "timestamp": 1692750727
    },
    {
        "content": "<p>Looks suspicious to me! <code>set_option trace.linarith true</code> might be helpful to see what is happening.</p>",
        "id": 386718557,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692750844
    },
    {
        "content": "<p>If I add <code>linarith[Real.pi_pos]</code> in the first lemma, then it does succeed.</p>",
        "id": 386718674,
        "sender_full_name": "David Renshaw",
        "timestamp": 1692750901
    },
    {
        "content": "<p>It looks like this is just that linarith doesn't know <code>pi</code> is non-zero until you tell it so (in a roundabout way). The first goal is indeed false if pi were to be zero</p>",
        "id": 386718702,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692750909
    },
    {
        "content": "<p>ahh</p>",
        "id": 386718746,
        "sender_full_name": "David Renshaw",
        "timestamp": 1692750935
    },
    {
        "content": "<p>so my <code>haj</code> implies that pi positive</p>",
        "id": 386718777,
        "sender_full_name": "David Renshaw",
        "timestamp": 1692750951
    }
]