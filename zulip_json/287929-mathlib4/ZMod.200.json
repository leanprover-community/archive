[
    {
        "content": "<p>Are there objections to adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CanLift</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">prf</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x.valMinAbs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ZMod.isUnit_zMod_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">lift</span> <span class=\"n\">m</span> <span class=\"n\">to</span> <span class=\"n\">ℤ</span> <span class=\"n\">using</span> <span class=\"n\">trivial</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">isUnit_iff_exists_inv.mp</span> <span class=\"n\">h</span>\n    <span class=\"n\">lift</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">ℤ</span> <span class=\"n\">using</span> <span class=\"n\">trivial</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">Int.isUnit_iff.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isUnit_iff_exists_inv.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">isUnit_one</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">isUnit_neg_one</span>\n</code></pre></div>\n<p>to <code>Data.ZMod.Basic</code>? (Golf welcome) <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> (who seems to have written the <code>lift</code> tactic originally)</p>",
        "id": 401537271,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699730820
    },
    {
        "content": "<p>Using lift for this seems quite surprising</p>",
        "id": 401537364,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699730939
    },
    {
        "content": "<p>How would you do it?</p>",
        "id": 401537374,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699730953
    },
    {
        "content": "<p>If we had a ring isomorphism with the integers, one could transport stuff, I assume.</p>",
        "id": 401537388,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699730980
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ZMod.isUnit_zMod_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Int.isUnit_iff</span>\n</code></pre></div>",
        "id": 401537536,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699731133
    },
    {
        "content": "<p>This is way too simple <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\nIs this defeq abuse?</p>",
        "id": 401537557,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699731188
    },
    {
        "content": "<p>It's defeq use. Up to you whether it's abuse :)</p>",
        "id": 401537573,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699731233
    },
    {
        "content": "<p>But thanks for pointing this out!</p>",
        "id": 401537574,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699731238
    },
    {
        "content": "<p>I am pretty sure <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZMod#doc\">docs#ZMod</a> is defined the way it is precisely so that one may look through the definition.</p>",
        "id": 401537752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699731437
    },
    {
        "content": "<p>I guess the other question is why you're using ZMod 0</p>",
        "id": 401537763,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699731471
    },
    {
        "content": "<p>The reason I need this is that I want to prove something for <code>ZMod n</code> without assumptions on <code>n</code>.</p>",
        "id": 401537837,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699731518
    },
    {
        "content": "<p>Yeah then look through as much as you want.</p>",
        "id": 401537853,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699731538
    }
]