[
    {
        "content": "<p>One of my students just now stumbled over something like the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- simp -- simp made no progress</span>\n  <span class=\"c1\">-- norm_cast -- no change</span>\n  <span class=\"c1\">-- push_cast -- no change</span>\n  <span class=\"c1\">-- rw [map_mul] -- tactic 'rewrite' failed</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">SignType.castHom_apply</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">]</span> <span class=\"c1\">-- works, but is not really obvious</span>\n</code></pre></div>\n<p>It looks like there are some <code>simp</code>/<code>norm_cast</code> lemmas missing here (also for <code>pow</code> [the actual problem was something like <code>((-1 : SignType) ^ k : ℤ) = (-1 : ℤ) ^ k</code>] and <code>zpow</code>).<br>\n<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ?</p>",
        "id": 408156966,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702635735
    },
    {
        "content": "<p>Strangely enough,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>does work. (<code>simp?</code> says <code>simp only [SignType.coe_neg_one, Nat.odd_iff_not_even]</code>.)</p>",
        "id": 408157428,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702635896
    },
    {
        "content": "<p>But the <em>actual</em> problem really was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where <code>simp</code> does not work...</p>",
        "id": 408157720,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702635987
    },
    {
        "content": "<p>What if you add <code>@[simp, norm_cast] lemma SignType.cast_pow (a : SignType) (k : Nat) : a ^ k = (a ^ k : alpha)</code> for appropriate <code>alpha</code>?</p>",
        "id": 408158712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702636316
    },
    {
        "content": "<p>I guess <em>somebody</em> should do that (including <code>_mul</code> and <code>_zpow</code>). Who implemented <code>SignType</code>?</p>",
        "id": 408159063,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702636406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span></p>",
        "id": 408159209,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702636430
    },
    {
        "content": "<p>This all seems reasonable to do, yes</p>",
        "id": 408161269,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702637092
    },
    {
        "content": "<p>OK, I can do it. Is <code>[MonoidWithZero α] [HasDistribNeg α]</code> the appropriate set of assumptions here?</p>",
        "id": 408161409,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702637143
    },
    {
        "content": "<p>MulZeroOneClass I think?</p>",
        "id": 408161804,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702637283
    },
    {
        "content": "<p>That does not want to give me powers. <code>failed to synthesize instance\n  HPow α ℕ ?m.16075</code> without <code>local macro_rules | `($x ^ $y) =&gt; `(HPow.hPow $x $y)</code>, and with it, I get <code>norm_cast: badly shaped lemma, rhs can't start with coe ↑(a ^ k)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">SignType.cast_pow</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MulZeroOneClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasDistribNeg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 408162412,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702637502
    },
    {
        "content": "<p>So I'll go ahead with <code>MonoidWithZero</code>, and people are welcome to try to weaken that...</p>",
        "id": 408163175,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702637770
    },
    {
        "content": "<p>Ah, that makes sense; yes, powers you'll need the monoids, just multiplication is okay with MulZeroOneClass</p>",
        "id": 408163220,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702637794
    },
    {
        "content": "<p>Nerd-sniped - assumptions probably not minimal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">SignType.cast_pow</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">SignType.castHom_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">SignType.cast_mul</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">SignType.castHom_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">SignType.cast_one</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">SignType.castHom_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">SignType.cast_neg</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">castHom</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">castHom</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">castHom</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">castHom</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">castHom</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n  <span class=\"c1\">-- norm_cast doesn't work</span>\n  <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">norm_cast</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 408163547,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702637911
    },
    {
        "content": "<p>Then <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> , I'll let you do the PR <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 408163640,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702637951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Could you make a mwe for \"badly shaped lemma\"? It might be useful to improve error messages in the elaborator.</p>",
        "id": 408163689,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702637976
    },
    {
        "content": "<p>Ha. Not right now :)</p>",
        "id": 408163825,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702638013
    },
    {
        "content": "<p><code>SignType.coe_{one|zero|neg_one}</code> do exist, BTW.</p>",
        "id": 408164052,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702638086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sign</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">norm_cast</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">SignType.cast_pow</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MulZeroOneClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasDistribNeg</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">SignType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- norm_cast: badly shaped lemma, rhs can't start with coe</span>\n<span class=\"c1\">--  ↑(a ^ k)</span>\n</code></pre></div>",
        "id": 408164506,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702638242
    },
    {
        "content": "<p>The error message goes away when writing <code>(a : α) ^ k</code> on the rhs.</p>",
        "id": 408164685,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702638302
    },
    {
        "content": "<p>Thanks for the mwe. I see, it's entirely caused by <code>local macro_rules | `($x ^ $y) =&gt; `(HPow.hPow $x $y)</code>, and without it you get a reasonable error message*. (PSA: this <code>macro_rules</code> trick should no longer be needed for anything. It was for an elaborator issue where you'd get the wrong <code>^</code>, not for failing to find an instance.)</p>\n<p>(*) It's \"reasonable\", but it could be probably be more helpful than \"failed to synthesize instance <code>HPow α ℕ ?m.2519</code>\". I wonder if one day there might be documentation attached to classes that could give hints about how to get certain instances when there's an instance synthesis failure?</p>",
        "id": 408165403,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702638570
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9074\">#9074</a></p>",
        "id": 408165571,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702638631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Apparently the <code>mcaro_rules</code> lead to the coercion being outside instead of inside.</p>",
        "id": 408166487,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702639001
    },
    {
        "content": "<p>Wait, why do you still have the <code>macro_rules</code>? The lean bug was fixed</p>",
        "id": 408168179,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702639693
    },
    {
        "content": "<p>I guess Kyle said that</p>",
        "id": 408168216,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702639708
    },
    {
        "content": "<p>I tried that because without it, I got the error \"failed to synthesize instance <code>HPow α ℕ ?m.2519</code>\" mentioned above.</p>",
        "id": 408168311,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702639755
    },
    {
        "content": "<p>If people are fiddling with <code>Data.Sign</code> then on line 394 there's <code>attribute [local instance] LinearOrderedRing.decidableLT</code> with a comment \"I'm not sure why this is necessary\", but as far as I can see it is indeed not necessary.</p>",
        "id": 408171288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702641030
    },
    {
        "content": "<p>I can try to remove it and see what happens.</p>",
        "id": 408171861,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702641258
    },
    {
        "content": "<p>It was necessary in lean3 to work around some issue</p>",
        "id": 408172696,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702641594
    },
    {
        "content": "<p>It was only local to the file so if it builds then we are all good :)</p>",
        "id": 408172780,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702641611
    }
]