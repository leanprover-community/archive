[
    {
        "content": "<p>By the way, what is going on here? <code>ring failed: not an equality</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"c1\">-- goal is `1 * f a * 1 = f a`</span>\n  <span class=\"n\">ring1</span> <span class=\"c1\">-- ring failed: not an equality</span>\n</code></pre></div>",
        "id": 339759295,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678062688
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Bug.20in.20.02klzzwxh.3A0000.03.3F\">#mathlib4 &gt; Bug in <code>ring_nf</code>?</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 339759812,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678063141
    },
    {
        "content": "<p>Adding a line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>fixes it, so it seeems that the problem genuinely is the tactic's failure to identify the equality structure of the goal.</p>",
        "id": 339760389,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678063622
    },
    {
        "content": "<p>Hmm, seems like <code>ring</code> relies on <code>.eq?</code> immediately after getting the type of the goal, which ultimately relies on boolean equality of names (i.e. there's no <code>isDefEq</code> check or <code>whnf</code> or the like)</p>",
        "id": 339761140,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678064265
    },
    {
        "content": "<p>But that's weird. The goal does seem to be an <code>Eq</code> application.</p>",
        "id": 339761293,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678064401
    },
    {
        "content": "<p>Ah! It's the mdata.</p>",
        "id": 339762086,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678064994
    },
    {
        "content": "<p>Specifically, <code>.mdata noImplicitLambda:1</code>, as it shows up in <code>pp.raw</code></p>",
        "id": 339762169,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678065035
    },
    {
        "content": "<p>Replacing lines 1068-1069 in Ring.Basic with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.consumeMData</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g.getType</span><span class=\"o\">))</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">eq</span><span class=\"bp\">?</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"ring failed: not an equality\"</span>\n</code></pre></div>\n<p>fixes it</p>",
        "id": 339762413,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678065256
    },
    {
        "content": "<p>(But I’m not sure if we’d prefer just a whnf or something? (as well? Does whnf strip mdata?) Called away right now, so can’t explore further!)</p>",
        "id": 339762543,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678065373
    },
    {
        "content": "<p>with <code>whnfR</code> instead of <code>consumeMData</code> that's exactly the same bugfix as I have applied to a small handful of other tactics</p>",
        "id": 339762943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678065757
    },
    {
        "content": "<p>it's a very common pitfall</p>",
        "id": 339762956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678065775
    },
    {
        "content": "<p>PR'd (<code>whnfR</code> version): <a href=\"https://github.com/leanprover-community/mathlib4/pull/2677\">!4#2677</a></p>",
        "id": 339766460,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678069411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Bug.20in.20.60ring1.60.3F/near/339762943\">said</a>:</p>\n<blockquote>\n<p>with <code>whnfR</code> instead of <code>consumeMData</code> that's exactly the same bugfix as I have applied to a small handful of other tactics</p>\n</blockquote>\n<p>One such bugfix by Mario from Feb 8 is still awaiting review, if any tactic experts get time: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2173\">!4#2173</a></p>",
        "id": 339778502,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678079799
    },
    {
        "content": "<p>Since as they say you won't recognize your code after coming back to it for a while, I've given it a proper independent review :) and hit the merge button</p>",
        "id": 339778839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678080011
    }
]