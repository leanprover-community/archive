[
    {
        "content": "<p>It seems that <a href=\"https://github.com/leanprover-community/mathlib4/pull/3215\">!4#3215</a> (meta code) is holding up data.matrix.notation, which is now at the top of the port dashboard (with 614 dependents). From my, admittedly unexperienced, eyes, this seems like it's ready. Is there any reason we're not merging it?</p>",
        "id": 348732560,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681306587
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3215\">!4#3215</a></p>",
        "id": 348737175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681307627
    },
    {
        "content": "<p>In principle we could port <code>data.matrix.notation</code> without the actual notation, and comment out all the lemmas that use the notation (there aren't all that many)</p>",
        "id": 348737410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681307671
    },
    {
        "content": "<p>But isn't 3215 ready? Is it controversial or unfinished for some reason I'm missing?</p>",
        "id": 348741750,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681308535
    },
    {
        "content": "<p>It might well be, there just aren't many people qualified to review (and I don't really consider myself one of them)</p>",
        "id": 348744262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681308986
    },
    {
        "content": "<p>Indeed, I'm just looking to get some experienced eyes on it since <code>data.matrix.notation</code> is at the top of the <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, if you have the time to look it would be great. If not, I understand.</p>",
        "id": 348756842,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1681311322
    },
    {
        "content": "<p>Sorry about the long delay on this one. I've merged.</p>",
        "id": 349210401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681419364
    },
    {
        "content": "<p>I'll make a start on data.matrix.notation</p>",
        "id": 349211001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681419609
    },
    {
        "content": "<p>It looks like there's a bug in <code>start_port.sh</code> that makes it think entries in <a href=\"https://github.com/leanprover-community/mathlib4/wiki/port-comments\">#port-comments</a> are porting PRs...</p>",
        "id": 349211392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681419763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, how much work is it to teach mathport about <code>!![]</code> syntax? (And ask it to leave it alone)</p>",
        "id": 349212122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681420043
    },
    {
        "content": "<p>If it was defined with <code>notation</code> then it should just work. What is it doing currently?</p>",
        "id": 349218890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681422880
    },
    {
        "content": "<p>It's <code>@[user_notation]</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.notation\">docs#matrix.notation</a>)</p>",
        "id": 349219891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681423330
    },
    {
        "content": "<p>I don't expect to get valid lean4 code to parse the syntax</p>",
        "id": 349219926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681423349
    },
    {
        "content": "<p>But right now every lemma with <code>!![a, b; c, d]</code> in it gets replaced with <code>«expr!![ »</code> and the <code>a, b; c, d</code> are dropped completely</p>",
        "id": 349220041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681423401
    },
    {
        "content": "<p>Oh, I didn't know mathlib had any user notations, somehow this fell through the cracks during the original census</p>",
        "id": 349223957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681425207
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3429\">!4#3429</a> has to be merged before mathport can be updated</p>",
        "id": 349224171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681425291
    },
    {
        "content": "<p>Is there a reason that doesn't know about <code>\", \"</code>?</p>",
        "id": 349224231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681425326
    },
    {
        "content": "<p>The full breadth of syntax is outlined here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/test/matrix.lean#L27-L35\">https://github.com/leanprover-community/mathlib/blob/master/test/matrix.lean#L27-L35</a></p>",
        "id": 349224437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681425423
    },
    {
        "content": "<p>It does both <code>;</code> and <code>,</code>, although I don't know what's up with those empty cells in your quote</p>",
        "id": 349224680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681425551
    },
    {
        "content": "<p>i.e. <code>!![1, 2; 3, 4; 5, 6]</code> was tested and works</p>",
        "id": 349224704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681425570
    },
    {
        "content": "<p>but not <code>!![;;]</code></p>",
        "id": 349224716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681425580
    },
    {
        "content": "<p>what does that even mean?</p>",
        "id": 349224721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681425585
    },
    {
        "content": "<p>if you want to write the syntax I'll use it</p>",
        "id": 349224771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681425602
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/pull/235\">mathport#235</a></p>",
        "id": 349224885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681425645
    },
    {
        "content": "<p>!![;;] is a 0x2 matrix</p>",
        "id": 349225707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681426020
    },
    {
        "content": "<p>But I guess we can always improve the handling of those corner cases laterr</p>",
        "id": 349225886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681426100
    },
    {
        "content": "<p>How about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">matrixNotation</span><span class=\"o\">)</span> <span class=\"s2\">\"!![\"</span> <span class=\"n\">sepBy1</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span><span class=\"o\">,</span> <span class=\"s2\">\"; \"</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">matrixNotationCx0</span><span class=\"o\">)</span> <span class=\"s2\">\"!![\"</span> <span class=\"s2\">\";\"</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">matrixNotation0xR</span><span class=\"o\">)</span> <span class=\"s2\">\"!![\"</span> <span class=\"s2\">\",\"</span><span class=\"bp\">+</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 349226153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681426207
    },
    {
        "content": "<p>I'm afraid I haven't learnt how to read Lean4 syntax yet</p>",
        "id": 349226295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681426273
    },
    {
        "content": "<p>But that looks plausible</p>",
        "id": 349226317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681426285
    },
    {
        "content": "<p>Trailing commas and <code>;</code> are legal (no-ops) in <code>matrixNotation</code> too</p>",
        "id": 349226372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681426308
    },
    {
        "content": "<p>you can test it out by writing <code>#check !![1, 2]</code> immediately afterward</p>",
        "id": 349226853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681426517
    },
    {
        "content": "<p>I think adding <code>allowTrailingSep</code> will do the job</p>",
        "id": 349227225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681426690
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">matrixNotation</span><span class=\"o\">)</span> <span class=\"s2\">\"!![\"</span> <span class=\"n\">sepBy1</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span><span class=\"o\">,</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"s2\">\";\"</span><span class=\"o\">,</span> <span class=\"s2\">\"; \"</span><span class=\"o\">,</span> <span class=\"n\">allowTrailingSep</span><span class=\"o\">)</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">matrixNotationCx0</span><span class=\"o\">)</span> <span class=\"s2\">\"!![\"</span> <span class=\"s2\">\";\"</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">matrixNotation0xR</span><span class=\"o\">)</span> <span class=\"s2\">\"!![\"</span> <span class=\"s2\">\",\"</span><span class=\"bp\">+</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">;</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"bp\">;</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 349227240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681426697
    },
    {
        "content": "<p>it's a thing of beauty</p>",
        "id": 349227304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681426729
    },
    {
        "content": "<p>That passes all my tests:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">;</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">;;</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[,]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[,,]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">;</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"bp\">;</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">;</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"bp\">;</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"bp\">;</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"bp\">;</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"bp\">;</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,]</span>\n</code></pre></div>",
        "id": 349227327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681426737
    },
    {
        "content": "<p>Though the names are maybe backwards, <code>matrixNotationCx0</code> is the column matrix with C rows and 0 columns; so maybe <code>Rx0</code> is better</p>",
        "id": 349227522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681426804
    },
    {
        "content": "<p>Wow I never knew about <code>@[user_notation]</code>!</p>",
        "id": 349261891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681447674
    },
    {
        "content": "<p>Unfortunately all the time I spent trying to work out what it did in lean 3 is now useless in lean 4!</p>",
        "id": 349296041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681459669
    },
    {
        "content": "<p>Here's some more prework for <code>data.matrix.notation</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/3430\">!4#3430</a>. For reasons I haven't attempted to understand, adding this <code>ToExpr</code> instance (or the imports needed to add it) has made a very-downstream <code>rw</code> more powerful</p>",
        "id": 349342939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681471340
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3430\">!4#3430</a></p>",
        "id": 349348647,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1681472359
    },
    {
        "content": "<p>I'd appreciate some lean4 metaprogramming help in the tests in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3427\">!4#3427</a>; the Lean 3 code was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_dims</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">elem_t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_meta_var</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"n\">level.zero.succ</span><span class=\"o\">),</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">%%</span><span class=\"n\">elem_t</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matrix.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">%%</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">%%</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">elem_t</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which essentially just elaborates <code>e</code> with type <code>matrix _ _ X</code> for some unspecified <code>X</code>, and then verifies that the result matches <code>matrix (fin m) (fin n) _</code>. I've made an uneducated guess at what the translation might be, but it doesn't actually compile and it would probably be easier for someone already familiar with Lean4 meta code to finish it up</p>",
        "id": 350220670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681596885
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3427/files#diff-9b00fafcd836e0b0f7ff8af759b53c68477cbda1f71456fd0271ec403f2080ebR28-R34\">My lean 4 attempt</a> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getDims</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Lean.TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lean.MetaM</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">elem_t</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">elem_t</span><span class=\"o\">))</span> <span class=\"n\">true</span> <span class=\"n\">false</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.inferType</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">elem_t</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 350220699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681596930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I wasn't sure how to use qq here, but I think I got <code>getDims</code> working. I also added support for trailing separators, given that some of the tests had them.</p>",
        "id": 350227570,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681601994
    },
    {
        "content": "<p>Thanks! <del>It looks like my confusion was caused by not knowing what the lean 4 version of pexpr is; I guess it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Term#doc\">docs4#Lean.Term</a> not Syntax?</del></p>",
        "id": 350228108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681602421
    },
    {
        "content": "<p>I think <code>pexpr</code> sort of corresponds to <code>Term</code> (which is <code>TSyntax `term</code>, which is a thin wrapper around <code>Syntax</code> just to keep track of what the syntax is for -- <code>Syntax</code> is sort of like a raw s-expression with source position information). Lean 4 is more careful about distinguishing <code>Syntax</code> vs <code>Expr</code>, rather than trying to do everything with unelaborated exprs vs elaborated exprs.</p>",
        "id": 350228377,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681602658
    },
    {
        "content": "<p>Just exploring a bit here—thought I'd share a variation of Kyle's solution that uses Qq (and shortens the overall test syntax). Oddly the <code>have el : Q(Type v)</code> is necessary for <code>q(Matrix ...)</code> to work, even though <code>el : Q(Type v)</code> already appears in the context. I wonder if this is a Qq bug (something to do with ldecls, maybe?).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"#guard_dims \"</span> <span class=\"n\">term</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|#</span><span class=\"n\">guard_dims</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">dims</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">dims</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"bp\">&lt;|←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">dims</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">el</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">el</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">el</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">el</span><span class=\"o\">))</span>\n  <span class=\"n\">Elab.Term.synthesizeSyntheticMVarsUsingDefault</span>\n  <span class=\"k\">let</span> <span class=\"n\">dims'</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"n\">unless</span> <span class=\"n\">dims'</span> <span class=\"bp\">==</span> <span class=\"n\">dims</span> <span class=\"k\">do</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"inferred dimensions {dims'} are not exactly equal to {dims}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">guard_dims</span> <span class=\"bp\">!!</span><span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_dims</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">;</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_dims</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">;</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- inferred dimensions (1, 0) are not exactly equal to (Nat.succ 0, 0)</span>\n</code></pre></div>",
        "id": 350234552,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1681607007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> Nice idea to use a command. I'm still seeming to have troubles with using qq so I didn't use your code directly, but I've used your idea to make a <code>#guard</code> command and a <code>dims%</code> elaborator, so you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">guard</span> <span class=\"n\">dims</span><span class=\"bp\">%</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"bp\">;</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"n\">is</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>There's a <code>#guard x is y</code> command and a <code>#guard x</code> command, where the first checks that they elaborate to the same thing and the second checks that <code>x</code> is a <code>Bool</code> that evaluates to true (allowing you to do <code>#guard x = y</code> when you have decidable equality for value-based equality). <a href=\"https://github.com/leanprover-community/mathlib4/pull/3427/commits/7c97593f19be40494ba3f3e1b06a24f9ee2e32cb\">(commit)</a></p>\n<p>(edit: in a more recent commit it now looks like <code>#guard_expr dims% !![1,2;3,4] =ₛ (2, 2)</code> to match the <code>guard_expr</code> tactic)</p>",
        "id": 350537532,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681742725
    },
    {
        "content": "<p>By the way, mathport seems to be handling matrix notation fairly well now: <a href=\"https://github.com/leanprover-community/mathlib3port/commit/ce473067ae4fc0609b3199853f1de1c5ede921cf#diff-1a50515965a8e7d8b2cb284a9c8f815b7aabef01bda2b89d74f950e28a82c9c1\">https://github.com/leanprover-community/mathlib3port/commit/ce473067ae4fc0609b3199853f1de1c5ede921cf#diff-1a50515965a8e7d8b2cb284a9c8f815b7aabef01bda2b89d74f950e28a82c9c1</a></p>",
        "id": 350541542,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681743524
    },
    {
        "content": "<p>There's just the constant <code>/- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:31:4: unsupported: too many args: matrix.notation ... #[[]] -/</code>, but the non-commented output looks fine</p>",
        "id": 350541760,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681743571
    },
    {
        "content": "<p>Oh, I thought we'd have to wait overnight for that to have an effect</p>",
        "id": 350552273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681745697
    },
    {
        "content": "<p>It's unfortunate that it loses our nice formatting, translating</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">E₆</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span> <span class=\"mi\">2</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"bp\">;</span>\n                                         <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">2</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"bp\">;</span>\n                                        <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"bp\">;</span>\n                                         <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"bp\">;</span>\n                                         <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">;</span>\n                                         <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">e₆</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 350552686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681745792
    },
    {
        "content": "<p>Does <code>Syntax</code> have a way of specifying preferred positions for line-breaks like <code>Std.Format</code> does?</p>",
        "id": 350553240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681745902
    },
    {
        "content": "<p>If not, can we teach mathport to output <code>-- porting todo: please re-wrap</code> or something?</p>",
        "id": 350553401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681745941
    },
    {
        "content": "<p>It's only the fetching of data from mathlib3 that runs every day. The script that parses the mathlib3 notation and pushes the results to mathlib3port runs every 2 hours</p>",
        "id": 350556188,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681746573
    },
    {
        "content": "<p>Right; I wasn't sure where the line between \"fetching mathlib3 data\" and \"parsing mathlib3 notation\" fell</p>",
        "id": 350557507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681746914
    },
    {
        "content": "<p>Fixed with help from <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span>; <a href=\"https://github.com/leanprover-community/mathlib3port/blob/a06e1e15a0d70135046dcfd46a90b6a1dfc20d7a/Mathbin/Algebra/Lie/CartanMatrix.lean#L214-L220\">it's now</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">e₆</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n    <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">;</span>\n    <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which I think is probably ok enough not to worry about.</p>",
        "id": 350629827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681772138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598052\">Jeremy Tan</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233215.20and.20data.2Ematrix.2Enotation/near/350541760\">said</a>:</p>\n<blockquote>\n<p>There's just the constant <code>/- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:31:4: unsupported: too many args: matrix.notation ... #[[]] -/</code>, but the non-commented output looks fine</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, is removing <a href=\"https://github.com/leanprover-community/mathlib3port/blob/a06e1e15a0d70135046dcfd46a90b6a1dfc20d7a/Mathbin/Algebra/Lie/CartanMatrix.lean#L204\">these comments</a> an easy fix?</p>",
        "id": 350629920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681772163
    },
    {
        "content": "<p>if it's producing those comments then it's broken</p>",
        "id": 350630168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681772276
    },
    {
        "content": "<p>Is this something to do with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.notation\">docs#matrix.notation</a> taking two arguments, a dummy token and then the actual parser?</p>",
        "id": 350630341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681772344
    },
    {
        "content": "<p>oh, I think it is not that but rather the <code>matrix.notation</code> is itself a value of type <code>parser expr</code>, i.e. it can do more parsing in the body. I think it doesn't, from what I can tell, but it still makes a nullary call to the parser (equivalent to an extra argument <code>parse (pure ())</code>) which should be accounted for</p>",
        "id": 350630803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681772494
    },
    {
        "content": "<p>it would have made more sense to just put the <code>val</code> part inside the body, that's what other user notations do</p>",
        "id": 350630985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681772547
    },
    {
        "content": "<p>I don't think I had many examples to go by when I wrote it</p>",
        "id": 350632630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681773197
    },
    {
        "content": "<p>Are you proposing changing mathlib3, or just adding a hack in mathport? The latter has the advantage of being 24 hours faster</p>",
        "id": 350632671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681773232
    },
    {
        "content": "<p>(I guess cleaning up all the comments during porting is also an option, but not a great one)</p>",
        "id": 350632748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681773257
    },
    {
        "content": "<p>it's a one line change in mathport, so I'll just do that</p>",
        "id": 350632882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681773334
    },
    {
        "content": "<p>(which takes an hour to test)</p>",
        "id": 350633136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681773446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.233215.20and.20data.2Ematrix.2Enotation/near/350633136\">said</a>:</p>\n<blockquote>\n<p>(which takes an hour to test)</p>\n</blockquote>\n<p>It passed: <a href=\"https://github.com/leanprover-community/mathlib3port/commit/7809aa1d4c28275702b162020c7a69e28593397e#diff-6d63022fcbe48e608f5e19d1e048ee1f19b2ec0f33bdc1db4293f74dc3314712\">https://github.com/leanprover-community/mathlib3port/commit/7809aa1d4c28275702b162020c7a69e28593397e#diff-6d63022fcbe48e608f5e19d1e048ee1f19b2ec0f33bdc1db4293f74dc3314712</a></p>",
        "id": 350659682,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681786663
    },
    {
        "content": "<p>How close is <a href=\"https://github.com/leanprover-community/mathlib4/pull/3215\">!4#3215</a> to being merged?</p>",
        "id": 351077665,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681917036
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3225\">!4#3225</a></p>",
        "id": 351080330,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681917612
    },
    {
        "content": "<p>It's missing the <code>awaiting-review</code> label</p>",
        "id": 351080644,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681917682
    },
    {
        "content": "<p>Yes, now what?</p>",
        "id": 351080716,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681917699
    },
    {
        "content": "<p>Now it's awaiting review</p>",
        "id": 351080938,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681917739
    },
    {
        "content": "<p>wait… I meant <a href=\"https://github.com/leanprover-community/mathlib4/pull/3427\">!4#3427</a></p>",
        "id": 351080965,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1681917746
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib4/pull/3427#discussion_r1169428392\">remaining work</a> is the PR the <code>guard_expr</code> stuff separately</p>",
        "id": 351083194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681918189
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 351083226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681918195
    },
    {
        "content": "<p>I don't know if we would prefer to put it straight in std, or just dump it in the <code>test</code> directory and move it later</p>",
        "id": 351083370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681918213
    },
    {
        "content": "<p>I merged. Let's still clean up <code>#guard_expr</code>, however! I've been wanting this elsewhen.</p>",
        "id": 351206362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681966027
    }
]