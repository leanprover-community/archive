[
    {
        "content": "<p>The next big boss seems to be <a href=\"https://github.com/leanprover-community/mathlib4/pull/5074\">!4#5074</a> (at least it is short...). In particular I am stuck with <code>Step.isIntegral</code>, that timeouts. I have an horribly slow proof, that works with <code>set_option maxHeartbeats 5000000 in</code> .</p>\n<p>I think that one of the culprit is the use of <code>RingHom.toAlgebra</code>, but I am not sure.</p>",
        "id": 366838873,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686923440
    },
    {
        "content": "<p>I am currently looking for a slightly different proof</p>",
        "id": 366840038,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686923649
    },
    {
        "content": "<p>Not directly related to the PR, but I can see that <code>AlgebraicClosure</code> is not marked as irreducible, which means that the gory details of the construction are available to the kernel whenever one uses it. Wouldn't it make sense to make it irreducible?</p>",
        "id": 366840732,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1686923796
    },
    {
        "content": "<p>There are various <code>smul</code> diamonds that only commute for <code>SplittingField</code> and <code>TensorProduct</code>if they are not irreducible I believe. The same may be true of algebraic closure, although I believe it wasn't constructed with as much care so they might not commute anyway.</p>",
        "id": 366853769,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1686926192
    },
    {
        "content": "<p>I am wondering if we should change the definition, following what you did with <code>SplittingField</code>.</p>",
        "id": 366854055,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686926256
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Nontrivial.20typeclass.20def-eqs\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Nontrivial.20typeclass.20def-eqs</a> is an example for <code>TensorProduct</code></p>",
        "id": 366855119,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1686926454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/!4.235074.20FieldTheory.2EIsAlgClosed.2EAlgebraicClosure/near/366854055\">said</a>:</p>\n<blockquote>\n<p>I am wondering if we should change the definition, following what you did with <code>SplittingField</code>.</p>\n</blockquote>\n<p>I think the definition <code>AdjoinMonic</code> in the current file is the algebraic closure and satisfies the nice def-eqs because it is a quotient of <code>MvPolynomial</code>. Kenny couldn't be bothered to prove this was algebraically closed and carried on adding all the roots and taking some direct limit to make a field that was easier to prove was algebraically closed, but I think proving <code>AdjoinMonic</code> is algebraically closed is the best construction.</p>",
        "id": 366856122,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1686926630
    },
    {
        "content": "<p>I don't mean to change the mathematical construction, but the way it is written in Lean. Currently, the real this is <code>AdjoinMonic</code>, used to define <code>stepAux</code>. Then no instance are added to <code>stepAux</code>, but we define <code>Step = stepAux.1</code> and we add the various instance.</p>\n<p>Now, the prof that <code>Step k n</code> is algebraic is essentially an induction on <code>n</code>, as follows: the case <code>n=0</code> is easy, and we split the <code>n+1</code> case via the tower <code>k → Step k n → Step k (n+1)</code>. The first morphism is algebraic by induction hypothesis and the second because of the properties of <code>AdjoinMonic</code>. The problem is that Lean has troubles in understanding that the second morphism is the one given by <code>AdjoinMonic</code></p>",
        "id": 366861329,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686927658
    },
    {
        "content": "<p>I tried to unfold manually <code>Step</code>, and things seem to be faster, but then all the instances (for example <code>Algebra k </code>stepAux``) are missing</p>",
        "id": 366861896,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686927764
    },
    {
        "content": "<p>But I am done for today :(</p>",
        "id": 366862187,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686927822
    },
    {
        "content": "<p>I've pushed the proof I have, with two <code>sorry</code> that makes it working without increasing the hearbeats. I tried to use <code>RingHom.IsIntegral</code> to have more control on the algebra instances.</p>",
        "id": 366863929,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1686928135
    },
    {
        "content": "<p>I got a somewhat faster version (only 700000 Heartbeats) by separating out some things. I'll push it for now - everything compiles, but some proofs are still slow (max. is 900 k further down in the file).</p>",
        "id": 367443021,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687113623
    },
    {
        "content": "<p>I'll open it up for review, but please take another look whether you like it <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> !</p>",
        "id": 367443650,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1687113918
    },
    {
        "content": "<p>I will have a look tomorrow, thanks!</p>",
        "id": 367456862,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1687120584
    }
]