[
    {
        "content": "<p>Our CI for Mathlib run <code>lake env lean test/whatever.lean</code> to execute each test file. But this isn't picking up the pretty-printing options from the Mathlib lakefile. <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6908968701/job/18800977109\">This failure</a> comes from a <code>guard_msg</code> that works perfectly inside VSCode but fails in CI because of the ugly <code>fun ... =&gt; ...</code> that is the default printting.</p>",
        "id": 402789861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700260182
    },
    {
        "content": "<p>We've been adding <code>set_option pp.unicode.fun true</code> to tests as a workaround</p>",
        "id": 402790059,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700260321
    },
    {
        "content": "<p>Thanks for fixing this, but I think we need a better solution in the long run.</p>",
        "id": 402790311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700260454
    },
    {
        "content": "<p>Is this something we should consider to be a lake issue or an issue with our CI setup?</p>",
        "id": 402790334,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700260471
    },
    {
        "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> for an opinion on this.</p>\n<p>Obviously we are just missing a good testing framework for Lean, but in the meantime solving these annoyances will inform what such a testing framework should do.</p>\n<p>One option is to make the tests into their own library, i.e. another <code>lean_lib</code> in the <code>lakefile</code>, like we have <code>Archive</code> and <code>Counterexamples</code> in Mathlib. This will then pick up options set at either the package or library level, and you'll be able to run all the tests with <code>lake build Test</code>.</p>",
        "id": 402805074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700267990
    },
    {
        "content": "<p>Currently this is problematic because this will prevent a downstream project having its own <code>lean_lib Test</code>.</p>\n<p>I think after our lake meeting yesterday <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> has an idea about solving this (an option so that for downstream projects Mathlib's <code>lean_lib Test</code> will look like <code>Mathlib.Test</code>), but I'm not sure whose job it is to write this up as an RFC issue. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>?</p>",
        "id": 402805351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700268100
    },
    {
        "content": "<p>I think we could write the test suite as a lake script, although I really don't like adding lines to the lakefile</p>",
        "id": 402806516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700268563
    },
    {
        "content": "<p>with that approach you would be able to call lean with the right arguments</p>",
        "id": 402806589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700268597
    },
    {
        "content": "<p>Alternatively a <code>lake exe</code>. (I agree that I don't want any lake scripts if possible.)</p>",
        "id": 402807819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700269055
    }
]