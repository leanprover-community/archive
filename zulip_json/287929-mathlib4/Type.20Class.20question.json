[
    {
        "content": "<p>Imagine I want a Class to extend two preexisting classes, but I want the name of one of the fields of one of them to be renamed to something else. What is the recommended way?</p>\n<p>In practice, I refactored <code>MulActionHom</code>to authorise equivariant actions that pass through a morphism, where the field is called <code>map_smul</code>, and then this needs to be passed to <code>LinearMap</code>, where the field is called <code>map_smulₛₗ</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MulActionHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)}</span>\n<span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The proposition that the function preserves the action. -/</span>\n  <span class=\"n\">map_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">SemilinearMapClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">AddHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span><span class=\"o\">,</span> <span class=\"n\">MulActionHomClass</span> <span class=\"n\">F</span> <span class=\"n\">σ</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span>\n</code></pre></div>\n<p>but the field <code>map_smul</code> inherited from <code>MulActionHomClass</code> should be called <code>map_smulₛₗ</code> to avoid changing the whole library…</p>",
        "id": 376761372,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689792326
    },
    {
        "content": "<p>BTW, should we merge <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DistribMulActionHom#doc\">docs#DistribMulActionHom</a> ?</p>",
        "id": 376764134,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689793041
    },
    {
        "content": "<p>The fact that we have both of these is quite funny x)</p>",
        "id": 376764875,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689793232
    },
    {
        "content": "<p>To be quite honest the word \"DistribMulActionHom\" is already pretty funny. That's what happens if you let computer scientists name things... (cf also <a href=\"https://mathstodon.xyz/@xenaproject/110433539465277473\">this</a>)</p>",
        "id": 376765327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689793338
    },
    {
        "content": "<p>In lean3 we could have written <code>extends foo renaming bar -&gt; baz</code>. Do we not have such a thing in lean4? I just tried and it doesn't work.</p>",
        "id": 376765504,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1689793387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20Class.20question/near/376764134\">said</a>:</p>\n<blockquote>\n<p>BTW, should we merge <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap#doc\">docs#LinearMap</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DistribMulActionHom#doc\">docs#DistribMulActionHom</a> ?</p>\n</blockquote>\n<p>I had a mathlib3 PR that did this (pre-semilinear map) but had timeout issues. Extra generality sadly comes with performance costs, and \"it would be tidier to merge these\" isnt a very valuable generalization.</p>",
        "id": 376774160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689795719
    }
]