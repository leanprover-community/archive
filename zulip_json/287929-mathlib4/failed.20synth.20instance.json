[
    {
        "content": "<p>Consider this MWE (<a href=\"https://lean.math.hhu.de/#code=import%20Mathlib.Algebra.Module.LinearMap%0A%0Avariable%20%7BR%20M%20%3A%20Type%7D%20%5BSemiring%20R%5D%20%5BAddCommMonoid%20M%5D%20%5BModule%20R%20M%5D%0A%23synth%20SemilinearMapClass%20(M%20%E2%86%92%E2%82%97%5BR%5D%20M)%20(RingHom.id%20R)%20M%20M%0A--%20works%3A%0A--%20%5BMeta.synthInstance%5D%20%E2%9C%85%20SemilinearMapClass%20(M%20%E2%86%92%E2%82%97%5BR%5D%20M)%20(RingHom.id%20R)%20M%20M%20%E2%96%BC%0A--%20%20%20%5B%5D%20%E2%9C%85%20apply%20%40LinearMap.instSemilinearMapClassLinearMap%20to%20SemilinearMapClass%20(M%20%E2%86%92%E2%82%97%5BR%5D%20M)%20(RingHom.id%20R)%20M%20M%20%E2%96%BC%0A--%20%20%20%20%20%5BtryResolve%5D%20%E2%9C%85%20SemilinearMapClass%20(M%20%E2%86%92%E2%82%97%5BR%5D%20M)%20(RingHom.id%20R)%20M%20M%20%E2%89%9F%20SemilinearMapClass%20(M%20%E2%86%92%E2%82%97%5BR%5D%20M)%20(RingHom.id%20R)%20M%20M%20%0A%0Avariable%20%7BS%20N%20%3A%20Type%7D%20%5BRing%20S%5D%20%5BAddCommMonoid%20N%5D%20%5BModule%20S%20N%5D%0A%23synth%20SemilinearMapClass%20(N%20%E2%86%92%E2%82%97%5BS%5D%20N)%20(RingHom.id%20S)%20N%20N%0A--%20fails%3A%0A--%20%5BMeta.synthInstance%5D%20%E2%9D%8C%20SemilinearMapClass%20(N%20%E2%86%92%E2%82%97%5BS%5D%20N)%20(RingHom.id%20S)%20N%20N%20%E2%96%BC%0A--%20%20%20%5B%5D%20%E2%9D%8C%20apply%20%40LinearMap.instSemilinearMapClassLinearMap%20to%20SemilinearMapClass%20(N%20%E2%86%92%E2%82%97%5BS%5D%20N)%20%3Fm.5106%20%3Fm.5107%20%3Fm.5108%20%E2%96%BC%0A--%20%20%20%20%20%5BtryResolve%5D%20%E2%9D%8C%20SemilinearMapClass%20(N%20%E2%86%92%E2%82%97%5BS%5D%20N)%20%3Fm.5106%20%3Fm.5107%20%3Fm.5108%20%E2%89%9F%20SemilinearMapClass%20(%3Fm.5120%20%E2%86%92%E2%82%9B%E2%82%97%5B%3Fm.5128%5D%20%3Fm.5121)%20%3Fm.5128%20%3Fm.5120%20%3Fm.5121%0A\">see webeditor</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.LinearMap</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SemilinearMapClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">M</span>\n<span class=\"c1\">-- works:</span>\n<span class=\"c1\">-- [Meta.synthInstance] ✅ SemilinearMapClass (M →ₗ[R] M) (RingHom.id R) M M ▼</span>\n<span class=\"c1\">--   [] ✅ apply @LinearMap.instSemilinearMapClassLinearMap to SemilinearMapClass (M →ₗ[R] M) (RingHom.id R) M M ▼</span>\n<span class=\"c1\">--     [tryResolve] ✅ SemilinearMapClass (M →ₗ[R] M) (RingHom.id R) M M ≟ SemilinearMapClass (M →ₗ[R] M) (RingHom.id R) M M</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SemilinearMapClass</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"n\">N</span>\n<span class=\"c1\">-- fails:</span>\n<span class=\"c1\">-- [Meta.synthInstance] ❌ SemilinearMapClass (N →ₗ[S] N) (RingHom.id S) N N ▼</span>\n<span class=\"c1\">--   [] ❌ apply @LinearMap.instSemilinearMapClassLinearMap to SemilinearMapClass (N →ₗ[S] N) ?m.5106 ?m.5107 ?m.5108 ▼</span>\n<span class=\"c1\">--     [tryResolve] ❌ SemilinearMapClass (N →ₗ[S] N) ?m.5106 ?m.5107 ?m.5108 ≟ SemilinearMapClass (?m.5120 →ₛₗ[?m.5128] ?m.5121) ?m.5128 ?m.5120 ?m.5121</span>\n</code></pre></div>\n<p>Does somebody know why lean fails with a <code>Ring</code> instead of a <code>Semiring</code>. In particular, why does the TC insert these <code>?m.5106 ?m.5107 ?m.5108</code> in the first step, when it appears that it should not do that.</p>\n<p>The original problem was that it failed to coe a linear map over a ring to a function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"c1\">-- fails, does not find a coersion.</span>\n</code></pre></div>",
        "id": 328432275,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1676629377
    },
    {
        "content": "<p>I would guess this is <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a></p>",
        "id": 328432346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676629406
    },
    {
        "content": "<p>Pretty much everything about linear maps over rings is going to be affected by that</p>",
        "id": 328432441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676629442
    },
    {
        "content": "<p>oh I see, thx. Is there a workaround I could use for now?</p>",
        "id": 328433306,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1676629690
    },
    {
        "content": "<p>Search though mathlib4 for mentions of \"2074\" for ideas</p>",
        "id": 328439861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676631743
    }
]