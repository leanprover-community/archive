[
    {
        "content": "<p>I want to generalize some result on rings to semirings, but some doesn't generalize. But I don't know how to say, for example, that a morphism that is of semirings between rings is in fact a ring homomorfism. Explicitly I want something like this to work (it does if I change the variable definition to  <code>[CommRing R] [CommRing S]</code>, but I don't want), but there is a problem with the type of the 'f'. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicGeometry.PrimeSpectrum.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PrimeSpectrum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">claim</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">](</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">â†’+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PrimeSpectrum</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">PrimeSpectrum</span> <span class=\"n\">S</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsClosed</span> <span class=\"o\">({</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">PrimeSpectrum</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">x.asIdeal.IsMaximal</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">isClosed_singleton_iff_isMaximal</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hx</span>\n  <span class=\"o\">(</span><span class=\"n\">isClosed_singleton_iff_isMaximal</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">Ideal.comap_isMaximal_of_surjective</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 405098741,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1701344327
    },
    {
        "content": "<p>The problem here is that your lemma assumes <code>[CommSemiring R] [CommSemiring S] [CommRing R] [CommRing S]</code></p>",
        "id": 405099093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701344472
    },
    {
        "content": "<p>Ie \"each of <code>R</code> and <code>S</code> has two unrelated ring structures\"</p>",
        "id": 405099125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701344484
    },
    {
        "content": "<p>You have to pick between <code>CommSemiring R</code> and <code>CommRing R</code>, you can't pass both</p>",
        "id": 405099194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701344521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315546\">Xavier Xarles</span> has marked this topic as resolved.</p>",
        "id": 405102765,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701345743
    }
]