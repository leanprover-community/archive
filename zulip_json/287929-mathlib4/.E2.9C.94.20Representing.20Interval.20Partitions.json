[
    {
        "content": "<p>Hi. How do I \"correctly\" represent a partition of an interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> into finitely many pairwise disjoint <em>intervals</em> that's in order? There is <code>finpartition</code> but that handles partitioning <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> into finitely many sets, not intervals.</p>",
        "id": 396235958,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697097882
    },
    {
        "content": "<p>To be more specific, say the interval is [0, 5], I would like to keep track of the intervals [[0, 1], [1, 4], [4, 5]].</p>",
        "id": 396238264,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697098715
    },
    {
        "content": "<p>Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">IntervalPartition</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- intervals 0, 1, ...</span>\n  <span class=\"c1\">-- I can't use List [Set ℝ] since it complains about it being Type 1</span>\n  <span class=\"n\">intervals</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"n\">they_partition</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">intervals</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">S</span>\n  <span class=\"n\">they_disjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">↔</span> <span class=\"n\">intervals</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">intervals</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>But this does not keep track of the order of the intervals. Even if I make \\iota LinearOrder or something, I still can't express the \"[0, 1] and [1, 4] intersect at one point\" condition.</p>",
        "id": 396239445,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697099149
    },
    {
        "content": "<p>What about you just record the endpoints?</p>",
        "id": 396247364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697101911
    },
    {
        "content": "<p>To that end, <code>ends : Fin n.succ →o (Set.Ico a b)</code> might suffice</p>",
        "id": 396248671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697102349
    },
    {
        "content": "<p>I guess with the extra constraint that a and b are both included</p>",
        "id": 396248757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697102380
    },
    {
        "content": "<p>Your <code>they_disjoint</code> condition is vacuous I'm afraid</p>",
        "id": 396248940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697102429
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113488-general/topic/First.20n.20natural.20numbers\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/First.20n.20natural.20numbers</a></p>",
        "id": 396249088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697102481
    },
    {
        "content": "<p>Also note that <code>List [Set ℝ]</code> is malformed since <code>[Set ℝ]</code> is a list of types. You probably meant <code>List (Set X)</code> instead.</p>",
        "id": 396249275,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697102538
    },
    {
        "content": "<p>Perhaps also worth noting that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set#doc\">docs#Set</a> is too big, as it contains all sorts of weird sets that aren't intervals at all</p>",
        "id": 396249456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697102613
    },
    {
        "content": "<p>I think we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Interval#doc\">docs#Interval</a> ?</p>",
        "id": 396249477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697102624
    },
    {
        "content": "<p>Ok thanks I will try these suggestions out a bit</p>",
        "id": 396254136,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697104277
    },
    {
        "content": "<p>I needed something similar some time ago and had more luck with defining a subdivision of <code>Icc a b</code> as just <code>Finset (Ioo a b)</code>, see here <a href=\"https://github.com/vbeffara/RMT4/blob/main/RMT4/Subdivision.lean\">https://github.com/vbeffara/RMT4/blob/main/RMT4/Subdivision.lean</a> for instance</p>",
        "id": 396270066,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697110693
    },
    {
        "content": "<p>(You can use sort the finset to get a list of endpoint, and you automatically get the natural order on subdivisions which coincides with the inclusion on Finsets.)</p>",
        "id": 396270251,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697110787
    },
    {
        "content": "<p>What are you going to do with these partitions?</p>",
        "id": 396306584,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1697122762
    },
    {
        "content": "<p>We have partitions in R^n, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BoxIntegral.Prepartition#doc\">docs#BoxIntegral.Prepartition</a> + <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BoxIntegral.Prepartition.IsPartition#doc\">docs#BoxIntegral.Prepartition.IsPartition</a></p>",
        "id": 396306943,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1697122857
    },
    {
        "content": "<p>My original intention is to try out a simplified case of Sperner's theorem, namely the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> case. It essentially says that if you subdivide <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a, b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> into some intervals and color the interval endpoints such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> have different colors, then there is a subinterval that has different color endpoints. I wanted to do it the way I described since it feels like it'll extend to general cases (for simplicies) easier, but maybe not</p>",
        "id": 396351995,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697139071
    },
    {
        "content": "<p>I also realised that the proof is probably hard, seeing that Yael and Bhavik worked on it before and abandoned it :)</p>",
        "id": 396352049,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697139100
    },
    {
        "content": "<p>As usual, the hard part is formalising combinatorics, not the combinatorics</p>",
        "id": 396352149,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697139132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Representing.20Interval.20Partitions/near/396352149\">said</a>:</p>\n<blockquote>\n<p>As usual, the hard part is formalising combinatorics, not the combinatorics</p>\n</blockquote>\n<p>To me this reads as: \"as usual, the hard part is actually providing a proof and not only a \"proof\" in the sense of combinatorics\".</p>",
        "id": 396354255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697140038
    },
    {
        "content": "<p>That's the idea, but not just making the proof rigorous, but to write it in Lean.<br>\nFor example, representing combinatorial objects nicely seems quite tricky. A simplex subdivision (triangulation) is defined as \"a partition of the simplex into simplicies such that each pair is either disjoint or 'share a full face of a certain dimension'\", and the latter condition seems quite tricky to work with... I think it has been done before, but just to illustrate the point.</p>",
        "id": 396354790,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697140302
    },
    {
        "content": "<p>Honestly, I think Sperner is not so hard. I just spent so long figuring out what the problem was that when I finally understood we'd run out of steam.</p>",
        "id": 396359652,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697142499
    },
    {
        "content": "<p>Oh really, that's interesting to hear. <del>Sadly we have chosen another topic to work on instead</del></p>",
        "id": 396361658,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697143422
    },
    {
        "content": "<p>Oh that's fine, do whatever you want! I just want to say that whoever wants to do Sperner should contact me because I figured out enough detail for the missing piece that it is formalisable.</p>",
        "id": 396361851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697143515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> has marked this topic as resolved.</p>",
        "id": 396453125,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697185024
    }
]