[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/2306\">!4#2306</a>, if I lint at line 99 after <code>comp_def</code>, I'm told that I'm able to simplify the definition of a large number of methods that were all created as a side effect of the <code>inductive</code> definition...</p>",
        "id": 328277898,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676564071
    },
    {
        "content": "<p>I'm also told that <code>matches'</code> can simplify <code>matches'._eq_4</code>, which seems unhelpful.</p>",
        "id": 328278311,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676564188
    },
    {
        "content": "<p>I also get the strangest possible path for <code>simp</code> for <code>matches'_add</code>, so I think that's safe to nolint.</p>",
        "id": 328281756,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676565112
    },
    {
        "content": "<p>It's also very confusing how <code>simpNF</code> is saying that it can \"prove\" <code>matches'</code> which is a <code>def</code></p>",
        "id": 328346679,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676585791
    },
    {
        "content": "<p>OK, I used this trick to nolint the generated declarations: <a href=\"#narrow/stream/348111-std4/topic/nolinting.20generated.20decls/near/328300300\">https://leanprover.zulipchat.com/#narrow/stream/348111-std4/topic/nolinting.20generated.20decls/near/328300300</a></p>\n<p>But I can't stop <code>simpNF</code> from complaining about <code>matches'</code> despite a <code>nolint</code></p>",
        "id": 328349731,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676587034
    },
    {
        "content": "<p>OK, <code>attribute [nolint simpNF] matches'._eq_4 </code> does it...</p>",
        "id": 328350603,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676587436
    },
    {
        "content": "<p>Here is how <code>simpNF</code> proposed to \"prove\"  the <code>+</code> branch of this <code>def</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">matches'</span> <span class=\"o\">:</span> <span class=\"n\">RegularExpression</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Language</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">char</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{[</span><span class=\"n\">a</span><span class=\"o\">]}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"n\">Q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P.matches'</span> <span class=\"bp\">+</span> <span class=\"n\">Q.matches'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"bp\">*</span> <span class=\"n\">Q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P.matches'</span> <span class=\"bp\">*</span> <span class=\"n\">Q.matches'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"n\">P</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P.matches'</span><span class=\"bp\">∗</span>\n</code></pre></div>\n<p><code>simp only [matches', add_eq_sup, ge_iff_le, le_eq_subset, sup_eq_union]</code></p>",
        "id": 328351135,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676587665
    },
    {
        "content": "<p>I highlight <code>add_eq_sup</code>, which is defined on <code>IdemSemiring α</code></p>",
        "id": 328352136,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676588096
    },
    {
        "content": "<p>WHICH <code>RegularExpression</code> IS NOT....</p>",
        "id": 328352255,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676588156
    },
    {
        "content": "<p>and the rest that are defined on <code>Set</code> which <code>RegularExpression</code> isn't. (And also <code>simpNF</code> wants to prove <code>matches'</code> by <code>matches'</code>). Something is wrong here.</p>",
        "id": 328352632,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676588323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simpNF.20issues.20in.20Computability.2ERegularExpressions.20!4.232306/near/328281756\">said</a>:</p>\n<blockquote>\n<p>I also get the strangest possible path for <code>simp</code> for <code>matches'_add</code>, so I think that's safe to nolint.</p>\n</blockquote>\n<p><code>nolint</code> is bad here because the problem is still there.  <del>I'd just remove the <code>@[simp]</code> on <code>matches'_add</code>.</del></p>",
        "id": 328355362,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676589563
    },
    {
        "content": "<p>Looking at the file, the best solution is to remove the <code>@[simp]</code> on <code>def matches'</code>, because that does something different than in Lean 3.</p>",
        "id": 328355576,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676589680
    },
    {
        "content": "<p>And now the generated simp lemmas reference <code>plus a b</code> instead of <code>a + b</code> which is not in simp nf.</p>",
        "id": 328355597,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676589697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simpNF.20issues.20in.20Computability.2ERegularExpressions.20!4.232306/near/328352136\">said</a>:</p>\n<blockquote>\n<p>I highlight <code>add_eq_sup</code>, which is defined on <code>IdemSemiring α</code> </p>\n<p>WHICH RegularExpression IS NOT....<br>\n</p>\n</blockquote>\n<p>This is not about regular expressions, this is about languages.  And the way simp works here is indeed super unfortunate.  It rewrites <code>(a + b : Language A)</code> first to <code>a ⊔ b</code> and then to <code>a ∪ b</code>.</p>",
        "id": 328357149,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676590492
    },
    {
        "content": "<p>I guess that's because we haven't merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/2307\">!4#2307</a> yet.</p>",
        "id": 328357855,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676590919
    },
    {
        "content": "<p>Ahhh. Yes, super unfortunate. </p>\n<p>Removing <code>@[simp]</code> from <code>matches'</code> addresses things... Thanks!</p>",
        "id": 328359687,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676591841
    },
    {
        "content": "<p>Sadly, this PR wasn't merged &amp; after some changes to <code>Language</code> and the PR for <code>NFA</code> caused a merge conflict, needed to merge with master, which caused the PR to go from green to red, I assume because of the changes to <code>Language</code>?</p>\n<p>I can get the failing proofs in <code>matches'_map</code> to work by removing <code>map</code> from the <code>simp only</code> but now run into issues with recursion, which previously Lean had no issues with...</p>",
        "id": 328720331,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676750581
    },
    {
        "content": "<p>The only branch that Lean complains about is the <code>R + S</code> branch, which makes me think it's a side effect of the issues above?</p>",
        "id": 328742627,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676766898
    },
    {
        "content": "<p>I think my lean 3 refactor of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/language\">docs#language</a> will help here, <a href=\"https://github.com/leanprover-community/mathlib/pull/18451\">#18451</a></p>",
        "id": 328806094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676812329
    },
    {
        "content": "<p>will cross tag -- thanks!</p>",
        "id": 328832194,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676823910
    }
]