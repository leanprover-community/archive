[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/7010\">#7010</a>,  having the following lemma is useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_toMonoidHom</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommMonoidWithZero</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">χ.toMonoidHom</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">χ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>When looking into if it would be a good idea to add this to <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/NumberTheory/LegendreSymbol/MulCharacter.lean\">NumberTheory/LegendreSymbol/MulCharacter.lean</a>, I noticed that there are many lemmas like this which are potentially useful, like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">toMonoidHom_coe</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">χ.toMonoidHom</span> <span class=\"bp\">=</span> <span class=\"n\">χ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">toMonoidHom_coe'</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">χ.toMonoidHom</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">χ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">toMonoidHom_toFun_coe</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">χ.toMonoidHom.toFun</span> <span class=\"bp\">=</span> <span class=\"n\">χ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">toMonoidHom_toFun_coe'</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">MulChar</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">χ.toMonoidHom.toFun</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">χ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Which of them should be added and what are the good canonical names for these?</p>",
        "id": 389647929,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1694090174
    },
    {
        "content": "<p>Doesn't the simpNF linter complain there?</p>",
        "id": 389694119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694101148
    },
    {
        "content": "<p>Which function is behind the coercion?</p>",
        "id": 389756053,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1694119841
    },
    {
        "content": "<p>In any case, you should use <code>rfl</code>, not <code>by rfl</code> to make these lemmas useful for <code>dsimp</code> (or did it change in Lean 4?)</p>",
        "id": 389756185,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1694119888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coe.20confusion/near/389694119\">said</a>:</p>\n<blockquote>\n<p>Doesn't the simpNF linter complain there?</p>\n</blockquote>\n<p>No, <code>#lint</code> does not complain about that, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/7026\">#7026</a>. But does this mean all of those lemmas are useful/needed?</p>",
        "id": 389815160,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1694152646
    },
    {
        "content": "<p>I'm surprised that lemmas No 3 and 4 have LHS in the simp normal form.</p>",
        "id": 389818899,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1694154662
    },
    {
        "content": "<p>Are we missing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.toFun_eq_coe#doc\">docs#MonoidHom.toFun_eq_coe</a> ?</p>",
        "id": 389834668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694161724
    },
    {
        "content": "<p>Yep, looks like it lost its <code>simp</code> attribute during the port</p>",
        "id": 389834730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694161749
    },
    {
        "content": "<p>This is pretty unpleasant:</p>\n<p><a href=\"/user_uploads/3121/WmPqKwQ60QtnbPKwtHGRf3sm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WmPqKwQ60QtnbPKwtHGRf3sm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/WmPqKwQ60QtnbPKwtHGRf3sm/image.png\"></a></div>",
        "id": 389834804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694161786
    },
    {
        "content": "<p>I have a PR in the works to fix this</p>",
        "id": 389834847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694161803
    },
    {
        "content": "<p>How?</p>",
        "id": 389834977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694161839
    },
    {
        "content": "<p>I don't understand why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.toMulHom_coe#src\">src#MonoidHom.toMulHom_coe</a> is simpNF</p>",
        "id": 389835003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694161846
    },
    {
        "content": "<p>(I also have a PR to fix this (the first of which is <a href=\"https://github.com/leanprover-community/mathlib4/pull/7016\">#7016</a>), by using flat structures for morphisms so that <code>f.toFun</code> is not syntax for one (but only one) of <code>f.toMulHom.toFun</code> or <code>f.toOneHom.toFun</code>)</p>",
        "id": 389835155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694161896
    },
    {
        "content": "<p>I'm currently worried about lattice homs. I'll move onto algebra homs once I'm done.</p>",
        "id": 389835250,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694161925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coe.20confusion/near/389756185\">said</a>:</p>\n<blockquote>\n<p>In any case, you should use <code>rfl</code>, not <code>by rfl</code> to make these lemmas useful for <code>dsimp</code> (or did it change in Lean 4?)</p>\n</blockquote>\n<p>That's good to know. Is <a href=\"https://github.com/leanprover-community/mathlib4/pull/7039\">#7039</a> then a useful change?</p>",
        "id": 389881911,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1694179529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coe.20confusion/near/389834847\">said</a>:</p>\n<blockquote>\n<p>I have a PR in the works to fix this</p>\n</blockquote>\n<p>Did you finish the work on this PR or was this is same as <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s <a href=\"https://github.com/leanprover-community/mathlib4/pull/7016\">#7016</a>? In <a href=\"https://github.com/leanprover-community/mathlib4/pull/7026\">#7026</a>, I still don't get simpNF lint errors</p>",
        "id": 390858101,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1694671075
    },
    {
        "content": "<p>Not yet, but my yet-to-be PR is currently only concerned about lattice homs, which I assume are not the ones you use.</p>",
        "id": 390861382,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694672855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/coe.20confusion/near/389835155\">said</a>:</p>\n<blockquote>\n<p>(I also have a PR to fix this (the first of which is <a href=\"https://github.com/leanprover-community/mathlib4/pull/7016\">#7016</a>), by using flat structures for morphisms so that <code>f.toFun</code> is not syntax for one (but only one) of <code>f.toMulHom.toFun</code> or <code>f.toOneHom.toFun</code>)</p>\n</blockquote>\n<p>Did you continue making more changes in that direction? (\"the first of which\" sounds like you might have planned a second one?)</p>",
        "id": 395641513,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1696838748
    },
    {
        "content": "<p>I still haven't fixed the long tail of CI failures in that PR</p>",
        "id": 395641667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696838800
    },
    {
        "content": "<p>(oh, that's not the PR I thought it was)</p>",
        "id": 395641734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696838826
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6791\">#6791</a> is the one where I make things flat</p>",
        "id": 395641910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696838891
    }
]