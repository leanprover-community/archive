[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I'm facing two <code>aesop</code> issues that I assume is just my own ignorance:</p>\n<ol>\n<li>I can't seem to erase an <code>unfold</code> rule from <code>aesop</code>. To be more specific, I <em>can</em> erase it (in the sense that <code>aesop</code> complains if I try to erase it twice), but I still see <code>aesop_unfold ...</code> and it still appears in the constants to unfold when using <code>set_option trace.aesop.ruleSets true</code>.</li>\n<li><a href=\"http://github.com/JLimperg/aesop/blob/master/Aesop/Options/Public.lean#L104\">Here</a> it seems to suggest that setting <code>traceScript := true</code> should output the proof that <code>aesop</code> produces when it closes the goal. Is it possible to also have it output a <em>partial</em> proof script (with <code>sorry</code>) when it fails to close the goal? Or at least, provide another option for it?</li>\n</ol>",
        "id": 389242280,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693934615
    },
    {
        "content": "<p>The first sounds like a bug. (Erasing is not well tested.) Do you have an example?</p>",
        "id": 389243822,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693934977
    },
    {
        "content": "<p>The second doesn't currently work, but it could certainly be made to work. Aesop would then report a partial proof corresponding to the safe rules it applied, just like it currently reports the goals produced by the safe rules. This needs some changes to the procedures that produce these tactic proofs, but I can prioritise those. (I'm away for conferences and summer schools all September, so progress won't be quick I'm afraid.)</p>",
        "id": 389245336,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693935244
    },
    {
        "content": "<p>Btw, you can write <code>aesop?</code> instead of setting <code>traceScript := true</code>.</p>",
        "id": 389245403,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693935258
    },
    {
        "content": "<p>Here's an mwe for the first issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n\n<span class=\"kd\">@[irreducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"c1\">-- fails because it can't unfold `bar`</span>\n\n<span class=\"kd\">@[aesop unfold norm, irreducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"c1\">-- works because it can unfold `foo`</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">aesop</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n\n<span class=\"c1\">-- errors with: 'foo' is not registered (with the given features) in any rule set.</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">aesop</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span> <span class=\"c1\">-- still works despite removing the `aesop` rules</span>\n</code></pre></div>",
        "id": 389251036,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693936589
    },
    {
        "content": "<p>As for the second issue: I'm not asking you to spend time working on it yet. I thought it could be a nice modification for the <code>continuity?</code> tactic where it produces a partial proof that the function is continuous, but I haven't yet asked the community if this is desired. My guess is it will be though.</p>",
        "id": 389251564,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1693936806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/erasing.20.60unfold.60.20rules.20in.20.60aesop.60.2C.20and.20.60traceScript.20.3A.3D.20true.60/near/389251036\">said</a>:</p>\n<blockquote>\n<p>Here's an mwe for the first issue: [...]</p>\n</blockquote>\n<p>Fixed in Aesop master. Thank you for the very nice MWE!</p>",
        "id": 389281207,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693947632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/erasing.20.60unfold.60.20rules.20in.20.60aesop.60.2C.20and.20.60traceScript.20.3A.3D.20true.60/near/389251564\">said</a>:</p>\n<blockquote>\n<p>As for the second issue: I'm not asking you to spend time working on it yet. I thought it could be a nice modification for the <code>continuity?</code> tactic where it produces a partial proof that the function is continuous, but I haven't yet asked the community if this is desired. My guess is it will be though.</p>\n</blockquote>\n<p>Okay. I'll certainly implement this at some point, but if you need it sooner than later, let me know.</p>",
        "id": 389281668,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693947772
    }
]