[
    {
        "content": "<p>I've had another go at <code>rewrite_search</code>! This time it is backed by the same <code>DiscrTree</code> that powers<code>rw?</code>, and seems to be reasonably fast (no tagging of lemmas, this is just trying the whole library):</p>\n<p><a href=\"/user_uploads/3121/4xeI5DLz5vkdAaROMScBxXZv/rewrite_search.gif\">rewrite_search.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4xeI5DLz5vkdAaROMScBxXZv/rewrite_search.gif\" title=\"rewrite_search.gif\"><img src=\"/user_uploads/3121/4xeI5DLz5vkdAaROMScBxXZv/rewrite_search.gif\"></a></div><p>There will be quite a few PRs before there's something to play with. In the meantime, the following PRs are all requirements:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/5957\">#5957</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/6061\">#6061</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/6062\">#6062</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/6088\">#6088</a></li>\n</ul>",
        "id": 377998900,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690178246
    },
    {
        "content": "<p>The same ingredients should also allow a tactic to transform <code>simp only [...]</code> blocks into <code>simp_rw [...]</code>.</p>",
        "id": 377999055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690178306
    },
    {
        "content": "<p>I kicked the 2nd and 3rd PR on the queue</p>",
        "id": 378021194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690184570
    },
    {
        "content": "<p>The last one contains meta stuff.</p>",
        "id": 378021244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690184582
    },
    {
        "content": "<p>I noticed this really nice code-action which comes when there is a \"try this\" tactic. Can someone point me to the implementation?</p>",
        "id": 378031344,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690186593
    },
    {
        "content": "<p>It is spread across Mathlib and Std, it depends a bit exactly what part of the mechanism you are looking for. I would recommend starting with a tactic that uses this, e.g. <code>exact?</code>, and working your way back.</p>",
        "id": 378031697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690186676
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/TryThis.lean#L51\">https://github.com/leanprover/std4/blob/main/Std/Tactic/TryThis.lean#L51</a></p>",
        "id": 378032132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690186754
    },
    {
        "content": "<p>If you are writing tactics you will be using <a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/TryThis.lean#L122C5-L122C23\"><code>addExactSuggestion</code></a> or its relatives, some of which are in <code>Mathlib.Tactic.TryThis</code>.</p>",
        "id": 378032573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690186849
    },
    {
        "content": "<p>I am looking for the implementation of the code action to learn how to write such code actions.</p>",
        "id": 378032602,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690186855
    },
    {
        "content": "<p>Then Patrick's link is what you need!</p>",
        "id": 378032645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690186865
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 378032679,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690186871
    },
    {
        "content": "<p>I will follow links from there.</p>",
        "id": 378032885,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690186919
    },
    {
        "content": "<p>I saw how to get the content of the \"Try this\" from the <code>says</code> implementation. Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 378033213,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1690186996
    },
    {
        "content": "<p>The <code>rw_search</code> PR is now up as <a href=\"https://github.com/leanprover-community/mathlib4/pull/6120\">#6120</a> and depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6090\">#6090</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6096\">#6096</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6097\">#6097</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6115\">#6115</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6117\">#6117</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6118\">#6118</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6119\">#6119</a>.</p>",
        "id": 378323618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690253884
    },
    {
        "content": "<p>This PR is finally actually compiling, if anyone would like to give it a test drive. I think it is quite useful already, and can be made even better (allow rewriting using local hypotheses, allowing using <code>occurrences</code> in <code>rw</code>, add <code>simp</code> as a step, tweak the search heuristics, etc) over time. The dependency list is quite long, however!</p>\n<ul>\n<li>[ ] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5957\">#5957</a> </li>\n<li>[ ] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6088\">#6088</a> </li>\n<li>[ ] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6090\">#6090</a></li>\n<li>[ ] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6092\">#6092</a></li>\n<li>[ ] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6096\">#6096</a></li>\n<li>[ ] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6097\">#6097</a></li>\n<li>[x] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6115\">#6115</a></li>\n<li>[ ] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6117\">#6117</a></li>\n<li>[ ] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6118\">#6118</a></li>\n<li>[ ] depends on: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6119\">#6119</a></li>\n</ul>",
        "id": 380149338,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690759613
    },
    {
        "content": "<p>It’s awesome you got this working!  In the past I recall a feeling from others that one eventually needs ML (or something) to guide a rw search since there are just too many rw lemmas which say use <code>_ + _</code>, and you have to rank them.  Do you feel this is still the case, or is it fast even in those situations because of the better data structures?</p>",
        "id": 381013499,
        "sender_full_name": "Jason Rute",
        "timestamp": 1690978078
    },
    {
        "content": "<p>The conversation I had in mind was <a class=\"stream-topic\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/rw_hint\">#Machine Learning for Theorem Proving &gt; rw_hint</a></p>",
        "id": 381014512,
        "sender_full_name": "Jason Rute",
        "timestamp": 1690978296
    },
    {
        "content": "<p>I mean, I've always been a bit dubious about the \"too slow\" claim. Even back in Lean 3, my original implementation of rewrite_search in 2018 often successfully found ~10 step rewrite proofs. Yes, in some cases it will be too slow, of course.</p>",
        "id": 381018092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690979025
    },
    {
        "content": "<p>Good premise selection that could order the lemmas before we even try rewriting by them would of course speed things up.</p>",
        "id": 381018274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690979059
    },
    {
        "content": "<p>And good \"how close are these goal\" judgements (rather than just edit distances) would make the search more efficient.</p>",
        "id": 381018388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690979083
    },
    {
        "content": "<p>This implementation is intended to be a starting point, not an end. It's a framework into which you can easily plug other heuristics for ordering lemmas, or distances between <code>Expr</code>.</p>",
        "id": 381018650,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690979133
    },
    {
        "content": "<p>A nice feature of the new implementation is that it \"watches the clock\", and if it gets too close to <code>maxHeartbeats</code> it just reports its best effort up to that point, rather than failing with a timeout.</p>",
        "id": 381019235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690979260
    },
    {
        "content": "<p>The <code>rw_search</code> PR is waiting for review. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> gave it a review a few weeks ago, but it could do with another look / merging.</p>",
        "id": 397388320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697666230
    },
    {
        "content": "<p>I know that it is far from optimal (in terms of both efficiency and heuristics for directing the search), but I think it is an interesting addition to our automation toolkit. Optimistically, we will wonder how we lived without it. :-) Pessimistically it will be too slow for practical use.</p>",
        "id": 397388325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697666234
    },
    {
        "content": "<p>There are many additional improvements that can be made:</p>\n<ul>\n<li>add <code>simp</code> as an atomic step</li>\n<li>better ordering of lemmas (i.e. improve the output of <code>rw?</code>)</li>\n<li>use local hypotheses to discharge side condition of rewrites (i.e. do this in <code>rw?</code>)</li>\n<li>better heuristics for search (currently we use unweighted edit distance on a particular tokenisation scheme; either weights or different tokenisation could help; or drop in a neural model!)</li>\n<li>A* search instead of best-first search</li>\n<li>bidirectional search (currently if we rewrite <code>lhs</code> to <code>lhs'</code> and separately <code>rhs</code> to <code>rhs'</code> in a different search branch, we have no way of noticing if <code>lhs'</code> and <code>rhs'</code> are really close, until we do those rewrites sequentially)</li>\n</ul>",
        "id": 397388329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697666239
    },
    {
        "content": "<p>However I would prefer that all of these improvements could be \"tested in production\"!</p>",
        "id": 397388331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697666242
    },
    {
        "content": "<p>Just host it online somehow, that's a great way to get testing before the PR gets merged, and because you get a stream of suggestions and bugreports, the PR never really settles down, but at least you can fix them without delay.<br>\n(Just kidding, of course doesn't apply to new tactics.)</p>",
        "id": 397434867,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697695263
    },
    {
        "content": "<p>We need an API for remote tactics.</p>",
        "id": 397438268,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697696779
    },
    {
        "content": "<p>(Only half joking?)</p>",
        "id": 397438274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697696784
    },
    {
        "content": "<p>Isn't that sort of what <code>polyrith</code> is?</p>",
        "id": 397444325,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697700068
    },
    {
        "content": "<p>I am trying to play around with it. I pulled the branch and copied</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ys.length</span> <span class=\"bp\">+</span> <span class=\"n\">xs.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw_search</span>\n</code></pre></div>\n<p>from the test examples into <code>Mathlib/Data/Polynomial/Div.lean</code>. It took about two minutes , while the test in <code>test/rw_search.lean</code> only took a second at most. Why does it apparently take so much longer when using it IRL?</p>",
        "id": 397447455,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697701201
    },
    {
        "content": "<p>Maybe it's the autoImplicit?</p>",
        "id": 397448509,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697701531
    },
    {
        "content": "<p>Seems it is the autoImpilcit, sorry (although weirdly it does still produce the right output, even when there's an error in the definition.</p>",
        "id": 397449184,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697701765
    },
    {
        "content": "<p>What do you mean? Could you show me the fast and slow versions?</p>",
        "id": 397449557,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697701892
    },
    {
        "content": "<p>Does it suffice to just <code>import Mathlib.Data.Polynomial.Div</code> to get the slow down, rather than putting the example in that file?</p>",
        "id": 397449604,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697701918
    },
    {
        "content": "<p>Here is the file I ran</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2018 Chris Hughes. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Chris Hughes, Johannes Hölzl, Scott Morrison, Jens Wagemaker</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.AlgebraMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Inductions</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Monic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Multiplicity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RewriteSearch</span>\n\n\n<span class=\"bp\">#</span><span class=\"n\">align_import</span> <span class=\"n\">data.polynomial.div</span> <span class=\"k\">from</span> <span class=\"s2\">\"leanprover-community/mathlib\"</span><span class=\"bp\">@</span><span class=\"s2\">\"e1e7190efdcefc925cb36f257a8362ef22944204\"</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Division of univariate polynomials</span>\n\n<span class=\"cm\">The main defs are `divByMonic` and `modByMonic`.</span>\n<span class=\"cm\">The compatibility between these is given by `modByMonic_add_div`.</span>\n<span class=\"cm\">We also define `rootMultiplicity`.</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ys.length</span> <span class=\"bp\">+</span> <span class=\"n\">xs.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw_search</span>\n</code></pre></div>",
        "id": 397450520,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697702224
    },
    {
        "content": "<p>I'm not too worried about it, I assume it's just something weird to do with things taking longer when you have a sorryAx in your state.</p>",
        "id": 397451150,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697702416
    },
    {
        "content": "<p>Here's another thing which I'm now confused by though, if I try to replace the <code>rw</code> on line 440 of <code>Polynomial.Div</code> with <code>rw_search</code> it gives an error <code>Goal is not an equality</code>. Why is this?</p>",
        "id": 397451858,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697702646
    },
    {
        "content": "<p>Sorry it's not easy to give a MWE here, I'll work on it.</p>",
        "id": 397453200,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697703074
    },
    {
        "content": "<p>This is as much as I can get rid of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Copyright (c) 2018 Chris Hughes. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Chris Hughes, Johannes Hölzl, Scott Morrison, Jens Wagemaker</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.AlgebraMap</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Inductions</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Monic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Multiplicity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RewriteSearch</span>\n\n\n<span class=\"bp\">#</span><span class=\"n\">align_import</span> <span class=\"n\">data.polynomial.div</span> <span class=\"k\">from</span> <span class=\"s2\">\"leanprover-community/mathlib\"</span><span class=\"bp\">@</span><span class=\"s2\">\"e1e7190efdcefc925cb36f257a8362ef22944204\"</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Division of univariate polynomials</span>\n\n<span class=\"cm\">The main defs are `divByMonic` and `modByMonic`.</span>\n<span class=\"cm\">The compatibility between these is given by `modByMonic_add_div`.</span>\n<span class=\"cm\">We also define `rootMultiplicity`.</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CommSemiring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">X_dvd_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">∣</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">f.coeff</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hfg</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hfg</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">coeff_mul_X_zero</span><span class=\"o\">],</span> <span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">⟨</span><span class=\"n\">f.divX</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">f.divX</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">C_0</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">divX_mul_X_add</span><span class=\"o\">]⟩⟩</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.uppercaseLean3</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.X_dvd_iff</span> <span class=\"n\">Polynomial.X_dvd_iff</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">X_pow_dvd_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f.coeff</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hgf</span><span class=\"o\">⟩</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hgf</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow_mul'</span><span class=\"o\">,</span> <span class=\"n\">ite_eq_right_iff</span><span class=\"o\">,</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">IsEmpty.forall_iff</span><span class=\"o\">],</span>\n    <span class=\"k\">fun</span> <span class=\"n\">hd</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_dvd</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hgf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hd</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_of_lt</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">coeff_X_pow_mul</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hgf</span><span class=\"o\">,</span> <span class=\"n\">hd</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hgk</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.X_dvd_iff.mpr</span> <span class=\"n\">this.symm</span>\n      <span class=\"n\">use</span> <span class=\"n\">k</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">X</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hgk</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.uppercaseLean3</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.X_pow_dvd_iff</span> <span class=\"n\">Polynomial.X_pow_dvd_iff</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CommSemiring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CommSemiring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">multiplicity_finite_of_degree_pos_of_monic</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmp</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity.Finite</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">zn0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Nontrivial.of_polynomial_ne</span> <span class=\"n\">hq</span>\n    <span class=\"n\">zero_ne_one</span>\n  <span class=\"o\">⟨</span><span class=\"n\">natDegree</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hp0</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span>\n    <span class=\"k\">have</span> <span class=\"n\">hr0</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hr0</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">hr0</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hr</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpn1</span> <span class=\"o\">:</span> <span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"n\">hmp</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpn0'</span> <span class=\"o\">:</span> <span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">hpn1.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">zn0.symm</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpnr0</span> <span class=\"o\">:</span> <span class=\"n\">leadingCoeff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">leadingCoeff</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">leadingCoeff_pow'</span> <span class=\"n\">hpn0'</span><span class=\"o\">,</span> <span class=\"n\">leadingCoeff_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">hpn1</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">Ne.def</span><span class=\"o\">,</span>\n          <span class=\"n\">hr0</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">natDegree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.cast_lt.1</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">degree_eq_natDegree</span> <span class=\"n\">hp0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">natDegree</span> <span class=\"n\">hr</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natDegree_mul'</span> <span class=\"n\">hpnr0</span><span class=\"o\">,</span> <span class=\"n\">natDegree_pow'</span> <span class=\"n\">hpn0'</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">exact</span>\n      <span class=\"n\">ne_of_lt</span>\n        <span class=\"o\">(</span><span class=\"n\">lt_add_of_le_of_pos</span> <span class=\"o\">(</span><span class=\"n\">le_mul_of_one_le_right</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hnp</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">add_pos_of_pos_of_nonneg</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n        <span class=\"n\">this</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.multiplicity_finite_of_degree_pos_of_monic</span> <span class=\"n\">Polynomial.multiplicity_finite_of_degree_pos_of_monic</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CommSemiring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">div_wf_lemma</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">natDegree</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">leadingCoeff_eq_zero.1</span> <span class=\"n\">h.2</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq0</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">hq.ne_zero_of_polynomial_ne</span> <span class=\"n\">h.2</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">natDegree</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">natDegree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Nat.cast_le.1</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">degree_eq_natDegree</span> <span class=\"n\">h.2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">degree_eq_natDegree</span> <span class=\"n\">hq0</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h.1</span><span class=\"o\">)</span>\n  <span class=\"n\">degree_sub_lt</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq.degree_mul</span><span class=\"o\">,</span> <span class=\"n\">degree_C_mul_X_pow</span> <span class=\"n\">_</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">degree_eq_natDegree</span> <span class=\"n\">h.2</span><span class=\"o\">,</span>\n        <span class=\"n\">degree_eq_natDegree</span> <span class=\"n\">hq0</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">tsub_add_cancel_of_le</span> <span class=\"n\">hlt</span><span class=\"o\">])</span>\n    <span class=\"n\">h.2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leadingCoeff_mul_monic</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">leadingCoeff_mul_X_pow</span><span class=\"o\">,</span> <span class=\"n\">leadingCoeff_C</span><span class=\"o\">])</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.div_wf_lemma</span> <span class=\"n\">Polynomial.div_wf_lemma</span>\n\n<span class=\"sd\">/-- See `divByMonic`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">divModByMonicAux</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]},</span> <span class=\"n\">Monic</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">×</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">natDegree</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n      <span class=\"k\">have</span> <span class=\"n\">_wf</span> <span class=\"o\">:=</span> <span class=\"n\">div_wf_lemma</span> <span class=\"n\">h</span> <span class=\"n\">hq</span>\n      <span class=\"k\">let</span> <span class=\"n\">dm</span> <span class=\"o\">:=</span> <span class=\"n\">divModByMonicAux</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">hq</span>\n      <span class=\"o\">⟨</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">dm.1</span><span class=\"o\">,</span> <span class=\"n\">dm.2</span><span class=\"o\">⟩</span>\n    <span class=\"k\">else</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">divModByMonicAux</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.div_mod_by_monic_aux</span> <span class=\"n\">Polynomial.divModByMonicAux</span>\n\n<span class=\"sd\">/-- `divByMonic` gives the quotient of `p` by a monic polynomial `q`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">divByMonic</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">q</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">divModByMonicAux</span> <span class=\"n\">p</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.div_by_monic</span> <span class=\"n\">Polynomial.divByMonic</span>\n\n<span class=\"sd\">/-- `modByMonic` gives the remainder of `p` by a monic polynomial `q`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">modByMonic</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">q</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">divModByMonicAux</span> <span class=\"n\">p</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"n\">p</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.mod_by_monic</span> <span class=\"n\">Polynomial.modByMonic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" /ₘ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">divByMonic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"s2\">\" %ₘ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modByMonic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">degree_modByMonic_lt</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">_hq</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">q</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">_wf</span> <span class=\"o\">:=</span> <span class=\"n\">div_wf_lemma</span> <span class=\"o\">⟨</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩</span> <span class=\"n\">hq</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span>\n        <span class=\"n\">degree</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">natDegree</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">%ₘ</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n        <span class=\"n\">degree_modByMonic_lt</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">natDegree</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">hq</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">modByMonic</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">⊢</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">divModByMonicAux</span>\n      <span class=\"n\">dsimp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"bp\">⊢</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">Or.casesOn</span> <span class=\"o\">(</span><span class=\"n\">not_and_or.1</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"kd\">by</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">modByMonic</span> <span class=\"n\">divModByMonicAux</span>\n          <span class=\"n\">dsimp</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"n\">lt_of_not_ge</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"kd\">by</span>\n          <span class=\"n\">intro</span> <span class=\"n\">hp</span>\n          <span class=\"n\">unfold</span> <span class=\"n\">modByMonic</span> <span class=\"n\">divModByMonicAux</span>\n          <span class=\"n\">dsimp</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Classical.not_not.1</span> <span class=\"n\">hp</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">bot_le</span> <span class=\"o\">(</span><span class=\"n\">Ne.symm</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">degree_eq_bot.1</span> <span class=\"n\">hq.ne_zero</span><span class=\"o\">)))</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">degree_modByMonic_lt</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.degree_mod_by_monic_lt</span> <span class=\"n\">Polynomial.degree_modByMonic_lt</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Ring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CommRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">X_dvd_sub_C</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">p.coeff</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">X_dvd_iff</span><span class=\"o\">,</span> <span class=\"n\">coeff_C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">modByMonic_eq_sub_mul_div</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">_hq</span> <span class=\"o\">:</span> <span class=\"n\">Monic</span> <span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/ₘ</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">_wf</span> <span class=\"o\">:=</span> <span class=\"n\">div_wf_lemma</span> <span class=\"n\">h</span> <span class=\"n\">hq</span>\n      <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:=</span>\n        <span class=\"n\">modByMonic_eq_sub_mul_div</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">leadingCoeff</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">natDegree</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">hq</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">modByMonic</span> <span class=\"n\">divByMonic</span> <span class=\"n\">divModByMonicAux</span>\n      <span class=\"n\">dsimp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">modByMonic</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">hq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span>\n      <span class=\"n\">refine'</span> <span class=\"n\">ih.trans</span> <span class=\"n\">_</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">divByMonic</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">sub_add_eq_sub_sub</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n    <span class=\"k\">else</span> <span class=\"kd\">by</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">modByMonic</span> <span class=\"n\">divByMonic</span> <span class=\"n\">divModByMonicAux</span>\n      <span class=\"n\">dsimp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">modByMonic_eq_sub_mul_div</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.mod_by_monic_eq_sub_mul_div</span> <span class=\"n\">Polynomial.modByMonic_eq_sub_mul_div</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">modByMonic_X_sub_C_eq_C_eval</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">p.eval</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nontriviality</span> <span class=\"n\">R</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p.eval</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">modByMonic_eq_sub_mul_div</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">monic_X_sub_C</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span>\n      <span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"n\">degree_X_sub_C</span> <span class=\"n\">a</span> <span class=\"bp\">▸</span> <span class=\"n\">degree_modByMonic_lt</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">monic_X_sub_C</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">revert</span> <span class=\"n\">this</span>\n    <span class=\"n\">cases</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot_le</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">WithBot.some_le_some.2</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">WithBot.some_lt_some.1</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_C_of_degree_le_zero</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw_search</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_C_of_degree_le_zero</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.uppercaseLean3</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">polynomial.mod_by_monic_X_sub_C_eq_C_eval</span> <span class=\"n\">Polynomial.modByMonic_X_sub_C_eq_C_eval</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CommRing</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Polynomial</span>\n</code></pre></div>",
        "id": 397453717,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697703253
    },
    {
        "content": "<p>Ah, I think one problem here is that <code>rw?</code> still doesn't use local hypotheses, so you won't be able to do this rewrite anyway. :-(</p>",
        "id": 397456647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697704369
    },
    {
        "content": "<p>True. However, it's still concerning that the error message is misleading.</p>",
        "id": 397458750,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697705122
    },
    {
        "content": "<p>Oh, I'm wrong, it will rewrite by local hypotheses.</p>",
        "id": 397459123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697705241
    },
    {
        "content": "<p>Looking at the incorrect \"Goal is not an equality\" error now.</p>",
        "id": 397459168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697705257
    },
    {
        "content": "<p>What it won't do is discharge side conditions, so it can't do the <code>rw [eq_C_of_degree_le_zero this]</code> step.</p>",
        "id": 397459216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697705281
    },
    {
        "content": "<p>Incidentally, why did you opt for having <code>rw_search</code> only work on equalities? It seems like another option you could have taken would have been to let the metric be \"number of tokens in the expression\" rather than \"Levenshtein distance between the sides of an equality\". Would you expect the former not to work well for some reason?</p>",
        "id": 397459381,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697705331
    },
    {
        "content": "<p>Gah, it is stupid metadata nodes.</p>",
        "id": 397460630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697705786
    },
    {
        "content": "<p>Ok, fixed.</p>",
        "id": 397460972,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697705914
    },
    {
        "content": "<p>looks like <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20error.20in.20structured.20proof/near/322950305\">a missing <code>whnfR</code></a></p>",
        "id": 397460976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697705915
    },
    {
        "content": "<p>Oh, hmm, that's better.</p>",
        "id": 397461098,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697705964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rewrite_search/near/397459381\">said</a>:</p>\n<blockquote>\n<p>Incidentally, why did you opt for having <code>rw_search</code> only work on equalities? It seems like another option you could have taken would have been to let the metric be \"number of tokens in the expression\" rather than \"Levenshtein distance between the sides of an equality\". Would you expect the former not to work well for some reason?</p>\n</blockquote>\n<p>Good question. The original idea for <code>rw_search</code> was definitely about doing bidirectional search from both ends. This version is simpler, and while it can rewrite both sides of the equation, it's not keeping separate pools of LHSs and RHSs.</p>",
        "id": 397461362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697706054
    },
    {
        "content": "<p>It would certainly be possible to have a version that just tried to make expressions smaller.</p>",
        "id": 397461547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697706121
    },
    {
        "content": "<p>(but would still go uphill when it ran out of things to do, but only in the way that water can go uphill :-)</p>",
        "id": 397461635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697706145
    },
    {
        "content": "<p>Huh. Allowing <code>rw?</code> to discharge side conditions using local hypotheses was surprisingly easy: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7770\">#7770</a></p>",
        "id": 397468423,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697708716
    },
    {
        "content": "<p>I sort of expected <code>rw_search</code> to be able to prove this lemma, and I was disappointed it didn't. Is this not the sort of lemma that <code>rw_search</code> targets?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Eval</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Polynomial.natDegree_sub_C</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.natDegree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw_search</span> <span class=\"c1\">-- Try this: rw []</span>\n  <span class=\"c1\">-- rw [sub_eq_add_neg, ← Polynomial.C_neg, Polynomial.natDegree_add_C] -- works</span>\n</code></pre></div>",
        "id": 397524983,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697727881
    },
    {
        "content": "<p>Maybe it's a \"water flowing uphill\" issue?</p>",
        "id": 397525604,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697728028
    },
    {
        "content": "<p>That is a frustrating example. <code>rw?</code> gets each individual step, (3rd suggestion for the first rewrite, 2nd suggestion for the second rewrite), so it certainly feels like <code>rw_search</code> should cope.</p>",
        "id": 397592631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697759007
    },
    {
        "content": "<p>Okay, I have implemented basic tracing, and can see what is going wrong in this example.</p>",
        "id": 397593941,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697759930
    },
    {
        "content": "<p>The basic answer is that we need A* search.</p>",
        "id": 397593960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697759945
    },
    {
        "content": "<p>But there are some other de-duplication problems as well.</p>",
        "id": 397594853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697760484
    },
    {
        "content": "<p>I've solved the duplication problems, and have a relatively simple idea that may solve the problem with getting stuck.</p>",
        "id": 397600046,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697763422
    },
    {
        "content": "<p>Well, after spending a bit longer on this than I initially planned, it can do the <code>Polynomial.natDegree_sub_C</code> problem above, with <code>maxHeartbeats 300000</code> (so 150% of the usual limit).</p>",
        "id": 397630579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697778711
    },
    {
        "content": "<p>There is still a FIFO/FILO problem that is causing it to try unpromising lemmas before promising lemmas. :-(</p>",
        "id": 397630662,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697778757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rewrite_search/near/397630579\">said</a>:</p>\n<blockquote>\n<p>Well, after spending a bit longer on this than I initially planned, it can do the <code>Polynomial.natDegree_sub_C</code> problem above, with <code>maxHeartbeats 300000</code> (so 150% of the usual limit).</p>\n</blockquote>\n<p>That's awesome! I'll point out that that lemma was a completely new lemma that I needed for my project, so if <code>rw_search</code> can prove it then it has already proven its usefulness.</p>\n<p>This maybe opens up a new discussion: Search tactics by their nature can take a long time, and it might be nice at some point to have the capability to <code>sorry</code> a short lemma and let it cook for a while in the hopes that it will be solved when one comes back to it. I'm not sure how this fits into the heartbeat infrastructure.</p>",
        "id": 397633921,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697780984
    },
    {
        "content": "<p>I think that same discussion applies to neural search! We need a mechanism for bots to go work on sorries offline. :-)</p>",
        "id": 397637350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697782604
    },
    {
        "content": "<p>Unfortunately, making this example work has broken all the other examples, oops. I guess this PR is back to WIP until I have some more time for it.</p>",
        "id": 397637408,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697782632
    },
    {
        "content": "<p>It did not find your proof, by the way: it finds</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">neg_sub</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">natDegree_neg</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sub_eq_neg_add</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">natDegree_add_C</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">natDegree_neg</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397637478,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697782663
    },
    {
        "content": "<p>Strangely, it wanders around for a while trying various things, and then when it eventually hits on <code>neg_sub</code> is finishes the remaining steps quickly. <span aria-label=\"woman shrugging\" class=\"emoji emoji-1f937-200d-2640\" role=\"img\" title=\"woman shrugging\">:woman_shrugging:</span></p>",
        "id": 397637569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697782695
    },
    {
        "content": "<p>Oh no, <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span>, your PR has been merged and it spoils my test, because <code>rw_search</code> now finds <code>natDegree_sub_C</code> :-)</p>",
        "id": 397671395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697795282
    },
    {
        "content": "<p>Do you want another theorem?</p>",
        "id": 397671718,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697795385
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Polynomial.X_mul_divX</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.X</span> <span class=\"bp\">*</span> <span class=\"n\">Polynomial.divX</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.coeff</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_sub_iff_add_eq</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.X_mul_divX_add</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397671730,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697795390
    },
    {
        "content": "<p>I think actually I want my test back sufficiently that I am going to implement <code>rw_search [-natDegree_sub_C]</code>!</p>",
        "id": 397671917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697795449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rewrite_search/near/397633921\">said</a>:</p>\n<blockquote>\n<p>This maybe opens up a new discussion: Search tactics by their nature can take a long time, and it might be nice at some point to have the capability to <code>sorry</code> a short lemma and let it cook for a while in the hopes that it will be solved when one comes back to it. I'm not sure how this fits into the heartbeat infrastructure.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span>'s <a href=\"#narrow/stream/270676-lean4/topic/Aesop.20etc.20in.20the.20background/near/378792005\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Aesop.20etc.20in.20the.20background/near/378792005</a> seems related to what you want</p>",
        "id": 397675337,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697796654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rewrite_search/near/397671730\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Polynomial.X_mul_divX</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.X</span> <span class=\"bp\">*</span> <span class=\"n\">Polynomial.divX</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.coeff</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_sub_iff_add_eq</span><span class=\"o\">,</span> <span class=\"n\">Polynomial.X_mul_divX_add</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think this one is asking a bit much from <code>rw_search</code>. It's great at massaging subexpressions into the right shape, but anytime an initial segment of the rewrites is just completely changing the structure it's doesn't really have a chance.</p>",
        "id": 397688904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697801140
    },
    {
        "content": "<p>Oops. As I was writing that, I left it on with <code>maxHeartbeats 0</code>, and it came up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">X_mul</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">eq_sub_iff_add_eq</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">divX_mul_X_add</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397689025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697801169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I just did this proof in another thread by hand (because it wasn't hard), but then I thought: <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> this is the kind of thing <code>rw_search</code> should be able to do. So, I pulled the branch and tested it, and I'm very pleased to report that this worked almost instantly <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">OnePoint</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">comap</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">OnePoint</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">atTop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">comap_coe_nhds_infty</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">coclosedCompact_eq_cocompact</span><span class=\"o\">,</span> <span class=\"n\">Nat.cocompact_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and it even found a one-step shorter rewrite than I came up with by hand!</p>",
        "id": 398119193,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698077931
    },
    {
        "content": "<p>Needless to say, I'm stoked to have this hit mathlib.</p>",
        "id": 398119323,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698077983
    },
    {
        "content": "<p>I would be stoked to have this hit mathlib too. :-)</p>",
        "id": 398167705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698101855
    },
    {
        "content": "<p>Since the last discussion here, I found time to do some basic optimisation of the \"penalty function\" <code>n.lastIdx.log2 + n.ppGoal.length.log2</code> (this is the log base two of the index of the latest lemma tried from <code>rw?</code>, which encouraged \"trusting\" the ordering provided by <code>rw?</code>, plus the log base two of the entire pretty printed goal), and achieved a 2x speed-up on the test suite.</p>\n<p>This penalty function is added to the Levenshtein distance between the two sides. It's pretty ad-hoc, but I sampled quite a few variants (coefficients, without logs, some other terms as well), and this gives the best performance on examples so far. Of course, 10x as many examples would allow better optimisation.</p>",
        "id": 398168391,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698102184
    },
    {
        "content": "<p>(Oh, and just reporting on some issues upthread: the FILO/FIFO issue above has been resolved, and the <code>Polynomial.natDegree_sub_C</code> example no longer requires a maxHeartbeats bump.)</p>",
        "id": 398168902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698102496
    },
    {
        "content": "<p>Scott, can you cull (in an automated fashion) all theorems from Mathlib whose proof is just a sequence of rewrites to test on? Certainly some of them will include things that aren't declarations in the list, but maybe it's not too hard to remove those after the fact.</p>",
        "id": 398170195,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698103397
    },
    {
        "content": "<p>Yes, I can. There are tools for things like this in the <code>lean-training-data</code> repo. But I don't think I have the time available to do this for <code>rw_search</code> in the near future.</p>",
        "id": 398172549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698105474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I wrote a rather crude tool that tries to extract \"<code>rw</code>-only\" proofs from a file and produce a standalone with the extracted lemmas.  It is mostly string-based, so very buggy, but here is the output on <code>Mathlib.Data.Polynomial.Degree.Definitions</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Degree.Definitions</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span>\n  <span class=\"n\">BigOperators</span>\n  <span class=\"n\">Finset</span>\n  <span class=\"n\">Finsupp</span>\n  <span class=\"n\">Polynomial</span>\n\n<span class=\"c1\">-- Polynomial.degree_of_subsingleton.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.degree</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">degree_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.natDegree_of_subsingleton.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">natDegree_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.degree_C_mul_X_pow.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.degree</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Polynomial.X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C_mul_X_pow_eq_monomial</span><span class=\"o\">,</span> <span class=\"n\">degree_monomial</span> <span class=\"n\">n</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.Monic.eq_X_add_C.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial.Monic</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hnd</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.X</span> <span class=\"bp\">+</span> <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.coeff</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">C_1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hm.coeff_natDegree</span><span class=\"o\">,</span> <span class=\"n\">hnd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eq_X_add_C_of_natDegree_le_one</span> <span class=\"n\">hnd.le</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.nonempty_support_iff.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.support</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ne.def</span><span class=\"o\">,</span> <span class=\"n\">nonempty_iff_ne_empty</span><span class=\"o\">,</span> <span class=\"n\">Ne.def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Polynomial.support_eq_empty</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.natDegree_int_cast.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial.natDegree</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">C_eq_int_cast</span><span class=\"o\">,</span> <span class=\"n\">natDegree_C</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.leadingCoeff_neg.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leadingCoeff</span><span class=\"o\">,</span> <span class=\"n\">leadingCoeff</span><span class=\"o\">,</span> <span class=\"n\">natDegree_neg</span><span class=\"o\">,</span> <span class=\"n\">coeff_neg</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.leadingCoeff_ne_zero.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ne.def</span><span class=\"o\">,</span> <span class=\"n\">leadingCoeff_eq_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.leadingCoeff_eq_zero_iff_deg_eq_bot.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">Polynomial.degree</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leadingCoeff_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">degree_eq_bot</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.degree_add_eq_right_of_degree_lt.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial.degree</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Polynomial.degree</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial.degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.degree</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">degree_add_eq_left_of_degree_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.leadingCoeff_C_mul_X_pow.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Polynomial.X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C_mul_X_pow_eq_monomial</span><span class=\"o\">,</span> <span class=\"n\">leadingCoeff_monomial</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.C_mul_X_pow_eq_self.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Finset.card</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.support</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Polynomial.X</span> <span class=\"bp\">^</span> <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">C_mul_X_pow_eq_monomial</span><span class=\"o\">,</span> <span class=\"n\">monomial_natDegree_leadingCoeff_eq_self</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.zero_le_degree_iff.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">Polynomial.degree</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">Nat.WithBot.lt_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">degree_eq_bot</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.natDegree_eq_zero_iff_degree_le_zero.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.natDegree</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">Polynomial.degree</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">natDegree_le_iff_degree_le</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.degree_linear.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.degree</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Polynomial.X</span> <span class=\"bp\">+</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">degree_add_eq_left_of_degree_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">degree_C_lt_degree_C_mul_X</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">degree_C_mul_X</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.natDegree_linear.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.natDegree</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Polynomial.X</span> <span class=\"bp\">+</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natDegree_add_C</span><span class=\"o\">,</span> <span class=\"n\">natDegree_C_mul_X</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.degree_X_pow.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.degree</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">X_pow_eq_monomial</span><span class=\"o\">,</span> <span class=\"n\">degree_monomial</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero'</span> <span class=\"n\">R</span><span class=\"o\">)]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.degree_X_sub_C.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.degree</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_neg</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">degree_X_add_C</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.natDegree_X_sub_C.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.natDegree</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">natDegree_sub_C</span><span class=\"o\">,</span> <span class=\"n\">natDegree_X</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.nextCoeff_X_sub_C.{v}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.nextCoeff</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_neg</span> <span class=\"n\">C</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">nextCoeff_X_add_C</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.degree_X_pow_sub_C.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.degree</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_neg</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">degree_X_pow_add_C</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.natDegree_X_pow_sub_C.{u}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.natDegree</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_neg</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">natDegree_X_pow_add_C</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Polynomial.leadingCoeff_X_sub_C.{v}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Polynomial.leadingCoeff</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_neg</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">leadingCoeff_X_add_C</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 398372385,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698188253
    },
    {
        "content": "<p>... and on <code>Mathlib.Data.Nat.Basic</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kn\">open</span>\n  <span class=\"n\">Nat</span>\n\n<span class=\"c1\">-- Nat.lt_iff_add_one_le</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_le_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Nat.add_succ_sub_one</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_sub_one</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Nat.succ_add_sub_one</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"n\">succ_sub_one</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Nat.pred_sub</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.pred</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.sub_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_sub</span><span class=\"o\">,</span> <span class=\"n\">one_add</span><span class=\"o\">,</span> <span class=\"n\">sub_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Nat.pred_one_add</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.pred</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.pred_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Nat.mul_left_eq_self_iff</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_right_eq_self_iff</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Nat.one_le_div_iff</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff_mul_le</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Nat.eq_of_dvd_of_div_eq_one</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.div_mul_cancel</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Nat.eq_zero_of_dvd_of_div_eq_zero</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.div_mul_cancel</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- Nat.mul_add_mod_of_lt</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_add_mod</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 398372467,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698188290
    },
    {
        "content": "<p>Hopefully this is useful to have more tests for <code>rewrite_search</code>.</p>",
        "id": 398372496,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698188324
    },
    {
        "content": "<p>(and if you want me to run the code on a glob of files, I can give it a try!  The main issues for this to work are (among others)</p>\n<ul>\n<li>ambiguous lemmas, due to the large <code>open</code> command,</li>\n<li>losing type ascriptions in lemma statements, resulting in non-typechecking statements or typeclass search being stuck.)</li>\n</ul>",
        "id": 398373210,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698188755
    },
    {
        "content": "<p>On <code>Mathlib.Data.Polynomial.Degree.Definitions</code>, <code>rw_search</code> works out of the box on 11/18 of the examples (I discarded those whose types are not equalities. There's no reason <code>rw_search</code> shouldn't work on iff, it just doesn't right now.</p>",
        "id": 398373639,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698189026
    },
    {
        "content": "<p>Unfortunately I don't really have time for more tweaking of rw_search right now, although it is very useful to have these additional examples.</p>",
        "id": 398373713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698189078
    },
    {
        "content": "<p>Ideally I will find time to run it properly on all of Mathlib! The <code>lean-training-data</code> repo has a mechanism to run a tactic against every declaration in Mathlib. I'd like to add:</p>\n<ul>\n<li>filtering (so we can run only against \"pure rewrite\" theorems)</li>\n<li>running against every subgoal, not just top level goals</li>\n</ul>",
        "id": 398373813,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698189141
    },
    {
        "content": "<p>Well, 11/18 seems like a very good result!</p>\n<p>If you decide to go back to trying stuff out and you do not want to do it properly with <code>lean-training-data</code>, let me know and I can generate more tests!</p>\n<p>As for <code>lean-training-data</code>, I have not forgotten that you had already mentioned it to me, I definitely want to look at it carefully, but I doubt that I will have the time before the term ends, in a couple of months.</p>",
        "id": 398374490,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698189652
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> any further interest in this? I am sad to see this PR with an interesting new tactic rotting. :-(</p>",
        "id": 399618405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698793821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'll take a look at this tomorrow. I'm still not fully qualified to review meta code, but I'd prefer to have it than not.</p>",
        "id": 399635560,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698802931
    },
    {
        "content": "<p>Thank you everyone for the feedback and review! Rob gave the delegation, and it's now landed in <code>master</code> for everyone to try out.</p>",
        "id": 399656833,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698814533
    },
    {
        "content": "<p>I'm happy to hear about working and non-working examples.</p>",
        "id": 399656869,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698814556
    },
    {
        "content": "<p>(And feel free to commit the output of <code>rw_search says</code>, as far as I'm concerned. :-)</p>",
        "id": 399656944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698814588
    },
    {
        "content": "<p>I don't necessarily expect the tactic to succeed here, but this error message definitely looks wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Digits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prepend_one_eq_append</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span>\n  <span class=\"n\">rw_search</span>\n  <span class=\"c1\">-- unknown free variable '_uniq.249'</span>\n</code></pre></div>",
        "id": 399797402,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698869857
    },
    {
        "content": "<p>Ah, this seems to be fixed by</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/Mathlib/Tactic/RewriteSearch.lean b/Mathlib/Tactic/RewriteSearch.lean</span>\n<span class=\"gh\">index 6149acbd3..ba11a4357 100644</span>\n<span class=\"gd\">--- a/Mathlib/Tactic/RewriteSearch.lean</span>\n<span class=\"gi\">+++ b/Mathlib/Tactic/RewriteSearch.lean</span>\n<span class=\"gu\">@@ -292,7 +292,7 @@ to prevent `rw_search` from using the names theorems.</span>\n<span class=\"w\"> </span>syntax \"rw_search\" (forbidden)? : tactic\n\n<span class=\"w\"> </span>elab_rules : tactic |\n<span class=\"gd\">-    `(tactic| rw_search%$tk $[[ $[-$forbidden],* ]]?) =&gt; do</span>\n<span class=\"gi\">+    `(tactic| rw_search%$tk $[[ $[-$forbidden],* ]]?) =&gt; withMainContext do</span>\n<span class=\"w\"> </span>  let forbidden : NameSet :=\n</code></pre></div>",
        "id": 399805161,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698873590
    },
    {
        "content": "<p>Do we have a #patronsaints linkifier already?</p>",
        "id": 399806468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698874262
    },
    {
        "content": "<p>I submitted a fix: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8101\">mathlib4#8101</a></p>",
        "id": 399812770,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698877846
    },
    {
        "content": "<p>I was surprised that <code>rw_search</code> seems to not look in the local context for possible rewrites.</p>",
        "id": 399812826,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698877889
    },
    {
        "content": "<p>(that makes my added test case a bit more involved)</p>",
        "id": 399812847,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698877910
    },
    {
        "content": "<p>Interesting, I thought it should. <code>rw?</code> uses the local hypotheses now, doesn't it??</p>",
        "id": 399829589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698886863
    },
    {
        "content": "<p>apparently not in this case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">makeSingleton</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">makeSingleton</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">makeSingleton</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- At one point, this failed with: unknown free variable '_uniq.62770'</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">makeSingleton</span>\n    <span class=\"n\">rw</span><span class=\"bp\">?</span> <span class=\"c1\">-- should find ih, but does not</span>\n</code></pre></div>",
        "id": 399832603,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698888644
    },
    {
        "content": "<p>I see an integer log function is used for penalty. Could you elaborate more details?</p>",
        "id": 399838457,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698891970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span>, have you read the doc-string on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Tactic.RewriteSearch.SearchNode.penalty#doc\">docs#Mathlib.Tactic.RewriteSearch.SearchNode.penalty</a> ?</p>",
        "id": 399839394,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698892479
    },
    {
        "content": "<p>Not really. Let me check it out.</p>",
        "id": 399839491,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698892531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rewrite_search/near/399829589\">said</a>:</p>\n<blockquote>\n<p>Interesting, I thought it should. <code>rw?</code> uses the local hypotheses now, doesn't it??</p>\n</blockquote>\n<p>ah, there's a bug in <code>localHypotheses</code>. It needs to call <code>whnfR</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/Mathlib/Tactic/Rewrites.lean b/Mathlib/Tactic/Rewrites.lean</span>\n<span class=\"gh\">index 07ef42d1a..459f1a6ba 100644</span>\n<span class=\"gd\">--- a/Mathlib/Tactic/Rewrites.lean</span>\n<span class=\"gi\">+++ b/Mathlib/Tactic/Rewrites.lean</span>\n<span class=\"gu\">@@ -85,6 +85,7 @@ def localHypotheses (except : List FVarId := []) : MetaM (Array (Expr × Bool ×</span>\n<span class=\"w\"> </span>  for h in r do\n<span class=\"w\"> </span>    if except.contains h.fvarId! then continue\n<span class=\"w\"> </span>    let (_, _, type) ← forallMetaTelescopeReducing (← inferType h)\n<span class=\"gi\">+    let type ← whnfR type</span>\n<span class=\"w\"> </span>    match type.getAppFnArgs with\n</code></pre></div>",
        "id": 399839706,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698892638
    },
    {
        "content": "<p>Though maybe using a <code>~q()</code> match there would be more idiomatic?</p>",
        "id": 399839765,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698892672
    },
    {
        "content": "<p>Thanks for this! I'd prefer not to use <code>quote4</code> here so it's easier to upstream this tactic later if desired.</p>",
        "id": 399840161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698892867
    },
    {
        "content": "<p>If you want to turn that patch into a PR I can insta-merge!</p>",
        "id": 399840234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698892908
    },
    {
        "content": "<p>I tacked it onto <a href=\"https://github.com/leanprover-community/mathlib4/pull/8101\">mathlib4#8101</a></p>",
        "id": 399840382,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698892980
    },
    {
        "content": "<p>hah, that makes 2 out of the 3 patron saints <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20error.20in.20structured.20proof/near/322950305\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/linarith.20error.20in.20structured.20proof/near/322950305</a></p>",
        "id": 399841870,
        "sender_full_name": "David Renshaw",
        "timestamp": 1698893726
    },
    {
        "content": "<p><code>rw_search</code> saved me time just now, on something like this, where I was teeing up my goal to be handleable by <code>gcongr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Positive.Field</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw_search</span>\n<span class=\"c1\">-- Try this: rw [@mul_one_div, @add_left_cancel_iff, @mul_one_div]</span>\n</code></pre></div>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 400220012,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699055308
    },
    {
        "content": "<p>I hope we can get even more ambitious with <code>rw_search</code> in future.</p>\n<p>I remember our prototype back in... 2019(!) once successfully finding a chain of 17 rewrites.</p>\n<p>The actual rewrites are not the difficulty: when the problem has too much branching we get lost in the tree search.</p>\n<p>Better premise selection, and better search heuristics, would both help.</p>",
        "id": 400248153,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699071226
    },
    {
        "content": "<p>I think <code>rw_search</code> has a reducibility issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RewriteSearch</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw_search</span> <span class=\"n\">says</span> <span class=\"n\">rw</span> <span class=\"o\">[]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">id</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Should I flag a tracker issue?</p>",
        "id": 404684540,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701193025
    },
    {
        "content": "<p>The issue is that <code>rw_search</code> uses a stronger <code>rfl</code> than <code>rw</code> I think. So oftentimes <code>rw_search</code> returns a <code>rw [blah, blah]</code> that should be <code>rw [blah, blah]; rfl</code></p>",
        "id": 404734662,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701212542
    },
    {
        "content": "<p>I think we need an issue for this (not sure what the right fix is, it would be a shame to make <code>rw_search</code> weaker so probably adding the rfl to the suggestion when needed is best, unless it turns out <code>rw_search</code> is way faster with a weaker rfl of course (<code>rw_search!</code> anyone?))</p>",
        "id": 404734862,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701212612
    }
]