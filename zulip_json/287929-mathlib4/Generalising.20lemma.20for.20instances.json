[
    {
        "content": "<p>Hi, I have the following proof right now that doesn't work. However, if you replace all the <code>α</code> with <code>ℚ</code> then it works. My idea is that if alpha can be casted to Q then the proof should still work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"n\">a</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">=</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">zify</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cast_floor_eq_int_floor</span><span class=\"o\">,</span> <span class=\"n\">cast_floor_eq_int_floor</span><span class=\"o\">,</span> <span class=\"n\">Rat.floor_cast</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_cast</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> Need to prove 0 ≤ Coe.coe z from 0 ≤ z -/</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decLe</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">floor_eq_zero.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)]</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Need to prove Coe.coe z &lt; 1 from ¬0 ≤ z -/</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decLe</span>\n</code></pre></div>\n<p>What should the correct instances be? For example, this proof should work for Nat and Int because they can be casted to rationals in this natural way</p>",
        "id": 400410063,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699205134
    },
    {
        "content": "<p>(The proof is long because I want it to be computable)</p>",
        "id": 400410548,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699205696
    },
    {
        "content": "<p>for <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I had to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 400410742,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699205906
    },
    {
        "content": "<p>Ah my bad</p>",
        "id": 400410761,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699205929
    },
    {
        "content": "<p>After thinking a bit, maybe it's not really possible, since the <code>Coe</code> instance / coercion in general doesn't have <em>any</em> guarantee</p>",
        "id": 400410873,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699206081
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"n\">a</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">-- changed from `0 ≤ z`</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">=</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">zify</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cast_floor_eq_int_floor</span><span class=\"o\">,</span> <span class=\"n\">cast_floor_eq_int_floor</span><span class=\"o\">,</span> <span class=\"n\">Rat.floor_cast</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_cast</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decLe</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">floor_eq_zero.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decLe</span>\n</code></pre></div>",
        "id": 400410950,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699206178
    },
    {
        "content": "<p>You don't even need an <code>[OrderedRing α]</code> assumption</p>",
        "id": 400411046,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699206262
    },
    {
        "content": "<p><code>(z : ℝ)</code> in your goal is really <code>(↑(↑z : ℚ) : ℝ)</code>, and since you've proven the result for all ℚ, you've also proven it for <code>(↑z : ℚ)</code></p>",
        "id": 400411115,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699206353
    },
    {
        "content": "<p>Hmm I will try it out</p>",
        "id": 400411275,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699206487
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 400411277,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699206489
    },
    {
        "content": "<p>Oops, just came back. It doesn't work as I wanted (as intended) since it's noncomputable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inst1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"n\">a</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"c1\">-- changed from `0 ≤ z`</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">=</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">zify</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cast_floor_eq_int_floor</span><span class=\"o\">,</span> <span class=\"n\">cast_floor_eq_int_floor</span><span class=\"o\">,</span> <span class=\"n\">Rat.floor_cast</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_cast</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decLe</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">floor_eq_zero.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decLe</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> failed to compile definition, consider marking it as 'noncomputable' because it depends on</span>\n<span class=\"cm\">'inst1', and it does not have executable code -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"n\">inst1</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Both of these are noncomputable now -/</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">⌊</span><span class=\"o\">((</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span>\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 400429264,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699225671
    },
    {
        "content": "<p>Unfortunately I don't think it's avoidable, so for now I have just replaced alpha with three different theorems for N Z and Q :)</p>",
        "id": 400429353,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699225749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Generalising.20lemma.20for.20instances/near/400410873\">said</a>:</p>\n<blockquote>\n<p>After thinking a bit, maybe it's not really possible, since the <code>Coe</code> instance / coercion in general doesn't have <em>any</em> guarantee</p>\n</blockquote>\n<p>Thinking back to this, what I want is an order-preserving embedding (\"mathematically\") instead of a type-theoretic <code>Coe</code>, if that makes sense</p>",
        "id": 400429385,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699225783
    },
    {
        "content": "<p>In other words, something that can prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo>:</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><mn>0</mn><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo>:</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0 \\leq (z : \\alpha)) \\implies (0 \\leq (z : \\mathbb{Q}))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">))</span></span></span></span></p>",
        "id": 400429472,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699225855
    },
    {
        "content": "<p>I think you want an order embedding (ie reflecting and preserving) so that you can conclude <code>Coe.coe z &lt; 1</code> from <code>¬(0 &lt;= z)</code></p>",
        "id": 400429853,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699226277
    },
    {
        "content": "<p>Yes exactly! Does that exist in Mathlib?</p>",
        "id": 400429904,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699226308
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Hom/Basic.html#OrderEmbedding\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Hom/Basic.html#OrderEmbedding</a></p>",
        "id": 400429930,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699226366
    },
    {
        "content": "<p>Thanks, let me try it</p>",
        "id": 400430010,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699226433
    },
    {
        "content": "<p>Why not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 400430811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699227339
    },
    {
        "content": "<p>It immediately says it's noncomputable</p>",
        "id": 400430878,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699227377
    },
    {
        "content": "<p>Again the point of the long proof is for it to be computable, otherwise I think something like decLe works immediately</p>",
        "id": 400430889,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699227393
    },
    {
        "content": "<p>I recommend first proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">⌊</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋₊</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400431120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699227626
    },
    {
        "content": "<p>You almost never want to write a complex decidable instance, just write a lemma that converts the statement into sometime already <code>Decidable</code> and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=decidable_of_iff#doc\">docs#decidable_of_iff</a></p>",
        "id": 400431173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699227694
    },
    {
        "content": "<p>I will do that instead :)</p>",
        "id": 400431224,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699227736
    },
    {
        "content": "<p>Thanks everyone</p>",
        "id": 400431227,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699227743
    },
    {
        "content": "<p>Okay I just isolated the decidability statements into a new file, then copy and paste it a billion times (more like 12) :) It's probably still a better approach then whatever I was attempting above though hahah</p>",
        "id": 400432020,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699228697
    }
]