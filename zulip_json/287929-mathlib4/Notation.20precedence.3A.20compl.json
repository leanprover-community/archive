[
    {
        "content": "<p>What do we need to do with notation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasCompl.compl#src\">src#HasCompl.compl</a> so that <code>ContinuousOn f {a}ᶜ</code> will parse as <code>ContinuousOn f ({a}ᶜ)</code> instead of <code>(ContinuousOn f {a})ᶜ</code> (here <code>compl</code> stands for <code>not</code>)?</p>",
        "id": 370603553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687998671
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5586\">#5586</a> (WIP)</p>",
        "id": 370785903,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688045731
    },
    {
        "content": "<p>What other notations have wrong precedences / need weird parentheses?<br>\nI believe there is something with integrals with bounds?</p>",
        "id": 370786186,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688045788
    },
    {
        "content": "<p>For integrals, the plan is to move to <code>∫_{a}^{b} x, f x</code></p>",
        "id": 370795951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688047459
    },
    {
        "content": "<p>(at least this is my plan)</p>",
        "id": 370796019,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688047470
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 370796807,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688047596
    },
    {
        "content": "<p>Notation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bundle.TotalSpace.proj#doc\">docs#Bundle.TotalSpace.proj</a> needs parentheses in <code>(π E) x</code></p>",
        "id": 370804747,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688048755
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5589\">#5589</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/5590\">#5590</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/5591\">#5591</a></p>",
        "id": 370820600,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688051416
    },
    {
        "content": "<p>Do we want <code>∫ x, L x ∂μ 37</code> to mean <code>(∫ x, L x ∂μ) 37</code>? Currently it means <code>∫ x, L x ∂(μ 37)</code>, which seems wrong.</p>",
        "id": 370888203,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688063923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20precedence.3A.20compl/near/370786186\">said</a>:</p>\n<blockquote>\n<p>What other notations have wrong precedences / need weird parentheses?</p>\n</blockquote>\n<p>I'm always surprised that <code>⨅ i, c = c</code> parses as <code>⨅ i, (c = c)</code> instead of <code>(⨅ i, c) = c</code>.</p>",
        "id": 370889132,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688064092
    },
    {
        "content": "<p>Btw, speedy delegations of <a href=\"https://github.com/leanprover-community/mathlib4/pull/5586\">#5586</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5589\">#5589</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5591\">#5591</a> are welcome. I think they're (mostly) good to go.</p>",
        "id": 370889357,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688064139
    },
    {
        "content": "<p>The <code>pos_part</code> notation is botched too, although the whole file is botched so maybe let me redo it from scratch.</p>",
        "id": 370891547,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688064611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5586\">#5586</a> is broken.</p>",
        "id": 370945714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688080544
    },
    {
        "content": "<p>I merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/5589\">#5589</a>.</p>",
        "id": 370946118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688080691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20precedence.3A.20compl/near/370945714\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5586\">#5586</a> is broken.</p>\n</blockquote>\n<p>That's why Floris asks for delegation, not merging.</p>",
        "id": 370949585,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688082497
    },
    {
        "content": "<p>I resolved a merge conflict in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5586\">#5586</a> and fixed errors found by <code>lint</code> (not tested).</p>",
        "id": 370951305,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688083312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20precedence.3A.20compl/near/370889132\">said</a>:</p>\n<blockquote>\n<p>I'm always surprised that <code>⨅ i, c = c</code> parses as <code>⨅ i, (c = c)</code> instead of <code>(⨅ i, c) = c</code>.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5614\">#5614</a></p>",
        "id": 371100644,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688122825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20precedence.3A.20compl/near/370891547\">said</a>:</p>\n<blockquote>\n<p>The <code>pos_part</code> notation is botched too, although the whole file is botched so maybe let me redo it from scratch.</p>\n</blockquote>\n<p>I need more than that. The occurrences of <code>⁺</code> in <code>Algebra/Order/LatticeGroup</code> look fine to me.</p>",
        "id": 371108083,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688124235
    },
    {
        "content": "<p>The <code>SetFamily/Shadow</code> file looks bad, I'll fix that notation.</p>",
        "id": 371108265,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688124264
    },
    {
        "content": "<p>Yeah sorry, it only came up because I started using <code>pos_part</code> on pi types. <code>f i\\pospart</code> currently means <code>(f i)\\pospart</code> instead of <code>f (i\\pospart)</code>.</p>",
        "id": 371116208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688125743
    },
    {
        "content": "<p>oh, that is bad indeed. Does that currently already occur in the library?</p>",
        "id": 371121109,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688126587
    },
    {
        "content": "<p>I believe not. <code>pos_part</code> is barely used as of now.</p>",
        "id": 371126687,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688127570
    },
    {
        "content": "<p>I wanted to rewrite some proof about integrals in terms of <code>posPart</code>/<code>negPart</code> while porting, then noticed that we have very few lemmas about these functions.</p>",
        "id": 371128269,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688127851
    },
    {
        "content": "<p>A few more: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5615\">#5615</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/5618\">#5618</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/5619\">#5619</a> <a href=\"https://github.com/leanprover-community/mathlib4/pull/5620\">#5620</a></p>",
        "id": 371132234,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688128556
    },
    {
        "content": "<p>I want to also fix the precedence of <code>#</code> for <code>cardinal.mk</code>, so that <code>p #α</code> is legal. I think that necessary means that <code>#(α i)</code> requires parentheses.</p>",
        "id": 371135610,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688129117
    },
    {
        "content": "<p>Same as the sqrt thing in the other thread, then</p>",
        "id": 371147196,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1688130988
    },
    {
        "content": "<p>cardinality precedence is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5623\">#5623</a></p>",
        "id": 371181635,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688134884
    },
    {
        "content": "<p>I also fixed the absolute value precedence in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5619\">#5619</a>, so now you can write <code>max |x| |y|</code> without parentheses.</p>",
        "id": 371199053,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688137625
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/5660\">#5660</a>, something is wrong with notation: it fails to parse <code>E ≃ₘ^n[𝕜] E'</code>, e.g., on line 132.</p>",
        "id": 371615523,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688267482
    },
    {
        "content": "<p>I would appreciate a merge on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5615\">#5615</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5619\">#5619</a> and a delegation of <a href=\"https://github.com/leanprover-community/mathlib4/pull/5623\">#5623</a>.</p>",
        "id": 371672086,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1688291199
    }
]