[
    {
        "content": "<p>The following works in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">](</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">fact_finite_dimensional_of_finrank_eq_succ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>It is producing the proof <code>fact_finiteDimensional_of_finrank_eq_succ 2</code>. But in Lean 4 the translated code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FiniteDimensional</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">](</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">fact_finiteDimensional_of_finrank_eq_succ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>  <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>which complains with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">fact_finiteDimensional_of_finrank_eq_succ</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DivisionRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)],</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Using <code>set_option synthInstance.checkSynthOrder false in</code> removes the error on the instance declaration but then <code>infer_instance</code> fails. Is this a known issue?</p>",
        "id": 388594873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693600240
    },
    {
        "content": "<p>I think this is a case of <code>in</code> creating a section and <code>local</code> not surviving past it</p>",
        "id": 388595390,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693600422
    },
    {
        "content": "<p>Both </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.checkSynthOrder</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">fact_finiteDimensional_of_finrank_eq_succ</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>  <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.checkSynthOrder</span> <span class=\"n\">false</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">fact_finiteDimensional_of_finrank_eq_succ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">R</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>  <span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>work for example</p>",
        "id": 388595672,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693600532
    },
    {
        "content": "<p>Indeed!</p>",
        "id": 388595695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693600542
    },
    {
        "content": "<p>I've read about that \"feature\" before, but it's really hard to avoid being surprised anyway!</p>",
        "id": 388595787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693600576
    },
    {
        "content": "<p>I don't remember if there was a satisfying workaround</p>",
        "id": 388595873,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693600604
    },
    {
        "content": "<p>Should I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.checkSynthOrder</span> <span class=\"n\">false</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">fact_finiteDimensional_of_finrank_eq_succ</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.checkSynthOrder</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 388595887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693600610
    },
    {
        "content": "<p>I think that is the best I've seen :) Others might know better</p>",
        "id": 388595955,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693600643
    },
    {
        "content": "<p>Next issue is actually a lot worse. You know this legend saying <code>simp only</code> is nice for proof maintenance? When the Lean 3 proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inner_cross_product_apply</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"n\">u</span> <span class=\"bp\">×₃</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"n\">ω.volume_form</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cross_product</span><span class=\"o\">,</span> <span class=\"n\">to_dual</span><span class=\"o\">,</span> <span class=\"n\">linear_equiv.trans_symm</span><span class=\"o\">,</span> <span class=\"n\">linear_equiv.symm_symm</span><span class=\"o\">,</span>\n  <span class=\"n\">linear_isometry_equiv.to_linear_equiv_symm</span><span class=\"o\">,</span> <span class=\"n\">alternating_map.curry_left_linear_map_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">linear_map.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">linear_map.llcomp_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">linear_equiv.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">linear_equiv.trans_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_isometry_equiv.coe_to_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"n\">linear_isometry_equiv.norm_map</span><span class=\"o\">,</span> <span class=\"n\">submodule.coe_norm</span><span class=\"o\">,</span>\n  <span class=\"n\">inner_product_space.to_dual_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">alternating_map.curry_left_apply_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">alternating_map.const_linear_equiv_of_is_empty_symm_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">linear_map.coe_to_continuous_linear_map'</span><span class=\"o\">,</span> <span class=\"n\">matrix.zero_empty</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and Lean 4 answers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">ω</span><span class=\"o\">:</span> <span class=\"n\">Orientation</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">uvw</span><span class=\"o\">:</span> <span class=\"n\">E</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">inner</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">LinearIsometryEquiv.symm</span> <span class=\"o\">(</span><span class=\"n\">InnerProductSpace.toDual</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">LinearMap.toContinuousLinearMap</span>\n        <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">LinearMap.llcomp</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlternatingMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n              <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">LinearEquiv.symm</span> <span class=\"n\">AlternatingMap.constLinearEquivOfIsEmpty</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span>\n                <span class=\"n\">toAddHom</span> <span class=\"o\">:=</span>\n                  <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n                      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">AlternatingMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span><span class=\"o\">))),</span>\n                          <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n                <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span>\n                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">AlternatingMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">0</span><span class=\"o\">))),</span>\n                      <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span>\n                      <span class=\"n\">toAddHom</span> <span class=\"o\">:=</span>\n                        <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                          <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">AlternatingMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">1</span><span class=\"o\">))),</span>\n                                <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                                  <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n                      <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span>\n                        <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                          <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">AlternatingMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">1</span><span class=\"o\">))),</span>\n                            <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n                  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span>\n                            <span class=\"n\">toAddHom</span> <span class=\"o\">:=</span>\n                              <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                                <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n                                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">AlternatingMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">2</span><span class=\"o\">))),</span>\n                                      <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                                        <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n                            <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span>\n                              <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">AlternatingMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"mi\">2</span><span class=\"o\">))),</span>\n                                  <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">AlternatingMap.curryLeft</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n                        <span class=\"o\">(</span><span class=\"n\">volumeForm</span> <span class=\"n\">ω</span><span class=\"o\">))</span>\n                    <span class=\"n\">u</span><span class=\"o\">))</span>\n              <span class=\"n\">v</span><span class=\"o\">)))))</span>\n    <span class=\"n\">w</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">volumeForm</span> <span class=\"n\">ω</span><span class=\"o\">)</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 388596474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693600857
    },
    {
        "content": "<p>yeah I guess sections is a natural way to make <code>in</code> work but you really have to remember that this is what's going on in order to understand these initially counterintuitive errors!</p>",
        "id": 388596512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693600878
    },
    {
        "content": "<p>Can one make <code>local set_option</code> or something that hides the toggle on/off?</p>",
        "id": 388596588,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693600922
    },
    {
        "content": "<p>Fortunately git blame says <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> will be delighted to fix that proof <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 388596683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693600953
    },
    {
        "content": "<p>As for the much worse issue, yeah, these would come up during porting. The only solution I ever found was to bite the bullet and figure out what wasn't firing. It might be one of those situations where <code>simp [X]</code> fails but <code>rw [X]</code> works, there is a thread <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/358857932\">here</a> where I whine about this. If you want to see if you're lucky you could randomly add <code>_</code> to the end of some of the lemmas in the list :-/</p>",
        "id": 388596782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693601003
    },
    {
        "content": "<p>What if you delete <code>only</code>?</p>",
        "id": 388596828,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693601031
    },
    {
        "content": "<p>bet that doesn't fix it</p>",
        "id": 388596846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693601041
    },
    {
        "content": "<p>there's a chance that adding a random <code>_</code> at the end of one of the lemma statements fixes it</p>",
        "id": 388597074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693601139
    },
    {
        "content": "<p>I see <code>eq_self_iff_true</code> which I never see except from a working <code>simp [...]</code>that got squeezed</p>",
        "id": 388597194,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693601200
    },
    {
        "content": "<p>I know, I've already being doing this a lot, although it usually doesn't get that bad outside the manifold library.</p>",
        "id": 388597195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693601200
    },
    {
        "content": "<p>Conveniently enough, I no longer have time to work on this now, so I pushed a fix for the whole file except for this monster <code>simp only</code>.</p>",
        "id": 388598429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693601716
    },
    {
        "content": "<p>One thing I've done in the past is to make <code>rw</code> do the job instead in lean 3, and then port the rw proof to lean 4</p>",
        "id": 388598561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693601765
    },
    {
        "content": "<p>then you can change it back to <code>simp</code> and find the <code>rw</code> which can't be simped and then you can moan about it on the lean 4 thread.</p>",
        "id": 388598668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693601833
    }
]