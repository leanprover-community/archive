[
    {
        "content": "<p>Separately, is there support for bumping this feature request: <a href=\"https://github.com/leanprover/lean4/issues/715\">https://github.com/leanprover/lean4/issues/715</a>  ?</p>",
        "id": 391204101,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694792559
    },
    {
        "content": "<p>Can you remind me what pretty-printer beta reduction support in lean 3 looked like?</p>",
        "id": 391204831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694792722
    },
    {
        "content": "<p>From my point of view it meant that I saw things like <code>α</code> instead of <code>(fun x ↦ α) a</code>.</p>",
        "id": 391205025,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694792780
    },
    {
        "content": "<p>That could be annoying though right? Because then <code>rw</code> would randomly fail?</p>",
        "id": 391205585,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694792898
    },
    {
        "content": "<p>This is just for the pretty printer!</p>",
        "id": 391205683,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694792920
    },
    {
        "content": "<p>I had that in the tutorials project (coming from my teaching) but lots of people complained it led to incomprehensible failures</p>",
        "id": 391205702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694792925
    },
    {
        "content": "<p>But I think we should still have the option.</p>",
        "id": 391205781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694792942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> are you talking about the beta-reduction for pretty-printing? I don't understand how this could impact anything.</p>",
        "id": 391205934,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694792973
    },
    {
        "content": "<p>But resist the temptation to make it default.</p>",
        "id": 391205946,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694792975
    },
    {
        "content": "<p>Right, but Oliver, if you see <code>c</code> in the pretty printer and you try to rewrite with <code>h : c = d</code>, but it's really <code>(fun x ↦ c) a</code>, then you'll get a random failure of <code>rw</code>, no?</p>",
        "id": 391206108,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694793003
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 391206190,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694793015
    },
    {
        "content": "<p>Where here \"random\" means \"the information you need to understand it has been hidden by the pretty printer\"</p>",
        "id": 391206242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694793025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Pretty.20printing.20defaults/near/391206108\">said</a>:</p>\n<blockquote>\n<p>Right, but Oliver, if you see <code>c</code> in the pretty printer and you try to rewrite with <code>h : c = d</code>, but it's really <code>(fun x ↦ c) a</code>, then you'll get a random failure of <code>rw</code>, no?</p>\n</blockquote>\n<p>Actually, <code>rw</code> will work here</p>",
        "id": 391206307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694793039
    },
    {
        "content": "<p>??? I'm not saying I don't believe you, but I would swear that it would fail. Is there a similar situation in which it <em>would</em> fail?</p>",
        "id": 391206583,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694793094
    },
    {
        "content": "<p>I'm pretty sure there are situations in which it can fail</p>",
        "id": 391206695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694793118
    },
    {
        "content": "<p>Certainly I can write a tactic that detects if there is a beta reduction available, and succeeds only if there is not</p>",
        "id": 391206866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694793144
    },
    {
        "content": "<p>FWIW, I would be happy if we could have a limited version of pretty print beta-reduction which only applies for <code>Type</code>-valued functions.</p>",
        "id": 391207236,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694793216
    },
    {
        "content": "<p>Yaël is right though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 391207322,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694793230
    },
    {
        "content": "<p>I remember it caused linarith failures in the tutorials.</p>",
        "id": 391207436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694793245
    },
    {
        "content": "<p>Anything that matches exprs rather than with <code>Qq</code> / unification would fail, and linarith is very guilty of expression matches in Lean 3</p>",
        "id": 391207816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694793320
    },
    {
        "content": "<p>To explain a bit further, the reason that <code>rw</code> doesn't \"rewrite under binders\" is because it generates (the equivalent of) an application of <code>cast (congr_arg f)</code>, where <code>f</code> is called the <em>motive</em>. (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cast#doc\">docs#cast</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=congr_arg#doc\">docs#congr_arg</a>)</p>\n<p>When you rewrite <code>∀ a, a + 0 = a</code> in <code>∑ i, i + 0 = ∑ i, i</code>, there's no motive <code>rw</code> could possibly use. If such a <code>f</code> existed, it would somehow have access to the variable <code>i</code> from the outside context where <code>i</code> is bound, not free.</p>\n<p>So the more accurate rule is \"<code>rw</code> can't rewrite subexpressions that depend on a bound variable\", because those are exactly the ones for which there's no motive (reference needed).</p>",
        "id": 391208356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694793425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, I think it might be wise to split this thread, since you asked two questions and everyone is only answering the second one</p>",
        "id": 391208788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694793522
    },
    {
        "content": "<p>In fact, I think rewriting under binders might even be unprovable without function extensionality?</p>",
        "id": 391208837,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694793537
    },
    {
        "content": "<p>23 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Pretty.20printing.20defaults\">#mathlib4 &gt; Pretty printing defaults</a> by <span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span>.</p>",
        "id": 391208996,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694793591
    },
    {
        "content": "<p>I ran into this problem in the tutorials project when I was starting to learn Lean and even went here to ask a question.</p>",
        "id": 391210652,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694794065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> While I don't support using <code>pp.beta</code>, here's a mathlib PR that implements it with a couple caveats (<code>pp.analyze</code> won't work, and you might see non-beta-reduced tooltips in the infoview):  <a href=\"https://github.com/leanprover-community/mathlib4/pull/7205\">#7205</a> (<span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, this is <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20only.20for.20universal.20cleanup/near/352090165\">from this</a> from a thread of yours)</p>",
        "id": 391360651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694859638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Here's a confusing example to support your thought about how it's annoying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  α β : Type</span>\n<span class=\"cm\">  f : α → β</span>\n<span class=\"cm\">  a : α</span>\n<span class=\"cm\">  b : β</span>\n<span class=\"cm\">  h : f a = b</span>\n<span class=\"cm\">  ⊢ f a = b</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>It's possible to get that sort of term naturally.</p>\n<p>When I was first learning Lean a few years ago, I almost gave up on it because of <code>pp.beta</code>. I managed to infer that I had an unreduced lambda term, and it was frustrating that there seemed to be no way to directly observe it -- I was thinking \"if this is what people are willing to put up with, this can't be the end of it.\" Sorting this out was my first <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> question. (Other than that, I enjoyed Patrick's tutorial :-) It made sense why <code>pp.beta</code> was set, and amusingly the tutorial only ever seemed to trip up people who knew some lambda calculus, and always at a particular linarith exercise, 0079.)</p>",
        "id": 391360657,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694859642
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> both for <a href=\"https://github.com/leanprover-community/mathlib4/pull/7205\">#7205</a> and for the illustrative example.</p>\n<p>I would add:</p>\n<ol>\n<li>I'm persuaded that today the right call is for <code>pp.beta</code> to exist but switched off unless the user demands it (which IIUC is what you propose)</li>\n<li>I'm a mathematician first and a type theorist only by necessity. So for me beta-reduction isn't really a thing. I regard the fact that <code>rw</code> can choke in this way as a failure of our tooling and thus see the fact that <code>pp.beta</code> cannot be on by default as a price we're paying for a deficiency of <code>rw</code>. (Of course I don't pretend I have a solution but I think it's important to keep this perspective in mind.)</li>\n<li>Could we have a version of <code>pp.beta</code> for <code>Type</code>-valued functions? Could this be always on? I would like this because I often use the infoview to inspect the type of a term and it's annoying to have to do the beta-reduction in my head.</li>\n<li>Failing 3, could we add a button to the infoview that I can click which prettifies things even further (e.g., applies beta reduction)?</li>\n</ol>",
        "id": 391362320,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694860731
    },
    {
        "content": "<p>Re 3: Could you give an example for how this occurs for <code>Type</code>-valued functions? I'm wondering if there's some other part of Lean that should be beta reducing something but it's not.</p>",
        "id": 391362682,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694860988
    },
    {
        "content": "<p>I couldn't quickly generate an example but I definitely encounter this fairly often --- I'll try to post an example later today when I have time for Lean again.</p>",
        "id": 391362849,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694861098
    },
    {
        "content": "<p>Re 1: Yes, I don't support it being a default, but I support your right to use it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> In that linked thread of Heather's, there was another feature we were exploring which would <em>actually</em> beta reduce the entire context after every tactic, and then <code>pp.beta</code> would be there to smooth over a few gaps in that (for example, I couldn't get the info view to show the beta reduced context if your cursor was in the whitespace before the first tactic in a <code>by ...</code> but it's safe to use <code>pp.beta</code> because by the time that tactic ran it'd all be beta reduced)</p>",
        "id": 391362915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694861152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Pretty.20printing.20beta.20reduction/near/391362682\">said</a>:</p>\n<blockquote>\n<p>Re 3: Could you give an example for how this occurs for <code>Type</code>-valued functions? I'm wondering if there's some other part of Lean that should be beta reducing something but it's not.</p>\n</blockquote>\n<p>Here is a simple example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"c1\">-- Reports `(fun x ↦ R) m`, I would prefer it to say: `R`.</span>\n</code></pre></div>",
        "id": 391519223,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694962950
    },
    {
        "content": "<p>Yes, this kind of example is super annoying and I really feel it wasn't everywhere in Lean 3 as it is in Lean 4.</p>",
        "id": 391519379,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694963004
    },
    {
        "content": "<p>I suspect this is due to the coercion mechanism changing</p>",
        "id": 391520739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694963409
    },
    {
        "content": "<p>Here's a smaller mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FunLike.Basic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 391521105,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694963512
    },
    {
        "content": "<p>Indeed there is no such problem in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fun_like.basic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 391521270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694963554
    }
]