[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> spotted that something is wrong with the <code>tryCatch</code> in the <code>ContT</code> (continuation) monad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ContT</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">try</span> <span class=\"n\">pure</span> <span class=\"n\">true</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n  <span class=\"n\">throw</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"oh no {x}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo.run</span> <span class=\"n\">pure</span>\n<span class=\"c1\">-- `Except.ok false`, no error; should be `Except.error \"oh no true\"`</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5897#discussion_r1263741637\">the github discussion</a> has some ideas for how to fix this, but none of them fully work.</p>",
        "id": 375341221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689356278
    },
    {
        "content": "<p>Kyle suggested</p>\n<blockquote>\n<p>Maybe this is it? Notice that <code>ε</code> has to be in the same universe as <code>r</code>, and everything has to be constrained to <code>ContT r m r</code>.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ContT.tryCatch</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadExceptOf</span> <span class=\"n\">ε</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">ContT</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">ContT</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ContT</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">try</span> <span class=\"n\">Sum.inr</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">act</span> <span class=\"n\">pure</span> <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"n\">v</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">e</span> <span class=\"n\">c</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>which looks correct, but doesn't work for a <code>MonadExcept</code> instance</p>",
        "id": 375341824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689356405
    },
    {
        "content": "<p><code>ContT</code> also seems like it just might not be suitable for a <code>try</code>/<code>catch</code>, at least if you expect a <code>finally</code> clause that always runs, since <code>ContT</code> lets you do an early return from anywhere. This <code>ContT r m r</code> type seems to be what you need to delimit a continuation. (Here's some <a href=\"https://hub.darcs.net/ross/transformers/browse/Control/Monad/Trans/Cont.hs#230\">Haskell</a>)</p>",
        "id": 375343367,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689356791
    },
    {
        "content": "<p>Ah, I hadn't quite made the connection that <code>try</code>/<code>catch</code> enables <code>finally</code></p>",
        "id": 375344129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689356988
    },
    {
        "content": "<p>And <a href=\"https://www.yesodweb.com/blog/2014/05/exceptions-cont-monads\">https://www.yesodweb.com/blog/2014/05/exceptions-cont-monads</a> suggests that <code>finally</code> can't exist in <code>ContT</code></p>",
        "id": 375344153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689356998
    },
    {
        "content": "<p>It is odd that we don't separate catch and mask into two classes. This isn't the first time I've found it awkward.</p>",
        "id": 375354201,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689359388
    }
]