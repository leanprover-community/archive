[
    {
        "content": "<p>When making a structure based on quotient groups, sometimes instances are not found? Here is an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">unfoo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fooSetoid</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">fooSetoid</span>\n<span class=\"kd\">instance</span> <span class=\"n\">barNeg</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">))</span> <span class=\"c1\">-- no instance of Neg (Quotient fooSetoid)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">barNeg.neg</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">))</span> <span class=\"c1\">-- instance found</span>\n</code></pre></div>\n<p>Not sure if it's a bug in instance resolution or reducibility or something else.</p>",
        "id": 382078742,
        "sender_full_name": "David Ang",
        "timestamp": 1691226978
    },
    {
        "content": "<p>When you are writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>you are not forcing Lean to consider that <code>⟦⟨x⟩⟧</code> is of type <code>bar</code>, you are just helping it to elaborate. Here Lean discards your advice, and considers it as a term of type <code>Quotient fooSetoid</code>. And it can't find a <code>Neg</code> instance on this one, which is normal since you haven't declared one (it's exactly what the error message says).</p>\n<p>To force Lean to consider <code>⟦⟨x⟩⟧</code>of type <code>bar</code>, you can for instance write <code>id ⟦⟨x⟩⟧ : bar</code>.</p>",
        "id": 382087103,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1691228621
    },
    {
        "content": "<p>Alternatively an explicit <code>bar.mk</code>constructor to help guide the type.</p>",
        "id": 382087601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691228721
    },
    {
        "content": "<p>Making <code>bar</code> an <code>abbrev</code> here would work too I think</p>",
        "id": 382093431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691230128
    },
    {
        "content": "<p>I see. Thanks for the suggestions!</p>",
        "id": 382186886,
        "sender_full_name": "David Ang",
        "timestamp": 1691253226
    }
]