[
    {
        "content": "<p>Should some of these be unified:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"mi\">10</span> <span class=\"kd\">def</span><span class=\"bp\">\\</span> <span class=\"n\">isBlackListed</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span><span class=\"kd\">def</span> <span class=\"n\">isInternal'</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"n\">declName.isInternal</span> <span class=\"bp\">||</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"k\">match</span> <span class=\"n\">declName</span> <span class=\"k\">with</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"match_\"</span><span class=\"bp\">.</span><span class=\"n\">isPrefixOf</span> <span class=\"n\">s</span> <span class=\"bp\">||</span> <span class=\"s2\">\"proof_\"</span><span class=\"bp\">.</span><span class=\"n\">isPrefixOf</span> <span class=\"n\">s</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"bp\">|</span> <span class=\"n\">_</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span><span class=\"kn\">open</span> <span class=\"n\">Meta</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"c1\">--- from Lean.Server.Completion</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"kd\">def</span> <span class=\"n\">isBlackListed</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"k\">if</span> <span class=\"n\">declName</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">sorryAx</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"k\">if</span> <span class=\"n\">declName</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">_</span> <span class=\"s2\">\"inj\"</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"k\">if</span> <span class=\"n\">declName</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">_</span> <span class=\"s2\">\"noConfusionType\"</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">declName.isInternal'</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>   <span class=\"bp\">||</span> <span class=\"n\">isAuxRecursor</span> <span class=\"n\">env</span> <span class=\"n\">declName</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>   <span class=\"bp\">||</span> <span class=\"n\">isNoConfusion</span> <span class=\"n\">env</span> <span class=\"n\">declName</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>  <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isRec</span> <span class=\"n\">declName</span> <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isMatcher</span> <span class=\"n\">declName</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"bp\">-</span><span class=\"kd\">end</span> <span class=\"n\">Name</span>\n<span class=\"c1\">--</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Name.lean</span><span class=\"bp\">-</span><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Name.lean</span><span class=\"bp\">-</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Name.lean</span><span class=\"o\">:</span><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">isBlackListed</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Name.lean</span><span class=\"bp\">-</span>  <span class=\"k\">if</span> <span class=\"n\">declName.toString.startsWith</span> <span class=\"s2\">\"Lean\"</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Name.lean</span><span class=\"bp\">-</span>  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Name.lean</span><span class=\"bp\">-</span>  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">declName.isInternal'</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Name.lean</span><span class=\"bp\">-</span>   <span class=\"bp\">||</span> <span class=\"n\">isAuxRecursor</span> <span class=\"n\">env</span> <span class=\"n\">declName</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Name.lean</span><span class=\"bp\">-</span>   <span class=\"bp\">||</span> <span class=\"n\">isNoConfusion</span> <span class=\"n\">env</span> <span class=\"n\">declName</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Name.lean</span><span class=\"bp\">-</span>  <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isRec</span> <span class=\"n\">declName</span> <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isMatcher</span> <span class=\"n\">declName</span>\n<span class=\"c1\">--</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Find.lean</span><span class=\"c1\">--- from Lean.Server.Completion</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Find.lean</span><span class=\"o\">:</span><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">isBlackListed</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Find.lean</span><span class=\"bp\">-</span>  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Find.lean</span><span class=\"bp\">-</span>  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">declName.isInternal</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Find.lean</span><span class=\"bp\">-</span>   <span class=\"bp\">||</span> <span class=\"n\">isAuxRecursor</span> <span class=\"n\">env</span> <span class=\"n\">declName</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Find.lean</span><span class=\"bp\">-</span>   <span class=\"bp\">||</span> <span class=\"n\">isNoConfusion</span> <span class=\"n\">env</span> <span class=\"n\">declName</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Find.lean</span><span class=\"bp\">-</span>  <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isRec</span> <span class=\"n\">declName</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Find.lean</span><span class=\"bp\">-</span>  <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isMatcher</span> <span class=\"n\">declName</span>\n</code></pre></div>\n<p>They seem to be all just a very slightly bit different (filtering out <code>Lean.</code> or not, <code>CoreM</code> vs. <code>MetaM</code>).</p>",
        "id": 381509682,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691073648
    }
]