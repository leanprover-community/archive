[
    {
        "content": "<p>Based on <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>' work in speeding up instance unification, I tried to do the same for ideal quotients in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7584\">#7584</a>. This seems to work pretty well except for the direct limit of fields, which <a href=\"https://github.com/leanprover-community/mathlib4/blob/349e7141df32da83dc5b61e72e18153bb1540fea/Mathlib/Algebra/DirectLimit.lean#L736\">slows down dramatically</a>. I'm stumped how to continue from that point.</p>\n<p>To figure out the reason of the slowdown, I enable my basic trace set above the slow definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>In the trace I find:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">146</span><span class=\"bp\">.</span><span class=\"mi\">756380</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">Ring.DirectLimit</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)),</span> <span class=\"n\">term</span>\n              <span class=\"o\">{</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"n\">src</span><span class=\"bp\">✝¹</span> <span class=\"k\">with</span>\n                <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span>\n                <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DirectLimit.mul_inv_cancel</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span>\n                <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n</code></pre></div>\n<p>but below that point, there are maybe 100 lines with nothing taking over 0.05s, so where is the remaining time going?</p>\n<p>Since tracing doesn't help, how do I go about diagnosing and fixing this?</p>",
        "id": 395852808,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696933865
    },
    {
        "content": "<p>I've seen this phenomenon before but never got around to minimising (and I'm currently in teaching hell)</p>",
        "id": 395862114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696937419
    },
    {
        "content": "<p>I tried playing around with the <code>Ideal.Quotient.field</code> instance but no real progress in the direct limit...</p>",
        "id": 395864145,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696938163
    },
    {
        "content": "<p>Changing the definition to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">field</span> <span class=\"o\">[</span><span class=\"n\">DirectedSystem</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">Ring.DirectLimit</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span>\n    <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DirectLimit.mul_inv_cancel</span> <span class=\"n\">G</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span>\n    <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>seems to fix the problem. I haven't figured out why yet.</p>",
        "id": 395873753,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696941352
    },
    {
        "content": "<p>The difference between the two is the eta expansion of the <code>CommRing</code> instance which will be fixed after <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a></p>",
        "id": 395876357,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696942132
    },
    {
        "content": "<p>Beat me to it. I am guessing Lean just goes crazy unfolding and checking with that one eta. Without it, it finishes the defeq check quickly</p>",
        "id": 395876602,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696942205
    },
    {
        "content": "<p>Breaking out the data carrying classes like this will also introduce eta’s. But in this case I’m guessing that <code>RingCon</code> instances are too expensive to unify against because you repeatedly have to unify against the data on the quotient</p>",
        "id": 395877279,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696942422
    },
    {
        "content": "<p>Yanking out <code>Function.Injective/Surjective.x</code> instances is doing a great deal to avoid depending on unnecessary data but increases maintenance cost. Plus it is prone to missing some calls and degrading performance. </p>\n<p>It is probably best to build <code>Function.Injective/Surjective.x’</code> which don’t depend on the extra data and gauge their performance. Or even just build these for the most common cases of <code>Subtype.coe</code> and <code>Quotient.mk</code> I’m not sure which is preferable at the moment</p>",
        "id": 395879545,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696943155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.237584.20speed.20up.20.60Ideal.2EQuotient.2EcommRing.60.20instance/near/395877279\">said</a>:</p>\n<blockquote>\n<p>Breaking out the data carrying classes like this will also introduce eta’s. But in this case I’m guessing that <code>RingCon</code> instances are too expensive to unify against because you repeatedly have to unify against the data on the quotient</p>\n</blockquote>\n<p>My motivation for this change that every part of the quotient structure is defined via Submodule, not RingCon, apart from the multiplication. So according to this idea, by explicitly taking over the Submodule quotient structure we do this unification once in the CommRing instance and never again (?)</p>",
        "id": 395880393,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696943462
    },
    {
        "content": "<p>Ah ok. At the bottom it is all <code>AddCon.Quotient</code> right?</p>",
        "id": 395882609,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696944193
    },
    {
        "content": "<p>Yes, they should indeed all be defeq.</p>",
        "id": 395883246,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1696944384
    },
    {
        "content": "<p>I think the best way forward is to make things passing through <code>RingCon</code> faster overall by going from  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Function.Injective.commRing</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Neg</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">ℕ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">ℤ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Pow</span> <span class=\"n\">β</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NatCast</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IntCast</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nat_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Function.Injective.commRing'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">zsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nat_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int_cast</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>in some spots and for <code>Function.Surjective</code> similarly. </p>\n<p>Or maybe just for <code>Subtype.coe</code> and <code>Quotient.mk</code> alone.</p>",
        "id": 395889960,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1696946306
    },
    {
        "content": "<p>I'm very confused how you intend to implement that <code>range</code> version</p>",
        "id": 395988207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696988004
    },
    {
        "content": "<p>Well, we couldn't compute it.</p>",
        "id": 396092413,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697031862
    },
    {
        "content": "<p>The best path is writing versions of <code>Function.Injective.x</code> for <code>Subtype.val</code> and <code>Function.Surjective.x</code> for <code>Quotient.mk</code></p>",
        "id": 396092631,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697031928
    },
    {
        "content": "<p>Without the data as parameters</p>",
        "id": 396092869,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697031989
    }
]