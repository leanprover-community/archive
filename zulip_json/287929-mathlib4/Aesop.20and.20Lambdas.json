[
    {
        "content": "<p>Aesop (more precisely the <code>continuity</code> macro) seems to have a major problem when dealing with lambdas. For example we have the continuity lemma <code>Continuous (fun x =&gt; f x - f y)</code> (provided <code>f</code> and <code>g</code> are continuous), but <code>aesop</code> is incapable of proving <code>Continuous (f - g)</code> from that.</p>",
        "id": 340085033,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678189071
    },
    {
        "content": "<p>We did add a duplicate theorem for <code>Function.const</code>, but I don't think that is a good solution, since it will come up more and more</p>",
        "id": 340085317,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678189142
    },
    {
        "content": "<p>Maybe we need an aesop rule set that unfolds all the fancy names into lambdas and then we flag only the applied version with <code>continuity</code>.</p>",
        "id": 340085723,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678189262
    },
    {
        "content": "<p>Do you know what Lean 3 <code>continuity</code> did to make this work?</p>",
        "id": 340094759,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1678191680
    },
    {
        "content": "<p>What happens with <code>Continuous ((fun x =&gt; f x) - (fun x =&gt; g x))</code>?</p>",
        "id": 340112133,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1678196503
    },
    {
        "content": "<p>I don't think this is a regression compared to Lean 3. In a random file that imports a bunch of continuity stuff, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">continuity</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">continuity</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 340125103,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678199787
    },
    {
        "content": "<p>Note that <code>continuity!</code> does succeed on both, which applies lemmas up to semireducible transparency.</p>",
        "id": 340125722,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1678199910
    },
    {
        "content": "<p>This makes sense, but Aesop should be applying lemmas up to <code>default</code> transparency anyway. I'll investigate. <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> if you could extract the relevant defs into an MWE, that would be very helpful.</p>",
        "id": 340326462,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1678272805
    },
    {
        "content": "<p>Isn't default transparency \"don't unfold semireducible\"?</p>",
        "id": 340343829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678277624
    },
    {
        "content": "<p>In Lean 4, <code>default</code> transparency is the same as Lean 3's <code>semireducible</code> afaik.</p>",
        "id": 340344945,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1678277938
    },
    {
        "content": "<p>Does \"apply lemmas up to <code>r</code>\" mean \"unfold everything more reducible than <code>r</code>\", or does it also include unfolding things with reducibility <code>r</code>?</p>",
        "id": 340346166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678278350
    },
    {
        "content": "<p>I intended it to mean 'unfold constants with reducibility <code>r</code> and lower' (where <code>reducible</code> &lt; <code>instances</code> &lt; <code>default</code> &lt; <code>irreducible</code>). Not sure whether that's standard terminology.</p>",
        "id": 340346809,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1678278567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Default transparency unfolds semireducible (think what <code>rfl</code> can do by default). Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 340354599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678280698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> <br>\nthank you so much for looking into this (and for creating aesop in the first place).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Group.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSub</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 340360307,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678282047
    },
    {
        "content": "<p>There is something <em>very</em> weird going on. I've tried to remove the <code>Mathlib.Topology.Algebra.Group.Basic</code> dependency and now everything works..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Group.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSub</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sub'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>",
        "id": 340363519,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678282865
    },
    {
        "content": "<p>more mwe'ified: this works, so the problem is probably not in <code>aesop</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Continuity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Pi</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">theorem</span> <span class=\"n\">sub'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">continuity</span>\n</code></pre></div>",
        "id": 340365641,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678283430
    },
    {
        "content": "<p>I will look into this tomorrow.</p>",
        "id": 340366027,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678283534
    },
    {
        "content": "<p>Ok, my previous example had too many <code>sorry</code>s and was succeeding because of that. New mwe without any topology and <code>sorry</code>-free.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Continuity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Pi</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[aesop safe apply (rule_sets [Continuous]</span><span class=\"o\">)]</span> <span class=\"kd\">theorem</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sub'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 340576927,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678360414
    },
    {
        "content": "<p>(aesop also fails to prove the statement of <code>sub</code> with the knowledge of <code>sub'</code>)</p>",
        "id": 340577971,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678360684
    },
    {
        "content": "<p>I am starting to wonder whether we should just have a intermediate step that transforms functions into the <code>λ</code> version and then have all lemmas for <code>λ</code>. In a recent PR for mathlib3 the same issue came up, where a variant for <code>f + g</code> and <code>λ x, f x + g x</code> was needed and for many operations there several un-applied ways (bundled up to different structures) to spell the same thing.</p>",
        "id": 342697290,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679105922
    },
    {
        "content": "<p>Maybe we could do something like the <code>@[elementwise]</code> attribute that's used in category theory (or <code>@[higher_order]</code>), where we generate one of the lemmas from the other. <code>@[elementwise]</code> takes a lemma that's an equation involving morphisms and creates a new lemma that's an equation involving those morphisms applied to some value.</p>\n<p>We could also have a tactic that eta expands functions and applies some simp lemmas, to turn <code>f + g</code> into <code>fun x =&gt; f x + g x</code> for example. I'm not sure what a general interface would be... but doing it for specific arguments to functions like <code>Continuous</code> is easy enough.</p>",
        "id": 342699012,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679107284
    },
    {
        "content": "<p>I think having several two (or more) copies of each continuity statement is cluttering the library too much (I want to use <code>aesop</code> to prove <code>UniformContinuous</code>, <code>Differentiable</code>, and <code>ContDiff</code> as well, so we would have lots of duplicate lemmas). Your second suggestion is what I was thinking of.<br>\nMaybe we don't even need that, we can just write all continuity-lemmas and in the <code>λ</code>-expanded variant and I have some hope that everything might just fit together.</p>",
        "id": 342699592,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679107781
    },
    {
        "content": "<p>I think I found an aesop bug. According to the trace, aesop fails to apply any lemmas in the second case. <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Group.Basic</span>\n<span class=\"c1\">-- Plus an import that imports Aesop and contains the line `declare_aesop_rule_sets [Continuous2]`</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous2</span><span class=\"o\">])]</span> <span class=\"n\">continuous_id'</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous2</span><span class=\"o\">])]</span> <span class=\"n\">continuous_const</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">unsafe</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous2</span><span class=\"o\">])]</span> <span class=\"n\">Continuous.mul</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousMul</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.aesop.steps</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous2</span><span class=\"o\">])</span> <span class=\"c1\">-- no problem</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous2</span><span class=\"o\">])</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 343268357,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679369806
    },
    {
        "content": "<p>If I take an arbitrary function instead of the identity, then everything works in both cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">):</span>\n    <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous2</span><span class=\"o\">])</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous2</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 343268532,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679369899
    },
    {
        "content": "<p>I'm not sure that's a bug because the first contains no explicit identity. What if you add <code>continuous_mul</code> to the list of continuity lemmas?</p>",
        "id": 343378975,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1679407156
    },
    {
        "content": "<p>If one proof is <code>continuous_id'.mul continuous_const</code> and the other is <code>continuous_const.mul continuous_id'</code> then I expect <code>aesop</code> to find them, but of course it is Jannis' call what is a bug and what is intended behaviour.<br>\nAdding <code>continuous_mul</code> does not help, however.</p>",
        "id": 343562123,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679450779
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"n\">Function.const</span> <span class=\"n\">M</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">Continuous</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous2</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>does not work either and that has a rather explicit identity in there.</p>",
        "id": 343562661,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679451138
    },
    {
        "content": "<p>(<code>aesop</code> normalizes to the function to <code>fun x =&gt; y * x</code> first and then fails)</p>",
        "id": 343562828,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679451182
    }
]