[
    {
        "content": "<p>I'm having trouble with sInf.  With this code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Sqrt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounds.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.CompleteLattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Real.sqrt</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">soln_set</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">soln_set_def</span> <span class=\"o\">:</span> <span class=\"n\">soln_set</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">n_122</span>  <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">soln</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">soln</span> <span class=\"bp\">=</span> <span class=\"n\">sInf</span> <span class=\"n\">soln_set</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">Real.sqrt</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"c1\">-- answer</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_sInf_iff.mpr</span>\n</code></pre></div>\n<p>I get the following error.  </p>\n<p>tactic 'apply' failed, failed to unify<br>\n  ?m.329 ≤ sInf ?m.328<br>\nwith<br>\n  Real.sqrt 5 ≤ sInf soln_set</p>\n<p>I'm really not sure why.</p>\n<p>Also, is this the best way to prove that a number is indeed the sInf?  I have already proved that it is small than all values in the set and there is a value in the set that is  equal to the lower bound.</p>",
        "id": 397178184,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1697574660
    },
    {
        "content": "<p>part of the problem might be that <code>f</code> is an auto-implicit</p>",
        "id": 397178790,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697574964
    },
    {
        "content": "<p>Putting this at the top can catch such things:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 397178895,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697575026
    },
    {
        "content": "<p>Ah, but after adding <code>variable (f : ℝ → ℝ)</code>, I still get the same error you pointed out.</p>",
        "id": 397179017,
        "sender_full_name": "David Renshaw",
        "timestamp": 1697575085
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_sInf_iff#doc\">docs#le_sInf_iff</a> doesn't apply here, the real numbers are not a complete lattice</p>",
        "id": 397179354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697575297
    },
    {
        "content": "<p>Sorry, I forgot the definition of f, I’ll correct it when I get back to my computer. I didn’t realize the real numbers aren’t a complete lattice. It is certainly true that if x is a saturated lower bound then it is an inf though, so how do I prove that?</p>",
        "id": 397185359,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1697578616
    },
    {
        "content": "<p>I think you want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_csInf_iff#doc\">docs#le_csInf_iff</a></p>",
        "id": 397185508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697578703
    },
    {
        "content": "<p>Where the <code>c</code> stands for <code>conditional</code></p>",
        "id": 397185522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697578711
    },
    {
        "content": "<p>That seems to work, but it turned out to be easier to use IsLeast.csInf_eq and prove the IsLeast property.  Thanks for the help with this!</p>",
        "id": 397200423,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1697588147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648334\">Teddy Baker</span> has marked this topic as resolved.</p>",
        "id": 397229064,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697604219
    }
]