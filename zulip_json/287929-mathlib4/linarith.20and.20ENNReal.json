[
    {
        "content": "<p>While porting Topology.MetricSpace.EMetricParacompact, <a href=\"https://github.com/leanprover-community/mathlib4/pull/2599\">mathlib4#2599</a>, there are three cases where <code>linarith</code> worked before and doesn't anymore. Now it says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">AddGroup</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span>\n</code></pre></div>\n<p>Is this expected? Should I work around that or is there some simple way to make it work as before?</p>",
        "id": 339379541,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1677858265
    },
    {
        "content": "<p>Pretty sure that <code>ℝ≥0∞</code> is not an <code>AddGroup</code>, but I don't know why linarith thinks it should be</p>",
        "id": 339381286,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1677858673
    },
    {
        "content": "<p>In the corresponding file in Lean 3 <code>linarith</code> is used three times, and each time it's closing goals about nats. So this might not be a problem with <code>linarith</code> but a problem with elaboration, if it's now thinking it's supposed to be solving goals about ennreals (the goals are <code>n &lt; m</code>, <code>k + 1 \\le m</code> and <code>k + 1 \\le n + k + 1</code>)</p>",
        "id": 339388713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677860523
    },
    {
        "content": "<p>In Lean4 the goals are also about nats</p>",
        "id": 339399341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677863199
    },
    {
        "content": "<p>If you replace the first failing line with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∉</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hz'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">clear</span> <span class=\"n\">hz</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hsub</span> <span class=\"n\">hz'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then it instead complains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">AddGroup</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339400365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677863488
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∉</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hz'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">clear</span> <span class=\"n\">hz</span> <span class=\"n\">hD</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hsub</span> <span class=\"n\">hz'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339400878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677863623
    },
    {
        "content": "<p>But this is clearly a bug in <code>linarith</code>, it should just ignore inequalities in the context it doesn't understand</p>",
        "id": 339400932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677863639
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to synthesize</span>\n<span class=\"cm\">  AddGroup (Set ℕ)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 339401562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677863819
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2605\">https://github.com/leanprover-community/mathlib4/pull/2605</a> adds a better error message</p>",
        "id": 339409924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677866137
    },
    {
        "content": "<p>Thanks for the explanation! I opened an issue for that: <a href=\"https://github.com/leanprover-community/mathlib4/pull/2610\">mathlib4#2610</a></p>",
        "id": 339442743,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1677877190
    }
]