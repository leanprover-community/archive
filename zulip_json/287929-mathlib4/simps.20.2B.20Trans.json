[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> found the following interesting looking lemma: <br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Functor/Currying.html#CategoryTheory.currying_unitIso_inv_app_app_app\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Functor/Currying.html#CategoryTheory.currying_unitIso_inv_app_app_app</a></p>\n<p>It seems that the <code>Trans.trans</code> appearing there are not being simplified away as part of the <code>simps</code> lemma generation. I think the fix is to add some <code>simps</code> tag to the <code>Trans</code> instances we had to manually put in the category theory port. One example that seems to be the culprit in this case is the <code>Trans</code> instance for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Iso#doc\">docs4#CategoryTheory.Iso</a> . Another one I can think of is around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Equivalence#doc\">docs4#CategoryTheory.Equivalence</a> and there may be others as well, possibly even outside the category theory library.</p>\n<p>By adding a simps tag to the instance here <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/7e974fd3806866272e9f6d9e44fa04c210a21f87/Mathlib/CategoryTheory/Iso.lean#L160\">https://github.com/leanprover-community/mathlib4/blob/7e974fd3806866272e9f6d9e44fa04c210a21f87/Mathlib/CategoryTheory/Iso.lean#L160</a></p>\n<p>the lemma I linked above becomes a nice</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CategoryTheory.currying_unitIso_inv_app_app_app</span><span class=\"o\">:</span>\n      <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÉ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n        <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÑ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X_1</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X_2</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">),</span>\n        <span class=\"n\">CategoryTheory.NatTrans.app</span>\n            <span class=\"o\">(</span><span class=\"n\">CategoryTheory.NatTrans.app</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.NatTrans.app</span> <span class=\"n\">CategoryTheory.currying.unitIso.inv</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X_1</span><span class=\"o\">)</span> <span class=\"n\">X_2</span> <span class=\"bp\">=</span>\n          <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.obj</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.obj</span> <span class=\"n\">X.toPrefunctor</span> <span class=\"n\">X_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPrefunctor</span> <span class=\"n\">X_2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which also matches the mathlib3 version here:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/functor/currying.html#category_theory.currying_unit_iso_hom_app_app_app\">https://leanprover-community.github.io/mathlib_docs/category_theory/functor/currying.html#category_theory.currying_unit_iso_hom_app_app_app</a></p>\n<p>Does anyone see any reason not to go ahead and go through with this fix?</p>",
        "id": 329103653,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676954637
    },
    {
        "content": "<p>The <code>refl</code>, <code>symm</code>, and <code>trans</code> attributes all seem to share a common issue. <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/327682968\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/327682968</a></p>\n<p>Would fixing those directly get <code>simp</code> firing?</p>",
        "id": 329248613,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677000595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Yes, I think it's definitely fine to add <code>@[simps]</code> to that <code>Trans</code> instance.</p>",
        "id": 329249797,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677000898
    },
    {
        "content": "<p>Is the issue simply that <code>refl</code>, <code>symm</code> and <code>trans</code> tags are not generating <code>simp</code> lemmas which were generated in lean3?</p>",
        "id": 329255782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677002436
    },
    {
        "content": "<p>They are not generating instances for their appropriate classes 100% of the time</p>",
        "id": 329256062,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677002507
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">rel</span> <span class=\"n\">lhs</span><span class=\"o\">)</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"n\">targetTy</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span>\n</code></pre></div>\n<p>tries to <a href=\"https://github.com/leanprover-community/mathlib4/blob/c16c0c414d4ea87bd10716ffd38b93d9d66aa215/Mathlib/Tactic/Relation/Rfl.lean#L35\">match</a> against the two types being related but it just takes the first two parameters (afaik)</p>",
        "id": 329256602,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677002656
    },
    {
        "content": "<p>For at least one category theory problem, it was getting <code>C</code> and an the category instance on <code>C</code></p>",
        "id": 329256935,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677002750
    },
    {
        "content": "<p>Swapping the orders so that <code>C</code> and <code>D</code> came first fixed that in that particular case</p>",
        "id": 329257136,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677002793
    },
    {
        "content": "<p>oh I see yeah this is an issue, but I think it's separate from the issue in the thread above.</p>",
        "id": 329257322,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677002856
    },
    {
        "content": "<p>But maybe the <code>@[trans]</code> tag does generate the simp lemmas when it successfully generates the instance, and in this case, the issue you pointer out is the only issue</p>",
        "id": 329257483,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677002892
    },
    {
        "content": "<p>My guess.</p>",
        "id": 329257544,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677002910
    },
    {
        "content": "<p>But until someone has time to fix those, I think just making the instances by hand and tagging them makes the most sense</p>",
        "id": 329258778,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677003274
    },
    {
        "content": "<p>I don't think <code>@[trans]</code> will ever generate any <code>simp</code>-lemmas (or even knows about the simp attribute).</p>",
        "id": 329268228,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677005999
    },
    {
        "content": "<p>ok so I guess I misunderstood how the attribute <code>trans</code> and <code>refl</code> actually work.</p>",
        "id": 329270674,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677006705
    },
    {
        "content": "<p>Bad guess :)</p>",
        "id": 329272549,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677007245
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2421\">!4#2421</a> just for now, until the <code>trans</code> attribute gets fixed.</p>",
        "id": 329299545,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677016445
    },
    {
        "content": "<p>Wait, how did it work in Lean 3?</p>",
        "id": 329316666,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677024186
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> for <a href=\"https://github.com/leanprover-community/mathlib4/pull/2421\">!4#2421</a> (it's holding up <a href=\"https://github.com/leanprover-community/mathlib4/pull/2455\">!4#2455</a> )</p>",
        "id": 329734931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677162964
    }
]