[
    {
        "content": "<p>I want to introduce an Ordered AddCommMonoid which is also a CompleteLinearOrder.<br>\nIf I introduce successively [CompleteLinearOrder R] and [OrderedAddCommMonoid R], the two orderings on R<br>\nseem to be distinct…<br>\nHow to do that?</p>",
        "id": 383656603,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691679172
    },
    {
        "content": "<p>I think the best solution is to use the fact that <code>OrderedAddCommMonoid</code> is really a bundled version of <code>CovariantClass M M (· + ·) (· ≤ ·)</code>, and hope that whatever result you need from Mathlib actually assumes that instead of <code>OrderedAddCommMonoid</code> (which I think should always be the case?)</p>",
        "id": 383662449,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691680116
    },
    {
        "content": "<p>I will probably end up doing the same (defining a typeclass for <code>OrderedAddCommMonoid</code> and <code>CompleteLinearOrder</code> together).</p>",
        "id": 395682916,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696852843
    },
    {
        "content": "<p>What types do you intend to cover with such a typeclass?</p>",
        "id": 395683407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696853006
    },
    {
        "content": "<p>Reals without multiplication.</p>",
        "id": 395683694,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696853091
    },
    {
        "content": "<p>Why not just use the reals?</p>",
        "id": 395684563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696853367
    },
    {
        "content": "<p>[messages in wrong order]</p>",
        "id": 395684582,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696853374
    },
    {
        "content": "<p>You can pretend the multiplication isn't there</p>",
        "id": 395684583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696853374
    },
    {
        "content": "<p>Actually, I want <code>OrderedAddCommMonoid</code> and <code>CompleteLattice</code> together.<br>\nThen I can consider tuples of real numbers with elementwise addition.</p>",
        "id": 395686211,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696853947
    },
    {
        "content": "<p>That sounds like a good motivation!</p>",
        "id": 395686897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696854156
    },
    {
        "content": "<p>Though (tuples of) real numbers aren't a complete lattice</p>",
        "id": 395686923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696854166
    },
    {
        "content": "<p>I made a mistake. Tuples of <code>EReal</code> with elementwise addition would be the thing.</p>",
        "id": 395687445,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696854344
    },
    {
        "content": "<p>Note that to justify a new typeclass you should have at least two examples, but I assume they are:</p>\n<ul>\n<li><code>EReal</code></li>\n<li>Tuples of <code>EReal</code> (via <code>Pi</code> and <code>Prod</code>)</li>\n</ul>",
        "id": 395687796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696854449
    },
    {
        "content": "<p>I think the answer to your question might be <code>[CompleteLattice R] [AddCommMonoid R] [CovariantClass R R (· + ·) (· ≤ ·)]</code> or similar</p>",
        "id": 395688052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696854531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complete.20Ordered.20AddCommMonoid/near/395687796\">said</a>:</p>\n<blockquote>\n<p>Note that to justify a new typeclass you should have at least two examples, but I assume they are:</p>\n<ul>\n<li><code>EReal</code></li>\n<li>Tuples of <code>EReal</code> (via <code>Pi</code> and <code>Prod</code>)</li>\n</ul>\n</blockquote>\n<p>Are you suggesting that <code>CompleteOrderedAddCommMonoid</code> should go to mathlib?</p>",
        "id": 395688462,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696854651
    },
    {
        "content": "<p>Maybe also <code>ENNReal</code>s are an instance.</p>",
        "id": 395688567,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696854682
    },
    {
        "content": "<blockquote>\n<p>Are you suggesting that <code>CompleteOrderedAddCommMonoid</code> should go to mathlib?</p>\n</blockquote>\n<p>I was, but now I'm suggesting that you can make do with <code>[CompleteLattice R] [AddCommMonoid R] [CovariantClass R R (· + ·) (· ≤ ·)]</code> for now</p>",
        "id": 395690456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696855243
    },
    {
        "content": "<p>Because otherwise you're likely to find you want:</p>\n<ul>\n<li><code>CompleteOrderedAddCommMonoid</code></li>\n<li><code>CompleteOrderedAddCommGroup</code></li>\n<li><code>ConditionallyCompleteOrderedAddCommGroup</code></li>\n<li>...</li>\n</ul>\n<p>And the number of combinations quickly explodes</p>",
        "id": 395690644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696855308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Complete.20Ordered.20AddCommMonoid/near/395690456\">said</a>:</p>\n<blockquote>\n<p>I was, but now I'm suggesting that you can make do with <code>[CompleteLattice R] [AddCommMonoid R] [CovariantClass R R (· + ·) (· ≤ ·)]</code> for now</p>\n</blockquote>\n<p>Is it guaranteed that<br>\n<code>[CompleteLattice R]</code> and <code>[CovariantClass R R (· + ·) (· ≤ ·)]</code><br>\ntalk about the same <code>≤</code><br>\nand that<br>\n<code>[AddCommMonoid R]</code> and <code>[CovariantClass R R (· + ·) (· ≤ ·)]</code><br>\ntalk about the same addition?</p>",
        "id": 395691016,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696855429
    },
    {
        "content": "<p><code>[CompleteLattice R]</code> <em>provides</em> a <code>≤</code>, <code>CovariantClass</code> <em>talks about</em> a <code>≤</code></p>",
        "id": 395691979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696855738
    },
    {
        "content": "<p>The problem arises when two typeclasses <em>provide</em> a notation</p>",
        "id": 395692006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696855747
    },
    {
        "content": "<p>You can tell that <code>CovariantClass</code> doesn't provide a <code>≤</code> because you needed the <code>≤</code> already to even state it</p>",
        "id": 395692059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696855772
    },
    {
        "content": "<p>In fact, you can use any relation there and <code>CovariantClass</code> will work with that.</p>",
        "id": 395692296,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696855835
    },
    {
        "content": "<p>Is <code>ENat</code> not also an example?</p>",
        "id": 399636910,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1698803718
    },
    {
        "content": "<p>I think there was a zulip thread about this not too long ago, but I’m on mobile</p>",
        "id": 399637047,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1698803797
    }
]