[
    {
        "content": "<p>I have a function from a nonempty finite type to a semilattice.<br>\nI want to take its indexed infimum.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myInf</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeInf</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.inf'</span> <span class=\"n\">Set.fintypeUniv</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>This doesn't work because <code>Set.fintypeUniv</code> outputs <code>Fintype</code> whereäs <code>Finset</code> is needed.<br>\nWhat can I do?</p>",
        "id": 408603299,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702903494
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.univ#doc\">docs#Finset.univ</a></p>",
        "id": 408603570,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702903594
    },
    {
        "content": "<p>You will also need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.univ_nonempty#doc\">docs#Finset.univ_nonempty</a></p>",
        "id": 408603657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702903629
    },
    {
        "content": "<p>Is the following idiomatic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myInf</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeInf</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.inf'</span> <span class=\"n\">Finset.univ</span> <span class=\"n\">Finset.univ_nonempty</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 408604044,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702903785
    },
    {
        "content": "<p>I would write it <code>Finset.univ.inf' Finset.univ_nonempty f</code>, but yes it is idiomatic.</p>",
        "id": 408604248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702903852
    },
    {
        "content": "<p>Will I find lemmata in Mathlib for it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">myInf</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeInf</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.univ.inf'</span> <span class=\"n\">Finset.univ_nonempty</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 408604363,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702903897
    },
    {
        "content": "<p>In <a href=\"https://tqft.net/mathlib4files/Data/Finset/Lattice\">file#Data/Finset/Lattice</a></p>",
        "id": 408604651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702904004
    },
    {
        "content": "<p>One more question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Finite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myInf</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">D</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeInf</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.univ.inf'</span> <span class=\"n\">Finset.univ_nonempty</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>I have <code>[Fintype ι]</code>and  <code>[Fintype D]</code>. How can I infer <code>Fintype (ι → D)</code> with as little manual work as possible?</p>",
        "id": 408609400,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702905532
    },
    {
        "content": "<p><code>import Mathlib.Data.Fintype.Pi</code> and add <code>[DecidableEq ι]</code>.</p>",
        "id": 408609857,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702905692
    },
    {
        "content": "<p>Thank you very much! YaëlSearch is again the best!</p>",
        "id": 408610176,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702905803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 408610807,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702906021
    },
    {
        "content": "<p>Forget about digitising mathematics, we should work on digitising Yaël.</p>",
        "id": 408659204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702921474
    }
]