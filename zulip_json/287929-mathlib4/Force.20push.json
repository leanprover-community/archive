[
    {
        "content": "<p>Warning: the mathlib maintainer team just force-pushed to the mathlib4 repository. Expect git turbulence, especially for PRs created after <time datetime=\"2023-04-11T13:40:56Z\">2023-04-11T13:40:56+00:00</time>. This very exceptional action had to be taken after a user wrote an inappropriate PR description after having received a bors delegation. PR descriptions are transferred by bors to the git history, where they are often looked at years later. They should be appropriate (or better yet, informative) to a research audience.</p>\n<p>We apologize for the inconvenience. Of course that user won't be given bors delegation in the foreseeable future.</p>",
        "id": 348823650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1681329983
    },
    {
        "content": "<p>I got myself  (EDIT: I mean my local master branch) back into a better state by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>reset<span class=\"w\"> </span>--hard<span class=\"w\"> </span>origin/master\n</code></pre></div>",
        "id": 348824587,
        "sender_full_name": "David Renshaw",
        "timestamp": 1681330330
    },
    {
        "content": "<p>That sounds like a way to lose all your work, you most likely want to <code>git rebase origin/master; git push --force-with-lease</code> if you were caught by this</p>",
        "id": 348825091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681330548
    },
    {
        "content": "<p>Rebasing on top of origin/master is probably more pleasant than merging, fwiw</p>",
        "id": 348835142,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681334461
    },
    {
        "content": "<p>It ought to be relatively painless, as the actual file history is unchanged</p>",
        "id": 348835415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681334599
    },
    {
        "content": "<p>Help. I was working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3208\">!4#3208</a> and I decided it would be better off if it depended on <a href=\"https://github.com/leanprover-community/mathlib4/pull/3593\">!4#3593</a>, so I did the usual thing: I merged 3593 into the 3208 branch <code>port/CategoryTheory.Limits.Presheaf</code>, and now I have incomprehensible conflicts like I've never seen before in git: whenever I resolve a merge it goes on to the next of 50 commits which have a conflict (almost always in <code>Mathlib.lean</code>). I suspect that this is due to the force push? I haven't got a clue how to resolve this.</p>",
        "id": 351926084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682186469
    },
    {
        "content": "<p>Do you have any local changes? If not, I can do the git shenanigans</p>",
        "id": 351931726,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682188063
    },
    {
        "content": "<p>Just checking what you mean here: you did <code>git checkout port/CategoryTheory.Limits.Presheaf</code> (that is, 3208, commit f88352fa9513bc418679b03d8b689b22c09894b1), and then did <code>git merge kbuzzard-add-ext-lemmas</code> (that is, 3593, commit 29d0b3e7a0a1fb88282236721d4fe1cae980d56d)? That merged cleanly for me locally. What commits do you have those branches corresponding to? (<code>git merge --abort</code> aborts any in-progress merge and reverts to the status before merge, if you need it.)</p>",
        "id": 351932045,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1682188159
    },
    {
        "content": "<p>I don't have any local changes. I did do what Patrick is suggesting, as far as I know.</p>",
        "id": 351934870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682188944
    },
    {
        "content": "<p>Here's the mess I'm in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">status</span>\n<span class=\"n\">interactive</span> <span class=\"n\">rebase</span> <span class=\"k\">in</span> <span class=\"n\">progress</span><span class=\"bp\">;</span> <span class=\"n\">onto</span> <span class=\"n\">f88352fa9</span>\n<span class=\"n\">Last</span> <span class=\"n\">commands</span> <span class=\"n\">done</span> <span class=\"o\">(</span><span class=\"mi\">26</span> <span class=\"n\">commands</span> <span class=\"n\">done</span><span class=\"o\">):</span>\n   <span class=\"n\">pick</span> <span class=\"mi\">4</span><span class=\"n\">bea27d75</span> <span class=\"n\">feat</span><span class=\"o\">:</span> <span class=\"n\">port</span> <span class=\"n\">CategoryTheory.Monad.Products</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">3553</span><span class=\"o\">)</span>\n   <span class=\"n\">pick</span> <span class=\"mi\">1</span><span class=\"n\">d9fdc01c</span> <span class=\"n\">feat</span><span class=\"o\">:</span> <span class=\"n\">port</span> <span class=\"n\">AlgebraicTopology.DoldKan.PInfty</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">3539</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">see</span> <span class=\"n\">more</span> <span class=\"k\">in</span> <span class=\"n\">file</span> <span class=\"bp\">.</span><span class=\"n\">git</span><span class=\"bp\">/</span><span class=\"n\">rebase</span><span class=\"bp\">-</span><span class=\"n\">merge</span><span class=\"bp\">/</span><span class=\"n\">done</span><span class=\"o\">)</span>\n<span class=\"n\">Next</span> <span class=\"n\">commands</span> <span class=\"n\">to</span> <span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"mi\">27</span> <span class=\"n\">remaining</span> <span class=\"n\">commands</span><span class=\"o\">):</span>\n   <span class=\"n\">pick</span> <span class=\"mi\">510887780</span> <span class=\"n\">feat</span><span class=\"o\">:</span> <span class=\"n\">port</span> <span class=\"n\">AlgebraicTopology.DoldKan.FunctorN</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">3543</span><span class=\"o\">)</span>\n   <span class=\"n\">pick</span> <span class=\"mi\">9</span><span class=\"n\">d37e7354</span> <span class=\"n\">feat</span><span class=\"o\">:</span> <span class=\"n\">Port</span> <span class=\"n\">CategoryTheory.Monad.Limits</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">3533</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">\"git rebase --edit-todo\"</span> <span class=\"n\">to</span> <span class=\"n\">view</span> <span class=\"n\">and</span> <span class=\"n\">edit</span><span class=\"o\">)</span>\n<span class=\"n\">You</span> <span class=\"n\">are</span> <span class=\"n\">currently</span> <span class=\"n\">rebasing</span> <span class=\"n\">branch</span> <span class=\"bp\">'</span><span class=\"n\">port</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory.Limits.Presheaf'</span> <span class=\"n\">on</span> <span class=\"bp\">'</span><span class=\"n\">f88352fa9'.</span>\n  <span class=\"o\">(</span><span class=\"n\">fix</span> <span class=\"n\">conflicts</span> <span class=\"n\">and</span> <span class=\"k\">then</span> <span class=\"n\">run</span> <span class=\"s2\">\"git rebase --continue\"</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">\"git rebase --skip\"</span> <span class=\"n\">to</span> <span class=\"n\">skip</span> <span class=\"n\">this</span> <span class=\"n\">patch</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">\"git rebase --abort\"</span> <span class=\"n\">to</span> <span class=\"n\">check</span> <span class=\"n\">out</span> <span class=\"n\">the</span> <span class=\"n\">original</span> <span class=\"n\">branch</span><span class=\"o\">)</span>\n\n<span class=\"n\">Unmerged</span> <span class=\"n\">paths</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">\"git restore --staged &lt;file&gt;...\"</span> <span class=\"n\">to</span> <span class=\"n\">unstage</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">\"git add &lt;file&gt;...\"</span> <span class=\"n\">to</span> <span class=\"n\">mark</span> <span class=\"n\">resolution</span><span class=\"o\">)</span>\n    <span class=\"n\">both</span> <span class=\"n\">added</span><span class=\"o\">:</span>      <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicTopology</span><span class=\"bp\">/</span><span class=\"n\">DoldKan</span><span class=\"bp\">/</span><span class=\"n\">PInfty.lean</span>\n\n<span class=\"n\">no</span> <span class=\"n\">changes</span> <span class=\"n\">added</span> <span class=\"n\">to</span> <span class=\"n\">commit</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">\"git add\"</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"s2\">\"git commit -a\"</span><span class=\"o\">)</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">brutus</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">media</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/</span><span class=\"n\">ExternalSSD1TB</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span>\n</code></pre></div>\n<p>I've since done <code>git rebase --abort</code>.</p>",
        "id": 351934954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682189002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> oh no wait, 3208, commit <code>f88352fa9513bc418679b03d8b689b22c09894b1</code> is already after the problem had occurred.</p>",
        "id": 351936869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682189539
    },
    {
        "content": "<p>Have you got anything currently checked out that you care about? I propose doing <code>git rebase --abort</code>, then checking that your branch is indeed <code>port/CategoryTheory.Limits.Presheaf</code>, and then if it is, <code>git reset --hard origin/port/CategoryTheory.Limits.Presheaf</code> just to bring you back into sync with what we're seeing. (That's if you don't mind getting rid of anything you haven't pushed on that branch.)</p>",
        "id": 351936985,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1682189574
    },
    {
        "content": "<p>I am surprised you're in the middle of a rebase - does your terminal history tell you exactly what command you ran to start yourself off into getting into this state?</p>",
        "id": 351937251,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1682189653
    },
    {
        "content": "<p>I was using VS Code to fix the merge conflicts, so I have no terminal history.</p>",
        "id": 351937385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682189699
    },
    {
        "content": "<p>Yeah, it looks to me like something ran <code>git rebase kbuzzard-add-ext-lemmas</code> (possibly on your behalf), rather than the generally-safer-and-easier-to-reason-about <code>git merge kbuzzard-add-ext-lemmas</code>; the rebase in this case is very messy, but the merge is clean. I'd recommend the above procedure to just completely abort the rebase, and go with a merge instead, unless you have a specific reason to want to rebase here</p>",
        "id": 351938112,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1682189904
    },
    {
        "content": "<p>I don't know how much Git you know, but the rebase is basically trying to replay the linear history of your branch onto the history of your dependency, and the force-push makes that very hard because <code>git rebase</code> is only seeing the commits one-by-one and there are conflicts between those historical commits. <code>git merge</code> can do a better job because it's just comparing snapshots in time, at the cost of preserving the (messy and conflicting) history on both sides of the merge; but since we use Bors, it'll all be squashed away anyway and the mess of history won't matter.</p>",
        "id": 351938763,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1682190086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I think I've sorted the problem out. Thanks to both of you.</p>",
        "id": 351939879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682190369
    },
    {
        "content": "<p>(Consider checking your VS Code settings - I personally would check that <code>git.rebaseWhenSync</code> is false. Someone correct me if there's a good reason we want to rebase by default; rebasing makes commit history slightly nicer at the cost of sometimes having these awful failure modes, but I haven't seen anyone acting as though they care about having meaningful commit histories on branches in mathlib, and it's both confusing and terrifying in the cases where it goes wrong.)</p>",
        "id": 351940261,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1682190488
    },
    {
        "content": "<p>We care about <code>master</code>, and branches are squash-merged.</p>",
        "id": 351941309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682190816
    },
    {
        "content": "<p>(sorry, by \"branches\" I specifically meant non-<code>master</code> branches, which is the only thing this affects - all glory to Bors for handling <code>master</code>)</p>",
        "id": 351941468,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1682190857
    },
    {
        "content": "<p>There's been some discussion about using rebases for port PRs in mathlib4 because the difference between the mathport output and the final code is actually interesting, and that's harder to get if there's merges in between</p>",
        "id": 351945304,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682192399
    },
    {
        "content": "<p>I'm definitely pro-messy-branch-histories, anti-rebase-horror. :-)</p>",
        "id": 351965562,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682205590
    },
    {
        "content": "<p>Rebase is relevant for this specific case because:</p>\n<ul>\n<li>It produces fewer conflicts than a merge if you get it right</li>\n<li>It prevents bors incorrectly attaching tens of authors to the commit</li>\n</ul>\n<p>In cases not relevant to this force push I agree that merging is definitely the right choice for mathlib, as our branches are very often collaborative and rebases only work well when there is a single \"owner\" of the branch</p>",
        "id": 351967167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682206805
    },
    {
        "content": "<p>Rebasing is in general much kinder to reviewers.</p>",
        "id": 352015689,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682238089
    },
    {
        "content": "<p>Even for \"ordinary\" PRs it's helpful if there is some logic to the commit history of the PR rather than 100 commits labeled \"fix\".</p>",
        "id": 352016060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682238222
    }
]