[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20Explaining.20folder.20content/near/397240484\">said</a>:</p>\n<blockquote>\n<p>I specifically want to explain non-top folders as well. The folders I'm thinking of are typically <code>LinearAlgebra.AffineSpace</code> vs <code>Analysis.Convex</code>. In that case, I'm actually planning on creating a third folder <code>Geometry.Convex</code> and develop the theory of convex spaces axiomatically there, until my refactor is far enough along that this new folder can act as a drop-in replacement for most of <code>Analysis.Convex</code> (where the complement of \"most\" is the theory of real and complex convex spaces).</p>\n</blockquote>\n<p>Will that include convexity in modules over rings which are not division rings?</p>",
        "id": 397308025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697634117
    },
    {
        "content": "<p>The hope is \"yes\". However that means we will need to ungeneralise a bunch of lemmas from (semi)rings to (semi)fields and things like Jensen's theorem will become tautological.</p>",
        "id": 397313573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697635782
    },
    {
        "content": "<p>Nothing becomes tautological, but some things will move to instances instead of lemmas I guess.</p>",
        "id": 397314239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697635984
    },
    {
        "content": "<p>Well, \"Jensen's lemma\" won't be a lemma proving that the average of a convex function is less than the average, but a lemma proving that a \"binarily convex\" function (our current <code>convex</code>) is convex.</p>",
        "id": 397315967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697636523
    },
    {
        "content": "<p>In fact, I wonder whether we should keep our theory of binary convexity around. On one hand, it's much simpler. On the other hand, it's equal to the general convexity in all cases we care about (citation needed).</p>",
        "id": 397316102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697636554
    },
    {
        "content": "<p>Thoughts, Patrick?</p>",
        "id": 397316448,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697636660
    },
    {
        "content": "<p>I don't this on paper, but what I needed in the sphere eversion project is in <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/to_mathlib/analysis/convex/basic.lean#L122-L125\">this file</a>.</p>",
        "id": 397318881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697637396
    },
    {
        "content": "<p>The issue with trying to support non-fields is that I can't state any satisfactory associativity axiom.</p>",
        "id": 397349612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697647058
    },
    {
        "content": "<p>The definition in SE is good enough for me.</p>",
        "id": 397350030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697647232
    },
    {
        "content": "<p>What is it?</p>",
        "id": 397350374,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697647389
    },
    {
        "content": "<p>I linked to it.</p>",
        "id": 397351024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697647647
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/to_mathlib/analysis/convex/basic.lean#L122-L125\">https://github.com/leanprover-community/sphere-eversion/blob/master/src/to_mathlib/analysis/convex/basic.lean#L122-L125</a></p>",
        "id": 397351048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697647658
    },
    {
        "content": "<p>That's a definition of convexity, not of convex spaces?</p>",
        "id": 397351168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697647718
    },
    {
        "content": "<p>The associativity axioms I can find are (for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>λ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c_\\lambda(x, y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">λ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> corresponding to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mi>y</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>λ</mi><mo stretchy=\"false\">)</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda y + (1 - \\lambda)x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">x</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mrow><mi>α</mi><mo separator=\"true\">,</mo><mi>β</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c_{\\alpha, \\beta}(x, y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>α</mi><mrow><mi>α</mi><mo>+</mo><mi>β</mi></mrow></mfrac><mi>x</mi><mo>+</mo><mfrac><mi>β</mi><mrow><mi>α</mi><mo>+</mo><mi>β</mi></mrow></mfrac><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">\\frac\\alpha{\\alpha+\\beta} x + \\frac\\beta{\\alpha+\\beta}y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1765em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4133em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>):</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Convex_space\">Wikipedia</a>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>λ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msub><mi>c</mi><mi>μ</mi></msub><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>c</mi><mrow><mi>λ</mi><mi>μ</mi></mrow></msub><mrow><mo fence=\"true\">(</mo><msub><mi>c</mi><mfrac><mrow><mi>λ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>μ</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mn>1</mn><mo>−</mo><mi>λ</mi><mi>μ</mi></mrow></mfrac></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>z</mi><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">c_\\lambda(x,c_\\mu(y,z))=c_{\\lambda\\mu}\\left(c_{\\frac{\\lambda(1-\\mu)}{1-\\lambda\\mu}}(x,y),z\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">λ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">μ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.8697em;vertical-align:-0.7197em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"mord mathnormal mtight\">μ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.6183em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0378em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">λ</span><span class=\"mord mathnormal mtight\">μ</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.5021em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">μ</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4829em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7197em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span></span></li>\n<li><a href=\"https://link.springer.com/article/10.1007/BF01220869\">Neumann</a>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>λ</mi></msub><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mi>μ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msub><mi>c</mi><mi>ν</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>c</mi><mi>η</mi></msub><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msub><mi>c</mi><mfrac><mrow><mi>λ</mi><mi>μ</mi></mrow><mi>η</mi></mfrac></msub><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">c_\\lambda(c_\\mu(x,y),c_\\nu(x,z))=c_\\eta\\left(x, c_{\\frac{\\lambda\\mu}\\eta}(y,z)\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">λ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">μ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.06366em;\">ν</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.8141em;vertical-align:-0.6641em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">η</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.6739em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9584em;\"><span style=\"top:-2.656em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">η</span></span></span></span><span style=\"top:-3.2255em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3.4624em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"mord mathnormal mtight\">μ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4829em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6641em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>λ</mi><mo stretchy=\"false\">)</mo><mi>μ</mi><mo>+</mo><mi>λ</mi><mi>ν</mi></mrow><annotation encoding=\"application/x-tex\">\\eta = (1 - \\lambda)\\mu + \\lambda\\nu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\" style=\"margin-right:0.06366em;\">ν</span></span></span></span></li>\n<li><a href=\"https://link.springer.com/article/10.1007/BF02413910\">Stone</a>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mrow><mi>α</mi><mo>+</mo><mi>β</mi><mo separator=\"true\">,</mo><mi>γ</mi></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mrow><mi>α</mi><mo separator=\"true\">,</mo><mi>β</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>c</mi><mrow><mi>γ</mi><mo>+</mo><mi>β</mi><mo separator=\"true\">,</mo><mi>α</mi></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mrow><mi>γ</mi><mo separator=\"true\">,</mo><mi>β</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>z</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c_{\\alpha+\\beta, \\gamma}(c_{\\alpha, \\beta}(x, y), z) = c_{\\gamma+\\beta, \\alpha}(c_{\\gamma, \\beta}(z, y), x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05556em;\">γ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><a href=\"https://arxiv.org/abs/0903.5522\">Fritz</a>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>λ</mi></msub><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mi>μ</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>c</mi><mover accent=\"true\"><mi>λ</mi><mo>~</mo></mover></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><msub><mi>c</mi><mover accent=\"true\"><mi>μ</mi><mo>~</mo></mover></msub><mo stretchy=\"false\">(</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c_\\lambda(c_\\mu(x, y), z) = c_{\\tilde\\lambda}(x, c_{\\tilde\\mu}(y, z))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">λ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">μ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0571em;vertical-align:-0.3071em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3929em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9313em;\"><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord mathnormal mtight\">λ</span></span><span style=\"top:-3.3134em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord mtight\">~</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3071em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3175em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord accent mtight\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6679em;\"><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord mathnormal mtight\">μ</span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"accent-body\" style=\"left:-0.2222em;\"><span class=\"mord mtight\">~</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">))</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>λ</mi><mo>~</mo></mover><mo>=</mo><mi>λ</mi><mi>μ</mi><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>μ</mi><mo>~</mo></mover><mo>=</mo><mfrac><mrow><mi>λ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>μ</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mn>1</mn><mo>−</mo><mi>λ</mi><mi>μ</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\tilde\\lambda = \\lambda\\mu, \\tilde\\mu = \\frac{\\lambda(1 - \\mu)}{1 - \\lambda\\mu}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9313em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9313em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">λ</span></span><span style=\"top:-3.6134em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">~</span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">μ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6679em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">μ</span></span><span style=\"top:-3.35em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2222em;\"><span class=\"mord\">~</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4911em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">λ</span><span class=\"mord mathnormal mtight\">μ</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">μ</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></li>\n</ul>",
        "id": 397352414,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697648233
    },
    {
        "content": "<p>None of these satisfy all our requirement to work without division.</p>",
        "id": 397352600,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697648312
    },
    {
        "content": "<p>Because we want to work without division, we need the finitary version of the combination operator as a primitive. We may also have the binary one for convenience of defeq.</p>",
        "id": 397353045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697648488
    },
    {
        "content": "<p>And to be clear, I really don't want to do two convexity refactors (or rather three, given that I already did a big one two years ago): I will not generalise the definition of <code>Convex</code> for it to be upturned again in a few months. I would rather start everything from scratch only once.</p>",
        "id": 397353253,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697648561
    },
    {
        "content": "<p>I will take the opportunity to ungeneralise a bunch of convexity results from <code>SMul</code> to <code>Module</code>. Everything we care about really is a module, and I should not have overgeneralised them in the first place two years ago.</p>",
        "id": 397354207,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697648943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> (sorry for the ping if grading is not done yet), what do you think of fixing the <code>Module → ConvexSpace</code> vs <code>AddTorsor → ConvexSpace</code> diamond by</p>\n<ol>\n<li>Making <code>Module 𝕜 E → ConvexSpace 𝕜 E</code> an instance</li>\n<li>Defining a mixin <code>ConvexTorsor [AddTorsor 𝕜 E] [ConvexSpace 𝕜 E] : Prop</code> stating that the convexity agrees with the affine structure</li>\n</ol>",
        "id": 397355607,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697649476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Convexity.20refactor/near/397353253\">said</a>:</p>\n<blockquote>\n<p>And to be clear, I really don't want to do two convexity refactors (or rather three, given that I already did a big one two years ago): I will not generalise the definition of <code>Convex</code> for it to be upturned again in a few months. I would rather start everything from scratch only once.</p>\n</blockquote>\n<p>I understand you personally not wanting to do this, but it might still be a good use of someone else's time; if an intermediate refactor is still \"wrong\" but is enough to unblock SE and some other people's projects, it might be worth paying the cost of churn to have it sooner</p>",
        "id": 397355812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697649561
    },
    {
        "content": "<p>(aaah, SE means Sphere Eversion, not Stack Exchange <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span>)</p>",
        "id": 397356046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697649660
    },
    {
        "content": "<p>Yeah sure, it's just that I am currently in one of the most intensive maths masters in the world and don't have time to perform this intermediate (and short-lived) refactor.</p>",
        "id": 397356123,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697649708
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConvexSpace#doc\">docs#ConvexSpace</a> currently exist? What are you actually referring to?</p>",
        "id": 397356259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697649757
    },
    {
        "content": "<p>No it doesn't. The plan of the refactor is to define it as an axiomatic description of convex <del>sets</del> types, redevelop most of the theory of convexity in that setting, and then move everything to the new setup all at once.</p>",
        "id": 397356457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697649852
    },
    {
        "content": "<p>My point here is that convexity notions have been developed in mathlib in a random order, and I need to make primitive a bunch of definitions that are currently derived. Hence any attempt at refactoring in place will result in huge (and overlapping across PRs) diffs.</p>",
        "id": 397356555,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697649928
    },
    {
        "content": "<p>Yaël, what are you claiming is wrong with the <code>really_convex</code> notion from SE?</p>",
        "id": 397356598,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697649951
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> needs generalized interpolation elsewhere</p>",
        "id": 397356736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697649994
    },
    {
        "content": "<p>And that once we have that, then the \"correct\" definition of convex is \"closed under generalized interpolation\"</p>",
        "id": 397356767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697650014
    },
    {
        "content": "<p>I understand that, I guess I meant with <code>really_convex</code> adapted to a type. I don't see where division is necessary.</p>",
        "id": 397356838,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697650055
    },
    {
        "content": "<p>It's not wrong, but you can't just replace <code>Convex</code> by <code>ReallyConvex</code>. You will also have to instantly ungeneralise a bunch of results from <code>OrderedRing</code> to <code>LinearOrderedField</code> before my refactor comes by and regeneralises (most of) them.</p>",
        "id": 397356845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697650058
    },
    {
        "content": "<p>Do you have a prototype of <code>ConvexSpace</code> without the associativity?</p>",
        "id": 397356997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697650114
    },
    {
        "content": "<p>Let me fetch that quick</p>",
        "id": 397357027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697650124
    },
    {
        "content": "<p>It would be good to create a tracking issue for this, and list the motivations there</p>",
        "id": 397357063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697650140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Convexity.20refactor/near/397356838\">said</a>:</p>\n<blockquote>\n<p>I don't see where division is necessary.</p>\n</blockquote>\n<p>The problem happens when you try to talk about more than two points.  You can't write <code>a • x + b • y + c • z</code> as a binary combination of binary combinations unless you can divide by eg <code>a + b</code> to make that <code>(a + b) • ((a/(a + b)) • x + (b/(a + b)) • y) + c • z</code>.</p>",
        "id": 397357302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697650231
    },
    {
        "content": "<p>I've just finished grading this exam. I like the \"mixin\" idea. I didn't think about all possible diamonds yet. What instances do you suggest? BTW, do you plan to work over a ring or a semiring? In the latter case we can speak about, e.g., convexity of sets of measures.</p>",
        "id": 397357834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1697650476
    },
    {
        "content": "<p>E.g., the set of measures invariant under a given map is convex.</p>",
        "id": 397357858,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1697650497
    },
    {
        "content": "<p>Yeah I remember this example. Over a semifield was my original target (hence my original idea of just using a binary operation) but Patrick's example shows we should aim for semiring instead.</p>",
        "id": 397358025,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697650571
    },
    {
        "content": "<p>Does this work for associativity?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ConvexSpace</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">interp</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n  <span class=\"n\">interp_assoc</span> <span class=\"o\">(</span><span class=\"n\">ss</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"n\">interp</span> <span class=\"o\">(</span><span class=\"n\">ss.map</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"n\">interp</span> <span class=\"n\">s.2</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">interp</span> <span class=\"o\">(</span><span class=\"n\">ss.bind</span> <span class=\"k\">fun</span> <span class=\"n\">rs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rs.2.map</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Prod.map</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"n\">rs.1</span><span class=\"o\">)</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397359340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697651248
    },
    {
        "content": "<p>Here's my definition without associativity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.IndicatorFunction</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span> <span class=\"n\">Set</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Convexity</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ConvexSpace</span> <span class=\"o\">:=</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">convexCombo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">segmentMap</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">convexCombo_singleton</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convexCombo</span> <span class=\"n\">w</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">segmentMap_eq_convexCombo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">segmentMap</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">convexCombo</span> <span class=\"o\">(</span><span class=\"n\">indicator</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 397359533,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697651334
    },
    {
        "content": "<p>But Yaël, isn't it just a fact of life that iterative applications of binary convexity may not yield all convex (finite index set) combinations? For example if you work over <code>ℤ[1/3]</code> and you take your convex space to be the one generatd by <code>ℤ³</code> in <code>ℚ³</code>, then <code>(1/3, 1/3, 1/3)</code> lies in this space, but (I think) you can't get this from repeated applications of binary convexity to points in <code>ℤ³</code>.</p>",
        "id": 397359536,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697651338
    },
    {
        "content": "<p>(I could be wrong, I haven't thought about it very deeply.)</p>",
        "id": 397359695,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697651409
    },
    {
        "content": "<p>I think that's sort of the point; and the claim is that only the finite-index case is interesting, not the binary one</p>",
        "id": 397359737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697651437
    },
    {
        "content": "<p>Uh, isn't it just <code>2/3 • 0 + 1/3 • 1</code>?</p>",
        "id": 397359800,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697651468
    },
    {
        "content": "<p>Switch <code>ℤ</code> to <code>ℕ+</code> everywhere <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 397359921,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697651517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Convexity.20refactor/near/397359533\">said</a>:</p>\n<blockquote>\n<p>Here's my definition without associativity:<br>\n...</p>\n</blockquote>\n<p>(aside: isn't it bad that <code>import Mathlib.Algebra.IndicatorFunction</code> is enough to define this?)</p>",
        "id": 397359982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697651526
    },
    {
        "content": "<p>I think your version with the indexed family is going to be more annoying to state associativity for than my version with multisets</p>",
        "id": 397360141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697651590
    },
    {
        "content": "<p>Because you need to deal with when an element of the module appears multiple times in the expression</p>",
        "id": 397360187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697651609
    },
    {
        "content": "<p>This was somehow the message I failed to read which made me confused (because I didn't read it):<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Convexity.20refactor/near/397349612\">said</a>:</p>\n<blockquote>\n<p>The issue with trying to support non-fields is that I can't state any satisfactory associativity axiom.</p>\n</blockquote>",
        "id": 397360526,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697651747
    },
    {
        "content": "<p>By the way there is a simple cheat you can use to eliminate the divisions: make all the coefficients on the RHS variables too and take a hypothesis which asserts that the new coefficients and the old coefficients are in some relation (for which you can clear denominators)</p>",
        "id": 397376490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697659510
    },
    {
        "content": "<p>IIRC the answer is no but let me check: this proposed convexity refactor won't allow us to unify covexity with nonarchimedean convexity, right?</p>",
        "id": 397380773,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1697661651
    },
    {
        "content": "<p>Damn I didn't know there was a third generalisation of convexity to care about <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 397384322,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697663661
    },
    {
        "content": "<p>The answer to the question in the second half of that message</p>",
        "id": 397384474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697663762
    },
    {
        "content": "<p>My brain interpreted that colon as a period. Edited.</p>",
        "id": 397384524,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697663786
    },
    {
        "content": "<p>Should we be writing this for the affine case rather than for modules?</p>",
        "id": 397384611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697663858
    },
    {
        "content": "<p>I genuinely can't parse your message, Eric. What's \"this\"? Too many things were talked about here.</p>",
        "id": 397385058,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697664119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Convexity.20refactor/near/397380773\">said</a>:</p>\n<blockquote>\n<p>this proposed convexity refactor won't allow us to unify convexity with nonarchimedean convexity, right?</p>\n</blockquote>\n<p>I think it actually can? I don't know much about valuation rings (where does one learn about them?) but if my understanding is correct, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">R</mi></mrow><annotation encoding=\"application/x-tex\">ℝ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord amsrm\">R</span></span></span></span> with the usual valuation has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>𝒪</mi><mo>=</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">𝒪 = [0, 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">O</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>. Then it's a matter of hiding <code>ValuationRing.ValueGroup</code> deep inside the API.</p>\n<p>The only thing I'm unsure of is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ValuationRing#doc\">docs#ValuationRing</a> currently requires <code>CommRing R</code>. Is it mathematically necessary or just mathematically convenient?</p>",
        "id": 397386415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697665016
    },
    {
        "content": "<p>At any rate, if the generalisation to valuation rings is actually a generalisation, then it can be performed at a later time with not too much hassle.</p>",
        "id": 397386470,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697665050
    },
    {
        "content": "<p>Valuation rings were probably developed as part of the perfectoid project and back then we were firmly focussed on commutative algebra. They're certainly an important tool in comm alg and alg geom where commutativity is everywhere but I don't know about the noncommutative case, we were just formalising what we needed for adic spaces.</p>",
        "id": 397387267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697665547
    },
    {
        "content": "<p>Just to make clear, I don't think we care about convexity over non-commutative rings (please no one interject <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>). However we do care about convexity over semirings, as <a href=\"#narrow/stream/287929-mathlib4/topic/Convexity.20refactor/near/397357858\">Yury's example</a> shows.</p>",
        "id": 397387662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697665803
    },
    {
        "content": "<p>Well, there are people studying orders in quaternion algebras over p-adic fields…</p>",
        "id": 397389535,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1697666930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Convexity.20refactor/near/397385058\">said</a>:</p>\n<blockquote>\n<p>I genuinely can't parse your message, Eric. What's \"this\"? Too many things were talked about here.</p>\n</blockquote>\n<p>Convex spaces.</p>",
        "id": 397389598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697666972
    },
    {
        "content": "<p>The problem with affine spaces is that they require a negation. We're trying to avoid that here.</p>",
        "id": 397389744,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697667061
    },
    {
        "content": "<p>Where does your structure above actually use the module structure?</p>",
        "id": 397390075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697667261
    },
    {
        "content": "<p>I don't see any uses of assumptions on E</p>",
        "id": 397390282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697667390
    },
    {
        "content": "<p>Sorry, it doesn't of course: I'm trying to generalise away from modules!</p>",
        "id": 397390377,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697667480
    },
    {
        "content": "<p>I didn't follow everything but certainly affine spaces over real numbers should be included in this convexity thing. They are a lot less exotic than many other things mentioned here.</p>",
        "id": 397392631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697669067
    },
    {
        "content": "<p>Yaël, there is a notion of noncommutative convexity, but it is sufficiently different that we shouldn't try to unify them.</p>",
        "id": 397407833,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697679789
    },
    {
        "content": "<p>Don't worry, Patrick, affine spaces will be covered.</p>",
        "id": 397442469,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697699208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Convexity.20refactor/near/397380773\">said</a>:</p>\n<blockquote>\n<p>IIRC the answer is no but let me check: this proposed convexity refactor won't allow us to unify convexity with nonarchimedean convexity, right?</p>\n</blockquote>\n<p>Thinking about it more, I highly doubt so: Consider Proposition 2.6 of <a href=\"https://arxiv.org/abs/2109.04591\">this paper</a>:</p>\n<blockquote>\n<p>Any set closed under (non-archimedean) 3-element combinations is (non-archimedean) convex</p>\n</blockquote>\n<p>I am pretty sure the corresponding theorem for eg <code>ℕ</code>-convexity is just not true.</p>",
        "id": 397736195,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697816235
    }
]