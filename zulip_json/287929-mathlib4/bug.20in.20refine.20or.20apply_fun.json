[
    {
        "content": "<p>This <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 327894671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676417547
    },
    {
        "content": "<p>This <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 327894720,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676417574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is this a missing <code>withMainContext</code> again? If yes, in which tactic?</p>",
        "id": 327894786,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676417604
    },
    {
        "content": "<p>How does <code>refine fun m n h =&gt; ?_</code> differ from <code>intro m n h</code>?</p>",
        "id": 327894832,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676417633
    },
    {
        "content": "<p>more like a missing <code>instantiateMVars</code></p>",
        "id": 327894893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676417653
    },
    {
        "content": "<p>probably in <code>apply_fun</code></p>",
        "id": 327894918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676417670
    },
    {
        "content": "<p>does it say it's not an equality?</p>",
        "id": 327894944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676417685
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/2291\">!4#2291</a></p>",
        "id": 327895372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676417895
    },
    {
        "content": "<p>Yes. In fact, it doesn't know that <code>h</code> is a variable.</p>",
        "id": 327895766,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676418115
    }
]