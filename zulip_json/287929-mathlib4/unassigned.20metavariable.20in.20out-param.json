[
    {
        "content": "<p>I've made huge progress today in understanding typeclass inference and the dangerous instance linter, but this one still eludes me. This comes up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1636\">mathlib4#1636</a>, and I can't get rid of the lint error (I've tried various permutations).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Hom.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SupHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasSup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasSup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SupBotHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasSup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasSup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Bot</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Bot</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_bot</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">OrderIsoClass.toSupBotHomClass</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">OrderBot</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">OrderBot</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderIsoClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SupBotHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">only</span> <span class=\"n\">dangerousInstance</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The `dangerousInstance` linter reports:</span>\n<span class=\"cm\">SOME INSTANCES ARE DANGEROUS</span>\n<span class=\"cm\">During type-class search, they produce subgoals like `Group ?M`.</span>\n<span class=\"cm\">Try marking the dangerous arguments as implicit instead. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">OrderIsoClass.toSupBotHomClass</span> <span class=\"c\">/-</span><span class=\"cm\"> unassigned metavariable in out-param: SupBotHomClass F α β -/</span>\n</code></pre></div>\n<p>I searched the chat for <code>unassigned metavariable in out-param</code> and got two hits but they didn't help me :-/</p>",
        "id": 323577457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674678075
    },
    {
        "content": "<p>Actually, it looks the same as <a href=\"#narrow/stream/287929-mathlib4/topic/Coercion.20to.20function.20dificulty/near/319572599\">this</a>. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> do you know how to fix this issue?</p>",
        "id": 323581089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674679423
    },
    {
        "content": "<p>Oh! My understanding is that the fix is <code>@[nolint dangerousInstance]</code> even though the instance is dangerous? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> would you agree with this? See <a href=\"https://github.com/leanprover-community/mathlib4/blob/11d5cd71045a1cd2603adba80219ea92aab322ba/Mathlib/Order/Hom/Bounded.lean#L119-L147\">here</a> for possibly analogous shenannigans in mathlib4 master (the porting note at the end in particular).</p>",
        "id": 323581808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674679688
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323587118,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674681771
    },
    {
        "content": "<p>Ah, the linter doesn't figure out that unification will assign the metavariable using nested TC synthesis.</p>",
        "id": 323587786,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674682036
    },
    {
        "content": "<p>So I can nolint safely?</p>",
        "id": 323589962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674682881
    },
    {
        "content": "<p>I think so.</p>",
        "id": 323590485,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674683110
    }
]