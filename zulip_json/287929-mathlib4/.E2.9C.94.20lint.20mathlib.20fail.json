[
    {
        "content": "<p>I added two theorem with <code>@[simp]</code> attribute in <code>Mathlib/Data/Set/Intervals/Basic.lean</code>, and <code>lake build</code> ran successfully on my computer. Then I created a PR for it. However, the CI test failed twice at <code>Build -&gt; lint mathlib</code>; see <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6172770658\">https://github.com/leanprover-community/mathlib4/actions/runs/6172770658</a> for details. I have no idea what happened. Could anyone tell me why?</p>",
        "id": 390736631,
        "sender_full_name": "Wen Yang",
        "timestamp": 1694615355
    },
    {
        "content": "<p>That link leads me to a successful build. Maybe this is the right page? <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6171714853/job/16750502988\">https://github.com/leanprover-community/mathlib4/actions/runs/6171714853/job/16750502988</a></p>",
        "id": 390737972,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1694615747
    },
    {
        "content": "<p>You're adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Icc_diff_Ioo_same'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">})</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>but this already exists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Icc_diff_both</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>so if <code>simp</code> applies <code>Icc_diff_both</code> first, it can no longer apply your new lemma</p>",
        "id": 390738566,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694615906
    },
    {
        "content": "<p>Even more, <code>simp</code> already rewrites <code>s ∪ {...}</code> to a chain of <code>insert x (insert y .. s))</code> calls</p>",
        "id": 390738854,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694615994
    },
    {
        "content": "<p>Do your lemmas need to be <code>simp</code> lemmas?</p>",
        "id": 390738982,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694616022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  Thanks! I will remove the <code>simp</code> attribute. I don't need them to be <code>simp</code> lemmas. I just hope <code>apply?</code> can find them.</p>",
        "id": 390739384,
        "sender_full_name": "Wen Yang",
        "timestamp": 1694616129
    },
    {
        "content": "<p><code>apply?</code> should find them, yeah</p>",
        "id": 390739504,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694616175
    },
    {
        "content": "<p>Wen Yang, it is subtle but very important to understand that the linter for simp lemmas is a global one. It doesn't say your lemma is a bad simp lemma in isolation, it says it does not play well with existing simp lemmas.</p>",
        "id": 390739549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694616191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416034\">Wen Yang</span> has marked this topic as resolved.</p>",
        "id": 390758345,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694621900
    },
    {
        "content": "<p>Also -- the presence or absence of <code>@[simp]</code> does not affect the behaviour of <code>apply?</code>.</p>",
        "id": 390819255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694648263
    },
    {
        "content": "<p>It doesn't seem easy to run CI tests locally. Nevertheless, I will run <code>make test &gt;/dev/null</code>, <code>make lint</code> and <code>bash ./scripts/lint-style.sh</code> instead of <code>lake build</code> before PR. ​I also tried running <code>make test</code>, but it generated so much output that I did not think it would help.​ I wish <code>make test &gt;/dev/null</code> would print only errors.​</p>",
        "id": 390833122,
        "sender_full_name": "Wen Yang",
        "timestamp": 1694656063
    },
    {
        "content": "<p>Yes, we are working on silencing the output of <code>make test</code>. It needs many more <code>#guard_msgs</code> statements. PRs to that effect are welcome!</p>",
        "id": 390833575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694656299
    },
    {
        "content": "<p>It's completely okay to rely on CI to do the testing and linting for you -- you shouldn't think you need to run these locally first.</p>",
        "id": 390833597,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694656318
    },
    {
        "content": "<p>Mathlib is used to having a very noisy list of open PRs. Once you actually want something reviewed, make sure it appears on <a href=\"https://bit.ly/3cKk3ld\">#queue</a>.</p>",
        "id": 390833686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694656358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thank you very much!<br>\nI've checked <a href=\"https://bit.ly/3cKk3ld\">#queue</a>, and it's okey.​<br>\nI want to run CI tests locally, just because my computer is faster than the online service.</p>",
        "id": 390846508,
        "sender_full_name": "Wen Yang",
        "timestamp": 1694663607
    },
    {
        "content": "<p>Yes, that's reasonable. I find that even with a fast computer, the tests take long enough that I am going to context-switch, and hence it's easier to let automation take over.</p>",
        "id": 390849535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694665240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20lint.20mathlib.20fail/near/390833575\">said</a>:</p>\n<blockquote>\n<p>Yes, we are working on silencing the output of <code>make test</code>. It needs many more <code>#guard_msgs</code> statements. PRs to that effect are welcome!</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> do you think you could do your shell script magic to automate this PR?</p>",
        "id": 390883000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694681298
    },
    {
        "content": "<p>Yes, it's on my to-do list, but I have been distracted by resit exams.  I'll try to do it soon, though!</p>",
        "id": 390886055,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694682362
    }
]