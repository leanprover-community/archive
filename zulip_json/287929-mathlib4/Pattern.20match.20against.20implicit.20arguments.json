[
    {
        "content": "<p>Is there any way to name implicit arguments in a pattern match? the context is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">Fin.consInduction</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"n\">x₀</span> <span class=\"n\">x</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- how do I name `n` here? Why is `k` still around?</span>\n</code></pre></div>",
        "id": 326712634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675903328
    },
    {
        "content": "<p>You can use @s in patterns now -- so <code>@h n x0 x ih</code> should work</p>",
        "id": 326721065,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675910480
    },
    {
        "content": "<p>as for why <code>k</code> is still around, I have no idea. maybe <code>induction</code> is now smarter about not generalizing stuff when it doesn't have to? unsure</p>",
        "id": 326721238,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675910615
    },
    {
        "content": "<p>why wouldn't <code>k</code> still be around? AFAIK <code>induction</code> never removes the \"original\" variables from the context unless it is reverting them for <code>generalizing</code></p>",
        "id": 326723092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675912137
    },
    {
        "content": "<p>It always removed them in Lean3</p>",
        "id": 326768072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675935596
    },
    {
        "content": "<p>Because they stop existing anywhere else in the context, so in a proof they become useless</p>",
        "id": 326768221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675935637
    }
]