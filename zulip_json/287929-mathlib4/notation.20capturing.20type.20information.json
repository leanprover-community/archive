[
    {
        "content": "<p>How can I capture type information for pieces involved in notation? For example, let's say I have some <code>foo : Type → Type</code> and some <code>bar {β : Type} (α  : Type) (b : β) (f : foo α) : β</code>. For elaboration reasons in my actual example, <code>α</code> has to be explicit despite <code>f</code>. How can I create notation like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"my_bar_notation\"</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>That is, I want to look at the type of <code>f</code>, see that it has type <code>foo α</code> for some <code>α</code>, and then use <code>α</code> in the definition of the notation.</p>",
        "id": 376184784,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689637419
    },
    {
        "content": "<p>Note, I know this is possible with metaprogramming, I'm just hoping we have a nice shortcut syntax that works for <code>notation</code>.</p>",
        "id": 376185107,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689637576
    },
    {
        "content": "<p>Can you just replace alpha with an underscore in the notation decl, or does that not elaborate properly?</p>",
        "id": 376187359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1689638676
    },
    {
        "content": "<p>I get an \"expected =&gt;\" as soon as I put in the parentheses, but also, in my actual example, I have something more like <code>foo : Type → Type → Type</code> and I want <code>(f : foo α α)</code>.</p>",
        "id": 376189783,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689639607
    },
    {
        "content": "<p>What I meant is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"my_bar_notation\"</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 376191210,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1689640124
    },
    {
        "content": "<p>That causes the same elaboration problems as before because <code>bar</code> needs <code>α</code> to be explicit. For context, in my actual use case, <code>bar α b</code> is a bundled morphism between <code>foo α</code> and <code>β</code>. So when you write <code>bar _ b f</code> Lean can't seem to infer the hole.</p>\n<p>To un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5750\">#5750</a> I define: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CFCCoreClass</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousStar</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toStarAlgHom</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">spectrum</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→⋆ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span>\n  <span class=\"n\">hom_continuous</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">toStarAlgHom</span>\n  <span class=\"n\">hom_map_X</span> <span class=\"o\">:</span> <span class=\"n\">toStarAlgHom</span> <span class=\"o\">(</span><span class=\"n\">toContinuousMapOnAlgHom</span> <span class=\"o\">(</span><span class=\"n\">spectrum</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cfc₁</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousStar</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CFCCoreClass</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">spectrum</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→⋆ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"n\">CFCCoreClass.toStarAlgHom</span>\n</code></pre></div>\n<p>Here, if <code>f : C(spectrum R a, R)</code> then Lean needs <code>R</code> to be explicit in <code>cfc₁</code> in order to elaborate <code>cfc₁ R a f</code>. But really, the type of <code>f</code> itself contains the <code>R</code> datum (and <code>a</code> too in fact), so it would be nice to just provide some notation so that Lean can look at that the type of <code>f</code> and fill in these values.</p>",
        "id": 376200063,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689643273
    },
    {
        "content": "<p>can you give a MWE?</p>",
        "id": 376200486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689643453
    },
    {
        "content": "<p>(more precisely, does the foo/bar MWE above actually exhibit the issue you describe?)</p>",
        "id": 376200573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689643498
    },
    {
        "content": "<p>Would the following solution work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">bar'</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"my_bar_notation\"</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar'</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 376200684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1689643554
    },
    {
        "content": "<p>there is also <code>type_of%</code> for getting the type of a value, although I can't tell if that is sufficient for your use case</p>",
        "id": 376200843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689643609
    },
    {
        "content": "<p>I need to put kids to bed, but I'll come back to this in a bit.</p>",
        "id": 376201480,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689643915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  okay, I spent a bunch of time trying to minimize the problem. Here's what I came up with: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Dual.instFunLikeDual#doc\">docs#Module.Dual.instFunLikeDual</a> breaks things</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.LinearMap</span>\n\n<span class=\"c1\">-- these are the imports of `Mathlib.LinearAlgebra.Dual`</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FiniteDimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Projection</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.SesquilinearForm</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Finiteness</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.FreeModule.Finite.Basic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">MyDual</span> <span class=\"c1\">-- copied from `Mathlib.LinearAlgebra.Dual`</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Module</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Dual</span> <span class=\"o\">:=</span>\n  <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">-- this instance breaks `bar'` below.</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">Dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Module</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MyDual</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar'</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>  <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar'</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>  <span class=\"n\">bar</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 376217349,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689652038
    },
    {
        "content": "<p>the instance is very strange, you can prove it using <code>inferInstance</code> alone because <code>Dual</code> is reducible</p>",
        "id": 376218819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689652892
    },
    {
        "content": "<p>but there also seems to be a bug here, adding the bad instance shouldn't prevent the real one from being found</p>",
        "id": 376219800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689653429
    },
    {
        "content": "<p>Yeah, it's a bit weird because adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">SynHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">notBad</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">SynHom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p><em>doesn't</em> break <code>foo'</code>.</p>",
        "id": 376452045,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689707976
    },
    {
        "content": "<p>Also, I think there may lie lurking other instances of this bug. Disabling that <code>FunLike</code> instance locally doesn't fix the elaboration problems for my <code>StarAlgHom</code> case.</p>",
        "id": 376452957,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689708226
    },
    {
        "content": "<p>Out of my depth here, but could the problem be that something uses a <code>whnfR</code> where it should be using <code>whnfI</code>?</p>",
        "id": 376453915,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689708480
    },
    {
        "content": "<p>Can we have a linter that catches whenever an instance is declared but it could have been filled with <code>inferInstance</code>?</p>",
        "id": 376471852,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689713690
    },
    {
        "content": "<p><code>inferInstanceAs</code> would be nice too but probably very hard</p>",
        "id": 376472193,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689713795
    },
    {
        "content": "<p>Don't we sometimes add these short circuit instances on purpose though? Such a linter would be easy to write but I'm not sure if there would be too many false positives?</p>",
        "id": 376474317,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689714570
    },
    {
        "content": "<p>We do have lots of short circuit instances, but it would be <em>great</em> if they were documented, and a linter would help with this.</p>",
        "id": 376529151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689739702
    },
    {
        "content": "<p>Also, the linter could check for and allow <code>:= inferInstance</code> as the definition.</p>",
        "id": 376529267,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689739778
    },
    {
        "content": "<p>I have no experience writing a linter, but since Alex says it's easy, maybe I'll have a go at writing it. Which existing linter might be a good one to read and learn from?</p>",
        "id": 377055060,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689872889
    },
    {
        "content": "<p>It might be easiest to start from scratch. The most similar in spirit is one of the simp linters, the one that says \"simp can prove this\", we really want a version that says \"inferInstance\" can prove this, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Tactic.Lint.simpNF#doc\">docs#Std.Tactic.Lint.simpNF</a>. But the simp linter is quite a bit more complicated than we need here.</p>\n<p>I think you just need to check if the declaration is a def or a theorem, and check that it is an instance, and if so get the type, make a new MVarId representing a term of that type and call introsN to get a new metavariable representing the goal of the typeclass in the context of the hypotheses, then try to apply the term <code>inferInstance</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.apply#doc\">docs#Lean.MVarId.apply</a>, making sure you are in the <code>withContext</code> of that MVarId) and see that you get no goals left (i.e. apply returns an empty list).</p>\n<p>I have to run now, but will happily say more detail later if that is helpful.</p>",
        "id": 377061555,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689874353
    },
    {
        "content": "<p>Thanks for the outline! I'll give it a try.</p>",
        "id": 377069769,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689876349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> In case it helps, here's a command that can tell you if an instance is superfluous:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#is_superfluous \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Command.runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverloadWithInfo</span> <span class=\"n\">id</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">name</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"(internal error) no such declaration\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">decl.type</span>\n  <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isClass</span><span class=\"bp\">?</span> <span class=\"n\">type</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"{name} does not give a class instance\"</span>\n  <span class=\"n\">modifyEnv</span> <span class=\"n\">Meta.instanceExtension.pushScope</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">instanceExtension.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">name</span>\n    <span class=\"n\">modifyEnv</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instanceExtension.modifyState</span> <span class=\"n\">env</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n    <span class=\"k\">let</span> <span class=\"n\">inst</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">trySynthInstance</span> <span class=\"n\">type</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"n\">inst</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"n\">logWarning</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} is superfluous. Independently provided by{indentD inst}\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} is not superfluous\"</span>\n  <span class=\"n\">finally</span>\n    <span class=\"n\">modifyEnv</span> <span class=\"n\">Meta.instanceExtension.popScope</span>\n\n<span class=\"bp\">#</span><span class=\"n\">is_superfluous</span> <span class=\"n\">instAddNat</span>\n<span class=\"c1\">-- instAddNat is not superfluous</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">myGreatInstance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"bp\">#</span><span class=\"n\">is_superfluous</span> <span class=\"n\">myGreatInstance</span>\n<span class=\"c1\">-- myGreatInstance is superfluous. Independently provided by instAddNat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">anotherGreatInstance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"bp\">#</span><span class=\"n\">is_superfluous</span> <span class=\"n\">anotherGreatInstance</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">anotherGreatInstance is superfluous. Independently provided by</span>\n<span class=\"cm\">  fun x y ↦ instDecidableEqNat x y</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 377073395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689877152
    },
    {
        "content": "<p>The key is (1) temporarily removing the instance under question and (2) using <code>trySynthInstance</code> on the type of the declaration (which is able to handle foralls, so no need use introN, and it's basically the core to <code>inferInstance</code>)</p>",
        "id": 377073941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689877290
    }
]