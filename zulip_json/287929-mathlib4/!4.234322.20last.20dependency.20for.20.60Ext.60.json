[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4322\">!4#4322</a> is <code>CategoryTheory.Abelian.Projective</code>, the last remaining dependency before <code>category_theory.abelian.ext</code>. It's all working apart from one horrible timeout, where <code>dsimp</code> starts with a long pause, and finishes with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">Message</span><span class=\"o\">:</span> <span class=\"n\">Server</span> <span class=\"n\">process</span> <span class=\"n\">for</span> <span class=\"n\">file</span><span class=\"o\">:</span><span class=\"bp\">///</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Abelian</span><span class=\"bp\">/</span><span class=\"n\">Projective.lean</span> <span class=\"n\">crashed</span><span class=\"o\">,</span> <span class=\"n\">likely</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">stack</span> <span class=\"n\">overflow</span> <span class=\"n\">or</span> <span class=\"n\">a</span> <span class=\"n\">bug.</span>\n  <span class=\"n\">Code</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">32902</span>\n</code></pre></div>\n<p>I'm leaving this for the day now; I've marked it help-wanted and left some notes.</p>",
        "id": 361220842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685079737
    },
    {
        "content": "<p>I also had timeouts for the dual declaration in <code>CategoryTheory.Abelian.InjectiveResolutions</code>. I had to outline some of the results used in the construction of <code>of</code> to get it built in a reasonable amount of time. I did the same thing here. The sorry is now gone but the build time for is still quite high. Worse than for injectives.</p>",
        "id": 361309643,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1685103596
    },
    {
        "content": "<p>In the worst declaration <code>exact_ofComplex</code> there are two branches each calling <code>simp</code>. They both take about 8s.</p>",
        "id": 361311828,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1685104112
    },
    {
        "content": "<p>One <code>simp</code> is unsqueezed and the other is squeezed.</p>",
        "id": 361312227,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1685104199
    },
    {
        "content": "<p>From a quick look, it does not appear replacing <code>simp</code> with a chain of <code>rw</code>’s will help much</p>",
        "id": 361312955,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1685104349
    },
    {
        "content": "<p>I added some notes suggesting a better design that perhaps could be explored. Please have a look! I'm not sure if it is better to try this out now, or just to merge with these notes in place and try to come back to this soon. I'm inclined towards the later.</p>",
        "id": 361372177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685116804
    },
    {
        "content": "<p>I've not looked at Scott's notes but here's what the profiler says on the last half of the file and it's not pretty.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">All</span> <span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"n\">Projective.lean</span><span class=\"o\">:</span><span class=\"mi\">84</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">dsimp</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">54</span><span class=\"n\">s</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">12</span><span class=\"n\">s</span>\n<span class=\"n\">compilation</span> <span class=\"n\">of</span> <span class=\"n\">CategoryTheory.ProjectiveResolution.ofComplex</span> <span class=\"n\">took</span> <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">25</span><span class=\"n\">s</span>\n<span class=\"n\">Projective.lean</span><span class=\"o\">:</span><span class=\"mi\">96</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">39</span><span class=\"n\">s</span>\n<span class=\"n\">Projective.lean</span><span class=\"o\">:</span><span class=\"mi\">106</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">72</span><span class=\"n\">s</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"n\">s</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.rewriteSeq</span> <span class=\"n\">took</span> <span class=\"mi\">846</span><span class=\"n\">ms</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.apply</span> <span class=\"n\">took</span> <span class=\"mi\">74</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">145</span><span class=\"n\">ms</span>\n<span class=\"n\">linting</span> <span class=\"n\">took</span> <span class=\"mi\">291</span><span class=\"n\">ms</span>\n<span class=\"n\">Projective.lean</span><span class=\"o\">:</span><span class=\"mi\">118</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.apply</span> <span class=\"n\">took</span> <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">s</span>\n<span class=\"n\">simp</span> <span class=\"n\">took</span> <span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>\"Apply took 74 seconds\" :-/</p>",
        "id": 361376684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685117780
    },
    {
        "content": "<p>But it compiles. Am I right in thinking that <code>of</code> is still definitionally equal to what it was before? Seems that it's just the proofs which have been refactored. If so I would also be happy with the idea of \"merge now, try the refactor later\".</p>",
        "id": 361377195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685117911
    },
    {
        "content": "<p>Yes. Thanks for the investigation Scott and Kevin. It’s the same proof but more hand holding, smaller steps. I also think merge now and return to the issue later is probably best.</p>",
        "id": 361379284,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1685118363
    }
]