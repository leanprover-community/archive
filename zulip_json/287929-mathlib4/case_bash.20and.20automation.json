[
    {
        "content": "<p>In <code>CategoryTheory.Category.Pairwise</code>, there are goals which require doing <code>cases</code> on variables before <code>aesop_cat</code> can handle them. In mathlib, this was taken care of by doing <code>attribute [local tidy] tactic.case_bash</code>. Is there an analogue of this in mathlib4? (See <a href=\"https://github.com/leanprover-community/mathlib4/pull/2534/files#diff-dbac9e254ec82565831843ba6c9b622e4a210161ec9c7f4ce6d99d8e04d8571aR90-R109\">https://github.com/leanprover-community/mathlib4/pull/2534/files#diff-dbac9e254ec82565831843ba6c9b622e4a210161ec9c7f4ce6d99d8e04d8571aR90-R109</a> for the actual example where I have manually fill the <code>assoc/comp_id/id_comp</code> fields.)</p>",
        "id": 338537841,
        "sender_full_name": "Joël Riou",
        "timestamp": 1677576893
    },
    {
        "content": "<p>Local attributes in <code>aesop</code> will be supported soon <a href=\"https://github.com/leanprover-community/mathlib4/pull/2484\">!4#2484</a>. <code>case_bash</code> hasn't been ported yet but theoretically tagging appropriate types as cases rules for <code>aesop</code> should replace that. I couldn't get that work currently. There appears to be a bug <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20state.20not.20updating.2C.20bugs.2C.20etc.2E/near/338368889\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Goal.20state.20not.20updating.2C.20bugs.2C.20etc.2E/near/338368889</a></p>",
        "id": 338563959,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677584539
    },
    {
        "content": "<p>Just to expand on what I think Matt is saying...</p>\n<p>One possibility is to make a small tactic like <code>discrete_cases</code><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/CategoryTheory/DiscreteCategory.lean#L117\">https://github.com/leanprover-community/mathlib4/blob/35dd23d0c6eb5921c1629ffb476573dc8d73b95d/Mathlib/CategoryTheory/DiscreteCategory.lean#L117</a><br>\nand activate it locally with aesop_cat as Matt mentioned.</p>",
        "id": 338595650,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677593236
    },
    {
        "content": "<p>in my experience in mathlib3, allowing tidy to case bash makes it waaaaaayyyyy too slow. I hope this approach via aesop would be better.</p>",
        "id": 338596148,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677593346
    },
    {
        "content": "<p>Can you get <code>aesop</code> to case on morphisms in <code>Discrete C</code> by just tagging things?</p>",
        "id": 338610038,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677596525
    },
    {
        "content": "<p>yeah there is some way to do it, I think, but in the discrete case one also has to case on morphisms and unification is a bit tricky there.</p>",
        "id": 338610684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677596692
    },
    {
        "content": "<p>I think the situation is similar for <code>Pairwise</code> and the other finite categories we have around.</p>",
        "id": 338610771,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677596714
    },
    {
        "content": "<p>Namely, morphisms in <code>Discrete X</code> are defined as <code>ULift (PLift (a = b))</code>, but lean would have a hard time understanding that <code>a \\hom b</code> is indeed this ulift of a plift.</p>",
        "id": 338611254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677596829
    },
    {
        "content": "<p>Similarly for <code>Pairwise</code>, the homs are defined as an inductive type called <code>Pairwise.Hom</code> or something, so lean still needs some hints because the usual spelling is <code>a \\hom b</code> and not <code>Pairwise.Hom a b</code>.</p>",
        "id": 338611550,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677596908
    },
    {
        "content": "<p>another approach is to redefine the induction principle for homs with the right spelling, and train aesop to apply this induction principle.</p>",
        "id": 338611793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677596971
    },
    {
        "content": "<p>Can we make some basic api like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">DiscreteMorphism.toULiftOfPLift</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">\\</span><span class=\"n\">hom</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ULift</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>and then feed it to <code>aesop_cat</code> as a simp rule</p>",
        "id": 338635907,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677602591
    },
    {
        "content": "<p>I’ve tried custom automation and no automation and neither are great for me</p>",
        "id": 338637988,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677603013
    },
    {
        "content": "<p>I think the lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Discrete.eqToHom#doc\">docs4#CategoryTheory.Discrete.eqToHom</a> is essentially what we want here</p>",
        "id": 338646606,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677605112
    },
    {
        "content": "<p>but this wouldn't work on a hypothesis, only a goal.</p>",
        "id": 338646992,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677605197
    },
    {
        "content": "<p>So the only rule type in <code>aesop</code> that operates on hypotheses is cases?</p>",
        "id": 338649753,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677605964
    },
    {
        "content": "<p>We would have to ask <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> ;)</p>",
        "id": 338650480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677606177
    },
    {
        "content": "<p>I would assume that aesop can also simplify hypotheses but I don't think that would be helpful in this case.</p>",
        "id": 338650724,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677606254
    },
    {
        "content": "<p>Maybe there is a way to tell aesop to apply custom induction principles? That would apply in this case</p>",
        "id": 338652051,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677606635
    },
    {
        "content": "<p>Aesop rules that operate on hypotheses are <code>forward</code>, <code>destruct</code> and <code>simp</code>/<code>unfold</code> (and <code>tactic</code> obvs). See <a href=\"https://github.com/JLimperg/aesop#rule-builders\">here</a>. Do any of these work for you?</p>",
        "id": 338864275,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677682610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/case_bash.20and.20automation/near/338652051\">said</a>:</p>\n<blockquote>\n<p>Maybe there is a way to tell aesop to apply custom induction principles? That would apply in this case</p>\n</blockquote>\n<p>Not at the moment. I thought this could always be done with <code>destruct</code>, but in the presence of dependencies, that's not true. I'll look into it.</p>",
        "id": 338864952,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677682762
    },
    {
        "content": "<p>Thanks. It takes some time for things to penetrate my skull and take root. This helps.</p>",
        "id": 338894386,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677688794
    }
]