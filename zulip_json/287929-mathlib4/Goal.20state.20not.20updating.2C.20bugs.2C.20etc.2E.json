[
    {
        "content": "<p>I've ported quite a few files from category theory in the last few days, and I'm finding the user experience to be quite terrible in some cases.<br>\nThe main issue I am facing is situations where the goal state is simply not updating, and I have to restart the lean4 server to see the updates. It seems that there are some errors popping up, but I don't know where they are coming from. I recorded a video of me trying to prove something very simple which would have taken less than 5 seconds in lean3, but these UX issues are just making it a very annoying experience.</p>\n<p>I don't know where to start diagnosing these issues. Any ideas?</p>\n<p><a href=\"/user_uploads/3121/tx-asvbrVdx6-Rnq87hYg-5w/Peek-2023-02-23-10-58.mp4\">Peek-2023-02-23-10-58.mp4</a></p>",
        "id": 329785418,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175362
    },
    {
        "content": "<p>Do you have a bunch of orphaned lean processes?</p>",
        "id": 329785525,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677175399
    },
    {
        "content": "<p>I dont' know</p>",
        "id": 329785554,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175408
    },
    {
        "content": "<p>Let me convert that video to a GIF that I can embed, one sec</p>",
        "id": 329785780,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175469
    },
    {
        "content": "<p>Could you please post the entire error message here, as text?</p>",
        "id": 329785849,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677175491
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0LKtM7K6bKztMX58I9a1QMqV/output.gif\">output.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0LKtM7K6bKztMX58I9a1QMqV/output.gif\" title=\"output.gif\"><img src=\"/user_uploads/3121/0LKtM7K6bKztMX58I9a1QMqV/output.gif\"></a></div>",
        "id": 329785851,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> it's huge.</p>",
        "id": 329785929,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175511
    },
    {
        "content": "<p>but I can do it</p>",
        "id": 329785956,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175517
    },
    {
        "content": "<p>It will probably repeat, you can try to isolate a single instance</p>",
        "id": 329786010,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677175536
    },
    {
        "content": "<p>E.g. from the first line to the first empty line, hopefully</p>",
        "id": 329786161,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677175570
    },
    {
        "content": "<p>The error in the infoview is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"bp\">'</span><span class=\"n\">u_1'</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">CategoryTheory.MonoidalNatIso.ofComponents'</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">occur</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"n\">declaration</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">nor</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">explicit</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"n\">provided</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">user</span><span class=\"o\">,</span> <span class=\"n\">occurring</span> <span class=\"n\">at</span> <span class=\"n\">expression</span>\n  <span class=\"n\">sorryAx.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">Eq.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">CategoryStruct.comp.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"n\">v₂</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">NatIso.ofComponents.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"n\">app</span> <span class=\"n\">naturality'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"bp\">;</span>\n        <span class=\"n\">MonoidalNatTrans.mk.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">NatTrans.mk.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">MonoidalNatTrans.mk.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">NatTrans.mk.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">,</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"n\">CategoryStruct.id.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n<span class=\"n\">at</span> <span class=\"n\">declaration</span> <span class=\"n\">body</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidalCategory</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidalCategory</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n      <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">LaxMonoidalFunctor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Prefunctor.obj</span> <span class=\"n\">F.toFunctor.toPrefunctor</span> <span class=\"n\">X</span> <span class=\"bp\">≅</span> <span class=\"n\">Prefunctor.obj</span> <span class=\"n\">G.toFunctor.toPrefunctor</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">naturality'</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n          <span class=\"n\">Prefunctor.map</span> <span class=\"n\">F.toFunctor.toPrefunctor</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span>\n            <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"n\">Prefunctor.map</span> <span class=\"n\">G.toFunctor.toPrefunctor</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">unit'</span> <span class=\"o\">:</span> <span class=\"n\">F.ε</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"n\">G.ε</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">tensor'</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n          <span class=\"n\">LaxMonoidalFunctor.μ</span> <span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗</span> <span class=\"n\">Y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">LaxMonoidalFunctor.μ</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Iso.mk</span> <span class=\"o\">(</span><span class=\"n\">MonoidalNatTrans.mk</span> <span class=\"o\">(</span><span class=\"n\">NatTrans.mk</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">G.toFunctor</span> <span class=\"bp\">⟶</span> <span class=\"n\">F.toFunctor</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">NatIso.ofComponents</span> <span class=\"n\">app</span> <span class=\"n\">naturality'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"bp\">;</span>\n      <span class=\"n\">MonoidalNatTrans.mk</span> <span class=\"o\">(</span><span class=\"n\">NatTrans.mk</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 329786406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175640
    },
    {
        "content": "<p>but there are further errors in stderror</p>",
        "id": 329786436,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175649
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>stderr</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>PANIC<span class=\"w\"> </span>at<span class=\"w\"> </span>Lean.MetavarContext.getDecl<span class=\"w\"> </span>Lean.MetavarContext:395:17:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>metavariable\nbacktrace:\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>lean_panic_fn+0x9e<span class=\"o\">)[</span>0x7f5777a72d8e<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elimMVar+0x5d<span class=\"o\">)[</span>0x7f57776b483d<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elimApp+0x1072<span class=\"o\">)[</span>0x7f57776afe32<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_visit+0x1b2<span class=\"o\">)[</span>0x7f57776b09f2<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Array_mapMUnsafe_map___at___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elimApp___spec__8+0xe1<span class=\"o\">)[</span>0x7f57776b27c1<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elimApp+0xa2c<span class=\"o\">)[</span>0x7f57776af7ec<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_visit+0x1b2<span class=\"o\">)[</span>0x7f57776b09f2<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Array_mapMUnsafe_map___at___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elimApp___spec__8+0xe1<span class=\"o\">)[</span>0x7f57776b27c1<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elimApp+0xa2c<span class=\"o\">)[</span>0x7f57776af7ec<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_visit+0x1b2<span class=\"o\">)[</span>0x7f57776b09f2<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elim+0x742<span class=\"o\">)[</span>0x7f57776ad592<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_visit+0x1b2<span class=\"o\">)[</span>0x7f57776b09f2<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elim+0x742<span class=\"o\">)[</span>0x7f57776ad592<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_visit+0x1b2<span class=\"o\">)[</span>0x7f57776b09f2<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elim+0x742<span class=\"o\">)[</span>0x7f57776ad592<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_visit+0x1b2<span class=\"o\">)[</span>0x7f57776b09f2<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elim+0x742<span class=\"o\">)[</span>0x7f57776ad592<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Lean_MetavarContext_MkBinding_elimMVarDeps+0x54<span class=\"o\">)[</span>0x7f57776bb094<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Lean_MetavarContext_MkBinding_mkBinding+0x72<span class=\"o\">)[</span>0x7f57776beac2<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Lean_MetavarContext_mkBinding+0x1a2<span class=\"o\">)[</span>0x7f57776bf592<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Lean_Meta_mkLambdaFVars+0x3bf<span class=\"o\">)[</span>0x7f5775bd85ff<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Nat_foldM_loop___at_Lean_Elab_Term_MutualClosure_pushMain___spec__1+0x33f<span class=\"o\">)[</span>0x7f577740233f<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Lean_Elab_Term_MutualClosure_pushMain+0x7a<span class=\"o\">)[</span>0x7f5777402dea<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Lean_Elab_Term_MutualClosure_main+0x25cd<span class=\"o\">)[</span>0x7f577740b63d<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Lean_Elab_Term_elabMutualDef_go___lambda__1+0x121<span class=\"o\">)[</span>0x7f5777426a51<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Lean_Elab_Term_elabMutualDef_go___lambda__1___boxed+0xbd<span class=\"o\">)[</span>0x7f577742948d<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>lean_apply_5+0x32e<span class=\"o\">)[</span>0x7f5777a8081e<span class=\"o\">]</span>\n/home/adam/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so<span class=\"o\">(</span>l_Lean_Meta_withLCtx___at___private_Lean_Elab_Match_0__Lean_Elab_Term_withToClear___spec__25___rarg+0x4f<span class=\"o\">)[</span>0x7f5776bf7b1f<span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 329786924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175790
    },
    {
        "content": "<p>I had to truncate that error quite a bit because zulip only lets me send 10000 characters at a time <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 329787017,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175807
    },
    {
        "content": "<p>here is the full trace:<br>\n<a href=\"https://gist.githubusercontent.com/adamtopaz/7e9399049af7962e7d07a570c706c44b/raw/424d0a28dd92899c6982f2a78700af9dfe32cfe4/error.txt\">https://gist.githubusercontent.com/adamtopaz/7e9399049af7962e7d07a570c706c44b/raw/424d0a28dd92899c6982f2a78700af9dfe32cfe4/error.txt</a></p>",
        "id": 329787230,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175882
    },
    {
        "content": "<p>I've run into these same issues as well! It's weird because I seem to only run into them in ports of the <code>CategoryTheory</code>part of the library.</p>",
        "id": 329787485,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1677175947
    },
    {
        "content": "<p>I wonder if it has to do with <code>aesop</code> (specifically the <code>aesop_cat</code> we use for the autoparams)?</p>",
        "id": 329787574,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677175982
    },
    {
        "content": "<p>The video above also highlights the fact that <code>ext</code> is not as strong as it used to be, but I think that's a separate issue</p>",
        "id": 329788375,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677176229
    },
    {
        "content": "<p>I crash often in vim leaving a bunch of orphaned processes. Clearing those significantly speeds me up. This may not be a generalizable though.</p>",
        "id": 329789841,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677176676
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/PEmpty.html\">CategoryTheory.PEmpty</a> to be very taxing on the infoview despite being so short</p>",
        "id": 329790407,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677176853
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/PANIC\">#lean4 &gt; PANIC</a> is relevant</p>",
        "id": 329790740,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677176962
    },
    {
        "content": "<p>Purely wild speculation: universe unification is expensive for some reason</p>",
        "id": 329790904,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677177011
    },
    {
        "content": "<p>My completely uninformed opinion would agree with you... it seems that lean is just refusing to unify <code>u_1</code> in <code>sorryAx.{u_1}</code> (whatever that means) with the correct universe level.</p>",
        "id": 329791238,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677177112
    },
    {
        "content": "<p>It's certainly possible that Aesop is somehow messing up the universes. Could you point me to a file where this happens, preferably a small one?</p>",
        "id": 329792518,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677177480
    },
    {
        "content": "<p>I am not sure aesop is the culprit but CategoryTheory.PEmpty is about ~50 lines but I had to fight to finish it</p>",
        "id": 329792775,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677177547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> the file I was working on is this one: <a href=\"https://github.com/leanprover-community/mathlib4/blob/0048499e13503ec9d09b42cb4fde0ff546dc51df/Mathlib/CategoryTheory/Monoidal/NaturalTransformation.lean\">https://github.com/leanprover-community/mathlib4/blob/0048499e13503ec9d09b42cb4fde0ff546dc51df/Mathlib/CategoryTheory/Monoidal/NaturalTransformation.lean</a></p>",
        "id": 329792828,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677177566
    },
    {
        "content": "<p>But <code>PEmpty</code> will probably be easier to go through</p>",
        "id": 329792884,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677177580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20state.20not.20updating.2C.20bugs.2C.20etc.2E/near/329792828\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> the file I was working on is this one: <a href=\"https://github.com/leanprover-community/mathlib4/blob/0048499e13503ec9d09b42cb4fde0ff546dc51df/Mathlib/CategoryTheory/Monoidal/NaturalTransformation.lean\">https://github.com/leanprover-community/mathlib4/blob/0048499e13503ec9d09b42cb4fde0ff546dc51df/Mathlib/CategoryTheory/Monoidal/NaturalTransformation.lean</a></p>\n</blockquote>\n<p>This is the <code>port/CategoryTheory.Monoidal.NaturalTransformation</code> branch of mathlib4</p>",
        "id": 329793286,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677177705
    },
    {
        "content": "<p>Thanks, I'll have a look.</p>",
        "id": 329793444,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677177742
    },
    {
        "content": "<p>A potentially interesting additional data point: I was running into the same issue of the goal state not updating in the <code>CategoryTheory.Quotient</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/2339\">!4#2339</a>) port, and what I was able to do was explicitly add <code>sorry</code> to all the declarations <code>aesop_cat</code> was trying to fill by default (In this case the <code>id_comp</code>, <code>comp_id</code>, and <code>assoc</code> fields for <code>Category</code>). Then going in and filling each declaration by hand, I didn't run into any issues with the goal state anymore</p>",
        "id": 336359707,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1677193368
    },
    {
        "content": "<p>I've looked at the <code>PEmpty</code> file now, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/2519\">!4#2519</a>. Aesop was weak because it was missing some straightforward rules about <code>PEmpty</code> and <code>Discrete</code>.</p>\n<p>The infoview slowness is probably just a performance issue, but I'm not sure how to address it. In <code>emptyEquivalence</code>, <code>aesop_cat</code> is called 16 times. Many of these calls take between 100 and 380ms on my machine for a total of 2665ms. And Lean re-elaborates the whole definition every time you change something, so it's not exactly pleasant to work on. The runtime of each Aesop call is completely dominated by <code>simp</code>, so I guess it's time to finally think about how to properly cache the <code>simp</code> calls during normalisation.</p>\n<p>I'll take a look at the <code>NaturalTransformation</code> file now.</p>",
        "id": 338341460,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677508018
    },
    {
        "content": "<p>Btw you can <code>set_option trace.aesop.profile</code> if you suspect that Aesop is slow.</p>",
        "id": 338341660,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677508066
    },
    {
        "content": "<p>I don't think slowness was my main issue, but rather that the goal state didn't update, no matter how long I waited, until I restarted the lean4 server.</p>",
        "id": 338343266,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677508409
    },
    {
        "content": "<p>I'm curious why your PR has this line </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext, aesop safe cases (rule_sets [CategoryTheory]</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>for <code>Discrete</code>, given that we already had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory</span><span class=\"o\">])]</span> <span class=\"n\">Std.Tactic.Ext.extCore'</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 338349795,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677509751
    },
    {
        "content": "<p>Am I misunderstanding how <code>ext</code> and/or <code>aesop</code> works?</p>",
        "id": 338349955,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677509774
    },
    {
        "content": "<p>I think if you want to use it with <code>ext</code> too</p>",
        "id": 338350106,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677509815
    },
    {
        "content": "<p>My understanding that is that <code>aesop_cat</code> should be finishing, but it would be nice to confirm that</p>",
        "id": 338350297,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677509862
    },
    {
        "content": "<p>(I need an <code>aesop</code> tutorial...)</p>",
        "id": 338350422,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677509884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20state.20not.20updating.2C.20bugs.2C.20etc.2E/near/338349795\">said</a>:</p>\n<blockquote>\n<p>I'm curious why your PR has this line </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext, aesop safe cases (rule_sets [CategoryTheory]</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>for <code>Discrete</code>, given that we already had</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"n\">safe</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory</span><span class=\"o\">])]</span> <span class=\"n\">Std.Tactic.Ext.extCore'</span><span class=\"bp\">`</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Can we move this to a separate topic for just asking how to do X with aesop? I have questions...</p>",
        "id": 338351074,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677510036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20state.20not.20updating.2C.20bugs.2C.20etc.2E/near/338350106\">said</a>:</p>\n<blockquote>\n<p>I think if you want to use it with <code>ext</code> too</p>\n</blockquote>\n<p>Sorry now I am confused too</p>",
        "id": 338353170,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677510502
    },
    {
        "content": "<p>But just <code>@[ext]</code> doesn't seem to have informed <code>aesop</code> of  the existence of lemmas in a few cases I have seen</p>",
        "id": 338353714,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677510625
    },
    {
        "content": "<p>What does <code>ext</code> usually do? I don't actually know. <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 338353856,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677510665
    },
    {
        "content": "<p>In general I am not sure but most of the examples I see are like <code>funext</code></p>",
        "id": 338354820,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677510858
    },
    {
        "content": "<p>Okay, it just applies extensionality lemmas to the target. The <code>cases</code> rule splits <em>hypotheses</em> of <code>Discrete</code> type, which here serves to extract the <code>PEmpty</code> element. Whether this is always the right move I'm not sure.</p>",
        "id": 338354844,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677510864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20state.20not.20updating.2C.20bugs.2C.20etc.2E/near/338350297\">said</a>:</p>\n<blockquote>\n<p>My understanding that is that <code>aesop_cat</code> should be finishing, but it would be nice to confirm that</p>\n</blockquote>\n<p>Yes afaik. In fact, I'll try to force Aesop to fail when it can't solve the goal. Maybe this solves/works around the universe issue (which I haven't been able to reproduce yet).</p>",
        "id": 338355538,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677511020
    },
    {
        "content": "<p>Here is an example I am currently looking at boiled down a bit: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Wrapper</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span> <span class=\"n\">J</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Pair</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">SlimWrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Wrapper</span> <span class=\"n\">Pair</span>\n</code></pre></div>\n<p>I have a hypothesis of <code>j : SlimWrap</code> in my context but however I tag these with <code>aesop</code> I cannot seem to get cases to fire</p>",
        "id": 338356062,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677511127
    },
    {
        "content": "<p>Try to make an <code>norm unfold</code> rule for <code>Wrapper</code>. Maybe also for <code>SlimWrap</code>, though Aesop should be able to see through it. Then a <code>cases</code> rule for <code>Option</code>.</p>",
        "id": 338358406,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677511647
    },
    {
        "content": "<p>Or just a <code>cases</code> rule for <code>Wrapper</code> might also work.</p>",
        "id": 338358511,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677511669
    },
    {
        "content": "<p>I was under the impression that <code>ext</code> is supposed to apply the ext lemma generated by the attribute on <code>Discrete</code> and that <code>aesop</code> is supposed to try to use the tactic <code>ext</code>.</p>",
        "id": 338359153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677511834
    },
    {
        "content": "<p>Here is my attempt at the actual problem <a href=\"https://github.com/leanprover-community/mathlib4/pull/2522\">!4#2522</a>. In <code>diagramIsoCospan</code>, I cannot case on <code>j</code>.</p>",
        "id": 338360698,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677512192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20state.20not.20updating.2C.20bugs.2C.20etc.2E/near/338359153\">said</a>:</p>\n<blockquote>\n<p>I was under the impression that <code>ext</code> is supposed to apply the ext lemma generated by the attribute on <code>Discrete</code> and that <code>aesop</code> is supposed to try to use the tactic <code>ext</code>.</p>\n</blockquote>\n<p>Yes, but that does not help us with the goals we have in <code>PEmpty</code>. The proofs there all come down to recognising that we have <code>x : Discrete PEmpty</code> in the context, so we also have <code>x' : PEmpty</code> and the goal is trivial. Doing <code>cases</code> on <code>Discrete</code> hypotheses is one way to teach Aesop this. (We could also use less aggressive rules, e.g. a local <code>cases</code> rule or a global rule that concludes <code>PEmpty</code> from <code>Discrete PEmpty</code>.)</p>",
        "id": 338360936,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677512266
    },
    {
        "content": "<p>Oh ignore me. I missed the fact that this aesop attribute was about cases. I somehow read ext instead <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 338361878,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677512485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20state.20not.20updating.2C.20bugs.2C.20etc.2E/near/338360698\">said</a>:</p>\n<blockquote>\n<p>Here is my attempt at the actual problem <a href=\"https://github.com/leanprover-community/mathlib4/pull/2522\">!4#2522</a>. In <code>diagramIsoCospan</code>, I cannot case on <code>j</code>.</p>\n</blockquote>\n<p>I'm really confused by this example actually. Aesop's <code>simp</code> seems to unfold <code>WalkingCospan</code> as desired, but then still leaves it in the post-normalisation goal. Investigating.</p>",
        "id": 338368889,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677514174
    },
    {
        "content": "<p>The root cause of this failure to unfold <code>WalkingCospan</code> appears to be that <code>simp_all</code>, which Aesop uses for unfolding, only affects propositional hypotheses. This is by design, but should probably not apply to definitional unfolding. I wanted to refactor the unfolding infrastructure anyway, so I guess that's going to happen now. But it'll take a bit I'm afraid.</p>",
        "id": 338391459,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677516627
    },
    {
        "content": "<p>Thanks for taking a look. I can work around it for now.</p>",
        "id": 338396030,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677517668
    },
    {
        "content": "<p>Happy to know that I was <code>aesop</code>ing correctly</p>",
        "id": 338396162,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677517698
    },
    {
        "content": "<p>Regarding the original issue: I could not reproduce the hangs/panics, but I could reproduce the 'unknown universe' error which was presumably responsible for them. This error goes away when we force the auto-param <code>aesop_cat</code>s to fail unless they solve the goal. (Previously, they could 'succeed' but leave the goal unsolved.) I'm not sure whether this is really the root issue, but if it unblocks the port I'm happy enough. PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/2527\">!4#2527</a>. <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> could you rebase on top of this PR and test whether you still get hangs?</p>",
        "id": 338413866,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677521394
    },
    {
        "content": "<p>I am not sure what the issue with <code>ext</code> that is referred to a few times in the porting notes is actually but I don't think that <code>aesop_cat</code> can replace all of its uses.</p>",
        "id": 338453121,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677533068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> what's the issue? I think adding <code>funext</code> to the tactics that <code>aesop_cat</code> tries would go a long way.</p>",
        "id": 338454586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677533644
    },
    {
        "content": "<p><code>aesop</code> is finishing and <code>ext</code> should not be.</p>",
        "id": 338454947,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677533775
    },
    {
        "content": "<p>oh I see.</p>",
        "id": 338454979,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677533789
    },
    {
        "content": "<p>Well, <code>ext</code> can finish in some cases, like if the goal is <code>a = b</code> with <code>a b : PUnit</code> or something</p>",
        "id": 338455039,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677533821
    },
    {
        "content": "<p>True, but generally. There were some issues with tagging existing extensionality lemmas with <code>@[ext]</code>. I didn't really pay attention to the errors and followed the existing porting notes. Something about reduced functionality in <code>ext</code> in Lean 4. Let me try to dig something up.</p>",
        "id": 338455226,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677533909
    },
    {
        "content": "<p>Oh Gabriel explained this somewhere recently.</p>",
        "id": 338455300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677533952
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/ext.2Ffunext/near/329329566\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/ext.2Ffunext/near/329329566</a></p>",
        "id": 338455329,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677533969
    },
    {
        "content": "<p>is that what you're referring to?</p>",
        "id": 338455338,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677533973
    },
    {
        "content": "<p>Perhaps, but I remember the tag itself erroring</p>",
        "id": 338455519,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677534034
    },
    {
        "content": "<p>hmmm....</p>",
        "id": 338455613,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677534076
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Iso.inv_ext#doc\">docs4#CategoryTheory.Iso.inv_ext</a> I think is an example</p>",
        "id": 338455996,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677534221
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kn\">attribute</span> <span class=\"n\">only</span> <span class=\"n\">applies</span> <span class=\"n\">to</span> <span class=\"n\">structures</span> <span class=\"n\">or</span> <span class=\"n\">lemmas</span> <span class=\"n\">proving</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">got</span> <span class=\"bp\">?</span><span class=\"n\">f.inv</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">g</span>\n</code></pre></div>",
        "id": 338456222,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677534301
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">inv_ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≅</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hom_inv_id</span> <span class=\"o\">:</span> <span class=\"n\">f.hom</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.inv</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 338456270,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677534322
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: `@[ext]` used to accept lemmas like this. Now we add an aesop rule</span>\n</code></pre></div>",
        "id": 338456446,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677534376
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 338456514,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677534402
    },
    {
        "content": "<p>It seems that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wrote the Lean4 <code>ext</code> attribute. Mario, is there a good reason to disallow such lemmas?</p>",
        "id": 338456608,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677534448
    },
    {
        "content": "<p>I think so, that doesn't seem like an ext lemma to me</p>",
        "id": 338456803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534523
    },
    {
        "content": "<p>I mean it is at best topically related to extensionality</p>",
        "id": 338456879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534557
    },
    {
        "content": "<p>the old <code>ext</code> was essentially just <code>apply_rules</code> with a more suggestive name</p>",
        "id": 338456940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534590
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/ab86c6d5dbccfbacd3c1c2b8bf52a33adc99ac62/Mathlib/CategoryTheory/Iso.lean#L506\">Link</a></p>",
        "id": 338457062,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677534617
    },
    {
        "content": "<p>I don't think it is a good idea to have <code>ext</code> be nondeterministic / have many options for what it can apply and pick them based on the phase of the moon</p>",
        "id": 338457256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534698
    },
    {
        "content": "<p>In this example normal extensionality would also clearly be applicable, this is just a slightly simplified form</p>",
        "id": 338457392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534741
    },
    {
        "content": "<p>It is not terrible to spell out <code>apply Foo.ext</code> in its place which is what I've done up to this point.</p>",
        "id": 338457459,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677534766
    },
    {
        "content": "<p>actually it's not even introducing a variable, this is just moving the <code>g</code> to the other side... how is this extensionality?</p>",
        "id": 338457498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534784
    },
    {
        "content": "<p>I think you should indeed just apply it like a regular theorem, that seems a lot more clear</p>",
        "id": 338457543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534805
    },
    {
        "content": "<p>what about lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.prod.hom_ext\">docs#category_theory.limits.prod.hom_ext</a></p>",
        "id": 338457606,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677534837
    },
    {
        "content": "<p>I think those are in the same spirit as the one Matt mentioned, and IMO are indeed extensionality in the categorical sense</p>",
        "id": 338457711,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677534863
    },
    {
        "content": "<p>I hope the <code>ext</code> attribute works in this case...</p>",
        "id": 338457754,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677534881
    },
    {
        "content": "<p>those look like proper extensionality lemmas</p>",
        "id": 338457776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534893
    },
    {
        "content": "<p>they should work with <code>ext</code></p>",
        "id": 338457825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534913
    },
    {
        "content": "<p>so is the issue the fact that the LHS of the problematic lemma involves a function <code>inv</code>?</p>",
        "id": 338457896,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677534945
    },
    {
        "content": "<p>the criteria is: it should be proving <code>x = y</code> where the type of <code>x</code> and <code>y</code> is something interesting (and the type of the equality in the hypotheses should be something simpler)</p>",
        "id": 338457903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534949
    },
    {
        "content": "<p>the type of <code>x</code> and <code>y</code> in both cases is the type of morphisms between two objects in a category. Why is one more interesting than the other?</p>",
        "id": 338457997,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677534982
    },
    {
        "content": "<p>and <code>x</code> and <code>y</code> should be variables here</p>",
        "id": 338458022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677534999
    },
    {
        "content": "<p>okay so that's the issue.</p>",
        "id": 338458044,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677535011
    },
    {
        "content": "<p><code>prod.hom_ext</code> took <code>ext</code> without error <del>--- I think...</del></p>",
        "id": 338458072,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677535025
    },
    {
        "content": "<p>that's good. But I can imagine some combination in category theory that would give issues.<br>\nLet me try to come up with an example</p>",
        "id": 338458129,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677535065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Goal.20state.20not.20updating.2C.20bugs.2C.20etc.2E/near/338457997\">said</a>:</p>\n<blockquote>\n<p>the type of <code>x</code> and <code>y</code> in both cases is the type of morphisms between two objects in a category. Why is one more interesting than the other?</p>\n</blockquote>\n<p>Ideally, it should not overlap with other extensionality lemmas. Is this an equality between two objects in a particular category or an arbitrary one?</p>",
        "id": 338458208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677535088
    },
    {
        "content": "<p>arbitrary</p>",
        "id": 338458228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677535099
    },
    {
        "content": "<p>because I would assume that equality between arbitrary morphisms is already covered</p>",
        "id": 338458242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677535105
    },
    {
        "content": "<p>because only the type of the equality is used for the dispatch</p>",
        "id": 338458293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677535129
    },
    {
        "content": "<p>if the type of the equality is already \"morphisms in an arbitrary category\", then the hypotheses are not simpler than the conclusion</p>",
        "id": 338458496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677535207
    },
    {
        "content": "<p>Equality in <code>Rapper (arbitrary category)</code> from equality in <code>arbitrary category</code> is what I usually find</p>",
        "id": 338458680,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677535272
    },
    {
        "content": "<p>that's a good ext lemma</p>",
        "id": 338458734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677535282
    },
    {
        "content": "<p>Adam can probably cook up something more challenging though</p>",
        "id": 338459086,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1677535414
    },
    {
        "content": "<p>Okay, this is a bit cooked up, but here is some lemma that's in between the two lemmas discussed above, and the <code>ext</code> attribute indeed fails here as well.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n  <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span>\n  <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span>\n  <span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">Z</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">f1</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">f2</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">Z</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_lift_ext</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">prod</span> <span class=\"n\">C</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">P.P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">P.p1</span> <span class=\"bp\">=</span> <span class=\"n\">f1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">P.p2</span> <span class=\"bp\">=</span> <span class=\"n\">f2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">P.lift</span> <span class=\"n\">_</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"o\">:=</span>\n<span class=\"n\">P.uniq</span> <span class=\"n\">Z</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span> <span class=\"n\">g</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 338460577,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677536022
    },
    {
        "content": "<p>I think it's fair to say that the assumptions are simpler than the conclusion in this case.</p>",
        "id": 338460680,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677536049
    },
    {
        "content": "<p>So if I understand correctly, the error arises in the following line: <a href=\"https://github.com/leanprover/std4/blob/9a43e832fc20cf0b94f5041b9bec70945d409d12/Std/Tactic/Ext/Attr.lean#L64\">https://github.com/leanprover/std4/blob/9a43e832fc20cf0b94f5041b9bec70945d409d12/Std/Tactic/Ext/Attr.lean#L64</a></p>\n<p>I'm willing to accept the fact that removing this line would cause issues down the line (if not immediately), but it would be nice to get an explanation of why.</p>",
        "id": 338461663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677536452
    },
    {
        "content": "<p>I don't think this should qualify extensionality lemma, because it is not about arbitrary objects of the type being equal, it is very specifically about destructing <code>P.lift</code> expressions</p>",
        "id": 338462201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677536715
    },
    {
        "content": "<p>This is an induction principle, not an extensionality principle</p>",
        "id": 338462340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677536777
    },
    {
        "content": "<p>This is more of an abstract criterion for categorizing lemmas, it could plausibly be a lint instead because it will probably not actually break the tactic</p>",
        "id": 338462726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677536960
    },
    {
        "content": "<p>although it will probably wastefully try to apply the lemma more than necessary</p>",
        "id": 338462790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677536992
    },
    {
        "content": "<p>okay, yes I agree this is an induction and not an extensionality principle.</p>",
        "id": 338468907,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677539512
    },
    {
        "content": "<p>I don't know why exactly, but I'm a little suspicious about relying on <code>aesop_cat</code> to apply such lemmas. Maybe we can have a separate tactic that applies these \"non-extensionality\" extensionality lemmas. Applying such things is one of the important aspects of the automation in the category theory library in mathlib3.</p>",
        "id": 338469162,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677539620
    },
    {
        "content": "<p>I too am having troubles with the user experience, but I seem to have a somewhat different problem. I am working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/2502\">!4#2502</a>. I fixed some errors, restarted the server because the infoview wasn't updating. But instead of recompiling the file and giving me new errors to fix, the server recompiled the unmodified file (??)</p>",
        "id": 344214018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679652642
    },
    {
        "content": "<p>That's a new one afaik. It's strange, if the server is restarted, it must be the extension sending it the wrong code.</p>",
        "id": 344219342,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679653693
    },
    {
        "content": "<p>FWIW, closing and reopening VScode fixed it.</p>",
        "id": 344220124,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679653842
    }
]