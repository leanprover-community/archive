[
    {
        "content": "<p>I encountered the following error with newest mathlib on a proof that used to work. I am not sure how to interpret it: should I just fix it by writing out the specific instance like below, or is this an issue with the instance hierarchy?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.BooleanAlgebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">from</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> type mismatch</span>\n<span class=\"cm\">    le_sup_inf</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    @Sup.sup Bool (@SemilatticeSup.toSup Bool (@Lattice.toSemilatticeSup Bool DistribLattice.toLattice)) a b ⊓</span>\n<span class=\"cm\">        (a ⊔ ?m.42838) ≤</span>\n<span class=\"cm\">      a ⊔ b ⊓ ?m.42838 : Prop</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    @Sup.sup Bool (@SemilatticeSup.toSup Bool (@Lattice.toSemilatticeSup Bool GeneralizedCoheytingAlgebra.toLattice)) a</span>\n<span class=\"cm\">          b ⊓</span>\n<span class=\"cm\">        (a ⊔ c) ≤</span>\n<span class=\"cm\">      a ⊔ b ⊓ c : Prop -/</span>\n  <span class=\"n\">le_sup_inf</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">from</span>\n  <span class=\"bp\">@</span><span class=\"n\">le_sup_inf</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">GeneralizedCoheytingAlgebra.toDistribLattice</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 399787523,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1698866513
    },
    {
        "content": "<p>I think this is fallout from <a href=\"https://github.com/leanprover/std4/pull/183\">std4#183</a></p>",
        "id": 399788394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698866745
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">GeneralizedCoheytingAlgebra.toLattice</span> <span class=\"o\">:</span> <span class=\"n\">Lattice</span> <span class=\"n\">Bool</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"bp\">=</span>\n    <span class=\"n\">DistribLattice.toLattice.sup</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 399788672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698866829
    },
    {
        "content": "<p>Just to confirm,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.BooleanAlgebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.DefeqTransformations</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">from</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">convert</span> <span class=\"n\">le_sup_inf</span>\n    <span class=\"c1\">-- ⊢ GeneralizedCoheytingAlgebra.toLattice = DistribLattice.toLattice</span>\n    <span class=\"n\">unfold_projs</span>\n    <span class=\"n\">congr</span><span class=\"bp\">!</span>\n    <span class=\"c1\">-- ⊢ or = max</span>\n    <span class=\"c1\">-- ⊢ and = min</span>\n</code></pre></div>",
        "id": 399788721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698866847
    },
    {
        "content": "<p>Or:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">instDistribLatticeBool.sup</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">||</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">instBooleanAlgebraBool.sup</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">||</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instDistribLatticeBool#src\">src#instDistribLatticeBool</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instBooleanAlgebraBool#src\">src#instBooleanAlgebraBool</a>)</p>",
        "id": 399789075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698866940
    },
    {
        "content": "<p>There is a fix in the works in std, though ideally mathlib wouldn't be constructing these two things in different ways; I would have expected the <code>rfl</code> in my first message to succeed, but the other two to fail...</p>",
        "id": 399789345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698867014
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8099\">#8099</a></p>",
        "id": 399789987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698867295
    }
]