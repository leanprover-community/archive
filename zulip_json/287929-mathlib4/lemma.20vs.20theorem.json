[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mario's.20FMM.202021.20talk/near/247723182\">said</a>:</p>\n<blockquote>\n<p>Honestly that lemma vs theorem information is not worth fighting for. Our current mathlib [edit: 3] is a mess here.</p>\n</blockquote>\n<p>Now that we're in a position where mathport has replaced every <code>lemma</code> with <code>theorem</code>; should we just remove the lemma keyword?</p>",
        "id": 375161250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689322024
    },
    {
        "content": "<p>Seems like there are &gt; 5000 lemmas in ml4 already</p>",
        "id": 375162459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689322242
    },
    {
        "content": "<p>Then I would guess the distinction is ported vs new-in-mathlib4.</p>",
        "id": 375163200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689322380
    },
    {
        "content": "<p>Or maybe ported-without-mathport</p>",
        "id": 375163343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689322402
    },
    {
        "content": "<p>4 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Mario.27s.20FMM.202021.20talk\">#mathlib4 &gt; Mario's FMM 2021 talk</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 375165154,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689322754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/375162459\">said</a>:</p>\n<blockquote>\n<p>Seems like there are &gt; 5000 lemmas in ml4 already</p>\n</blockquote>\n<p>A regex for <code>(^|\\] )lemma </code> only finds ~1300 matches for me</p>",
        "id": 375166431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689323048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/375163200\">said</a>:</p>\n<blockquote>\n<p>Then I would guess the distinction is ported vs new-in-mathlib4.</p>\n</blockquote>\n<p>This is of course evidence that no one likes typing <code>theorem</code> and everyone prefers the shorter <code>lemma</code>; but having both seems pointless if the distinction is really mathport output vs not</p>",
        "id": 375169588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689323688
    },
    {
        "content": "<p>Then maybe we should abolish <code>theorem</code> in mathlib?</p>",
        "id": 375170399,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689323846
    },
    {
        "content": "<p>I'd be happy with that (and a lint rule banning <code>theorem</code>) too; I just think it's noise to have both now that all the deliberate uses have been completely eliminated by the port</p>",
        "id": 375171078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689323987
    },
    {
        "content": "<p>I always decide between writing <code>lemma</code> and <code>theorem</code> deliberately. Am I the only one who cares?</p>",
        "id": 375171427,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689324051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/375161250\">said</a>:</p>\n<blockquote>\n<p>Now that we're in a position where mathport has replaced every <code>lemma</code> with <code>theorem</code></p>\n</blockquote>\n<p>I think it is technically possible to write a script that will change <code>theorem</code> to <code>lemma</code> for all theorems that resulted from porting a <code>lemma</code> from Mathlib 3.</p>",
        "id": 375172156,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689324217
    },
    {
        "content": "<blockquote>\n<p>I think it is technically possible to write a script that ...</p>\n</blockquote>\n<p>Sure, but we already made the decision not to care about this when we started the port (see the message I quoted at the top of the thread, and what it's in reply to)</p>",
        "id": 375172415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689324272
    },
    {
        "content": "<p>Ah, sorry. Did you mean that Mathlib 3 was a mess in this regards?</p>",
        "id": 375172736,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1689324344
    },
    {
        "content": "<p>Yes, Patrick's comment was referring to mathlib 3, edited to make that clear.</p>",
        "id": 375173001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689324396
    },
    {
        "content": "<p>I try to use <code>lemma</code> vs <code>theorem</code> meaningfully.</p>\n<p>I think Patrick's comment was that it's not worth going through the engineering effort to get Lean 3 to give mathport lemma vs theorem information. That doesn't mean that we wouldn't want to be able to choose whether a result is a lemma or a theorem.</p>",
        "id": 375174124,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689324644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/375169588\">said</a>:</p>\n<blockquote>\n<p>This is of course evidence that no one likes typing <code>theorem</code> and everyone prefers the shorter <code>lemma</code></p>\n</blockquote>\n<p>You should consider the fact that most results in mathlib are individually fairly trivial lemmas, so it shouldn't be surprising that you'd find more lemmas than theorems</p>",
        "id": 375174925,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689324807
    },
    {
        "content": "<p>If that's the case, maybe a good compromise is to globally replace every <code>theorem</code> that is <code>#align</code>ed (i.e., from mathport) with <code>lemma</code>?</p>",
        "id": 375175443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689324910
    },
    {
        "content": "<p>This is fun, apparently \"theorem\", if you follow the etymology, could be replaced with \"behold!\"</p>",
        "id": 375176036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689325037
    },
    {
        "content": "<p>If the current state is such a mess I'd even consider just replacing every <code>theorem</code> with <code>lemma</code> in all of mathlib and then only mark hand selected ones back as <code>theorems</code> over time as they come up. That way it would be clear that everything marked as <code>theorem</code> is intentional</p>",
        "id": 375213983,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1689332712
    },
    {
        "content": "<p>Yes, I think that's what I intended to suggest above</p>",
        "id": 375214829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689332911
    },
    {
        "content": "<p>If using <code>lemma</code> is forced by linting, then calling something a <code>theorem</code> would involve also using a <code>nolint</code>.  This would likely mean that simply grepping for the <code>nolint</code> would give a curated list of results which I would definitely consider a plus!</p>",
        "id": 375226923,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689335566
    },
    {
        "content": "<p>Perhaps a rule should be that <code>theorem</code>s require docstrings? (but of course lemmas are allowed them too)</p>",
        "id": 375227010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689335584
    },
    {
        "content": "<p>I like that!</p>",
        "id": 375227668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689335738
    },
    {
        "content": "<p>And also a reference to external literature</p>",
        "id": 375227751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689335762
    },
    {
        "content": "<p>That works also, although it makes grepping trickier.</p>\n<p>The reason for wanting a grep-friendly solution is mostly due to the current increasing interest in mathlib: it might be helpful to be able to extract what are the \"main\" results also for someone who know almost nothing of lean...</p>",
        "id": 375227847,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689335776
    },
    {
        "content": "<p>We can lift that rule by the time people do original maths research directly in mathlib PRs</p>",
        "id": 375227868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689335780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Why is it hard to grep for <code>theorem</code>?</p>",
        "id": 375228013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689335810
    },
    {
        "content": "<p>It is not hard to grep for theorem, but it is not easy to <em>only</em> receive information that is not in a doc-string.</p>",
        "id": 375228139,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689335837
    },
    {
        "content": "<p>Anyway, the grep issue is just a side concern.  Requiring doc-strings and a possible reference is already great!</p>",
        "id": 375228764,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689335959
    },
    {
        "content": "<p>Lean is inheritally not grep friendly though, I think you're much better off improving the available lean tooling that yields that information (like Kyle demonstrated recently) or improve the <a href=\"https://leanprover-community.github.io/mathlib4_docs\">#docs</a> so that you can easily filter for theorems.</p>",
        "id": 375236638,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1689337583
    },
    {
        "content": "<p>Sure, although I have the impression that I am not the only one who finds that getting a rough estimate using grep is <em>much</em> quicker than learning how to meta-program it exactly.</p>",
        "id": 375239797,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689338238
    },
    {
        "content": "<p>Is that convenience worth making all contributors need to add a greppable <code>@[nolint]</code>?</p>\n<p>I think it would be less effort overall to get the mathlib docs to have generated <code>theorem</code> indexes. The point isn't that you'd be expected to write these metaprograms personally, but rather that someone could improve the tooling to generate this sort of thing.</p>",
        "id": 375241738,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689338605
    },
    {
        "content": "<p>Sure, I am not trying to argue that grep is the ultimate goal.  However, here is a case that I have had in my mind and have not had the strength to meta-program: what is the ratio between auto-generated/actually human-typed declarations?</p>\n<p>I can get the exact count of declarations from Kyle's earlier metaprogram.  After that, I still find it easier to grep for lines that roughly begin with \"lemma\" or \"theorem\" and accept a possible miscount to get an estimate.</p>\n<p>I am not sure how to go about meta-programming an actual correct count, though...</p>",
        "id": 375242911,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689338792
    },
    {
        "content": "<p>Perhaps Kyle's metaprogram should be committed to mathlib in a scripts/ or examples/ directory</p>",
        "id": 375243113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689338819
    },
    {
        "content": "<p>Eric: definitely.  I saved it already!</p>",
        "id": 375243349,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689338852
    },
    {
        "content": "<p>I agree with Damiano's point that having both <code>lemma</code> and <code>theorem</code> makes grepping harder. Even if we have fancy metaprogramming search mechanisms (and we don't currently), these would still require compiling mathlib to get accurate information. Grep works without any infrastructure, and can work on github code search too</p>",
        "id": 375252379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689340032
    },
    {
        "content": "<p><code>lemma</code> is not a core Lean keyword, it's introduced in mathlib as a synonym for theorem on the basis that mathematicians like to distinguish between trivialities and interesting stuff rather than calling everything a theorem (which is a bit grandiose)</p>",
        "id": 390075403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694304612
    },
    {
        "content": "<p>But this is now totally out of whack because mathport translated everything as <code>theorem</code>.</p>",
        "id": 390087062,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694311912
    },
    {
        "content": "<p>I think we're waiting for someone to reset everything by doing a global replacement</p>",
        "id": 390130511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694343177
    },
    {
        "content": "<p>Should the reset call every <code>theorem</code> <code>lemma</code> or actually match what was used in Lean 3?</p>",
        "id": 390130675,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694343292
    },
    {
        "content": "<p>I think just do a full reset</p>",
        "id": 390134934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694345693
    },
    {
        "content": "<p>I like the challenge!  Let me give it a try!</p>",
        "id": 390134991,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694345735
    },
    {
        "content": "<p>We could follow up by converting anything that contains something like <code>**the Pythagorean theorem**</code> etc back to a theorem</p>",
        "id": 390135005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694345741
    },
    {
        "content": "<p>For years there was some comment in core Lean containing a word with a random alpha in instead of an a, because of a global rename fail; I look forward to the fun that this idea will bring :-)</p>",
        "id": 390137983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694347516
    },
    {
        "content": "<p>Well, you can see the progress: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7079\">#7079</a>!</p>\n<p>The current version is building on my computer and reached approximately 1k files with no errors.</p>\n<p>I may have inadvertently changed a <code>theorem</code> to a <code>lemma</code> in a doc-string.  If this is an issue, I can be more careful!</p>",
        "id": 390139599,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694348576
    },
    {
        "content": "<p>By the way, when CI was building mathlib, it would show how many files it build and how many were missing.  This seems to be gone, or am I missing something?</p>",
        "id": 390139726,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694348673
    },
    {
        "content": "<p>You can only see this on GitHub if you keep the page open</p>",
        "id": 390142991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694350737
    },
    {
        "content": "<p>In progress logs from before you opened the page are not shown</p>",
        "id": 390143028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694350753
    },
    {
        "content": "<p>I caught a few more replacements: there are currently almost 100k changed lines, and I think that there are about 100k (explicit) lemmas in mathlib, right?  So, this is looking superficially reasonable!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 390144198,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694351536
    },
    {
        "content": "<p>I tried to find some errors but your method had dealt with them all correctly.</p>",
        "id": 390144248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694351580
    },
    {
        "content": "<p>If we're interested in this, it should probably be merged the moment it compiles.</p>",
        "id": 390144313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694351638
    },
    {
        "content": "<p>If it builds, I think that the only errors would be doc-strings where a <code>theorem</code> has been replaced by a <code>lemma</code>: not a ideal, but probably not too problematic either...  we'll see!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 390144975,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694352062
    },
    {
        "content": "<p>since the process is essentially automatic, if the doc-string replacements is an issue, I can make sure that doc-string theorems are unchanged.</p>",
        "id": 390145037,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694352109
    },
    {
        "content": "<p>Can't this be done by metaprogramming (i.e., Lean itself), to be sure that everything is right? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 390145131,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694352140
    },
    {
        "content": "<p>I think that it should be possible, but for me it was easier to do the bulk replacement in bash.</p>",
        "id": 390145238,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694352219
    },
    {
        "content": "<p>Also, the consequences of an error are probably not too big: at worst, something that was <code>theorem</code> has been replaced by <code>lemma</code>.  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 390146292,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694352862
    },
    {
        "content": "<p>CI uploaded the cache!  But then failed on Archive.  I'll take a look!</p>",
        "id": 390150203,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694355190
    },
    {
        "content": "<p>Turns out that <code>huang_degree_theorem</code> had become <code>huang_degree_lemma</code>!</p>",
        "id": 390150715,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694355547
    },
    {
        "content": "<p>I guess you are lucky that <code>lemma</code> is shorter than <code>theorem</code>, else you’d have to deal with the <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> <span aria-label=\"capital letters\" class=\"emoji emoji-1f520\" role=\"img\" title=\"capital letters\">:capital_letters:</span> <span aria-label=\"stop sign\" class=\"emoji emoji-1f6d1\" role=\"img\" title=\"stop sign\">:stop_sign:</span></p>",
        "id": 390155130,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694357999
    },
    {
        "content": "<p>Yes, I thought of that!</p>\n<p>The PR is linting: all the building of mathlib, archive, tests, counterexamples is done!</p>",
        "id": 390155341,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694358076
    },
    {
        "content": "<p>It's green!</p>",
        "id": 390156657,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694358811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390145131\">said</a>:</p>\n<blockquote>\n<p>Can't this be done by metaprogramming (i.e., Lean itself), to be sure that everything is right? <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span></p>\n</blockquote>\n<p>Yes, this would be covered under my plans for bulk syntax edits (although I haven't actually moved on that plan)</p>",
        "id": 390174175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694373105
    },
    {
        "content": "<p>(EDIT: message moved back to <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/391609134\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/391609134</a> )</p>",
        "id": 390174581,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694373472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390174175\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390145131\">said</a>:</p>\n<blockquote>\n<p>Can't this be done by metaprogramming (i.e., Lean itself), to be sure that everything is right? <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span></p>\n</blockquote>\n<p>Yes, this would be covered under my plans for bulk syntax edits (although I haven't actually moved on that plan)</p>\n</blockquote>\n<p>A first conflict appeared in the PR.  Mario, does your comment mean that this change should wait?  If so, great and I will close the PR!  Otherwise, I'll keep it afloat for a while!  Note that it is not much work, since the changes are essentially automatic.</p>",
        "id": 390179770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694376790
    },
    {
        "content": "<p>I think it is best to just wait until we are basically already about to hit the merge button since this PR conflicts with everything and will be disruptive to existing PRs as well</p>",
        "id": 390302583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694436298
    },
    {
        "content": "<p>Note that this is going to be one more thing where Std diverges from Mathlib because Std only uses <code>theorem</code> while mathlib now only uses <code>lemma</code></p>",
        "id": 390302876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694436394
    },
    {
        "content": "<p>In many other programming language ecosystems there are concerns about \"splitting the ecosystem\" or \"creating a dialect\" and FYI this is exactly what mathlib is doing</p>",
        "id": 390303139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694436485
    },
    {
        "content": "<p>I completely agree with your points and I rationally understand.</p>\n<p>However, at a less rational level, I found that looking at the pages and pages of <code>lemma</code>s was very welcoming!  I feel that if the convention had been \"you can only use <code>lemma</code>\", I would not have thought \"oh, we really need <code>theorem</code>s\"!</p>\n<p>Anyway, I will not maintain the PR, but the conversion <code>theorem</code> to <code>lemma</code> is automatic, so it can be reproduced on-demand!</p>",
        "id": 390310125,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694438705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390303139\">said</a>:</p>\n<blockquote>\n<p>In many other programming language ecosystems there are concerns about \"splitting the ecosystem\" or \"creating a dialect\" and FYI this is exactly what mathlib is doing</p>\n</blockquote>\n<p>Mathlib4 has already done this by defining the <code>lemma</code> command in the first place. Either we should define it and use it for the majority of mathlib, or we should remove it.</p>",
        "id": 390314363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694440101
    },
    {
        "content": "<p>Also, as far as dialects go, in the context of formalizing mathematics, being allowed to use either <code>lemma</code> or <code>theorem</code> seems pretty innocuous and I doubt that it will be the hardest thing you come by, learning Lean.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 390315001,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694440304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390314363\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390303139\">said</a>:</p>\n<blockquote>\n<p>In many other programming language ecosystems there are concerns about \"splitting the ecosystem\" or \"creating a dialect\" and FYI this is exactly what mathlib is doing</p>\n</blockquote>\n<p>Mathlib4 has already done this by defining the <code>lemma</code> command in the first place. Either we should define it and use it for the majority of mathlib, or we should remove it.</p>\n</blockquote>\n<p>Or we should upstream it</p>",
        "id": 390317613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694441036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390315001\">said</a>:</p>\n<blockquote>\n<p>Also, as far as dialects go, in the context of formalizing mathematics, being allowed to use either <code>lemma</code> or <code>theorem</code> seems pretty innocuous and I doubt that it will be the hardest thing you come by, learning Lean.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>It's more problematic than you might think, because when people learn about how <code>def</code> and <code>theorem</code> have a bunch of subtle differences even though you can use <code>def</code> for theorems and <code>theorem</code> for defs, they might logically expect that there is also some subtle difference between <code>lemma</code> and <code>theorem</code>, but no this is only a style difference (except that if you copy and paste a <code>lemma</code> into std it won't parse)</p>",
        "id": 390318206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694441184
    },
    {
        "content": "<p>I don't like keywords that have no meaning. It should do <em>something</em>, for example appearing higher on the docs page or being a different color or hiding access from other files etc. This keyword is currently just completely useless and misleading</p>",
        "id": 390318661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694441307
    },
    {
        "content": "<p>Currently there isn't even a way to differentiate theorems from lemmas after the fact if you wanted to show a list of theorems somewhere</p>",
        "id": 390318987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694441389
    },
    {
        "content": "<p>and I would argue the nonexistence of such tooling directly correlates with how low quality the actual signal is, no one will upkeep this thing if it doesn't do anything</p>",
        "id": 390319263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694441457
    },
    {
        "content": "<p>I remember someone had suggested that <code>theorem</code>s should require a doc-string, while <code>lemma</code>s need not have one.  I think that this is very much in line with how I feel about the meaning of those words.  Would this be something that (maybe in the future) would help?</p>",
        "id": 390319718,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694441568
    },
    {
        "content": "<p>I realize that this is just a style issue, but at least there is something that you can say that distinguishes the two, besides the characters that you need to type!</p>",
        "id": 390319891,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694441618
    },
    {
        "content": "<p><code>lemma</code> is 2% less likely to trigger the line length lint :)</p>",
        "id": 390320386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694441758
    },
    {
        "content": "<p>That settles it, then!  <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 390320872,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694441885
    },
    {
        "content": "<p>I'm not sure I'm convinced by this PR, seeing as at the moment there is no difference between theorem and lemma (other than length. I wonder if the extra macro expansion is noticeable in <code>!bench</code> though). And one downside is it pollutes the git history, I often use git blame to see why a certain thing is set up that way or find the PR that introduced / changed it, now I'll have to click through some steps to find that information for every <del>theorem</del> lemma line in mathlib</p>",
        "id": 390329591,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694444137
    },
    {
        "content": "<p>I agree that this is a \"formatting\" PR and should probably be bundled with other \"format the world\" style PRs to minimize disruption</p>",
        "id": 390329954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694444239
    },
    {
        "content": "<p>the history is completely broken already unless Eric (other) has done the history rewriting yet</p>",
        "id": 390329977,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694444244
    },
    {
        "content": "<p>It's on my todo list, competing with actually writing the rest of my thesis...</p>",
        "id": 390332624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694444917
    },
    {
        "content": "<p>I don't think the history pollution is too bad here; we can always add it to the list of commits to exclude from git blame(<code>.git-blame-ignore-revs</code>)</p>",
        "id": 390332722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694444946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390329977\">said</a>:</p>\n<blockquote>\n<p>the history is completely broken already unless Eric (other) has done the history rewriting yet</p>\n</blockquote>\n<p>Well a lot of what I've worked on recently could be classed as cleaning up from the port so I'm actually quite interested in seeing the discussion during the port mostly. But I didn't know about <code>git-blame-ignore-revs</code> which settles my concern completely</p>",
        "id": 390335096,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694445580
    },
    {
        "content": "<p>It looks like the name of that file and usage is simply a convention though that everyone would have to set up as a git config themselves, but its better than nothing</p>",
        "id": 390336287,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694445920
    },
    {
        "content": "<p>the usage in github is not a convention</p>",
        "id": 390338861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694446587
    },
    {
        "content": "<p>Well what I mean is that git itself will not if I do git blame in the command line or in the editor without extra configuration. Github already does it which is good yes.</p>",
        "id": 390340062,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694446963
    },
    {
        "content": "<p>The extra config is <code>blame.ignorerevsfile=.git-blame-ignore-revs</code> (via git config)</p>",
        "id": 390350999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694450679
    },
    {
        "content": "<p>Then it appears everywhere</p>",
        "id": 390351026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694450692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390303139\">said</a>:</p>\n<blockquote>\n<p>In many other programming language ecosystems there are concerns about \"splitting the ecosystem\" or \"creating a dialect\" and FYI this is exactly what mathlib is doing</p>\n</blockquote>\n<p>I'm much less worried that <code>lemma</code> is creating a dialect than the mathlib option of removing autoImplict is creating a dialect. It's really annoying that I can't copy-paste Lean code from the Lean 4 stream into my Mathlib scratch file. To be clear, <code>lemma</code> is adding something to Lean. It is no surprise that Mathlib has more things than core Lean. The idea to <em>remove</em> features from Lean in Mathlib is much more disturbing and unexpected.</p>",
        "id": 390366468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694456893
    },
    {
        "content": "<p>Note that I said std, not core lean. I would really like the divergence between std and mathlib to be primarily about library additions rather than language additions (which should ideally be achieved by upstreaming mathlib utility commands and tactics to std), but std is stylistically more similar to core than mathlib and doesn't set any options (except for <code>linter.missingDocs</code>, because docs are important)</p>",
        "id": 390367103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694457169
    },
    {
        "content": "<p>The fact that removing <code>autoImplicit</code> has broken Std has completely changed my opinion on the matter. <code>autoImplicit</code> was annoying during the port, but Std now being broken is just as annoying.</p>",
        "id": 390374467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694460258
    },
    {
        "content": "<p>I'm hoping that problem will end up irrelevant due to the lake changes Mario is proposing. I assume you're not also advocating that the non-strict autoimplicits (all identifiers permit typos) are restored to mathlib?</p>",
        "id": 390387751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694466244
    },
    {
        "content": "<p>Because that setting also breaks (much less) of Std</p>",
        "id": 390387774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694466261
    },
    {
        "content": "<p>Strict autoImplicits seemed like a really good compromise.</p>",
        "id": 390387925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694466344
    },
    {
        "content": "<p>Unfortunately (IMO) the poll didn't really agree: <a href=\"#narrow/stream/113488-general/topic/mathlib4.3A.20autoImplicit.20false.20by.20default.3F/near/384265143\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib4.3A.20autoImplicit.20false.20by.20default.3F/near/384265143</a></p>",
        "id": 390390352,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694467594
    },
    {
        "content": "<p>TBH that poll seems pretty split</p>",
        "id": 390391417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694468121
    },
    {
        "content": "<p>And that poll took place before people could see how annoying is the ban on autoImplicit.</p>",
        "id": 390391579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694468194
    },
    {
        "content": "<p>(I won't fight revisiting it!)</p>",
        "id": 390393126,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694468957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords/near/390391579\">said</a>:</p>\n<blockquote>\n<p>And that poll took place before people could see how annoying is the ban on autoImplicit.</p>\n</blockquote>\n<p>Arguably what we're seeing is how annoying <a href=\"https://github.com/leanprover/lean4/pull/2455\">lean4#2455</a> is; I don't think we should re-vote unless we're giving up on <a href=\"https://github.com/leanprover/lean4/pull/2456\">lean4#2456</a></p>",
        "id": 390400341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694472072
    },
    {
        "content": "<p>I think you mean <a href=\"https://github.com/leanprover/lean4/pull/2455\">lean4#2455</a></p>",
        "id": 390400516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694472149
    },
    {
        "content": "<p>(I'm sure <a href=\"https://github.com/leanprover/lean4/pull/2555\">lean4#2555</a> will also be annoying)</p>",
        "id": 390400637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694472213
    },
    {
        "content": "<p>67 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/List.20of.20important.20keywords\">#new members &gt; List of important keywords</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 391499068,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694955611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/390318661\">said</a>:</p>\n<blockquote>\n<p>I don't like keywords that have no meaning. It should do <em>something</em>, for example appearing higher on the docs page or being a different color or hiding access from other files etc. This keyword is currently just completely useless and misleading</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/390319263\">said</a>:</p>\n<blockquote>\n<p>and I would argue the nonexistence of such tooling directly correlates with how low quality the actual signal is, no one will upkeep this thing if it doesn't do anything</p>\n</blockquote>\n<p>In light of these, I would really like it if we could remove one of <code>lemma</code> or <code>theorem</code> from mathlib. It's annoying to see a PR of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo3</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar2</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar3</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">baz1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">baz2</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">baz3</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where the only signal here is either \"<code>bar</code> was moved from another file but <code>baz</code>/<code>foo</code> are new lemmas\" or \"I am sending an SOS message via steganography\".</p>",
        "id": 391499510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694955948
    },
    {
        "content": "<p>As we discussed somewhere else, can we force <code>theorem</code>s to have a docstring? And if they don't have one, give a warning \"<code>theorem</code> is reserved to important (named) results, and therefore should be explained by a docstring. For lesser results, use <code>lemma</code>.\".</p>",
        "id": 391511093,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694959152
    },
    {
        "content": "<blockquote>\n<p>I don't like keywords that have no meaning. It should do something, for example appearing higher on the docs page or being a different color or hiding access from other files etc. This keyword is currently just completely useless and misleading</p>\n</blockquote>\n<p><code>0</code> is equally useless and misleading, right? It's just another name for <code>Zero.zero</code>, but with fewer characters.</p>",
        "id": 391513162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694959779
    },
    {
        "content": "<p>In that situation though:</p>\n<ul>\n<li>We effectively have a rule of \"never write <code>Zero.zero</code>\"</li>\n<li>It is not possible to eliminate <code>Zero.zero</code> from existence leaving only <code>0</code></li>\n</ul>",
        "id": 391515143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694960405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391511093\">said</a>:</p>\n<blockquote>\n<p>As we discussed somewhere else, can we force <code>theorem</code>s to have a docstring? And if they don't have one, give a warning \"<code>theorem</code> is reserved to important (named) results, and therefore should be explained by a docstring. For lesser results, use <code>lemma</code>.\".</p>\n</blockquote>\n<p>wouldn't we want to advocate for both <code>theorem</code>/<code>lemma</code> to be core Lean in that case?</p>",
        "id": 391535087,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694967787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391515143\">said</a>:</p>\n<blockquote>\n<p>In that situation though:</p>\n<ul>\n<li>We effectively have a rule of \"never write <code>Zero.zero</code>\"</li>\n<li>It is not possible to eliminate <code>Zero.zero</code> from existence leaving only <code>0</code></li>\n</ul>\n</blockquote>\n<p>crazy, but why not replace <code>Zero.zero</code> with <code>OfNat 0</code>?</p>",
        "id": 391535121,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694967804
    },
    {
        "content": "<p><del>You mean <code>OfNat Zero.zero</code>?</del></p>",
        "id": 391535371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694967938
    },
    {
        "content": "<p>I think the main answer to \"why not use <code>OfNat 0</code>?\" is \"it would have been really annoying during the port\"</p>",
        "id": 391535448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694967969
    },
    {
        "content": "<p>Revisiting that is probably a question for a separate thread though.</p>",
        "id": 391535508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694967997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391535121\">said</a>:</p>\n<blockquote>\n<p>crazy, but why not replace <code>Zero.zero</code> with <code>OfNat 0</code>?</p>\n</blockquote>\n<p>We definitely tried that, it didn't work</p>",
        "id": 391552398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694974832
    },
    {
        "content": "<p>the problem is that you can't have a class that <code>extends OfNat A 0, OfNat A 1</code></p>",
        "id": 391552527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694974870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391535087\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391511093\">said</a>:</p>\n<blockquote>\n<p>As we discussed somewhere else, can we force <code>theorem</code>s to have a docstring? And if they don't have one, give a warning \"<code>theorem</code> is reserved to important (named) results, and therefore should be explained by a docstring. For lesser results, use <code>lemma</code>.\".</p>\n</blockquote>\n<p>wouldn't we want to advocate for both <code>theorem</code>/<code>lemma</code> to be core Lean in that case?</p>\n</blockquote>\n<p>We can just override the <code>theorem</code> macro mathlib-wise.</p>",
        "id": 391556474,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694977355
    },
    {
        "content": "<p>I'm not sure what value \"<code>theorem</code> must have docstrings, <code>lemma</code> doesn't need to\" provides that \"use <code>theorem</code> everywhere, put docstrings on important results\" doesn't</p>",
        "id": 391556904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694977492
    },
    {
        "content": "<p>We can have them tagged with a <code>theorem</code> attribute and collect them (or at least their number) on some webpage?</p>",
        "id": 391558936,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694978084
    },
    {
        "content": "<p>I think that would be interesting for cross-library comparisons because mathlib has an order of magnitude more lemmas than eg Isabelle.</p>",
        "id": 391559252,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694978187
    },
    {
        "content": "<p>Probably this is obvious from my previously expressed biases, but I would love to simply remove <code>lemma</code>. It it noise, and as Mario says introduces a split in the ecosystem for apparently very little gain.</p>",
        "id": 391585978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694993234
    },
    {
        "content": "<p>It is confusing as a noob that people (and some docs/tooling?) talk about lemmas but the only thing that exists in the language is theorem. If we think in terms of an API, my intuition is that the theorems are the public-facing API, and the lemmas are the extra things that needed to be implemented to make that work, or to make it work more nicely. I agree with people who are saying that if both lemma and theorem are to co-exist, that there should be some language-level difference between them, or else the distinction may as well be by convention or an attribute or something.</p>",
        "id": 391664571,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695031893
    },
    {
        "content": "<p>My preference:</p>\n<ul>\n<li>keep both, for socialogical reasons</li>\n<li>if we really need to sacrifice one of them, then please remove <code>theorem</code>. Upgrading every stupid lemma to a theorem could very well be seen as pretentious. But downgrading every famous theorem to a lemma might lead to a nice chuckle in the audience.</li>\n</ul>",
        "id": 391681328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695037810
    },
    {
        "content": "<p>The issue for mathematicians is that <code>a + c = b + c -&gt; a = b</code> really is not a theorem to them, it is a triviality and we have a good name for these. From Wikipedia: \"Generally, an assertion that is explicitly called a theorem is a proved result that is not an immediate consequence of other known theorems. Moreover, many authors qualify as theorems only the most important results, and use the terms lemma, proposition and corollary for less important theorems. \"</p>\n<p>I am very unclear about how to weight this sociological issue against the objection from the CS side about dialects of the language, an objection which to me sounds frivolous but it's being made by people I trust.</p>",
        "id": 391681747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695037953
    },
    {
        "content": "<blockquote>\n<p>Upgrading every stupid lemma to a theorem could very well be seen as pretentious.</p>\n</blockquote>\n<p>The thing is, <em>we already did this</em> when porting, and no one seems to have complained. The documentation labels every stupid lemma as a <code>theorem</code> anyway.</p>",
        "id": 391682345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695038154
    },
    {
        "content": "<p>Nobody in our community complained. Because we wanted to get the port done.</p>",
        "id": 391682503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695038196
    },
    {
        "content": "<p>The lean 3 documentation also never showed the difference between <code>lemma</code> and <code>theorem</code></p>",
        "id": 391682609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695038234
    },
    {
        "content": "<p>I'd claim that people outside our community would look at the docs not the code</p>",
        "id": 391682649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695038248
    },
    {
        "content": "<p>I think people would understand that this is a programming language which has chosen the keyword <code>theorem</code> to represent \"A proposition which has been proven true\", and that to a computer without the aesthetics and deep understanding of a human, there is no difference between a theorem and a lemma.</p>",
        "id": 391682798,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695038296
    },
    {
        "content": "<p>Whenever I'm looking at Lean stuff with an experienced mathematician who doesn't know Lean, I apologize when we see a <code>theorem blah_blah_triviality ...</code></p>",
        "id": 391682818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695038304
    },
    {
        "content": "<p>...and the explanation is what Bolton just posted.</p>",
        "id": 391682910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695038334
    },
    {
        "content": "<p>There was a time when mathlib called every field/topological space/group/metric space/ring/vector space/etc <code>alpha</code>, or when that was taken it used <code>beta</code>.</p>",
        "id": 391683027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695038382
    },
    {
        "content": "<p>We stopped doing that, for pretty similar reasons.</p>",
        "id": 391683049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695038394
    },
    {
        "content": "<p>To be clear, I also think it would be fine to keep using both. It's not like we're talking about just using <code>def</code> for everything, even though that's semantically equivalent too.</p>",
        "id": 391683654,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695038559
    },
    {
        "content": "<p>I see no point using both if the choice between them is random, as it currently is for the majority of statements. We still have to explain to mathematicians why we wrote <code>theorem</code>, but the answer is the less satisfying \"oh, it's just a mess that is too big to clean up\"</p>",
        "id": 391683833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695038623
    },
    {
        "content": "<p>Or if we decide we're going to reset to <code>lemma</code> everywhere in mathlib (which I think is better than doing nothing), and start marking significant results, then the explanation for <code>theorem my_trivial_result</code> becomes \"oh, that lemma comes from core/Std and &lt;Bolton's explanation&gt;\"</p>",
        "id": 391684129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695038716
    },
    {
        "content": "<p>Hopefully, mathematicians will encounter lemmas from Core/Std less often.</p>",
        "id": 391684463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695038825
    },
    {
        "content": "<p>Further, in the case we implement my suggestion (override mathlib-wise <code>theorem</code> to be a macro tagging the declaration with a <code>@[theorem]</code> attribute, and then use that attribute to display declarations as either <code>theorem</code> or <code>lemma</code> in the docs), then <code>theorem</code>s from Core/Std will actually not have been tagged with <code>@[theorem]</code> and therefore appear as <code>lemma</code>s in the mathlib docs.</p>",
        "id": 391684871,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695038970
    },
    {
        "content": "<p>So <code>lemma</code> means <code>theorem</code> and <code>theorem</code> means <code>@[theorem] theorem</code>?</p>",
        "id": 391685049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695039025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391683833\">said</a>:</p>\n<blockquote>\n<p>\"oh, it's just a mess that is too big to clean up\"</p>\n</blockquote>\n<p>We're proud of our bold refactors of the library. I think we can clean up this mess.</p>",
        "id": 391685076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695039037
    },
    {
        "content": "<p>I think that part of the issue is also that there is no such clear distinction between theorem, lemma, corollary, proposition in maths.  There are some results that to most \"feel\" like theorems, others that are lemmas and so on, but others are murky, I would say.</p>",
        "id": 391685086,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695039040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391685049\">said</a>:</p>\n<blockquote>\n<p>So <code>lemma</code> means <code>theorem</code> and <code>theorem</code> means <code>@[theorem] theorem</code>?</p>\n</blockquote>\n<p>Precisely.</p>",
        "id": 391685121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695039054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391685086\">said</a>:</p>\n<blockquote>\n<p>I think that part of the issue is also that there is no such clear distinction between theorem, lemma, corollary, proposition in maths.  There are some results that to most \"feel\" like theorems, others that are lemmas and so on, but others are murky, I would say.</p>\n</blockquote>\n<p>I think this is particularly true for things like associativity on elliptic curves; I assume this would be considered a theorem, but because <code>add_assoc</code> is stated super generally it's just a lemma</p>",
        "id": 391685328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695039123
    },
    {
        "content": "<p>But the murkiness does not justify, in my opinion, eradicating the possibility of expressing oneself!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 391685361,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695039128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391685328\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391685086\">said</a>:</p>\n<blockquote>\n<p>I think that part of the issue is also that there is no such clear distinction between theorem, lemma, corollary, proposition in maths.  There are some results that to most \"feel\" like theorems, others that are lemmas and so on, but others are murky, I would say.</p>\n</blockquote>\n<p>I think this is particularly true for things like associativity on elliptic curves; I assume this would be considered a theorem, but because <code>add_assoc</code> is stated super generally it's just a lemma</p>\n</blockquote>\n<p>Sure, in this case, I would say that the theorem is that an elliptic curve is a projective group-scheme.</p>",
        "id": 391685519,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695039173
    },
    {
        "content": "<p><code>add_assoc</code> on an elliptic curve is a lemma, a <em>very</em> useful one!</p>",
        "id": 391685558,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695039190
    },
    {
        "content": "<p>What happens if a mathematician considers <code>powerful_result</code> a theorem, but in mathlib we prove it as a special case like <code>even_more_powerful_result 0</code>; is <code>powerful_result</code> a <code>theorem</code> or a <code>lemma</code>?</p>",
        "id": 391685599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695039206
    },
    {
        "content": "<p>Eric, I think that these are edge-cases and we may choose a convention for how to reproduce, within mathlib, exact results in the literature.  I still welcome to option to have a discussion about it, though!</p>",
        "id": 391685750,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695039254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391685361\">said</a>:</p>\n<blockquote>\n<p>But the murkiness does not justify, in my opinion, eradicating the possibility of expressing oneself!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>If we leave the possibility in, we now have to review code from newcomers who pick randomly between <code>theorem</code> and <code>lemma</code>; which means we need to write down rules for reviewing whether things are a theorem or a lemma, and reviewers have to apply these rules.</p>",
        "id": 391685901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695039308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391685599\">said</a>:</p>\n<blockquote>\n<p>What happens if a mathematician considers <code>powerful_result</code> a theorem, but in mathlib we prove it as a special case like <code>even_more_powerful_result 0</code>; is <code>powerful_result</code> a <code>theorem</code> or a <code>lemma</code>?</p>\n</blockquote>\n<p><code>corollary</code> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 391685977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695039340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391685901\">said</a>:</p>\n<blockquote>\n<p>If we leave the possibility in, we now have to review code from newcomers who pick randomly between <code>theorem</code> and <code>lemma</code>; which means we need to write down rules for reviewing whether things are a theorem or a lemma, and reviewers have to apply these rules.</p>\n</blockquote>\n<p>If <code>theorem</code> requires a docstring, then they will very quickly learn to use <code>lemma</code> almost always.</p>",
        "id": 391686146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695039390
    },
    {
        "content": "<p>I would guess the result would actually be lots of useless docstrings, especially as the lean manual is going to have pushed <code>theorem</code> quite heavily.</p>",
        "id": 391686557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695039526
    },
    {
        "content": "<p>Of course those are easy to catch in review, but a waste of everyone's time!</p>",
        "id": 391686639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695039553
    },
    {
        "content": "<p>Eric, do you really think this will happen if we implement the following suggestion of mine as well?<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391511093\">said</a>:</p>\n<blockquote>\n<p>As we discussed somewhere else, can we force <code>theorem</code>s to have a docstring? And if they don't have one, give a warning \"<code>theorem</code> is reserved to important (named) results, and therefore should be explained by a docstring. For lesser results, use <code>lemma</code>.\".</p>\n</blockquote>",
        "id": 391686738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695039593
    },
    {
        "content": "<p>Nah, if the linter tells you to use <code>lemma</code> or write a docstring, I'm sure most people will choose the easy option</p>",
        "id": 391686848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1695039616
    },
    {
        "content": "<p>People are lazy, Eric, and we can leverage it. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 391686936,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695039646
    },
    {
        "content": "<p>/poll What should we do?</p>\n<ul>\n<li>Replace all <code>theorem</code>s with <code>lemma</code>s and introduce a stricter theorem as described</li>\n<li>Replace all <code>lemma</code>s with <code>theorem</code> and eliminate <code>lemma</code> from mathlib</li>\n<li>Do nothing, the status quo is fine</li>\n</ul>",
        "id": 391687553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695039855
    },
    {
        "content": "<p>I'm really torn on this issue. As a mathematician, the choice in my mind is trivial: use both and make <code>theorem</code> require a docstring and use it for named/important theorems (corollary and other alternatives I think are not necessary). However, I also feel a very strong pull to avoid deviating from the rest of the Lean ecosystem; I think there is value in cohesiveness. On the other hand, maybe we'd be setting a precedent.</p>",
        "id": 391696550,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695042655
    },
    {
        "content": "<p>We could remain consistent with <code>Std</code> if we had <code>theorem</code>/<code>real_theorem</code> instead of <code>lemma</code>/<code>theorem</code>, but I doubt anyone wants that!</p>",
        "id": 391698992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695043393
    },
    {
        "content": "<p>I think cohesiveness is nice, but there are already many many other reasons why code from mathlib cannot always be copy-pasted into <code>Std</code> so I don't really see a difference between this situation and <code>irreducible_def</code> for example. If <code>lemma</code> was roughly just a macro for <code>@[lemma] theorem</code> and we had a linter for docstrings on all theorems that don't have that attribute, then we wouldn't be overriding the theorem keyword in any way, simply adding an extension.</p>",
        "id": 391703367,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695044665
    },
    {
        "content": "<p>(it would be very nice to have a tool that automatically elaborates all steps (or maybe just the macros) defined in a subset of imported files (but no others) and prints the result, which could be used as a de-mathlibifier, I've no idea how feasible that is in practice though)</p>",
        "id": 391704121,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695044875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391685977\">said</a>:</p>\n<blockquote>\n<p><code>corollary</code> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>\n</blockquote>\n<p>Coq apparently also has <code>Remark</code>, <code>Fact</code>, <code>Corollary</code>, <code>Proposition</code></p>",
        "id": 391705575,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695045286
    },
    {
        "content": "<p>I think one issue about allowing multiple names for the same thing is that one person's theorem is another person's lemma. Although mathematically I'm slightly uncomfortable, I'm going to follow Scott and Mario and vote for killing lemma, because they seem to think that this is important, and at the end of the day I don't think I really care. The fact that Mario is so vehemently anti two names for the same thing is in particular something which worries me.</p>",
        "id": 391732529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695053147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391681747\">said</a>:</p>\n<blockquote>\n<p>The issue for mathematicians is that <code>a + c = b + c -&gt; a = b</code> really is not a theorem to them, it is a triviality </p>\n</blockquote>\n<p>And as all trivialities, it is quite false as quoted…</p>",
        "id": 391732973,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695053288
    },
    {
        "content": "<p>Well, there are of course some obvious assumptions which I omitted :-)</p>",
        "id": 391733496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695053479
    },
    {
        "content": "<p>For a trivial theorem with fewer assumptions, we can also consider <code>a = a</code>.</p>",
        "id": 391734991,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695054024
    },
    {
        "content": "<p>But <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=rfl#doc\">docs#rfl</a> is a <code>def</code> (!!) <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 391740175,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695055905
    },
    {
        "content": "<p>Apparently the <em>truly</em> important theorems get upgraded to that status. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 391740311,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695055944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391686848\">said</a>:</p>\n<blockquote>\n<p>Nah, if the linter tells you to use <code>lemma</code> or write a docstring, I'm sure most people will choose the easy option</p>\n</blockquote>\n<p>Particularly if the linter disallows empty or trivial docstrings, and if the IDE has a code refactoring action to \"fix\" the undocumented theorem as a lemma.</p>",
        "id": 391754267,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695061521
    },
    {
        "content": "<p>The Rust tooling is excellent IMHO at integrating the compiler and linting errors and warnings with suggestions and IDE actions to address them. They seem to have a policy that the tooling never tells you anything is wrong without giving you an explanation for why and also at least one suggested fix. In my experience &gt;90% of the time the suggestion is correct.</p>",
        "id": 391756545,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1695062557
    },
    {
        "content": "<p>I can imagine a mathematician being pretty salty when their theorem is declared a lemma by leanprover-community.</p>",
        "id": 391771707,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695069685
    },
    {
        "content": "<p>I think the best argument for only having the one keyword is not having to argue about which one to use</p>",
        "id": 391778427,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695072735
    },
    {
        "content": "<p>Indeed, I'm not looking forward to having to bring this up when reviewing PRs.</p>",
        "id": 391778787,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1695072927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391778787\">said</a>:</p>\n<blockquote>\n<p>Indeed, I'm not looking forward to having to bring this up when reviewing PRs.</p>\n</blockquote>\n<p>That's why whatever decision we make, it should be enforced by CI as much as possible; it's much more pleasant for both parties dealing with a picky linter than a picky reviewer, even if they say the same thing!</p>",
        "id": 391778947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695073001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391705575\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lemma.20vs.20theorem/near/391685977\">said</a>:</p>\n<blockquote>\n<p><code>corollary</code> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>\n</blockquote>\n<p>Coq apparently also has <code>Remark</code>, <code>Fact</code>, <code>Corollary</code>, <code>Proposition</code></p>\n</blockquote>\n<p>By the way, lean used to as well, it originally got them from Coq. I don't think it had all of these but <code>corollary</code> existed in lean 2 IIRC. Lean has <em>scaled back</em> on synonymous theorem-introducers since then</p>",
        "id": 391946223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695139534
    }
]