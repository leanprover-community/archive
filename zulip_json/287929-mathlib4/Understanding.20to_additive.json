[
    {
        "content": "<p>I'm trying to make this lemma work (imports not minimal):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Subgroup.finset_prod_top</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Finset.prod_set_coe</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I would like this to go to <code>AddSubgroup.finset_prod_top</code>, but it instead goes to <code>AddSubgroup.finset_sum_top</code>; which is totally reasonable, but it does mean a case gets missed. I've been messing around with ignore_args and relevant_arg and it doesn't seem to help me much. Furthermore, this infomation seems to be wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> (from to_additive docstring)</span>\n<span class=\"cm\">    should have automatically added the attribute `@[to_additive_relevant_arg]` to the declaration.</span>\n<span class=\"cm\">    You can test this by running the following (where `d` is the full name of the declaration):</span>\n<span class=\"cm\">    ```</span>\n<span class=\"cm\">      #eval (do isRelevant `d &gt;&gt;= trace)</span>\n<span class=\"cm\">    ``` -/</span>\n</code></pre></div>\n<p>ctrl+f doesn't find <code>isRelevant</code>in the file (even namespaced).</p>",
        "id": 394461043,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696260758
    }
]