[
    {
        "content": "<p>I have an idea how we can merge two definitions of an indexed product of measures (finite product of σ-finite measures and an infinite product of probability measures) into one. We define the typeclass</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- todo: better name</span>\n<span class=\"kd\">class</span> <span class=\"n\">MeasureFamily</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">sigmaFinite</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SigmaFinite</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">isProbabilityMeasure</span> <span class=\"o\">:</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">cofinite</span><span class=\"o\">,</span> <span class=\"n\">IsProbabilityMeasure</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with an instance assuming <code>[Finite ι]</code> and an instance assuming <code>[∀ i, IsProbabilityMeasure (μ i)]</code>.<br>\nThen we define one instance assuming <code>[MeasureFamily μ]</code> (we use the current construction for the non-probability finite product part and another construction for the probability part) and prove lemmas about it.</p>",
        "id": 395985429,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1696986491
    },
    {
        "content": "<p>What do you think? I do understand that this is a nontrivial refactor.</p>",
        "id": 395985457,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1696986508
    },
    {
        "content": "<p>If I try it, then how should I call the new typeclass?</p>",
        "id": 395985479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1696986522
    },
    {
        "content": "<p>Restricted infinite products are a generalisation of this. Here you have infinitely many spaces of infinite measure but each is equipped with a preferred subspace of measure 1. Each element in the restricted product must be outside the preferred subspace only finitely often but the finite bad set can depend on the element. So it's a direct limit of the construction you explain above.</p>",
        "id": 396001728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696995695
    },
    {
        "content": "<p><del>What is the σ-algebra of measurable sets in this case?</del><br>\nWe can have this definition but it can be added later because it leads to a measure on a different type, not the pi type.</p>",
        "id": 396005349,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1696997891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Measure.20on.20an.20infinite.20product/near/395985479\">said</a>:</p>\n<blockquote>\n<p>If I try it, then how should I call the new typeclass?</p>\n</blockquote>\n<p><code>IsCofinitelyProbabilityMeasure</code>? Not great...</p>",
        "id": 396022840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697007571
    },
    {
        "content": "<p>That's a good idea. But do we already have the product of infinitely many probability measures?</p>",
        "id": 396025396,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697008619
    },
    {
        "content": "<p>Not yet.</p>",
        "id": 396081126,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1697028259
    }
]