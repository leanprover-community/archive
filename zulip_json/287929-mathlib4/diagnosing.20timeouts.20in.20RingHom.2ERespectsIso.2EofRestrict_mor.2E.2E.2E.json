[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ideas.20for.20speeding.20up.20CI/near/388947535\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">430</span><span class=\"bp\">.</span><span class=\"mi\">063014</span> <span class=\"n\">unusedArguments</span> <span class=\"n\">RingHom.RespectsIso.ofRestrict_morphismRestrict_iff</span>\n<span class=\"mi\">201</span><span class=\"bp\">.</span><span class=\"mi\">888680</span> <span class=\"n\">simpNF</span> <span class=\"n\">AlgebraicGeometry.StructureSheaf.isLocallyFraction_pred</span>\n<span class=\"mi\">182</span><span class=\"bp\">.</span><span class=\"mi\">304759</span> <span class=\"n\">simpNF</span> <span class=\"n\">Rep.MonoidalClosed.linearHomEquivComm_hom</span>\n<span class=\"mi\">179</span><span class=\"bp\">.</span><span class=\"mi\">932156</span> <span class=\"n\">simpNF</span> <span class=\"n\">Rep.MonoidalClosed.linearHomEquiv_hom</span>\n<span class=\"mi\">145</span><span class=\"bp\">.</span><span class=\"mi\">505241</span> <span class=\"n\">simpNF</span> <span class=\"n\">Matrix.linfty_op_nnnorm_row</span>\n<span class=\"mi\">119</span><span class=\"bp\">.</span><span class=\"mi\">100756</span> <span class=\"n\">simpNF</span> <span class=\"n\">lp.infty_coeFn_nat_cast</span>\n<span class=\"mi\">118</span><span class=\"bp\">.</span><span class=\"mi\">556040</span> <span class=\"n\">simpNF</span> <span class=\"n\">CategoryTheory.OplaxNatTrans.whiskerRight_naturality_comp_assoc</span>\n<span class=\"mi\">118</span><span class=\"bp\">.</span><span class=\"mi\">393575</span> <span class=\"n\">simpNF</span> <span class=\"n\">lp.infty_coeFn_int_cast</span>\n<span class=\"mi\">116</span><span class=\"bp\">.</span><span class=\"mi\">262702</span> <span class=\"n\">simpNF</span> <span class=\"n\">Matrix.linfty_op_norm_col</span>\n<span class=\"mi\">95</span><span class=\"bp\">.</span><span class=\"mi\">031026</span> <span class=\"n\">simpNF</span> <span class=\"n\">CategoryTheory.OplaxFunctor.bicategory_comp_naturality</span>\n<span class=\"mi\">94</span><span class=\"bp\">.</span><span class=\"mi\">551145</span> <span class=\"n\">simpNF</span> <span class=\"n\">AlgebraicGeometry.Scheme.GlueData.ι_isoCarrier_inv</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh, this one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">6000000</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">RespectsIso.ofRestrict_morphismRestrict_iff</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">RingHom.RespectsIso</span> <span class=\"bp\">@</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 388952209,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693821813
    },
    {
        "content": "<p>(Seems like the <code>erw [f.1.c.naturality_assoc, ← X.presheaf.map_comp, ← X.presheaf.map_comp, ← X.presheaf.map_comp]</code> at the end is already responsible for 5 <em>minutes</em> of compilation time here)</p>",
        "id": 388954779,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693822577
    },
    {
        "content": "<p>Do we know if it's the rewrites or the implicit rfl at the end? Is there <code>erewrite</code>?</p>",
        "id": 388955084,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693822672
    },
    {
        "content": "<p>385s in <code>rewrite</code>, 1.5s in <code>rfl</code></p>",
        "id": 388956141,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693823006
    },
    {
        "content": "<p>Everything seems to be quite miserable here, random rewrites and dsimps taking several seconds each, and then it goes really off the rails towards the end. Maybe just because of the big terms?</p>",
        "id": 388958912,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693823660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ideas.20for.20speeding.20up.20CI/near/388952209\">said</a>:</p>\n<blockquote>\n<p>Oh, this one?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">6000000</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">RespectsIso.ofRestrict_morphismRestrict_iff</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">RingHom.RespectsIso</span> <span class=\"bp\">@</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span><span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>rewrite is way too expensive in all of AG</p>",
        "id": 388979146,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693830299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ideas.20for.20speeding.20up.20CI/near/388958912\">said</a>:</p>\n<blockquote>\n<p>Everything seems to be quite miserable here, random rewrites and dsimps taking several seconds each, and then it goes really off the rails towards the end. Maybe just because of the big terms?</p>\n</blockquote>\n<p>While porting, I generated a 1/2 Gb text file just for the goal state. Too much <del>gets</del> has to get exposed for the current implementation to work.</p>",
        "id": 388980039,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693830594
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/9a0f6321a2ea75296cfbbeeedc4dfacf\">here</a> is the timing for each tactic in the proof.</p>",
        "id": 388999936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693836389
    },
    {
        "content": "<p>If you unfold the 40 second rewrite</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">784633</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">morphismRestrict_c_app</span><span class=\"o\">,</span> <span class=\"n\">Category.assoc</span><span class=\"o\">,</span> <span class=\"n\">Category.assoc</span><span class=\"o\">,</span> <span class=\"n\">Category.assoc</span><span class=\"o\">]</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>then you see...nothing of any interest. The trace is <a href=\"https://gist.github.com/kbuzzard/54cffdba7c4c880fe6bc4c1d2d364765\">here</a> and there seems to be no information about what is taking 40 seconds -- it's one of those situations where the traces don't add up (and here they don't add up <em>at all</em>, the subexpressions are only a couple of seconds in total)</p>",
        "id": 389001463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693836837
    },
    {
        "content": "<p>We might want to split this particular diagnosis off into another topic. </p>\n<p>I assume it is <code>morphismRestrict_c_app</code> that is slow and not the repeated <code>Category.assoc</code>'s?</p>",
        "id": 389001816,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1693836944
    },
    {
        "content": "<p>11 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/ideas.20for.20speeding.20up.20CI\">#mathlib4 &gt; ideas for speeding up CI</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 389066497,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693870657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">130139</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">morphismRestrict_c_app</span><span class=\"o\">]</span> <span class=\"bp\">▶</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">773864</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Category.assoc</span><span class=\"o\">,</span> <span class=\"n\">Category.assoc</span><span class=\"o\">,</span> <span class=\"n\">Category.assoc</span><span class=\"o\">]</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>Furthermore, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">86</span><span class=\"bp\">.</span><span class=\"mi\">214118</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">refine'</span> <span class=\"n\">Eq.trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Category.assoc</span> <span class=\"n\">CommRingCat</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>unfolds to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">80</span><span class=\"bp\">.</span><span class=\"mi\">402848</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span>\n                            <span class=\"n\">NonUnitalRingHom.comp</span>\n                              <span class=\"o\">(</span><span class=\"n\">RingHom.toNonUnitalRingHom</span>\n                                <span class=\"o\">(</span><span class=\"n\">X.presheaf.map</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>(the <code>let</code> is coming from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.comp#doc\">docs#RingHom.comp</a> -- is that <code>with</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/ef128c47113a367d85abef2a4e3ffde05978e091/Mathlib/Algebra/Hom/Ring.lean#L680-L681\">there</a> considered harmful?) but half of the problem there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                                                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">190391</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">X.presheaf.map</span>\n                                                              <span class=\"o\">(</span><span class=\"n\">CategoryTheory.homOfLE</span>\n                                                                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                    <span class=\"o\">(</span><span class=\"n\">IsOpenMap.functor</span>\n                                                                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                              <span class=\"n\">IsOpenMap</span>\n                                                                                <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">TopologicalSpace.Opens.inclusion</span>\n                                                                                    <span class=\"o\">((</span><span class=\"n\">TopologicalSpace.Opens.map</span>\n                                                                                          <span class=\"n\">f.val.base</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n                                                                                      <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.basicOpen</span>\n                                                                                        <span class=\"n\">Y</span> <span class=\"n\">r</span><span class=\"o\">)))))</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n                                                                        <span class=\"o\">((</span><span class=\"n\">IsOpenMap.functor</span>\n                                                                                  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                                    <span class=\"n\">IsOpenMap</span>\n                                                                                      <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">TopologicalSpace.Opens.inclusion</span>\n                                                                                          <span class=\"o\">((</span><span class=\"n\">TopologicalSpace.Opens.map</span>\n                                                                                                <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.ofRestrict</span>\n                                                                                                      <span class=\"n\">X</span>\n                                                                                                      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                                                        <span class=\"n\">OpenEmbedding</span>\n                                                                                                          <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">TopologicalSpace.Opens.inclusion</span>\n                                                                                                              <span class=\"o\">((</span><span class=\"n\">TopologicalSpace.Opens.map</span>\n                                                                                                                    <span class=\"n\">f.val.base</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n                                                                                                                <span class=\"o\">(</span><span class=\"n\">AlgebraicGeometry.Scheme.basicOpen</span>\n                                                                                                                  <span class=\"n\">Y</span>\n                                                                                                                  <span class=\"n\">r</span><span class=\"o\">)))))</span><span class=\"bp\">.</span><span class=\"n\">val.base</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n                                                                                            <span class=\"n\">U</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">op.obj</span>\n                                                                            <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"bp\">⊤</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">≤</span>\n                                                                      <span class=\"o\">(</span><span class=\"n\">IsOpenMap.functor</span>\n                                                                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                                                              <span class=\"n\">IsOpenMap</span>\n                                                                                <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">TopologicalSpace.Opens.inclusion</span>\n                                                                                    <span class=\"n\">U</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n                                                                        <span class=\"o\">(</span><span class=\"n\">Opposite.op</span>\n                                                                            <span class=\"bp\">⊤</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.29303</span> <span class=\"bp\">≫</span> <span class=\"bp\">?</span><span class=\"n\">m.29304</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 389120416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693897836
    }
]