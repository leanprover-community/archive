[
    {
        "content": "<p>The following Lean 3 code works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finrank</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">d</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Now let's translate to Lean 4 using mathport:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Finrank</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"d\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>This gives the warning <code>declaration uses 'sorry'</code> and the expected type panel indeed shows <code>p : Fin (sorryAx ℕ true + 1) → F</code>. Any idea how to fix this?</p>",
        "id": 390552023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694534726
    },
    {
        "content": "<p><code>notation3</code>?</p>",
        "id": 390552135,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534756
    },
    {
        "content": "<p>No impact.</p>",
        "id": 390552235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694534776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> didn't you run into this once? I don't remember the issue.</p>",
        "id": 390552264,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694534790
    },
    {
        "content": "<p>I suppose you don't want to go full macro?</p>",
        "id": 390552291,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534799
    },
    {
        "content": "<p>Ah, something like this rings a bell.  It probably was in a <code>WittRing</code> file.</p>",
        "id": 390552457,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534858
    },
    {
        "content": "<p>I want to port the sphere eversion project. This issue is distracting me in my fight against the Lean 4 simplifier. So I have nothing against macros, I simply want something that works.</p>",
        "id": 390552508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694534872
    },
    {
        "content": "<p>Some interaction with <code>local</code> and <code>notation</code>.</p>",
        "id": 390552516,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534874
    },
    {
        "content": "<p>Let me try to dig it up.</p>",
        "id": 390552579,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534885
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/A.20quirk.20with.20.60local.20notation.60\">This</a> is what I was thinking.  I have not checked whether it is relevant, though (but may have to leave soon, so I am putting here, just in case I disappear!)</p>",
        "id": 390552762,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534948
    },
    {
        "content": "<p><code>set_option hygiene false</code></p>",
        "id": 390552969,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694535008
    },
    {
        "content": "<p>Indeed, Kyle reached the same solution that Floris did in the other thread!</p>",
        "id": 390553212,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694535100
    },
    {
        "content": "<p>I think that Patrick of all people would like to think that he is writing hygienic code! Why do we have to turn it off?</p>",
        "id": 390553752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694535266
    },
    {
        "content": "<p>you just need to turn it off in the notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"d\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 390553853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694535296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Did you test that?</p>",
        "id": 390553923,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694535316
    },
    {
        "content": "<p>yes</p>",
        "id": 390553938,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694535321
    },
    {
        "content": "<p>For me I get \"unknown identifier <code>d</code>\" later on</p>",
        "id": 390553996,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694535341
    },
    {
        "content": "<p>oh I'm wrong.</p>",
        "id": 390554009,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694535347
    },
    {
        "content": "<p>Really?  I thought that the local disappeared after the <code>in</code>.</p>",
        "id": 390554014,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694535347
    },
    {
        "content": "<p>autoimplicit is biting me again!</p>",
        "id": 390554034,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694535353
    },
    {
        "content": "<p>It's good to know that notation3 fails here too. It might be fixable there...</p>\n<p>I <em>think</em> the problem is that the <code>F</code> in the definition of the local notation is different from the <code>F</code> when the variables get introduced later. They need to have way to link them up.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> \"hygiene\" refers to whether substitution is safe from accidental name capturing. It's a feature that's being turned off, not a check that's being turned off. Turning it off makes it so that <code>F</code> in the notation can refer to the <code>F</code> that gets introduced when <code>def</code> processes all the <code>variable</code>s. We <em>want</em> <code>F</code> in the notation to refer to the newly bound <code>F</code>.</p>",
        "id": 390554409,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694535477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Here's a hopefully illuminating example of what hygiene is about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"wrap \"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n<span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">wrap</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n<span class=\"c1\">-- 2</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"wrap' \"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n<span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">wrap'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">()</span>\n<span class=\"c1\">-- ()</span>\n</code></pre></div>\n<p>The first one expands to effectively <code>let x := 2; (fun (x' : Unit) =&gt; x) ()</code>, but the second expands to <code>let x := 2; (fun (x : Unit) =&gt; x) ()</code>.</p>",
        "id": 390555128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694535733
    },
    {
        "content": "<p>Thank everyone. Indeed it seems disable hygiene helps here.</p>",
        "id": 390557956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694536781
    },
    {
        "content": "<p>Would it make sense to ask for <code>local notation</code> to be unhygienic <em>with respect to objects already in the local scope</em>? More generally, is there a way to say that a notation is unhygienic in some argument but hygienic for others?</p>",
        "id": 390688359,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694599361
    },
    {
        "content": "<p>What's been puzzling me is that there are many other examples in mathlib of using <code>local notation</code> to capture a variable, but somehow this one fails. This might actually be a problem with the <code>variable</code> command and how it elaborates binders.</p>\n<p>I've noticed that while Patrick's example fails and inserts a <code>sorry</code>, this is OK:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Finrank</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"d\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 390699399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694603523
    },
    {
        "content": "<p>Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"Finx\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Finx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Finx</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Declaration uses sorry:</span>\n<span class=\"kd\">def</span> <span class=\"n\">val'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 390699774,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694603668
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Here's some sort of interaction between how <code>variable</code> works, macros, and hygiene that leads to a surprising result. If you turn off <code>hygiene</code> for the notation then <code>val'</code> elaborates without <code>sorry</code>.)</p>",
        "id": 390700342,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694603887
    },
    {
        "content": "<p>Oh okay, so actually the macro system is smart enough as long as we don't use variables</p>",
        "id": 390701303,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694604291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20introduces.20sorry/near/390699774\">said</a>:</p>\n<blockquote>\n<p>Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n</blockquote>\n<p>Thanks, <a href=\"https://github.com/leanprover/lean4/pull/2535\">lean4#2535</a></p>",
        "id": 390718973,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694610255
    }
]