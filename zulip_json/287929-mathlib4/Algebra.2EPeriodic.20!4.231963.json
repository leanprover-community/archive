[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1963\">!4#1963</a>, Lean fails to find <code>[Module α α]</code> in many lemmas. Why can it happen? How can I debug it?</p>",
        "id": 325946805,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675597928
    },
    {
        "content": "<p>My guess is that it's looking for <code>@Module α α Ring.toSemiring _</code> but finds <code>@Module α α CommSemiring.toSemiring _</code> or a more complex version thereof. What <code> α </code> causes the issue?</p>",
        "id": 325947249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675598092
    },
    {
        "content": "<p>It's a <code>DivisionRing</code></p>",
        "id": 325947343,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675598144
    },
    {
        "content": "<p>The following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">@</span><span class=\"n\">Periodic.const_inv_smul₀</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">Semiring.toModule</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 325947370,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675598161
    },
    {
        "content": "<p>But it's a workaround</p>",
        "id": 325947468,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675598187
    },
    {
        "content": "<p>Does <code>example [DivisionRing a] : Module a a := inferInstance</code> at least work?</p>",
        "id": 325947540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675598215
    },
    {
        "content": "<p>No, it doesn't</p>",
        "id": 325947780,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675598339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Semiring.toModule</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 325947810,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675598357
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 325947811,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675598359
    },
    {
        "content": "<p>Ouch</p>",
        "id": 325948921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675598931
    },
    {
        "content": "<p><del>I think this confirms my \"new-style structure\" hunch</del></p>",
        "id": 325949242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675599110
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails, needs</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@Module α α (@Ring.toSemiring α inst✝)</span>\n<span class=\"cm\">  (@NonUnitalNonAssocSemiring.toAddCommMonoid α</span>\n<span class=\"cm\">    (@NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring α</span>\n<span class=\"cm\">      (@NonAssocRing.toNonUnitalNonAssocRing α (@Ring.toNonAssocRing α inst✝))))</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- works, needs</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@Module α α (@CommSemiring.toSemiring α inst✝)</span>\n<span class=\"cm\">  (@NonUnitalNonAssocSemiring.toAddCommMonoid α</span>\n<span class=\"cm\">    (@NonAssocSemiring.toNonUnitalNonAssocSemiring α</span>\n<span class=\"cm\">      (@Semiring.toNonAssocSemiring α (@CommSemiring.toSemiring α inst✝))))</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Semiring.toModule</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Semiring.toModule.{u_1} {R : Type u_1} [inst✝ : Semiring R] :</span>\n<span class=\"cm\">  @Module R R inst✝</span>\n<span class=\"cm\">    (@NonUnitalNonAssocSemiring.toAddCommMonoid R</span>\n<span class=\"cm\">      (@NonAssocSemiring.toNonUnitalNonAssocSemiring R (@Semiring.toNonAssocSemiring R inst✝)))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 325949252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675599119
    },
    {
        "content": "<p>The one that works is a syntactic match, the one that fails is only a match after unfolding</p>",
        "id": 325950177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675599571
    },
    {
        "content": "<p>This could be related to <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a></p>",
        "id": 325957475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675602690
    },
    {
        "content": "<p>That also involved failure of a defeq equality which wasn't syntactic in ring theory</p>",
        "id": 325957583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675602724
    },
    {
        "content": "<p>That looks almost certainly related</p>",
        "id": 325960719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675604141
    },
    {
        "content": "<p>yeah, if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>then you can see the failure in the first example boils down to this failure :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">α</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing</span> <span class=\"n\">α</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing</span> <span class=\"n\">α</span>\n                    <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">α</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)))</span> <span class=\"bp\">▼</span>\n</code></pre></div>\n<p>and this is true by <code>rfl</code>.</p>",
        "id": 325963036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675605357
    },
    {
        "content": "<p>I added a comment on the issue.</p>",
        "id": 325988794,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675617089
    },
    {
        "content": "<p>It seems like new-style structures would indeed have had the same issue in Lean 3</p>",
        "id": 325989262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675617296
    },
    {
        "content": "<p>It seems that replacing <code>DivisionRing</code> with <code>DivisionSemiring</code> solves the problem.</p>",
        "id": 325989321,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675617313
    },
    {
        "content": "<p>It compiles.</p>",
        "id": 325991284,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675618285
    },
    {
        "content": "<p>While that change is reasonable in isolation, I think porting the rest of mathlib3 with workarounds for this issue in the remaining 70% of files would be a mistake. A lot of linear algebra and analysis is going to become very unpleasant, and removing the hacks later will likely be more work that just making problems like this as blocking and porting other things in the meantime</p>",
        "id": 325993272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675619374
    },
    {
        "content": "<p>In this case, I generalized these lemmas, so while it's a workaround, it won't backfire later.</p>",
        "id": 325995064,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675620214
    },
    {
        "content": "<p>You might have pushed off the problem to the users (if any) of whatever you changed, but I agree you probably didn't make anything worse.</p>",
        "id": 325995701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675620543
    },
    {
        "content": "<p>I think writing <code>Semiring.toModule</code> in a bunch of places would be a step too far</p>",
        "id": 325995897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675620639
    },
    {
        "content": "<p>I think that generalizing these lemmas is the right thing to do anyway.</p>",
        "id": 325996756,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675621061
    },
    {
        "content": "<p>I think we should either backport that or wait till after the port though</p>",
        "id": 326005709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675626474
    },
    {
        "content": "<p>Why? The new lemmas are backward compatible with the old ones.</p>",
        "id": 326006614,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675627139
    }
]