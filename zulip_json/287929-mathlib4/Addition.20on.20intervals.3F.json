[
    {
        "content": "<p>Would it make sense to provide <code>Add</code> instances for <code>@Set.Ioc T</code>(when <code>T</code> has an addition that is compatible with the order structure) etc., such that <code>Set.Ioc a b + Set.Ioc c d = Set.Ioc (a + c) (b + d)</code>? (And for <code>Set</code>s and <code>Finset</code>s, too...)<br>\nMaybe <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> has this somewhere already?</p>",
        "id": 401615008,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699797034
    },
    {
        "content": "<p>That's not going to be true for Nat, because of the discreteness (x&gt;a and y&gt;c implies x+y can't be a+c+1)</p>",
        "id": 401615060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699797099
    },
    {
        "content": "<p>True. So this would need more assumptions. (But it would work for <code>Icc</code>, for example, I guess.)</p>",
        "id": 401615138,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699797149
    },
    {
        "content": "<p>Do we not already have some kind of addition on sets? In locale Pointwise, I think. Adding another meaning for it seems confusing (or is this just a theorem about intervals under this addition?)</p>",
        "id": 401616266,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699798166
    },
    {
        "content": "<p>I'm confused by your question; do you mean an <code>HAdd</code> instance?</p>",
        "id": 401616489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699798380
    },
    {
        "content": "<p>OK; I had forgotten about Pointwise.<br>\nI was thinking of something like <code>Ioc a b + Ioc b d = Ioc (a+c) (b+d)</code> with pointwise addition on the left. This seems to type-check with <code>open Pointwise</code>, but it looks like the statement (over the reals, say) is not there.</p>",
        "id": 401616490,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699798380
    },
    {
        "content": "<p><code>Ioc a b + Ioc b d = Ioc (a+c) (b+d)</code> already typechecks today, the addition already exists (in <code>scoped Pointwise</code>)</p>",
        "id": 401616508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699798407
    },
    {
        "content": "<p>OK, but the statement is not in Mathlib (at least, <code>exact?</code> does not find it).</p>",
        "id": 401616615,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699798495
    },
    {
        "content": "<p>I'm surprised I can't even find the Icc one</p>",
        "id": 401616660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699798549
    },
    {
        "content": "<p>I wouldn't be surprised if this was one of those theorems which was false for general additive ordered monoids. For example {0,2,3,4,...} is an additive monoid but [0,2]+[0,2] misses 3.</p>",
        "id": 401617616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699799500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634838\">Qin Yuxuan</span> has marked this topic as resolved.</p>",
        "id": 401617618,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699799503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634838\">Qin Yuxuan</span> has marked this topic as unresolved.</p>",
        "id": 401617619,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699799509
    },
    {
        "content": "<p>[Edit: proved it]</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Intervals.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.PushNeg</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Pointwise</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">2</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">+</span> <span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>               <span class=\"o\">:=</span> <span class=\"n\">Set.empty_add</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"n\">Set.Icc</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">Mathlib.Tactic.PushNeg.empty_ne_eq_nonempty</span><span class=\"o\">,</span> <span class=\"n\">Set.nonempty_Icc</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">one_le_two</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 401617670,
        "sender_full_name": "Richard Copley",
        "timestamp": 1699799532
    },
    {
        "content": "<p>Yeah that too :-)</p>",
        "id": 401617677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699799552
    },
    {
        "content": "<p>I see. It is a can with a lot of worms...</p>",
        "id": 401617786,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699799664
    },
    {
        "content": "<p>Probably fine for groups assuming the intervals are nonempty. Groups give you subtraction which saves you from many pathologies.</p>",
        "id": 401617927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699799811
    },
    {
        "content": "<p>I'd expect us to have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Icc_mul_Icc_subset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">HMul.hMul</span> <span class=\"n\">LE.le</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Function.swap</span> <span class=\"n\">HMul.hMul</span><span class=\"o\">)</span> <span class=\"n\">LE.le</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">Set.Icc</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">⊆</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hya</span><span class=\"o\">,</span> <span class=\"n\">hyb</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">hzc</span><span class=\"o\">,</span> <span class=\"n\">hzd</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">mul_le_mul'</span> <span class=\"n\">hya</span> <span class=\"n\">hzc</span><span class=\"o\">,</span> <span class=\"n\">mul_le_mul'</span> <span class=\"n\">hyb</span> <span class=\"n\">hzd</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 401617969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699799861
    },
    {
        "content": "<p>Yeah, the easy inclusion is true in huge generality and should surely be there.</p>",
        "id": 401618042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699799905
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8368\">#8368</a></p>",
        "id": 401618892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699800653
    },
    {
        "content": "<p>I worked on those lemmas in Lean 3 but I failed to find the correct generality for the reverse inclusion to hold. I am more ideas now though.</p>",
        "id": 401625532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699806972
    },
    {
        "content": "<p>The easy way out would be to prove it for ordered groups and also for Nat, and then wait to see if any other use cases actually arise (and I suspect they won't)</p>",
        "id": 401627112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699808610
    },
    {
        "content": "<p>What's your proof for ordered groups? I have a proof for linear ordered monoids with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasExistsAddOfLe#doc\">docs#HasExistsAddOfLe</a>, but it's quite unsatisfying given that this property is clearly closed under products.</p>",
        "id": 401634289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699816278
    },
    {
        "content": "<p>I assume we only care about <code>Icc</code> on products, because <code>Ico</code> is poorly behaved?</p>",
        "id": 401634356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699816361
    },
    {
        "content": "<p>Yes, at least for now</p>",
        "id": 401634387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699816414
    },
    {
        "content": "<p>Oh I was assuming the groups are linearly ordered! So you know strictly more than me.</p>",
        "id": 401638168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699820737
    },
    {
        "content": "<p>Nono Kevin, knowledge isn't a linear order. That's the whole point. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 401638461,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699821080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Addition.20on.20intervals.3F/near/401618892\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8368\">#8368</a></p>\n</blockquote>\n<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 405802516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701688652
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> again; it's a shame to have a Zulip thread about something but then let the PR stagnate</p>",
        "id": 407279882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702313347
    },
    {
        "content": "<p>I started the thread here, but I'm out of my depth regarding this part of Mathlib...</p>",
        "id": 407295185,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702318432
    }
]