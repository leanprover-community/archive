[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n\n<span class=\"n\">Stack</span> <span class=\"n\">overflow</span> <span class=\"n\">detected.</span> <span class=\"n\">Aborting.</span>\n</code></pre></div>\n<p>Anyone else hitting this / know how to debug it?</p>",
        "id": 350702511,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681805587
    },
    {
        "content": "<p>Is this happening on mathlib4 master?</p>",
        "id": 350775820,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681823310
    },
    {
        "content": "<p>FWIW, I just ran this command in a fresh copy of mathlib4 with no issues.</p>",
        "id": 350776205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681823388
    },
    {
        "content": "<p>Yeah, but also on an older branch where I'm sure it worked before. Must be something on my side, but I don't know where to start looking</p>",
        "id": 350790661,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681826401
    },
    {
        "content": "<p>You can try placing <code>dgb_trace</code> calls in the <code>cache</code> code to find where the stack overflow is being triggered. This is one of the advantages of having <code>cache</code> implemented in Lean (easiness of debugging+maintaining the code)</p>",
        "id": 350809153,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681830366
    },
    {
        "content": "<p>Looks like it's happening in <code>RBTree.ofList</code> in <code>getLocalCacheSet</code> with a list of 175827 paths</p>",
        "id": 350818646,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681832541
    },
    {
        "content": "<p>Maybe your local cache is too big? Try <code>lake exe cache clean</code> to throw away a bunch of old files</p>",
        "id": 350828677,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681834828
    },
    {
        "content": "<p>By the way, the definition of <code>RBTree.ofList</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[specialize]</span> <span class=\"kd\">def</span> <span class=\"n\">ofList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span> <span class=\"n\">cmp</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">mkRBTree</span> <span class=\"bp\">..</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">ofList</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>which isn't tail recursive. If you're ok with inserting things in the opposite order, the function could be switched to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RBTree.fromList#doc\">docs4#RBTree.fromList</a> which is.</p>",
        "id": 350831970,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681835549
    },
    {
        "content": "<p>That's a nice one! Thanks Kyle. <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> feel free to switch to <code>fromList</code>.</p>\n<p>Btw, why are there <code>ofList</code> and <code>fromList</code>? I think the current <code>ofList</code> should be purged and <code>fromList</code> should be renamed to <code>ofList</code> to keep up with other Lean 4 names</p>",
        "id": 350834117,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681836054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/stack.20overflow.20in.20cache.20get/near/350828677\">said</a>:</p>\n<blockquote>\n<p>Maybe your local cache is too big? Try <code>lake exe cache clean</code> to throw away a bunch of old files</p>\n</blockquote>\n<p>Is this the kind of command which I can do randomly from time to time without fear of breaking anything (in the sense that I can always <code>lake exe cache get</code> on a branch to get any caches back)?</p>",
        "id": 350850924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681840642
    },
    {
        "content": "<p>ooh I have 6 gigs which I didn't have 10 seconds ago</p>",
        "id": 350851151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681840696
    },
    {
        "content": "<p>Nice. <a href=\"https://github.com/leanprover-community/mathlib4/pull/3507\">!4#3507</a> fixes the issue for me.</p>",
        "id": 350851813,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681840905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/stack.20overflow.20in.20cache.20get/near/350850924\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/stack.20overflow.20in.20cache.20get/near/350828677\">said</a>:</p>\n<blockquote>\n<p>Maybe your local cache is too big? Try <code>lake exe cache clean</code> to throw away a bunch of old files</p>\n</blockquote>\n<p>Is this the kind of command which I can do randomly from time to time without fear of breaking anything (in the sense that I can always <code>lake exe cache get</code> on a branch to get any caches back)?</p>\n</blockquote>\n<p>Yes, <code>cache clean</code> discards everything that's not potentially used by your current branch state. And if you do <code>cache clean!</code> then it just wipes your cache files completely, regardless of how useful they are.</p>\n<p>Both options are safe and don't compromise <code>cache get</code>/<code>cache get!</code>. The immediate consequence on that regard is that you might need to redownload some files, but this is expected ofc</p>",
        "id": 350852905,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1681841192
    }
]