[
    {
        "content": "<p>I'm porting the definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.cover_dense.types.pushforward_family\">docs#category_theory.cover_dense.types.pushforward_family</a> . A little before it in the file there's an <code>include H</code> which includes a hypothesis <code>(H : CoverDense K G)</code> which is almost always going to be there in practice but is not actually needed in the definition, and of course Lean 4 spots this because the hypothesis is not included in the definition in the ported file, and now I have a whole bunch of broken uses of this function because they're all including this superfluous <code>H</code>. </p>\n<p>If I do nothing, i.e. remove <code>H</code> from the definition, then this will change the type of the declaration which of course might in theory give rise to problems later on, but in fact this declaration is only ever used in this file (this file isn't a leaf, it's imported in algebraic geometry, but the declaration itself is never used). Keeping the type of the declaration exactly how it is in mathlib3 will involve stating many of the variables used in it as inputs to the definition (to keep things in the right order; there are many variables declared after the <code>include</code>) but of course this is not the end of the world. I'm just wondering whether I really need to do this though. I'm tempted instead to let Lean 4 just tell me where I need <code>H</code> and where I don't, this sounds like a better solution to me. Is this within the bounds of a sensible idea?</p>",
        "id": 357843480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683892191
    },
    {
        "content": "<p>Have you tried removing <code>H</code> from the def in mathlib3 and seeing what breaks?</p>",
        "id": 357846629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683892835
    },
    {
        "content": "<p>Nothing breaks at all: <a href=\"https://github.com/leanprover-community/mathlib/pull/19002\">#19002</a> . <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> or <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> do you have any comments about this change in the definition of <code>pushforward_family</code>? We no longer assume <code>CoverDense K G</code>. I propose porting the file in this form.</p>",
        "id": 357936370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683910671
    },
    {
        "content": "<p>If is passes CI, please kick it on the queue (-;</p>",
        "id": 357936621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683910726
    },
    {
        "content": "<p>It built locally.</p>",
        "id": 357936826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683910779
    },
    {
        "content": "<p>LGTM!</p>",
        "id": 357937035,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683910818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> just a heads-up: I realised that by actually just using <code>include</code> and <code>omit</code> precisely when <code>H</code> was needed I could keep the exact order of the inputs, so I pushed some more. Let's see if it compiles (it should do)</p>",
        "id": 357950796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683914236
    }
]