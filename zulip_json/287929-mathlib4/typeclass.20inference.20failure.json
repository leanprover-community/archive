[
    {
        "content": "<p>I can't fix this typeclass inference failure (which worked in mathlib3) with either etaExperiment or universe annotations. What other tricks are available?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.ConcreteCategory.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u‚ÇÅ</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">ReflectsLimits.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">forget.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Limits.idReflectsLimits</span> <span class=\"c1\">-- works, and this is an instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ReflectsLimits.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">forget.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Limits.idReflectsLimits</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>The corresponding Lean 3 code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u‚ÇÅ</span>\n\n<span class=\"c1\">-- all works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">reflects_limits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span> <span class=\"c1\">-- Try this: exact limits.id_reflects_limits</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">reflects_limits.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">forget.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">infer_instance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 354840507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682937372
    },
    {
        "content": "<p>OK so right now I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- porting note: these were all inferred in mathlib3</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">Limits.idReflectsLimits</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PreservesColimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">Limits.idPreservesColimits</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PreservesLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">Limits.idPreservesLimits</span>\n</code></pre></div>\n<p>in a porting file (which fixes the short term problem) and am wondering if this is OK as a long term fix.</p>",
        "id": 354843721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682938362
    },
    {
        "content": "<p>I think it is ok to define these instances.</p>",
        "id": 354845926,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1682939036
    },
    {
        "content": "<p>My worry is that there is some kind of underlying problem which we're glossing over.</p>",
        "id": 354846106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682939069
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>Tracing the instance synthesis, shows  Lean finds nothing and immediately fails for <code>forget</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">‚ùå</span> <span class=\"n\">CategoryTheory.Limits.ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"bp\">‚ñº</span>\n  <span class=\"o\">[]</span> <span class=\"n\">no</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"n\">CategoryTheory.Limits.ReflectsLimitsOfSize</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"bp\">‚ñº</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 354848732,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682939843
    },
    {
        "content": "<p>Oh lol I hadn't engaged my brain :-) Of course it's just the identity functor! I was too busy squashing errors in a porting file to think about what was actually happening.</p>",
        "id": 354850249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682940320
    },
    {
        "content": "<p>So this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">delta</span> <span class=\"n\">forget</span> <span class=\"n\">ConcreteCategory.Forget</span> <span class=\"n\">ConcreteCategory.types</span><span class=\"bp\">;</span> <span class=\"n\">infer_instance</span><span class=\"bp\">;</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and I guess then the question is why Lean 3 was doing this automatically and Lean 4 isn't, and whether this should be fixed rather than just adding the instances I personally need to get one file compiling.</p>",
        "id": 354851909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682940847
    },
    {
        "content": "<p><code>forget</code> is marked <code>@[reducible]</code> and this was perhaps enough for Lean 3 typeclass inference but not for Lean 4?</p>",
        "id": 354853428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682941288
    },
    {
        "content": "<p>That would be my guess</p>",
        "id": 354853666,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682941360
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">forget'</span> <span class=\"o\">:=</span> <span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget'</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 354854170,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682941508
    },
    {
        "content": "<p>Hmm. This is also ok</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">forget''</span> <span class=\"o\">:=</span> <span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">ReflectsLimits</span> <span class=\"o\">(</span><span class=\"n\">forget''</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 354854873,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682941749
    },
    {
        "content": "<p>the real example needs to unfold more :-/</p>",
        "id": 354855268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682941917
    }
]