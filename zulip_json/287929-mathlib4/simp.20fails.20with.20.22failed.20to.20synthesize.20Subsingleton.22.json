[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/tree/eric-wieser%2Fsimp-typeclass-failure\">branch#eric-wieser/simp-typeclass-failure</a> (<a href=\"https://github.com/leanprover-community/mathlib4/commit/64e60c4ae32ec04bda66827879e5c17241c5d5a6\">this commit</a> triggers the failure), I have a <code>simp</code> tactic that fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">CliffordAlgebra</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What's going on here? Why is simp trying to synthesize this instance?</p>",
        "id": 393339126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695766653
    },
    {
        "content": "<p>Could it be something to do with this?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.Tactic.simp.unify] @eq_self:1000, failed to unify\n      ?a = ?a\n    with\n      ↑(TensorProduct.AlgebraTensorModule.map LinearMap.id\n              (LinearMap.comp (↑(LinearEquiv.symm (MulOpposite.opLinearEquiv R)))\n                (AlgHom.toLinearMap CliffordAlgebra.reverseOp)))\n          (↑(CliffordAlgebra.toBaseChange A Q) x) =\n        ↑(TensorProduct.map LinearMap.id\n              (LinearMap.comp (↑(LinearEquiv.symm (MulOpposite.opLinearEquiv R)))\n                (AlgHom.toLinearMap CliffordAlgebra.reverseOp)))\n          (↑(CliffordAlgebra.toBaseChange A Q) x)\n</code></pre></div>\n<p>(trace obtained with <code>trace.Meta.Tactic.simp</code>) <br>\nBoth terms have type <code>A ⊗[R] CliffordAlgebra Q</code>.</p>",
        "id": 393341030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695767478
    },
    {
        "content": "<p>Perhaps a better answer is this: I have noticed in the past that if Lean doesn't have enough heartbeats then sometimes a calculation will just stop randomly in the middle when the error is reported, e.g. a line which used to work now magically fails because something tipped Lean over the edge. In this case I think the error message is worth ignoring. If you put <code>set_option synthInstance.maxHeartbeats 80000 in</code> before the theorem then the error goes away -- simp succeeds after all.</p>",
        "id": 393341795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695767910
    },
    {
        "content": "<p>It would be great if <code>simp</code> could include the lemma name that pushed it over the edge in the error message</p>",
        "id": 393342730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695768475
    },
    {
        "content": "<p>(I don't actually need a solution to this problem as <code>dsimp</code> already worked, but wanted to record the weirdness somewhere)</p>",
        "id": 393342837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695768527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, could you open an issue for the suggestion that <code>simp</code> reports the name of the lemma it was trying at the moment the synthesis timeout occurred?</p>",
        "id": 393343973,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695769150
    },
    {
        "content": "<p>So in this case Eric wants the report to say \"I was happily doing a bunch of typeclass stuff and the moment I ran out of heartbeats I happened to be applying <code>Subsingleton.Elim</code>, a totally irrelevant lemma which was going to fail quickly but which happened in the mean time to push a count from 19999 to 20000\"?</p>",
        "id": 393399935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695794880
    },
    {
        "content": "<p>I would rather it give me which two or three lemmas it used the most in its invokation, as that would instantly tell me what the loop is.</p>",
        "id": 393408433,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695798239
    },
    {
        "content": "<p>Here there wasn't a loop, it just ran out of time and barfed what it happened to be doing the moment it did</p>",
        "id": 393408889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695798371
    },
    {
        "content": "<p>Yes, I want to know the lemma that caused the issue so that I can replace <code>simp</code> with <code>simp [-that_lemma]</code></p>",
        "id": 393414786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695800439
    },
    {
        "content": "<p>But couldn't this be a timeout in typeclass inference for a simp lemma that wasn't going to be used anyway?</p>",
        "id": 393416394,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695801059
    },
    {
        "content": "<p>Writing <code>-that_lemma</code> means it will just fail on the next one.</p>",
        "id": 393416424,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695801070
    },
    {
        "content": "<p>The fact the lemma wasn't going to be used anyway is kind of the point; I want my simp call to work, and manually skipping the lemma (s) that times out achieves that</p>",
        "id": 393417413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695801447
    },
    {
        "content": "<p>(the alternative of silencing the error internally would be much worse, as then the effect of simp would change depending on the remaining heartbeat budget)</p>",
        "id": 393417595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695801514
    }
]