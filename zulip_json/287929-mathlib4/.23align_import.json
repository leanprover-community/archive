[
    {
        "content": "<p>BTW, one of the refactors I'm going to do right after the <code>port-completed</code> tag is created is splitting some files.</p>",
        "id": 375801125,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689525648
    },
    {
        "content": "<p>So, I have a suggestion about <code>mathport</code> and <code>import</code>s:</p>\n<ul>\n<li>When <code>mathport</code> runs on an external project, it should import <code>Mathlib.*</code>, not <code>Mathbin.*</code>.</li>\n<li>When it sees an <code>import X</code>, it should <code>import</code> all files that have \"this file has been ported from X\" header.</li>\n</ul>",
        "id": 375801446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689525744
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/5940\">#5940</a> for an example.</p>",
        "id": 375801497,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689525762
    },
    {
        "content": "<p>Probably the <code>this file has been ported from X</code> should be changed to <code>#align_import X</code> if that's the case</p>",
        "id": 375801675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689525826
    },
    {
        "content": "<p>yes, <code>#align_import</code> would be great and should have been done a long time ago</p>",
        "id": 375802791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689526285
    },
    {
        "content": "<p>But also agreed that <code>Mathbin</code> instead of <code>Mathlib</code> is just noise at this point</p>",
        "id": 375803052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689526378
    },
    {
        "content": "<p>do we still need the commit hashes? We should try to update everything to match the mathlib freeze commit and then we don't need to say it</p>",
        "id": 375803062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689526381
    },
    {
        "content": "<p>I think we should keep the hashes just in case</p>",
        "id": 375803120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689526397
    },
    {
        "content": "<p>I think <code>Mathbin</code> was always unintentional, although I think there are some technical issues to fixing it because mathport is constructing files that depend on both <code>Mathlib</code> and <code>Mathbin</code></p>",
        "id": 375803191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689526433
    },
    {
        "content": "<p>The other thing to not drop is the project name</p>",
        "id": 375803279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689526459
    },
    {
        "content": "<p>So <code>#align_import data.nat.basic from leanprover_community/mathlib at abcdef123456</code> or something</p>",
        "id": 375803344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689526492
    },
    {
        "content": "<p>does that fit in 100 chars?</p>",
        "id": 375803578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689526584
    },
    {
        "content": "<p>Who cares, <code>#align</code>s don't</p>",
        "id": 375803607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689526598
    },
    {
        "content": "<p>fair</p>",
        "id": 375803620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689526604
    },
    {
        "content": "<p>And if we stopped using grep we could line-wrap it anyway</p>",
        "id": 375803657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689526619
    },
    {
        "content": "<p>If we allow using git refs there we could put <code>freeze</code> as a tag name</p>",
        "id": 375803862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689526692
    },
    {
        "content": "<p>who processes this data?</p>",
        "id": 375803933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689526726
    },
    {
        "content": "<p>The dashboard does. Anything that might want to generate links to the source code it was ported from would too</p>",
        "id": 375803995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689526756
    },
    {
        "content": "<p>Storing SHAs seems more future-proof than a tag name</p>",
        "id": 375804010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689526763
    },
    {
        "content": "<p>What should we do for split files, like the ones Yury is talking about?</p>",
        "id": 375804160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689526811
    },
    {
        "content": "<p>Actually I suppose this can just be many-to-many in general (i.e. multiple aligns to the same lean3 file in multiple lean4 files, or multiple <code>#align_import</code> declarations in one lean4 file)</p>",
        "id": 375804410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689526913
    },
    {
        "content": "<p>I don't think it'll be that far down the line before aligns are all useless anyway</p>",
        "id": 375804659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689526997
    },
    {
        "content": "<p>But even in the short term <code>#align_import</code> would avoid the grep hacks we did (that mathport doesn't include) for GCD/ZMod etc</p>",
        "id": 375804720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689527024
    },
    {
        "content": "<p>right, hence the \"we should have done this a long time ago\" part</p>",
        "id": 375804833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689527049
    },
    {
        "content": "<p>well, most of mathport is \"we should have done this from the beginning\"</p>",
        "id": 375804856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689527062
    },
    {
        "content": "<p>I'm building <code>mathport</code> locally, and <code>make build</code> gives errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">p3d47dshq83n53a97kzk0ajbp5hlh8ay</span><span class=\"bp\">-</span><span class=\"n\">pipewire</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">71</span><span class=\"bp\">-</span><span class=\"n\">jack</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">urkud</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/lean ./././Mathport/Util/String.lean -R ././. -o ./build/lib/Mathport/Util/String.olean -i ./build/lib/Mathport/Util/String.ilean -c ./build/ir/Mathport/Util/String.c --load-dynlib=./build/lib/libleanffi.so</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"n\">loading</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libleanffi.so</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">_ZN4lean15reset_heartbeatEv</span>\n</code></pre></div>",
        "id": 375839048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689542782
    },
    {
        "content": "<p>It's after <code>git clean -fdx; lake exe cache get</code></p>",
        "id": 375839610,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689543169
    },
    {
        "content": "<p>Trying with <code>git clean -ffdx</code></p>",
        "id": 375839856,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689543334
    },
    {
        "content": "<p>Same error, so it's not a leftover file from a previous build.</p>",
        "id": 375840587,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689543844
    },
    {
        "content": "<p>Is there an easy way to make this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hexsha</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Parser.Parser</span> <span class=\"n\">where</span>\n  <span class=\"n\">fn</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n    <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">40</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Parser.hexDigitFn</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n    <span class=\"n\">pure</span> <span class=\"n\">s</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">alignImport</span><span class=\"o\">)</span> <span class=\"s2\">\"#align_import \"</span> <span class=\"n\">ident</span> <span class=\"n\">ppSpace</span> <span class=\"n\">ident</span> <span class=\"s2\">\" from \"</span> <span class=\"n\">str</span> <span class=\"s2\">\" @\"</span><span class=\"n\">hexsha</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n</code></pre></div>\n<p>which errors with <code>don't know how to generate formatter for non-definition</code></p>",
        "id": 376017785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689599360
    },
    {
        "content": "<p>I don't understand <code>Parser</code> or know where to find documentation on it</p>",
        "id": 376017831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689599369
    },
    {
        "content": "<p>making parsers is a bit complicated, the subscript parser might be a good place to look</p>",
        "id": 376024626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689600586
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5966\">#5966</a> adds</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">align_import</span> <span class=\"n\">foo.bar</span> <span class=\"n\">Mathlib.Foo.Bar</span> <span class=\"k\">from</span> <span class=\"s2\">\"leanprover-community/mathlib\"</span><span class=\"bp\">@</span><span class=\"n\">bd835ef554f37ef9b804f0903089211f89cb370b</span>\n</code></pre></div>\n<p>as valid syntax</p>",
        "id": 376027076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689601041
    },
    {
        "content": "<p>I assume this will need mathport integration in some way</p>",
        "id": 376027117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689601049
    },
    {
        "content": "<p>If you put the hash in quotes, you are closer to Lake <code>require</code> syntax fwiw</p>",
        "id": 376027940,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689601173
    },
    {
        "content": "<p>The first version of this syntax didn't have the lean 4 module name, and I assume was supposed to get it from the elaborator state. Did you change the plan there?</p>",
        "id": 376029039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689601349
    },
    {
        "content": "<p>No, that was just me being stupid</p>",
        "id": 376029139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689601367
    },
    {
        "content": "<p>How do I get the module name?</p>",
        "id": 376029159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689601371
    },
    {
        "content": "<p>I think it is in CoreM</p>",
        "id": 376029293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689601399
    },
    {
        "content": "<p>What's the recommended way to search for declarations right now?</p>",
        "id": 376029796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689601485
    },
    {
        "content": "<p>My autocomple muscle memory is useless</p>",
        "id": 376029865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689601495
    },
    {
        "content": "<p>ctrl-T</p>",
        "id": 376030416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689601579
    },
    {
        "content": "<p>That opens a new tab in gitpod... What's the command called?</p>",
        "id": 376030555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689601600
    },
    {
        "content": "<p>ctrl-P + <code>#</code>?</p>",
        "id": 376030729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689601623
    },
    {
        "content": "<p>\"go to symbol in workspace\"</p>",
        "id": 376030946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689601662
    },
    {
        "content": "<p><code>getMainModule</code> is what you want</p>",
        "id": 376031278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689601714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20fails/near/376029039\">said</a>:</p>\n<blockquote>\n<p>The first version of this syntax didn't have the lean 4 module name, and I assume was supposed to get it from the elaborator state. Did you change the plan there?</p>\n</blockquote>\n<p>Fixed</p>",
        "id": 376033326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689602071
    },
    {
        "content": "<p>18 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/mathport.20fails\">#mathlib4 &gt; mathport fails</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 376044642,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689604000
    },
    {
        "content": "<p>My proposal here is:</p>\n<ol>\n<li>Bikeshed the syntax in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5966\">#5966</a> and merge, even though it doesn't do anything</li>\n<li>Once 1 is done, check that our scripts can handle the new header (<a href=\"https://github.com/leanprover-community/mathlib4/pull/5966\">#5966</a> switches one file to use it and fixes some obvious scripts)</li>\n<li>Once 1 is done, change the syntax to actually do something (such as store the data in a hash map)</li>\n<li>Once 2 is done, convert all the files to use the new header</li>\n<li>Once 3 and 4 are done, teach mathport to use this new information</li>\n</ol>",
        "id": 376045945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689604241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, are you in favor? I could do 2 and 4, but I'd probably need you to do 3 and 5</p>",
        "id": 376046305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689604313
    },
    {
        "content": "<p>I've put 1 on the merge queue.</p>",
        "id": 376251964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689665911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, is your intention to replace all the </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">!</span> <span class=\"n\">This</span> <span class=\"n\">file</span> <span class=\"n\">was</span> <span class=\"n\">ported</span> <span class=\"k\">from</span> <span class=\"n\">Lean</span> <span class=\"mi\">3</span> <span class=\"n\">source</span> <span class=\"n\">module</span> <span class=\"n\">algebra.modeq</span>\n<span class=\"bp\">!</span> <span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">commit</span> <span class=\"n\">a07d750983b94c530ab69a726862c2ab6802b38c</span>\n<span class=\"bp\">!</span> <span class=\"n\">Please</span> <span class=\"k\">do</span> <span class=\"n\">not</span> <span class=\"n\">edit</span> <span class=\"n\">these</span> <span class=\"n\">lines</span><span class=\"o\">,</span> <span class=\"n\">except</span> <span class=\"n\">to</span> <span class=\"n\">modify</span> <span class=\"n\">the</span> <span class=\"n\">commit</span> <span class=\"n\">id</span>\n<span class=\"bp\">!</span> <span class=\"k\">if</span> <span class=\"n\">you</span> <span class=\"k\">have</span> <span class=\"n\">ported</span> <span class=\"n\">upstream</span> <span class=\"n\">changes.</span>\n</code></pre></div>\n<p>headers with an #align_import statement, or have the #align_imports in addition to these headers. I think either is fine.</p>",
        "id": 376252451,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689666025
    },
    {
        "content": "<p>My intent is to replace the old headers</p>",
        "id": 376253029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689666188
    },
    {
        "content": "<p>I won't have time to do so today; at least, certainly not in the next 9 hours</p>",
        "id": 376253265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689666243
    },
    {
        "content": "<p>Okay. Maybe I will try after dinner. I'll leave everything in some obvious state at +9 hours. :-)</p>",
        "id": 376253426,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689666285
    },
    {
        "content": "<p>I'm trying to convince myself to write the program that does the replacement in Lean. But I think I will be lazy. :-)</p>",
        "id": 376253568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689666324
    },
    {
        "content": "<p>We shouldn't merge such a change until step 2 above is done; but we could certainly get the PR ready to go</p>",
        "id": 376253585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689666328
    },
    {
        "content": "<p>My intent was to do it via find/replace, or python if that falls: so good luck!</p>",
        "id": 376253750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689666365
    },
    {
        "content": "<p>Maybe I should ask GPT to do it for me...</p>",
        "id": 376253795,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689666377
    },
    {
        "content": "<p>Couldn't resist. GPT did great: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5979\">#5979</a>. There's a separate commit for the script and running the script.</p>",
        "id": 376260373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689668013
    },
    {
        "content": "<p>(The script contains a link to the chat, if anyone is interested. I am continually blown away at how reasonable GPT's mistakes are when writing python to an incomplete spec, and then how well it fixes each problem as you point them out.)</p>",
        "id": 376263288,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689668724
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6000\">#6000</a> fixes the <a href=\"https://leanprover-community.github.io/mathlib-port-status/out-of-sync\">#outofsync</a> comment bot</p>",
        "id": 376636401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689767812
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6003\">#6003</a> adds 2 missing <code>#align_import</code>s</p>",
        "id": 376664426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689773016
    },
    {
        "content": "<p>We should also <code>#align_import</code> tactic files so that <code>mathport</code> can translate <code>import tactic.*</code> to something useful.</p>",
        "id": 376664936,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689773098
    },
    {
        "content": "<p>And here is a list of <code>init</code> files without <code>#align_import</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Align.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">CCLemmas.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Classes</span><span class=\"bp\">/</span><span class=\"n\">Order.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Classical.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">Combinators.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Core.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Bool</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Bool</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Int</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Int</span><span class=\"bp\">/</span><span class=\"n\">DivMod.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Int</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Int</span><span class=\"bp\">/</span><span class=\"n\">Order.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">List</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Nat</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Nat</span><span class=\"bp\">/</span><span class=\"n\">Div.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Option</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Option</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Option</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Ordering</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Quot.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Rat</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Logic.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Propext.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Quot.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Set.lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">ZeroOne.lean</span>\n</code></pre></div>",
        "id": 376665226,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689773151
    },
    {
        "content": "<p>And here is a script that finds all files with <code>#align</code>s but without <code>#align_import</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">f</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"n\">git</span> <span class=\"n\">ls</span><span class=\"bp\">-</span><span class=\"n\">files</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/\\*.</span><span class=\"n\">lean</span><span class=\"bp\">`;</span> <span class=\"k\">do</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">q</span> <span class=\"n\">align_import</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">||</span> <span class=\"o\">(</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">q</span> <span class=\"bp\">'#</span><span class=\"n\">align'</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">echo</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 376665904,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689773258
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib-port-status\">#port-dashboard</a> has no support for files with multiple alignments right now</p>",
        "id": 376667390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689773529
    },
    {
        "content": "<p>We already have files with multiple alignments.</p>",
        "id": 376695102,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689778342
    },
    {
        "content": "<p>Which ones?</p>",
        "id": 376697746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689778812
    },
    {
        "content": "<p>Also, the obvious gap here is we now need to teach mathport to <em>generate</em> <code>#align_import</code> statements</p>",
        "id": 376698341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689778904
    },
    {
        "content": "<p><code>Mathlib.Analysis.Calculus.BumpFunction.*</code></p>",
        "id": 376699242,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689779082
    },
    {
        "content": "<p>where <code>*</code> is one of <code>Basic</code>, <code>InnerProduct</code>, and <code>Normed</code>.</p>",
        "id": 376699573,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689779133
    },
    {
        "content": "<p>What was the file called in Lean3?</p>",
        "id": 376704619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689780034
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/analysis/calculus/bump_function_inner\">port-status#analysis/calculus/bump_function_inner</a>: which seems to just randomly pick one of the aligned files</p>",
        "id": 376705010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689780118
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status-yaml\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status-yaml</a> only stores one mathlib4 file per mathlib3 file</p>",
        "id": 376705241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689780156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.23align_import/near/376698341\">said</a>:</p>\n<blockquote>\n<p>Also, the obvious gap here is we now need to teach mathport to <em>generate</em> <code>#align_import</code> statements</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathport/pull/250\">https://github.com/leanprover-community/mathport/pull/250</a>.</p>",
        "id": 376787523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689799671
    }
]