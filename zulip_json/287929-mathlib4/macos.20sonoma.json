[
    {
        "content": "<p>I got excited about the new snoopy watch face and it ended up with me installing the (first) public beta for MacOS Sonoma. I figured a short report would be useful to some.  </p>\n<p>Good news (so far): everything already on my machine seems to work ok (including homebrew and nix). </p>\n<p>Bad news: Linking <code>libc++.1.dylib</code> fails when compiling <code>cache</code> or <code>runLinter</code>.  I guess (I couldn't figure where this was set) <code>rpath</code> is pointing at <code>./lake-packages/**/build/lib/</code> because that was where it tried to look for the missing library.  I ended up copying the file from my nix store there and was able to do all the usual things with a fresh copy of mathlib.</p>",
        "id": 378485847,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690293481
    },
    {
        "content": "<p>That's good to know. Could you elaborate on \"linking fails\"?</p>",
        "id": 378486350,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690293573
    },
    {
        "content": "<p>Let me regenerate the error message</p>",
        "id": 378487045,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690293706
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>ld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>directory<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>option<span class=\"w\"> </span>-L/Applications/Xcode_14.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/lib\ndyld<span class=\"o\">[</span><span class=\"m\">46325</span><span class=\"o\">]</span>:<span class=\"w\"> </span>Library<span class=\"w\"> </span>not<span class=\"w\"> </span>loaded:<span class=\"w\"> </span>@rpath/libc++.1.dylib\n<span class=\"w\">  </span>Referenced<span class=\"w\"> </span>from:<span class=\"w\"> </span>&lt;4C4C4449-5555-3144-A15E-70B77DDF95AA&gt;<span class=\"w\"> </span>/Users/matt/GitHub/scratch/extra_scratch/mathlib4/build/bin/cache\n<span class=\"w\">  </span>Reason:<span class=\"w\"> </span>tried:<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/proofwidgets/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/Cli/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/Qq/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/aesop/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/std/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378487627,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690293808
    },
    {
        "content": "<p>I see, that's interesting. We do ship <code>libc++.dylib</code>, now we'd just have to find out why the same clang suddenly decides to choose a different library</p>",
        "id": 378488065,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690293883
    },
    {
        "content": "<p>Is there a difference with <code>libc++.1.dylib</code> or is that just a copy?</p>",
        "id": 378488626,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690293978
    },
    {
        "content": "<p>It's probably a symlink even</p>",
        "id": 378488712,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690293993
    },
    {
        "content": "<p>It's seems to physically be in my <code>./lake-packages/proofwidgets/build/lib</code> (lol).</p>",
        "id": 378489494,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690294135
    },
    {
        "content": "<p>uhh</p>",
        "id": 378489643,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690294165
    },
    {
        "content": "<p>That was my doing</p>",
        "id": 378489743,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690294186
    },
    {
        "content": "<p>Perhaps related: it seems the xcode version from ventura is no longer compatible with sonoma. There is a beta for the new version. I installed that plus the beta command line tools but it appeared to have no effect</p>",
        "id": 378490221,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690294264
    },
    {
        "content": "<p>The Lean toolchain should be completely separate from xcode</p>",
        "id": 378490324,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690294287
    },
    {
        "content": "<p>Which is why I'm confused that updating the OS broke this</p>",
        "id": 378490452,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690294313
    },
    {
        "content": "<p>So it should be searching in <code>./elan/toolchains/***/</code>?</p>",
        "id": 378490468,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690294317
    },
    {
        "content": "<p>Oh you are right, those paths are not even listed under \"tried\". Could you copy the failed cmdline Lake invoked and append a <code> -v</code>?</p>",
        "id": 378490977,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690294407
    },
    {
        "content": "<p>I am calling <code>lake exe cache get!</code> and <code>-v</code> seems to have no effect on the output. <code>lake exe runLinter</code> has the same behavior</p>",
        "id": 378492059,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690294584
    },
    {
        "content": "<p>I get more info if I run <code>lake -v exe cache get!</code> from a fresh clone. </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>info:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">9</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>cache\ninfo:<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/bin/leanc<span class=\"w\"> </span>-o<span class=\"w\"> </span>./build/bin/cache<span class=\"w\"> </span>./build/ir/Cache/Main.o<span class=\"w\"> </span>./build/ir/Cache/IO.o<span class=\"w\"> </span>./build/ir/Cache/Hashing.o<span class=\"w\"> </span>./build/ir/Cache/Requests.o\ninfo:<span class=\"w\"> </span>stderr:\nld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>directory<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>option<span class=\"w\"> </span>-L/Applications/Xcode_14.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/lib\ndyld<span class=\"o\">[</span><span class=\"m\">48368</span><span class=\"o\">]</span>:<span class=\"w\"> </span>Library<span class=\"w\"> </span>not<span class=\"w\"> </span>loaded:<span class=\"w\"> </span>@rpath/libc++.1.dylib\n<span class=\"w\">  </span>Referenced<span class=\"w\"> </span>from:<span class=\"w\"> </span>&lt;4C4C4449-5555-3144-A15E-70B77DDF95AA&gt;<span class=\"w\"> </span>/Users/matt/GitHub/scratch/extra_scratch/mathlib4/build/bin/cache\n<span class=\"w\">  </span>Reason:<span class=\"w\"> </span>tried:<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/proofwidgets/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/Cli/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/Qq/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/aesop/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>,<span class=\"w\"> </span><span class=\"s1\">'./lake-packages/std/build/lib/libc++.1.dylib'</span><span class=\"w\"> </span><span class=\"o\">(</span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378493204,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690294796
    },
    {
        "content": "<p>For the warning it looks like some script is generating the file path from xcode version and os version. But that doesn't exist and didn't on Ventura either</p>",
        "id": 378493799,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690294871
    },
    {
        "content": "<p>The warning is likely a red herring. Could you run</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">matt</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-07-12/bin/leanc -o ./build/bin/cache ./build/ir/Cache/Main.o ./build/ir/Cache/IO.o ./build/ir/Cache/Hashing.o ./build/ir/Cache/Requests.o -v</span>\n</code></pre></div>\n<p>?</p>",
        "id": 378495098,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295023
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/bin/clang<span class=\"w\"> </span>-I<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/include<span class=\"w\"> </span>-fstack-clash-protection<span class=\"w\"> </span>-fvisibility<span class=\"o\">=</span>hidden<span class=\"w\"> </span>-nostdinc<span class=\"w\"> </span>-isystem<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/include/clang<span class=\"w\"> </span>-o<span class=\"w\"> </span>./build/bin/cache<span class=\"w\"> </span>./build/ir/Cache/Main.o<span class=\"w\"> </span>./build/ir/Cache/IO.o<span class=\"w\"> </span>./build/ir/Cache/Hashing.o<span class=\"w\"> </span>./build/ir/Cache/Requests.o<span class=\"w\"> </span>-v<span class=\"w\"> </span>-L<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib<span class=\"w\"> </span>-L<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib/libc<span class=\"w\"> </span>-fuse-ld<span class=\"o\">=</span>lld<span class=\"w\"> </span>-L<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib/lean<span class=\"w\"> </span>-lleancpp<span class=\"w\"> </span>-lInit<span class=\"w\"> </span>-lLean<span class=\"w\"> </span>-lleanrt<span class=\"w\"> </span>-lc++<span class=\"w\"> </span>-L<span class=\"w\"> </span>/Applications/Xcode_14.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/lib<span class=\"w\"> </span>-Wno-unused-command-line-argument\nclang<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">15</span>.0.1<span class=\"w\"> </span><span class=\"o\">(</span>https://github.com/llvm/llvm-project<span class=\"w\"> </span>b73d2c8c720a8c8e6e73b11be4e27afa6cb75bdf<span class=\"o\">)</span>\nTarget:<span class=\"w\"> </span>arm64-apple-darwin23.0.0\nThread<span class=\"w\"> </span>model:<span class=\"w\"> </span>posix\nInstalledDir:<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/bin\n<span class=\"w\"> </span><span class=\"s2\">\"/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/bin/ld64.lld\"</span><span class=\"w\"> </span>-demangle<span class=\"w\"> </span>-dynamic<span class=\"w\"> </span>-arch<span class=\"w\"> </span>arm64<span class=\"w\"> </span>-platform_version<span class=\"w\"> </span>macos<span class=\"w\"> </span><span class=\"m\">14</span>.0.0<span class=\"w\"> </span><span class=\"m\">14</span>.0.0<span class=\"w\"> </span>-o<span class=\"w\"> </span>./build/bin/cache<span class=\"w\"> </span>-L/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib<span class=\"w\"> </span>-L/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib/libc<span class=\"w\"> </span>-L/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib/lean<span class=\"w\"> </span>-L/Applications/Xcode_14.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/lib<span class=\"w\"> </span>./build/ir/Cache/Main.o<span class=\"w\"> </span>./build/ir/Cache/IO.o<span class=\"w\"> </span>./build/ir/Cache/Hashing.o<span class=\"w\"> </span>./build/ir/Cache/Requests.o<span class=\"w\"> </span>-lleancpp<span class=\"w\"> </span>-lInit<span class=\"w\"> </span>-lLean<span class=\"w\"> </span>-lleanrt<span class=\"w\"> </span>-lc++<span class=\"w\"> </span>-lSystem<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib/clang/15.0.1/lib/darwin/libclang_rt.osx.a\nld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>directory<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>option<span class=\"w\"> </span>-L/Applications/Xcode_14.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/lib\n</code></pre></div>",
        "id": 378495337,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295056
    },
    {
        "content": "<p>The warning is on all MacOS versions afaik</p>",
        "id": 378495556,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295094
    },
    {
        "content": "<p>Did <code>clang</code> get upgraded with Sonoma?</p>",
        "id": 378495753,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295132
    },
    {
        "content": "<p>Yes. I think so</p>",
        "id": 378496039,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295179
    },
    {
        "content": "<p>Again, your system toolchain is completely separate from Lean's</p>",
        "id": 378496189,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295212
    },
    {
        "content": "<p>Ah ok. It ships with <code>clang</code>?</p>",
        "id": 378496498,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295276
    },
    {
        "content": "<p>Yes, see the beginning of the output</p>",
        "id": 378496620,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295291
    },
    {
        "content": "<p>Ok</p>",
        "id": 378496771,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295318
    },
    {
        "content": "<p>Oh, it's not linking that fails but loading! That makes more sense but doesn't make it easier...</p>",
        "id": 378496793,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295321
    },
    {
        "content": "<p>Yes, sorry. I should have been more clear</p>",
        "id": 378496952,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295349
    },
    {
        "content": "<p>Then I think we would need to find out what's the <em>proper</em> way of referencing libc++ on that OS. Since you have a system clang installed, could you try <code>LEAN_CC=clang lake build cache</code>?</p>",
        "id": 378498084,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295529
    },
    {
        "content": "<p><code>cache</code> builds without errors</p>",
        "id": 378498270,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295565
    },
    {
        "content": "<p>Great! And what does <code>otool -L</code> say on the produced binary?</p>",
        "id": 378498559,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295619
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>build/bin/cache:\n<span class=\"w\">    </span>@rpath/libc++.1.dylib<span class=\"w\"> </span><span class=\"o\">(</span>compatibility<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">1</span>.0.0,<span class=\"w\"> </span>current<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">1</span>.0.0<span class=\"o\">)</span>\n<span class=\"w\">    </span>/usr/lib/libSystem.B.dylib<span class=\"w\"> </span><span class=\"o\">(</span>compatibility<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">1</span>.0.0,<span class=\"w\"> </span>current<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">1319</span>.0.0<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378498584,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295625
    },
    {
        "content": "<p>Right :) . Did it actually rebuild? Could you try removing the binary and then run again with LEAN_CC?</p>",
        "id": 378499011,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295694
    },
    {
        "content": "<p>Yes, I just realized that</p>",
        "id": 378499100,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295707
    },
    {
        "content": "<p>That works!</p>",
        "id": 378499287,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295740
    },
    {
        "content": "<p>Nice, what does otool say now?</p>",
        "id": 378499383,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295759
    },
    {
        "content": "<p>It resolves to <code>/usr/lib/libc++.1.dylib</code></p>",
        "id": 378499530,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295778
    },
    {
        "content": "<p>Mmh, it sounds like <code>/usr/lib</code> used to be implicitly in the rpath but is not anymore...?</p>",
        "id": 378500190,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295886
    },
    {
        "content": "<p>Same behavior as in Ventura</p>",
        "id": 378500200,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295889
    },
    {
        "content": "<p>That was my guess but I couldn't figure who was setting that</p>",
        "id": 378500347,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690295909
    },
    {
        "content": "<p>It might simply be undocumented behavior of library resolution that has changed now</p>",
        "id": 378500878,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690295994
    },
    {
        "content": "<p>I couldn't find anyone else complaining about with it a cursory google search</p>",
        "id": 378501425,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690296073
    },
    {
        "content": "<p>Much thanks for the help!</p>",
        "id": 378503343,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690296377
    },
    {
        "content": "<p>Let's see if we can move towards an upstreamable solution here. Could you run <code>otool -D</code> on the libc++ shipped with Lean?</p>",
        "id": 378505172,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690296681
    },
    {
        "content": "<p><code>libclang-cpp.dylib</code>? or am I looking in the wrong place</p>",
        "id": 378505544,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690296740
    },
    {
        "content": "<p>Wrong place</p>",
        "id": 378505641,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690296756
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>@rpath/libc++.1.dylib\n</code></pre></div>",
        "id": 378505809,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690296784
    },
    {
        "content": "<p>Okay, then let's try changing that by running <code>install_name_tool -id /usr/lib/libc++.1.dylib</code> on that file. Does that fix relinking and loading?</p>",
        "id": 378506492,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690296886
    },
    {
        "content": "<p>Yes.</p>",
        "id": 378507808,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690297118
    },
    {
        "content": "<p>Awesome, we can do just that in CI! Thanks for the productive remote debugging session :)</p>",
        "id": 378508007,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690297156
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 378508196,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690297187
    },
    {
        "content": "<p>One more question if possible. </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/bin/leanc<span class=\"w\"> </span>-o<span class=\"w\"> </span>./build/bin/cache<span class=\"w\"> </span>./build/ir/Cache/Main.o<span class=\"w\"> </span>./build/ir/Cache/IO.o<span class=\"w\"> </span>./build/ir/Cache/Hashing.o<span class=\"w\"> </span>./build/ir/Cache/Requests.o<span class=\"w\"> </span>-v\n</code></pre></div>\n<p>expands to </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/bin/clang<span class=\"w\"> </span>-I<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/include<span class=\"w\"> </span>-fstack-clash-protection<span class=\"w\"> </span>-fvisibility<span class=\"o\">=</span>hidden<span class=\"w\"> </span>-nostdinc<span class=\"w\"> </span>-isystem<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/include/clang<span class=\"w\"> </span>-o<span class=\"w\"> </span>./build/bin/cache<span class=\"w\"> </span>./build/ir/Cache/Main.o<span class=\"w\"> </span>./build/ir/Cache/IO.o<span class=\"w\"> </span>./build/ir/Cache/Hashing.o<span class=\"w\"> </span>./build/ir/Cache/Requests.o<span class=\"w\"> </span>-v<span class=\"w\"> </span>-L<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib<span class=\"w\"> </span>-L<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib/libc<span class=\"w\"> </span>-fuse-ld<span class=\"o\">=</span>lld<span class=\"w\"> </span>-L<span class=\"w\"> </span>/Users/matt/.elan/toolchains/leanprover--lean4---nightly-2023-07-12/lib/lean<span class=\"w\"> </span>-lleancpp<span class=\"w\"> </span>-lInit<span class=\"w\"> </span>-lLean<span class=\"w\"> </span>-lleanrt<span class=\"w\"> </span>-lc++<span class=\"w\"> </span>-L<span class=\"w\"> </span>/Applications/Xcode_14.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/lib<span class=\"w\"> </span>-Wno-unused-command-line-argument\n</code></pre></div>\n<p>what is generating the flag </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>-L<span class=\"w\"> </span>/Applications/Xcode_14.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/lib\n</code></pre></div>\n<p>since everyone on MacOS gets the warning </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>ld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>directory<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>option<span class=\"w\"> </span>-L/Applications/Xcode_14.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.1.sdk/usr/lib\n</code></pre></div>",
        "id": 378515037,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690298331
    },
    {
        "content": "<p>It's probably this one, let's see: <a href=\"https://github.com/leanprover/lean4/pull/2356/commits/3a0daff81f65eebfab5969fc811c8f62b8439fe1\">https://github.com/leanprover/lean4/pull/2356/commits/3a0daff81f65eebfab5969fc811c8f62b8439fe1</a></p>",
        "id": 378523965,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690299814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> By the way, do you get any of these</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">system</span><span class=\"bp\">/</span><span class=\"n\">libsystem_kernel.dylib</span> <span class=\"n\">has</span> <span class=\"n\">version</span> <span class=\"mi\">12</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">newer</span> <span class=\"n\">than</span> <span class=\"n\">target</span> <span class=\"n\">minimum</span> <span class=\"n\">of</span> <span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>warnings on Sonoma?</p>",
        "id": 378751086,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690368645
    },
    {
        "content": "<p>Those disappeared “on their own” while I was on Ventura <del>(unless I never saw them)</del>.  Not seen yet on Sonoma.</p>",
        "id": 378755990,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690369538
    },
    {
        "content": "<p>Strange, one would assume the two versions would only diverge more. But then the PR should be ready to go.</p>",
        "id": 378784116,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690374989
    },
    {
        "content": "<p>For those interested, <code>nix</code> just pulled down <code>elan 2.0.1</code> so I think it is fully functional through the update (which hasn't always been the case).</p>",
        "id": 379200785,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690470865
    },
    {
        "content": "<p>The elan version should not affect any of these</p>",
        "id": 379216350,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690473318
    },
    {
        "content": "<p>Sorry. That was just a statement about the functionality of <code>nix</code> in the beta.</p>",
        "id": 379216996,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690473436
    },
    {
        "content": "<p>Ah, <em>that</em> update :)</p>",
        "id": 379218850,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690473741
    },
    {
        "content": "<p>Everything works great with a clean clone of current mathlib! (Just in time for the next beta lol).</p>",
        "id": 380369688,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690814153
    },
    {
        "content": "<p>Thanks again <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 380369922,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690814184
    }
]