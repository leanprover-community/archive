[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3162\">!4#3162</a> adds the long-dreamed-of feature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>meaning the same thing as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(Not this is only available as a variant of <code>variable</code>: you can't use this inline in a declaration.</p>\n<p>The question is whether to allow this syntax in committed code. It has a <code>variable!?</code> mode that gives a \"Try this:\", so it is easy to remove, either immediately or later if we change our minds.</p>\n<p>Pros: It's lovely, and avoids giant incantations to summon objects. <br>\nCons: Maybe it is fragile or buggy in some way that won't appear until it is used widely, and creates an extra place where confusing typeclass problems can arise.</p>\n<p>Jireh pointed out that it could cause strange problems if someone generalizes a typeclass to only require weaker typeclass hypotheses, and this then changing the effect of every downstream <code>variables!</code>, possibly breaking proofs. It's possible this is a feature, not a bug, however, as it forces you to consider whether downstream generalizations are possible too!</p>",
        "id": 363838233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685998457
    },
    {
        "content": "<p>/poll Should we allow <code>variable!</code> in committed mathlib4 code?</p>",
        "id": 363838278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685998474
    },
    {
        "content": "<p>A more conservative option would be to wait for usage feedback from <code>variable!?</code> (which is certainly a good thing) to see what traps we might be falling into</p>",
        "id": 363839330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685998879
    },
    {
        "content": "<p>Another con for <code>variable!</code> is that its mechanism relies on typeclass inference failure to decide when to add new instance arguments, and failing is not a particularly fast.</p>",
        "id": 363839479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685998924
    },
    {
        "content": "<p>Maybe a more conservative middle ground is to have a version that keeps both the original binders passed to <code>variable!</code> along with the cached full <code>variable</code> command, and then you could delete the cached version to get it to regenerate.</p>",
        "id": 363839613,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685998974
    },
    {
        "content": "<p>How is that different to asking a user to write <code>!?</code> to regenerate?</p>",
        "id": 363839742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685999029
    },
    {
        "content": "<p>So, <code>variable!?</code> should produce something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- variable! [Module R M]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 363839830,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685999051
    },
    {
        "content": "<p>The difference is that we can see both \"short\" and \"long\" verisons in the output.</p>",
        "id": 363839969,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685999106
    },
    {
        "content": "<p>I don't think we want it as a comment, because then it can (and will) go out of sync</p>",
        "id": 363840002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685999122
    },
    {
        "content": "<p>Yeah, or maybe something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>since <code>variable!</code> can still issue the <code>variable</code> command</p>",
        "id": 363840013,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685999125
    },
    {
        "content": "<p>I really like the general approach of having <code>Try this</code> instructions give you something that preserves the original invocation.</p>",
        "id": 363840094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685999156
    },
    {
        "content": "<p>I especially like Kyle's proposed syntax as restoring the original call is just removing a suffix.</p>",
        "id": 363840197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685999184
    },
    {
        "content": "<p>After some time, if we're satisfied with the <code>variable!</code> output, then we can drop the <code>=&gt;</code> parts.</p>",
        "id": 363840201,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685999185
    },
    {
        "content": "<p>Is CI (maybe just the linter) still responsible for checking that the thing before the <code>=&gt;</code> actually produces the thing after?</p>",
        "id": 363840232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685999201
    },
    {
        "content": "<p>Do you mean drop the part before the <code>=&gt;</code> or after it Yury?</p>",
        "id": 363840256,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685999212
    },
    {
        "content": "<p>Once a week?</p>",
        "id": 363840259,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685999213
    },
    {
        "content": "<p>I mean after.</p>",
        "id": 363840281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685999222
    },
    {
        "content": "<p>(If <code>variable!</code> is also fast)</p>",
        "id": 363840316,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685999234
    },
    {
        "content": "<p>The point of this <code>=&gt;</code> clause is to cache the result, since typeclass inference failure isn't very fast</p>",
        "id": 363840342,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685999246
    },
    {
        "content": "<p>though maybe someone can come up with a better algorithm than relying on inference failure</p>",
        "id": 363840386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685999265
    },
    {
        "content": "<p>Then we don't drop it.</p>",
        "id": 363840394,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685999270
    },
    {
        "content": "<p>Kyle, were you responding to me, Yury, or both of us?</p>",
        "id": 363840575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685999324
    },
    {
        "content": "<p>I was just elaborating on \"then we can drop the <code>=&gt;</code> parts\"</p>",
        "id": 363840673,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685999376
    },
    {
        "content": "<p>Re your point about CI, that issue was something I was going to bring up too, making sure the expansion is still accurate</p>",
        "id": 363840791,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685999421
    },
    {
        "content": "<p>Do you have an idea how that would look? Does it seem plausible that you could write a linter for this?</p>",
        "id": 363840969,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685999501
    },
    {
        "content": "<p>How do I say \"let R be a commutative ring and let M be an R-module\"? I have no interest in semirings.</p>",
        "id": 363841204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685999587
    },
    {
        "content": "<p>If you want <code>M</code> to be an additive commutative group, then you still need to tell all the arguments.</p>",
        "id": 363841437,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685999672
    },
    {
        "content": "<p><em>But</em>, as the PR shows, you can also make a <code>VectorSpace</code> alias</p>",
        "id": 363841713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685999784
    },
    {
        "content": "<p>My fear is that using such an alias just creates more work when generalizing results to modules though</p>",
        "id": 363841749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685999801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I've been thinking of how to get that to work, where you specify the \"root\" classes you care about, but it's not there yet</p>",
        "id": 363841751,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685999803
    },
    {
        "content": "<p>I was about to reply \"ok then can I override the defaults?\" but then I realised that a line overriding the defaults would be just as long as a line typing it the old way :-)</p>",
        "id": 363841789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685999822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/variable!/near/363841749\">said</a>:</p>\n<blockquote>\n<p>My fear is that using such an alias just creates more work when generalizing results to modules though</p>\n</blockquote>\n<p>On the plus side, the <code>VectorSpace</code> alias does not work as a variable to a theorem (sort of intentionally), so this generalization problem is localized to <code>variable</code> commands</p>",
        "id": 363841996,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685999913
    },
    {
        "content": "<p>I think having the expansions available after a <code>=&gt;</code> as discussed above makes the concern moot anyway</p>",
        "id": 363842166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685999992
    },
    {
        "content": "<p>(also, I think I found a trap, <code>variable!? (A : ℕ → Type) [∀ i : ℕ, Module R (A i)] [∀ i : ℕ, Algebra S (A i)]</code>. See GitHub for the output)</p>",
        "id": 363843003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686000321
    },
    {
        "content": "<p>Well we could always go back to semimodules over semirings and have modules over rings ;-)</p>",
        "id": 363843202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686000419
    },
    {
        "content": "<p>One reason I am wary of <code>variable!</code> alone in code is that it makes it very hard to determine the actual statement of a theorem by looking at lean code. You would basically have to do typeclass inference in your head, where the instances themselves might be declared by <code>variable!</code> and hence you would need to read who knows how much of the library. I think it is broadly going against the spirit of the \"no global inference\" rule that leads to <code>def</code> and <code>theorem</code> having a type that can be elaborated separately from the body</p>",
        "id": 363846076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686001697
    },
    {
        "content": "<p>Ideally, I would like this effect to be a general purpose code action whenever a typeclass problem fails: just suggest to add a variable in the variables line or the function args with the assumption (although I can also imagine this causing a lot of nonsensical assumptions in newbie questions)</p>",
        "id": 363846481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686001871
    },
    {
        "content": "<p>I think that this objection is spurious from a mathematical point of view because we all know what <code>VectorSpace k V</code> entails.</p>",
        "id": 363847177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686002208
    },
    {
        "content": "<p>Also, it's no less readable than <code>variable [AddComnGroup M]</code> 300 lines earlier (which IIRC you don't like either :-) )</p>",
        "id": 363850449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686003651
    },
    {
        "content": "<p>Is there a reason you can’t simply mouseover the def to read off what instances get used (instead of doing typeclass inference in your head)? (This doesn’t address the ‘separation of elaborations’, though)</p>",
        "id": 363853739,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1686005225
    },
    {
        "content": "<p>I'm talking about reading lean code without lean</p>",
        "id": 363854068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005399
    },
    {
        "content": "<p>e.g. on github</p>",
        "id": 363854114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005403
    },
    {
        "content": "<p>which, I know, is a lost art</p>",
        "id": 363854126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005410
    },
    {
        "content": "<p>it's obviously a balancing act how much to actually make this practically doable vs just putting all our eggs in the \"IDE support\" basket</p>",
        "id": 363854244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005477
    },
    {
        "content": "<p>I think that it should be more or less possible to understand theorem statements by reading the file without assistance, modulo typeclass instance arguments on things like <code>+</code></p>",
        "id": 363854349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005527
    },
    {
        "content": "<p>Hmm, yeah, definitely a trade-off. I like <code>variable! … =&gt; …</code> syntax: it exposes what you <em>really</em> want while not hiding what’s really happening. (Well, at the whole-file level, in any case, if not at the definition level—but the existence of <code>variable</code> does break total legibility at the definition level anyway.)</p>",
        "id": 363854578,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1686005657
    },
    {
        "content": "<p>(which BTW is why I prefer autoImplicit over <code>variable</code>)</p>",
        "id": 363854666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005716
    },
    {
        "content": "<p><code>variable! ... =&gt; ...</code> does solve this issue, but it also seems to just be a more verbose version of <code>variable</code></p>",
        "id": 363854781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005783
    },
    {
        "content": "<p>a self-replacing <code>variable!</code> would be just as good, except that it doesn't react to upstream changes to what <code>variable!</code> would have inferred</p>",
        "id": 363854908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686005859
    },
    {
        "content": "<p>Imo <code>=&gt;</code> has some advantages because it’s</p>\n<ol>\n<li>more legible (an unstructured <code>variable</code> followed by a dozen instances is, to me, an obstacle to plaintext understanding; with <code>=&gt;</code> we can immediately skip the rhs reading left-to-right, saying “oh, okay, <em>that’s</em> what we want” as soon as we see the lhs)</li>\n<li>automation-supporting over upstream refactors, as you mentioned; not only does it error and alert you (at some point), but it also lets you re-run the inference for what you want and complete the refactor more easily</li>\n</ol>",
        "id": 363855637,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1686006241
    },
    {
        "content": "<p>I guess if you wanted to boil what I like about it down to slogan it’d be something like “reflecting intent losslessly”.</p>",
        "id": 363856241,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1686006488
    },
    {
        "content": "<p>(FYI: I added an option to the poll, in case those who already voted want to have a second opinion.)</p>",
        "id": 363864949,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686011905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The amount of lines of <code>variable</code> incantations that you need to get a smooth vector bundle on a complex manifold is really unwieldy. I think it hampers readability and having a <code>variable!</code> version would actually be very helpful there.</p>",
        "id": 363883060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686025298
    },
    {
        "content": "<p>If you want to try this out, it's now in mathlib as the <code>variable?</code> command, once you do <code>import Mathlib.Tactic.Variable</code>.</p>\n<p>It's set up where <code>variable? ...</code> suggests <code>variable? ... =&gt; ...</code>, where the binders after the arrow are the expanded version, and the <code>variable?</code> command checks that the expanded version is indeed the expanded version. This way you can either delete the <code>? ... =&gt;</code> part to get a plain variable command or edit what's before the <code>=&gt;</code> and then regenerate the expanded version. In all cases you can see from the source code exactly what's been inferred.</p>",
        "id": 368425231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687412450
    },
    {
        "content": "<p>Can we make <code>import Mathlib.Tactic.Variable</code> available a.e. by some early import? Seems pretty harmless.</p>",
        "id": 368425447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687412519
    },
    {
        "content": "<p>Yeah, it could be added to <code>Mathlib.Tactic.Common</code>. I didn't do it in this PR because <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/test/Variable.lean\">the test file</a> imports a good amount of algebra, which all imports this module, and I didn't want to recompile everything while developing it.</p>",
        "id": 368426012,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687412686
    },
    {
        "content": "<p>I want to know which files in mathlib have measure zero, and which (if any) are non-measurable. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 368679089,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687463596
    },
    {
        "content": "<p><code>Mathlib/Data</code>?</p>",
        "id": 368679463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687463689
    },
    {
        "content": "<p>I see in another thread that that Kyle knows about the <code>Type*</code> bug; I can't seem to find a bug report on the github - is it worth doing so? It'd be nice to get it fixed to try and make my <code>FunLike</code> work simpler.</p>\n<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Variable</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CoeFun</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">variable</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">CoeFun</span> <span class=\"n\">Nat</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"c1\">-- error: Calculated binders do not match the expected binders given after `=&gt;`.</span>\n<span class=\"c1\">-- the suggestion is however identical</span>\n</code></pre></div>",
        "id": 406415769,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701909478
    },
    {
        "content": "<p>Could you remind me about what the <code>Type*</code> bug is?</p>",
        "id": 406419276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701911055
    },
    {
        "content": "<p>Let me dig up your old comment about it, but this seems to be a version of it - the code above is fine with Sort as opposed to Sort*</p>",
        "id": 406419385,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701911112
    },
    {
        "content": "<p>Replying to me, hah:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Should.20there.20be.20a.20ProbabilitySpace.20class.3F/near/401817845\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Should.20there.20be.20a.20ProbabilitySpace.20class.3F/near/401789677\">said</a>:</p>\n<blockquote>\n<p>I think there was some progress to do this automatically via <code>variables!/?</code>, did <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> talk about this recently?</p>\n</blockquote>\n<p>Unfortunately, the <code>variable?</code> mechanism is too simple here and fails because pretty printing isn't round tripping. (Yes, it needs to depend on pretty printing...) It seems to work if you set <code>pp.analyze</code> to true, but I wouldn't count on it, so I'll just say this doesn't work at the moment.</p>\n<p>The issue is that <code>IsFiniteMeasure (volume : Measure Ω)</code> pretty prints as <code>IsFiniteMeasure ℙ</code>, without reference to <code>Ω</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>example</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">variable_alias</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ProbabilitySpace</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasureSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"o\">(</span><span class=\"n\">volume</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">variable</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ProbabilitySpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Can not satisfy requirements for [IsFiniteMeasure ℙ] due to metavariables.</span>\n\n<span class=\"cm\">(Use `set_option trace.variable? true` for step-by-step details.)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- This actually works:</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.analyze</span> <span class=\"n\">true</span>\n<span class=\"kd\">variable</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ProbabilitySpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n<span class=\"c1\">-- It fails if you do `Type*`, but that's a bug in `variable?`.</span>\n</code></pre></div>\n<p></div></div><br>\n</p>\n</blockquote>",
        "id": 406419569,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701911192
    },
    {
        "content": "<p>(in the bottom of the example)</p>",
        "id": 406419605,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701911212
    },
    {
        "content": "<p>Just curious as to whether you think you'll have time to work on this soon - absolutely no rush if not! I just want to organise when I'll try the <code>FunLike</code> refactor attempt depending on that - if you think this is fixable soon, I'd rather wait for it:)</p>",
        "id": 406633182,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701989098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> I just created <a href=\"https://github.com/leanprover-community/mathlib4/pull/8908\">#8908</a> to try to address it. I'm letting CI run the test file before putting it up for review.</p>",
        "id": 406806519,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702056388
    },
    {
        "content": "<p>There's an error I can't figure out right now. I'm trying to disable the linter when elaborating the expected binders, since it can have unused variables. <a href=\"https://github.com/leanprover-community/mathlib4/pull/8908/files#diff-e29eb8468a9a2728388a6ba3bdbca8df6940d2403374bb0f50ea8172efa2e0c0R291\">This line</a> was my attempt, but it doesn't seem to affect the linter output (hence the test failure in CI).</p>",
        "id": 406824795,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702063599
    },
    {
        "content": "<p>The <code>x</code> unused variables warning seems totally fair. But even after using <code>i</code> later, it seems to still lint against that; it seems to be a weird mix about what is linted and what isn't.</p>",
        "id": 406940846,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702131232
    }
]