[
    {
        "content": "<p>I want to try to autogenerate parts of the FTC file. My idea is to have a macro that outputs one of many similar theorems, then call it in a nested loop with different settings. Where can I read about the syntax?</p>",
        "id": 365227644,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686451753
    },
    {
        "content": "<p>Probably, I can write a template in something like jinja2 or mako templates but this is not the Lean way.</p>",
        "id": 365227753,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686451813
    },
    {
        "content": "<p>The nearest example of such a thing is <code>Mathlib.Data.UInt</code></p>",
        "id": 365228233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686452171
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 365228575,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686452440
    },
    {
        "content": "<p>I'm trying to do it in a simpler case and I don't know how to make lemma names from string concatenation of arguments and fixed parts.</p>",
        "id": 368410587,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687406878
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Opposites</span>\n\n<span class=\"sd\">/-- If `M` multiplicatively acts on `α`, then `DomMulAct M` acts on `α → β` as well as some</span>\n<span class=\"sd\">bundled maps from `α`. This is a type synonym for `MulOpposite M`, so this corresponds to a right</span>\n<span class=\"sd\">action of `M`. -/</span>\n<span class=\"kd\">@[to_additive \"If `M` additively acts on `α`, then `DomAddAct M` acts on `α → β` as</span>\n<span class=\"kd\">well as some bundled maps from `α`. This is a type synonym for `AddOpposite M`, so this corresponds</span>\n<span class=\"kd\">to a right action of `M`.\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">DomMulAct</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">MulOpposite</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">@[inherit_doc]</span> <span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"ᵈᵐᵃ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DomMulAct</span>\n<span class=\"kd\">@[inherit_doc]</span> <span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"ᵈᵃᵃ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DomAddAct</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DomMulAct</span>\n\n<span class=\"sd\">/-- Equivalence between `M` and `Mᵈᵐᵃ`. -/</span>\n<span class=\"kd\">@[to_additive \"Equivalence between `M` and `Mᵈᵐᵃ`.\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">M</span><span class=\"bp\">ᵈᵐᵃ</span> <span class=\"o\">:=</span> <span class=\"n\">MulOpposite.opEquiv</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">### Copy instances from `Mᵐᵒᵖ`</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">run_cmd</span>\n  <span class=\"n\">for</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Mul</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">One</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">Inv</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">Semigroup</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">CommSemigroup</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">LeftCancelSemigroup</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"n\">RightCancelSemigroup</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">MulOneClass</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">Monoid</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">CommMonoid</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">LeftCancelMonoid</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"n\">RightCancelMonoid</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">CancelMonoid</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">CancelCommMonoid</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">InvolutiveInv</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">DivInvMonoid</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"n\">InvOneClass</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">DivInvOneMonoid</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">DivisionMonoid</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">DivisionCommMonoid</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">Group</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"n\">CommGroup</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">idnt</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkIdent</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">instName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"inst\"</span> <span class=\"bp\">++</span> <span class=\"n\">n</span>\n  <span class=\"n\">Lean.Elab.Command.elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">@[to_additive]</span> <span class=\"kd\">instance</span> <span class=\"bp\">$</span><span class=\"n\">instName</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">idnt</span> <span class=\"n\">M</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">idnt</span> <span class=\"n\">M</span><span class=\"bp\">ᵈᵐᵃ</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n  <span class=\"o\">))</span>\n</code></pre></div>",
        "id": 368410645,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687406887
    },
    {
        "content": "<p>Without <code>let instName := ...</code> and <code>$instName</code> after <code>instance</code>, it works.</p>",
        "id": 368410698,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687406918
    }
]