[
    {
        "content": "<p>I ran into this as a subgoal while trying to fix the errors in Topology.Instances.AddCircle (<a href=\"https://github.com/leanprover-community/mathlib4/pull/3984\">!4#3984</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.ToIntervalMod</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int.mod</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Apparently this is not true by definition, because <code>rfl</code> does not work, but I cannot work out what there is to prove.</p>",
        "id": 358344120,
        "sender_full_name": "David Loeffler",
        "timestamp": 1684114341
    },
    {
        "content": "<p>I think it is called <code>emod</code> in Lean 4?</p>",
        "id": 358344155,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684114369
    },
    {
        "content": "<p>Which thing is called <code>emod</code>? I copied + pasted the above from the middle of a lean4 proof, I didn't choose the names myself.</p>",
        "id": 358344298,
        "sender_full_name": "David Loeffler",
        "timestamp": 1684114468
    },
    {
        "content": "<p>There are apparently three standard programming conventions for <code>mod</code> on integers -- in Lean 4 they have the names <code>Int.mod</code>, <code>Int.emod</code>, and <code>Int.fmod</code>.  There was a long thread discussing which one should be used as the convention (I'm trying to track it down).  I wouldn't be surprised if mathport doesn't know which one was eventually chosen, but I believe it was <code>emod</code>.</p>",
        "id": 358344390,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684114553
    },
    {
        "content": "<p><a href=\"#narrow/stream/341532-lean4-dev/topic/.5BRFC.5D.20Int.2Ediv.20convention\">https://leanprover.zulipchat.com/#narrow/stream/341532-lean4-dev/topic/.5BRFC.5D.20Int.2Ediv.20convention</a></p>",
        "id": 358344493,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684114616
    },
    {
        "content": "<p>I'm sure what you write is correct, but it's not obvious to me how this helps to answer the question.</p>",
        "id": 358344530,
        "sender_full_name": "David Loeffler",
        "timestamp": 1684114641
    },
    {
        "content": "<p>I mean, maybe the lemma's not true any more?  Does the file start to work if you change every <code>mod</code> to an <code>emod</code>?</p>",
        "id": 358344635,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684114711
    },
    {
        "content": "<p>(And <code>div</code> to <code>ediv</code>.)</p>",
        "id": 358344974,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684115028
    },
    {
        "content": "<p>I'd be quite surprised if this was the issue, because the error appears 400 lines deep into the file, in the proof of a fairly sophisticated algebraic lemma <code>addOrderOf_eq_pos_iff</code> about finite-order points in <code>AddCircle</code>; if the problem is that basic arithmetic operations have been redefined in a way that seriously invalidates the whole design, I'd expect it to have failed much further up.</p>",
        "id": 358345228,
        "sender_full_name": "David Loeffler",
        "timestamp": 1684115334
    },
    {
        "content": "<p>That's reasonable, and I haven't looked at the file.  But the operations are usually referred to as <code>%</code> and <code>/</code> and it's presumably rather rare that they get spelled out.</p>\n<p>If I understand correctly, the subgoal you wrote is actually wrong: see at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.instModInt_1#doc\">docs4#Int.instModInt_1</a> that <code>%</code> is defined to be <code>Int.emod</code>, and this is only equal to <code>Int.mod</code> under certain conditions: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.mod_eq_emod#doc\">docs4#Int.mod_eq_emod</a></p>",
        "id": 358345655,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684115824
    },
    {
        "content": "<p>It may be that somewhere earlier in the port someone wrote a spelled-out <code>Int.mod</code> that should have been <code>Int.emod</code> (or <code>%</code>).</p>",
        "id": 358345679,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684115859
    },
    {
        "content": "<p>(If I understand correctly, the Lean 4 <code>Int.emod</code> is the same as the Lean 3 <code>Int.mod</code>.)</p>",
        "id": 358345793,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684115965
    },
    {
        "content": "<p>OK, that gives me more of an idea what the problem might be, I'll go back and have another look with that in mind. Thanks!</p>",
        "id": 358346565,
        "sender_full_name": "David Loeffler",
        "timestamp": 1684116818
    },
    {
        "content": "<p>OK, I now have <code>addOrderOf_eq_pos_iff</code> working. Thanks! Only two more errors in this file to go.</p>",
        "id": 358351011,
        "sender_full_name": "David Loeffler",
        "timestamp": 1684121584
    },
    {
        "content": "<p>All that's left to fix now in this file is a typeclass resolution problem (<code>error: failed to synthesize Zero ℤ</code>). This I have no idea how to sort out so I'll leave it to others.</p>",
        "id": 358354918,
        "sender_full_name": "David Loeffler",
        "timestamp": 1684125099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span>, the failure to synthesize Zero ℤ is a known problem, which unfortunately requires a change deep inside Lean 4. Could you just use <code>set_option synthInstance.maxHeartbeats N in</code> for sufficiently large <code>N</code>, and add a porting note referencing <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a>?</p>",
        "id": 358355943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684125860
    },
    {
        "content": "<p>I think this theorem is actually false, and you should basically never be using <code>Int.mod</code> and we almost always use <code>%</code> which is <code>emod</code> instead.</p>",
        "id": 358441027,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684152736
    },
    {
        "content": "<blockquote>\n<p>you should basically never be using Int.mod</p>\n</blockquote>\n<p>I suspect that this issue – people incautiously assuming that <code>%</code> on integers is synonymous with <code>Int.mod</code> – is going to come up very, very frequently in future!</p>",
        "id": 358514122,
        "sender_full_name": "David Loeffler",
        "timestamp": 1684168801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.25.22.20vs.20.22Int.2Emod.22/near/358355943\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span>, the failure to synthesize Zero ℤ is a known problem, which unfortunately requires a change deep inside Lean 4. Could you just use <code>set_option synthInstance.maxHeartbeats N in</code> for sufficiently large <code>N</code>, and add a porting note referencing <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a>?</p>\n</blockquote>\n<p>I thought we were doing all this porting effort because lean4 was supposed to be <em>better</em> than lean3? Anyway the PR is ready for review at <a href=\"https://github.com/leanprover-community/mathlib4/pull/3984\">!4#3984</a>.</p>",
        "id": 358584864,
        "sender_full_name": "David Loeffler",
        "timestamp": 1684190950
    },
    {
        "content": "<p>That's quite an uncharitable read. Many people are working hard to make it strictly better along every axis, but unsurprisingly that's a hard problem and what we have is only strictly better on most axes. As mentioned, the fix for this issue was merged just today, so the maxHeartbeats line will only be around for a very short while.</p>",
        "id": 358585457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684191228
    },
    {
        "content": "<p>David -- the way the algebra hierarchy is implemented is now different, and this has had consequences; this is not a change in Lean 4 but a big design decision made to make the internal size of terms smaller, and we are still understanding the ramifications of this change in the design of what is a fundamental part of mathlib. See <a href=\"https://github.com/leanprover/lean/wiki/Refactoring-structures\">https://github.com/leanprover/lean/wiki/Refactoring-structures</a> for Leo's explanation of what the problem is and the discussion at <a href=\"https://github.com/leanprover/lean4/pull/2210\">lean4#2210</a> for the way we're currently solving the problems that this change in design has exposed.</p>\n<p>In short; in Lean 3 structures were \"flat\" and now in Lean 4 they're not, which makes things take up less memory but means that new algorithms need to be used in order to make things happen which were automatic before.</p>",
        "id": 358585859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684191422
    },
    {
        "content": "<p>The hope is also that issues for Lean4 will be hopefiully easier to resolve than the related Lean3 issues - having worked on the Lean3 source code in the past, it is not the most fun.</p>",
        "id": 358586397,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684191663
    },
    {
        "content": "<p>There's also a forthcoming paper by Eric Wieser on the issue (still not public IIUC)</p>",
        "id": 358586644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684191774
    },
    {
        "content": "<p>Here <a href=\"https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html\">https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html</a> is the kind of problem which one has to understand in order to tame typeclass inference.</p>",
        "id": 358586834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684191854
    },
    {
        "content": "<p>That paper is about groups. A small part of what mathlib has to deal with looks like this:<br>\n<a href=\"/user_uploads/3121/q163PtYxkbnmuyThBLVoPXx7/mathlib.png\">mathlib.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/q163PtYxkbnmuyThBLVoPXx7/mathlib.png\" title=\"mathlib.png\"><img src=\"/user_uploads/3121/q163PtYxkbnmuyThBLVoPXx7/mathlib.png\"></a></div>",
        "id": 358587267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684192082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.25.22.20vs.20.22Int.2Emod.22/near/358585457\">said</a>:</p>\n<blockquote>\n<p>As mentioned, the fix for this issue was merged just today, so the maxHeartbeats line will only be around for a very short while.</p>\n</blockquote>\n<p>All but two are gone from master on the <code>reenableeta</code> branch currently. So it may already be gone. We just don’t know yet <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 358591662,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684194806
    }
]