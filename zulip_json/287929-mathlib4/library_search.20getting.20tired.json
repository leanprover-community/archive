[
    {
        "content": "<p>I've been using mathlib4 a bit recently (\"using\" being opposed to \"porting\") and I noticed that <code>library_search</code> gets tired after a couple of invocation. When it's tired it immediately gives up instead of searching. Reloading the file (say by using \"Refresh file dependency\") reboots <code>library_search</code> which then works normally for a while.</p>",
        "id": 359417585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684421395
    },
    {
        "content": "<p>This is in projects depending on mathlib4, not mathlib4 itself, in case this matters.</p>",
        "id": 359417750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684421422
    },
    {
        "content": "<p>Hmm... <code>library_search</code> now does play some clever tricks to try to stop if <code>maxHeartbeats</code> is approaching, and this is surely where the suspicion should lie. If you have a file where this somewhat reliably happens I could try disabling the maxHeartbeats check.</p>",
        "id": 359419094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684421704
    },
    {
        "content": "<p>Of course now that I posted this message I can't get this bug to appear.</p>",
        "id": 359425704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684423307
    },
    {
        "content": "<p>I still have something weird to show. In </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.UniformSpace.Compact</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"d\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dist</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">rule_sets</span> <span class=\"o\">[</span><span class=\"n\">Continuous</span><span class=\"o\">])</span> <span class=\"n\">apply</span> <span class=\"n\">unsafe</span><span class=\"o\">]</span> <span class=\"n\">Continuous.continuousOn</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"ls\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">library_search</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Heine_Cantor</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompactSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UniformContinuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.uniformContinuous_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span>\n  <span class=\"n\">set</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">K_closed</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">isClosed_le</span>\n    <span class=\"n\">continuity</span>\n    <span class=\"n\">continuity</span>\n  <span class=\"k\">have</span> <span class=\"n\">K_cpct</span> <span class=\"o\">:</span> <span class=\"n\">IsCompact</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">IsClosed.isCompact</span> <span class=\"n\">K_closed</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">K.eq_empty_or_nonempty</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">_</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">K</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p_in</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">q.1</span> <span class=\"n\">q.2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">K_cpct.exists_forall_le</span> <span class=\"n\">h</span>\n    <span class=\"n\">continuity</span>\n  <span class=\"n\">use</span> <span class=\"n\">d</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"n\">intro</span> <span class=\"n\">eq</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">ε</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">p_in</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">ε_pos</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">x'</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span>\n    <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>replacing line 28, the one saying <code>apply K_cpct.exists_forall_le h</code> by <code>library_search</code> and accepting the suggestion leads to a weird error.</p>",
        "id": 359426468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684423485
    },
    {
        "content": "<p>This is on current mathlib4 master <code>c39117e4de1eff79d24b7512e26aff0f0b5ade4b</code></p>",
        "id": 359426632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684423530
    },
    {
        "content": "<p>I have experienced this problem as well.</p>",
        "id": 359426854,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1684423579
    },
    {
        "content": "<p>It seems that library_search takes the initiative to name the hole to be filled and this name clashes with an existing name and confuses Lean.</p>",
        "id": 359427018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684423620
    },
    {
        "content": "<p>Fun fact in passing: accepting this suggestion also raises a deprecation warning which does not show up in the hand-written version because dot notation seems to turn off deprecation warnings.</p>",
        "id": 359427188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684423662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/library_search.20getting.20tired/near/359427018\">said</a>:</p>\n<blockquote>\n<p>It seems that library_search takes the initiative to name the hole to be filled and this name clashes with an existing name and confuses Lean.</p>\n</blockquote>\n<p>This is actually a bug in <code>apply</code> IIRC</p>",
        "id": 359427631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684423779
    },
    {
        "content": "<p>I was missing the <code>apply</code> bug :-)</p>",
        "id": 359429639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684424166
    },
    {
        "content": "<p>In this case it's also a <code>refine</code> bug.</p>",
        "id": 359429957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684424228
    },
    {
        "content": "<p>What is the exact suggestion?</p>",
        "id": 359430119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684424276
    },
    {
        "content": "<p><code>refine IsCompact.exists_forall_le K_cpct h ?hf</code></p>",
        "id": 359430421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684424345
    },
    {
        "content": "<p>And <code>hf</code> is already the name of a local assumption.</p>",
        "id": 359430454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684424356
    },
    {
        "content": "<p>That's by design, although it is a somewhat dubious design</p>",
        "id": 359430540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684424377
    },
    {
        "content": "<p>The issue is that named metavariables are not really scoped in any meaningful sense, so you can end up picking up completely unrelated mvars which happen to have the same name</p>",
        "id": 359430800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684424445
    },
    {
        "content": "<p>sometimes even mvars you never wrote but were generated internally - this is what <code>apply</code> does</p>",
        "id": 359430971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684424489
    },
    {
        "content": "<p>have you identified who created the <code>?hf</code> mvar?</p>",
        "id": 359431027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684424505
    },
    {
        "content": "<p>if you write <code>let := ?hf</code> you might recognize the proof term</p>",
        "id": 359431199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684424550
    },
    {
        "content": "<p>This named is made up by <code>library_search</code></p>",
        "id": 359431881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684424722
    },
    {
        "content": "<p>no, I mean the first <code>?hf</code> in the proof</p>",
        "id": 359433827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425190
    },
    {
        "content": "<p>if you try writing <code>let := ?hf</code> you might be surprised to see the result</p>",
        "id": 359433907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425211
    },
    {
        "content": "<p>The first <code>hf</code> is an assumption from the statement of the theorem.</p>",
        "id": 359433991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684425235
    },
    {
        "content": "<p>not <code>hf</code>, <code>?hf</code></p>",
        "id": 359434049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425244
    },
    {
        "content": "<p>mvars have a separate namespace, they are unrelated to local variables with the same name</p>",
        "id": 359434179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425269
    },
    {
        "content": "<p>although apply and other tactics have a penchant for naming mvars after the local variables they will substitute for</p>",
        "id": 359434319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425300
    },
    {
        "content": "<p>No idea. It don't see it anywhere.</p>",
        "id": 359434386,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684425315
    },
    {
        "content": "<p>and what does <code>let := ?hf</code> do to the tactic state?</p>",
        "id": 359434496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425344
    },
    {
        "content": "<p>I'll be back later, I need to be in Cambridge for a while.</p>",
        "id": 359434892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684425450
    },
    {
        "content": "<p>just got to a lean to test this out myself. <code>let := ?hf</code> is a syntax error but <code>let foo := ?hf</code> puts</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_const</span>\n</code></pre></div>\n<p>in the context</p>",
        "id": 359435088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425487
    },
    {
        "content": "<p>by moving the line around it appears that this <code>?hf</code> variable appears due to the first <code>continuity</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">K_closed</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">isClosed_le</span>\n    <span class=\"n\">continuity</span>\n    <span class=\"n\">continuity</span>\n</code></pre></div>",
        "id": 359435620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425595
    },
    {
        "content": "<p>and indeed, you will notice that the case tag on this <code>continuity</code> goal is <code>hf</code></p>",
        "id": 359436027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425684
    },
    {
        "content": "<p>created by the <code>apply</code> on the previous line</p>",
        "id": 359436058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684425693
    },
    {
        "content": "<p>Oh, this is fun:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span>\n</code></pre></div>\n<p>crashes the server</p>",
        "id": 359437483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684426057
    },
    {
        "content": "<p>another brainteaser: Why does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Nat</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">10</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">2</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">30</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>print <code>4</code>?</p>",
        "id": 359440841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684426890
    },
    {
        "content": "<p>Because it's 2+2, with the 2 being the <code>exact 2</code>, which was the value of <code>?x</code> when it was assigned in both cases I guess (although I don't understand elaboration order at all)</p>",
        "id": 359441573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684427056
    },
    {
        "content": "<p>Yet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Nat</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">1</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">2</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">3</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is <code>0</code>, and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">1</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span>\n  <span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">foo</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">2</span>\n      <span class=\"n\">exact</span> <span class=\"mi\">3</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>is <code>(0, 2)</code></p>",
        "id": 359441963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684427157
    },
    {
        "content": "<p>Very interesting...</p>",
        "id": 359453238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684430103
    }
]