[
    {
        "content": "<p>I think I still don't understand the semantic distinction between <code>ring</code> and <code>ring_nf</code>. Why is Lean complaining in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>I understand that Lean complains because <code>ring1</code> fails and <code>ring_nf</code> doesn't. But why do we need to bother the user with that?</p>",
        "id": 355545237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683130003
    },
    {
        "content": "<p>The idea here is that in this situation <code>ring</code> is doing some amount of failed work to close the goal, which is then thrown away and we start over again with <code>ring_nf</code>. So potentially this replacement is a speed-up.</p>",
        "id": 355603114,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683146279
    },
    {
        "content": "<p>I agree it is annoying to be hassling the user about this.</p>",
        "id": 355603181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683146288
    },
    {
        "content": "<p>A possible compromise could be to count heartbeats, and not bother telling the user anything if <code>ring</code> failed fast anyway. But that is starting to get messy.</p>",
        "id": 355603266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683146335
    },
    {
        "content": "<p>It's not an equality in rings, I think it is important to fail to set the expectations for what this tactic is supposed to do</p>",
        "id": 355603369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683146377
    },
    {
        "content": "<p>The why does <code>ring_nf</code> succeeds?</p>",
        "id": 355603557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683146436
    },
    {
        "content": "<p>Yeah I guess one could argue that making <code>ring</code> do this is \"mission creep\"</p>",
        "id": 355603559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683146438
    },
    {
        "content": "<p><code>ring</code> is not a kitchen sink tactic and I will try to prevent it from becoming one</p>",
        "id": 355603562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683146440
    },
    {
        "content": "<p><code>ring_nf</code> does normalization of commutative ring subexpressions</p>",
        "id": 355603596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683146457
    },
    {
        "content": "<p>This is not to say we can't add a kitchen sink wrapper, for teaching and demo purposes. <code>by its_just_rearranging_from_here</code>.</p>",
        "id": 355603809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683146552
    },
    {
        "content": "<p>roughly, you can think of <code>ring_nf</code> as <code>simp [ring]</code>, if that was a thing you could do</p>",
        "id": 355603821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683146557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ring.20vs.20rinf_nf/near/355603809\">said</a>:</p>\n<blockquote>\n<p>This is not to say we can't add a kitchen sink wrapper, for teaching and demo purposes. <code>by its_just_rearranging_from_here</code>.</p>\n</blockquote>\n<p>Or even for general use, e.g. as a plugin for tidy</p>",
        "id": 355604102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683146647
    },
    {
        "content": "<p>Maybe even call it <code>algebra</code>, and have it delegate out to <code>ring</code>, <code>group</code>, <code>noncomm_group</code>, <code>abel</code>, <code>linarith</code>.</p>",
        "id": 355604335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683146735
    },
    {
        "content": "<p>Not sure whether it should default to silence or printing a <code>Try this</code>, with the other alternative behind a <code>!</code> or a <code>?</code>.</p>",
        "id": 355604427,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683146763
    },
    {
        "content": "<p>Writing <code>Try this</code> behind a <code>?</code> seems more natural.</p>",
        "id": 355605391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683147067
    },
    {
        "content": "<p>Note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"c1\">-- `ring1` normalizes exponents, the mathlib3 `ring_exp`</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring1</span>\n\n<span class=\"c1\">-- `ring_nf` normalizes ring expressions inside function applications, even iterated at multiple levels</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span>\n</code></pre></div>\n<p>[deleted bad example]</p>",
        "id": 355637786,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683164838
    },
    {
        "content": "<p>For a really useful normalization tactic,it would be nice to figure out a principled combination of <code>ring1</code>'s ability to normalize exponents and <code>ring_nf</code>'s ability to normalize all levels of commutative ring expressions involved.</p>",
        "id": 355637881,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683164920
    },
    {
        "content": "<p>Actually, scratch that, I think <code>ring_nf</code> also deals with exponents -- I didn't test my example properly.  Sorry for underestimating you, <code>ring_nf</code>!</p>",
        "id": 355638447,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683165384
    }
]