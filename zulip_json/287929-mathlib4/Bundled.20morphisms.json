[
    {
        "content": "<p>I have an idea about how bundled morphisms can be done in Lean 4 (<strong>after</strong> we port <code>mathlib3</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Auxiliary classes</span>\n<span class=\"kd\">class</span> <span class=\"n\">ComposablePred</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">WeakerPred</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">weaker</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IdPred</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">InvertiblePred</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">RightInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">g</span>\n\n<span class=\"c1\">-- hom-specific data</span>\n<span class=\"kd\">structure</span> <span class=\"n\">IsMulHom</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ComposablePred</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">IsMulHom</span> <span class=\"n\">IsMulHom</span> <span class=\"n\">IsMulHom</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IdPred</span> <span class=\"n\">A</span> <span class=\"n\">IsMulHom</span>\n\n<span class=\"c1\">-- generic constructions</span>\n<span class=\"kd\">structure</span> <span class=\"n\">BundledHom</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n  <span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">toFun</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">]</span> <span class=\"n\">BundledHom.toFun</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">BundledHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">BundledHom.toFun</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">BundledEmbedding</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">BundledHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">injective</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">BundledEmbedding</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.toBundledHom</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">BundledEquiv</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">BundledHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">RightInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">BundledEquiv.toBundledEmbedding</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">BundledEquiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f.toBundledEmbedding</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">BundledEquiv.symm</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">((</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">InvertiblePred</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">BundledEquiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BundledEquiv</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- auxiliary abbreviations</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">MulHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">BundledHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">IsMulHom</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">MulEquiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">BundledEquiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">IsMulHom</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">WeakerPred</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span> <span class=\"n\">IsMulHom</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">BundledHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Then main \"pro\" of this approach is that we can use a generic construction to define, e.g., <code>*.comp</code>, <code>*.id</code>, and <code>*.End</code> with <code>pow = iterate</code>. Also, <code>map_mul</code> can be stated for a <code>BundledHom</code> because coercions of <code>BundledEmbedding</code>s and <code>BundledEquiv</code>s are unfolded to <code>BundledHom</code>s (with two and three arrows, resp.).</p>\n<p>There are a few things I don't know how to do with this approach yet:</p>\n<ul>\n<li>auto upgrade from <code>MulEquiv</code> to <code>MonoidHom</code>; maybe,</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HasProp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">BundledHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>instead of <code>WeakerPred</code>?</p>\n<ul>\n<li><code>FunLike</code>s that have other data fields (e.g., <code>Finsupp</code>).</li>\n<li>define a <code>MulHom</code> with nice <code>where</code> syntax instead of</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MulHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>What do you think? <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> you wrote the current <code>*HomClass</code> approach, so probably you have some insight here.</p>",
        "id": 325987529,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675616520
    },
    {
        "content": "<p>One more issue with this approach is that we have to either handle <code>Function.Embedding</code>/<code>Equiv</code> separately, or have an extra <code>property : True := trivial</code> field.</p>",
        "id": 325991940,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675618646
    },
    {
        "content": "<p>Equiv would need to be handled separately anyway since it carries data in the inv_fun, right?</p>",
        "id": 325992959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675619185
    },
    {
        "content": "<p>In the code above, I define a generic <code>BundledEquiv</code> structure.</p>",
        "id": 325994390,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675619914
    },
    {
        "content": "<p>We can have <code>Equiv α β := BundledEquiv α β fun _ =&gt; True</code> and <code>Function.Embedding α β := BundedEmbedding α β fun _ =&gt; True</code>.</p>",
        "id": 325994432,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1675619934
    },
    {
        "content": "<p>Created <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">!4#2202</a></p>",
        "id": 327200125,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676101215
    }
]