[
    {
        "content": "<p>I'm trying to implement relativizations of formulas for a personal project and this is the definition I'm using so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ModelTheory.Syntax</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">FirstOrder.Language</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FirstOrder.Language</span>\n<span class=\"kn\">open</span> <span class=\"n\">FirstOrder</span>\n<span class=\"kn\">open</span> <span class=\"n\">Language</span> <span class=\"n\">Structure</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">L.BoundedFormula</span> <span class=\"n\">α</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BoundedFormula</span>\n<span class=\"kd\">def</span> <span class=\"n\">relativize</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">L.BoundedFormula</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">L.BoundedFormula</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">falsum</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">falsum</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">imp</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">relativize</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relativize</span> <span class=\"n\">ψ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rel</span> <span class=\"n\">r</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rel</span> <span class=\"n\">r</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">equal</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">equal</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">all</span> <span class=\"n\">φ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">χ.liftAt</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"o\">(</span><span class=\"n\">relativize</span> <span class=\"n\">φ</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span> <span class=\"n\">BoundedFormula</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">relativize_all_aux</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">L.BoundedFormula</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">):</span>\n  <span class=\"n\">BoundedFormula.Realize</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">χ.liftAt</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"n\">φ</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"n\">k</span>\n    <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">BoundedFormula.Realize</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">χ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">BoundedFormula.Realize</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">φ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Fin.snoc</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The <code>cast</code> makes it pretty much unusable though, does anyone who has more knowledge of that part of the library have any idea how to approach it? None of the cast-like functions (not even <code>BoundedFormula.subst</code> and the like) seem to be able to \"push the variable 0 to the maximum\"</p>",
        "id": 386261138,
        "sender_full_name": "Uni Marx",
        "timestamp": 1692566919
    }
]