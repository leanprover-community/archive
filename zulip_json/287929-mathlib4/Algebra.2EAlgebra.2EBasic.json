[
    {
        "content": "<p>I started porting <code>Algebra.Algebra.Basic</code> before all required PRs made it to <code>mathlib3port</code>. I'll use my <code>restart-port</code> script to fix it tomorrow.</p>",
        "id": 327477591,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676271532
    },
    {
        "content": "<p>4 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/restart.20port\">#mathlib4 &gt; restart port</a> by <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span>.</p>",
        "id": 327485547,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676275142
    },
    {
        "content": "<p>I've started looking at the file and I have some questions about porting the \"<code>algebra_map</code> as a coercion\" code.</p>",
        "id": 327485724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676275212
    },
    {
        "content": "<ol start=\"0\">\n<li>Is <code>CoeTC</code> the right typeclass?</li>\n<li>\n<p>If I add an instance <code>[algebra R A] : CoeTC R A := ⟨algebra_map R A⟩</code>, then</p>\n<ul>\n<li>Lean 4 will unfold coercions, and we'll deal with <code>algebra_map R A x</code> everywhere;</li>\n<li>there won't be any definition that can be tagged with <code>@[coe]</code>, so we'll have these <code>algebra_map</code>s in the goals view etc;</li>\n<li>there will be two competing <code>Coe Nat R</code> instances for every semiring <code>R</code>; same with <code>Int</code> and a ring; same with <code>NNReal</code> and <code>Real</code>;</li>\n<li>moreover, one of the two competing instances will be a bundled ring homomorphism.</li>\n</ul>\n</li>\n<li>\n<p>If we make the coercion function an <code>outParam</code> argument, then</p>\n<ul>\n<li>it will look ugly;</li>\n<li>there will be no symbol for <code>simp</code>/<code>norm_cast</code> lemmas to match on.</li>\n</ul>\n</li>\n</ol>\n<p>What should I do? Do I miss more issues? solutions?</p>",
        "id": 327486755,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676275577
    },
    {
        "content": "<p>I think having algebra_map in the goal is ok for now; using coes for algebra_map behaves poorly in Lean 3 anyway, as we reverted the refactor that made it work well due to porting concerns</p>",
        "id": 327495185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676278664
    },
    {
        "content": "<p>I have been long interested in the concept of a \"canonical\" map and one working definition I have is \"it would be a coercion in lean\". But the algebra map is definitely canonical :-)</p>",
        "id": 327519533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676286196
    },
    {
        "content": "<p>I forgot about one more option:</p>\n<ol start=\"3\">\n<li>Define <code>Algebra.cast</code> and use it as a coercion. This way the behavior is very close to that of mathlib 3; the only exception is that this coercion is not reducibly defeq to, e.g., <code>Nat.cast</code>.</li>\n</ol>",
        "id": 327670937,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676333614
    },
    {
        "content": "<p>So to be clear, we can define a <code>Coe</code> instance for <code>algebra_map</code> abd everything is fine, but we can't tag <code>algebra_map</code> with <code>@[coe]</code> for pretty-printing becuase it's bundled and not a raw function?</p>",
        "id": 327671094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676333698
    },
    {
        "content": "<p>If we define <code>Coe</code> to be <code>algebra_map</code>, then the behavior will differ from Lean 3 (<code>coe_add</code> etc will be <code>simp</code> lemmas because of <code>map_add</code> etc; nothing will be <code>norm_cast</code>).</p>",
        "id": 327688187,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676347159
    },
    {
        "content": "<p>BTW, let me repeat Q0: which typeclass should I use? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeHTCT#doc\">docs4#CoeHTCT</a> ? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeDep#doc\">docs4#CoeDep</a> ? Something else?</p>",
        "id": 327688245,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676347203
    },
    {
        "content": "<p>OTOH, if we define coercion to be <code>Algebra.cast</code>, then we'll have <code>norm_cast</code> but the up arrow will have (at least) 2 meanings for <code>Nat -&gt; R</code>.</p>",
        "id": 327688458,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676347335
    },
    {
        "content": "<p>I'm going to try the <code>Algebra.cast</code> solution. IMHO, it is the closest to what we have in Lean 3.</p>",
        "id": 327688651,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676347521
    },
    {
        "content": "<p>I rebased <a href=\"https://github.com/leanprover-community/mathlib4/pull/2234\">!4#2234</a> on <a href=\"https://github.com/leanprover-community/mathlib4/pull/2244\">!4#2244</a> and now coercion <code>NNReal → Real</code> uses <code>NNReal.toReal</code> before I define an <code>Algebra</code> instance and it uses <code>Algebra.cast</code> after I define it.</p>",
        "id": 328613218,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676700678
    },
    {
        "content": "<p>What should I do about it?</p>",
        "id": 328613293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676700740
    },
    {
        "content": "<p>Probably <code>AlgebraCast</code> should be a standalone class</p>",
        "id": 328638364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676715498
    },
    {
        "content": "<p>Then you can build that up front, and add the structure later</p>",
        "id": 328638400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676715516
    },
    {
        "content": "<p>This will work for <code>NNReal</code>s but I'm afraid that some lemmas about <code>Nat</code> or <code>Int</code> formulated after <code>Algebra.cast</code> can accidentally use <code>Algebra.cast</code>. What about making <code>Algebra.cast</code> a scoped instance?</p>",
        "id": 328671800,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676728252
    },
    {
        "content": "<p>The problem with <code>AlgebraCast</code> is that this is a solution half-way towards \"let's create our own <code>MathlibCoe</code> class and use it for all <code>Coe</code>s\". IMHO, we should either avoid generic <code>Coe</code>s like <code>Algebra.cast</code> or move to <code>MathlibCoe</code> (with a better name) everywhere.</p>",
        "id": 328688156,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676734285
    },
    {
        "content": "<p>Isn't one of the advantages of the Lean4 approach that a <code>coe</code> can also be a bundled morphism? Probably at least we need <code>RingHomCoe</code>, <code>GroupHomCoe</code> etc ?</p>",
        "id": 328720852,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1676750901
    },
    {
        "content": "<p>I don't want to change too much during port.</p>",
        "id": 328721050,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676751033
    },
    {
        "content": "<p>We can try different options later.</p>",
        "id": 328721074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1676751056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>: the <code>@[coe]</code> attribute can't be used on bundled morphisms</p>",
        "id": 328809149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676813886
    },
    {
        "content": "<p>Oh. I didn't realise that. In the long run we need to know that coercions are morphisms right?</p>",
        "id": 328815160,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1676816436
    },
    {
        "content": "<p>And in a way that lets us do things like <code>hom_ext</code>.</p>",
        "id": 328815330,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1676816494
    },
    {
        "content": "<blockquote>\n<p>In the long run we need to know that coercions are morphisms right?</p>\n</blockquote>\n<p>Yes, but often the type of morphism depends on the ambient structure. <code>x =&gt; (x, x)</code> would be a reasonable coercion, that's additive if <code>X</code> is, multiplicative if <code>X</code> is, etc. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  already made this refactor in Lean3, but it was reverted as it was deemed to interfere with the port.</p>",
        "id": 328816399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676816929
    }
]