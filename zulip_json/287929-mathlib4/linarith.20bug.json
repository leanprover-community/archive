[
    {
        "content": "<p>Have we seen this (apparent?) linarith bug before?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic failed, resulting expression contains metavariables</span>\n<span class=\"cm\">  Linarith.lt_irrefl</span>\n<span class=\"cm\">    (Eq.mp</span>\n<span class=\"cm\">      (Eq.mpr</span>\n<span class=\"cm\">          (id</span>\n<span class=\"cm\">            (congrFun</span>\n<span class=\"cm\">              (congrArg Eq</span>\n<span class=\"cm\">                (Eq.trans</span>\n<span class=\"cm\">                  (Mathlib.Tactic.Ring.add_congr</span>\n<span class=\"cm\">                    (Mathlib.Tactic.Ring.neg_congr</span>\n<span class=\"cm\">                      (Mathlib.Tactic.Ring.cast_pos (Mathlib.Meta.NormNum.isNat_ofNat ℤ (Eq.refl 1)))</span>\n<span class=\"cm\">                      (Mathlib.Tactic.Ring.neg_add</span>\n<span class=\"cm\">                        (Mathlib.Tactic.Ring.neg_one_mul</span>\n<span class=\"cm\">.............</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 355013127,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682994872
    },
    {
        "content": "<p>I have to run in a moment, and haven't got to the bottom of this. The error is in <code>linearFormsAndMaxVar</code>.</p>",
        "id": 355015801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682996498
    },
    {
        "content": "<p>It receives inequalities: <code>[-1 &lt; 0, 2 ^ i - 2 ^ n ≤ 0, 2 ^ n - 2 ^ i + 1 ≤ 0] </code> (looks correct to me), but returns <code>[[(0, -1)]&lt;0, []≤0, [(0, 1)]≤0] </code>, which I think is saying <code>-1 &lt; 0, 0 ≤ 0, 1 ≤ 0</code>.</p>",
        "id": 355015947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682996602
    },
    {
        "content": "<p>The <code>2 ^ i</code> and <code>2 ^ n</code> atoms are just being dropped.</p>",
        "id": 355015961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682996620
    },
    {
        "content": "<p>Then we call ring on the output of FM on that we get an equation ring can't solve, and it is returning the metavariable.</p>",
        "id": 355016054,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682996663
    },
    {
        "content": "<p>Found it; it's a stupid variable shadowing bug.</p>",
        "id": 355016318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682996836
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3760\">!4#3760</a></p>",
        "id": 355017731,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682997811
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 355018388,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1682998254
    }
]