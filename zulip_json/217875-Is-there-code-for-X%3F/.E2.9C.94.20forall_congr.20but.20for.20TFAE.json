[
    {
        "content": "<p>Do we have a nice way to turn <code>∀ i, TFAE [P₁ i, P₂ i, P₃ i]</code> into <code>TFAE [∀ i, P₁ i, ∀ i, P₂ i, ∀ i, P₃ i]</code>? I tried to prove it but I can't even find a nice way to state it since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map#doc\">docs#List.map</a> wants Types.</p>",
        "id": 370775390,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688043983
    },
    {
        "content": "<p>The condition <code>∀ i, TFAE [P₁ i, P₂ i, P₃ i]</code> is stronger than the condition <code>TFAE [(∀ i, P₁ i), (∀ i, P₂ i), (∀ i, P₃ i)]</code> afaik.<br>\nSo you are talking about having <code>∀ i, TFAE [P₁ i, P₂ i, P₃ i]</code> as a hypothesis in the context, right?</p>",
        "id": 370792297,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688046891
    },
    {
        "content": "<p>You want a lemma <code>∀ P₁, ∀ P₂, ∀ P₃, (∀ i, TFAE [P₁ i, P₂ i, P₃ i]) → (TFAE [(∀ i, P₁ i), (∀ i, P₂ i), (∀ i, P₃ i)])</code> exactly for three relations?</p>",
        "id": 370793432,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688047085
    },
    {
        "content": "<p>Yes I want to deduce the second one from the first, the point being that it would be nice to have it for an arbitrary list</p>",
        "id": 370834507,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688053814
    },
    {
        "content": "<p>Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.TFAE</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">asdf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">P</span><span class=\"bp\">ᵢ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span><span class=\"bp\">ᵢ</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">TFAE</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">P</span><span class=\"bp\">ᵢ</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">ᵢ</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">TFAE</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 370844973,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688055660
    },
    {
        "content": "<p>Wait, how does that work since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map#doc\">docs#List.map</a> doesn’t want propositions ??? (I’m not at my computer)</p>",
        "id": 370846557,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688055959
    },
    {
        "content": "<p>It does typecheck.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.TFAE</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">TFAE_congr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">ass</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">TFAE</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">TFAE</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p₁</span> <span class=\"n\">hp₁</span> <span class=\"n\">p₂</span> <span class=\"n\">hp₂</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp₁</span> <span class=\"n\">hp₂</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hp₁</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xin</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hp₂</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">yin</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intros</span> <span class=\"n\">hyp</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">specialize</span> <span class=\"n\">ass</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"n\">any_goals</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.mem_map</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xin</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">yin</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>I am sure somebody can golf it more.</p>",
        "id": 370847533,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688056135
    },
    {
        "content": "<p>/me is stupid: <code>Prop</code> is a type...</p>",
        "id": 370885907,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688063476
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 370885959,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688063487
    },
    {
        "content": "<p>Did you have a legitimate use case? If so, I would PR the lemma to Mathlib4.</p>",
        "id": 370887117,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688063719
    },
    {
        "content": "<p>Yes I do! Here's a golfed proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">forall_TFAE</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">TFAE</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">TFAE</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">TFAE</span><span class=\"o\">,</span> <span class=\"n\">List.forall_mem_map_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p₁</span> <span class=\"n\">hp₁</span> <span class=\"n\">p₂</span> <span class=\"n\">hp₂</span>\n  <span class=\"n\">exact</span> <span class=\"n\">forall_congr'</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_map_of_mem</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hp₁</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_map_of_mem</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hp₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I think this name is better, but tbh I don't care)</p>",
        "id": 370888356,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688063951
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5624\">#5624</a></p>",
        "id": 371168047,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688132640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> has marked this topic as resolved.</p>",
        "id": 371168114,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688132644
    }
]