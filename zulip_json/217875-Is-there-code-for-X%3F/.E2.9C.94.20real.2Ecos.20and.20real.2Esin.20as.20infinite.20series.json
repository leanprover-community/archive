[
    {
        "content": "<p>Do we have a lemma that expresses <code>real.cos</code> and <code>real.sin</code> in terms of a <code>tsum</code> of even and odd powers respectively, with alternating signs?</p>",
        "id": 325193524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675266344
    },
    {
        "content": "<p>I don't believe so, but I've been wrong before. I just spent a while looking.</p>",
        "id": 325195824,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675266907
    },
    {
        "content": "<p>surely this should be easy given the definition?</p>",
        "id": 325199339,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675267736
    },
    {
        "content": "<p>It's definitely a bit annoying, unless I'm missing some magic. This could certainly be improved, and it's not quite done (I need to deal with the <code>ite</code> in the sum), but I need to go teach soon. Of course, this is only for <code>complex.cos</code>, but once you have that then I think the real one should just fall out with some coercions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exponential</span>\n\n<span class=\"bp\">.</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.numerals</span> <span class=\"n\">true</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">complex.cos_eq_tsum</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cos</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cos</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex.exp_eq_exp_ℂ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">exp_eq_tsum_div</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">tsum_add</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b.factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b.factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_eq_mul_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.exists_two_nsmul</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">neg_sq</span><span class=\"o\">,</span> <span class=\"n\">I_sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel_left</span> <span class=\"n\">n</span> <span class=\"n\">zero_lt_two</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.odd_iff_not_even</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.exists_bit1</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">_</span><span class=\"o\">)],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_mul</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">neg_sq</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">zero_div</span><span class=\"o\">],</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_div</span><span class=\"o\">],</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">refine</span> <span class=\"n\">summable_of_summable_norm</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_div</span><span class=\"o\">,</span> <span class=\"n\">norm_nat</span><span class=\"o\">,</span> <span class=\"n\">norm_pow</span><span class=\"o\">,</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">abs_I</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">real.summable_pow_div_factorial</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325207963,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675269972
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_even_add_odd\">docs#tsum_even_add_odd</a> help at all here?</p>",
        "id": 325208134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675270019
    },
    {
        "content": "<p>ahh I was gonna make a weird case split</p>",
        "id": 325208236,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675270045
    },
    {
        "content": "<p>I think that specific lemma will be very helpful :b</p>",
        "id": 325208293,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675270055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/real.2Ecos.20and.20real.2Esin.20as.20infinite.20series/near/325199339\">said</a>:</p>\n<blockquote>\n<p>surely this should be easy given the definition?</p>\n</blockquote>\n<p>I didn't try it because I was already in the middle of a \"this should be easy given the definition\" proof about exponentials</p>",
        "id": 325209904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675270465
    },
    {
        "content": "<p>(that one is <a href=\"https://github.com/leanprover-community/mathlib/pull/18349\">#18349</a>)</p>",
        "id": 325216799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675271031
    },
    {
        "content": "<p>do we have that the real part of a tsum is the sum of the real parts?</p>",
        "id": 325217555,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675271220
    },
    {
        "content": "<p>(I guess as usual this needs the summable hypotheses sprinkled everywhere which is an absolute nightmare)</p>",
        "id": 325217708,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675271260
    },
    {
        "content": "<p>it'd be nice if there was some sort of automation that kept track of what I did to a <code>tsum</code> and tried to carry around summability as well but I guess it would have to be pretty clever</p>",
        "id": 325218165,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675271386
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tsum_add_zeros</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- nearly done with this proof</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">complex.cos_eq_tsum</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cos</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cos</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex.exp_eq_exp_ℂ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">exp_eq_tsum_div</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">tsum_add</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b.factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">b.factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_eq_mul_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.exists_two_nsmul</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">neg_sq</span><span class=\"o\">,</span> <span class=\"n\">I_sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel_left</span> <span class=\"n\">n</span> <span class=\"n\">zero_lt_two</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.odd_iff_not_even</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.exists_bit1</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">two_nsmul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">_</span><span class=\"o\">)],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_mul</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">neg_sq</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">zero_div</span><span class=\"o\">],</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_div</span><span class=\"o\">],</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">tsum_add_zeros</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">tsum_mul_left</span><span class=\"o\">],</span>\n    <span class=\"n\">congr'</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_bit0</span><span class=\"o\">,</span> <span class=\"n\">algebra_map.coe_one</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"bp\">$</span> <span class=\"n\">two_ne_zero'</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.mul_div_cancel_left</span> <span class=\"n\">_</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">summable_of_summable_norm</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_div</span><span class=\"o\">,</span> <span class=\"n\">norm_nat</span><span class=\"o\">,</span> <span class=\"n\">norm_pow</span><span class=\"o\">,</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">abs_I</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">real.summable_pow_div_factorial</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325230481,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675274538
    },
    {
        "content": "<p>I'm nearly there, just need a small lemma</p>",
        "id": 325230516,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675274549
    },
    {
        "content": "<p>Here's my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">complex.cos_eq_tsum</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cos</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cos</span><span class=\"o\">,</span> <span class=\"n\">complex.exp_eq_exp_ℂ</span><span class=\"o\">,</span> <span class=\"n\">exp_eq_tsum_div</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">tsum_add</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_div</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">heven</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n      <span class=\"o\">((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">I_sq</span><span class=\"o\">,</span> <span class=\"n\">neg_sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n      <span class=\"o\">((</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">I_sq</span><span class=\"o\">,</span> <span class=\"n\">neg_sq</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">add_right_neg</span><span class=\"o\">,</span> <span class=\"n\">zero_div</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">tsum_even_add_odd</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">heven</span><span class=\"o\">,</span> <span class=\"n\">hodd</span><span class=\"o\">,</span> <span class=\"n\">tsum_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">tsum_mul_left</span><span class=\"o\">,</span>\n        <span class=\"n\">mul_div_cancel_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">two_ne_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">pow_mul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">heven</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">summable.mul_left</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">summable_of_summable_norm</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_div</span><span class=\"o\">,</span> <span class=\"n\">norm_nat</span><span class=\"o\">,</span> <span class=\"n\">norm_pow</span><span class=\"o\">,</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">abs_I</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">norm_neg</span><span class=\"o\">,</span>\n        <span class=\"n\">norm_one</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">real.summable_pow_div_factorial</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_injective</span> <span class=\"o\">(</span><span class=\"n\">mul_right_injective₀</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">)},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hodd</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">summable_zero</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">summable_of_summable_norm</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_div</span><span class=\"o\">,</span> <span class=\"n\">norm_nat</span><span class=\"o\">,</span> <span class=\"n\">norm_pow</span><span class=\"o\">,</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">abs_I</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">real.summable_pow_div_factorial</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325230521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675274550
    },
    {
        "content": "<p>urgh, and I'm gueessing it's not straightforward that that summable comes from the normal exponential <code>summable</code>?</p>",
        "id": 325231043,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675274663
    },
    {
        "content": "<p>Edit: sorry-free</p>",
        "id": 325231549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675274781
    },
    {
        "content": "<p>Followed by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">real.cos_eq_tsum</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">real.cos</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.cos</span><span class=\"o\">,</span> <span class=\"n\">complex.cos_eq_tsum</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">complex.re_clm_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">continuous_linear_map.map_tsum</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">complex.re_clm_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">of_real_pow</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">of_real_nat_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">of_real_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">of_real_pow</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">of_real_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">of_real_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">of_real_div</span><span class=\"o\">,</span> <span class=\"n\">of_real_re</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">summable_of_summable_norm</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_div</span><span class=\"o\">,</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_neg</span><span class=\"o\">,</span> <span class=\"n\">norm_pow</span><span class=\"o\">,</span> <span class=\"n\">norm_one</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">is_R_or_C.norm_of_real</span><span class=\"o\">,</span> <span class=\"n\">norm_nat</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">real.summable_pow_div_factorial</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_injective</span> <span class=\"o\">(</span><span class=\"n\">mul_right_injective₀</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(edit: PR'd as <a href=\"https://github.com/leanprover-community/mathlib/pull/18352\">#18352</a>)</p>",
        "id": 325234280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675275486
    },
    {
        "content": "<p>Side question, does mathlib has <code>log 2 = 1 - 1/2 + 1/3 - 1/4 + ...</code> or even <code>pi/4 = 1 - 1/3 + 1/5 - 1/7 + ...</code>? We do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.has_sum_log_sub_log_of_abs_lt_1\">docs#real.has_sum_log_sub_log_of_abs_lt_1</a> but it doesn't apply for <code>x = -1</code>, since the series is not absolutely convergent, so <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum\">docs#has_sum</a> is not applicable. What should be the mathlib way of talking about conditionally convergent series? For power series we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/taylor_within\">docs#taylor_within</a> for the partial sums. I imagine this question is of some interest to analytic number theory developers.</p>",
        "id": 325234755,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675275619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> if we're going to do <code>cos</code>, then we might as well do <code>sin</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/18352\">#18352</a> as well.</p>",
        "id": 325237387,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675276333
    },
    {
        "content": "<p>Oh, turns out we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.tendsto_sum_pi_div_four\">docs#real.tendsto_sum_pi_div_four</a> because it's on Freek's list ... and it's stated using <code>(finset.range _).sum</code>. What about the other?</p>",
        "id": 325237485,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675276358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/real.2Ecos.20and.20real.2Esin.20as.20infinite.20series/near/325237387\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> if we're going to do <code>cos</code>, then we might as well do <code>sin</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/18352\">#18352</a> as well.</p>\n</blockquote>\n<p>Do you have a smarter approach in mind than repeat the whole proof?</p>",
        "id": 325237684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675276411
    },
    {
        "content": "<p>Maybe go via <code>complex.I * sin z = complex.exp (complex.I * z) - complex.cos z</code> and use <code>tsum_even_add_odd</code> again and cancel with <code>complex.cos_eq_tsum</code>. I think it might be slightly easier.</p>",
        "id": 325238221,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675276558
    },
    {
        "content": "<p>I'll give it a shot real quick.</p>",
        "id": 325239554,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675276900
    },
    {
        "content": "<p>Thanks, I made an attempt at the \"repeat the whole proof\" approach but it was annoying</p>",
        "id": 325239698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675276932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/real.2Ecos.20and.20real.2Esin.20as.20infinite.20series/near/325218165\">said</a>:</p>\n<blockquote>\n<p>it'd be nice if there was some sort of automation that kept track of what I did to a <code>tsum</code> and tried to carry around summability as well but I guess it would have to be pretty clever</p>\n</blockquote>\n<p>You don't need automation or cleverness, you just need <code>tsum</code> to be a partial function</p>",
        "id": 325239943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675277024
    },
    {
        "content": "<p>(&amp; then you might need two versions of lemmas depending on which side you are using to prove that the other side is well-defined)</p>",
        "id": 325240378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675277147
    },
    {
        "content": "<p>By \"partial function\" you mean \"takes in a hypothesis\" as opposed to \"emits junk\" I assume?</p>",
        "id": 325241579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675277439
    },
    {
        "content": "<p>Where is the result that a subsequence of a summable thing is summable?</p>",
        "id": 325243758,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675277999
    },
    {
        "content": "<p>Oh, I guess it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable.comp_injective\">docs#summable.comp_injective</a></p>",
        "id": 325243946,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675278041
    },
    {
        "content": "<p>Right; I used that in the proof :)</p>",
        "id": 325244048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675278068
    },
    {
        "content": "<p>You can clean this up as you see fit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">complex.sin_eq_tsum</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">complex.sin</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sin</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">cos</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exp_mul_I</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel'</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"n\">_</span> <span class=\"n\">I_ne_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exp_eq_exp_ℂ</span><span class=\"o\">,</span> <span class=\"n\">exp_eq_tsum_div</span><span class=\"o\">,</span> <span class=\"n\">cos_eq_tsum</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">tsum_even_add_odd</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">z</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">I_sq</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel'</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsum_mul_left</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"n\">I_ne_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">all_goals</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">summable_of_summable_norm</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_div</span><span class=\"o\">,</span> <span class=\"n\">complex.norm_nat</span><span class=\"o\">,</span> <span class=\"n\">norm_pow</span><span class=\"o\">,</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">complex.abs_I</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">real.summable_pow_div_factorial</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_injective</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mul_right_injective₀</span> <span class=\"n\">two_ne_zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">add_left_injective</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">mul_right_injective₀</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325245653,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675278524
    },
    {
        "content": "<p>Seems better than just copying the proof.</p>",
        "id": 325245834,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675278577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/real.2Ecos.20and.20real.2Esin.20as.20infinite.20series/near/325239943\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/real.2Ecos.20and.20real.2Esin.20as.20infinite.20series/near/325218165\">said</a>:<br>\nYou don't need automation or cleverness, you just need <code>tsum</code> to be a partial function</p>\n</blockquote>\n<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum\">docs#has_sum</a>, which does exactly that (combine the summability assertion with the assertion on the value of the sum).</p>",
        "id": 325254273,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1675281019
    },
    {
        "content": "<p>Here's an approach using <code>has_sum</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- could have four versions of this; left/right multiplication and `fin n` on the left / right -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.div_mod_equiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne_zero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">p.2</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat.div_add_mod'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">prod.ext</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fin.ext</span> <span class=\"bp\">$</span> <span class=\"n\">nat.mul_add_mod_of_lt</span> <span class=\"n\">p.snd.is_lt</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_mul_div_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_zero.pos</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">nat.div_eq_zero</span> <span class=\"n\">p.2.is_lt</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">complex.cos_eq_tsum'</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">complex.cos</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">has_sum.tsum_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex.cos</span><span class=\"o\">,</span> <span class=\"n\">complex.exp_eq_exp_ℂ</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">exp_series_div_has_sum_exp</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n          <span class=\"o\">(</span><span class=\"n\">exp_series_div_has_sum_exp</span> <span class=\"n\">ℂ</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">div_const</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">nat.div_mod_equiv</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm.has_sum_iff.mpr</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">function.comp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_comm</span> <span class=\"mi\">2</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">this.prod_fiberwise</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">has_sum_fintype</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fin.sum_univ_two</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_zero</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_one</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">neg_sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_div</span><span class=\"o\">,</span> <span class=\"n\">add_right_neg</span><span class=\"o\">,</span> <span class=\"n\">zero_div</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_div_cancel_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">two_ne_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">complex.cos_eq_tsum</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">complex.cos</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">complex.cos_eq_tsum'</span><span class=\"o\">,</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">complex.I_sq</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 325299717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675300031
    },
    {
        "content": "<p>I was surprised not to be able to find <code>nat.div_mod_equiv (n : ℕ) [ne_zero n] : ℕ ≃ ℕ × fin n</code> or anything similar</p>",
        "id": 325299833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675300110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/real.2Ecos.20and.20real.2Esin.20as.20infinite.20series/near/325234755\">said</a>:</p>\n<blockquote>\n<p>Side question, does mathlib has <code>log 2 = 1 - 1/2 + 1/3 - 1/4 + ...</code> or even <code>pi/4 = 1 - 1/3 + 1/5 - 1/7 + ...</code>? We do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.has_sum_log_sub_log_of_abs_lt_1\">docs#real.has_sum_log_sub_log_of_abs_lt_1</a> but it doesn't apply for <code>x = -1</code>, since the series is not absolutely convergent, so <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum\">docs#has_sum</a> is not applicable. What should be the mathlib way of talking about conditionally convergent series? For power series we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/taylor_within\">docs#taylor_within</a> for the partial sums. I imagine this question is of some interest to analytic number theory developers.</p>\n</blockquote>\n<p>There's an argument that we should prove these results via proving the power series within its radius of convergence and then applying Abel's theorem (I don't know if we have Abel's theorem in mathlib).</p>",
        "id": 325302662,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1675302514
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18352\">#18352</a> should now be ready for review, all its dependencies are merged</p>",
        "id": 326663715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675882851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I left a few comments.</p>",
        "id": 326669348,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675884774
    },
    {
        "content": "<p>Thanks, addressed!</p>",
        "id": 326672791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675885964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as resolved.</p>",
        "id": 326844578,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675956498
    },
    {
        "content": "<p>Just to note that the motivation for all this, <a href=\"https://github.com/leanprover-community/mathlib/pull/18349\">#18349</a>, is ready for review</p>",
        "id": 341535277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678729925
    },
    {
        "content": "<p>I've assigned myself. I should be able to get around to it tonight or tomorrow.</p>",
        "id": 341537451,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678730537
    }
]