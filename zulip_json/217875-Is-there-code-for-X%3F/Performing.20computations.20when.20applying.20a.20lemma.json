[
    {
        "content": "<p>Hi!</p>\n<p>As an exercise (for me), I have formalised the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sequence_tendsto</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous_function_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x0</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x0</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">limit_f_circ_u</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">sequence_tendsto</span> <span class=\"n\">u</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">continuous_function_at</span> <span class=\"n\">f</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n<span class=\"n\">sequence_tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>But now I would like to apply it to the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sequence_tendsto</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">∘</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I started off like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">limit_f_circ_u</span> <span class=\"n\">g</span> <span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">),</span>\n<span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">nat.floor</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">ε</span><span class=\"o\">),</span>\n<span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So now my goal is <code>|(↑n)⁻¹| &lt; ε</code>. I have tried a bunch of things and I am getting close but it is all very ugly. Is there an approach that you would recommend to handle such computations when applying a lemma?</p>\n<p>If my function <code>g</code> and my sequence <code>v</code> were more complicated, it would be even more tedious to find the correct <code>N</code> and <code>δ</code> and show that <code>v</code> has a limit <code>x0</code> and  that <code>g</code> is continuous at <code>x0</code>,  so any suggestion would be greatly appreciated :-)</p>\n<p>Here is for instance what I wrote to prove that <code>g</code> is continuous at <code>0</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span>\n<span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">x_small</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">x_small</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>All comments are welcome! Thank you :-)</p>",
        "id": 326317287,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675762641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span> Do you know about filters?</p>",
        "id": 326318078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675762858
    },
    {
        "content": "<p>They allow you to work with limits and such without needing to find <code>N</code> and <code>delta</code> etc</p>",
        "id": 326318136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675762883
    },
    {
        "content": "<p>And this is what mathlib does all over the place.</p>",
        "id": 326318161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675762891
    },
    {
        "content": "<p>A very brief explanation can be found at <a href=\"https://leanprover-community.github.io/mathlib_docs/order/filter/basic.html#top\">https://leanprover-community.github.io/mathlib_docs/order/filter/basic.html#top</a></p>",
        "id": 326318350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675762940
    },
    {
        "content": "<p>A somewhat longer explanation is <a href=\"https://leanprover-community.github.io/theories/topology.html\">https://leanprover-community.github.io/theories/topology.html</a></p>",
        "id": 326318448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675762976
    },
    {
        "content": "<p>I see. So this type of concrete question should be dealt with using filters?</p>\n<p>I know the mathematical object, so I can probably use them here.  I will look at the reference and search for examples! Thanks :-)</p>",
        "id": 326318945,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675763154
    },
    {
        "content": "<p>Sometimes you need to do a concrete calculation. Then mathlib provides a lemma that puts you back in epsilon-delta world. But for things like: composition of limits, it is very much prefered to work with filters.</p>",
        "id": 326319690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675763389
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto.comp/src\">src#filter.tendsto.comp</a> -- the proof is now a 1-liner!</p>",
        "id": 326319704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675763395
    },
    {
        "content": "<p>I suppose that in a lecture I would just say \"this sequences tends to 0 and this function is continuous at 0 so...\" but not prove it in more detail. If asked about the function, I would just say it's a polynomial function, so it's continuous. I'm sure I can find that somewhere in Mathlib. But I am not sure what kind of argument I would use for the sequence if I was asked to provide one (except for going back to the epsilon-delta definition).</p>",
        "id": 326319784,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675763410
    },
    {
        "content": "<p>I should have mentioned that this is the type of exercise I would like to ask my students to solve in my course next semester, so that's also why I am trying to find a basic approach.</p>",
        "id": 326320145,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675763526
    },
    {
        "content": "<p>I think Patrick succesfully teaches filters. They shouldn't be too hard to demystify</p>",
        "id": 326320264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675763584
    },
    {
        "content": "<p>Yes, I'll check the webpage for his course again. Thanks for the suggestion :)</p>",
        "id": 326320895,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675763767
    },
    {
        "content": "<p>I teach filters to mathematicians, not to my first year undergrads.</p>",
        "id": 326352245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675773515
    },
    {
        "content": "<p>With my first years undergrad I don't do concrete computations, only abstract proofs. They do concrete computations for one full term before coming to my class. My class is all about abstract proofs. I do need that 1/n goes to zero but I give it as a lemma they don't need to prove.</p>",
        "id": 326352486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675773588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Performing.20computations.20when.20applying.20a.20lemma/near/326352486\">said</a>:</p>\n<blockquote>\n<p>I do need that 1/n goes to zero but I give it as a lemma they don't need to prove.</p>\n</blockquote>\n<p>OK, I see.  Thanks :-)</p>",
        "id": 326361452,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675776364
    },
    {
        "content": "<p>By the way, if I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sequence_tendsto</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sequence_tendsto</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">∘</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and in tactic mode I write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>is there a way to have Lean understand if I write<code>show (∀ ε&gt;0, ∃ N : ℕ, ∀ n &gt; N, |v n| &lt; ε)</code> directly?</p>",
        "id": 326362992,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675776792
    },
    {
        "content": "<p>Does <code>simp [sequence_tendsto]</code> work as a proof?</p>",
        "id": 326363284,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675776871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span> Do you mean that you want to write the <code>show</code> statement, and the <code>simp</code> should be done by Lean behind the scenes?</p>",
        "id": 326363428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675776914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I mean either write<br>\n<code>show (∀ ε&gt;0, ∃ N : ℕ, ∀ n &gt; N, |v n - 0| &lt; ε)</code> <br>\nand have Lean give me directly <br>\n<code>∀ (ε : ℝ), 0 &lt; ε → (∃ (N : ℕ), ∀ (n : ℕ), N &lt; n → |v n| &lt; ε)</code> <br>\nas a goal (without having to enter <code>simp,</code>). Or, better yet, simply write <br>\n<code>show (∀ ε&gt;0, ∃ N : ℕ, ∀ n &gt; N, |v n | &lt; ε)</code><br>\nand have Lean understand that this indeed matches what appears in <code>def sequence_tendsto</code> because here <code>l=0</code>.</p>",
        "id": 326366495,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675777770
    },
    {
        "content": "<p>Aha, maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span>\n<span class=\"o\">{</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sequence_tendsto</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>will work?</p>",
        "id": 326366831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1675777857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Performing.20computations.20when.20applying.20a.20lemma/near/326363284\">said</a>:</p>\n<blockquote>\n<p>Does <code>simp [sequence_tendsto]</code> work as a proof?</p>\n</blockquote>\n<p>Oh! Yes, it does! Thanks :-))</p>",
        "id": 326366953,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675777891
    },
    {
        "content": "<p>To sum up: when the goal is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">sequence_tendsto</span> <span class=\"n\">v</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>then entering </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sequence_tendsto</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>changes the goal to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">N</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is what I wanted.</p>",
        "id": 326367674,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675778098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Performing.20computations.20when.20applying.20a.20lemma/near/326366831\">said</a>:</p>\n<blockquote>\n<p>Aha, maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span>\n<span class=\"o\">{</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sequence_tendsto</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>will work?</p>\n</blockquote>\n<p>Also works! Thank you both :)</p>",
        "id": 326367923,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675778183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span> I do limits and continuity the way it's taught to first year undergraduates when I teach my lean course and I never mention filters to them.</p>",
        "id": 326402729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675787202
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ! Great, I want to do that too. </p>\n<p>And would you suggest to use the fact that 1/n tends to zero without proof? Or is it something that you think is worth proving in an introductory course? I will look again at your course more in detail. </p>\n<p>I think that I would like to ask my students to prove such facts formally, but my concern is that I may write something unnecessarily complicated because I’m not aware of the correct tactics to use for such things.</p>",
        "id": 326415775,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675790640
    },
    {
        "content": "<p>Did you do the tutorials project? It is based on what I was doing with my students three years ago (and what I'm doing currently is not very different except it uses controlled natural languages tactics).</p>",
        "id": 326416648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675790851
    },
    {
        "content": "<p>I believe this is where I took the lemma from  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Then I just thought I would add some non-abstract examples. So it is really with the computations that I am running into trouble.</p>",
        "id": 326418718,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675791381
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ |(↑n)⁻¹| &lt; ε</span>\n  <span class=\"c1\">-- I wouldn't have defined N, it's just getting in the way</span>\n  <span class=\"n\">change</span> <span class=\"bp\">⌊</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ε</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- know |n⁻¹|=n⁻¹</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abs_eq_self.2</span><span class=\"o\">,</span> <span class=\"c1\">-- I guessed the name</span>\n  <span class=\"c1\">-- x⁻¹ &lt; y ↔ y⁻¹ &lt; x</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inv_lt</span><span class=\"o\">,</span> <span class=\"c1\">-- I guessed the name</span>\n  <span class=\"c1\">-- now work on h; I guessed the name of the lemma</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.floor_lt</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- change ε⁻¹ to 1/ε ; I guessed the name</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inv_eq_one_div</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now we're done apart from a bunch of non-negativity hypotheses</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">positivity</span><span class=\"o\">}},</span>\n  <span class=\"c1\">-- only one failed to die, namely 0 &lt; ↑n; do this manually</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"bp\">⌊</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">ε</span><span class=\"bp\">⌋₊</span><span class=\"o\">,</span> <span class=\"c1\">-- I used library_search for this one</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- continuity goal remains</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 326432783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675795535
    },
    {
        "content": "<p>Choosing the topics and exercises that will be possible to do with Lean without introducing any artificial difficulty is a very important part of teaching with Lean. Fortunately that still leaves a lot of options. If you want to focus on computations you should probably ask <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>.</p>",
        "id": 326435461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675796382
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , now it works! For some reason, <code>positivity</code> is not recognised in my example, so I had to write a bit more.</p>\n<p>Next I will try without defining N <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 326448309,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675800630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Performing.20computations.20when.20applying.20a.20lemma/near/326435461\">said</a>:</p>\n<blockquote>\n<p>If you want to focus on computations you should probably ask <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>\n</blockquote>\n<p>Yes, I will definitely do that! But first I should read more from <a href=\"https://hrmacbeth.github.io/computations_in_lean/index.html\">Algebraic computations in Lean</a> <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 326449223,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675800940
    },
    {
        "content": "<p>Thank you everyone.</p>",
        "id": 326449355,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675800966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> has marked this topic as resolved.</p>",
        "id": 326449411,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675800986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> has marked this topic as unresolved.</p>",
        "id": 326449475,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675801008
    },
    {
        "content": "<p>Not quite sure if I should use that check mark... sorry.</p>",
        "id": 326449573,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675801045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Performing.20computations.20when.20applying.20a.20lemma/near/326432783\">said</a>:</p>\n<blockquote>\n<p><code>-- I wouldn't have defined N, it's just getting in the way</code></p>\n</blockquote>\n<p>Actually, this is pretty basic stuff but I am not sure how to solve a goal like the following one without defining an <code>N</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ε</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">ε_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">N</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>\n<p>I'll think more about it.</p>",
        "id": 326453156,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675802288
    },
    {
        "content": "<p>Use the archimedean property.</p>",
        "id": 326455018,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675802941
    },
    {
        "content": "<p>If you want to get almost all the way there: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_nat_one_div_lt\">docs#exists_nat_one_div_lt</a>, but if you want to hew closer to the definition of archimedean, you could do more work and start from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_nat_gt\">docs#exists_nat_gt</a></p>",
        "id": 326455678,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675803164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span> I had to <code>import tactic</code> (the thing I tell all my students to start with)</p>",
        "id": 326458104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675804044
    },
    {
        "content": "<p>For instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">N</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hN'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">N.succ_pos</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hN'.trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">|</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n      <span class=\"o\">:</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">one_div_nonneg.mpr</span> <span class=\"n\">hn'.le</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">one_div_lt_one_div</span> <span class=\"n\">hn'</span> <span class=\"n\">hN'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm not saying this is the absolute cleanest way. The nasty bit is of course the coercions, but that's handled with <code>exact_mod_cast</code> everywhere. However, I would generally recommend hiding coercions from students until it really becomes necessary.</p>",
        "id": 326458117,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675804054
    },
    {
        "content": "<p>And you can just put <code>use thing</code>, instead of <code>let N := thing, use N</code></p>",
        "id": 326458287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675804113
    },
    {
        "content": "<blockquote>\n<p>And you can just put <code>use thing</code>, instead of <code>let N := thing, use N</code></p>\n</blockquote>\n<p>Got it. Thanks!</p>",
        "id": 326458690,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675804265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Performing.20computations.20when.20applying.20a.20lemma/near/326458104\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"513540\">Flo (Florent Schaffhauser)</span> I had to <code>import tactic</code> (the thing I tell all my students to start with)</p>\n</blockquote>\n<p>Huh, funny: this morning I actually added <code>import tactic</code> to my file but still got the following message </p>\n<p><code>unknown identifier 'positivity'</code></p>\n<p>I am working within the mathematics in Lean project.</p>",
        "id": 326517491,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675840154
    },
    {
        "content": "<p>Oh I don't know what version of mathlib that's on. Probably we should bump it, by the sounds of things</p>",
        "id": 326525761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675843785
    },
    {
        "content": "<p>Yes, it probably runs an old mathlib.</p>",
        "id": 326530542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675845552
    },
    {
        "content": "<p>I see. Thanks!</p>",
        "id": 326533012,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1675846457
    }
]