[
    {
        "content": "<p>I need to prove that a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-basis of an integral ideal of a number field  is also a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>-basis of the number field. For the case of the ring of integers, this is done using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.localizationLocalization#doc\">docs#Basis.localizationLocalization</a> but it does not work in this case since it needs a <code>CommRing</code>. I wrote a proof that uses the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> is the fraction field of  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> and that any element of the field multiplied by a large enough integers lies in the ideal. However, it feels this should fit into a larger setting. I believe the following  construction (with probably some adjustment to the hypothesis) would work in my case and would be a worthy addition to Mathlib. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.LocalizedModule</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IsLocalization</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">LocalizedModule</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Basis.localizationLocalizedModule</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">ι</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">LocalizedModule</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Basis.localizedModule_apply</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">b.localizationLocalizedModule</span> <span class=\"n\">M</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">LocalizedModule.mkLinearMap</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, I want to make sure we don't have that in another and that it is the right way to go before working on the proof.</p>",
        "id": 408601398,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702902750
    },
    {
        "content": "<p>I think <code>IsLocalizedModule</code> should be used instead.</p>",
        "id": 408602615,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702903226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Basis.2ElocalizationLocalizedModule/near/408602615\">said</a>:</p>\n<blockquote>\n<p>I think <code>IsLocalizedModule</code> should be used instead.</p>\n</blockquote>\n<p>Well, that would have been the next step after I complete the first version <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 408602778,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702903291
    },
    {
        "content": "<p>The file <code>Mathlib.Algebra.Module.LocalizedModule</code> uses <code>Localization</code> at many places rather than <code>IsLocalization</code>. Is it worth first refactoring the file to use <code>IsLocalization</code> instead or should I just duplicate the results?</p>",
        "id": 408629404,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702911768
    },
    {
        "content": "<p>And this file should probably introduce <code>IsLocalizedModule</code> first with all the proper instances and then <code>LocalizedModule</code> as it is done for <code>Localization</code>. I do not mind doing the changes but I want to make sure it is the right thing to do first...</p>",
        "id": 408636275,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702913911
    },
    {
        "content": "<p>We should use <code>IsLocalization</code> instead. We should still keep the instances though, since typeclass inference cannot figure them out in general.</p>",
        "id": 408643304,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702916081
    }
]