[
    {
        "content": "<p>A student just pointed out that this didn't work (and it's the sort of thing which sometimes didn't work in Lean 3 either):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">IsOpen</span> <span class=\"n\">H</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">typeclass instance problem is stuck, it is often due to metavariables</span>\n<span class=\"cm\">  TopologicalSpace (?m.455 H)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>I always feel like the first two should compile fine. Lean refuses to coerce from <code>Subgroup G</code> to <code>Set G</code>, presumably on the basis that there could <em>in theory</em> be some other coercion it's not found yet which goes from <code>Subgroup G</code> to <code>Set Nat</code> or whatever. Can we fix this with default coercions or some other mechanism in Lean 4?</p>",
        "id": 383230957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691578011
    }
]