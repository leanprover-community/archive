[
    {
        "content": "<p>Is there a command that would find all declarations whose doc-strings contain a given sub-string?  Or all files where a given string appears, maybe in the documentation?</p>\n<p>The motivation comes from teaching: when looking for a theorem, say the fundamental theorem of calculus, is there something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">grep</span> <span class=\"s2\">\"Fundamental Theorem\"</span>\n</code></pre></div>\n<p>that would return something meaningful?</p>\n<p>For the moment, just a substring matching would be great!</p>\n<p>If the string can be a regex, that would be even better!  Or maybe simply ignoring upper/lower-cases would already be useful.</p>",
        "id": 404574650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701161655
    },
    {
        "content": "<p>Something to replace the find in VSCode that does not seem to search inside the <code>build/.lake</code> directory in a Lean project.</p>",
        "id": 404574817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701161728
    },
    {
        "content": "<p>Moogle and loogle are the closest I can think of</p>",
        "id": 404575267,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701161905
    },
    {
        "content": "<p>At least for loogle there are plans for some form of local searching</p>",
        "id": 404575353,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701161943
    },
    {
        "content": "<p>Yes, I told my students about them, and they are good, but you need to leave your editor to use them.</p>",
        "id": 404575410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701161972
    },
    {
        "content": "<p>There is a vscode loogle extension</p>",
        "id": 404575429,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701161982
    },
    {
        "content": "<p>I wrote it and released it three weeks ago</p>",
        "id": 404575450,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701161993
    },
    {
        "content": "<p>Does loogle look at doc-strings, though?</p>",
        "id": 404575541,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701162006
    },
    {
        "content": "<p>I have had mixed results</p>",
        "id": 404575591,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701162022
    },
    {
        "content": "<p>Here is the link to the extension: <a href=\"https://marketplace.visualstudio.com/items?itemName=ShreyasSrinivas.loogle-lean\">https://marketplace.visualstudio.com/items?itemName=ShreyasSrinivas.loogle-lean</a></p>",
        "id": 404575702,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701162060
    },
    {
        "content": "<p>Once I'm at a computer I'll see if the extension does doc-strings search, thanks.</p>",
        "id": 404575842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701162099
    },
    {
        "content": "<p>The extension is a loogle front end. Sometimes you search for something simple and loogle offers some suggestions.</p>",
        "id": 404576076,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701162146
    },
    {
        "content": "<p>The extension does the same thing. But I think (cc: <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> ) loogle can be made to work with docstrings if it doesn't already do so</p>",
        "id": 404576259,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701162206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"fundamental\"</p>",
        "id": 404576406,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701162249
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/Cofinality.html#Ordinal.IsFundamentalSequence\">Ordinal.IsFundamentalSequence</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/Cofinality.html#Ordinal.IsFundamentalSequence.blsub_eq\">Ordinal.IsFundamentalSequence.blsub_eq</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22fundamental%22\">286 more</a></p>",
        "id": 404576414,
        "sender_full_name": "loogle",
        "timestamp": 1701162251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"fundamental\", \"calculus\"</p>",
        "id": 404576467,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701162280
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 404576469,
        "sender_full_name": "loogle",
        "timestamp": 1701162280
    },
    {
        "content": "<p>I checked now. Loogle seems to expect something similar to lean terms. But search by docstrings should definitely be feasible.</p>",
        "id": 404576847,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701162420
    },
    {
        "content": "<p>Moogle does this kind of search better</p>",
        "id": 404576924,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701162449
    },
    {
        "content": "<p><a href=\"https://www.moogle.ai/search/raw?q=Fundamental%20theorem%20of%20calculus\">See your example</a></p>",
        "id": 404577088,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701162508
    },
    {
        "content": "<p>Yes, this is exactly what I told my students.  I was wondering if a Lean command for searching doc-strings was available or not.</p>",
        "id": 404577155,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701162534
    },
    {
        "content": "<p>Also, loogle and moogle do not work for finding results in your own project, I think.</p>",
        "id": 404577737,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701162726
    },
    {
        "content": "<p>Currently nope. I am not aware of a moogle extension yet (we'd need their permission to use their APIs). The loogle extension is the closest to an in-vscode search other than #find.</p>",
        "id": 404577740,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701162726
    },
    {
        "content": "<p>Ok, I'll piece something together myself, thanks!</p>",
        "id": 404577870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701162781
    },
    {
        "content": "<p>The doc-strings are all available via metaprogramming, e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.findDocString#src\">src#Lean.findDocString</a>?</p>",
        "id": 404578565,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701163040
    },
    {
        "content": "<p>And we have KMP: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.Matcher#src\">src#String.Matcher</a></p>",
        "id": 404578883,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701163148
    },
    {
        "content": "<p>Go wild. :-)</p>",
        "id": 404578901,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701163156
    },
    {
        "content": "<p>The documentation for loogle is at <a href=\"https://loogle.lean-lang.org/\">https://loogle.lean-lang.org/</a>; TL;DR: It searches for lemma name substrings (if you use <code>\"…\"</code>), mentioned constants or subexpressions.</p>\n<p>It does not look at the docstrings. Maybe that will come in due course, but at the moment I’m shying away from the complexity (the necessary natural language processing and indexing, showing the docstrings in the results prettily with formatting and search keyword highlighting etc.). I’m inclined to postpone that to when and if loogle gets integrated into the documentation site properly.</p>\n<p>You can run loogle locally, but it requires a few manual steps.</p>",
        "id": 404578959,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701163185
    },
    {
        "content": "<p>Ok, thanks!  I suspected that loogle was not the tool for that.</p>\n<p>I'll try out some simple-minded text search on doc-strings and will report if it seems useful!</p>",
        "id": 404579248,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701163287
    },
    {
        "content": "<p>Currently, my personal approach is to use <code>grep</code>, which of course is awesome, but not all students use the command line.</p>",
        "id": 404579475,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701163364
    },
    {
        "content": "<p>I just use the ctrl+shift+f vscode search for docstring searching, with some regex magic here and there and making sure the cog is off (although that's not as good out of the box as it was in lean3 :/)</p>",
        "id": 404580548,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701163778
    },
    {
        "content": "<p>Eric, does that work with the mathlib files in a project depending on mathlib?  I thought that I tried and it did not work.</p>",
        "id": 404580908,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701163899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> : In case you build a search feature for docstrings, I'd love to integrate into the extension :)</p>",
        "id": 404586225,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701165438
    },
    {
        "content": "<p>Ok, I will be busy for the rest of the day, but this is what I would like to have, except with lots of parameters!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.FundThmCalculus</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">String</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Tactic</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"bp\">←</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">Continuous.deriv_integral</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">Option.isSome</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Matcher.ofString</span> <span class=\"s2\">\"Fundamental theorem\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">doc.get</span><span class=\"bp\">!</span>\n  <span class=\"k\">if</span> <span class=\"n\">res</span> <span class=\"k\">then</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">doc.get</span><span class=\"bp\">!</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 404586854,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701165560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Searching.20doc-strings/near/404580908\">said</a>:</p>\n<blockquote>\n<p>Eric, does that work with the mathlib files in a project depending on mathlib?  I thought that I tried and it did not work.</p>\n</blockquote>\n<p>It doesn't work by default, because the <code>lake-packages</code> is in your <code>.gitignore</code>and VSCode doesn't search through those by default. But that is a setting that you can change.</p>",
        "id": 404587113,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701165604
    },
    {
        "content": "<p>Basically, adding a loop through the decls in the environment, reporting matches and probably doing a more refined filtering.</p>",
        "id": 404587177,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701165614
    },
    {
        "content": "<p>Floris, removing it from gitignore though would show all those files in the git diff, right?</p>",
        "id": 404587419,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701165660
    },
    {
        "content": "<p>There's a button in the search pane you can click to search even in ignored files</p>",
        "id": 404587545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701165681
    },
    {
        "content": "<p>Ah, I see: I can get VSCode to ignore the gitignore restrictions!<br>\nGot it!</p>",
        "id": 404587604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701165693
    },
    {
        "content": "<p>You switch off the blue cog, you tell VS Code to search only in .lean files, and you have exactly what you want as far as I can see</p>",
        "id": 404621374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701173213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Searching.20doc-strings/near/404578959\">said</a>:</p>\n<blockquote>\n<p>The documentation for loogle is at <a href=\"https://loogle.lean-lang.org/\">https://loogle.lean-lang.org/</a>; TL;DR: It searches for lemma name substrings (if you use <code>\"…\"</code>), mentioned constants or subexpressions.</p>\n<p>It does not look at the docstrings. Maybe that will come in due course, but at the moment I’m shying away from the complexity (the necessary natural language processing and indexing, showing the docstrings in the results prettily with formatting and search keyword highlighting etc.). I’m inclined to postpone that to when and if loogle gets integrated into the documentation site properly.</p>\n<p>You can run loogle locally, but it requires a few manual steps.</p>\n</blockquote>\n<p>IMO this concern is misplaced. We should not let perfect be the enemy of good here - you are up against grep as an alternative, so as long as you can deliver something at least as good (that is, exact substring matching) I don't think it is useful to be blocking this indefinitely waiting for some natural language processing thing.</p>",
        "id": 404736068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701213292
    },
    {
        "content": "<p><code>#find \"foo\"</code> should just search for <code>foo</code> appearing in lemma names and docstrings, and defer the formatting and search keyword highlighting until later</p>",
        "id": 404736122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701213325
    },
    {
        "content": "<p>Well, at least you need a way to say </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"s2\">\"and\"</span>\n</code></pre></div>\n<p>and no get all the lemmas that have “and” in the docstring. So some form of qualifier to indicate whether this should be search in names, or docstrings, or both.</p>\n<p>And it would be really bad UX to if you loogle  something and it gives you results that, at first glance, have nothing to do with the query. I guess I could add a “Docstring mentions <code>foo</code>” comment. Or show the docstring in its markdown form.</p>",
        "id": 404809211,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701245862
    },
    {
        "content": "<p>First of all, for my purpose, the VSCode search solved my issue.</p>\n<p>However, you could have a <code>#find \"and\" in docs</code> syntax, with the <code>in</code> optional and maybe taking a <code>*</code> option to search both terms and docs.</p>",
        "id": 404811027,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701246579
    },
    {
        "content": "<p>You could rank the ones that only have a hit in the docstring below label hits. As long as you say somewhere in the documentation that <code>\"foo\"</code> searches in the label and comment, I don't think it will be too confusing if the word <code>foo</code> doesn't appear in the label alone</p>",
        "id": 404811471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701246772
    },
    {
        "content": "<p>Or even <code>#find &lt;term&gt; with \"string\" in docs</code>, to filter both term-like conditions and grep-like ones.</p>",
        "id": 404811504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701246793
    },
    {
        "content": "<p>If there are too many docs hits you could also just completely suppress it with a message like \"very common word <code>and</code> was hidden from search results\". But adding more bells and whistles to the search syntax is probably not good UX, most people won't learn it or will have to look it up every time. At least, assume that people won't be using it most of the time</p>",
        "id": 404811824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701246947
    },
    {
        "content": "<p>IMO unquoted identifiers should be treated as label searches, the current fully qualified only syntax is way too cumbersome</p>",
        "id": 404812127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701247059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Searching.20doc-strings/near/404811504\">said</a>:</p>\n<blockquote>\n<p>Or even <code>#find &lt;term&gt; with \"string\" in docs</code>, to filter both term-like conditions and grep-like ones.</p>\n</blockquote>\n<p>Do you mean like <code>#find &lt;term&gt;, \"string\"</code> with the current syntax (you can comma-separate any number of “filters” or “queries” to form the conjunction), or something else?</p>\n<p>(I guess that proves Mario’s points that users will want to use it without knowing about the query syntax… :-))</p>",
        "id": 404830729,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701253320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Searching.20doc-strings/near/404812127\">said</a>:</p>\n<blockquote>\n<p>IMO unquoted identifiers should be treated as label searches, the current fully qualified only syntax is way too cumbersome</p>\n</blockquote>\n<p>What do you mean by label? The last component of a name?</p>\n<p>Not that if you search for <code>Name</code> loogle will give you a list of suggestions with possible qualified names (like <code>Lean.Name</code>) to refine the search, and this even works in terms.  (Would be great if this worked in Lean as well :-D)<br>\nBut proactively doing a “you probably meant Lean.Name” might be an alternative that I have been pondering.</p>",
        "id": 404831361,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701253505
    },
    {
        "content": "<p>label meaning theorem names. That is, <code>#find foo</code> should search for theorems containing <code>foo</code> in the name, <code>#find \"foo\"</code> should search for theorems containing <code>foo</code> in the docstring</p>",
        "id": 404838178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701255295
    },
    {
        "content": "<p>Joachim, what I had in mind was <code>#find (current syntax for filtering terms) with (add your string match here) in docs</code>.  So, for example, you may want to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">Real.exp</span><span class=\"o\">,</span> <span class=\"n\">LE.le</span> <span class=\"mi\">0</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">|-</span> <span class=\"n\">LE.le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"k\">with</span> <span class=\"s2\">\"intermediate\"</span> <span class=\"k\">in</span> <span class=\"n\">docs</span>\n</code></pre></div>\n<p>and find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.add_one_le_exp_of_nonneg#doc\">docs#Real.add_one_le_exp_of_nonneg</a>.  However, I agree with having a simpler syntax and it took me quite a few attempts to form the example above!</p>\n<p>Let me also emphasize: this is certainly not an immediate concern for me!  I am already very happy with loogle, although I do still find it hard to use.  For this reason, proposing further syntax enhancements may even be counterproductive!</p>\n<p>I like Mario's simpler version, where the doc-string matches are simply mentioned after the term-matches.</p>",
        "id": 404849404,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701259321
    },
    {
        "content": "<p>So, in essence, I would view the <code>with ... in docs</code> as syntax for saying \"and now, sift the term-matches with this grep-like filter on the doc-strings\".</p>",
        "id": 404849688,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1701259390
    },
    {
        "content": "<p>Hmm, but why not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">Real.exp</span><span class=\"o\">,</span> <span class=\"n\">LE.le</span> <span class=\"mi\">0</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">|-</span> <span class=\"n\">LE.le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"s2\">\"intermediate\"</span> <span class=\"k\">in</span> <span class=\"n\">docs</span>\n</code></pre></div>\n<p>how is your <code>with</code> different from a conjunction of queries?</p>",
        "id": 404852567,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701260511
    },
    {
        "content": "<blockquote>\n<p>I am already very happy with loogle, although I do still find it hard to use.</p>\n</blockquote>\n<p>Happy to hear about the first half, but what makes it hard to use?</p>",
        "id": 404852658,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701260534
    },
    {
        "content": "<p>I think including the doc strings in the api could alleviate some of this. Of course it doesn't quite let you search by docs, but at least for the vscode client (and possibly also nvim and emacs), filtering results by docstrings should be possible</p>",
        "id": 404852966,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701260643
    },
    {
        "content": "<p>Currently it is already possible to filter loogle search hits by the label, module name, and type signature</p>",
        "id": 404853834,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701260927
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 404895508,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701272516
    }
]