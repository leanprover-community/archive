[
    {
        "content": "<p>Do we have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Equivalence.homEquiv</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≌</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">e.functor.obj</span> <span class=\"n\">c</span> <span class=\"bp\">⟶</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">⟶</span> <span class=\"n\">e.inverse.obj</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">fd</span> <span class=\"o\">:=</span> <span class=\"n\">e.unit.app</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">e.inverse.map</span> <span class=\"n\">fd</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">fc</span> <span class=\"o\">:=</span> <span class=\"n\">e.functor.map</span> <span class=\"n\">fc</span> <span class=\"bp\">≫</span> <span class=\"n\">e.counit.app</span> <span class=\"n\">_</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">fd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Functor.map_comp</span><span class=\"o\">,</span> <span class=\"n\">Equivalence.fun_inv_map</span><span class=\"o\">,</span> <span class=\"n\">Functor.id_obj</span><span class=\"o\">,</span> <span class=\"n\">Category.assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">Equivalence.counit_app_functor</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Functor.map_comp_assoc</span><span class=\"o\">,</span> <span class=\"n\">Iso.inv_hom_id_app</span><span class=\"o\">,</span>\n      <span class=\"n\">Functor.id_obj</span><span class=\"o\">,</span> <span class=\"n\">Functor.comp_obj</span><span class=\"o\">,</span> <span class=\"n\">Category.comp_id</span><span class=\"o\">,</span> <span class=\"n\">Iso.hom_inv_id_app</span><span class=\"o\">,</span> <span class=\"n\">Functor.id_obj</span><span class=\"o\">,</span>\n      <span class=\"n\">Functor.map_id</span><span class=\"o\">,</span> <span class=\"n\">Category.id_comp</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">fc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Functor.map_comp</span><span class=\"o\">,</span> <span class=\"n\">Equivalence.inv_fun_map</span><span class=\"o\">,</span> <span class=\"n\">Functor.id_obj</span><span class=\"o\">,</span> <span class=\"n\">Category.assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">Equivalence.unit_inverse_comp</span><span class=\"o\">,</span> <span class=\"n\">Iso.hom_inv_id_app_assoc</span><span class=\"o\">,</span> <span class=\"n\">Category.comp_id</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Equivalence#doc\">docs#CategoryTheory.Equivalence</a> ?</p>",
        "id": 391272163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694816114
    },
    {
        "content": "<p>(I'm sure the second sorry is easy enough, but I suspect my approach is suboptimal so didn't want to waste time on it)</p>",
        "id": 391272234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694816157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Equivalence, adjoint</p>",
        "id": 391272659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694816339
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'adjoint'</p>",
        "id": 391272663,
        "sender_full_name": "loogle",
        "timestamp": 1694816339
    },
    {
        "content": "<p>You're asking why an equivalence is an adjunction</p>",
        "id": 391272757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694816384
    },
    {
        "content": "<p><span aria-label=\"magnifying glass\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"magnifying glass\">:magnifying_glass:</span>  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Equivalence.toAdjunction#doc\">docs#CategoryTheory.Equivalence.toAdjunction</a></p>",
        "id": 391277268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694818158
    },
    {
        "content": "<p>That plus <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Adjunction.homEquiv#doc\">docs#CategoryTheory.Adjunction.homEquiv</a></p>",
        "id": 391277974,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694818361
    },
    {
        "content": "<p>Darn, I didn't think of looking in a different file!</p>",
        "id": 391278351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694818447
    },
    {
        "content": "<p>As a follow up, is this proof sensible?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Transport `Limits.IsZero` along an equivalence. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Limits.IsZero.transport</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≌</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">IsZero</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsZero</span> <span class=\"o\">(</span><span class=\"n\">e.functor.obj</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">unique_to</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">hx.unique_to</span> <span class=\"o\">(</span><span class=\"n\">e.inverse.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Equiv.unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">e.toAdjunction.homEquiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">unique_from</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">hx.unique_from</span> <span class=\"o\">(</span><span class=\"n\">e.inverse.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">Equiv.unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">e.symm.toAdjunction.homEquiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 391278934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694818607
    },
    {
        "content": "<p>Or am I missing some more obvious API</p>",
        "id": 391279000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694818632
    },
    {
        "content": "<p>We may have this already?</p>",
        "id": 391279021,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694818644
    },
    {
        "content": "<p>My loogle-foo is subpar… I’ll have to look the old-fashioned way</p>",
        "id": 391279091,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694818670
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 391282991,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694819770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> CategoryTheory.Limits.IsZero, CategoryTheory.Equivalence</p>",
        "id": 391283084,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694819814
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 391283086,
        "sender_full_name": "loogle",
        "timestamp": 1694819815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> CategoryTheory.Limits.IsZero, CategoryTheory.IsEquivalence</p>",
        "id": 391283344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694819886
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 391283347,
        "sender_full_name": "loogle",
        "timestamp": 1694819887
    },
    {
        "content": "<p>Yeah, I couldn't find it either... Here's how I would do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.ZeroObjects</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Preserves.Shapes.Terminal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Adjunction.Limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≌</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">IsZero</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsZero.ofIinitialOfTerminal</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">IsInitial</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">IsTerminal</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsZero</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">unique_to</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">h1.to</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h1.hom_ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">unique_from</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">h2.from</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h2.hom_ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsZero</span> <span class=\"o\">(</span><span class=\"n\">e.functor.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IsZero.ofIinitialOfTerminal</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">hX.isInitial.isInitialObj</span> <span class=\"n\">e.functor</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hX.isTerminal.isTerminalObj</span> <span class=\"n\">e.functor</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 391283429,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694819925
    },
    {
        "content": "<p>I'm surprised we don't have <code>IsZero.ofIinitialOfTerminal</code>... maybe I missed it?</p>",
        "id": 391283520,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694819967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- CategoryTheory.Limits.IsZero _</p>",
        "id": 391283542,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694819984
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Functor.isZero\">CategoryTheory.Functor.isZero</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.isZero_zero\">CategoryTheory.Limits.isZero_zero</a>, and <a href=\"https://loogle.lean-fro.org/?q=%7C-%20CategoryTheory.Limits.IsZero%20_\">20 more</a></p>",
        "id": 391283543,
        "sender_full_name": "loogle",
        "timestamp": 1694819985
    },
    {
        "content": "<p>Note <code>IsZero</code> carries no data so that naming is wrong</p>",
        "id": 391284806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694820561
    },
    {
        "content": "<p>Yeah, I was also careless with making the correct variables implicit.</p>",
        "id": 391285094,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694820679
    },
    {
        "content": "<p>Isn't it that way to avoid clashes with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Zero%3F#doc\">docs#Zero?</a> I'd assumed that's why <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ArithmeticFunction.IsMultiplicative#doc\">docs#Nat.ArithmeticFunction.IsMultiplicative</a> is like that.</p>",
        "id": 391286103,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1694821121
    },
    {
        "content": "<p>I'm talking about the names in  Adam's message not the ones in the docs</p>",
        "id": 391287428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694821714
    }
]