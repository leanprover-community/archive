[
    {
        "content": "<p>Do we have something like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">summable_comp_of_summable_and_differentiableAt</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‚Äñ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">‚ÑÇ</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(or possibly in a more general version)<br>\nI can't find anything. So this is perhaps a nice challenge for our topologists <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nEDIT: added missing condition <code>g 0 = 0</code>.</p>",
        "id": 401438228,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699650649
    },
    {
        "content": "<p>Do you not need <code>g 0 = 0</code>?</p>",
        "id": 401440980,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699652935
    },
    {
        "content": "<p>Like Junyan, I have a counter-example.</p>",
        "id": 401441123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699653073
    },
    {
        "content": "<p>The general assumption should be <code>g(y) = O(y)</code> as y-&gt;0, right</p>",
        "id": 401441139,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699653100
    },
    {
        "content": "<p>And we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_of_isBigO_nat%27#doc\">docs#summable_of_isBigO_nat'</a></p>",
        "id": 401467576,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699671333
    },
    {
        "content": "<p>You can apply it to <code>(hg : g =O[nhds 0] id).comp_tendsto (hf : Summable f).tendsto_atTop_zero</code></p>",
        "id": 401467775,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699671468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Summability.20of.20g.20.E2.88.98.20f/near/401440980\">said</a>:</p>\n<blockquote>\n<p>Do you not need <code>g 0 = 0</code>?</p>\n</blockquote>\n<p>Yes, of course. I realized that after going to bed (it was late, and I was tired...). But I figured that whoever would attempt to prove it would realize that, too. I'm editing my first message to include it.</p>",
        "id": 401491619,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699690799
    },
    {
        "content": "<p>OK, thanks. What I have now is this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">isBigO_id_of_differentiableAt</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">‚ÑÇ</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">g</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">hasDerivAt_deriv_iff</span><span class=\"o\">,</span> <span class=\"n\">hasDerivAt_iff_isLittleO</span><span class=\"o\">,</span> <span class=\"n\">hg‚ÇÄ</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">Asymptotics.IsBigO.const_smul_left</span>\n    <span class=\"o\">(</span><span class=\"n\">Asymptotics.isBigO_refl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">deriv</span> <span class=\"n\">g</span> <span class=\"mi\">0</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Asymptotics.IsBigO.add_isLittleO</span> <span class=\"n\">H</span> <span class=\"n\">hg</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">add_sub_cancel'_right</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">summable_comp_of_summable_and_differentiableAt</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">DifferentiableAt</span> <span class=\"n\">‚ÑÇ</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">‚àò</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">summable_of_isBigO_nat'</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"o\">(</span><span class=\"n\">isBigO_id_of_differentiableAt</span> <span class=\"n\">hg</span> <span class=\"n\">hg‚ÇÄ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp_tendsto</span> <span class=\"n\">hf.tendsto_atTop_zero</span>\n</code></pre></div>\n<p>Is there a neater way to prove the first lemma? I'm just feeling around my way through this part of Mathlib...</p>",
        "id": 401507055,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699705128
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8352\">#8352</a></p>",
        "id": 401530860,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699723685
    },
    {
        "content": "<p>I'm going to add <code>IsBigO.comp_summable</code> in another PR.</p>",
        "id": 401531282,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699724127
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8359\">#8359</a></p>",
        "id": 401551473,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699747381
    }
]