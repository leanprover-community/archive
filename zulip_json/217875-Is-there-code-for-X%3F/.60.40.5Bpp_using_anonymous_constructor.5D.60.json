[
    {
        "content": "<p>Do we have a Lean 4 equivalent for <code>@[pp_using_anonymous_constructor]</code>?  I couldn't find any mention on Zulip.</p>",
        "id": 387349924,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1693001501
    },
    {
        "content": "<p>There's at least not anything like that in the <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Delaborator/Builtins.lean\">builtin delaborators</a></p>",
        "id": 387350281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693001750
    },
    {
        "content": "<p>Apparently the new trend is to just to define ad-hoc unexpanders:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">@[app_unexpander Foo.mk]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandFooMk</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">⟩)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 387365062,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1693011863
    }
]