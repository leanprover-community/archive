[
    {
        "content": "<p>I keep creating examples for my general topology course, and I am stuck in an exercise that consists on proving that $\\mathbb{R}^n$ is a metric space with the norms 1 and infinity, but i haven't found a way to define them.</p>\n<p>So my first problem is how to define <code>$\\mathbb{R}^n$</code>. One way is could think of is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>with the norm 1 defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span>  <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">|</span> <span class=\"n\">u</span>  <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"bp\">|</span>\n</code></pre></div>\n<p>but then even to prove that it is nonnegative by induction, I get stuck in the zero step because I cannot even prove (in a way that my students would find similar to what we do when we prove by hand) that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">0</span><span class=\"o\">)),</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"bp\">|</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>.</p>\n<p>I also tried the approach of defining $\\mathbb{R}^n$ as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>and then the zero step works fine, but i cannot convert the sum over <code>(fin n.succ)</code> to a sum involving a sum along <code>fin n</code>.</p>\n<p>And finally, another problem i am finding is to define the infinity  norm, that involves a <code>max</code> instead of a sum.</p>\n<p>Is there a smart (and simple) way to define such things that looks moreless like what  undergrad students would expect?.</p>",
        "id": 390022118,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1694257241
    },
    {
        "content": "<p>We would normally use <code>fin n → ℝ</code> for this indeed. And while it is possible to manage things involving <code>fin (n+1)</code> it is not very nice and I don't think it would look natural to your undergrads. If you really want to prove that a finite sum of nonnegative terms is nonnegative I'd do that as a separate lemma first (which could be proved by induction on the size of the sum, but working within a fixed general type, rather than some fin n).</p>",
        "id": 390025157,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694258345
    },
    {
        "content": "<p>I think you'll need to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">With1Norm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coords</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n</code></pre></div>\n<p>Otherwise you will have to fight against the fact that mathlib already puts a different norm on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">ℝ^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord amsrm\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 390026084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694258938
    },
    {
        "content": "<p>This of course means you have to show a bunch of stupid results that this is a vector space structure (inherited from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\"> ℝ^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord amsrm\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>)</p>",
        "id": 390026180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694259011
    },
    {
        "content": "<p>How does mathlib define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 390031009,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1694262640
    },
    {
        "content": "<p><code>Fin n -&gt; Real</code></p>",
        "id": 390031240,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694262770
    },
    {
        "content": "<p>Mathlib puts the ∞-norm on <code>Fin n → ℝ </code> by default</p>",
        "id": 390032496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694263781
    },
    {
        "content": "<p>If you want the 1-norm, you can use <code>WithLp 1 (Fin n → ℝ)</code> instead; but I assume the point of the exercise is to build this from scratch, rather than get everything for free!</p>",
        "id": 390032578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694263832
    },
    {
        "content": "<p>There's also <code>EuclideanSpace</code> as a type synonym</p>",
        "id": 390033589,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694264640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Construct.20.24.5Cmathbb.7BR.7D.5En.24.20and.201.2C.20infinity.20norms.20in.20it.2E/near/390032578\">said</a>:</p>\n<blockquote>\n<p>If you want the 1-norm, you can use <code>WithLp 1 (Fin n → ℝ)</code> instead; but I assume the point of the exercise is to build this from scratch, rather than get everything for free!</p>\n</blockquote>\n<p>Yes, exactly, but i will take a look at how <code>WithLp</code> is implemented. If it is reasonably similar to the \"by hand\" approach thet we do in class, i might try to mimic it.</p>\n<p>Edit: I just took a quick look, and I think i can forget about that idea, since the Mathlib approach for Lp spaces uses measure theory, which is beyond the scope of my course.</p>\n<p>I guess I will just leave that kind of exercises out of the short lean demos in the course.</p>",
        "id": 390034103,
        "sender_full_name": "Miguel Marco",
        "timestamp": 1694265042
    },
    {
        "content": "<p>I think you're misreading things; there are multiple Lps in mathlib, but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithLp#doc\">docs#WithLp</a> uses no measure theory</p>",
        "id": 390036722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694267405
    },
    {
        "content": "<p>Ah, specifically <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiLp#doc\">docs#PiLp</a> is what you want</p>",
        "id": 390036819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694267507
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiLp.hasNorm#src\">src#PiLp.hasNorm</a> defines the norm</p>",
        "id": 390036886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694267551
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiLp.hasNorm#src\">src#PiLp.hasNorm</a> defines the norm</p>",
        "id": 390036898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694267561
    },
    {
        "content": "<p>Perhaps for your example, you should import <code>WithLp</code>, but build <code>PiLp</code> yourself?</p>",
        "id": 390036900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694267562
    },
    {
        "content": "<p>One thing to note: in mathlib we take some care to ensure the topology (and uniform space and bornology) generated by the Lp norm coincides with the one generated by the infinity norm, and this is a step you can simply omit from the version you present to your class.</p>",
        "id": 390086209,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694311247
    }
]