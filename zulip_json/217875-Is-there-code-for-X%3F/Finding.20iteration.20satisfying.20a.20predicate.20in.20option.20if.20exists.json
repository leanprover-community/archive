[
    {
        "content": "<p>Suppose I have the following:</p>\n<ul>\n<li><code>f : S → option S</code>, which satisfies that for all <code>x : S</code>, there is some <code>n</code> such that <code>(λ x, x &gt;&gt;= f)^[n] $ some x = none</code>, so iteration is finite.</li>\n<li>A decidable predicate <code>P</code> on <code>S</code>, maybe as <code>P : set S</code> with <code>decidable_pred P</code>.</li>\n</ul>\n<p>Then, how can I concisely write 1) the finiteness of iteration of <code>f</code>, and 2) the function <code>S → option S</code> such that:<br>\na) If there is some <code>k</code> such that <code>(λ x, x &gt;&gt;= f)^[k] $ some x = some z</code> and <code>z ∈ P</code>, then return <code>(λ x, x &gt;&gt;= f)^[k₀] $ some x</code> where <code>k₀</code> is minimum such <code>k</code><br>\nb) Otherwise, return <code>none</code>.</p>\n<p>In particular, I want to make such a function when <code>S = ℕ</code> and <code>f x = none</code> or <code>f x = some z</code> where <code>z &lt; x</code>.</p>",
        "id": 371827636,
        "sender_full_name": "Naruyoko",
        "timestamp": 1688341857
    },
    {
        "content": "<p>Express it as a existential, and pass it to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.find#doc\">docs#Nat.find</a></p>",
        "id": 371849651,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1688351972
    },
    {
        "content": "<p>For the first half. For the second half, wrap the call to Nat.find in a dependent if.</p>",
        "id": 371849811,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1688352036
    }
]