[
    {
        "content": "<p>I'm trying to port over some Lean3 code and am struggling here. Any help please? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Group.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"sd\">/-- Given a group `α` acting on a type `β`, and a function `f : β → M`, we \"automorphize\" `f` to a</span>\n<span class=\"sd\">  function `β ⧸ α → M` by summing over `α` orbits, `b ↦ ∑' (a : α), f(a • b)`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">MulAction.automorphize</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">Quotient.lift</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_action.orbit_rel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- error : \"missing end of character literal\"</span>\n\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Working Lean3 code:</span>\n\n<span class=\"cm\">def mul_action.automorphize [group α] [mul_action α β] (f : β → M) :</span>\n<span class=\"cm\">  quotient (mul_action.orbit_rel α β) → M :=</span>\n<span class=\"cm\">@quotient.lift _ _ (mul_action.orbit_rel α β) (λ b, ∑' (a : α), f(a • b))</span>\n<span class=\"cm\">begin</span>\n<span class=\"cm\">  rintros b₁ b₂ ⟨a, (rfl : a • b₂ = b₁)⟩,</span>\n<span class=\"cm\">  simpa [mul_smul] using (equiv.mul_right a).tsum_eq (λ a', f (a' • b₂)),</span>\n<span class=\"cm\">end</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 378929843,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690401397
    },
    {
        "content": "<p>Is it because of the apostrophe after the sigma? Do you need to open or import something else? Or does it need to be <code>open scoped BigOperators</code>? (I thought not)</p>",
        "id": 378930429,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690401554
    },
    {
        "content": "<p>The apostrophe just means <code>tsum</code>; if the sum doesn't converge, then its value is set to 0.<br>\nI tried adding <code>scoped</code> and got the same error...</p>",
        "id": 378931860,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690401880
    },
    {
        "content": "<p>Is it the right sigma? EDIT: yes</p>",
        "id": 378932056,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690401921
    },
    {
        "content": "<p>Ah, it's just a missing import: you need <code>Mathlib.Topology.Algebra.InfiniteSum.Basic</code></p>",
        "id": 378933220,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690402162
    },
    {
        "content": "<p>Heh, well, I didn't import that file because... that's the file I'm working on. But ok, new error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"sd\">/-- Given a group `α` acting on a type `β`, and a function `f : β → M`, we \"automorphize\" `f` to a</span>\n<span class=\"sd\">  function `β ⧸ α → M` by summing over `α` orbits, `b ↦ ∑' (a : α), f(a • b)`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">MulAction.automorphize</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">Quotient.lift</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_action.orbit_rel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- error : \"expected ')', ',' or ':'\"</span>\n\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Working Lean3 code:</span>\n\n<span class=\"cm\">def mul_action.automorphize [group α] [mul_action α β] (f : β → M) :</span>\n<span class=\"cm\">  quotient (mul_action.orbit_rel α β) → M :=</span>\n<span class=\"cm\">@quotient.lift _ _ (mul_action.orbit_rel α β) (λ b, ∑' (a : α), f(a • b))</span>\n<span class=\"cm\">begin</span>\n<span class=\"cm\">  rintros b₁ b₂ ⟨a, (rfl : a • b₂ = b₁)⟩,</span>\n<span class=\"cm\">  simpa [mul_smul] using (equiv.mul_right a).tsum_eq (λ a', f (a' • b₂)),</span>\n<span class=\"cm\">end</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 378934113,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690402399
    },
    {
        "content": "<p>Here is a working code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"sd\">/-- Given a group `α` acting on a type `β`, and a function `f : β → M`, we \"automorphize\" `f` to a</span>\n<span class=\"sd\">  function `β ⧸ α → M` by summing over `α` orbits, `b ↦ ∑' (a : α), f(a • b)`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MulAction.automorphize</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">Quotient.lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378934261,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690402441
    },
    {
        "content": "<p>You need a whitespace between the function and the parenthesis. I'm not sure why though.</p>",
        "id": 378934411,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690402474
    },
    {
        "content": "<p>Note also that it doesn't work if the two first <code>_</code> are <code>?_</code>, because if you tell Lean \"I'll tell you later\" then he fails to unify it with anything that comes up.</p>",
        "id": 378934652,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690402553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/automorphizing/near/378934411\">said</a>:</p>\n<blockquote>\n<p>You need a whitespace between the function and the parenthesis. I'm not sure why though.</p>\n</blockquote>\n<p>This is a general fact in Lean 4.</p>",
        "id": 378942103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690404350
    },
    {
        "content": "<p>Continuing to have some issues here: why is it not picking up the <code>Setoid</code> with <code>Quotient.mk'</code>? It did it fine in Lean3... (And it does it fine if I use <code>Quotient.mk</code> and feed it the <code>Setoid</code> explicitly...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Basic</span>\n\n<span class=\"sd\">/-- Automorphization of a function into an `R`-`module` distributes, that is, commutes with the `R`</span>\n<span class=\"sd\">  -scalar multiplication. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">MulAction.automorphize_smul_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousConstSMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MulAction.automorphize</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">Quotient.mk'</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">MulAction.automorphize</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- error : \"failed to synthesize instance Setoid β\"</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">MulAction.automorphize_smul_left'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">T2Space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DivisionRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousConstSMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MulAction.automorphize</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)))</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">MulAction.automorphize</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">MulAction.orbitRel</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378946788,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690405786
    },
    {
        "content": "<p>The definition of <a href=\"http://Quotient.mk\">Quotient.mk</a>' changed in lean4, to take an a TC arg instead of an implicit.</p>",
        "id": 378969266,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1690415955
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.mk%27\">docs3#quotient.mk'</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.mk%27#doc\">docs#Quotient.mk'</a></p>",
        "id": 378969322,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1690416000
    },
    {
        "content": "<p>Well that's super confusing, the primed versions swapped places with the unprimed one</p>",
        "id": 379646636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690582312
    },
    {
        "content": "<p>Except presumably mathlib still uses the old convention</p>",
        "id": 379646703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690582330
    },
    {
        "content": "<p>It's all worked out now, thanks... (for my application, that is...)</p>",
        "id": 379647378,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690582640
    }
]