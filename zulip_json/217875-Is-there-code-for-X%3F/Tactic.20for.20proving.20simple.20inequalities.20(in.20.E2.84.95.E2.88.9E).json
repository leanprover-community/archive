[
    {
        "content": "<p>I'm trying to prove that from <code>H1: a &lt;= 1</code> and <code>H2: b &lt;= 1</code> the goal <code>a+b&lt;=2</code> follows.<br>\nFor now I'm not very successful.  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Which tactic should I use?</p>",
        "id": 399088083,
        "sender_full_name": "Lessness",
        "timestamp": 1698533051
    },
    {
        "content": "<p>I've heard that Omega isn't ready yet, but maybe there is something less powerful?</p>",
        "id": 399088122,
        "sender_full_name": "Lessness",
        "timestamp": 1698533090
    },
    {
        "content": "<p><code>linarith</code></p>",
        "id": 399088123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698533091
    },
    {
        "content": "<p>Oh, those were <code>ℕ∞</code>, not <code>Nat</code>. That explains much.</p>",
        "id": 399089856,
        "sender_full_name": "Lessness",
        "timestamp": 1698534864
    },
    {
        "content": "<p>I have such goal, caused by my choice to use <code>encard</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S1</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span>\n<span class=\"n\">S2</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span>\n<span class=\"n\">T1</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span>\n<span class=\"n\">T2</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span>\n<span class=\"n\">H7</span><span class=\"o\">:</span> <span class=\"n\">Set.encard</span> <span class=\"n\">S1</span> <span class=\"bp\">≤</span> <span class=\"n\">Set.encard</span> <span class=\"n\">T1</span>\n<span class=\"n\">H8</span><span class=\"o\">:</span> <span class=\"n\">Set.encard</span> <span class=\"n\">S2</span> <span class=\"bp\">≤</span> <span class=\"n\">Set.encard</span> <span class=\"n\">T2</span>\n<span class=\"n\">H9</span><span class=\"o\">:</span> <span class=\"n\">Set.encard</span> <span class=\"n\">T1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"n\">H10</span><span class=\"o\">:</span> <span class=\"n\">Set.encard</span> <span class=\"n\">T2</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Set.encard</span> <span class=\"n\">S1</span> <span class=\"bp\">+</span> <span class=\"n\">Set.encard</span> <span class=\"n\">S2</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Any suggestions?</p>",
        "id": 399136664,
        "sender_full_name": "Lessness",
        "timestamp": 1698572904
    },
    {
        "content": "<p>Does <code>apply (add_le_add H7 H8).trans</code> work?</p>",
        "id": 399144397,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698579002
    },
    {
        "content": "<p>Ooo, yes! It changes the goal to <code>Set.encard T1 + Set.encard T2 ≤ 2</code></p>",
        "id": 399144731,
        "sender_full_name": "Lessness",
        "timestamp": 1698579303
    },
    {
        "content": "<p>So, one more step and you should get to <code>1 + 1 ≤ 2</code>!</p>",
        "id": 399145760,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698580199
    },
    {
        "content": "<p>Thank you very much! :)<br>\nYes, it's done.</p>",
        "id": 399146042,
        "sender_full_name": "Lessness",
        "timestamp": 1698580437
    },
    {
        "content": "<p>(I will put this here, too, to avoid too many topics.)<br>\nHow can I prove this? Thanks in advance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">neighbors</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">V</span>\n<span class=\"n\">H0</span><span class=\"o\">:</span> <span class=\"n\">Set.encard</span> <span class=\"n\">neighbors</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Set.encard</span> <span class=\"n\">neighbors</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">Set.encard</span> <span class=\"n\">neighbors</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">Set.encard</span> <span class=\"n\">neighbors</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 399179068,
        "sender_full_name": "Lessness",
        "timestamp": 1698607050
    },
    {
        "content": "<p>Does <code>fin_cases Set.encard neighbors &lt;;&gt; simp</code> work? Probably not in ℕ∞</p>",
        "id": 399179728,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698607777
    },
    {
        "content": "<p>Right now it causes error <code>unexpected syntax</code>. Do I need to import something?</p>",
        "id": 399180242,
        "sender_full_name": "Lessness",
        "timestamp": 1698608318
    },
    {
        "content": "<p><code>Mathlib.Tactic.FinCases</code></p>",
        "id": 399180282,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698608383
    },
    {
        "content": "<p>Still <code>unexpected syntax</code>, at least for me. It seems that it isn't working, not with  ℕ∞ :(</p>",
        "id": 399182289,
        "sender_full_name": "Lessness",
        "timestamp": 1698610298
    },
    {
        "content": "<p>I almost proved it, using theorem <code>Set.encard_le_coe_iff</code>, but I still have one <code>sorry</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here <code>linarith</code> does not want to work. :| Any suggestions?</p>",
        "id": 399258442,
        "sender_full_name": "Lessness",
        "timestamp": 1698657671
    },
    {
        "content": "<p>For now I proved it by destructing <code>w</code> enough times.</p>",
        "id": 399259336,
        "sender_full_name": "Lessness",
        "timestamp": 1698658009
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">w</span>\n  <span class=\"bp\">·</span>  <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span>  <span class=\"n\">right</span><span class=\"bp\">;</span><span class=\"n\">left</span><span class=\"bp\">;</span><span class=\"n\">rfl</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span>  <span class=\"n\">right</span><span class=\"bp\">;</span><span class=\"n\">right</span><span class=\"bp\">;</span><span class=\"n\">rfl</span><span class=\"bp\">;</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 399261766,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698658812
    },
    {
        "content": "<p>Much shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 399262334,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698658947
    },
    {
        "content": "<p>A third option which uses tauto:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">tauto</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 399263125,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698659136
    },
    {
        "content": "<p>Oh duh, I was thinking of <code>interval_cases</code>, not <code>fin_cases</code>. Sorry for the confusion</p>",
        "id": 399271485,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698661578
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 399343359,
        "sender_full_name": "Lessness",
        "timestamp": 1698685303
    }
]