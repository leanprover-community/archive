[
    {
        "content": "<p>Hi, do we have this? </p>\n<p>There are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">(A+1)^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> possible sets of integers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_1, \\ldots, x_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>x</mi><mi>k</mi></msub><mo>≤</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">0 \\leq x_k \\leq A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.786em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">1 \\leq k \\leq n.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">.</span></span></span></span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407121028,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1702253692
    },
    {
        "content": "<p>You can build an equivalence with <code>Fin n → Fin (A + 1)</code>.</p>",
        "id": 407121181,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702253788
    },
    {
        "content": "<p>Just write your set as <code>(Finset.univ : Finset (Fin n)).pi fun _ ↦ Icc (0 : ℤ) A</code> and use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card_pi#doc\">docs#Finset.card_pi</a></p>",
        "id": 407173275,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702277590
    },
    {
        "content": "<p>I see, thanks. So,  in general, I am dealing with finite sets with an increasingly number of conditions and I am not very familiar with the Finset API to generalize the stuff I am doing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">H</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">let</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Furthermore, assuming I write the set below differently, how do I pull the elements out to prove trivial stuff like ? : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:=(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"bp\">;</span>\n     <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"bp\">↑</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">N</span> <span class=\"bp\">→</span>\n            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">finX</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"bp\">↑</span><span class=\"n\">X</span><span class=\"o\">),</span>\n                <span class=\"k\">let</span> <span class=\"n\">hX</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.ofFinite</span> <span class=\"bp\">↑</span><span class=\"n\">X</span><span class=\"bp\">;</span>\n                    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.toFinset</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n                        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"n\">k</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407216167,
        "sender_full_name": "Michail Karatarakis",
        "timestamp": 1702292449
    },
    {
        "content": "<p>Your set <code>Y</code> is <code>((Finset.univ : Finset (Fin M)).pi fun _ ↦ Icc (-B * H) (C * H)).filter fun _ ↦ B * C ≤ N * A</code> (although it seems you have a typo somewhere since the filtering is trivial). For your second question, probably <code>simp</code> or <code>aesop</code> can do it.</p>",
        "id": 407225009,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702295838
    },
    {
        "content": "<p>I think this kind of thing indicates how difficult the <code>Finset</code> API is to work with for the uninitiated. Terms like <code>attach</code> and <code>filter</code> aren’t particularly intuitive.</p>",
        "id": 407233163,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1702298784
    },
    {
        "content": "<p>I agree. We need better notation.</p>",
        "id": 407233790,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702299004
    },
    {
        "content": "<p>Better notation for <code>s.filter p</code> and <code>univ.filter p</code> would already go a long way.</p>",
        "id": 407233967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702299064
    }
]