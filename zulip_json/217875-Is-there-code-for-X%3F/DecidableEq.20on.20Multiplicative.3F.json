[
    {
        "content": "<p>Can someone explain why the last one doesn't work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">-- fun a b ↦ inst a b</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- fun a b ↦ ZMod.decidableEq 2 a b</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"c1\">-- failed to synthesize</span>\n</code></pre></div>\n<p>Do we need these instances?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 399611084,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698789558
    },
    {
        "content": "<p>That first one really shouldn't work</p>",
        "id": 399611658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698789770
    },
    {
        "content": "<p>That's kind of what i figured, so we want these instances, right?</p>",
        "id": 399611846,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698789839
    },
    {
        "content": "<p>Should we raise an issue on the Lean 4 repo that the first one works at all?</p>",
        "id": 399611921,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698789868
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8072\">#8072</a></p>",
        "id": 399612894,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698790467
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myId</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- Succeeds:</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">myId</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"c1\">-- Fails:</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">myId</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 399613126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698790610
    },
    {
        "content": "<p>It seems like the first only works because there's a local instance</p>",
        "id": 399613398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698790757
    },
    {
        "content": "<p>Reading the code a bit, my understanding is that the way instance synthesis works here is that it collects all global instances that match in a syntactic way, as it collects all local instances filtered by just typeclass name. Then, it does a defeq check for everything in this list (that check is in <code>tryResolve</code> when you set <code>set_option trace.Meta.synthInstance true</code>). This means local instances don't care at all about syntax like global instances do.</p>",
        "id": 399614835,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698791605
    },
    {
        "content": "<p>When you say \"local\" you don't mean <code>attribute [local instance]</code> right? You mean local in the sense of provided within the declaration?</p>",
        "id": 399615155,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698791800
    },
    {
        "content": "<p>Yes, I mean \"local\" in the sense that it's a variable in the local context. These are called \"local instances\" inside the Lean codebase.</p>",
        "id": 399615573,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698792082
    },
    {
        "content": "<p>Hmm, the first one succeeds, but the second one fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myId</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"n\">myId</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">myId</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 399615682,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698792162
    },
    {
        "content": "<p>Does whether an argument is implicit or not change reducibility rules? In the first, <code>myId Nat</code> for typeclass inference purposes is technically an implicit argument to <code>Eq</code></p>",
        "id": 399615781,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698792230
    },
    {
        "content": "<p>So maybe this problem is actually not a big deal since it'd only apply to abbreviations (like <code>DecidableEq</code>) that expand in such a way that an explicit argument becomes implicit?</p>",
        "id": 399615915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698792323
    },
    {
        "content": "<p>This looks like a bug to me; I think it would be good to explore being stricter about it and seeing what breaks.</p>",
        "id": 399618019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698793553
    },
    {
        "content": "<p>Yes, that definitely seems like a bug.</p>",
        "id": 399649821,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698810374
    }
]