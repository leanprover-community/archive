[
    {
        "content": "<p>Does mathlib have a formulation of the pigeonhole principle that would be easy to apply in the following kind of situation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 324332596,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674929513
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.exists_card_fiber_lt_of_card_lt_mul\">docs#fintype.exists_card_fiber_lt_of_card_lt_mul</a> ?</p>",
        "id": 324334326,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1674930405
    },
    {
        "content": "<p>(Looking through what the search window gives me for \"pigeonhole\"...)</p>",
        "id": 324334416,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1674930450
    },
    {
        "content": "<p>Ah, yeah that file looks promising.</p>",
        "id": 324339573,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674933387
    },
    {
        "content": "<p>I was stuck looking in data/fintype/card.lean</p>",
        "id": 324339590,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674933402
    },
    {
        "content": "<p>here's a proof of what I wanted. (I switched to Lean 4).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n      <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.exists_lt_card_fiber_of_mul_lt_card</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">Finset.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">Finset.univ</span><span class=\"o\">)</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hy</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">y</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.prop</span> <span class=\"n\">x</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">h3</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.mem_filter.mp</span> <span class=\"n\">hx</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 324344162,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674936353
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 324344167,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674936357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> has marked this topic as resolved.</p>",
        "id": 324344169,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674936360
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n      <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span> <span class=\"bp\">∧</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>There might be a way to make <code>by decide</code> work for this.</p>",
        "id": 324362729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674951393
    },
    {
        "content": "<p>Really? That would be impressive to me.</p>",
        "id": 324382214,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674967133
    },
    {
        "content": "<p>It's literally a finite search within a domain where decidable equality works, right?</p>",
        "id": 324414417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674989206
    },
    {
        "content": "<p>I'm not suggesting it's the best way to solve it and obviously it won't scale but there are 32 functions and 32 subsets meaning 1024 checks</p>",
        "id": 324414518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674989277
    },
    {
        "content": "<p>I thought computers could do a billion calculations a second nowadays</p>",
        "id": 324414611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674989314
    },
    {
        "content": "<p><code>by revert x; exact dec_trivial</code> would work in Lean3 but Lean4 seems to be worse at finding decidable instances.</p>",
        "id": 324429800,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674996637
    },
    {
        "content": "<p>Kevin, I didn't mean that it shouldn't be possible in theory, just that I would be surprised if <code>by decide</code> succeeded, but maybe that was me just being naive.</p>",
        "id": 324475191,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675017454
    },
    {
        "content": "<p>In 2018/9 I used to come up with things which I felt could be solved by <code>dec_trivial</code> and weren't, and I'd mention them to Chris and he'd go and make PRs to mathlib which I didn't understand and then all of a sudden <code>dec_trivial</code> would work</p>",
        "id": 324495451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675031615
    }
]