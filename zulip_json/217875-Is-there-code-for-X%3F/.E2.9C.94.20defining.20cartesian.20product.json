[
    {
        "content": "<p>Hi, is there a function in LEAN4 that i can use to express k-tuples of a set? <br>\nI want to define a function like <code> δ : ℕ × (N^k) → ℕ × (ℕ^k) × (Direction^k) </code></p>",
        "id": 367387734,
        "sender_full_name": "HenrikT",
        "timestamp": 1687095959
    },
    {
        "content": "<p>The usual way to speak about k-tuples in a type X is using <code>Fin k -&gt; X</code>.</p>",
        "id": 367388822,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687096251
    },
    {
        "content": "<p>And matrix notation gives a convenient way to construct such tuples explicitly</p>",
        "id": 367388935,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687096279
    },
    {
        "content": "<p>Can you maybe provide an example i don't quite understand it yet</p>",
        "id": 367389279,
        "sender_full_name": "HenrikT",
        "timestamp": 1687096378
    },
    {
        "content": "<p>If i want to write ℕ^5 = (ℕ×ℕ×ℕ×ℕ) there must be a shorter way right ?</p>",
        "id": 367390198,
        "sender_full_name": "HenrikT",
        "timestamp": 1687096636
    },
    {
        "content": "<p><code>Fin n</code> is a finite type with n elements, so functions from <code>Fin n</code> to <code>Nat</code> will represent <code>n</code>-tuples of natural numbers. Sorry, I’m away from my computer right now so can’t write out a complete example.</p>",
        "id": 367392886,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1687097344
    },
    {
        "content": "<p>Fin n only works for natural number though does it ? What if want to create a k-tuple like<code>Direction^k</code></p>",
        "id": 367393864,
        "sender_full_name": "HenrikT",
        "timestamp": 1687097623
    },
    {
        "content": "<p><code>Fin k -&gt; Direction</code></p>",
        "id": 367394023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687097664
    },
    {
        "content": "<p>Ok thank you :). So my function now looks like <code>  δ : ℕ × (Fin k → ℕ) → ℕ × (Fin k → ℕ) × (Fin k → Direction)</code></p>",
        "id": 367394809,
        "sender_full_name": "HenrikT",
        "timestamp": 1687097906
    },
    {
        "content": "<p>One last thing. Is there a short way of writing <code>N^k</code> for a specific <code>k</code> ?  I dont want to write ```(N × N × ... × N) k-times.</p>",
        "id": 367395191,
        "sender_full_name": "HenrikT",
        "timestamp": 1687098020
    },
    {
        "content": "<p>Note that e.g. <code>Fin 4 -&gt; ℕ</code> is not equal to <code>ℕ×ℕ×ℕ×ℕ</code></p>",
        "id": 367395510,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687098122
    },
    {
        "content": "<p>Do you really want an iterated product? If so why? Is it for a programming application or for math?</p>",
        "id": 367395726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687098184
    },
    {
        "content": "<p>i want to define a structure like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">KTapeMachine</span> <span class=\"n\">where</span>\n  <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">q0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">Direction</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>for this i need this function : <code>δ : ℕ × (N^k) → ℕ × (ℕ^k) × (Direction^k)</code></p>",
        "id": 367396133,
        "sender_full_name": "HenrikT",
        "timestamp": 1687098308
    },
    {
        "content": "<p>So if i want to have a Two-Tape Machine for example i need delta to be :<br>\n<code> δ : ℕ × (ℕ × ℕ) → ℕ × (ℕ × ℕ) × (Directiion × Direction)</code></p>",
        "id": 367396570,
        "sender_full_name": "HenrikT",
        "timestamp": 1687098444
    },
    {
        "content": "<p>Your <code>KTapeMachine</code> looks fine already as is.</p>",
        "id": 367396979,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687098558
    },
    {
        "content": "<p>You can just avoid iterated products entirely.</p>",
        "id": 367397201,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687098608
    },
    {
        "content": "<p>But as you stated <code>Fin 4 -&gt; ℕ</code> is not the same as <code>ℕ×ℕ×ℕ×ℕ</code></p>",
        "id": 367397289,
        "sender_full_name": "HenrikT",
        "timestamp": 1687098636
    },
    {
        "content": "<p>Yes, so forget about <code>ℕ×ℕ×ℕ×ℕ</code>.</p>",
        "id": 367397365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687098661
    },
    {
        "content": "<p>so if i use a specific <code>k</code> does it still work ?</p>",
        "id": 367397419,
        "sender_full_name": "HenrikT",
        "timestamp": 1687098674
    },
    {
        "content": "<p>It's much more convenient to work with functions, unless you specifically need an iterated tuple.</p>",
        "id": 367397460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687098688
    },
    {
        "content": "<p>What does it mean to \"work\"?</p>",
        "id": 367397474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687098691
    },
    {
        "content": "<p>like if i use an Instance of my KTapeMachine where <code>k=2</code><br>\nis delta going to be defined as <code> δ : ℕ × (ℕ × ℕ) → ℕ × (ℕ × ℕ) × (Directiion × Direction)</code></p>",
        "id": 367397655,
        "sender_full_name": "HenrikT",
        "timestamp": 1687098734
    },
    {
        "content": "<p>No, it will be defined as<br>\n<code>δ : ℕ × (Fin 2 → ℕ) → ℕ × (Fin 2 → ℕ) × (Fin 2 → Direction)</code>,<br>\nof course.</p>",
        "id": 367397730,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687098754
    },
    {
        "content": "<p>im still a bit confused about <code>Fin 2 → ℕ</code> and <code>ℕ × ℕ</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 367397986,
        "sender_full_name": "HenrikT",
        "timestamp": 1687098836
    },
    {
        "content": "<p>But thanks i think i am going to figure it out from here :)</p>",
        "id": 367398739,
        "sender_full_name": "HenrikT",
        "timestamp": 1687099058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621592\">HenrikT</span> has marked this topic as resolved.</p>",
        "id": 367398750,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687099061
    },
    {
        "content": "<p>They are two different types, that can both be used to represent the idea of an ordered pair of natural numbers.</p>",
        "id": 367399732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687099346
    },
    {
        "content": "<p>Ok so i could use an iterated tuple to archive the same but functions are more convenient got it.</p>",
        "id": 367400603,
        "sender_full_name": "HenrikT",
        "timestamp": 1687099606
    },
    {
        "content": "<p>The issue is that, like everybody else, you've been lying to yourself about things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span>.  You claim to yourself this means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}\\times\\mathbb{N}\\times\\mathbb{N}\\times\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> but you don't really mean it. Would you write an element as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mn>4</mn></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(k_1, (k_2, (k_3, k_4)))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)))</span></span></span></span>? Because this is what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}\\times\\mathbb{N}\\times\\mathbb{N}\\times\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> means. If you would rather write it as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mn>4</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(k_1, k_2,  k_3, k_4)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> then you are thinking about is as a function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1, 2, 3, 4\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">}</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> and this is what <code>Fin 4 -&gt; Nat</code> means (well, technically Fin 4 is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0, 1, 2, 3\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 367427222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687107537
    }
]