[
    {
        "content": "<p>Does this exist somewhere already? Probably way more general, since only the <code>HOrElse</code> class is used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tacs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tacs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"n\">fs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">goal</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">goal</span> <span class=\"n\">fs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to chain together 'finishing' tactics (aka functions <code>MVarId → MetaM Unit</code>), which should be a rather common thing to do.</p>",
        "id": 362116984,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685437544
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mfirst\">docs#list.mfirst</a> is almost that in Lean3. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.mfirst#doc\">docs4#List.mfirst</a> maybe?</p>",
        "id": 362122208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685438766
    },
    {
        "content": "<p>Are you sure you don't want your base case to be <code>failure</code>?</p>",
        "id": 362122500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685438842
    },
    {
        "content": "<p>ah, yes it should be <code>failure</code></p>",
        "id": 362131152,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685440953
    },
    {
        "content": "<p>the lean4 version of <code>list.mfirst</code> is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.firstM#doc\">docs4#List.firstM</a></p>",
        "id": 362134251,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685441721
    }
]