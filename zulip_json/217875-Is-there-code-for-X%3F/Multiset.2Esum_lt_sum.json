[
    {
        "content": "<p>We have <code>List.sum_lt_sum</code> for lists. Do we have a similar thing for multisets?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">List.sum_lt_sum</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Multiset.sum</span> <span class=\"o\">(</span><span class=\"n\">Multiset.map</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Multiset.sum</span> <span class=\"o\">(</span><span class=\"n\">Multiset.map</span> <span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399567191,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698772284
    },
    {
        "content": "<p>I think with loogle we can be fairly confident the answer is no <a href=\"https://loogle.lean-lang.org/?q=Multiset.sum%2C+LT.lt\">https://loogle.lean-lang.org/?q=Multiset.sum%2C+LT.lt</a></p>",
        "id": 399567619,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698772438
    },
    {
        "content": "<p>Is there a straightforward way to translate the <code>List</code> version to the <code>Multiset</code> version?</p>",
        "id": 399567771,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698772491
    },
    {
        "content": "<p><code>rcases s</code>?</p>",
        "id": 399583422,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698778167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 399598545,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698784707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as unresolved.</p>",
        "id": 400184662,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699035239
    },
    {
        "content": "<p>I just noticed that the <code>Finset.prod_lt_prod'</code> assumes <code>OrderedCancelCommMonoid</code> whereäs the <code>List.prod_lt_prod'</code> assumes <code>[CovariantClass M M (· * ·) (· ≤ ·)]</code> and <code>[CovariantClass M M (Function.swap (· * ·)) (· &lt; ·)]</code> instead. Similar situation for <code>Finset.sum_lt_sum</code> and <code>List.sum_lt_sum</code> respectively.</p>\n<p>I think we should first unify the assumptions and then create the <code>Multiset</code> version.</p>",
        "id": 400185099,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699035433
    },
    {
        "content": "<p>You should use <code>OrderedCancelCommMonoid</code> in both cases.</p>",
        "id": 400186317,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699035987
    },
    {
        "content": "<p>I think this is asking for a major refactor of<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/baa7aa8c9b30292fb7aa93b5724d0c2ea7c1948b/Mathlib/Data/List/BigOperators/Basic.lean#L267\">https://github.com/leanprover-community/mathlib4/blob/baa7aa8c9b30292fb7aa93b5724d0c2ea7c1948b/Mathlib/Data/List/BigOperators/Basic.lean#L267</a><br>\n(until line 377).</p>",
        "id": 400187082,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699036332
    },
    {
        "content": "<p>It might be worth checking the mathlib3 history to see if the extra generality was deliberate</p>",
        "id": 400187420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699036519
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commits/master/src/data/list/big_operators/basic.lean\">https://github.com/leanprover-community/mathlib/commits/master/src/data/list/big_operators/basic.lean</a></p>",
        "id": 400187905,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699036795
    },
    {
        "content": "<p>At least some of them were added in this commit:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/2541387ecc6183f4d40a3ff6d059c5dfbdbd5192\">https://github.com/leanprover-community/mathlib/commit/2541387ecc6183f4d40a3ff6d059c5dfbdbd5192</a></p>",
        "id": 400188278,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699036997
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/leanprover-community/mathlib4/pull/8170\">#8170</a> has been merged, I would like to refactor the <code>List</code> big-operator lemmas:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/BigOperators/Basic.lean#L267\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/BigOperators/Basic.lean#L267</a><br>\nCan somebody please confirm that there was no good reason for using <code>CovariantClass</code> instead of our algebraic-hierarchy classes?</p>",
        "id": 401122457,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699524247
    },
    {
        "content": "<p>Lemmas are often usefully more general when stated in terms of <code>CovariantClass</code>?</p>",
        "id": 401126922,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699525457
    },
    {
        "content": "<p>Seems <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> have a disagreement.</p>",
        "id": 401128154,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699525801
    },
    {
        "content": "<p>Here I doubt it ever was useful. We're not caring about non-commutative ordered stuff.</p>",
        "id": 401128571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699525926
    },
    {
        "content": "<p>Certainly it doesn't cost much to leave the lemmas as they are.</p>",
        "id": 401129044,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699526100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiset.2Esum_lt_sum/near/400185099\">said</a>:</p>\n<blockquote>\n<p>I just noticed that the <code>Finset.prod_lt_prod'</code> assumes <code>OrderedCancelCommMonoid</code> whereäs the <code>List.prod_lt_prod'</code> assumes <code>[CovariantClass M M (· * ·) (· ≤ ·)]</code> and <code>[CovariantClass M M (Function.swap (· * ·)) (· &lt; ·)]</code> instead. Similar situation for <code>Finset.sum_lt_sum</code> and <code>List.sum_lt_sum</code> respectively.</p>\n<p>I think we should first unify the assumptions and then create the <code>Multiset</code> version.</p>\n</blockquote>\n<p>As they are?</p>",
        "id": 401129373,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699526216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiset.2Esum_lt_sum/near/401128571\">said</a>:</p>\n<blockquote>\n<p>Here I doubt it ever was useful. We're not caring about non-commutative ordered stuff.</p>\n</blockquote>\n<p>Here's one we should care about: the quaternions under the order induced by the difference of the real part when the imaginary parts agree (aka a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StarOrderedRing#doc\">docs#StarOrderedRing</a>)</p>",
        "id": 401133521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699527669
    },
    {
        "content": "<p>Though maybe it has no relevant properties here</p>",
        "id": 401133729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699527731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span>, one reason the assumptions between the <code>List</code> and <code>Finset</code> versions are different is because <code>Finset.sum</code> requires commutativity while <code>List.sum</code> doesn't.</p>",
        "id": 401142780,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699531415
    },
    {
        "content": "<p>Got it.<br>\nHowever, you claimed that I should use <code>OrderedCancelCommMonoid</code> in both cases.<br>\nDo you no longer have this opinion?<br>\nEither way, for the <code>Multiset</code> version, I will use the same setting as the <code>Finset</code> version has.</p>",
        "id": 401144305,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699532094
    },
    {
        "content": "<p>Can we make a decision? Should the big-operator lemmas for <code>List</code> stay as they are?</p>",
        "id": 401833112,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1699904424
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8707\">#8707</a></p>",
        "id": 404844062,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1701257431
    }
]