[
    {
        "content": "<p>If I have a sum/prod over an even range or Ioc or Icc,  is there some function to group it by pairs, each containing an odd an an evenly indexed summand/factor.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: find good place and name and prove additive/multiplicative version in generality</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_even_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Ico_succ_right</span><span class=\"o\">,</span> <span class=\"n\">prod_Ico_succ_top</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_add_left</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n        <span class=\"n\">prod_Ico_succ_top</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_add_left</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Ico_succ_right</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Ico_succ_right</span><span class=\"o\">,</span> <span class=\"n\">prod_Ico_succ_top</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_add_left</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n        <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is there already some theorem like that, I searched but couldn't find it? I think it could be useful in general, but maybe there is an even better generalization that is already there and I am not seeing.</p>",
        "id": 398492348,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1698242561
    },
    {
        "content": "<p>This is morally <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_product#doc\">docs#Finset.prod_product</a>, but we're missing some glue.</p>",
        "id": 398493854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698242964
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, I see why this is related.<br>\nI tried deducing the result from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_product#doc\">docs#Finset.prod_product</a>, but it turned out to be quite cumbersome, especially because of the use of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_bij%27#doc\">docs#Finset.prod_bij'</a>  afterwards.<br>\nWhat is the glue that we missing precisely (I'm happy to produce it!). Do you have some canonical way in mind to write  <code>Icc 1 (2 * n)</code> as a cartesian product?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prod_even_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a.1</span> <span class=\"bp\">-</span> <span class=\"n\">a.2</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Finset.prod_product</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"n\">g</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"n\">prod_bij'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">mem_product</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">mem_insert</span><span class=\"o\">]</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_add_right</span> <span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ha.2</span>\n          <span class=\"n\">by_cases</span> <span class=\"n\">Even</span> <span class=\"n\">a</span>\n          <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n          <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"n\">a</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span>\n      <span class=\"n\">congr</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">Even</span> <span class=\"n\">a</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n      <span class=\"n\">exact</span> <span class=\"n\">i</span> <span class=\"n\">a</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">mem_product</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">mem_insert</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n      <span class=\"n\">cases'</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">ha_left</span> <span class=\"n\">ha_right</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">_root_.mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">mem_Icc</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_right</span><span class=\"o\">]</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha_left.1</span><span class=\"o\">]</span>\n        <span class=\"n\">by_cases</span> <span class=\"n\">a.2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"n\">le_pred_of_lt</span> <span class=\"n\">this</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"n\">one_le_of_lt</span> <span class=\"n\">this</span>\n      <span class=\"bp\">·</span> <span class=\"n\">by_cases</span> <span class=\"n\">a.2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ha_left.2</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n          <span class=\"n\">linarith</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n          <span class=\"n\">linarith</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">Even</span> <span class=\"n\">a</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n      <span class=\"n\">congr</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 398551957,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1698263710
    },
    {
        "content": "<p>Will have a look tomorrow morning, but does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finProdFinEquiv#doc\">docs#finProdFinEquiv</a> help?</p>",
        "id": 398557759,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698266503
    },
    {
        "content": "<p>This is starting to make sense. I suppose one missing potentially useful theorem is <code>prod_finProd</code> as an analogue to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_product#doc\">docs#Finset.prod_product</a>, what do you think?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_finProd</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">prod_finset_product</span> <span class=\"n\">univ</span> <span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">mem_univ</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"n\">p.2</span><span class=\"o\">⟩,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mem_univ</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_even_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"bp\">∏</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">finProdFinEquiv</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span>\n      <span class=\"o\">(</span><span class=\"n\">Equiv.prod_comp'</span> <span class=\"n\">finProdFinEquiv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">finProdFinEquiv</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">prod_finProd</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 398640840,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1698309395
    },
    {
        "content": "<p>I suggest to add prod_finProd and friends here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7955\">#7955</a></p>",
        "id": 398670709,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1698320623
    },
    {
        "content": "<p>Uh, your <code>prod_finProd</code> is defeq to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_product#doc\">docs#Finset.prod_product</a>.</p>",
        "id": 398693861,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698328335
    },
    {
        "content": "<p>I see.<br>\nIs this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span>  <span class=\"n\">range_product_rangeEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>also defeq to something in the library?</p>",
        "id": 398883465,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1698407633
    },
    {
        "content": "<p>That should be very close to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finProdFinEquiv#doc\">docs#finProdFinEquiv</a></p>",
        "id": 398885452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698408359
    },
    {
        "content": "<p>Thanks!<br>\nWhen using this, I made up two more lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rangeFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">List.mem_range.mp</span> <span class=\"n\">x.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">mem_range.mpr</span> <span class=\"n\">x.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">congrFun</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">congrFun</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">range_prod_rangeEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">Equiv.prodCongr</span> <span class=\"n\">rangeFinEquiv</span> <span class=\"n\">rangeFinEquiv</span><span class=\"o\">)</span>\n  <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">finProdFinEquiv</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">rangeFinEquiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">range_sprod_rangeEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Equiv.trans</span> <span class=\"n\">_</span> <span class=\"n\">range_prod_rangeEquiv</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Equiv.subtypeProdEquivProd</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_product</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I feel like <code>rangeFinEquiv</code> surely should be already there somewhere, but I couldn't find it. If not, should any of those be added to mathlib?</p>\n<p>Even without those lemmas, I was able to change use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_product#doc\">docs#Finset.prod_product</a> for a version of the statement that I actually need in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7924\">#7924</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prod_even_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">Equiv.prod_comp'</span> <span class=\"n\">finProdFinEquiv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">finProdFinEquiv</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">Fintype.prod_prod_type</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finProdFinEquiv_apply_val</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.prod_univ_eq_prod_range</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Finset.prod_range_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 399633621,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1698801921
    },
    {
        "content": "<p>Can you make those mwes, with <code>import</code>s?</p>",
        "id": 399635214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698802743
    },
    {
        "content": "<p>In particular, which <code>range</code> is that?</p>",
        "id": 399635377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698802829
    },
    {
        "content": "<p>If it's <code>Finset.range</code>, then this works for the first one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rangeFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.subtypeEquivProp</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">Fin.equivSubtype.symm</span>\n</code></pre></div>",
        "id": 399635630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698802979
    },
    {
        "content": "<p>sure, as mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.BigOperators</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Intervals</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rangeFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.subtypeEquivProp</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">Fin.equivSubtype.symm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">range_prod_rangeEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">Equiv.prodCongr</span> <span class=\"n\">rangeFinEquiv</span> <span class=\"n\">rangeFinEquiv</span><span class=\"o\">)</span>\n  <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">finProdFinEquiv</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">rangeFinEquiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">range_sprod_rangeEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">×ˢ</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Equiv.trans</span> <span class=\"n\">_</span> <span class=\"n\">range_prod_rangeEquiv</span>\n  <span class=\"n\">convert</span> <span class=\"n\">Equiv.subtypeProdEquivProd</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_product</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_even_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>  <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">Equiv.prod_comp'</span> <span class=\"n\">finProdFinEquiv</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">finProdFinEquiv</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">Fintype.prod_prod_type</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finProdFinEquiv_apply_val</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.prod_univ_eq_prod_range</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">Finset.prod_range_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 399701757,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1698836038
    }
]