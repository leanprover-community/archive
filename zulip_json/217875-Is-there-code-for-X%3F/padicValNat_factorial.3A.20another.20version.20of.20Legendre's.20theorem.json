[
    {
        "content": "<p>continued from <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/get.20the.20lastDrop\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/get.20the.20lastDrop</a></p>\n<p>Using a slighly different path, I got <code>padicValNat_factorial</code>.</p>\n<p>Which of  </p>\n<ul>\n<li><code>digits_monotone</code>, </li>\n<li><code>digit_sum_le</code>,  </li>\n<li><code>padicValNat_factorial_mul</code>,  </li>\n<li><code>padicValNat_add_eq_self_of_lt</code>, </li>\n<li><code>padicValNat_factorial_add</code></li>\n<li><code>padicValNat_factorial_div</code> (possibly with better names), which I use in the proof of <code>padicValNat_factorial</code> might be a good addition to mathlib?</li>\n</ul>\n<p>When we have <code>padicValNat_factorial</code>, <a href=\"https://en.wikipedia.org/wiki/Kummer%27s_theorem\">Kummer's theorem</a> should be quite easy too.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Digits</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">digits_monotone</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ofDigits</span> <span class=\"n\">p</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"n\">ofDigits</span> <span class=\"n\">q</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ofDigits</span><span class=\"o\">,</span> <span class=\"n\">cast_id</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_iff_left</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.mul_le_mul</span> <span class=\"n\">h</span> <span class=\"n\">hi</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">digit_sum_le</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofDigits_digits</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ofDigits_one</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">digits</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">digits_monotone</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">padicValNat_factorial_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">):</span>\n    <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">!</span><span class=\"o\">)</span>  <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>  <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">PartENat.natCast_inj.mp</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">padicValNat_def'</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime.ne_one</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">factorial_pos</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n  <span class=\"n\">push_cast</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">padicValNat_def'</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime.ne_one</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">factorial_pos</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">Nat.Prime.multiplicity_factorial_mul</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">padicValNat_add_eq_self_of_lt</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n    <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">padicValNat.eq_zero_of_not_dvd</span> <span class=\"bp\">&lt;|</span>\n        <span class=\"bp\">@</span><span class=\"n\">not_dvd_of_between_consec_multiples</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_add_of_pos_right</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.add_lt_add_left</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">padicValNat_factorial_add</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">):</span>\n    <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_eq</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">factorial_succ</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">padicValNat.mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">succ_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n        <span class=\"bp\">&lt;|</span> <span class=\"n\">factorial_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">hn</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">lt_of_succ_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_succ</span><span class=\"o\">,</span>\n        <span class=\"n\">padicValNat_add_eq_self_of_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">padicValNat_factorial_div</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">):</span>\n   <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rw</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">div_add_mod</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">padicValNat_factorial_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">hp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mod_lt</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;|</span><span class=\"n\">Prime.pos</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">padicValNat_factorial</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">!</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.strongInductionOn</span> <span class=\"n\">n</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">factorial</span><span class=\"o\">,</span> <span class=\"n\">padicValNat.one</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">digits_zero</span><span class=\"o\">,</span> <span class=\"n\">List.sum_nil</span><span class=\"o\">,</span>\n        <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">tsub_eq_zero_of_le</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"k\">suffices</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">padicValNat</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prime.one_lt</span> <span class=\"n\">hp</span><span class=\"o\">))]</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"n\">p.digits</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"kd\">by</span>\n        <span class=\"n\">nth_rw</span> <span class=\"mi\">4</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">div_add_mod'</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">sub_add_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_sub_right_distrib</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n          <span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span> <span class=\"o\">(</span><span class=\"n\">digit_sum_le</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prime.pos</span> <span class=\"n\">hp</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n          <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_mul_of_pos_left</span> <span class=\"o\">(</span><span class=\"n\">Prime.pos</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">digits_def'</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime.one_lt</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">List.foldl_assoc_comm_cons</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">padicValNat_factorial_mul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">hp</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">padicValNat_factorial_div</span> <span class=\"n\">n</span> <span class=\"n\">hp</span>\n</code></pre></div>",
        "id": 373561088,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1688848757
    },
    {
        "content": "<p>This is now pr-ed: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5803\">https://github.com/leanprover-community/mathlib4/pull/5803</a><br>\nReviews welcome!</p>",
        "id": 374144680,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1689054385
    }
]