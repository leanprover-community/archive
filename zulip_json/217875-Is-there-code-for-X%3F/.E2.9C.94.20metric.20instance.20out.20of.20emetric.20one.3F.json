[
    {
        "content": "<p>Say I have a type <code>X</code> for which I can define an <code>emetric_space</code> instance, and under some assumptions, say <code>p X</code>, I can actually define a <code>metric_space</code> instance on <code>X</code>. What's the correct way to cover those two cases? Ideally, I'd have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">hypotheses</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">emetric_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then something like (does this exist in mathlib?):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">emetric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"bp\">\\</span><span class=\"n\">infty</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and then I could chain those two:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">hypotheses</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"bp\">$</span> <span class=\"n\">p</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>Or should I simply not care about defining a <code>metric_space</code> instance?</p>\n<p>(The context is connected graphs.)</p>",
        "id": 338844463,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677678448
    },
    {
        "content": "<p>Is your <code>p X</code> thing itself a type class?</p>",
        "id": 338847684,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677679150
    },
    {
        "content": "<p>it is <code>simple_graph.preconnected</code>: not a typeclass but might be made into one eventually.</p>",
        "id": 338848532,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677679366
    },
    {
        "content": "<p>I think we have a helper constructor somewhere that uses <code>[\\forall x y, edist x y ≠ \\infty]</code></p>",
        "id": 338849017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677679501
    },
    {
        "content": "<p>Actually, that's something I'm a bit confused about: say I manage to have these two instances working, won't I get two <code>emetric_space</code> instances on my type <code>X</code>, one because it satisfies <code>p</code>, and the other by <code>metric.metric_space.to_emetric_space</code> ? Is that no problem?</p>",
        "id": 338849851,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677679682
    },
    {
        "content": "<p>No, they'd be equal for the same reason that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.has_add\">docs#prod.has_add</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.add_comm_monoid\">docs#prod.add_comm_monoid</a> don't form a diamond</p>",
        "id": 338850148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677679744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/metric.20instance.20out.20of.20emetric.20one.3F/near/338849017\">said</a>:</p>\n<blockquote>\n<p>I think we have a helper constructor somewhere that uses <code>[\\forall x y, edist x y ≠ \\infty]</code></p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/emetric_space.to_metric_space\">docs#emetric_space.to_metric_space</a></p>\n<blockquote>\n<p>We set it up so that the edist and the uniformity are defeq in the metric space and the emetric space.</p>\n</blockquote>",
        "id": 338850396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677679793
    },
    {
        "content": "<p>huh, I should have looked harder, sorry, and thanks!</p>",
        "id": 338850643,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677679845
    },
    {
        "content": "<p>Often though you don't want to use that def because writing it manually would give you a better defeq for <code>dist</code></p>",
        "id": 338850858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677679885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/metric.20instance.20out.20of.20emetric.20one.3F/near/338850396\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> [said](<a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic</a></p>\n<blockquote>\n<p>We set it up so that the edist and the uniformity are defeq in the metric space and the emetric space.</p>\n</blockquote>\n</blockquote>\n<p>Meaning that you need to carefully set it up?</p>",
        "id": 338850896,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677679892
    },
    {
        "content": "<p>I'm quoting the documentation. That sentence is describing the thing in mathlib which has been carefully set up for you</p>",
        "id": 338851039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677679920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/metric.20instance.20out.20of.20emetric.20one.3F/near/338851039\">said</a>:</p>\n<blockquote>\n<p>I'm quoting the documentation. That sentence is describing the thing in mathlib which has been carefully set up for you</p>\n</blockquote>\n<p>Yes, but I'm trying to unify that quote with your: \"No, they'd be equal for the same reason […]\". Is that \"same reason\" that you organise things in order to get defeq, or is there some general idea at play about diamonds contracting?</p>",
        "id": 338851513,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677680013
    },
    {
        "content": "<p>Oh, <a href=\"https://github.com/leanprover-community/mathlib/blob/e876965f7ee86f683b44e2f462ab5bfb47f993b3/src/topology/metric_space/basic.lean#L2764\">that definition</a> looks quite clever. Isn't it exactly your \"Often though you don't want to use that def because writing it manually would give you a better defeq for dist\" ?</p>",
        "id": 338852805,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677680282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 338853737,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677680458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@Rémi Bottinelli</span> You would get defeq of the <code>emetric_space</code> so long as you don't change of the <code>emetric_space</code> fields when you create your new <code>metric_space</code> instance.</p>\n<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/find/emetric_space.to_metric_space_of_dist\">docs#emetric_space.to_metric_space_of_dist</a> does exactly address the \"nice defeq for <code>dist</code>\" issue that Eric was mentioning in regard to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/emetric_space.to_metric_space\">docs#emetric_space.to_metric_space</a>.</p>",
        "id": 338868553,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677683427
    }
]