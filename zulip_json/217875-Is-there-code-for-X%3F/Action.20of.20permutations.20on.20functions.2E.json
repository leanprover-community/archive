[
    {
        "content": "<p>Do we have this, or anything like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Group</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Equiv.Perm.applySymmPiMulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">π</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">π.symm</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n  <span class=\"kd\">instance</span> <span class=\"n\">Equiv.Perm.applyPiMulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">π</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">π</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>In particular I want to understand how to talk about a symmetric group acting on tuples, but this seems to me to be the natural way to do it.</p>\n<p>(Also: MulAction is specifically left actions? Do we have right actions?)</p>",
        "id": 402447569,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700134063
    },
    {
        "content": "<p>I believe the first one is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DomMulAct#doc\">docs#DomMulAct</a></p>",
        "id": 402449549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700134801
    },
    {
        "content": "<p><code>Equiv.Perm.applyPiMulAction</code> already exists, <code>inferInstance</code> should find it</p>",
        "id": 402449668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700134841
    },
    {
        "content": "<p>Note that you should see an immediate red flag here that you can't have both instances as declared without a type synonym, as you might have alpha = beta</p>",
        "id": 402449793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700134888
    },
    {
        "content": "<p>Indeed.</p>",
        "id": 402449930,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700134926
    },
    {
        "content": "<p>How do I use inferInstance?</p>",
        "id": 402450147,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700135025
    },
    {
        "content": "<p><code>instance Equiv.Perm.applyPiMulAction (α β : Type*) : MulAction (Equiv.Perm β) (α → β) := inferInstance</code></p>\n<p>This doesn't work - it can't find it.</p>",
        "id": 402450242,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700135051
    },
    {
        "content": "<p>It's very similar to <code>Pi.mulAction</code> - I mean it virtually is that - but it can't actually make the link?</p>",
        "id": 402450302,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700135074
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Equiv.Perm.applyPiMulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>works for me</p>",
        "id": 402450791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700135198
    },
    {
        "content": "<p>If you're looking for an instance, always use <code>import Mathlib</code></p>",
        "id": 402450853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700135216
    },
    {
        "content": "<p>Or a little more clearly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"c1\">-- Pi.mulAction</span>\n</code></pre></div>",
        "id": 402450978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700135261
    },
    {
        "content": "<p>Aha yeah it'll be an import thing. Does that tell me also where it comes from?</p>",
        "id": 402451297,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700135349
    },
    {
        "content": "<p>DomMulAct is I guess what I want. Seems a little unwieldy to use in practice.</p>",
        "id": 402451741,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700135511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> What I'm not clear on, right, is what you call the thing that does take some <code>f : α → β</code> and <code>pi : Equiv.Perm α</code> and produces <code>f \\comp pi</code>. Effectively I guess it's like, the DomMulAct, but for the op? I suppose the equivalent is some<br>\n<code>pi : Equiv.Perm β</code>  and producing <code>pi.symm \\comp f</code>. Which you could do!</p>\n<p>I think that is the same is saying: why do the first two of these work, and the second two we don't have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᵈᵐᵃ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"o\">((</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span><span class=\"bp\">ᵈᵐᵃ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402466307,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700140145
    },
    {
        "content": "<p><code>ᵈᵐᵃ</code> already has the reversed multiplication you want</p>",
        "id": 402466933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700140348
    },
    {
        "content": "<p>Hmm - I am not sure it does, if I'm understanding this right. Or rather it is reversed but I want it <em>not</em> to be.</p>\n<p>Let me concretise this a bit. Let's take <code>a : Fin n -&gt; α</code>, which we concieve of as an n-tuple, and I have some π which is a permutation on n points. So \"<code>a</code> is the tuple where <code>a i</code> is in the <code>i</code>th place\". I want to act on <code>a</code> with <code>π</code> in some natural way to get a permuted tuple <code>b</code>.</p>\n<p>There's two obvious ways to permute this tuple, in a sense:<br>\n\"The permuted tuple <code>b</code> is the tuple where <code>a i</code> is in the <code>π i</code>-th place.\"<br>\n\"The permuted tuple <code>b</code> is the tuple where <code>a (π i)</code> is in the <code>i</code>th place.\"</p>",
        "id": 402467859,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700140659
    },
    {
        "content": "<p>I <em>believe</em> that the action of <code>DomMulAct</code> gives me the first of these (because for this new tuple, the ith place will contain <code>a (π.symm i)</code>, i.e. this is \"composing on the right by the inverse\").</p>",
        "id": 402468121,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700140741
    },
    {
        "content": "<p>In other words, I can define <code>b i = a (π.symm i)</code>, that's the first option, or <code>b i = a (π i)</code> - that is the second.</p>\n<p>Now I think when you want to start composing permutations it does end up with the first one being a little more natural - that is precisely the <code>DomMulAct</code> thing - but I do think they are both sensible concepts.</p>",
        "id": 402468658,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700140930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Action.20of.20permutations.20on.20functions.2E/near/402468658\">said</a>:</p>\n<blockquote>\n<p>In other words, I can define <code>b i = a (π.symm i)</code>, that's the first option, or <code>b i = a (π i)</code> - that is the second.</p>\n</blockquote>\n<p>Only one of these two is a left-action, which is what <code>MulAction</code> describes</p>",
        "id": 402468864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700141007
    },
    {
        "content": "<p>Right, but my understanding is that if one wants to talk about right actions of M, one can talk about left-actions of Mᵐᵒᵖ?</p>",
        "id": 402469015,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141046
    },
    {
        "content": "<p>So is the second one of these a left-action of anything at all? And if so, what?</p>",
        "id": 402469137,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141093
    },
    {
        "content": "<p>Ah, I understand your question now. Indeed, <code>MulAction (Equiv.Perm β)ᵐᵒᵖ β</code> is the msising piece here, with that in place everything should follow</p>",
        "id": 402469213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700141110
    },
    {
        "content": "<p>Right - and we don't seem to have that?</p>",
        "id": 402469284,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141134
    },
    {
        "content": "<p>Yes - I see what you mean. If we had that, then everything else would be inferred.</p>",
        "id": 402469406,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141165
    },
    {
        "content": "<p>(Thanks for sticking with me there - got a bit twisty.)</p>",
        "id": 402469507,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141197
    },
    {
        "content": "<p>There's a massive family of such actions, and I think I'm the only one that's been adding them. <a href=\"https://github.com/leanprover-community/mathlib4/pull/8396\">#8396</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/8395\">#8395</a> are some more missing ones from the non-opposite family</p>",
        "id": 402469565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700141218
    },
    {
        "content": "<p>I <em>think</em> <code>MulOpposite</code> versions of all those instances for automorphisms is fine; we just need to convince ourselves that they don't form any diamonds</p>",
        "id": 402469800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700141279
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.End.applyMulAction#doc\">docs#Function.End.applyMulAction</a> lists most of the instances we already have</p>",
        "id": 402469943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700141318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, do you know why the auto-linker on that page is not finding <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.applyDistribMulAction#doc\">docs#LinearEquiv.applyDistribMulAction</a>, and is instead just linking the last fragment of the name?</p>",
        "id": 402470134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700141373
    },
    {
        "content": "<p>Yeah - it feels like systematically adding them so that you don't miss any is really tricky! And I'm not sure exactly what needs adding (those PRs will presumably be useful for identifying that).</p>\n<p>I got to this because I was reading this paper I've been extending DJB's formalisation on, about a representation of permutations as a sequence of bits, and I realised actually in some ways thinking about things in terms of actions is clarifying.</p>",
        "id": 402470181,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141392
    },
    {
        "content": "<p>I think you should make a PR that takes every automorphism in the docs for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.End.applyMulAction#doc\">docs#Function.End.applyMulAction</a>, and creates an <code>opApply*Action</code> that is just <code>TheActionType.compHom MulEquiv.inv'</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv.inv%27#doc\">docs#MulEquiv.inv'</a>)</p>",
        "id": 402470528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700141488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Action.20of.20permutations.20on.20functions.2E/near/402470134\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span>, do you know why the auto-linker on that page is not finding <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.applyDistribMulAction#doc\">docs#LinearEquiv.applyDistribMulAction</a>, and is instead just linking the last fragment of the name?</p>\n</blockquote>\n<p>Sadly not from the top of my head.</p>\n<p>That said I'm kinda holding my breath on the doc improvements by David which will hopefully standartize the way that doc-strings are to be interpreted. Once that happens I am hoping I can just use the APIs the compiler (or wherever it is implemented) will provide in order to process doc-strings.</p>",
        "id": 402470593,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1700141509
    },
    {
        "content": "<p>That sounds sensible. I'll have to do it when I have some free time (at the moment I can't really justify spending work time on things that don't get me directly closer to a finished thesis). But I think I can write a bit about this <em>in</em> the thesis, so that is nice!</p>",
        "id": 402470795,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141558
    },
    {
        "content": "<p>by opApply*Action, do you use the * to mean \"AddAction or MulAction as appropriate\"?</p>",
        "id": 402470979,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141623
    },
    {
        "content": "<blockquote>\n<p>at the moment I can't really justify spending work time on things that don't get me directly closer to a finished thesis</p>\n</blockquote>\n<p>Arguably same, but the trick is to avoid having to justify it</p>",
        "id": 402470984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700141626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Action.20of.20permutations.20on.20functions.2E/near/402470979\">said</a>:</p>\n<blockquote>\n<p>by opApply*Action, do you use the * to mean \"AddAction or MulAction as appropriate\"?</p>\n</blockquote>\n<p>No, they're all multiplicative; I mean <code>MulAction</code> or <code>DistribMulAction</code> or stronger</p>",
        "id": 402471041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700141642
    },
    {
        "content": "<p>Oh right yes.</p>",
        "id": 402471090,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141649
    },
    {
        "content": "<p>Yes I mean what I would like is funding to just tootle round in mathlib and do this kind of stuff for cash cash cash, but alas.</p>",
        "id": 402471237,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141703
    },
    {
        "content": "<p>Still, my supervisor has a funding application in to Amazon to give me a year to focus on implementing a code-based post-quantum scheme in Lean, and maybe that way I would have the time... not that we'll hear for a while.</p>",
        "id": 402471448,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700141768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> So if we had <code>MulAction (Equiv.Perm β)ᵐᵒᵖ β</code>, what would be the instance that would give the second interpretation as above?</p>",
        "id": 402486740,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700146104
    },
    {
        "content": "<p>Try it and see?</p>",
        "id": 402486789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700146122
    },
    {
        "content": "<p>Just add that instance with a <code>sorry</code> in your file and see if Lean can find the rest</p>",
        "id": 402486821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700146132
    },
    {
        "content": "<p>(I just tested; it finds instances with exactly the same head symbols as the non-opposite ones, as expected)</p>",
        "id": 402487007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700146187
    },
    {
        "content": "<p>As I say I feel like it <em>ought</em> to be an instance for <code>MulAction ((Equiv.Perm α)ᵐᵒᵖ)ᵈᵐᵃ (α → β)</code> or possibly <code>MulAction ((Equiv.Perm α)ᵈᵐᵃ)ᵐᵒᵖ (α → β)</code> (they should be the same, should they not?)</p>",
        "id": 402487020,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700146191
    },
    {
        "content": "<p>Indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"o\">((</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span><span class=\"bp\">ᵈᵐᵃ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulAction</span> <span class=\"o\">((</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᵈᵐᵃ</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 402487217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700146241
    },
    {
        "content": "<p>We have this problem for actions by opposites of units vs units of opposites too, I think</p>",
        "id": 402487377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700146290
    },
    {
        "content": "<p>It's tricky because I can see it's so you have nicely separated type synonyms. If you didn't have dma and just used mop, that wouldn't work either because of that ambiguity about whether you were acting on domain or codomain when they are the same.</p>",
        "id": 402488941,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700146700
    },
    {
        "content": "<p>Presumably btw I should only add these instances when it makes sense, i.e. for endomorphisms on A acting on A, I can't really use MulEquiv.inv'</p>",
        "id": 402491136,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700147204
    },
    {
        "content": "<p><del>Sure you can, the <code>MulEquiv.inv'</code> is acting on the endomorphism group</del></p>",
        "id": 402491402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700147272
    },
    {
        "content": "<p>Not on<code>A</code></p>",
        "id": 402491419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700147278
    },
    {
        "content": "<p>Hang on, do endomorphisms form a group? I'm getting confused I think with terms.</p>",
        "id": 402491620,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700147321
    },
    {
        "content": "<p>No, my mistake, I thought you said automoprhisms</p>",
        "id": 402491738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700147350
    },
    {
        "content": "<p>Right</p>",
        "id": 402491834,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700147380
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Equiv.Perm.opApplyMulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">MulEquiv.inv'</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Does this look like the right sort of thing? I'm not sure about that <code>.symm</code> but the issue was that I don't want to go from <br>\n(Equiv.Perm α)ᵐᵒᵖ to (Equiv.Perm α)ᵐᵒᵖᵐᵒᵖ (though I could, and then use the opOp equivalence... not sure what is better).</p>",
        "id": 402494972,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700148197
    },
    {
        "content": "<p>Can't you use unop or something of the like?</p>",
        "id": 402495435,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700148308
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Equiv.Perm.opApplyMulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">f.unop.symm</span> <span class=\"n\">a</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 402495659,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700148364
    },
    {
        "content": "<p>This works.</p>",
        "id": 402495694,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700148370
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nstance</span> <span class=\"n\">Equiv.Perm.opApplyMulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MulAction.compHom</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">MulEquiv.inv'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.toMonoidHom</span>\n</code></pre></div>",
        "id": 402498026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700148990
    },
    {
        "content": "<p>Though your version is fine too</p>",
        "id": 402498216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700149051
    },
    {
        "content": "<p>That's better though. I think it also wants.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">Equiv.Perm.op_smul_def</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f.unop.symm</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>And probably also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Equiv.Perm.opApplyFaithfulSMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FaithfulSMul</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(though I am having some difficulty with that, mainly because for some reason showing that f.symm = g.symm implies f = g is not something exact? can do??)</p>",
        "id": 402499008,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700149278
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.symm_bijective#doc\">docs#Equiv.symm_bijective</a> ... seems to be missing, though all the stronger versions exist</p>",
        "id": 402499538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700149420
    },
    {
        "content": "<p>Right that is the thing I was looking for and it just... isn't?</p>",
        "id": 402499702,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700149454
    },
    {
        "content": "<p>Make a PR with that lemma (and any others around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddEquiv.symm_bijective#doc\">docs#AddEquiv.symm_bijective</a> that are also missing)?</p>",
        "id": 402499919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700149510
    },
    {
        "content": "<p>Looks like it belongs right below <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.symm_symm#doc\">docs#Equiv.symm_symm</a></p>",
        "id": 402499995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700149533
    },
    {
        "content": "<p>Yes. I see we have here <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EquivLike.inv_apply_apply#doc\">docs#EquivLike.inv_apply_apply</a> a \"TODO\" for a generic version of symm, and on some level probably you would want a generic version of that lemma too...</p>",
        "id": 402500201,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700149587
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">symm_bijective</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"o\">(</span><span class=\"n\">Equiv.symm</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">Equiv.bijective</span> <span class=\"o\">⟨</span><span class=\"n\">Equiv.symm</span><span class=\"o\">,</span> <span class=\"n\">Equiv.symm</span><span class=\"o\">,</span> <span class=\"n\">symm_symm</span><span class=\"o\">,</span> <span class=\"n\">symm_symm</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>This is what it wants to be I think (that's basically what all the others do that I've checked!)</p>",
        "id": 402501508,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700149948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Action.20of.20permutations.20on.20functions.2E/near/402469565\">said</a>:</p>\n<blockquote>\n<p>There's a massive family of such actions, and I think I'm the only one that's been adding them. <a href=\"https://github.com/leanprover-community/mathlib4/pull/8396\">#8396</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/8395\">#8395</a> are some more missing ones from the non-opposite family</p>\n</blockquote>\n<p>I've also added a few, and <code>MulAction (Perm β)ᵐᵒᵖ β</code> was on my todo list. But it's a very long list <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 402502224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700150173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The problem was oddly pervasive and I have added a lemma everywhere we had a symm_symm. In one case we had a symm_injective but I haven't removed that, just changed it to be the obvious corollory of symm_bijective. I'm going to have to see if the build likes it and check any little issues as we go, as as you can imagine that invalidated a lot of the cache. <a href=\"https://github.com/leanprover-community/mathlib4/pull/8444\">https://github.com/leanprover-community/mathlib4/pull/8444</a></p>",
        "id": 402508998,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700152042
    }
]