[
    {
        "content": "<p>Do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">machin</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LocallyConnectedSpace</span> <span class=\"bp\">‚Üë</span><span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395070908,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696520518
    },
    {
        "content": "<p>I would say yes, but that's a non-constructive proof.</p>",
        "id": 395071380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696520667
    },
    {
        "content": "<p>At least we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=locPathConnected_of_isOpen#doc\">docs#locPathConnected_of_isOpen</a></p>",
        "id": 395071710,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696520766
    },
    {
        "content": "<p>Oh, I searched using \"locally\" as a substring so I didn't find this one :-( Thanks!</p>",
        "id": 395071918,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696520837
    },
    {
        "content": "<p>I don‚Äôt think we have the locally connected version though (as in the one which would only assume local connectedness of the ambient space)</p>",
        "id": 395074627,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696521736
    },
    {
        "content": "<p>locally path connected says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Üë</span><span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">HasBasis</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">IsPathConnected</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>while locally connected says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Üë</span><span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">HasBasis</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s</span> <span class=\"bp\">‚àß</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚àß</span> <span class=\"n\">IsConnected</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>so one implication is not clear to me</p>",
        "id": 395075826,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696521984
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=locallyConnectedSpace_iff_connected_basis#doc\">docs#locallyConnectedSpace_iff_connected_basis</a></p>",
        "id": 395076026,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696522059
    },
    {
        "content": "<p>The reason it‚Äôs so far below the definition is it‚Äôs not immediate to show the equivalence</p>",
        "id": 395076417,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696522190
    },
    {
        "content": "<p>But then IsPathConnected and IsConnected are not equivalent for a general neighborhood ... Anyway I have to run but I will look more into it, thanks.</p>",
        "id": 395076621,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696522251
    },
    {
        "content": "<p>Ah sorry I misunderstood. Of course they are not equivalent in general, but for you it‚Äôs in the easy direction, right?</p>",
        "id": 395077054,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696522401
    },
    {
        "content": "<p>It should be, yes</p>",
        "id": 395077508,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696522563
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7530\">#7530</a></p>",
        "id": 395110677,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696536086
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"n\">LocallyConnectedSpace.open_connected_basis</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">restrict_subset</span>\n    <span class=\"o\">(</span><span class=\"n\">h.open_range.mem_nhds</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_range_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comap</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I see some people really have fun with <code>|&gt;</code> and <code>&lt;|</code>. It's too bad the precedences don't allow</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"n\">LocallyConnectedSpace.open_connected_basis</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">restrict_subset</span>\n    <span class=\"bp\">&lt;|</span> <span class=\"n\">h.open_range.mem_nhds</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_range_self</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comap</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 395111937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696536704
    },
    {
        "content": "<p>I got this which is way more pedestrian:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.LocPathConnectedSpace.locallyConnectedSpace</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LocPathConnectedSpace</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LocallyConnectedSpace</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">h.path_connected_basis</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">locallyConnectedSpace_iff_connected_basis</span><span class=\"o\">,</span> <span class=\"n\">hasBasis_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span> <span class=\"bp\">‚ä¢</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">;</span> <span class=\"n\">constructor</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">intro</span> <span class=\"n\">ht</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span><span class=\"o\">‚ü©,</span> <span class=\"n\">l3</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ht</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">‚ü©,</span> <span class=\"n\">l3</span><span class=\"o\">‚ü©</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isPathConnected_iff_pathConnectedSpace</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">l2</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">isConnected_iff_connectedSpace.2</span> <span class=\"n\">l2.connectedSpace</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isPreconnected</span>\n  <span class=\"bp\">¬∑</span> <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span> <span class=\"n\">l3</span><span class=\"o\">‚ü©</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Filter.mem_of_superset</span> <span class=\"n\">l1</span> <span class=\"n\">l3</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.IsOpen.locallyConnectedSpace</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LocallyConnectedSpace</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">locPathConnected_of_isOpen</span> <span class=\"n\">hU</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">locallyConnectedSpace</span>\n</code></pre></div>",
        "id": 395113541,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696537371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Open.20sets.20are.20locally.20connected/near/395111937\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"n\">LocallyConnectedSpace.open_connected_basis</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">restrict_subset</span>\n    <span class=\"o\">(</span><span class=\"n\">h.open_range.mem_nhds</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_range_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comap</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I see some people really have fun with <code>|&gt;</code> and <code>&lt;|</code>. It's too bad the precedences don't allow</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"n\">LocallyConnectedSpace.open_connected_basis</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">restrict_subset</span>\n    <span class=\"bp\">&lt;|</span> <span class=\"n\">h.open_range.mem_nhds</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_range_self</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comap</span> <span class=\"n\">_</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That would become a bit <em>too</em> unreadable for my liking (but maybe I'd get used to it?) <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I already liked <code>$</code>/<code>&lt;|</code>, but I'm a huge fan of <code>|&gt;.</code> because it makes dot notation with extra arguments even cleaner.</p>",
        "id": 395113570,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696537387
    },
    {
        "content": "<p>Actually I'm not even sure I've ever used <code>|&gt;</code> without the <code>.</code>, what does it do? I would guess <code>f x y |&gt; z = (f x y) z</code>, but that's already what <code>f x y z</code> means...</p>",
        "id": 395113788,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696537493
    },
    {
        "content": "<p>Apparently <code>x |&gt; f |&gt; g</code> is <code>g (f x)</code></p>",
        "id": 395115495,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696538352
    },
    {
        "content": "<p>Ah that makes sense. I'm going to use it more then!</p>",
        "id": 395115883,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696538536
    },
    {
        "content": "<p>I fear parentheses will soon disappear from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"n\">LocallyConnectedSpace.open_connected_basis</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">restrict_subset</span>\n    <span class=\"o\">(</span><span class=\"n\">h.open_range.mem_nhds</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_range_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comap</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 395116007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696538608
    },
    {
        "content": "<p>Unless bors is faster than Anatole.</p>",
        "id": 395116040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696538626
    },
    {
        "content": "<p>Oh I didn't mean in this particular example. I can get rid of the parentheses by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">LocallyConnectedSpace.open_connected_basis</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">restrict_subset</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">h.open_range.mem_nhds</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mem_range_self</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>But I think it looks very weird because you have no way of guessing which of <code>.comap</code> and <code>.restrict_subset</code> get applied first</p>",
        "id": 395117463,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696539288
    },
    {
        "content": "<p>Did you have something else in mind?</p>",
        "id": 395117491,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696539300
    },
    {
        "content": "<p>Do we have semaphore emojis?</p>",
        "id": 395117595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696539352
    },
    {
        "content": "<p>And please don't push that to your PR <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 395117698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696539396
    },
    {
        "content": "<p>Sorry people I still believe that the <code>$</code>-only world is better.</p>",
        "id": 395123523,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1696542451
    },
    {
        "content": "<p>And you are going to propose <code>‚Ç¨</code> for the dual of <code>$</code>?</p>",
        "id": 395188089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696574862
    },
    {
        "content": "<p>I still don't see how the dual is supposed to work with precedence.</p>",
        "id": 395191972,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1696576214
    },
    {
        "content": "<p>We could use ¬• somewhere, it adds a lot of nicely confusing symmetry. Or <a href=\"https://www.compart.com/en/unicode/U+10197\">https://www.compart.com/en/unicode/U+10197</a> even (apparently the quinarius was a Roman currency, and it has a nice symbol)</p>",
        "id": 395193174,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1696576674
    },
    {
        "content": "<p>So instead of concurrency programming we now have currency programming..</p>",
        "id": 395194049,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1696576872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> what do you mean?</p>",
        "id": 395313010,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696618281
    },
    {
        "content": "<p>LIke how <code>|&gt;</code> and <code>&lt;|</code> associate.</p>",
        "id": 395321504,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1696622570
    },
    {
        "content": "<p>here you go: <a href=\"https://github.com/leanprover/lean4/blob/b0b922bae499e6380ed3e48ad8efb25c963d5aaf/src/Init/Notation.lean#L417\">https://github.com/leanprover/lean4/blob/b0b922bae499e6380ed3e48ad8efb25c963d5aaf/src/Init/Notation.lean#L417</a></p>",
        "id": 395322578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696623136
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">min</span> <span class=\"n\">term</span> <span class=\"s2\">\" &lt;| \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">min</span> <span class=\"n\">term</span> <span class=\"s2\">\" |&gt; \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">min1</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 395322620,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696623166
    },
    {
        "content": "<p><code>min1 = min + 1</code></p>",
        "id": 395322680,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696623196
    },
    {
        "content": "<p>I would advise again making use of that precedence anyways, that makes terribly confusing terms like above. And really I think <code>|&gt;.</code> is much more useful (and natural) than <code>|&gt;</code>, and is in itself a good reason to use these new symbols.</p>",
        "id": 395328851,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696626478
    },
    {
        "content": "<p>I do think that <code>|&gt;</code> can be useful. \"Hey I constructed this very nice term of some type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ±</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span>, but lean expects something in type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ≤</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">Œ≤</span></span></span></span>. I don't feel like moving all the way to the beginning of the line just to apply some function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>Œ±</mi><mo>‚Üí</mo><mi>Œ≤</mi></mrow><annotation encoding=\"application/x-tex\">f : \\alpha \\to \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">Œ±</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">Œ≤</span></span></span></span>, so I'll just <code>|&gt; f</code> and call it a day!\"</p>",
        "id": 395329756,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696626975
    },
    {
        "content": "<p>Yes I think it's useful, but dot notation already covers a lot of cases where it would be natural. That is, where we would naturally want to write <code>x |&gt; g |&gt; f</code>, we can often write <code>x.g.f</code>. But maybe it's just something left in my mind by Lean3.</p>",
        "id": 395330078,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696627176
    },
    {
        "content": "<p>That's assuming that <code>g</code> etc. are in the right namespace... <code>{{a,b},{c,d}} |&gt; Monad.join</code> is just one example off the top of my head. Note that there is no <code>Set.join</code>.</p>",
        "id": 395330337,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696627309
    },
    {
        "content": "<p>Of course I'm not claiming that it covers all cases, but I've had less occasion to use it than expected thanks to dot notation.</p>",
        "id": 395330478,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696627369
    },
    {
        "content": "<p>Anyway, in case it's not clear, I quite like <code>|&gt;</code> and <code>&lt;|</code>. But now I'll stop highjacking this thread about open sets :)</p>",
        "id": 395330666,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696627474
    }
]