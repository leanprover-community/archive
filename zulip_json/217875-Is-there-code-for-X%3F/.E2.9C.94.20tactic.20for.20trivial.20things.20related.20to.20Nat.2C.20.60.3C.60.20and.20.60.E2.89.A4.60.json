[
    {
        "content": "<p>I have a harder time than  I should have discharging goals likes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hi2</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I can write a multi-line proof by hand, but such index calculations must be common enough that this is automated already, I hope. But none of the tactics I tried (<code>linarith</code>, <code>simp [*]</code>) can solve this – where should I be looking?</p>",
        "id": 358795930,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684256747
    },
    {
        "content": "<p>Does the banned <code>omega</code> work?</p>",
        "id": 358796249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684256806
    },
    {
        "content": "<p>Or did we remove it?</p>",
        "id": 358796263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684256811
    },
    {
        "content": "<p>I don’t see it on <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a> anymore</p>",
        "id": 358797196,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684257005
    },
    {
        "content": "<p>Why does <code>linarith</code>not work here? Is it because of the subtraction?</p>",
        "id": 358797205,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684257007
    },
    {
        "content": "<p>This seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.omega</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi2</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>",
        "id": 358797429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684257071
    },
    {
        "content": "<p>Ah, sorry, I’m already on mathlib4 :D</p>",
        "id": 358797635,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684257121
    },
    {
        "content": "<p>For </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi2</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p><code>linarith</code> says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">linarith</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">contradiction</span>\n<span class=\"n\">case</span> <span class=\"n\">a</span>\n<span class=\"n\">ni</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hi2</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">False</span>\n <span class=\"n\">failed</span>\n</code></pre></div>",
        "id": 358797860,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684257171
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi2</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hi2</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 358800198,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684257645
    },
    {
        "content": "<p>Yes, subtraction gets in the way. Even <code>zify</code> won't work because there is no general lemma about casting a subtraction, afaik; <code>Nat.cast_sub</code> needs <code>m &lt;= n</code></p>",
        "id": 358800413,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684257695
    },
    {
        "content": "<p>Would it help <code>linarith</code> to <code>have</code> the weak inequality with <code>-2</code>?</p>",
        "id": 358800750,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684257747
    },
    {
        "content": "<p>Thanks! I guess it’s not surprising, nat with subtraction is annoying, and I should probably work with <code>succ (succ n)</code> instead. But that’s ugly…</p>",
        "id": 358800863,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684257777
    },
    {
        "content": "<p>I don't think so, Damiano, because <code>zify</code> gives you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ni</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hi2</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">n</span>\n</code></pre></div>",
        "id": 358800948,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684257804
    },
    {
        "content": "<p>and not <code>↑n - 2</code>, which would help</p>",
        "id": 358800977,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684257817
    },
    {
        "content": "<p>Yes, pushing through requires a (non)trivial argument...</p>",
        "id": 358801141,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684257852
    },
    {
        "content": "<p>Joachim, I think you mean <code>i + 2</code></p>",
        "id": 358801233,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1684257877
    },
    {
        "content": "<p>I think avoiding nat-subtraction as much as possible is the only solution.  For example, I saw a few days ago that you were working with <code>Nat.choose</code>; I prefer to work with the \"Pascal triangle\" function where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">P_{a,b}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> represents <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><mi>a</mi></mfrac><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">{a + b \\choose a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2801em;vertical-align:-0.35em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9301em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span></span> because this avoids nat-subtraction.</p>",
        "id": 358801383,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684257912
    },
    {
        "content": "<p>Back in the Lean 3 days, I had a prototype for a \"remove nat_sub\" tactic.  Now that I have some more time, I'm planning to get on board with porting abs and metaprogramming.</p>",
        "id": 358801579,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684257961
    },
    {
        "content": "<p>(You can actually see a few lemmas on the theory of this \"Pascal triangle\" function in <a href=\"https://hrmacbeth.github.io/math2001/06_Induction.html#pascal-s-triangle\">lecture notes</a> I have written.)</p>",
        "id": 358801696,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684257983
    },
    {
        "content": "<p>If you can avoid nat-subtraction, then automation such as <code>linarith</code> and <code>polyrith</code> work fine for nats (you maybe have to <code>zify</code> sometimes but the <code>zify</code>s always go \"all the way through\".)</p>",
        "id": 358802393,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684258159
    },
    {
        "content": "<p>In this specific case, you can give enough hints to <code>linarith</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi2</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">]</span>  <span class=\"c1\">-- can be obfuscated to `linarith [n.sub_le _]`</span>\n</code></pre></div>",
        "id": 358817519,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684261671
    },
    {
        "content": "<p>Yeah, I thought something along these lines should work.</p>",
        "id": 358817832,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684261747
    },
    {
        "content": "<p>In fact, given that a whole proof is <code>hi2.le.trans (n.sub_le 2)</code>, this example might have been within <code>linarith</code>s reach.</p>",
        "id": 358819029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1684262089
    },
    {
        "content": "<p>I now have (very ugly) proofs where I need them, thanks for the help.<br>\nBut it’s not satisfying to have to think about these at all…<br>\nWould it be theoretically possible to write a solver for the <code>Nat</code> with addition, subtraction, <code>&lt;</code> and <code>≤</code>? Or at least the fragment where only constants are added/subtracted? Is that something that ought to have it’s own tactic, or should it be part of another tactic?</p>",
        "id": 358821690,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1684262882
    },
    {
        "content": "<p>You are looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#omega\">tactic#omega</a>. But this tactic was unmaintained in Lean 3 and would need a complete rewrite in Lean 4. This is doable but non-trivial.</p>",
        "id": 358822736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684263177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> has marked this topic as resolved.</p>",
        "id": 358898296,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684302485
    },
    {
        "content": "<p>Not sure, if I should open a new topic, but it looks very related to me. I'm on mathlib4 and trying to prove the following termination condition, but I'm not sure where to start. I can get it to <code>lim - (2*b+a) &lt; lim - (a + b)</code> with <code>abel_nf</code>, but that is probably not helping.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bgtz</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">):=</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lim</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"n\">cgtz</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">lim</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lim</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib_sum</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">lim</span> <span class=\"n\">cgtz</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">0</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">fib_sum</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">lim</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lim</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 358984380,
        "sender_full_name": "Daniel Hauck",
        "timestamp": 1684330216
    },
    {
        "content": "<p><code>lim - (2*b+a) &lt; lim - (a + b)</code> is false for <code>lim = 0</code></p>",
        "id": 358984614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684330287
    },
    {
        "content": "<p>You need to replace <code>if c &lt; lim then</code> with <code>if hc : c &lt; lim then</code></p>",
        "id": 358984681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684330310
    },
    {
        "content": "<p>Because <code>hc</code> is essential to prove that <code>sorry</code></p>",
        "id": 358984715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684330322
    },
    {
        "content": "<p>Thank you! And how would I proceed then? Can I get this somehow simplified to <code>lim - b&lt; lim</code>?</p>",
        "id": 358985274,
        "sender_full_name": "Daniel Hauck",
        "timestamp": 1684330448
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsub_lt_tsub_left_of_le\">docs#tsub_lt_tsub_left_of_le</a> might work</p>",
        "id": 358985777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684330600
    },
    {
        "content": "<p>Hmm, it doesn't</p>",
        "id": 358985965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684330651
    },
    {
        "content": "<p>Or is there maybe a smarter version to write the termination_by part?</p>",
        "id": 359022159,
        "sender_full_name": "Daniel Hauck",
        "timestamp": 1684339500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"618018\">Daniel Hauck</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20tactic.20for.20trivial.20things.20related.20to.20Nat.2C.20.60.3C.60.20and.20.60.E2.89.A4.60/near/358985274\">said</a>:</p>\n<blockquote>\n<p>Thank you! And how would I proceed then? Can I get this somehow simplified to <code>lim - b&lt; lim</code>?</p>\n</blockquote>\n<p>You mostly just have to do it yourself when it comes to cut subtraction, it seems.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bgtz</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">):=</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n  <span class=\"k\">if</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lim</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"n\">cgtz</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">lim</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lim</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">tsub_add_eq_tsub_tsub_swap</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">tsub_lt_self</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">tsub_pos_of_lt</span> <span class=\"n\">hc</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">bgtz</span>\n    <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fib_sum</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">lim</span> <span class=\"n\">cgtz</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">0</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">fib_sum</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">lim</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lim</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 359454180,
        "sender_full_name": "Richard Copley",
        "timestamp": 1684430362
    }
]