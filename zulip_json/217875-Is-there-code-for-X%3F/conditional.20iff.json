[
    {
        "content": "<p>Is there something tantamount to the following easily proved lemma in mathlib? </p>\n<p><code>example (p q r : Prop) (hpr : p → r) (hqr : q → r) (h : r → (p ↔ q)) : (p ↔ q) := sorry</code></p>\n<p>It's easy enough to prove, but I'm hoping there is a prepackaged version somewhere.</p>",
        "id": 368338123,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1687374593
    },
    {
        "content": "<p><code>aesop</code>?</p>",
        "id": 368338665,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687374728
    },
    {
        "content": "<p>Yes, or <code>tauto</code> also  works. But I want to use it to introduce a hypothesis <code>r</code> implied by both <code>p</code> and <code>q</code> to prove a <code>p ↔ q</code> goal in a tactic state where <code>r</code> doesn't yet appear. So I can't expect a tactic just to guess <code>r</code>, and I don't want to give the above lemma explicitly as a type annotation.</p>",
        "id": 368341071,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1687375357
    },
    {
        "content": "<p><code>aesop?</code> nor <code>exact?</code> return any exact match</p>",
        "id": 368341931,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1687375619
    },
    {
        "content": "<p>If you have a genuine need for this lemma then just PR it to Logic.Basic I guess.</p>",
        "id": 368344654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687376305
    },
    {
        "content": "<p>Presumably it's worth having the marginally stronger</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">imp_iff_iff_of_imp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hqr</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where the reverse direction is trivial</p>",
        "id": 368345324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687376474
    }
]