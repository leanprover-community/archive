[
    {
        "content": "<p>I need to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but <strong>only using Std</strong>. Any hints?</p>",
        "id": 401465798,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699669932
    },
    {
        "content": "<p>One way would be to <code>have</code> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod_lt#doc\">docs#Nat.mod_lt</a> and then do <code>cases x % 2</code> twice</p>",
        "id": 401467279,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699671116
    },
    {
        "content": "<p>That would work nicely for <code>Nat</code>, but not for <code>Int</code>.</p>",
        "id": 401469953,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699672888
    },
    {
        "content": "<p>Ah, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">Int.emod_nonneg</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">Int.emod_lt_of_pos</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>does it.</p>",
        "id": 401470109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699673025
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 401470111,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699673026
    }
]