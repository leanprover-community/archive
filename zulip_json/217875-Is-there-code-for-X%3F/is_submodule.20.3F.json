[
    {
        "content": "<p>Is there a way in mathlib to express the fact that a subset of a module is a submodule? I.e. something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_submodule</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span><span class=\"bp\">.</span>\n<span class=\"mi\">0</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">b</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">c</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>(and then another <code>def</code> that constructs the actual submodule structure when this holds).</p>\n<p>Of course, I can define it like this, but I would expect that this is somewhere in mathlib.</p>",
        "id": 342852776,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679183043
    },
    {
        "content": "<p>I would guess that <code>S ‚àà set.range (coe : submodule R M ‚Üí set M)</code> would be most useful</p>",
        "id": 342852881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183103
    },
    {
        "content": "<p>As the definition of <code>is_submodule</code>, you mean?</p>",
        "id": 342852979,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679183170
    },
    {
        "content": "<p>Yes, because then you can more easily promote it to a submodule. What's the application here?</p>",
        "id": 342853024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183220
    },
    {
        "content": "<p>I would like to express that some set is a linear subspace in a theorem statement, and what you propose is rather opaque.</p>",
        "id": 342853041,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679183238
    },
    {
        "content": "<p>Normally the approach taken is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo_submodule</span> <span class=\"o\">[</span><span class=\"n\">extra_assumptions_on</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_foo_submodule</span> <span class=\"o\">:</span> <span class=\"bp\">‚Üë</span><span class=\"n\">foo_submodule</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 342853117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183296
    },
    {
        "content": "<p>The statement says something like \"under such and such assumptions, there is a certain subset of \\F_2^n that is a linear subspace\".</p>",
        "id": 342853118,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679183299
    },
    {
        "content": "<p>Right, I think the above is how we currently handle that</p>",
        "id": 342853130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183322
    },
    {
        "content": "<p>That is, rephase it as \"we define <code>certain_submodule</code>, which is <code>certain_subset</code> as a submodule\"</p>",
        "id": 342853158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183361
    },
    {
        "content": "<p>See for instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.center\">docs#set.center</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.center\">docs#submonoid.center</a></p>",
        "id": 342853169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183373
    },
    {
        "content": "<p>But how do you phrase \"there is a <code>S : set M</code> with certain properties that is a submodule\".<br>\nI cannot define the set, I want to assert its existence.</p>",
        "id": 342853256,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679183413
    },
    {
        "content": "<p>What statement would you like to be able to write?</p>",
        "id": 342853305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183476
    },
    {
        "content": "<p>Something like <code>‚àÉ s : set M, is_submodule s ‚àß has_properties s</code>?</p>",
        "id": 342853370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183507
    },
    {
        "content": "<p>Right.</p>",
        "id": 342853393,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679183518
    },
    {
        "content": "<p>Just write <code>‚àÉ s : submodule R M, has_properties (s : set M)</code></p>",
        "id": 342853447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183536
    },
    {
        "content": "<p>Then <code>s</code> is a submodule by construction</p>",
        "id": 342853573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183590
    },
    {
        "content": "<p>OK, that should work. It requires some additional contortion (since <code>s</code> here has a specific form, so I have to express that via the <code>has_properties</code> part), but should be OK.</p>",
        "id": 342853613,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679183633
    },
    {
        "content": "<p>I would be surprised if the contortion is more than a coe here or there.</p>",
        "id": 342853935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183814
    },
    {
        "content": "<p>Is your actual case more like <code>‚àÉ x : X, is_submodule (f x) ‚àß has_properties x</code>?</p>",
        "id": 342853978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679183847
    },
    {
        "content": "<p>To un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, the statement I want to formalize is<br>\n\"Let Z‚ÇÄ, ‚Ä¶, Z‚Çú ‚äÜ ùîΩ‚ÇÇ‚Åø be non-singleton subsets that each contain 0. If all tuples of vectors in Z‚ÇÄ √ó ‚ãØ √ó Z‚Çú are linearly dependent, then there exists a subset I ‚äÜ {0, ‚Ä¶, t} such that the partial sumset ‚àë_{i‚ààI} Z·µ¢ is a nontrivial subspace of ùîΩ‚ÇÇ‚Åø.\"</p>\n<p>So my <code>s</code> is a pointwise sum of subsets, and the quantifier is for the index subset.</p>\n<p>The next question is how to write the sum of subsets...</p>",
        "id": 342854356,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679184097
    },
    {
        "content": "<p>What I have so far is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prop_2_4</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Z</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">v</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Z</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hld</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Z</span> <span class=\"n\">i</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">¬¨</span> <span class=\"n\">linear_independent</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">V</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚ä•</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àë</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">Z</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but I get an \"unexpected token\" error at the sum sign.</p>",
        "id": 342854466,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679184175
    },
    {
        "content": "<p><code>‚àÉ (I : finset Œπ) (V : submodule (zmod 2) (M n)), V ‚â† ‚ä• ‚àß (V : set (M n)) = I.sum Z :=</code> at least removes the error.<br>\nNow I have to see whether I can formalize the proof...</p>",
        "id": 342854884,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679184459
    },
    {
        "content": "<p><code>open_locale big_operators</code> is needed to make <code>\\sum</code> work as notation</p>",
        "id": 342854924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679184486
    },
    {
        "content": "<p>And it's <code>‚àë i in I, f i</code> not <code>‚àë (i in I), f i</code></p>",
        "id": 342854969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679184513
    },
    {
        "content": "<blockquote>\n<p>Let Z‚ÇÄ, ‚Ä¶, Z‚Çú ‚äÜ ùîΩ‚ÇÇ‚Åø be non-singleton subsets that each contain 0. </p>\n</blockquote>\n<p>Perhaps I'm being stupid, but isn't every such subset a submodule?</p>",
        "id": 342855056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679184592
    },
    {
        "content": "<p>No. Take {0, e_1, e_2}, where e_1, e_2 are linearly independent (and n is at least 2).</p>",
        "id": 342855131,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679184633
    },
    {
        "content": "<p>Your statement looks sensible to me then</p>",
        "id": 342855252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679184713
    },
    {
        "content": "<p>Thanks for reminding me of <code>open_locale big_operators</code> and the correct syntax. It is easy to forget stuff that one doesn't use on a daily basis...</p>",
        "id": 342855257,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679184718
    },
    {
        "content": "<p>I think your statement is false if iota is <code>empty</code></p>",
        "id": 342855404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679184794
    },
    {
        "content": "<p>OK. I'll add <code>[nonempty \\iota] [finite \\iota]</code>...</p>",
        "id": 342855528,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679184883
    },
    {
        "content": "<p>I think <code>‚àÄ i : Œπ, b i ‚àà Z i ‚Üí ¬¨ linear_independent (zmod 2) b</code> should be <code>(‚àÄ i : Œπ, b i ‚àà Z i) ‚Üí ¬¨ linear_independent (zmod 2) b</code> too</p>",
        "id": 342855836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679185111
    },
    {
        "content": "<p>In fact, I think that makes it true again for the empty type</p>",
        "id": 342855881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679185150
    },
    {
        "content": "<p>1) Thanks! 2) No, since the subspace would be trivial then.</p>",
        "id": 342856011,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679185234
    },
    {
        "content": "<p>Now I'm struggling with stating that the dimension of the span of some subset is one less than the cardinality of \\iota.<br>\nMy attempt <code>module.rank ‚Ü•(submodule.span (zmod 2) (set.range b)) + 1 = cardinal.mk Œπ</code> produces a \"type mismatch\" error that I find hard to parse.</p>",
        "id": 342856089,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679185319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/is_submodule.20.3F/near/342856011\">said</a>:</p>\n<blockquote>\n<p>2) No, since the subspace would be trivial then.</p>\n</blockquote>\n<p>But isn't <code>hld</code> impossible in that case since all empty vectors are linearly independent? So the statement is true by eliminating using <code>hld</code>.</p>",
        "id": 342856291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679185449
    },
    {
        "content": "<p>Ah, OK; I guess you are right!</p>",
        "id": 342856550,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679185655
    },
    {
        "content": "<p>Here is the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">module.rank</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal.mk</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">cardinal.mk</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">cardinal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">b</span><span class=\"o\">))]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">V</span><span class=\"o\">],</span> <span class=\"n\">cardinal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have to confess that I have no idea what this wants to tell me...</p>",
        "id": 342856644,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679185702
    },
    {
        "content": "<p>It tells you that you wrote an equality of functions by accident</p>",
        "id": 342856754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679185786
    },
    {
        "content": "<p>Because you missed an argument to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.rank\">docs#module.rank</a></p>",
        "id": 342856767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679185796
    },
    {
        "content": "<p>It is a bit annoying that I have to carry around the base ring everywhere...</p>",
        "id": 342856953,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679185907
    },
    {
        "content": "<p>In Lean's defence, <code> ‚Ü•(submodule.span (zmod 2) (set.range b))</code> is also a <code>nat</code>-module, an <code>int</code>-module, ...</p>",
        "id": 342857123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679186017
    }
]