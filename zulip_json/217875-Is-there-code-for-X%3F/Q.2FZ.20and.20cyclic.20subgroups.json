[
    {
        "content": "<p>I almost have a complete proof that the category of R-modules has enough injectives, and I'm getting stuck on showing that any nontrivial cyclic subgroup of an abelian group admits a nonzero map to Q/Z. Two specific questions I have are:</p>\n<ul>\n<li>Is there API for Q/Z? Including, for example, \"the order of p/q is q\"? I've been using an ad-hoc Q/Z, which I doubt is ideal</li>\n<li>Is there an easy way to work with cyclic subgroups? Something like the map determined by sending your generator to an element with an appropriate order.</li>\n</ul>\n<p>Here's some of my scratchwork.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.OrderOfElement</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ZinQ</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">ℚ</span> <span class=\"n\">where</span>\n<span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">Set.image</span> <span class=\"o\">(</span><span class=\"n\">Int.castAddHom</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">⊤</span>\n<span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n<span class=\"n\">neg_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">QmodZ</span> <span class=\"o\">:=</span> <span class=\"n\">ℚ</span> <span class=\"bp\">⧸</span> <span class=\"n\">ZinQ</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">m</span> <span class=\"bp\">→+</span> <span class=\"n\">ℚ</span> <span class=\"bp\">⧸</span> <span class=\"n\">ZinQ</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.choose</span> <span class=\"n\">hx</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">•</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.choose_spec</span> <span class=\"n\">hx</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsOfFinAddOrder</span> <span class=\"n\">m</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">QuotientAddGroup.mk'</span> <span class=\"n\">ZinQ</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">addOrderOf</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">QuotientAddGroup.mk'</span> <span class=\"n\">ZinQ</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsOfFinAddOrder</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 370888594,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1688063997
    },
    {
        "content": "<p><code>QmodZ</code> is just <code>AddCircle (1 : Rat)</code>. You'll find more API that way.</p>",
        "id": 370891063,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688064503
    },
    {
        "content": "<p>There is some API about cyclic groups in GroupTheory.SpecificGroups.Cyclic</p>",
        "id": 370903068,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1688067063
    },
    {
        "content": "<p>Thanks for pointing out AddCircle!<br>\nI looked through GroupTheory.SpecificGroups.Cyclic, but there isn't anything about mapping out of it. I think for this specific application, I guess it would have to belong to the AddSubgroup.zmultiples API, since the map depends on the specific generator.</p>\n<p>Here's a cleaner (and sorry free) version of what I'm looking for.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">lift_val</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.choose</span> <span class=\"n\">x.2</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_lift_val_eq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lift_val</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Exists.choose_spec</span> <span class=\"n\">x.2</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">addOrderOf</span> <span class=\"n\">b</span> <span class=\"bp\">∣</span> <span class=\"n\">addOrderOf</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">a</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lift_val</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">b</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">lift_val</span> <span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">addOrderOf_dvd_iff_zsmul_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">addOrderOf</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">lift_val</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addOrderOf_dvd_iff_zsmul_eq_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">smul_lift_val_eq</span>\n    <span class=\"n\">apply</span> <span class=\"n\">dvd_trans</span>\n    <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">addOrderOf</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">addOrderOf</span> <span class=\"n\">a</span>\n      <span class=\"n\">norm_cast</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">H</span>\n  <span class=\"n\">map_add'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">lift_val</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">lift_val</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">lift_val</span> <span class=\"n\">y</span> <span class=\"bp\">•</span> <span class=\"n\">b</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"n\">addOrderOf</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">lift_val</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">lift_val</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">lift_val</span> <span class=\"n\">y</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addOrderOf_dvd_iff_zsmul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_smul</span><span class=\"o\">,</span> <span class=\"n\">sub_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">•</span> <span class=\"n\">_</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"n\">lift_val</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">lift_val</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">lift_val</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">addOrderOf_dvd_iff_zsmul_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">apply</span> <span class=\"n\">dvd_trans</span>\n      <span class=\"bp\">.</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">addOrderOf</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">addOrderOf</span> <span class=\"n\">a</span>\n        <span class=\"n\">norm_cast</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_lift_val_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is this worth adding to mathlib if it isn't already there in some form?</p>",
        "id": 370914212,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1688069742
    }
]