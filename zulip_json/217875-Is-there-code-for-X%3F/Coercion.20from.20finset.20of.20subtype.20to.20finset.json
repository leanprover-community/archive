[
    {
        "content": "<p>Hi, I am not sure what the correct way to express this is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Int</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">univ.subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is my first time dealing with subtypes and stuff</p>",
        "id": 400832058,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399140
    },
    {
        "content": "<p>It gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Finset.subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">univ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.16</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.16</span>\n</code></pre></div>\n<p>i.e. there's no coercion between the types</p>",
        "id": 400832103,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399168
    },
    {
        "content": "<p>That's right, I don't think we have a <code>Finset subtype -&gt; Finset basetype</code> conversion for this or other \"functorial\" types</p>",
        "id": 400832584,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699399442
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Int</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(((</span><span class=\"n\">univ.subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400832619,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699399445
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(((</span><span class=\"n\">univ.subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">Function.Embedding.subtype</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400832733,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699399526
    },
    {
        "content": "<p>Oh god <span aria-label=\"hide\" class=\"emoji emoji-1fae5\" role=\"img\" title=\"hide\">:hide:</span> just <code>.image Subtype.val</code> works though :) Thanks :)</p>",
        "id": 400832868,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399588
    },
    {
        "content": "<p>It feels like this should be in Mathlib or somewhere though?</p>",
        "id": 400832882,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399597
    },
    {
        "content": "<p>or does no one find subtypes useful</p>",
        "id": 400832893,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399607
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.attach#doc\">docs#Finset.attach</a> ? I think that's more canonical that <code>univ.subtype ...</code></p>",
        "id": 400832918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699399625
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.attach.image</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400832947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699399632
    },
    {
        "content": "<p>There's also this generalization, which doesn't require Fintype</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(((</span><span class=\"n\">t.subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">Function.Embedding.subtype</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hst</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400833000,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699399666
    },
    {
        "content": "<p>Kyle's code also doesn't require fintype</p>",
        "id": 400833074,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399697
    },
    {
        "content": "<p>haha</p>",
        "id": 400833077,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399698
    },
    {
        "content": "<p>and <code>DecidableEq</code> is too strong, <code>[DecidablePred (· ∈ s)]</code> is enough</p>",
        "id": 400833081,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699399701
    },
    {
        "content": "<p>Yes, anything that doesn't mention <code>univ</code></p>",
        "id": 400833106,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699399718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Coercion.20from.20finset.20of.20subtype.20to.20finset/near/400833081\">said</a>:</p>\n<blockquote>\n<p>and <code>DecidableEq</code> is too strong, <code>[DecidablePred (· ∈ s)]</code> is enough</p>\n</blockquote>\n<p>I thought <code>Finset \\a</code> requires <code>DecidableEq \\a</code></p>",
        "id": 400833120,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399735
    },
    {
        "content": "<p><code>failed to synthesize instance DecidableEq α</code> :(</p>",
        "id": 400833134,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399746
    },
    {
        "content": "<p>You don't need decidable at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.attach.map</span> <span class=\"o\">(</span><span class=\"n\">Function.Embedding.subtype</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400833141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699399751
    },
    {
        "content": "<p>I meant for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(((</span><span class=\"n\">t.subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">Function.Embedding.subtype</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hst</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400833160,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699399760
    },
    {
        "content": "<p>It's the <code>image</code> operation that needs decidable equality, since the way it works is it applies the function and then removes duplicates.</p>",
        "id": 400833182,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699399774
    },
    {
        "content": "<p><code>s.map (.subtype _)</code> is about the same length and easier to prove thing about than <code>s.image subtype.val</code></p>",
        "id": 400833236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699399804
    },
    {
        "content": "<p>Ah but <code>map</code> takes an injective function instead, I see</p>",
        "id": 400833268,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699399807
    },
    {
        "content": "<p>Aha okay,. I am getting a hang of it now. For future reference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span>  <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">univ_eq_attach</span><span class=\"o\">,</span> <span class=\"n\">attach_map_val</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Don't write this! Extra predicate bad. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">s.attach</span> <span class=\"bp\">=</span> <span class=\"n\">s.subtype</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_attach</span><span class=\"o\">,</span> <span class=\"n\">mem_subtype</span><span class=\"o\">,</span> <span class=\"n\">coe_mem</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400834453,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699400563
    },
    {
        "content": "<p>I will ask here since it's vaguely related: Does any of these results exist? For context, I am trying to prove that there is an ordered isomorphism between <code>Fin n</code> and <code>Fin s</code> where <code>s.card = n</code>. Without the \"ordered\" in OrderedIso, there's <code>equivFinOfCardEq</code> already.</p>",
        "id": 400855522,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699411317
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Int</span> <span class=\"n\">Finset</span> <span class=\"n\">Fintype</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Function.Embedding.fintype_of_fintype</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fintypeOfFinsetCardLe</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">card_coe</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">card_le_of_embedding</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">EmbeddingLike.apply_eq_iff_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">OrderEmbedding.OrderEmbedding_comp_OrderIso</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">g.toFun</span> <span class=\"bp\">∘</span> <span class=\"n\">f.toFun</span>\n  <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"n\">g.inj'.comp</span> <span class=\"n\">f.injective</span>\n  <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↪</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">f.fintype_of_fintype</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span><span class=\"n\">o</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoEquivOfFin</span> <span class=\"n\">ι</span> <span class=\"n\">h₁</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">ι</span> <span class=\"bp\">≤</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">card_le_of_embedding</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_fin</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span>\n  <span class=\"n\">apply</span> <span class=\"n\">OrderEmbedding.OrderEmbedding_comp_OrderIso</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Fin.castLEEmb</span> <span class=\"n\">h₃</span>\n</code></pre></div>\n<p>(And also some help with how to name the results would be appreciated...)</p>",
        "id": 400855646,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699411352
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 400855998,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699411533
    },
    {
        "content": "<p>That first one is rejected by <code>#lint</code></p>",
        "id": 400856171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699411597
    },
    {
        "content": "<p>Oh, I didn't know about that</p>",
        "id": 400856423,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699411688
    },
    {
        "content": "<p>The second is <code>f.toOrderHom.como g</code> or similar</p>",
        "id": 400856428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699411689
    },
    {
        "content": "<p>The second one is <code>  f.toOrderEmbedding.trans g\n</code></p>",
        "id": 400856444,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699411695
    },
    {
        "content": "<p>Okay I golfed a bit</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Function.Embedding.fintype_of_fintype</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fintypeOfFinsetCardLe</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">card_coe</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">card_le_of_embedding</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Subtype.ext</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">EmbeddingLike.apply_eq_iff_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↪</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">f.fintype_of_fintype</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoEquivOfFin</span> <span class=\"n\">ι</span> <span class=\"n\">h₁</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.toOrderEmbedding</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">ι</span> <span class=\"bp\">≤</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">card_le_of_embedding</span> <span class=\"n\">f</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_fin</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₂.trans</span> <span class=\"bp\">$</span> <span class=\"n\">Fin.castLEEmb</span> <span class=\"n\">h₃</span>\n</code></pre></div>",
        "id": 400857045,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699411948
    },
    {
        "content": "<p>I can't seem to find the first one. What should it be named?</p>",
        "id": 400857066,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699411963
    },
    {
        "content": "<p>The first one is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.ofInjective#doc\">docs#Fintype.ofInjective</a></p>",
        "id": 400873978,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699421726
    }
]