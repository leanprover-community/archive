[
    {
        "content": "<p>I find it strange that we do not have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_of_HasSum</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tsum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>am I not seeing it, or does this mean I am working with infinite series in a strange way?</p>",
        "id": 378162082,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690208479
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasSum.tsum_eq#doc\">docs#HasSum.tsum_eq</a></p>",
        "id": 378163124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690208644
    },
    {
        "content": "<p>You need <code>T2Space</code></p>",
        "id": 378163273,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690208674
    },
    {
        "content": "<p>Now I feel stupid. How did I not find this after staring at this page for a while… Sorry!</p>\n<p>I even tried <code>apply tsum_eq</code>, correctly guessing the name, but that didn’t work and tab completion didn’t show it either, probably due to the qualifier.</p>\n<p>Is there a way in lean to search for “any lemma that has <code>HasSum</code> and <code>tsum</code> in their type” (but not having to put them in a concrete formula, like with the <code>exact?</code> trick)? That’s how I usually found things when working with Isabelle.</p>",
        "id": 378166678,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690209296
    },
    {
        "content": "<p>We need a Lean version of <a href=\"https://hoogle.haskell.org\">https://hoogle.haskell.org</a> but it might be harder to implement.</p>",
        "id": 378167549,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690209454
    },
    {
        "content": "<p>I use <code>git grep</code></p>",
        "id": 378167778,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690209490
    },
    {
        "content": "<p>E.g., <code>git grep HasSum | grep tsum</code> returns 12 lines. About half of them are about <code>HasSum.tsum_eq</code>.</p>",
        "id": 378168100,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690209554
    },
    {
        "content": "<blockquote>\n<p>tab completion didn’t show it either, probably due to the qualifier.</p>\n</blockquote>\n<p>There is an open PR that fixes this, see <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/autocomplete.20woes\">#lean4 &gt; autocomplete woes</a>.</p>",
        "id": 378168686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690209652
    },
    {
        "content": "<p>Would it really be that hard (if done as a command inside lean)?  I haven’t done much lean metaprogramming, but if you can get your hands on the environment and can iterate over all definitions in scope, you should be able to filter by their type. Making it faster than a linear scan takes some more work, of course.</p>",
        "id": 378169270,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690209750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tsum.20and.20HasSum/near/378169270\">said</a>:</p>\n<blockquote>\n<p>Would it really be that hard (if done as a command inside lean)?</p>\n</blockquote>\n<p>I don't know.</p>",
        "id": 378170117,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690209905
    },
    {
        "content": "<p>This looks like it's the relevant code from the <code>exact?</code> tactic. I’ll see if I can make it work…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">DeclCache.get</span> <span class=\"o\">(</span><span class=\"n\">cache</span> <span class=\"o\">:</span> <span class=\"n\">DeclCache</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">cache.cache.get</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">map₂.toList</span> <span class=\"k\">do</span>\n    <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">cache.addDecl</span> <span class=\"n\">n</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 378170798,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690210040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> has marked this topic as resolved.</p>",
        "id": 378171614,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690210187
    },
    {
        "content": "<p>I personally try use ctrl+shift+f in VSCode and <code>decl1.*decl2</code>... works about 50% of the time</p>",
        "id": 378181020,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690211880
    },
    {
        "content": "<p>Having to resort to text search is definitely a failure in our tooling...</p>",
        "id": 378182800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690212195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, after <a href=\"https://github.com/leanprover-community/mathlib4/pull/6113\">#6113</a>, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.InfiniteSum.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tsum_of_HasSum</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HasSum</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tsum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>now reports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">HasSum.tsum_eq</span> <span class=\"n\">h</span>\n<span class=\"n\">Remaining</span> <span class=\"n\">subgoals</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">T2Space</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 378264552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690231379
    }
]