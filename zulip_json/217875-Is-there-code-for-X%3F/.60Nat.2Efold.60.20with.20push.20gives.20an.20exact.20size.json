[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args.toArray</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">args.size</span> <span class=\"bp\">=</span> <span class=\"mi\">2500</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">FloatArray.mkEmpty</span> <span class=\"mi\">2500</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2500</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">toNat</span><span class=\"bp\">!.</span><span class=\"n\">toFloat</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n    <span class=\"k\">let</span> <span class=\"n\">size2500</span> <span class=\"o\">:</span> <span class=\"n\">x.size</span> <span class=\"bp\">=</span> <span class=\"mi\">2500</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"wrong number of arguments\"</span>\n</code></pre></div>",
        "id": 399639322,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698804839
    },
    {
        "content": "<p>I think some intermediate theorem may help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fold_length_theorem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">N.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">init</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">init.size</span> <span class=\"bp\">+</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 399640338,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698805307
    },
    {
        "content": "<p>I managed to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pushIncOne</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.push</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">x.size</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">FloatArray.size</span><span class=\"o\">,</span> <span class=\"n\">Array.size</span><span class=\"o\">,</span> <span class=\"n\">FloatArray.push</span><span class=\"o\">,</span> <span class=\"n\">Array.push</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foldLengthTheorem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">N.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">init</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">init.size</span> <span class=\"bp\">+</span> <span class=\"n\">N</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">init</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">init</span><span class=\"o\">,</span>  <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pushIncOne</span><span class=\"o\">,</span> <span class=\"n\">foldLengthTheorem</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>But, <code>lean</code> does not think <code>foldLengthTheorem</code> is terminating.</p>",
        "id": 399641671,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698805969
    },
    {
        "content": "<p>I am able to use recursor by myself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pushIncOne</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.push</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">x.size</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">FloatArray.size</span><span class=\"o\">,</span> <span class=\"n\">Array.size</span><span class=\"o\">,</span> <span class=\"n\">FloatArray.push</span><span class=\"o\">,</span> <span class=\"n\">Array.push</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foldLengthTheorem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">N.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">init</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">init.size</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.rec</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">hypo</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pushIncOne</span><span class=\"o\">,</span> <span class=\"n\">hypo</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have no idea why <code>lean4</code> does not think the structural recursion is applicable. Any idea?</p>",
        "id": 399658259,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698815119
    },
    {
        "content": "<p>I'm not really sure what's happening here to be honest, looks like it could be a bug to me, but specifying the <code>N</code> of the recursive call seems to fix it, though the generated term looks _almost_ exactly the same <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foldLengthTheorem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">N.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">init</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">init.size</span> <span class=\"bp\">+</span> <span class=\"n\">N</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span><span class=\"o\">,</span> <span class=\"n\">init</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">init</span><span class=\"o\">,</span>  <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pushIncOne</span><span class=\"o\">,</span> <span class=\"n\">foldLengthTheorem</span> <span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 399781504,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698864988
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">N.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Array.empty</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Array.empty</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">N</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"c1\">-- a n works</span>\n</code></pre></div>",
        "id": 399788141,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698866665
    },
    {
        "content": "<p>Should I create an issue for this? Or is this a known problem?</p>",
        "id": 400032497,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698967057
    },
    {
        "content": "<p>I would create an issue on the lean 4 repo now yes (after searching to make sure there is nothing similar there already). I think this minimized example is fairly clearly a bug</p>",
        "id": 400036717,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698970019
    },
    {
        "content": "<p>For what it's worth, if you use tactics structural recursion might or might not work depending on exactly what the tactic is doing, and usually you'd use the induction tactic for simple recursion like this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foldLengthTheorem</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">N.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">init</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">init.size</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">N</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.fold</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pushIncOne</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 400036732,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698970025
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 400036760,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698970041
    },
    {
        "content": "<p>Here's a simpler example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">N</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"c1\">-- a n works</span>\n</code></pre></div>",
        "id": 400037274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698970386
    },
    {
        "content": "<p>I don't see any difference between the terms generated by each tactic proof at all</p>",
        "id": 400037717,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698970682
    },
    {
        "content": "<p>With pp.raw i saw some minor differences, at least for my original example</p>",
        "id": 400037841,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698970774
    },
    {
        "content": "<p>Ah, there's a <code>_recApp</code> metadata node, where if you do <code>a n</code> the <code>n</code> gets put inside that mdata.</p>",
        "id": 400038113,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698970980
    },
    {
        "content": "<p>If you do <code>simp only [a]</code> instead of <code>rw [a]</code> then it works too.</p>",
        "id": 400038517,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698971232
    },
    {
        "content": "<p>This has nothing to do with tactics, and it's basically that this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Remove the parentheses around <code>f</code> and it succeeds.</p>",
        "id": 400039336,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698971743
    },
    {
        "content": "<p>I tried to capture what we're seeing in this issue: <a href=\"https://github.com/leanprover/lean4/pull/2810\">lean4#2810</a></p>",
        "id": 400040630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698972514
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 400040735,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698972585
    },
    {
        "content": "<p>being addressed in <a href=\"https://github.com/leanprover/lean4/pull/2814\">https://github.com/leanprover/lean4/pull/2814</a></p>",
        "id": 400233208,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1699062575
    },
    {
        "content": "<p>now in <a href=\"https://github.com/leanprover/lean4/pull/2818\">https://github.com/leanprover/lean4/pull/2818</a></p>",
        "id": 401573160,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1699762822
    },
    {
        "content": "<p>This is <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/403614017\">now fixed</a> thanks to <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, and we'll have it in std and mathlib once we do a Lean version bump.</p>\n<p>I just tested that this works with a fresh build of Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">N</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 403627788,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700670759
    }
]