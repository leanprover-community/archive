[
    {
        "content": "<p>Do we not have these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I was expecting theorems called things like <code>algebra.mem_adjoin_of...</code> but I've failed to find them. Maybe I'm missing an import? You can rewrite <code>algebra.mem_adjoin_iff</code> which reduces the question to <code>subring.closure</code> but I can't find the API for that either :-/</p>",
        "id": 343190753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679335313
    },
    {
        "content": "<p>First is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.subset_adjoin\">docs#algebra.subset_adjoin</a>  I think?</p>",
        "id": 343191167,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679335410
    },
    {
        "content": "<p>Aah, I'm looking for <code>mem</code> and it's <code>subset</code>!</p>",
        "id": 343191336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679335447
    },
    {
        "content": "<p>Second is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.algebra_map_mem\">docs#subalgebra.algebra_map_mem</a></p>",
        "id": 343192269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679335675
    },
    {
        "content": "<p>Yeah the adjoin api tends to use a lot the <code>subset mem = mem</code> constructions; I'd generally look for <code>subset</code>results.</p>",
        "id": 343206385,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1679339617
    }
]