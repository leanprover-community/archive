[
    {
        "content": "<p>This question is dual to the usual one on this channel: I have a function, but I need the right place for it.<br>\nWhich Lean module is the natural home for this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Create Tuple syntax (`()` if the array is empty, and just the value if its a singleton)</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkTupleSyntax</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>  <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(())</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">es</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">es</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">),</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">es</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">:]),</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 403831505,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700761684
    },
    {
        "content": "<p>If <code>Std.Lean.Syntax</code> had already existed, I would say there. Possibly still there.</p>",
        "id": 403858624,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700776646
    },
    {
        "content": "<p>I need it in core, though</p>",
        "id": 403858634,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700776663
    },
    {
        "content": "<p>Right next to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.mkPairs#src\">src#Lean.Elab.Term.mkPairs</a>?</p>",
        "id": 403858755,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700776802
    },
    {
        "content": "<p>Maybe just right at the point you need it, until there is evidence it warrants going somewhere higher.</p>",
        "id": 403858969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700776913
    },
    {
        "content": "<p>Somehow I recall someone saying “ah, that (<code>mkPairs</code>)’s defined before we have quotations”. But yes, if I can use <code> `(…)</code> there then that’s natural. I should just try :-)</p>",
        "id": 403859085,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700776965
    },
    {
        "content": "<p>you can use quotations anywhere, although for quotations in Init you can't use syntax that hasn't been defined yet</p>",
        "id": 403999285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700845627
    }
]