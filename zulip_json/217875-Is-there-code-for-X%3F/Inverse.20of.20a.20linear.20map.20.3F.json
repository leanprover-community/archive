[
    {
        "content": "<p>For functions between types, we have <code>Function.invFun</code> that produces a candidate inverse function (if the codomain of the function is nonempty) which is an actual inverse if the function is bijective. Is there a similar definition for linear maps ? I'm over a division ring, and my spaces are finite-dimensional, so choice wouldn't even be needed, but if there's a general solution using choice I'll take it too.<br>\nI think I can code what I want myself, but I'd rather not duplicate code if it already exists.</p>",
        "id": 393685912,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695899834
    },
    {
        "content": "<p>(I am aware of <code>LinearPMap.inverse</code>, but I really want a <code>LinearMap</code> defined on the whole space.)</p>",
        "id": 393686427,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695899938
    },
    {
        "content": "<p>If your map is an endomorphism you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ring.inverse#doc\">docs#Ring.inverse</a></p>",
        "id": 393686777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695900014
    },
    {
        "content": "<p>It's not an endomorphism unfortunately.</p>",
        "id": 393686925,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695900059
    },
    {
        "content": "<p>(My first impulse was to write <code>f⁻¹</code>, which doesn't seem to exist.)</p>",
        "id": 393687038,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695900087
    },
    {
        "content": "<p>Do you actually know that your function is bijective? Or do you want junk values in cas it isn't?</p>",
        "id": 393696251,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1695902418
    },
    {
        "content": "<p>If it's bijective the simplest would be to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearEquiv.ofBijective#doc\">docs#LinearEquiv.ofBijective</a> and apply <code>.symm</code> to it.</p>",
        "id": 393696599,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1695902494
    },
    {
        "content": "<p>Given a function on a nonempty domain,  it is easy to construct a function which is a right inverse iff your function is surjective, and is an inverse iff your function is bijective. Just map any element to some preimage if it has some, and to a dummy value otherwise.<br>\nBut that's definitely not enough to define a linear map.<br>\nFor vector spaces, something is possible, by taking complements, but there's no hope otherwise…</p>",
        "id": 393700978,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695903435
    },
    {
        "content": "<p>Yes we can't be as smart as <code>invFun</code> (since there's no hope of constructing a left/right inverse from injectivity/surjectivity), but <em>maybe</em> it's still useful from a UX point of view to have a \"inverse\" which is zero whenever there's no reasonable inverse.</p>",
        "id": 393702826,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1695903892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20of.20a.20linear.20map.20.3F/near/393696251\">said</a>:</p>\n<blockquote>\n<p>Do you actually know that your function is bijective? Or do you want junk values in cas it isn't?</p>\n</blockquote>\n<p>It's not always bijective. I want it to behave like <code>Function.invFun</code>, i.e. to give a preimage when such a preimage exists and a junk value otherwise. I'm using this to construct a <code>LocalEquiv</code>, which must be defined everywhere but only needs to take sensible values on its source.</p>",
        "id": 393705066,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695904535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20of.20a.20linear.20map.20.3F/near/393700978\">said</a>:</p>\n<blockquote>\n<p>Given a function on a nonempty domain,  it is easy to construct a function which is a right inverse iff your function is surjective, and is an inverse iff your function is bijective. Just map any element to some preimage if it has some, and to a dummy value otherwise.<br>\nBut that's definitely not enough to define a linear map.<br>\nFor vector spaces, something is possible, by taking complements, but there's no hope otherwise…</p>\n</blockquote>\n<p>I need the \"inverse\" to be a linear map. I am over a division ring, so what I want is definitely possible ! The questions are: (1) does it already exist ? (2) is this the best way to proceed ? (Question (2) is for me to answer, I guess.)</p>",
        "id": 393705441,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695904611
    },
    {
        "content": "<p>The situation is the following: I am trying to defined charts for the Grassmannian of r-dimensional subspaces of a K-vector space E. The model space is <code>(Fin r → K) →ₗ[K] E</code>. These charts will be indexed by isomorphisms <code>φ : E ≃ₗ[K] U × (Fin r → K)</code>, where <code>U</code> is a fixed K-vector space. The set where the chart indexed by <code>φ</code> makes sense is the set of subspaces <code>W</code> such that <code>φ.snd.domRestrict W</code> is an isomorphism, and the chart sends such a <code>W</code> to <code>φ.fst  ∘ (Submodule.subtype W) ∘ (φ.snd.domRestrict W)⁻¹</code>, which is in <code>(Fin r → K) →ₗ[K] E</code> as desired. But I want the chart to be defined everywhere for Lean reasons, so it would be nice if the formula made sense for every <code>W</code>. (Barring that, I can of course define the chart by sending all \"bad\" <code>W</code>'s to <code>0</code>.)</p>",
        "id": 393705967,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695904773
    },
    {
        "content": "<p>Are you looking for the linear map analogue to the moore-penrose pseudoinverse?</p>",
        "id": 393706409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695904886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20of.20a.20linear.20map.20.3F/near/393706409\">said</a>:</p>\n<blockquote>\n<p>Are you looking for the linear map analogue to the moore-penrose pseudoinverse?</p>\n</blockquote>\n<p>Not really, because my maps are not endomorphisms and I don't care about \"best fits\". I was really just looking for a way to extend the inverse function maps from <code>V ≃ₗ[K] W</code> to  <code>V →ₗ[K] W</code>, which seemed like a very \"Lean\" thing to do.</p>",
        "id": 393707795,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695905228
    },
    {
        "content": "<p>The pseudoinverse doesn't need endomorphisms either, but I guess the best fit comment makes sense</p>",
        "id": 393718945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695907961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20of.20a.20linear.20map.20.3F/near/393686427\">said</a>:</p>\n<blockquote>\n<p>(I am aware of <code>LinearPMap.inverse</code>, but I really want a <code>LinearMap</code> defined on the whole space.)</p>\n</blockquote>\n<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.exists_extend#doc\">docs#LinearMap.exists_extend</a> to go from one to the other</p>",
        "id": 393719674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695908095
    },
    {
        "content": "<p>Ok, I thought it was square matrices. Anyway, I am doing something much less refined. What I am doing so far (in my actual problem) is set the pseudo-inverse at 0 when the linear map is not invertible. We'll see if that causes trouble later.</p>",
        "id": 393719908,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695908136
    },
    {
        "content": "<p>I interpreted<br>\n<span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20of.20a.20linear.20map.20.3F/near/393705066\">said</a>:</p>\n<blockquote>\n<p>I want it to behave like <code>Function.invFun</code>, i.e. to give a preimage when such a preimage exists and a junk value otherwise.</p>\n</blockquote>\n<p>as saying that you want a partial inverse</p>",
        "id": 393721751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695908493
    },
    {
        "content": "<p>Your latest message is \"give a preimage if <em>all</em> such preimages exist\"</p>",
        "id": 393721986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695908531
    },
    {
        "content": "<p>I don't understand your message. Your interpretation of my first message is probably correct. My last message says that I'm trying to make do with something weaker, since my final goal is not pseudo-inverses but charts for the grassmannian (I explained that in a previous message in this thread).</p>",
        "id": 393722402,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695908603
    },
    {
        "content": "<p>As I am not done proving all the properties of the charts, I hope that my \"something weaker\" will suffices but cannot be sure yet.</p>",
        "id": 393722547,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695908634
    },
    {
        "content": "<p>I can't make any judgement on whether the weaker condition will work, I'm afraid!</p>",
        "id": 393722645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695908646
    },
    {
        "content": "<p>I'll just keep chugging on and come back if it does not work.</p>",
        "id": 393722740,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695908662
    },
    {
        "content": "<p>Update: the kind of thing that I wanted exists, but only for continuous linear maps ! Cf <code>ContinuousLinearMap.inverse</code>. It sends a <code>ContinuousLinearMap</code>to its inverse if it underlies a <code>ContinuousLinearEquiv</code>, and to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> otherwise. (Confusingly, <code>LinearMap.inverse</code> does something different.)<br>\nFunnily enough, I actually needed that construction for continuous linear maps in the end, so I guess all's well that ends well.</p>",
        "id": 394210446,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1696166421
    }
]