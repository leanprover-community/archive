[
    {
        "content": "<p>Hey, is there code for the fact that right multiplication in a monoid is a (left) SMul-homomorphism?</p>",
        "id": 378274097,
        "sender_full_name": "Noam Atar",
        "timestamp": 1690231955
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DistribMulAction.toLinearMap#doc\">docs#DistribMulAction.toLinearMap</a>, maybe?</p>",
        "id": 378275471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690232457
    },
    {
        "content": "<p>SMul-homomorphisms are very undeveloped, so I doubt you'll find the result for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulActionHom#doc\">docs#MulActionHom</a></p>",
        "id": 378275694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690232522
    },
    {
        "content": "<p>Oh, nevermind: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SMulCommClass.toMulActionHom#doc\">docs#SMulCommClass.toMulActionHom</a> !</p>",
        "id": 378275831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690232558
    },
    {
        "content": "<p>And a monoid is automatically a SMulCommClass?</p>",
        "id": 378277055,
        "sender_full_name": "Noam Atar",
        "timestamp": 1690233038
    },
    {
        "content": "<p>Yes</p>",
        "id": 378280734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690234521
    },
    {
        "content": "<p>That is, we have <code>SMulCommClass M Mᵐᵒᵖ M</code> already somewhere</p>",
        "id": 378280824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690234560
    },
    {
        "content": "<p>Cool, thanks!</p>",
        "id": 378339658,
        "sender_full_name": "Noam Atar",
        "timestamp": 1690262092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Right.20multiplication.20in.20a.20monoid/near/378280824\">said</a>:</p>\n<blockquote>\n<p>That is, we have <code>SMulCommClass M Mᵐᵒᵖ M</code> already somewhere</p>\n</blockquote>\n<p>Are you sure of this? I searched the codebase for M Mᵐᵒᵖ M and didn't find anything...</p>",
        "id": 378550962,
        "sender_full_name": "Noam Atar",
        "timestamp": 1690305121
    },
    {
        "content": "<p>You'll have more luck searching for <code>SMulCommClass α αᵐᵒᵖ α</code>... (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Semigroup.opposite_smulCommClass%27#doc\">docs#Semigroup.opposite_smulCommClass'</a>)</p>",
        "id": 378551780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690305287
    },
    {
        "content": "<p>you can find such things as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378552441,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690305438
    },
    {
        "content": "<p>Cool! I'll try that next time!</p>",
        "id": 378553481,
        "sender_full_name": "Noam Atar",
        "timestamp": 1690305699
    }
]