[
    {
        "content": "<p>Hello, I want to rewrite all expressions of type <code>Array</code> in my expression using an equality <code>List.toArray (Array.toList a) = a</code>.  I tried using simp with singlePass option:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormCast</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NormCast.Ext</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SimpRw</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">toArrayRoundtrip</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">Array.toList</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">all_array</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Array.all</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Array.all</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Array.all</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">++</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">toArrayRoundtrip</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But it does not rewrite all instances, (although it does most of them):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">Array.all</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">Array.toList</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">Array.all</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">Array.toList</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Array.all</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"mi\">0</span>\n      <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">Array.toList</span> <span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">Array.toList</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">Array.toList</span> <span class=\"n\">b</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>What is the reason it is skipping some instances of <code>a</code>?  Is there some way I can configure it to do all of them?</p>",
        "id": 354578364,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682809026
    },
    {
        "content": "<p>Un <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>-ing, I assume you want to do this to derive an <code>Array</code> result from the corresponding <code>List</code> one? The better solution in that case is <code>refine Array.toList_injective ?_</code> and then push the <code>toList</code> inwards (which hopefully simp lemmas are already configured to do).</p>",
        "id": 354628289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682841845
    },
    {
        "content": "<p>I think you have gone a bit to far in deciphering my problem.  I am experimenting with writing tactics, and I really do want to understand what is happening here.</p>",
        "id": 354630328,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682842698
    },
    {
        "content": "<p>At any rate, you have to explain exactly what you mean by \"all instances\", because when you rewrite <code>a = List.toArray (Array.toList a)</code>, you get a new occurrence of <code>a</code>.</p>",
        "id": 354630608,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682842783
    },
    {
        "content": "<p>with <code>singlePass</code> mode I think that is not a problem because once a subterm is rewritten it is not revisited</p>",
        "id": 354630947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682842888
    },
    {
        "content": "<p>I think the main issue here is that <code>Array.all</code> is a dependent function and so simp is bad at rewriting occurrences of <code>a</code></p>",
        "id": 354631125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682842940
    },
    {
        "content": "<p>this is probably poor API design, the dependent args are defaulted so you don't notice them until you try to rewrite</p>",
        "id": 354631202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682842972
    },
    {
        "content": "<p>Why is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.all#doc\">docs4#Array.all</a> dependent?</p>",
        "id": 354631661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682843150
    },
    {
        "content": "<p>I guess so that you can specify the start and stop points?</p>",
        "id": 354631780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682843183
    },
    {
        "content": "<p>Wait what, why does it have start and stop arguments?</p>",
        "id": 354631792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682843191
    },
    {
        "content": "<p>seems like a better use for <code>Subarray.all</code></p>",
        "id": 354631830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682843202
    },
    {
        "content": "<p>I didn't know <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subarray#doc\">docs4#Subarray</a> existed, and was about to advocate for it</p>",
        "id": 354631908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682843230
    },
    {
        "content": "<p>in fact I would bet that those arguments exist exactly because they are needed by Subarray.all</p>",
        "id": 354632060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682843285
    },
    {
        "content": "<p>but having them secretly there in the main function causes a lot of issues</p>",
        "id": 354632112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682843312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rewrite.20all.20instances.20of.20a.20type/near/354628289\">said</a>:</p>\n<blockquote>\n<p>The better solution in that case is <code>refine Array.toList_injective ?_</code> and then push the <code>toList</code> inwards (which hopefully simp lemmas are already configured to do).</p>\n</blockquote>\n<p>I'm not convinced by this; I think the \"better\" solution is to induct on <code>a</code> and <code>b</code></p>",
        "id": 354632165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682843337
    },
    {
        "content": "<p>I don't know what the default induction principle on <code>Array</code> is (it would be great if the docs would show this), but if it's not the one that introduces <code>List.toArray</code> then there should be a manual one that does.</p>",
        "id": 354632282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682843397
    },
    {
        "content": "<p>If you just destruct it you get <code>Array.mk</code>, not <code>List.toArray</code></p>",
        "id": 354632429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682843459
    },
    {
        "content": "<p>Are you sure? Your solution requires rewriting distributivity lemmas backwards. Mine only requires them forward.</p>",
        "id": 354632437,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682843462
    },
    {
        "content": "<p>In particular, in your solution it will be hard to handle <code>[] ++ List.toArray l</code>.</p>",
        "id": 354632612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682843528
    },
    {
        "content": "<p>you want to prefer <code>Array.mk</code> and <code>Array.data</code> over <code>List.toArray</code> and <code>Array.toList</code></p>",
        "id": 354632719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682843568
    },
    {
        "content": "<p>yes, both pairs of functions exist and they are not defeq</p>",
        "id": 354632759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682843585
    },
    {
        "content": "<p>Why?</p>",
        "id": 354633980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682844083
    },
    {
        "content": "<p>because <code>List.toArray</code> is the definition of <code>Array.mk</code></p>",
        "id": 354634035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682844102
    },
    {
        "content": "<p>which is brain warping since <code>Array.mk</code> is the constructor</p>",
        "id": 354634123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682844123
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.toArray#doc\">docs4#List.toArray</a></p>",
        "id": 354634171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682844136
    },
    {
        "content": "<p>from a proving standpoint, <code>List.toArray</code> is just a rube goldberg way to write the constructor</p>",
        "id": 354634310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682844183
    },
    {
        "content": "<p>Should it be private?</p>",
        "id": 354634342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682844192
    },
    {
        "content": "<p>I think that would help (and renaming it to e.g. <code>Array.mkImpl</code>)</p>",
        "id": 354634402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682844212
    },
    {
        "content": "<p>/heavily marked as not for use?</p>",
        "id": 354634408,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682844214
    },
    {
        "content": "<p>The only reason it exists is the attribute that connects it to the compiler, right?</p>",
        "id": 354634443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682844227
    },
    {
        "content": "<p>right, it could be private</p>",
        "id": 354634463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682844238
    },
    {
        "content": "<p>it is nice to know we can prove the two functions equal, not sure where that would go otherwise</p>",
        "id": 354634569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682844267
    },
    {
        "content": "<p>Can we use that fact with @[csimp]?</p>",
        "id": 354634629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682844293
    },
    {
        "content": "<p>I thought about that but it would probably throw the compiler for a loop (literally) since it's trying to make <code>Array.mk</code> call <code>List.toArray</code></p>",
        "id": 354634699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682844330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rewrite.20all.20instances.20of.20a.20type/near/354631125\">said</a>:</p>\n<blockquote>\n<p>I think the main issue here is that <code>Array.all</code> is a dependent function and so simp is bad at rewriting occurrences of <code>a</code></p>\n</blockquote>\n<p>I see that makes sense.  <code>simp</code> is the best way we have to rewrite dependent types though, right?  There is not some other tool that would be better at rewriting here?</p>",
        "id": 354722646,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682874001
    }
]