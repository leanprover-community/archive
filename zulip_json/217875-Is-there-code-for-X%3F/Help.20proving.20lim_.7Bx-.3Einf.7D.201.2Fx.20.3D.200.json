[
    {
        "content": "<p>I'm learning how to use lean4 and to get started I wanted to try and prove that lim_{x-&gt;inf} 1/x = 0 (this is actually just a piece of what I'm trying to prove, but it is that I'm having most trouble with). I've found that Mathlib.Order.Filter.Tendsto is probably what I want to encode the notion of a limit, but I was having trouble using it. I started to attempt to prove something simpler: lim_{x -&gt; 2} x * 3 = 6, but I'm not quite sure how to go about it. Seeing an example might help me understand better. (Also is there a way to directly use the epsilon-delta definition of a limit instead of Tendsto, or are they fundamentally the same?)</p>\n<p>If it simplifies things, I'm quite happy working in the Rational numbers instead of the Reals. In fact, even if I have a proof for the Reals, I'd like to additionally prove the special case for Rationals - especially if it leads to simplifications of the proof.</p>\n<p>If this is not the best place to ask questions like these please direct me to a better forum for my question.</p>",
        "id": 394037324,
        "sender_full_name": "Jonathan Crall",
        "timestamp": 1696042812
    },
    {
        "content": "<p>Could you show a minimal example of the code you have? <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 394037972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696043281
    },
    {
        "content": "<p>Using the rationals instead of the reals will most likely make your job harder, not easier, because the reals are complete but the rationals aren't</p>",
        "id": 394038066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696043333
    },
    {
        "content": "<p>but I guess if you want to prove a specific limit and not just an existence claim then it's probably about the same</p>",
        "id": 394038102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696043361
    },
    {
        "content": "<p>(note: there is no file called <code>Mathlib.Order.Filter.Tendsto</code>, this confused me slightly about your post. The file is called <code>Mathlib.Order.Filter.Basic</code> and it defines a notion called <code>Filter.Tendsto</code>)</p>",
        "id": 394038354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696043553
    },
    {
        "content": "<p>I am surprised that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>turns up empty, and <code>apply?</code>doesn't seem to have anything relevant. I'm sure this is already in the library</p>",
        "id": 394038791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696043929
    },
    {
        "content": "<p>on the other hand</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>does work, and suggests <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_inv_atTop_zero#doc\">docs#tendsto_inv_atTop_zero</a></p>",
        "id": 394038995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696044089
    },
    {
        "content": "<p>apparently there isn't a similar result about <code>a / x</code> like I would have expected</p>",
        "id": 394039018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696044113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"655039\">@Jonathan Crall</span></p>",
        "id": 394039268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696044329
    },
    {
        "content": "<p>Thank you, this is very helpful. I'm still getting used to the syntax and import system, hence the incorrect usage of terminology. Your correction makes the distinction between files and the symbols they expose more clear (however I'm still a bit confused about how open Filter can work if you just import Mathlib - how does it know about Filter if Filter is defined in Mathlib.Order?)</p>\n<p>For a MWE example... working is a very generous description. I figured out enough to make </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Defs</span>\n<span class=\"kd\">def</span> <span class=\"n\">reciprocal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span>\n<span class=\"k\">#eval</span> <span class=\"n\">reciprocal</span> <span class=\"o\">((</span><span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>work</p>\n<p>but my limit code that I've tried so far is nonsense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.AtTopBot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.PSeries</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Pi.Wallis</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Rat</span>\n<span class=\"k\">#check</span> <span class=\"n\">Filter.Tendsto</span>\n<span class=\"k\">#check</span> <span class=\"n\">Filter.atTop</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Real.tendsto_sum_pi_div_four</span> <span class=\"o\">:</span>\n<span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.sum</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">Filter.atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">nhds</span>\n<span class=\"k\">#check</span> <span class=\"n\">Real.Pi</span>\n</code></pre></div>\n<p>I was just trying to get a grasp on the concepts. I'm a computer scientist by trade, topology and pure maths is very new to me. </p>\n<p>Attempting your code, I had to add in a few imports, but I'm still getting errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"n\">Myfirstproof</span><span class=\"bp\">»</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Filter.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">40</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">TopologicalSpace</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">Main.lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">58</span>\n<span class=\"bp\">`</span><span class=\"n\">exact</span><span class=\"bp\">?`</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">close</span> <span class=\"n\">the</span> <span class=\"n\">goal.</span> <span class=\"n\">Try</span> <span class=\"bp\">`</span><span class=\"n\">apply</span><span class=\"bp\">?`</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">partial</span> <span class=\"n\">suggestions.</span>\n</code></pre></div>\n<p>It seems upset about <code>(nhds (0:ℝ)</code> and <code>exact?</code></p>\n<p>(Note this is in a vscode environment and I created the project with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elan</span> <span class=\"n\">default</span> <span class=\"n\">stable</span>\n<span class=\"n\">elan</span> <span class=\"n\">run</span> <span class=\"c1\">--install stable lake new myfirstproof</span>\n<span class=\"n\">cd</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">joncrall</span><span class=\"bp\">/</span><span class=\"n\">code</span><span class=\"bp\">/</span><span class=\"n\">paper</span><span class=\"bp\">-</span><span class=\"n\">g1</span><span class=\"bp\">-</span><span class=\"n\">and</span><span class=\"bp\">-</span><span class=\"n\">mcc</span><span class=\"bp\">/</span><span class=\"n\">myfirstproof</span>\n<span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>I think I also did some manual modifications to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n</code></pre></div>\n<p>to lakefile.lean in the myfirstproof directory.</p>",
        "id": 394041626,
        "sender_full_name": "Jonathan Crall",
        "timestamp": 1696046340
    },
    {
        "content": "<p><code>import Mathlib</code> means import everything</p>",
        "id": 394042396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696046712
    },
    {
        "content": "<p>imports are transitive</p>",
        "id": 394042413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696046720
    },
    {
        "content": "<p>and <code>Mathlib.lean</code> imports every file</p>",
        "id": 394042447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696046736
    },
    {
        "content": "<p>By importing only <code>Mathlib.Order.Filter.Basic</code>, <code>Mathlib.Topology.Basic</code> and <code>Mathlib.Data.Real.Basic</code> you have imported enough to make sense of the <em>statement</em> but not the <em>proof</em>. The theorem suggested by <code>exact?</code>, <code>tendsto_inv_atTop_zero</code>, lives in <code>Mathlib.Topology.Algebra.Order.Field</code> which is a more advanced file that imports all three of the above files and then adds some more stuff. <code>import Mathlib</code> is just importing the whole library so everything is in there somewhere</p>",
        "id": 394042699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696046910
    },
    {
        "content": "<p>(Actually you haven't imported enough to make sense of the statement, you need to import whatever provides the instance of <code>TopologicalSpace ℝ</code>. That is, you can't use \"the real numbers\" and \"limits\" in the same sentence until you know that the reals are a topological space, and the basic file defining the real numbers doesn't do that)</p>",
        "id": 394042889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696047012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Help.20proving.20lim_.7Bx-.3Einf.7D.201.2Fx.20.3D.200/near/394042413\">said</a>:</p>\n<blockquote>\n<p>imports are transitive</p>\n</blockquote>\n<p>Toto, I have a feeling we're not in coding in Python anymore. </p>\n<p>When I run your code verbatim: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>It takes a ton of CPU and time and then ultimately returns:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">joncrall</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake</span> <span class=\"n\">print</span><span class=\"bp\">-</span><span class=\"n\">paths</span> <span class=\"n\">Init</span> <span class=\"n\">Mathlib</span><span class=\"bp\">`</span> <span class=\"n\">failed</span><span class=\"o\">:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1440</span><span class=\"bp\">/</span><span class=\"mi\">1492</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1498</span><span class=\"bp\">/</span><span class=\"mi\">1562</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Category.ModuleCat.ChangeOfRings</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1667</span><span class=\"bp\">/</span><span class=\"mi\">1701</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Homology.Homotopy</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1668</span><span class=\"bp\">/</span><span class=\"mi\">1709</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Homology.Opposite</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1773</span><span class=\"bp\">/</span><span class=\"mi\">1819</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Algebra.Module.PID</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2004</span><span class=\"bp\">/</span><span class=\"mi\">2085</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.PiLp</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2092</span><span class=\"bp\">/</span><span class=\"mi\">2183</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Geometry.RingedSpace.PresheafedSpace.HasColimits</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2111</span><span class=\"bp\">/</span><span class=\"mi\">2201</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Topology.Sheaves.SheafCondition.PairwiseIntersections</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2138</span><span class=\"bp\">/</span><span class=\"mi\">2247</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2424</span><span class=\"bp\">/</span><span class=\"mi\">2711</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Geometry.Manifold.ContMDiff</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2750</span><span class=\"bp\">/</span><span class=\"mi\">3000</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Computability.TMToPartrec</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2963</span><span class=\"bp\">/</span><span class=\"mi\">3242</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.FieldTheory.PerfectClosure</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3143</span><span class=\"bp\">/</span><span class=\"mi\">3784</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.RingTheory.RootsOfUnity.Minpoly</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3172</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.RingTheory.IsAdjoinRoot</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3324</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.RingTheory.Perfection</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3376</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.MeasureTheory.Function.ConditionalExpectation.Basic</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3394</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.RepresentationTheory.Action</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3415</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.MeasureTheory.Function.ConditionalExpectation.Indicator</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3421</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Probability.Notation</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3441</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.MeasureTheory.Function.ConditionalExpectation.Real</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3442</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.RingTheory.Polynomial.Cyclotomic.Roots</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3452</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Probability.Kernel.CondDistrib</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">joncrall</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">joncrall</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">joncrall</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">Dpp.unicode.fun</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"bp\">-</span><span class=\"n\">Dpp.proofs.withType</span><span class=\"bp\">=</span><span class=\"n\">false</span> <span class=\"bp\">-</span><span class=\"n\">DautoImplicit</span><span class=\"bp\">=</span><span class=\"n\">false</span> <span class=\"bp\">-</span><span class=\"n\">DrelaxedAutoImplicit</span><span class=\"bp\">=</span><span class=\"n\">false</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">NormedSpace</span><span class=\"bp\">/</span><span class=\"n\">PiLp.lean</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./.</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">NormedSpace</span><span class=\"bp\">/</span><span class=\"n\">PiLp.olean</span> <span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">NormedSpace</span><span class=\"bp\">/</span><span class=\"n\">PiLp.ilean</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">NormedSpace</span><span class=\"bp\">/</span><span class=\"n\">PiLp.c</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span>\n<span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">𝕜'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Lots</span> <span class=\"n\">more</span> <span class=\"n\">text</span> <span class=\"n\">here</span>\n\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3645</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.AlgebraicGeometry.Morphisms.RingHomProperties</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3648</span><span class=\"bp\">/</span><span class=\"mi\">3787</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.AlgebraicGeometry.Morphisms.QuasiSeparated</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">joncrall</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">joncrall</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">joncrall</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">Dpp.unicode.fun</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"bp\">-</span><span class=\"n\">Dpp.proofs.withType</span><span class=\"bp\">=</span><span class=\"n\">false</span> <span class=\"bp\">-</span><span class=\"n\">DautoImplicit</span><span class=\"bp\">=</span><span class=\"n\">false</span> <span class=\"bp\">-</span><span class=\"n\">DrelaxedAutoImplicit</span><span class=\"bp\">=</span><span class=\"n\">false</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicGeometry</span><span class=\"bp\">/</span><span class=\"n\">Morphisms</span><span class=\"bp\">/</span><span class=\"n\">RingHomProperties.lean</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./.</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicGeometry</span><span class=\"bp\">/</span><span class=\"n\">Morphisms</span><span class=\"bp\">/</span><span class=\"n\">RingHomProperties.olean</span> <span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicGeometry</span><span class=\"bp\">/</span><span class=\"n\">Morphisms</span><span class=\"bp\">/</span><span class=\"n\">RingHomProperties.ilean</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicGeometry</span><span class=\"bp\">/</span><span class=\"n\">Morphisms</span><span class=\"bp\">/</span><span class=\"n\">RingHomProperties.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicGeometry</span><span class=\"bp\">/</span><span class=\"n\">Morphisms</span><span class=\"bp\">/</span><span class=\"n\">RingHomProperties.lean</span><span class=\"o\">:</span><span class=\"mi\">225</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"o\">(</span><span class=\"n\">IsOpenMap.functor</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">⊤</span>\n<span class=\"n\">case</span> <span class=\"n\">h'</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">RingHom.RespectsIso</span> <span class=\"n\">P</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Scheme</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Scheme.affineOpens</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U_1</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Scheme.affineOpens</span> <span class=\"o\">(</span><span class=\"n\">Scheme.restrict</span> <span class=\"n\">X</span> <span class=\"n\">_</span><span class=\"o\">))),</span>\n    <span class=\"n\">P</span>\n      <span class=\"o\">(</span><span class=\"n\">f.val.c.app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">↑</span><span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n        <span class=\"n\">X.presheaf.map</span> <span class=\"o\">(</span><span class=\"n\">eqToHom</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">Scheme.ofRestrict</span> <span class=\"o\">(</span><span class=\"n\">Scheme.restrict</span> <span class=\"n\">X</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.c.app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">⊤</span><span class=\"o\">))</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Scheme.affineOpens</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">Opens.map</span> <span class=\"n\">f.val.base</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">↑</span><span class=\"n\">U</span>\n<span class=\"n\">U'</span> <span class=\"o\">:</span> <span class=\"n\">Opens</span> <span class=\"bp\">↑↑</span><span class=\"n\">X.toPresheafedSpace</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Opens.map</span> <span class=\"n\">f.val.base</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">↑</span><span class=\"n\">U</span>\n<span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">IsOpenMap.functor</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">Opens.map</span> <span class=\"o\">(</span><span class=\"n\">Opens.inclusion</span> <span class=\"n\">U'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">↑</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Opens.map</span> <span class=\"o\">(</span><span class=\"n\">Scheme.ofRestrict</span> <span class=\"n\">X</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.base</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">↑</span><span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">Scheme.affineOpens</span> <span class=\"o\">(</span><span class=\"n\">Scheme.restrict</span> <span class=\"n\">X</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">joncrall</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">`</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">code</span> <span class=\"mi\">1</span>\n\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">NormedSpace</span><span class=\"bp\">/</span><span class=\"n\">PiLp.lean</span><span class=\"o\">:</span><span class=\"mi\">422</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Declaration</span> <span class=\"n\">PiLp.aux_uniformity_eq</span> <span class=\"n\">not</span> <span class=\"n\">found.</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 394046051,
        "sender_full_name": "Jonathan Crall",
        "timestamp": 1696049913
    },
    {
        "content": "<p>oh dear, this is one of the things that you have to learn which is mathlib specific</p>",
        "id": 394046460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696050280
    },
    {
        "content": "<p>use <code>lake exe cache get</code> to download precompiled mathlib</p>",
        "id": 394046479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696050292
    },
    {
        "content": "<p>(you should have mentioned that it was building before waiting an hour, this would have saved you the effort!)</p>",
        "id": 394046508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696050332
    },
    {
        "content": "<p>the errors are not expected though, my guess is that your lean-toolchain doesn't match mathlib, which can cause compile failures</p>",
        "id": 394046729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696050425
    },
    {
        "content": "<p>use <code>cp lake-packages/mathlib/lean-toolchain lean-toolchain</code> to fix this</p>",
        "id": 394046791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696050453
    },
    {
        "content": "<p>if it works, <code>lake build</code> should take a few seconds to run, not an hour</p>",
        "id": 394046969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696050516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"655039\">@Jonathan Crall</span>, from this and  <a href=\"#narrow/stream/270676-lean4/topic/Links.20to.20Resources.20for.20Help\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Links.20to.20Resources.20for.20Help</a>, I think you took a wrong start in your Lean adventures. If you are interested in Lean for mathematics you should start learning it using a math-oriented resource. If you go to <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> you will find links to installation instructions that work for maths as well as explanation about limits.</p>",
        "id": 394087351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696082134
    },
    {
        "content": "<p>I agree with Patrick. The theorem that 1/n tends to 0 needs all sorts of things like facts about how division plays with inequalities, that natural numbers are nonnegative, that for every real number there's a natural number bigger than it and so on. You can of course battle your way through this if you know how to find your way around the library, but it's not the best exercise for a complete beginner (it looks much easier than it is, from a formal perspective). A much better exercise is to prove that the sum of the limits is the limit of the sums; this is what I do in lecture 2 of my undergraduate lean course and even this has some content. I won't recommend my course to you because it's not yet been translated into lean 4 but like Patrick I will recommend <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> .</p>",
        "id": 394096455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696089878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Following your instructions worked. It took about a minute, but it got there. Many thanks. </p>\n<p>My interest in using lean is to provide a formal proof for a relationship I found between the MCC and FM measures of a confusion matrix namely the FM is the limit of the MCC as the true negative count tends to infinity. I've written it up here: <a href=\"https://arxiv.org/abs/2305.00594\">https://arxiv.org/abs/2305.00594</a> and I'm fairly sure the informal proof is correct, I've also verified it with sympy, but that only goes so far. Prooving lim_{x -&gt; inf} 1/x = 0 is the main step. </p>\n<p>Mathematics in Lean (MIL) looks very helpful. Thank you for the pointer.</p>\n<p>EDIT: I forgot the proof also includes a square root operation, so proving it in the rationals wont be possible without modification (or maybe if I restrict to algebreic numbers that would be easier?).</p>",
        "id": 394135980,
        "sender_full_name": "Jonathan Crall",
        "timestamp": 1696127468
    },
    {
        "content": "<p>With the code and the idea about the real line, how to find the related data from Mathlib? or how to modify the code so that lean can give useful suggestion? \"unexpected token 'fun'; expected '_' or identifier\" is given here.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Help.20proving.20lim_.7Bx-.3Einf.7D.201.2Fx.20.3D.200/near/394038995\">said</a>:</p>\n<blockquote>\n<p>on the other hand</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>does work, and suggests <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_inv_atTop_zero#doc\">docs#tendsto_inv_atTop_zero</a></p>\n</blockquote>",
        "id": 394208936,
        "sender_full_name": "Ming Li",
        "timestamp": 1696165652
    },
    {
        "content": "<p>What is the whole file that gives you that error message?<br>\nIf I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>I don't see any issues</p>",
        "id": 394238364,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696180685
    },
    {
        "content": "<p>Thanks. I fixed the issue caused by /--/.<br>\n<span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Help.20proving.20lim_.7Bx-.3Einf.7D.201.2Fx.20.3D.200/near/394238364\">said</a>:</p>\n<blockquote>\n<p>What is the whole file that gives you that error message?<br>\nIf I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>I don't see any issues</p>\n</blockquote>",
        "id": 394279080,
        "sender_full_name": "Ming Li",
        "timestamp": 1696203941
    },
    {
        "content": "<p>Are MIL and Mathlib4 compatible to each other? In general, how to merge two libraries?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Help.20proving.20lim_.7Bx-.3Einf.7D.201.2Fx.20.3D.200/near/394087351\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"655039\">Jonathan Crall</span>, from this and  <a href=\"#narrow/stream/270676-lean4/topic/Links.20to.20Resources.20for.20Help\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Links.20to.20Resources.20for.20Help</a>, I think you took a wrong start in your Lean adventures. If you are interested in Lean for mathematics you should start learning it using a math-oriented resource. If you go to <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> you will find links to installation instructions that work for maths as well as explanation about limits.</p>\n</blockquote>",
        "id": 394342745,
        "sender_full_name": "Ming Li",
        "timestamp": 1696231007
    },
    {
        "content": "<p>MIL depends on mathlib: <a href=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a></p>\n<p>Not sure what you mean by \"merge\" in this context</p>",
        "id": 394350013,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696233051
    },
    {
        "content": "<p>Thanks for reply.  By \"merge\",  I mean that suppose there is  another tototial like MIL, also depending on mathlib4 and lean4, how can I use both in a single *.lean file? </p>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Help.20proving.20lim_.7Bx-.3Einf.7D.201.2Fx.20.3D.200/near/394350013\">said</a>:</p>\n<blockquote>\n<p>MIL depends on mathlib: <a href=\"https://github.com/leanprover-community/mathematics_in_lean\">https://github.com/leanprover-community/mathematics_in_lean</a></p>\n<p>Not sure what you mean by \"merge\" in this context</p>\n</blockquote>",
        "id": 394354357,
        "sender_full_name": "Ming Li",
        "timestamp": 1696234237
    },
    {
        "content": "<p>Yes, you can do that. You should make sure that the versions match up, though</p>",
        "id": 394354722,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696234346
    },
    {
        "content": "<p>Simply moving library folder dose not work. Any suggestion?</p>",
        "id": 394380132,
        "sender_full_name": "Ming Li",
        "timestamp": 1696240386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"655039\">@Jonathan Crall</span> I'm just jumping into the middle of this, but surely one doesn't need to involve topology for the limit of 1/x? From browsing the docs, I see <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecificLimits/IsROrC.html\">this lemma</a>, which seems like the same thing but without topology</p>",
        "id": 394656544,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696346190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644656\">@Alex Altair</span> The definition of tendsto doesn't involve topology, but usually the next step will. <code>atTop</code> needs an ordering on the type, and <code>nhds</code> is a topological filter</p>",
        "id": 394657917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696346625
    },
    {
        "content": "<p>so that statement does involve topology</p>",
        "id": 394658018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696346646
    },
    {
        "content": "<p>I'm curious why you think \"surely one doesn't need to involve topology for the limit of 1/x?\" Or why you think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsROrC.tendsto_inverse_atTop_nhds_0_nat#doc\">docs#IsROrC.tendsto_inverse_atTop_nhds_0_nat</a> didn't use topology.</p>",
        "id": 394659819,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696347231
    },
    {
        "content": "<p>The definition of tendsto might strictly speaking not involve topology, but it either involves epsilons and deltas or it involves filters, and both of those are topology in disguise (the filter is a topological neighbourhood filter in the application)</p>",
        "id": 394671113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696350772
    },
    {
        "content": "<p>I see, that makes sense</p>",
        "id": 394698969,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696362445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> One reason is that limits were understood hundreds of years before people had a concept of topology, and even formalized long before, via the epsilon-delta stuff (in the mid-1800s I think?). We also teach limits before topology, and I don't think calculus classes are sweeping foundations under the rug when they do so without using any language like \"open set\"</p>",
        "id": 394699426,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696362685
    },
    {
        "content": "<p>(I didn't realize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsROrC.tendsto_inverse_atTop_nhds_0_nat#doc\">docs#IsROrC.tendsto_inverse_atTop_nhds_0_nat</a> used topology just because I didn't see the word \"topology\" anywhere on the page, and I don't have any familiarity with how Mathlib is structured yet)</p>",
        "id": 394699611,
        "sender_full_name": "Alex Altair",
        "timestamp": 1696362775
    },
    {
        "content": "<p>I think we need more context to help you. If you are teaching first year undergrads and want to use limits of sequences of real numbers or functions from real numbers to real numbers then clearly you should redefine limits in elementary terms, just like in the tutorial project or in GlimpseOfLean. But if you want to contribute to a full scale math library like mathlib then it makes no sense.</p>",
        "id": 394700015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696362965
    },
    {
        "content": "<p>Aha, yes, that makes sense. I think here the point is that the structure of mathlib is relevant. In general, within mathlib, we opt for the most general (modulo convenience and some other considerations) setting possible. So, although limits were originally formulated by Cauchy with <code>ε &gt; 0, ...</code>, that definition doesn't work in more general settings. Instead, convergence (to a point) makes sense in topological spaces. However, because we want to allow <em>even more</em> generality (e.g., <code>aₙ → ∞</code> as <code>n → ∞</code>), we encapsulate limits in terms of filters, and then convergence to a point <code>x</code> in a topological space is encoded using the neighborhood filter <code>𝓝 x</code> (i.e.,  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nhds#doc\">docs#nhds</a>), which is defined in terms of the topology.</p>\n<p>For a nice description of <em>why</em> we work in this generality, have a look at Patrick's ICERM talk from last year: <a href=\"https://icerm.brown.edu/video_archive/?play=2899\">https://icerm.brown.edu/video_archive/?play=2899</a> So, it doesn't have anything to do with wanting to avoid \"sweeping foundations under the rug\", but rather, with usability, feasibility and convenience.</p>\n<p>As Patrick mentioned, this generality isn't suitable for presentation to early undergraduates, so if you are teaching you probably want to roll your own (even if the definitions are connected to Mathlib's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto#doc\">docs#Filter.Tendsto</a> behind the curtain).</p>",
        "id": 394709188,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696366052
    },
    {
        "content": "<p>Does it mean that mathlib4 is research oriented while tutorials like GlimpseOfLean is educational one?</p>",
        "id": 394833968,
        "sender_full_name": "Ming Li",
        "timestamp": 1696423981
    },
    {
        "content": "<p>GlimpseOfLean is an introduction to Lean. You can start with it and then learn about the mathlib way in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> which requires a much larger time investment.</p>",
        "id": 394836922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696424841
    },
    {
        "content": "<p>Indeed, both are great for beginners. So the particular tactics are designed for educational purpose. They will not be used in Mathlib4, right?</p>",
        "id": 394841453,
        "sender_full_name": "Ming Li",
        "timestamp": 1696426258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Help.20proving.20lim_.7Bx-.3Einf.7D.201.2Fx.20.3D.200/near/394038995\">said</a>:</p>\n<blockquote>\n<p>on the other hand</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>does work, and suggests <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_inv_atTop_zero#doc\">docs#tendsto_inv_atTop_zero</a></p>\n</blockquote>\n<p>When I try this, I get a typeclass error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Filter.Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto_inv_atTop_zero</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">OrderTopology</span> <span class=\"bp\">?</span><span class=\"n\">m.721</span>\n</code></pre></div>\n<p>Why is <code>ℝ</code> not recognized as an instance of <code>OrderTopology</code>?</p>",
        "id": 395436950,
        "sender_full_name": "Gabor Nyeki",
        "timestamp": 1696697918
    },
    {
        "content": "<p>The error disappears if I also add <code>open Filter</code>.</p>",
        "id": 395437095,
        "sender_full_name": "Gabor Nyeki",
        "timestamp": 1696698043
    },
    {
        "content": "<p><code>atTop</code> is actually <code>Filter.atTop</code>. Without <code>open Filter</code>, Lean was interpreting it as an implicit variable.</p>",
        "id": 395462555,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1696721441
    },
    {
        "content": "<p>If you want to disable this (it can be very annoying sometimes) you can add <code>set_option autoImplicit false</code> at the beginning of the file</p>",
        "id": 395462835,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696721744
    }
]