[
    {
        "content": "<p>Is there a mathlib or standard lib lemma stating that a Rat <code>q</code> is less than or equal to <code>q.ceil</code>?  This seems like it should be there, but I can't find it.</p>",
        "id": 390055152,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1694283536
    },
    {
        "content": "<p>Hmm, you're using Rat.ceil rather than Int.ceil? Any reason? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_ceil#doc\">docs#le_ceil</a> lists likely theorems for the latter</p>",
        "id": 390055484,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694283883
    },
    {
        "content": "<p>I don't see anything offhand to relate the two</p>",
        "id": 390055499,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694283911
    },
    {
        "content": "<p>Do we have the lemma that says the two <code>ceil</code>s are equal?</p>",
        "id": 390055506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694283917
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.ceil#doc\">docs#Rat.ceil</a></p>",
        "id": 390055510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694283928
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.ceil_cast#doc\">docs#Rat.ceil_cast</a></p>",
        "id": 390055580,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694283990
    },
    {
        "content": "<p>that's not it</p>",
        "id": 390055618,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694284076
    },
    {
        "content": "<p>Oh I didn't even think about casting from Int.  I'll use Int.ceil, it looks more general &amp; supported.</p>",
        "id": 390055678,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1694284111
    },
    {
        "content": "<p>Lol: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Rat.ceil#doc\">docs#Lean.Rat.ceil</a></p>",
        "id": 390055685,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694284118
    },
    {
        "content": "<p>It's casting <em>to</em> Int!</p>",
        "id": 390055690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694284125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/A.20Rat.20is.20less.20than.20or.20eq.20to.20its.20ceiling/near/390055690\">said</a>:</p>\n<blockquote>\n<p>It's casting <em>to</em> Int!</p>\n</blockquote>\n<p>Both <code>Rat.ceil</code> and <code>Int.ceil</code> seem to cast <em>to</em> Int, but <code>Int.ceil</code> seems to take any member of a LinearOrderedRing as input?</p>",
        "id": 390055804,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1694284212
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.instFloorRing#doc\">docs#Rat.instFloorRing</a></p>",
        "id": 390055819,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694284231
    },
    {
        "content": "<p>Yes, Rat.ceil is the odd one out; Nat.ceil casts to nat and Int.ceil casts to int, from a general input for which this makes sense. Rat.ceil is in Std and as far as I can see we don't really develop any API for it in mathlib, I would stick to the mathlib choices.</p>",
        "id": 390055937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694284374
    },
    {
        "content": "<p>Oh that makes much more sense (as to why there are two different ceiling functions for Rats)</p>",
        "id": 390056031,
        "sender_full_name": "Caleb Schultz Kisby",
        "timestamp": 1694284452
    },
    {
        "content": "<p>Actually, I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.instFloorRingRatInstLinearOrderedRingRat#doc\">docs#Rat.instFloorRingRatInstLinearOrderedRingRat</a> should be redefined so that the <code>ceil</code> argument is given explicitly as <code>Rat.ceil</code> and then they'll be defeq.</p>",
        "id": 390056082,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694284531
    },
    {
        "content": "<p>yeah that sounds like the coolest solution :-)</p>",
        "id": 390056148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694284576
    },
    {
        "content": "<p>So we have Rat.ceil (in Std) and Lean.Rat.ceil (in core) -- are either of them ever used? And then we have mathlib's ceil with a ton of API.</p>",
        "id": 390056329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694284802
    },
    {
        "content": "<p>wait -- core's so-called \"rationals\" look a bit suspicious to me...</p>",
        "id": 390056387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694284849
    },
    {
        "content": "<p>Yes, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Rat#doc\">docs#Lean.Rat</a>. I assume they are used for something.</p>",
        "id": 390056420,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694284899
    },
    {
        "content": "<p>decision procedures, apparently. Maybe they'll help us to decide whether to persevere with Rat.ceil.</p>",
        "id": 390056477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694284930
    },
    {
        "content": "<p>It's true, at least, if someone wants to PR it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FloorRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">where</span>\n  <span class=\"n\">floor</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.floor</span>\n  <span class=\"n\">ceil</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.ceil</span>\n  <span class=\"n\">gc_coe_floor</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Rat.le_floor.symm</span>\n  <span class=\"n\">gc_ceil_coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Rat.ceil</span><span class=\"o\">]</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.cast_le</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℚ</span><span class=\"o\">)]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Rat.coe_int_num_of_den_eq_one</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Rat.floor_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">_root_.le_sub_iff_add_le</span><span class=\"o\">,</span> <span class=\"n\">Int.floor_le_sub_one_iff</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_and_ne</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rintro</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 390059178,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694287778
    }
]