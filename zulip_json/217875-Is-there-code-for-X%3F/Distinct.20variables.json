[
    {
        "content": "<p>What is the best way to have a number of distinct variables? I found <a href=\"https://leanprover-community.github.io/mathlib_docs/data/multiset/nodup.html#multiset.nodup\">https://leanprover-community.github.io/mathlib_docs/data/multiset/nodup.html#multiset.nodup</a> but are there also better ways of doing this?</p>",
        "id": 369807219,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1687806435
    },
    {
        "content": "<p><code>set.pairwise ne</code> maybe? <a href=\"https://leanprover-community.github.io/mathlib_docs/logic/pairwise.html#set.pairwise\">https://leanprover-community.github.io/mathlib_docs/logic/pairwise.html#set.pairwise</a></p>",
        "id": 369811467,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1687807550
    },
    {
        "content": "<p>You could do <code>list.nodup [x1, x2, ...]</code> rather than dealing with <code>multiset</code>.</p>\n<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pairwise_disjoint\">docs3#set.pairwise_disjoint</a>, where you can write <code>set.pairwise_disjoint {x1, x2, ...} id</code>. <em>Edit:</em> scratch this one, I'm not sure what I was thinking, since disjoint is very different from ne.</p>",
        "id": 369811478,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687807552
    },
    {
        "content": "<p>Yeah, <code>set.pairwise {x1, x2, ...} (≠)</code> as well, like Jeremy said. <em>Edit:</em> this doesn't make sense either, as Mario pointed out, since this is trivially true for sets.</p>",
        "id": 369811730,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687807614
    },
    {
        "content": "<p>There's also the question of what you mean by a variable. You could also consider an <code>I</code>-indexed family of variables <code>f : I -&gt; X</code> and then add the condition that <code>f</code> is injective if you want them to be distinct.</p>",
        "id": 369812090,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687807727
    },
    {
        "content": "<p>I would like to be able to prove something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Pairwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">x₃</span>\n          <span class=\"n\">x₄</span> <span class=\"n\">x₅</span> <span class=\"n\">x₆</span>\n          <span class=\"n\">x₇</span> <span class=\"n\">x₈</span> <span class=\"n\">x₉</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Set.Pairwise</span> <span class=\"o\">{</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₃</span><span class=\"o\">,</span> <span class=\"n\">x₄</span><span class=\"o\">,</span> <span class=\"n\">x₅</span><span class=\"o\">,</span> <span class=\"n\">x₆</span><span class=\"o\">,</span> <span class=\"n\">x₇</span><span class=\"o\">,</span> <span class=\"n\">x₈</span><span class=\"o\">,</span> <span class=\"n\">x₉</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">·≠·</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">≠</span> <span class=\"n\">x₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But I cannot really figure out how to do this.</p>",
        "id": 369908429,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1687843018
    },
    {
        "content": "<p>it's actually not true</p>",
        "id": 369908631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687843073
    },
    {
        "content": "<p>because the hypothesis is trivially true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set.Pairwise</span> <span class=\"o\">{</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₃</span><span class=\"o\">,</span> <span class=\"n\">x₄</span><span class=\"o\">,</span> <span class=\"n\">x₅</span><span class=\"o\">,</span> <span class=\"n\">x₆</span><span class=\"o\">,</span> <span class=\"n\">x₇</span><span class=\"o\">,</span> <span class=\"n\">x₈</span><span class=\"o\">,</span> <span class=\"n\">x₉</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">·≠·</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 369909261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687843224
    },
    {
        "content": "<p>(FYI examples don't get names, you want just <code>example</code> not <code>example test</code>)</p>",
        "id": 369909425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687843271
    },
    {
        "content": "<p>a version more in line with the spirit of your question, and a rather brute-force solution of it, is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">List.Pairwise</span> <span class=\"o\">(</span><span class=\"bp\">·≠·</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₃</span><span class=\"o\">,</span> <span class=\"n\">x₄</span><span class=\"o\">,</span> <span class=\"n\">x₅</span><span class=\"o\">,</span> <span class=\"n\">x₆</span><span class=\"o\">,</span> <span class=\"n\">x₇</span><span class=\"o\">,</span> <span class=\"n\">x₈</span><span class=\"o\">,</span> <span class=\"n\">x₉</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">≠</span> <span class=\"n\">x₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 369910194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687843459
    },
    {
        "content": "<p>Oke that works. Thank you! You say brute force. What would be a better way to do this? Edit: I guess you mean the proof of the example. I thought the definition.</p>",
        "id": 369919448,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1687846009
    },
    {
        "content": "<p>One more way: <code>(x : Fin 9 → α) (hx : Injective x)</code></p>",
        "id": 373634136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688889628
    }
]