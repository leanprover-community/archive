[
    {
        "content": "<p>Does mathlib have this little lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ignore this import, I couldn't find a smaller one</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicGeometry.EllipticCurve.Weierstrass</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.gcd</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">not_or_of_imp</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span>\n  <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.gcdA</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.gcdB</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">norm_cast</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">a.gcd_eq_gcd_ab</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">Int.cast_one</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"n\">test</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is useful, for example, to show at least one of 2 and 3 is invertible in a field.</p>",
        "id": 376600710,
        "sender_full_name": "Jz Pan",
        "timestamp": 1689760750
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=not_isCoprime_zero_zero#doc\">docs#not_isCoprime_zero_zero</a>, but I can't see yet how to easily connect <code>Nat.gcd = 1</code> with <code>isCoprime</code>.</p>",
        "id": 376646396,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689769612
    },
    {
        "content": "<p>So I suppose the question is: is taking the contrapositive in this way enough to justify a new lemma? And since it's not just the contrapositive but also adding equality hypotheses and pushing the negation through an and, my answer would be yes.</p>",
        "id": 376647381,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689769808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.isCoprime_iff_gcd_eq_one#doc\">docs#Int.isCoprime_iff_gcd_eq_one</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.coe_nat_gcd#doc\">docs#Int.coe_nat_gcd</a></p>",
        "id": 376648155,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689769930
    },
    {
        "content": "<p>Aren't those only for integers? The statement is about casting to any ring <code>R</code>.</p>",
        "id": 376648422,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689769979
    },
    {
        "content": "<p>I didn't mean to suggest these are everything, but it's the only real way to connect <code>Nat.gcd = 1</code> to <code>IsCoprime</code> involving <code>Nat</code>. The definition of <code>IsCoprime</code> on <code>Nat</code> itself is not good. (<a href=\"#narrow/stream/116395-maths/topic/IsCoprime.20is.20.40.5Bsimp.5D.3F/near/358546434\">This thread</a> explores some of the issues.)</p>",
        "id": 376648867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689770054
    },
    {
        "content": "<p>It's a good suggestion though. I suppose with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCoprime.map#doc\">docs#IsCoprime.map</a> and some rewriting of coercions to algebra maps we'd be able to get there.</p>",
        "id": 376648889,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1689770058
    },
    {
        "content": "<p>Oh gosh, <code>IsCoprime (2 : ℕ) (3 : ℕ)</code> is false!</p>",
        "id": 376649433,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689770177
    },
    {
        "content": "<p>Maybe <code>a.gcd b = 1</code> implies <code>IsCoprime (a : Int) (b : Int)</code> (in fact this is basically <code>a.gcd_eq_gcd_ab b</code>), and then by <code>IsCoprime.map</code> we obtain <code>IsCoprime (a : R) (b : R)</code>.</p>",
        "id": 376649887,
        "sender_full_name": "Jz Pan",
        "timestamp": 1689770266
    },
    {
        "content": "<p>Casting to a <code>Ring</code> seems OK, the point is that the definition is wrong for <code>Semiring</code> (in particular for <code>ℕ</code>...)</p>",
        "id": 376652425,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689770715
    },
    {
        "content": "<p>What do you propose for a definition for semirings then? We already had this discussion in the other thread and it's not so easy.</p>",
        "id": 376652714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689770766
    },
    {
        "content": "<p>This is a good question <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 376653084,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689770837
    },
    {
        "content": "<p>Maybe we should have <code>IsCoprime</code> only for <code>Ring R</code>, with a note suggesting to use <code>Nat.gcd</code> for <code>Nat</code>.</p>",
        "id": 376654109,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689771045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Coprime.20integers.20can't.20be.20both.20zero.20in.20a.20non-trivial.20ring/near/376654109\">said</a>:</p>\n<blockquote>\n<p>Maybe we should have <code>IsCoprime</code> only for <code>Ring R</code>, with a note suggesting to use <code>Nat.gcd</code> for <code>Nat</code>.</p>\n</blockquote>\n<p>And then maybe we can add an abbreviation for <code>Nat.gcd a b = 1</code>? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 376659534,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1689772009
    },
    {
        "content": "<p>That already exists, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.coprime#doc\">docs#Nat.coprime</a> ?</p>",
        "id": 376671436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689774231
    },
    {
        "content": "<p><code>IsCoprime</code> seems oddly named. I would expect the name to communicate something about spanning <code>R</code>.</p>",
        "id": 376671962,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689774326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> Isn't that what <code>IsCoprime</code> is about? Spanning <code>R</code> and being able to get <code>1</code> are the same thing, right?</p>",
        "id": 376673079,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689774564
    },
    {
        "content": "<p>Right, I would expect it not to be called <code>IsCoprime</code> and to be called e.g. <code>MemSpanOne</code></p>",
        "id": 376674524,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689774834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Coprime.20integers.20can't.20be.20both.20zero.20in.20a.20non-trivial.20ring/near/376652714\">said</a>:</p>\n<blockquote>\n<p>What do you propose for a definition for semirings then? We already had this discussion in the other thread and it's not so easy.</p>\n</blockquote>\n<p>Is this a good definition? <code>∃ a b c d, a * x + b * y = 1 + c * x + d * y</code><span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 376675939,
        "sender_full_name": "Jz Pan",
        "timestamp": 1689775056
    },
    {
        "content": "<p>Then for <code>Nat</code>, <code>a.gcd b = 1</code> indeed implies <code>IsCoprime a b</code></p>",
        "id": 376676407,
        "sender_full_name": "Jz Pan",
        "timestamp": 1689775136
    },
    {
        "content": "<p>That certainly seems better but I don't know how easy it is to work with. Is there any API for talking about formal differences in <code>R</code>?</p>",
        "id": 376678415,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689775482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> See <a href=\"#narrow/stream/116395-maths/topic/IsCoprime.20is.20.40.5Bsimp.5D.3F/near/359101248\">around here</a>; that idea came up in the thread. Michael Stoll strongly suggested not pursuing it as a definition for <code>IsCoprime</code>, but suggested perhaps having <code>Semiring.IsCoprime</code> with that definition.</p>",
        "id": 376682409,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689776095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Coprime.20integers.20can't.20be.20both.20zero.20in.20a.20non-trivial.20ring/near/376654109\">said</a>:</p>\n<blockquote>\n<p>Maybe we should have <code>IsCoprime</code> only for <code>Ring R</code>, with a note suggesting to use <code>Nat.gcd</code> for <code>Nat</code>.</p>\n</blockquote>\n<p>I just realized that this is a bad idea. <code>IsCoprime</code> is a useful notion for <code>Ideal R</code>, that is only a <code>Semiring</code>.</p>",
        "id": 376685508,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689776606
    },
    {
        "content": "<p>We want this to stay true (it's in <code>flt-regular</code>, I don't know why we stated it using negation on both sides...).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">not_coprime_not_top</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">IsCoprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 376686539,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689776770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Coprime.20integers.20can't.20be.20both.20zero.20in.20a.20non-trivial.20ring/near/376671436\">said</a>:</p>\n<blockquote>\n<p>That already exists, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.coprime#doc\">docs#Nat.coprime</a> ?</p>\n</blockquote>\n<p>... which doesn't match the naming convention: <a href=\"https://github.com/leanprover/std4/pull/187\">https://github.com/leanprover/std4/pull/187</a></p>",
        "id": 376687776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689776989
    }
]