[
    {
        "content": "<p>I want to show that the set {2,3,4,5} does not contain three elements whose product is a perfect square.  In Lean 4, this condition corresponds to,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">no_three_square_product</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">IsSquare</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and the theorem I want to prove is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">main</span><span class=\"o\">:</span>\n   <span class=\"n\">no_three_square_product</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">no_three_square_product</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"n\">done</span>\n</code></pre></div>\n<p>More generally, I also want to prove that the set {1, 4, 5, 6, 7, 10, 11, 12, 13, 14} satisfies the given condition (in this case, splitting into cases would create too many cases to manually deal with). </p>\n<p>To prove a number is non-square, I know I can do the following (for example to show 15 is non-square):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">n</span> <span class=\"mi\">3</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">hn'</span> <span class=\"bp\">|</span> <span class=\"n\">hn'</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Nat.ne_of_lt</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">hn'</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">hn'</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hn'</span>\n    <span class=\"n\">symm</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Nat.ne_of_lt</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n    <span class=\"n\">done</span>\n</code></pre></div>\n<p>To prove my main theorem, how can I generalise this proof structure, or is there an easier way to prove IsSquare for a natural number by doing computations in Lean?</p>",
        "id": 398514751,
        "sender_full_name": "Dogukan Turkoz",
        "timestamp": 1698248661
    },
    {
        "content": "<p>In your specific case of a 4-element set, the <code>no_three_square_product</code> condition converts to \"drop one and multiply the rest\".  If you proved that result first, then you are left with having to show that 24, 30, 40 and 60 are not squares, which you could probably do quickly by hand.</p>",
        "id": 398515913,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698249033
    },
    {
        "content": "<p>I think the problem can be reduced to showing that a set of vectors in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi mathvariant=\"double-struck\">Z</mi><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">(\\Z/2\\Z)^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> has no three adding to zero</p>",
        "id": 398516182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698249123
    },
    {
        "content": "<p>Or, by brute-force:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">no_three_square_product</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">IsSquare</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a24</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">IsSquare</span> <span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">a30</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">IsSquare</span> <span class=\"mi\">30</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">a40</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">IsSquare</span> <span class=\"mi\">40</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">a60</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">IsSquare</span> <span class=\"mi\">60</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main</span><span class=\"o\">:</span>\n   <span class=\"n\">no_three_square_product</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">no_three_square_product</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h</span>\n    <span class=\"n\">fin_cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">a24</span><span class=\"o\">,</span> <span class=\"n\">a30</span><span class=\"o\">,</span> <span class=\"n\">a40</span><span class=\"o\">,</span> <span class=\"n\">a60</span><span class=\"o\">]</span>\n    <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 398516274,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698249145
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">IsSquare</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decidable_of_iff'</span> <span class=\"o\">(</span><span class=\"n\">Nat.sqrt</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.sqrt</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.exists_mul_self</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">IsSquare</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">no_three_square_product</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">IsSquare</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">no_three_square_product</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fintype.decidableForallFintype</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">no_three_square_product</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 398517440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698249512
    },
    {
        "content": "<p>That first instance is missing from mathlib</p>",
        "id": 398517477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698249521
    },
    {
        "content": "<p>I swear we already discussed that instance.</p>",
        "id": 398517677,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698249577
    },
    {
        "content": "<p>For proving a natural number is not a power, you can use something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">two_not_cube</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span><span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Monotone.ne_of_lt_of_lt_nat</span> <span class=\"o\">(</span><span class=\"n\">Nat.pow_left_strictMono</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">monotone</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 398527000,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698252857
    },
    {
        "content": "<p>Thank you all!</p>",
        "id": 398529459,
        "sender_full_name": "Dogukan Turkoz",
        "timestamp": 1698253744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"660742\">Dogukan Turkoz</span> has marked this topic as resolved.</p>",
        "id": 398529473,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698253748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Case.20checking.20in.20combinatorics/near/398517677\">said</a>:</p>\n<blockquote>\n<p>I swear we already discussed that instance.</p>\n</blockquote>\n<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib4/pull/7935\">#7935</a></p>",
        "id": 398577820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698277167
    }
]