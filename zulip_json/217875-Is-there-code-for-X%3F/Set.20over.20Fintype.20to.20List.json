[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>ideally as something executable</p>",
        "id": 383212913,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1691574852
    },
    {
        "content": "<p>Without an order on <code>T</code>, you could extract the <code>List</code> underlying the <code>Multiset</code> of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.univ#doc\">docs#Fintype.univ</a>. There is an executable (but not sound) version where it looks through the quotient type.</p>",
        "id": 383213638,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1691575010
    },
    {
        "content": "<p>Otherwise you need a linear order on <code>T</code> and then you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sort#doc\">docs#Finset.sort</a>.</p>",
        "id": 383213742,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1691575026
    },
    {
        "content": "<p>Because it's fintype, and you only need to prove existence, not construction, you can also choose an arbitrary perm to Fin, and use that to either define an arbitrary order on the type, so that you can use Finset.sort. But I think, like Anne said, choosing an arbitrary list representation of Finset.univ and then applying List.filter on it should be enough.</p>",
        "id": 383218266,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1691575809
    },
    {
        "content": "<p>Can you un-#xy? If you want this list computably, probably you should be using Quotient.lift or similar instead</p>",
        "id": 383223466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691576751
    }
]