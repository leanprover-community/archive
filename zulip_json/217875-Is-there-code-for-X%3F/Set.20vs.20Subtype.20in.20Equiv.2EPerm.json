[
    {
        "content": "<p>Given a <code>Type α</code>,  <code>G : Subgroup (Equiv.Perm α)</code> and <code>s : Set α</code>, I can construct an action of <code>stabilizer G s</code> either on <code>s</code>, or on <code>Subtype s</code>, but the former initially seemed easier to deal with, and has been sufficient up to now.</p>\n<p>Here are the definitions, as I could give them… (The second one leads to universe issues in the Lean 4 playground) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Pointwise.SMul</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MulAction</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The instance that makes the stabilizer of a set acting on that set -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">HasSmul.ofStabilizer</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mem_stabilizer_iff.mp</span> <span class=\"n\">g.prop</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Set.smul_mem_smul_set</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">HasSmul.smul_stabilizer_def</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- The mul_action of stabilizer a set on that set -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ofStabilizer_set</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span>  <span class=\"n\">where</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Subtype.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">HasSmul.smul_stabilizer_def</span><span class=\"o\">,</span>\n    <span class=\"n\">Subgroup.coe_one</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Subtype.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">HasSmul.smul_stabilizer_def</span><span class=\"o\">,</span> <span class=\"n\">Subgroup.coe_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">MulAction.mul_smul</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The mul_action of stabilizer a set on the associated subtype  -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">MulAction.ofStabilizer_subtype</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">use</span> <span class=\"n\">g.val</span> <span class=\"bp\">•</span> <span class=\"n\">a.val</span>\n    <span class=\"k\">let</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">g.val</span> <span class=\"bp\">•</span> <span class=\"n\">a.val</span> <span class=\"bp\">∈</span> <span class=\"n\">g.val</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">Set.smul_mem_smul_set</span> <span class=\"n\">a.prop</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mem_stabilizer_iff.mp</span> <span class=\"n\">g.prop</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subtype.mk_eq_mk</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">one_smul</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hh</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subtype.mk_eq_mk</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_smul</span>\n</code></pre></div>\n<p>The problem now appears when I want to make use of<code>Equiv.Perm.ofSubtype</code> and <code>Equiv.Perm.toSubtype</code> because they seem to really make the difference between <code>Equiv.Perm s</code> and <code>Equiv.Perm (Subtype s)</code>. <br>\nFor example, if I am given <code>g : Equiv.Perm s</code>, then <code>Equiv.Perm.ofSubtype g</code> returns an error message.<br>\nWhat would you advice ? Have both definitions ?</p>",
        "id": 388191753,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693427883
    },
    {
        "content": "<p>That last one doesn't compile for me in the web editor</p>",
        "id": 388193304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693428612
    },
    {
        "content": "<p>And with <code>set_option autoImplicit false</code>, it complains that you didn't specify <code>s</code></p>",
        "id": 388193385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693428657
    },
    {
        "content": "<p>Did you intend <code>s</code> to be a set or a <code>α -&gt; Prop</code>?</p>",
        "id": 388193422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693428671
    },
    {
        "content": "<p>Neither does it compile for me there… <br>\nIn my applications, <code>s</code> was a set, and I want to prove that <code>φ : stabilizer G s → Equiv.Perm s := MulAction.toPerm</code> is surjective. <br>\nAfter <code>intro g</code>,  I am given <code>g : Perm ↑s</code>, and I have to prove <code>∃ a, φ a = g</code>. However, <code>use Equiv.Perm.ofSubtype g</code> leads to an error.</p>",
        "id": 388193944,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693428933
    },
    {
        "content": "<p>If <code>s</code> is a set, then <code>Subtype s</code> is nonsense</p>",
        "id": 388194111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693428996
    },
    {
        "content": "<p>If <code>s</code> is a <code>α -&gt; Prop</code>, then <code>stabilizer G s</code> is nonsense</p>",
        "id": 388194194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693429034
    },
    {
        "content": "<p>The non-nonsense version of that last declaration is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">MulAction.ofStabilizer_subtype</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 388194364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693429100
    },
    {
        "content": "<p>\"nonsense\" doesn't seem apt, since up to defeq <code>Subtype s</code> is \"fine\". But <code>Subtype (· ∈ s)</code> is how it's meant to be said (or <code>{x // x ∈ s}</code>) -- sets and predicates are the same by defeq but different syntactically.</p>",
        "id": 388194546,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693429195
    },
    {
        "content": "<p>Here is a MWE of the problem with the first declaration (before I tried possibly non-sensical things)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Pointwise.SMul</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MulAction</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The instance that makes the stabilizer of a set acting on that set -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">HasSmul.ofStabilizer</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mem_stabilizer_iff.mp</span> <span class=\"n\">g.prop</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Set.smul_mem_smul_set</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">HasSmul.smul_stabilizer_def</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- The mul_action of stabilizer a set on that set -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ofStabilizer_set</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span>  <span class=\"n\">where</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Subtype.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">HasSmul.smul_stabilizer_def</span><span class=\"o\">,</span>\n    <span class=\"n\">Subgroup.coe_one</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Subtype.coe_inj</span><span class=\"o\">,</span> <span class=\"n\">HasSmul.smul_stabilizer_def</span><span class=\"o\">,</span> <span class=\"n\">Subgroup.coe_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">MulAction.mul_smul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">MulAction.toPerm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"c1\">-- gives an error</span>\n  <span class=\"n\">use</span> <span class=\"n\">Equiv.Perm.ofSubtype</span> <span class=\"n\">g</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 388194786,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693429277
    },
    {
        "content": "<p>I don't understand what you're expecting the <code>use</code> to do there</p>",
        "id": 388196516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693430083
    },
    {
        "content": "<p>You need a witness of type <code>{ x // x ∈ stabilizer G s }</code>, you're giving a <code>Perm α</code></p>",
        "id": 388196577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693430118
    },
    {
        "content": "<p>Two things that confuse me even more:</p>\n<ul>\n<li>Lean has another way to create a type from <code>s : Set  α</code>, namely the type <code>Elem s</code> of elements of <code>s</code>.</li>\n<li>Some lemmas such as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.mem_def#doc\">docs#Set.mem_def</a>  do not respect the syntactic distinction and simultaneously treat <code>s</code> as <code>Set  α</code> and as <code>α → Prop</code></li>\n</ul>",
        "id": 388196640,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693430147
    },
    {
        "content": "<p><code>x : s</code> is notation for <code>x : Elem s</code></p>",
        "id": 388196797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693430207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.20vs.20Subtype.20in.20Equiv.2EPerm/near/388196577\">said</a>:</p>\n<blockquote>\n<p>You need a witness of type <code>{ x // x ∈ stabilizer G s }</code>, you're giving a <code>Perm α</code></p>\n</blockquote>\n<p>Oh, maybe I was just blocked by the different way Lean3 and Lean4 handle subtypes with <code>use</code>. Let me see!<br>\n(Lean3 asked me a proof of the subtype membership, and Lean4 just stops.)</p>",
        "id": 388196831,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693430225
    },
    {
        "content": "<p>Well in this case you need to provide a subtype of <code>G</code> not <code>Perm α</code>, so there isn't really a reasonable side-goal to emit</p>",
        "id": 388197004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693430295
    },
    {
        "content": "<p>Well, since the code compiled under Lean3, the problem is not only me writing pure nonsense stuff. But indeed, it seem that the problem is when Lean created 3 subgoals after <code>use Equiv.Perm.ofSubtype g</code>, Lean 4 whants me to type <code>use &lt;&lt;Equiv.Perm.ofSubtype g, ?_&gt;, ?_&gt;</code> for that.</p>",
        "id": 388198631,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693431063
    },
    {
        "content": "<p>Thank you for your help and sorry for all the possible nonsense…</p>",
        "id": 388198672,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693431086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I'm not sure if it helps, but there's now <code>use!</code>, which is like the Lean 3 <code>use</code>. If you're proving an existential whose domain is a subtype, <code>use</code> requires you give the whole element of that subtype, but <code>use!</code> is willing to let you give just the underlying value, leaving the membership as an extra goal.</p>",
        "id": 388198782,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693431130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.20vs.20Subtype.20in.20Equiv.2EPerm/near/388198631\">said</a>:</p>\n<blockquote>\n<p>Lean 4 whants me to type <code>use &lt;&lt;Equiv.Perm.ofSubtype g, ?_&gt;, ?_&gt;</code> for that.</p>\n</blockquote>\n<p>This doesn't work for me either in your example</p>",
        "id": 388199005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693431244
    },
    {
        "content": "<p>My MWE was sub-minimal and I had a bunch of other assumptions that allowed to fill the <code>?_</code>.<br>\n(This belongs to the proof that <code>MulAction.stabilizer (Equiv.Perm A) s</code> is a maximal subgroup of <code>Equiv.Perm A</code>  is a maximal subgroup of <code>Equiv.Perm A</code> when <code>2 * s.ncard &lt; Fintype.card A</code>.)</p>",
        "id": 388206547,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693434790
    },
    {
        "content": "<p>It's not that the <code>?_</code> contain things that are impossible to prove, but that <code>Equiv.Perm.ofSubtype g</code> still has the wrong type in your example</p>",
        "id": 388207192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693435163
    },
    {
        "content": "<p>Either way, sounds like Kyle tracked down what your original issue was</p>",
        "id": 388207220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693435185
    }
]