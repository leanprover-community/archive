[
    {
        "content": "<p>In an application I am considering, I needed the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nonsense</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">j.succAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span> <span class=\"o\">((</span><span class=\"n\">i.predAbove</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">j.succAbove</span> <span class=\"o\">(</span><span class=\"n\">i.succAbove</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Now, experimenting with various test values seems to indicate that this is true. But I can't find a proof for it. Can anyone suggest a good approach, or lemmas that I am missing (or that we are missing) that makes it more straightforward?</p>\n<p>I also had this, which I could prove, but not nicely.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">succAbove_succAbove_predAbove</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">j.succAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span> <span class=\"o\">(</span><span class=\"n\">i.predAbove</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fin.castSucc</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span>\n<span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.succAbove_below</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Fin.succAbove_predAbove</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n<span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.succAbove_above</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Fin.predAbove_below</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Fin.succAbove_below</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.castSucc_castPred</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Fin.castSucc_lt_last</span> <span class=\"n\">_</span><span class=\"o\">))]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Fin.castSucc_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403344759,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700560840
    },
    {
        "content": "<p>Proof by ugly case bash:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonsense</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">j.succAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span> <span class=\"o\">((</span><span class=\"n\">i.predAbove</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">j.succAbove</span> <span class=\"o\">(</span><span class=\"n\">i.succAbove</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Fin.succAbove</span><span class=\"o\">,</span> <span class=\"n\">Fin.predAbove</span><span class=\"o\">,</span> <span class=\"n\">Fin.lt_def</span><span class=\"o\">]</span>\n  <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_tsub_iff_left_of_le</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 403351228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700562861
    },
    {
        "content": "<p>(the sorry is easy)</p>",
        "id": 403351309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700562892
    },
    {
        "content": "<p>Weird that one step needs that sorry to work</p>",
        "id": 403351715,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700563019
    },
    {
        "content": "<p><code>linarith</code> is bad at <code>Nat</code> subtraction</p>",
        "id": 403351881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700563076
    },
    {
        "content": "<p>So am I so I can't complain too much</p>",
        "id": 403351975,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700563095
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- FIN LEMMA</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">succAbove_succAbove_predAbove_succAbove_eq_succAbove_succAbove</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">j.succAbove</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span> <span class=\"o\">((</span><span class=\"n\">i.predAbove</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succAbove</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">j.succAbove</span> <span class=\"o\">(</span><span class=\"n\">i.succAbove</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Fin.succAbove</span><span class=\"o\">,</span> <span class=\"n\">Fin.predAbove</span><span class=\"o\">]</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">j.succAbove_lt_ge</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"o\">[</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dite_true</span><span class=\"o\">,</span> <span class=\"n\">Fin.coe_pred</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">lt_tsub_iff_right</span><span class=\"o\">,</span> <span class=\"n\">Fin.dite_val</span><span class=\"o\">,</span>\n    <span class=\"n\">Fin.coe_castSucc</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_succ</span><span class=\"o\">]</span> <span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h.not_lt</span><span class=\"o\">,</span> <span class=\"n\">dite_false</span><span class=\"o\">,</span> <span class=\"n\">Fin.coe_castLT</span><span class=\"o\">,</span> <span class=\"n\">Fin.dite_val</span><span class=\"o\">,</span> <span class=\"n\">Fin.coe_castSucc</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_succ</span><span class=\"o\">]]</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">i.succAbove_lt_ge</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"bp\">|</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fin.lt_def</span><span class=\"o\">,</span> <span class=\"n\">Fin.le_def</span><span class=\"o\">,</span> <span class=\"n\">Fin.coe_castSucc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_of_succ_lt</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exfalso</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"n\">h₃</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">not_lt</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"n\">h₂.not_lt</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"n\">ite_eq_right_iff</span><span class=\"o\">,</span> <span class=\"n\">self_eq_add_right</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h₂.not_lt</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span> <span class=\"n\">h₃</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le.not_lt</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"n\">h.not_lt</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"n\">ite_eq_left_iff</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">add_right_eq_self</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h₂.le.not_lt</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le_succ_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h₂.not_le</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h.not_lt</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_lt_succ_iff</span><span class=\"o\">,</span> <span class=\"n\">h₂.not_lt</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exfalso</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h₃.not_le</span> <span class=\"o\">(</span><span class=\"n\">h.trans</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"n\">h₃.trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_succ</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 403620224,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700668411
    },
    {
        "content": "<p>This is just the ugly case bash with extra steps. But it may be more fertile ground for golfing.</p>",
        "id": 403620347,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700668445
    }
]