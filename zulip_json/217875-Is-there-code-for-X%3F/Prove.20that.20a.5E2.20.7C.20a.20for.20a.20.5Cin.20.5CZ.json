[
    {
        "content": "<p>Hi everybody :)<br>\nI am trying to prove the following statement:<br>\nRecall that x|y means there exists an integer k, such that y = kx. Show that if a is an integer and a^2|a, then a ∈ {0, 1,−1}.</p>\n<p>This is what I have got so far:<br>\nexample (a : ℤ) : (a ^ 2 ∣ a) → ((a = -1) ∨ (a = 1) ∨ (a = 0)) := by<br>\nintro h<br>\nby_cases h_nonzero : a ≠ 0<br>\nobtain ⟨k, hk⟩ := h<br>\nsorry<br>\ndone</p>\n<p>I would need some tactic that tells me that the only divisors of one in the integer are 1 and -1.<br>\nCan you help me out?<br>\nThank you all in advance<br>\nMatt</p>",
        "id": 397044338,
        "sender_full_name": "Mattia Bottoni",
        "timestamp": 1697527181
    },
    {
        "content": "<p>you don't need a tactic, you need a theorem that says that</p>",
        "id": 397044650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697527310
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.eq_one_of_dvd_one#doc\">docs#Int.eq_one_of_dvd_one</a></p>",
        "id": 397044881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697527387
    },
    {
        "content": "<p>I applied the theorem but now I am stuck because I would need to prove that 0 \\leq a.</p>\n<p><a href=\"/user_uploads/3121/d9lLqsn8BMbm5xWsK-tOAROQ/a2diva.png\">a2diva.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/d9lLqsn8BMbm5xWsK-tOAROQ/a2diva.png\" title=\"a2diva.png\"><img src=\"/user_uploads/3121/d9lLqsn8BMbm5xWsK-tOAROQ/a2diva.png\"></a></div><p><a href=\"/user_uploads/3121/N0reO32GqJ5L1vlljRYebXrf/Output-a2diva.png\">Output-a2diva.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/N0reO32GqJ5L1vlljRYebXrf/Output-a2diva.png\" title=\"Output-a2diva.png\"><img src=\"/user_uploads/3121/N0reO32GqJ5L1vlljRYebXrf/Output-a2diva.png\"></a></div>",
        "id": 397058988,
        "sender_full_name": "Mattia Bottoni",
        "timestamp": 1697532424
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> , please</p>",
        "id": 397061603,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697533241
    },
    {
        "content": "<p>import Mathlib.Tactic<br>\nexample (a : ℤ) : (a ^ 2 ∣ a) → ((a = -1) ∨ (a = 1) ∨ (a = 0)) := by<br>\nintro h<br>\nby_cases h2 : a = 0<br>\nright<br>\nright<br>\nexact h2<br>\nby_cases h1 : a = -1<br>\nleft<br>\nexact h1<br>\nright<br>\nleft<br>\napply Int.eq_one_of_dvd_one</p>\n<p>done</p>",
        "id": 397064410,
        "sender_full_name": "Mattia Bottoni",
        "timestamp": 1697534268
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 397066487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697535020
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">right</span>\n<span class=\"n\">right</span>\n<span class=\"n\">exact</span> <span class=\"n\">h2</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">left</span>\n<span class=\"n\">exact</span> <span class=\"n\">h1</span>\n<span class=\"n\">right</span>\n<span class=\"n\">left</span>\n<span class=\"n\">apply</span> <span class=\"n\">Int.eq_one_of_dvd_one</span>\n\n<span class=\"n\">done</span>\n</code></pre></div>\n<p>Sorry, I did not know this.</p>",
        "id": 397070886,
        "sender_full_name": "Mattia Bottoni",
        "timestamp": 1697536511
    },
    {
        "content": "<p>Well, now you have a goal <code>0 ≤ a</code>, that is not true in general, so you took a wrong turn.</p>",
        "id": 397071836,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697536803
    },
    {
        "content": "<p>My suggestion is to write down a precise mathematical proof (with pen and paper) and then try to formalize it.</p>",
        "id": 397072084,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697536855
    },
    {
        "content": "<p>For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">or_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">refine</span> <span class=\"n\">or_comm.1</span> <span class=\"o\">(</span><span class=\"n\">Int.isUnit_iff.1</span> <span class=\"o\">(</span><span class=\"n\">isUnit_of_dvd_one</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩))</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Int.eq_one_of_mul_eq_self_right</span> <span class=\"n\">h0</span> <span class=\"n\">hk.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>works. The key points are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.eq_one_of_mul_eq_self_right#doc\">docs#Int.eq_one_of_mul_eq_self_right</a> (I found it via <code>exact?</code>) that simplifies the <code>a</code> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.isUnit_iff#doc\">docs#Int.isUnit_iff</a> (I found it guessing the name) that tells you what are the units if <code>ℤ</code>.</p>",
        "id": 397076709,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697538215
    },
    {
        "content": "<p>I am a little surprised we dont have <code>Int.dvd_one_iff</code>...</p>",
        "id": 397077059,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697538322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Prove.20that.20a.5E2.20.7C.20a.20for.20a.20.5Cin.20.5CZ/near/397077059\">said</a>:</p>\n<blockquote>\n<p>I am a little surprised we dont have <code>Int.dvd_one_iff</code>...</p>\n</blockquote>\n<p>Probably considered a duplicate of <code>isUnit_iff</code>, but it's definitely good to have.</p>",
        "id": 397096825,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697545319
    },
    {
        "content": "<p>it's not a duplicate of <code>isUnit_iff</code>, but it is a one liner using it</p>",
        "id": 397149514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697561934
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.dvd_one_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span>  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">isUnit_iff_dvd_one</span><span class=\"o\">,</span> <span class=\"n\">Int.isUnit_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397150094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697562148
    },
    {
        "content": "<p>Thank you so much for your help!</p>\n<p>I will definitely have a look at the two docs you sent <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span></p>",
        "id": 397232986,
        "sender_full_name": "Mattia Bottoni",
        "timestamp": 1697606573
    }
]