[
    {
        "content": "<p>Is there a function <code>String → String → bool</code> that tells me whether <code>s1</code> is a substring of <code>s2</code>?</p>",
        "id": 381451132,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691063006
    },
    {
        "content": "<p>see <a href=\"#narrow/stream/270676-lean4/topic/String.2EcontainsSubstring/near/371008174\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/String.2EcontainsSubstring/near/371008174</a></p>",
        "id": 381467488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691066276
    },
    {
        "content": "<p>the shortest implementation seems to be <code>s1.toList &lt;:+: s2.toList</code></p>",
        "id": 381467718,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691066327
    },
    {
        "content": "<p>(that's a prop though)</p>",
        "id": 381467834,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691066357
    },
    {
        "content": "<p>Thanks. I just wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">String.isInfixOf</span> <span class=\"o\">(</span><span class=\"n\">needle</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hey</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">hey.mkIterator</span>\n  <span class=\"n\">while</span> <span class=\"n\">not</span> <span class=\"n\">i.atEnd</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">needle.isPrefixOf</span> <span class=\"n\">i.remainingToString</span>\n    <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n    <span class=\"k\">else</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i.next</span>\n  <span class=\"n\">return</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>to be unblocked for now, and will maybe use <a href=\"https://github.com/leanprover/std4/pull/178\">https://github.com/leanprover/std4/pull/178</a> when it lands.</p>",
        "id": 381471347,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691066977
    },
    {
        "content": "<p>(This thread is resolved for me…)</p>",
        "id": 381471719,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691067039
    }
]