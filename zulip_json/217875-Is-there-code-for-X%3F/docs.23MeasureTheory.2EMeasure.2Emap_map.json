[
    {
        "content": "<p>Is there a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.map_map#doc\">docs#MeasureTheory.Measure.map_map</a> that only requires ae-measurability somewhere?</p>",
        "id": 405660270,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701605275
    },
    {
        "content": "<p>I'm not even sure whether it's true, but I would at least hope so.</p>",
        "id": 405660329,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701605299
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AEMeasurable.map_map_of_aemeasurable#doc\">docs#AEMeasurable.map_map_of_aemeasurable</a></p>",
        "id": 405860552,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701706391
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405860684,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701706426
    },
    {
        "content": "<p><del>Found by <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  MeasureTheory.Measure.Map, AEMeasurable</del></p>",
        "id": 405860798,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701706445
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'MeasureTheory.Measure.Map'<br>\nDid you mean <a href=\"https://loogle.lean-lang.org/?q=%22MeasureTheory.Measure.Map%22%2C%20AEMeasurable\"><code>\"MeasureTheory.Measure.Map\", AEMeasurable</code></a>?</p>",
        "id": 405860803,
        "sender_full_name": "loogle",
        "timestamp": 1701706446
    },
    {
        "content": "<p>Found by <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  <a href=\"http://MeasureTheory.Measure.map\">MeasureTheory.Measure.map</a>, AEMeasurable</p>",
        "id": 405860942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701706481
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.Measure.tendsto_ae_map\">MeasureTheory.Measure.tendsto_ae_map</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.Measure.map_of_not_aemeasurable\">MeasureTheory.Measure.map_of_not_aemeasurable</a>, and <a href=\"https://loogle.lean-lang.org/?q=MeasureTheory.Measure.map%2C%20AEMeasurable\">71 more</a></p>",
        "id": 405860946,
        "sender_full_name": "loogle",
        "timestamp": 1701706482
    },
    {
        "content": "<p>Let's try <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  AEMeasurable, \"map_map\"</p>",
        "id": 405861198,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701706542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> AEMeasurable, \"map_map\"</p>",
        "id": 405861330,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701706572
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Measure/AEMeasurable.html#AEMeasurable.map_map_of_aemeasurable\">AEMeasurable.map_map_of_aemeasurable</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Probability/Independence/Basic.html#ProbabilityTheory.indepFun_iff_map_prod_eq_prod_map_map\">ProbabilityTheory.indepFun_iff_map_prod_eq_prod_map_map</a></p>",
        "id": 405861336,
        "sender_full_name": "loogle",
        "timestamp": 1701706573
    },
    {
        "content": "<p>I'm probably late to the party, but just in case, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Measure.map_map_ae</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m0</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">AEMeasurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">AEMeasurable</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Measure.map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Measure.map</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Measure.map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">F_mble</span><span class=\"o\">,</span> <span class=\"n\">F_aeeq_f</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">G_mble</span><span class=\"o\">,</span> <span class=\"n\">G_aeeq_g</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span>\n  <span class=\"k\">have</span> <span class=\"n\">map_f_eq</span> <span class=\"o\">:=</span> <span class=\"n\">Measure.map_congr</span> <span class=\"n\">F_aeeq_f</span>\n  <span class=\"k\">have</span> <span class=\"n\">map_g_eq</span> <span class=\"o\">:=</span> <span class=\"n\">Measure.map_congr</span> <span class=\"n\">G_aeeq_g</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_f_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">map_g_eq</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_g_eq</span><span class=\"o\">,</span> <span class=\"n\">Measure.map_map</span> <span class=\"n\">G_mble</span> <span class=\"n\">F_mble</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Measure.map_congr</span>\n  <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">μ.map</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">G</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">G_aeeq_g</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_f_eq</span><span class=\"o\">,</span> <span class=\"n\">map_apply₀</span> <span class=\"n\">F_mble.aemeasurable</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">aux</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">F_aeeq_f</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)}</span> <span class=\"bp\">∈</span> <span class=\"n\">ae</span> <span class=\"n\">μ</span> <span class=\"k\">from</span> <span class=\"n\">aux</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">hfa</span> <span class=\"n\">hgfa</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hgfa</span><span class=\"o\">,</span> <span class=\"n\">hfa</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">NullMeasurableSet.of_null</span> <span class=\"n\">aux</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MeasureTheory</span> <span class=\"c1\">-- namespace</span>\n</code></pre></div>",
        "id": 405893754,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1701716498
    },
    {
        "content": "<p>Thanks! This seems to have the same assumptions as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AEMeasurable.map_map_of_aemeasurable#doc\">docs#AEMeasurable.map_map_of_aemeasurable</a>.</p>",
        "id": 405895524,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701717213
    },
    {
        "content": "<p>I failed to read the Loogle output... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 405895797,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1701717340
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8837\">#8837</a></p>",
        "id": 406212066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701832970
    }
]