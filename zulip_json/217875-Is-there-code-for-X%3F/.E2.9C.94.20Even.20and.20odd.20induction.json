[
    {
        "content": "<p>Hello everyone,<br>\nHope your weekends are going well. <br>\nI am trying to work with induction. Showing the case n=0 is easy. The case n=1 is also alright. <br>\nBut showing it holds for n+1 is difficult. But showing it holds for n+2 is fine. <br>\nHow can I best solve this?  I have tried with strong induction but I couldn't get it to work the way I wanted, <br>\nso I was thinking perhaps to do cases n is odd and n is even. <br>\nBut if I do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:=</span> <span class=\"n\">nat.even_or_odd</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"n\">even</span> <span class=\"n\">odd</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>then I get the induction step <code>_root_.even n → Case n is true</code> but I still have to prove <code>Case n.succ</code>. <br>\nIs there a way I can get <code>Case n+2</code>, or is that just not logically correct? <br>\nIf I could do that, then I could prove that it holds for all <code>Case n.even </code> and then <code>Case n.odd </code>, then the proof should be complete.<br>\nKind regards,</p>",
        "id": 346200003,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1680358842
    },
    {
        "content": "<p>You're in luck: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.two_step_induction\">docs#nat.two_step_induction</a></p>",
        "id": 346200923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680359096
    },
    {
        "content": "<p>If you don't need <code>P (n+1)</code> to go from <code>P n</code> to <code>P (n+2)</code>, you can just ignore it.</p>",
        "id": 346201038,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680359153
    },
    {
        "content": "<p>the equation compiler should be able to support this, too</p>",
        "id": 346201041,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1680359154
    },
    {
        "content": "<p>Oh great! Thank you so much, let me see if I can get it to work :D</p>",
        "id": 346201277,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1680359207
    },
    {
        "content": "<p>I agree and it should also be possible with strong induction, but sometimes the easiest way is to formulate the induction principle you need as a standalone lemma, if it is a bit nonstandard--or find it in the library if it is not so nonstandard after all</p>",
        "id": 346201293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680359214
    },
    {
        "content": "<p>(Indeed, <code>nat.two_step_induction</code> is proved using the equation compiler.)</p>",
        "id": 346201358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680359239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590693\">rtertr (Sonia)</span> has marked this topic as resolved.</p>",
        "id": 346239772,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680374261
    }
]