[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> GradedAlgebra<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GradedAlgebra#doc\">docs#GradedAlgebra</a></p>",
        "id": 387658617,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693225726
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProjectiveSpectrum#doc\">docs#ProjectiveSpectrum</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgebraicGeometry.germ_comp_stalkToFiberRingHom#doc\">docs#AlgebraicGeometry.germ_comp_stalkToFiberRingHom</a>, <a href=\"https://loogle.lean-fro.org/?q=GradedAlgebra\">and 183 more</a></p>",
        "id": 387658618,
        "sender_full_name": "loogle",
        "timestamp": 1693225727
    },
    {
        "content": "<p>Public service announcement: this topic may be used for chatting with <code>loogle</code>. Everyone is welcome to use it, but many people may also want to mute the topic!</p>",
        "id": 387658772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693225793
    },
    {
        "content": "<p>So the idea is that you are encouraging us to send our queries to this thread rather than PMing the bot directly?</p>",
        "id": 387659244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693225936
    },
    {
        "content": "<p>Only slightly seriously. I thought it would be amusing to watching people using loogle. But it might also be noisy and distracting. :-)</p>",
        "id": 387659378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693225988
    },
    {
        "content": "<p>@loogle pwFilter</p>",
        "id": 387659576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693226057
    },
    {
        "content": "<p>I think we will see some uses of the bot in response to questions all over</p>",
        "id": 387659584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226060
    },
    {
        "content": "<p>Should the <code>loogle</code> above <code>@loogle GradedAlgebra</code>find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GradedAlgebra#doc\">docs#GradedAlgebra</a> ?  Did it?</p>",
        "id": 387659589,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693226062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> pwFilter</p>",
        "id": 387659607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693226068
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'pwFilter'</p>",
        "id": 387659608,
        "sender_full_name": "loogle",
        "timestamp": 1693226068
    },
    {
        "content": "<p>that could use some work, autocomplete can do better than that</p>",
        "id": 387659659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  \"pwFilter\"</p>",
        "id": 387659923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226185
    },
    {
        "content": "<p>I think that <code>loogle</code> does not pick up on edits.</p>",
        "id": 387659972,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693226207
    },
    {
        "content": "<p>(on Zulip editing a post to ping someone doesn't work BTW, or at least it didn't used to work)</p>",
        "id": 387659979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693226209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"pwFilter\"</p>",
        "id": 387660004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226221
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> Cannot search: No constants in search pattern.</p>",
        "id": 387660009,
        "sender_full_name": "loogle",
        "timestamp": 1693226221
    },
    {
        "content": "<p>If I knew what the constant was named I wouldn't be asking you <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 387660117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226259
    },
    {
        "content": "<p>I do not think that <code>@loogle GradedAlgebra</code> returned <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=GradedAlgebra#doc\">docs#GradedAlgebra</a> as an answer.</p>",
        "id": 387660246,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693226300
    },
    {
        "content": "<p>I think that's because <code>GradedAlgebra</code> doesn't have a type that mentions <code>GradedAlgebra</code></p>",
        "id": 387660382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226358
    },
    {
        "content": "<p>Ah, so <br>\n@loogle \"GradedAlgebra\"<br>\nshould work?</p>",
        "id": 387660494,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693226400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"GradedAlgebra\"</p>",
        "id": 387660557,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693226413
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> Cannot search: No constants in search pattern.</p>",
        "id": 387660559,
        "sender_full_name": "loogle",
        "timestamp": 1693226414
    },
    {
        "content": "<p>Oh, you already fell in this trap</p>",
        "id": 387660596,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693226432
    },
    {
        "content": "<p>I guess this is a bit of mismatch between what one expects from a \"search engine\" vs something that searches for a constant by type</p>",
        "id": 387660628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226445
    },
    {
        "content": "<p>Yes, ok, I need to adapt my expectation of what I should find and what not.</p>",
        "id": 387660679,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693226464
    },
    {
        "content": "<p>or it needs to expand in scope</p>",
        "id": 387660724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693226486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  (List.join (<a href=\"http://List.map\">List.map</a> (fun z =&gt; ?a ++ z) ?b))</p>",
        "id": 387660819,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693226523
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.append_join_map_append#doc\">docs#List.append_join_map_append</a></p>",
        "id": 387660831,
        "sender_full_name": "loogle",
        "timestamp": 1693226524
    },
    {
        "content": "<p>While it's probably reasonable to expand the scope to include constants, it is probably also better to leave this for a subsequent PR</p>",
        "id": 387660967,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693226572
    },
    {
        "content": "<p>@loogle (List.join (<a href=\"http://List.map\">List.map</a> (?a ++ ·) ?b))</p>",
        "id": 387661485,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693226770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (List.join (<a href=\"http://List.map\">List.map</a> (?a ++ ·) ?b))</p>",
        "id": 387661854,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693226901
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.append_join_map_append#doc\">docs#List.append_join_map_append</a></p>",
        "id": 387661857,
        "sender_full_name": "loogle",
        "timestamp": 1693226902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> String → Nat → Char → String</p>",
        "id": 387665457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693228108
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:7: expected end of input</p>",
        "id": 387665460,
        "sender_full_name": "loogle",
        "timestamp": 1693228109
    },
    {
        "content": "<p>@loogle (String → Nat → Char → String)</p>",
        "id": 387665547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693228131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (String → Nat → Char → String)</p>",
        "id": 387665642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693228164
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 387665644,
        "sender_full_name": "loogle",
        "timestamp": 1693228165
    },
    {
        "content": "<p>Am I doing that wrong? I wanted <code>String.leftpad</code>.</p>",
        "id": 387665932,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693228259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  (Nat → Char → String → String)</p>",
        "id": 387666284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693228375
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.leftpad#doc\">docs#String.leftpad</a></p>",
        "id": 387666285,
        "sender_full_name": "loogle",
        "timestamp": 1693228376
    },
    {
        "content": "<p>Oh, I thought I read in the docs that the argument order wasn't important.</p>",
        "id": 387666370,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693228406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> String Nat Char |- String</p>",
        "id": 387666673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693228507
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.leftpad#doc\">docs#String.leftpad</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.pushn#doc\">docs#String.pushn</a>, <a href=\"https://loogle.lean-fro.org/?q=String%20Nat%20Char%20%7C-%20String\">and 1 more</a></p>",
        "id": 387666677,
        "sender_full_name": "loogle",
        "timestamp": 1693228507
    },
    {
        "content": "<p>Got it.</p>",
        "id": 387666710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693228518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- (String -&gt; Nat -&gt; Char -&gt; String)<br>\nShould hopefully work</p>",
        "id": 387667092,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693228647
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.leftpad#doc\">docs#String.leftpad</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.pushn#doc\">docs#String.pushn</a></p>",
        "id": 387667096,
        "sender_full_name": "loogle",
        "timestamp": 1693228648
    },
    {
        "content": "<p>the \"and 1 more\" returned from my query and not yours is <code>def String.replicate (n : Nat) (c : Char) : String</code>, it is surprising that my query would match this</p>",
        "id": 387667506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693228791
    },
    {
        "content": "<p>Zulip lost a message here :-(</p>",
        "id": 387670239,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693229761
    },
    {
        "content": "<p>Your original query was a subexpression query, with no special handling of promises.<br>\nYour second query filtered by 3 constants, no matter where they are, and the last filter required the conclusion to be String.<br>\nMy query was a conclusion pattern, where premises are possibly reordered.<br>\nThe next deployment will require commas between multiple conditions, that will make things clearer.</p>\n<p>Good to see where the UX is suboptimal here!</p>",
        "id": 387670779,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693229913
    },
    {
        "content": "<p>oh, <code>a b |- c</code> reads like a hypothesis/goal pattern</p>",
        "id": 387675629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693231401
    },
    {
        "content": "<p>Yes, I understand the confusion. That query will be<br>\n<code>a, b, |- c</code> after the next deployment, which will hopefully be less misleading</p>",
        "id": 387678966,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693232432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ((Fin (_ + _) -&gt; Sum (Fin _) (Fin _))</p>",
        "id": 389028216,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693846792
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:37: unexpected end of input; expected ')', ',' or ':'</p>",
        "id": 389028220,
        "sender_full_name": "loogle",
        "timestamp": 1693846793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Fin (_ + _) -&gt; Sum (Fin _) (Fin _))</p>",
        "id": 389028344,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693846832
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 389028347,
        "sender_full_name": "loogle",
        "timestamp": 1693846833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Equiv (Fin (_ + _)) (Sum (Fin _) (Fin _)))</p>",
        "id": 389028413,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693846871
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Fin.html#finSumFinEquiv_symm_apply_castAdd\">finSumFinEquiv_symm_apply_castAdd</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Fin.html#finSumFinEquiv_symm_apply_natAdd\">finSumFinEquiv_symm_apply_natAdd</a>, and <a href=\"https://loogle.lean-fro.org/?q=%28Equiv%20%28Fin%20%28_%20%2B%20_%29%29%20%28Sum%20%28Fin%20_%29%20%28Fin%20_%29%29%29\">1 more</a></p>",
        "id": 389028414,
        "sender_full_name": "loogle",
        "timestamp": 1693846871
    },
    {
        "content": "<p>This helped me find the thing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=finSumFinEquiv#doc\">docs#finSumFinEquiv</a> I was looking for, but I have no idea why it's giving me these responses rather than finSumFinEquiv itself. These things don't seem to reference Equiv itself directly.</p>",
        "id": 389028756,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693847062
    },
    {
        "content": "<p>I guess they reference it in some implicit type argument, e.g. the coercion. So that's not completely unexpected. I wonder why the definition itself wasn't listed.</p>",
        "id": 389029402,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693847470
    },
    {
        "content": "<p>Why is <code>finSumFinEquiv</code> not a link in the lemma statements on the docs page?</p>",
        "id": 389030959,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693848224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  (Equiv (Sum (Fin _) (Fin _)) (Fin (_ + _)))</p>",
        "id": 389032093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693848834
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Fin.html#finSumFinEquiv\">finSumFinEquiv</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Fin.html#finSumFinEquiv_apply_left\">finSumFinEquiv_apply_left</a>, and <a href=\"https://loogle.lean-fro.org/?q=%20%28Equiv%20%28Sum%20%28Fin%20_%29%20%28Fin%20_%29%29%20%28Fin%20%28_%20%2B%20_%29%29%29\">1 more</a></p>",
        "id": 389032094,
        "sender_full_name": "loogle",
        "timestamp": 1693848835
    },
    {
        "content": "<p>Ah, of course!</p>",
        "id": 389035877,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693851148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Fin ( _ + _), Sum (Fin _) (Fin _)<br>\nis how I think I'd have approached this search problem: this way the order doesn't matter, and also whether it's an equiv or maybe something similar <br>\n(but hindsight is something something)</p>",
        "id": 389035953,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693851229
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Fin.html#finSumFinEquiv\">finSumFinEquiv</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Fin.html#finSumFinEquiv_apply_left\">finSumFinEquiv_apply_left</a>, and <a href=\"https://loogle.lean-fro.org/?q=Fin%20%28%20_%20%2B%20_%29%2C%20Sum%20%28Fin%20_%29%20%28Fin%20_%29\">4 more</a></p>",
        "id": 389035954,
        "sender_full_name": "loogle",
        "timestamp": 1693851230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> List.indexesOf</p>",
        "id": 389534434,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1694044823
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 389534438,
        "sender_full_name": "loogle",
        "timestamp": 1694044825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  <a href=\"http://RingHom.id\">RingHom.id</a> (ZMod _)</p>",
        "id": 389644819,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694089272
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/Finite/Basic.html#ZMod.frobenius_zmod\">ZMod.frobenius_zmod</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/Finite/GaloisField.html#GaloisField.splits_zmod_X_pow_sub_X\">GaloisField.splits_zmod_X_pow_sub_X</a>, and <a href=\"https://loogle.lean-fro.org/?q=%20RingHom.id%20%28ZMod%20_%29\">1 more</a></p>",
        "id": 389644825,
        "sender_full_name": "loogle",
        "timestamp": 1694089274
    },
    {
        "content": "<p>the 1 more is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiniteField.trace_to_zmod_nondegenerate#doc\">docs#FiniteField.trace_to_zmod_nondegenerate</a> - I don't get why this shows up.</p>",
        "id": 389644883,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694089297
    },
    {
        "content": "<p>Strange indeed. Maybe <code>isDefEq</code> reduces <code>RingHom.id</code> to identity during pattern matching? But I don't get why this lemma is even considered, i.e. why it appears in the index under “mentions <code>RingHom.id</code>” 🤷‍♂️</p>",
        "id": 389707712,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694105026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> <a href=\"http://Multiset.map\">Multiset.map</a> Finset.univ</p>",
        "id": 390087068,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694311918
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Multiset.map</span> <span class=\"n\">Finset.univ</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Finset.univ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">m.43699575</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.43699574</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.43699572</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.43699573</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.43699570</span> <span class=\"bp\">?</span><span class=\"n\">u.43699571</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390087091,
        "sender_full_name": "loogle",
        "timestamp": 1694311924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> <a href=\"http://Multiset.map\">Multiset.map</a>, Finset.univ</p>",
        "id": 390087117,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694311936
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finsupp/Defs.html#Equiv.finsuppUnique_symm_apply_support_val\">Equiv.finsuppUnique_symm_apply_support_val</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/MvPolynomial/Symmetric.html#MvPolynomial.aeval_esymm_eq_multiset_esymm\">MvPolynomial.aeval_esymm_eq_multiset_esymm</a>, and <a href=\"https://loogle.lean-fro.org/?q=Multiset.map%2C%20Finset.univ\">4 more</a></p>",
        "id": 390087118,
        "sender_full_name": "loogle",
        "timestamp": 1694311937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> <a href=\"http://Multiset.map\">Multiset.map</a>, Finset.univ, Function.Bijective</p>",
        "id": 390087216,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694312037
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 390087219,
        "sender_full_name": "loogle",
        "timestamp": 1694312037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> <a href=\"http://Finset.map\">Finset.map</a>, Finset.univ, Function.Bijective</p>",
        "id": 390087274,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694312056
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 390087275,
        "sender_full_name": "loogle",
        "timestamp": 1694312056
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Multiset/Fintype.html#Multiset.map_univ\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Multiset/Fintype.html#Multiset.map_univ</a> is not what you were looking for?</p>",
        "id": 390097324,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694320022
    },
    {
        "content": "<p>No, I want this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If f is a bijection of finite sets, it maps universes into universes. -/</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_univ_eq_univ_of_bijection</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">univ.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- TODO: Note the converse is also true (a function mapping universes to universes is bijective)</span>\n  <span class=\"c1\">-- this converse should turn into a @[simp] iff lemma.</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.bijective_iff_has_inverse</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">f_inv</span><span class=\"o\">,</span> <span class=\"n\">hf_inv</span><span class=\"o\">,</span> <span class=\"n\">hf_inv'</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f_inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Function.RightInverse</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">at</span> <span class=\"n\">hf_inv'</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hf_inv'</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">count_univ</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">count_map_eq_count'</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_val</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">count_univ</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Function.LeftInverse.injective</span> <span class=\"n\">hf_inv</span>\n</code></pre></div>",
        "id": 390102409,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694323523
    },
    {
        "content": "<p>The reverse direction has turned out to be much more difficult than it feels like it should be.</p>",
        "id": 390102511,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694323583
    },
    {
        "content": "<p>Doesn't f just have to be surjective?</p>",
        "id": 390119158,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694335345
    },
    {
        "content": "<p>Oh I see why you're mixing multisets and need bijective</p>",
        "id": 390119305,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694335469
    },
    {
        "content": "<p>I thought that <code>univ</code> stood for \"universal set\" not \"universe\"</p>",
        "id": 390119315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694335482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ((?m + ?n) + ?k = ?m + ( ?n + ?k))</p>",
        "id": 390172835,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694372108
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 390172854,
        "sender_full_name": "loogle",
        "timestamp": 1694372129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> /o\\</p>",
        "id": 390172872,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694372147
    },
    {
        "content": "<p>It times out Zulip, too slow given the large number of lemma involving = and +. On the web page you should get a response, I hope.</p>",
        "id": 390173074,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694372303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- ((?m + ?n) + ?k = ?m + ( ?n + ?k))</p>",
        "id": 390173099,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694372330
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 390173115,
        "sender_full_name": "loogle",
        "timestamp": 1694372351
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>not so^^</p>",
        "id": 390173124,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694372359
    },
    {
        "content": "<p>Also not if I give type hints <code>(((?m : Nat) + (?n : Nat)) + (?k : Nat) = ?m + ( ?n + ?k))</code></p>",
        "id": 390173236,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694372426
    },
    {
        "content": "<p><a href=\"https://loogle.lean-fro.org/?q=%7C-+%28%28%3Fm+%2B+%3Fn%29+%2B+%3Fk+%3D+%3Fm+%2B+%28+%3Fn+%2B+%3Fk%29%29\">https://loogle.lean-fro.org/?q=%7C-+%28%28%3Fm+%2B+%3Fn%29+%2B+%3Fk+%3D+%3Fm+%2B+%28+%3Fn+%2B+%3Fk%29%29</a> works, it seems</p>",
        "id": 390173273,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694372449
    },
    {
        "content": "<p>That's <code>|- ((?m + ?n) + ?k = ?m + ( ?n + ?k))</code></p>",
        "id": 390173340,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694372488
    },
    {
        "content": "<p>What difference does <code>|-</code> make here?</p>",
        "id": 390173374,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694372521
    },
    {
        "content": "<p>I fear looking at all subexpressions of 10k lemmas is just going to be rather expensive</p>",
        "id": 390173414,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694372525
    },
    {
        "content": "<p>Without it it lists all lemmas that match your pattern anywhere</p>",
        "id": 390173439,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694372542
    },
    {
        "content": "<p>With it, only the conclusion is matched</p>",
        "id": 390173455,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694372553
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 391022604,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694727863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Lean.FVarId -&gt; Lean.MetaM Lean.Expr</p>",
        "id": 391022655,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694727894
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Meta/Basic.html#Lean.FVarId.getType\">Lean.FVarId.getType</a></p>",
        "id": 391022658,
        "sender_full_name": "loogle",
        "timestamp": 1694727895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>, can the loogle results page show the types of the things it found? That would make it 10x more useful to me.</p>",
        "id": 391059269,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694745251
    },
    {
        "content": "<p>In principle yes. I had three dozens docs tabs open next to my Loogle tab yesterday, so I know what you mean :-)</p>\n<p>I'm unsure about the best way to present it, as types can get large. Simply below? On hover? Collapsible? But then next you'd really want the terms there to be hoverable/clickable as well, and the little POC page suddenly gets quite out of hand, and starts duplicating logic from the docs page…</p>\n<p>Is your use case using Loogle while proving things? Then it may be better UX to enable the use of Loogle inside VS Code, to avoid the tool switch. The low tech solution is to use <code>#find</code> in a tab with <code>import Mathlib</code>. The next level would be integration into the VS Code plugin; I imagine a “loogle pane” that you can open (like the info view or the error list) with a search field. Then all your usual VS Code niceties (jump to definition, hover to explore the types, maybe even a hotkey to insert the result into your current document) will apply. Maybe it could even somehow take the current context (opened namespaces) into account so that you don't have to enter queries fully qualified!</p>\n<p>Is anyone edited about that prospect and likes to work on IDE integration? Happy to assist!</p>",
        "id": 391087256,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694757914
    },
    {
        "content": "<p>I mean, do we even need to run <code>#find</code> in tab with <code>import Mathlib</code>? If everything is in a global precomputed cache, you could run it from anywhere.</p>",
        "id": 391087453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694758011
    },
    {
        "content": "<p>(Maybe then it can't show the types for the unimported stuff?)</p>",
        "id": 391087480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694758023
    },
    {
        "content": "<p>Yes, that is my worry; it may not even be able to search the types for the unimported stuff…</p>",
        "id": 391087718,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694758118
    },
    {
        "content": "<p>I wonder if I can use the doc site generation code as a library, and not only render the type nicely, but also the docstring, and render it all in the same style as in the docs, that might be pretty</p>",
        "id": 391093783,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694760783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  MvPolynomial.coeff, MvPolynomial.C</p>",
        "id": 391362092,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694860568
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/MvPolynomial/Basic.html#MvPolynomial.C_dvd_iff_dvd_coeff\">MvPolynomial.C_dvd_iff_dvd_coeff</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/MvPolynomial/Basic.html#MvPolynomial.coeff_C\">MvPolynomial.coeff_C</a>, and <a href=\"https://loogle.lean-fro.org/?q=%20MvPolynomial.coeff%2C%20MvPolynomial.C\">6 more</a></p>",
        "id": 391362095,
        "sender_full_name": "loogle",
        "timestamp": 1694860569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  MvPolynomial.coeff, MvPolynomial.C, IsEmpty</p>",
        "id": 391365008,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694862523
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 391365009,
        "sender_full_name": "loogle",
        "timestamp": 1694862523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Fintype.piFinset, Fin.succ</p>",
        "id": 391375381,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694869316
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 391375383,
        "sender_full_name": "loogle",
        "timestamp": 1694869318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> <a href=\"http://MvPolynomial.support\">MvPolynomial.support</a>, Nonempty</p>",
        "id": 391442571,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694917128
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 391442573,
        "sender_full_name": "loogle",
        "timestamp": 1694917129
    },
    {
        "content": "<p>@loogle <a href=\"http://MvPolynomial.support\">MvPolynomial.support</a>, Finset.Nonempty</p>",
        "id": 391466500,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694935430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  <a href=\"http://MvPolynomial.support\">MvPolynomial.support</a>, Finset.Nonempty</p>",
        "id": 391466551,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694935448
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 391466552,
        "sender_full_name": "loogle",
        "timestamp": 1694935449
    },
    {
        "content": "<p>@loogle <a href=\"http://MvPolynomial.support\">MvPolynomial.support</a>, Finset.nonempty</p>",
        "id": 391466561,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694935459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  <a href=\"http://MvPolynomial.support\">MvPolynomial.support</a>, Finset.Nonempty</p>",
        "id": 391466573,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694935471
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 391466574,
        "sender_full_name": "loogle",
        "timestamp": 1694935471
    },
    {
        "content": "<p>@loogle <a href=\"http://MvPolynomial.support\">MvPolynomial.support</a>, \"nonempty\"</p>",
        "id": 391466584,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694935482
    },
    {
        "content": "<p>Come on lol</p>",
        "id": 391466590,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694935486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> <a href=\"http://MvPolynomial.support\">MvPolynomial.support</a>, \"nonempty\"</p>",
        "id": 391466614,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694935504
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 391466616,
        "sender_full_name": "loogle",
        "timestamp": 1694935505
    },
    {
        "content": "<p>Are we looking for the same thing, I guess <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> ?</p>",
        "id": 391467477,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694936365
    },
    {
        "content": "<p>I was trying to see if it was there with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Nonempty#doc\">docs#Set.Nonempty</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Nonempty#doc\">docs#Finset.Nonempty</a></p>",
        "id": 391467721,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694936575
    },
    {
        "content": "<p>Well, I was surprised not to see it. It's in my S-Z PR</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">MvPolynomial.support_nonempty_iff</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">MvPolynomial.support</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">MvPolynomial.support_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">Finset.nonempty_iff_ne_empty</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 391468064,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694936842
    },
    {
        "content": "<p><del>Not sure if I've spun it out yet somewhere</del> I was going to use it in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7206\">#7206</a>, but just inlined it.</p>",
        "id": 391468137,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694936891
    },
    {
        "content": "<p>There should be the same thing for Polynomial.</p>",
        "id": 391468647,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694937322
    },
    {
        "content": "<p>I think that around <code>Polynomial</code>s, <code>ne_empty</code> is more common:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f.support.Nonempty</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">Finset.nonempty_iff_ne_empty.trans</span> <span class=\"n\">Polynomial.support_eq_empty.not</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">MvPolynomial.support</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">Finset.nonempty_iff_ne_empty.trans</span> <span class=\"n\">MvPolynomial.support_eq_empty.not</span>\n</code></pre></div>",
        "id": 391472232,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694939997
    },
    {
        "content": "<p>Loogle may be lagging behind master; the updating isn't automated yet</p>",
        "id": 391498909,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694955495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Finset.val, <a href=\"http://Multiset.map\">Multiset.map</a></p>",
        "id": 391910912,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695129526
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Image.html#Finset.image_val\">Finset.image_val</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Image.html#Finset.image_val_of_injOn\">Finset.image_val_of_injOn</a>, and <a href=\"https://loogle.lean-fro.org/?q=Finset.val%2C%20Multiset.map\">23 more</a></p>",
        "id": 391910914,
        "sender_full_name": "loogle",
        "timestamp": 1695129527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Equiv, Mul</p>",
        "id": 391917615,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695131558
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/TypeTags.html#ofMul_mul\">ofMul_mul</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Group/TypeTags.html#toMul_add\">toMul_add</a>, and <a href=\"https://loogle.lean-fro.org/?q=Equiv%2C%20Mul\">88 more</a></p>",
        "id": 391917618,
        "sender_full_name": "loogle",
        "timestamp": 1695131559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Continuous ?a LocallyBoundedMap ?a</p>",
        "id": 392313877,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1695300239
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 392449974,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695364776
    },
    {
        "content": "<p>Are you looking for <code>Int.cast</code>?</p>",
        "id": 392450199,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695364895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Int |- Fin ?n</p>",
        "id": 392450200,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695364895
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:4: expected end of input</p>",
        "id": 392450201,
        "sender_full_name": "loogle",
        "timestamp": 1695364896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60loogle.60.20queries/near/392450199\">said</a>:</p>\n<blockquote>\n<p>Are you looking for <code>Int.cast</code>?</p>\n</blockquote>\n<p>Yes! I was surprised when it didn't coerce by adding a type annotation, and wasn't sure where it was...</p>",
        "id": 392450565,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365066
    },
    {
        "content": "<p>But also, I wonder why that loogle query didn't work...</p>",
        "id": 392450685,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Int |- Fin _</p>",
        "id": 392450751,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365164
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:4: expected end of input</p>",
        "id": 392450765,
        "sender_full_name": "loogle",
        "timestamp": 1695365164
    },
    {
        "content": "<p>Wait, it doesn't like <code>|-</code> for some reason...</p>",
        "id": 392450821,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365185
    },
    {
        "content": "<p>Let's try one that worked earlier:</p>",
        "id": 392450961,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> String Nat Char |- String</p>",
        "id": 392450982,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365266
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:16: expected end of input</p>",
        "id": 392450985,
        "sender_full_name": "loogle",
        "timestamp": 1695365267
    },
    {
        "content": "<p>With updated syntax, maybe?</p>",
        "id": 392451039,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  String, Nat, Char |- String</p>",
        "id": 392451129,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365293
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:18: expected end of input</p>",
        "id": 392451134,
        "sender_full_name": "loogle",
        "timestamp": 1695365294
    },
    {
        "content": "<p>Wait a minute...does it insist on a trailing comma after the hypotheses?</p>",
        "id": 392451631,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> String, Nat, Char, |- String</p>",
        "id": 392451648,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695365484
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/String/Basic.html#String.pushn\">String.pushn</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/String/Defs.html#String.leftpad\">String.leftpad</a>, and <a href=\"https://loogle.lean-fro.org/?q=String%2C%20Nat%2C%20Char%2C%20%7C-%20String\">1 more</a></p>",
        "id": 392451653,
        "sender_full_name": "loogle",
        "timestamp": 1695365484
    },
    {
        "content": "<p>Oh, wait, hypotheses have to be specified <em>after</em> the |- by arrow notation, I see! The non-turnstile comma separated terms are just searching anywhere in the expression.</p>",
        "id": 392453328,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695366272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- Int -&gt; Fin _</p>",
        "id": 392453432,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695366331
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 392453433,
        "sender_full_name": "loogle",
        "timestamp": 1695366332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- IntCast (Fin _)</p>",
        "id": 392453866,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695366520
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 392453868,
        "sender_full_name": "loogle",
        "timestamp": 1695366521
    },
    {
        "content": "<p><code>Int</code> has a coercion to <code>Fin n</code> only if <code>n ≠ 0</code>, so you need to specify that somehow. The instance is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.instAddMonoidWithOne#doc\">docs#Fin.instAddMonoidWithOne</a>, so the way to specify that is a <code>NeZero n</code> assumption.</p>",
        "id": 392454218,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695366669
    },
    {
        "content": "<p>Ah, thank you!! (Original loogle!! :) ) Hmmm—ultimately I want a Nat. Do you happen to know if there's a modulo operation on Ints, by Nats, which goes directly to Nats? I guess you still want the argument Nat to not be zero to actually make sense most of the time, but I can live with a junk value more easily in this situation...</p>",
        "id": 392454825,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695366931
    },
    {
        "content": "<p>Hang on, we'd want <code>-4 % 0</code> to be <code>-4</code>, mathematically (just not \"in practice\" in the case I'm using this in (array indexing)), so I guess we can't land in Nat in general even when modding by a Nat...maybe making <code>Fin</code> work will be fine.</p>",
        "id": 392455305,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695367136
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.natMod#doc\">docs#Int.natMod</a></p>",
        "id": 392455568,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695367252
    },
    {
        "content": "<p>(I'm glad Loogle hasn't fully replaced me quite yet <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span>)</p>",
        "id": 392455650,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695367294
    },
    {
        "content": "<p>Great, that worked, thanks! :D Now I can index into arrays with <code>Int</code>s :)</p>",
        "id": 392457469,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695368018
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.natAbs#doc\">docs#Int.natAbs</a></p>",
        "id": 392458623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695368520
    },
    {
        "content": "<blockquote>\n<p>Oh, wait, hypotheses have to be specified after the |- by arrow notation, I see! The non-turnstile comma separated terms are just searching anywhere in the expression.</p>\n</blockquote>\n<p>Yes, the turnstyle is a little maker in front of the whole type (with assumptions) to match against, and the commas separate independent queries/filters. Maybe the symbol is too confusing here. But what would work better? An explicit <code>not-in-subterm: </code> is a bit noisy.</p>",
        "id": 392477505,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695374808
    },
    {
        "content": "<p>Yeah, I’m not really sure what would be better—fitting a complex query into a single line of syntax is a difficult issue! Here are a couple ideas, though each has their tradeoffs:</p>\n<ol>\n<li>Use spaces for separating hypotheses, e.g. <code>a, b, c d |-e</code> would be the same as <code>a, b, |- c → d → e</code> is now (but this might create confusion for e.g. <code>f a b |- c</code>—oh, right, it has to be <code>(f a b) |- c</code>!)</li>\n<li>Use semicolons for separating anywhere-queries and commas for separating hypothesis queries, e.g. <code>a; b; c, d |- e</code> (clunky for ordinary <code>a; b; c</code> queries? but unambiguous…)</li>\n<li>Use only commas and parentheses, and try to interpret in a “smart” way—possibly prone to confusion/unpredictability, but this would parse all of the following:<br>\n    • <code>a, b, c |- d</code> has <code>a, b, c</code> as hypothesis queries<br>\n    • <code>a, b, c |- d, e</code> has <code>a, b, c</code> as hypothesis queries and <code>e</code> as a top-level query (or maybe this is banned)<br>\n    • <code>a, b, c, |- d, e</code> has <code>a, b, c, e</code> as top-level queries (note the comma!) (or maybe this pattern is banned)<br>\n    • <code>a, (b, c |- d), e</code> has <code>a</code>, <code>e</code> as top level queries and <code>b, c</code> as hypothesis queries</li>\n</ol>",
        "id": 392585761,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695410056
    },
    {
        "content": "<p>Semicolons and commas would be an option. I fear it might optimize for the wrong thing – I’d expect listing constants and name fragments to be more common than complex conclusion-only patterns (which are a rather advanced feature of sorts).  </p>\n<p>Note that <code>@loogle a → b →c</code> will always find whatever <code>@loogle |- a → b → c</code> finds, so one should only have to even think about <code>|-</code> when the former is too slow or has too many unwanted results. So complicated syntax rules for this extra search refinement might not pay off.</p>\n<p>(I am not sure if this behaviour - that <code>|-</code> is only ever an additional restriction – is known among looglers.)</p>",
        "id": 392586543,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695410410
    },
    {
        "content": "<p>Ah, does <code>@loogle a → b → c</code> now not care about the order of the premises?</p>",
        "id": 392588860,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695411523
    },
    {
        "content": "<p>No, not any more. It applies the same (imperfect) matching code as <code>|- a → b → c</code>, but at every subexpression of the term.</p>",
        "id": 392589002,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695411595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat → Bool, \"Prod.allI\"<br>\nThis finds this even thought the <code>Nat → Bool</code> occurs nested in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Prod.allI</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n</code></pre></div>",
        "id": 392589272,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695411713
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Nat/Basic.html#Prod.allI\">Prod.allI</a></p>",
        "id": 392589273,
        "sender_full_name": "loogle",
        "timestamp": 1695411714
    },
    {
        "content": "<p>Oh, that’s great! :) I guess that makes <code>|-</code> mostly unnecessary—my main motivation really was that <code>|- a → b → c</code> “looks a little wrong”—usually the hypotheses are to the left of the <code>|-</code>, so it was intuitive to think they could be put there since <code>|-</code> exists. Plus the appearance of them inside <code>→</code> suggests that they actually <em>can’t</em> be reordered (<code>a, b |- c</code> feels more “order-free” to me), and we need to remember the behavior specified in the docs. But these are ultimately minor things, and it’s not too hard to learn them away. :)</p>",
        "id": 392591084,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695412438
    },
    {
        "content": "<p>(deleted — I didn't know how to summon @loogle)</p>",
        "id": 392658173,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695455502
    },
    {
        "content": "<p>You have to mention <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> in the Zulip sense, I get an autocompletion that adds ** around the name</p>",
        "id": 392658334,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695455629
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:4: expected end of input</p>",
        "id": 392658336,
        "sender_full_name": "loogle",
        "timestamp": 1695455629
    },
    {
        "content": "<p>Or simply use <a href=\"https://loogle.lean-fro.org/\">https://loogle.lean-fro.org/</a></p>",
        "id": 392658392,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695455650
    },
    {
        "content": "<p>I ended up sending a direct message, thank you for your help!</p>",
        "id": 392662086,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695458379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (¬ ?P → ¬ ?Q), (?Q → ?P)</p>",
        "id": 392862661,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1695584837
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 392862678,
        "sender_full_name": "loogle",
        "timestamp": 1695584846
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=not_imp_not#doc\">docs#not_imp_not</a> ?</p>",
        "id": 392863150,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695585250
    },
    {
        "content": "<p>Hmm, that looks like a bug that it isn’t found. But everything with metavariables is hairy, I fear.</p>",
        "id": 392863344,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695585466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (¬ ?P → ¬ ?Q)<br>\nThis finds something, including <code>not_imp_not</code>. So the second query thows loogle off somehow.</p>",
        "id": 392863405,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695585508
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Char.ne_of_val_ne\">Char.ne_of_val_ne</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Char.val_ne_of_ne\">Char.val_ne_of_ne</a>, and <a href=\"https://loogle.lean-fro.org/?q=%28%C2%AC%20%3FP%20%E2%86%92%20%C2%AC%20%3FQ%29\">124 more</a></p>",
        "id": 392863410,
        "sender_full_name": "loogle",
        "timestamp": 1695585512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> TacticM Unit, induction</p>",
        "id": 393016768,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695649148
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'TacticM'</p>",
        "id": 393016773,
        "sender_full_name": "loogle",
        "timestamp": 1695649149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> TacticM Unit, induction</p>",
        "id": 393016893,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695649178
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'TacticM'</p>",
        "id": 393016895,
        "sender_full_name": "loogle",
        "timestamp": 1695649178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> induction</p>",
        "id": 393016930,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695649185
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'induction'</p>",
        "id": 393016934,
        "sender_full_name": "loogle",
        "timestamp": 1695649186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"Tactic\", \"induction\"</p>",
        "id": 393018233,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695649523
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html#Lean.Parser.Tactic.induction\">Lean.Parser.Tactic.induction</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Tactics.html#Lean.Parser.Tactic.inductionAlt\">Lean.Parser.Tactic.inductionAlt</a>, and <a href=\"https://loogle.lean-fro.org/?q=%22Tactic%22%2C%20%22induction%22\">4 more</a></p>",
        "id": 393018236,
        "sender_full_name": "loogle",
        "timestamp": 1695649524
    },
    {
        "content": "<p>Is this close to what you wanted?</p>",
        "id": 393018299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695649536
    },
    {
        "content": "<p>I don't know if there is support for \"monadic\" search.</p>",
        "id": 393018458,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695649564
    },
    {
        "content": "<p>No this is not what I want, I am looking for an instance of <code>TacticM Unit</code>, see <a href=\"#narrow/stream/270676-lean4/topic/Where.20are.20the.20lean4.20finishing.20tactics.3F/near/393015707\">here</a>.</p>",
        "id": 393021890,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695650394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> TacticM, Induction</p>",
        "id": 393022120,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695650433
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'TacticM'</p>",
        "id": 393022131,
        "sender_full_name": "loogle",
        "timestamp": 1695650434
    },
    {
        "content": "<p>You currently have to qualify:</p>",
        "id": 393022215,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695650450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Lean.Elab.Tactic.TacticM Unit</p>",
        "id": 393022230,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695650454
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.appendGoals\">Lean.Elab.Tactic.appendGoals</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.closeMainGoal\">Lean.Elab.Tactic.closeMainGoal</a>, and <a href=\"https://loogle.lean-fro.org/?q=Lean.Elab.Tactic.TacticM%20Unit\">104 more</a></p>",
        "id": 393022234,
        "sender_full_name": "loogle",
        "timestamp": 1695650455
    },
    {
        "content": "<p>But nothing named \"induct\" around</p>",
        "id": 393022327,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695650476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Lean.Elab.Tactic.TacticM _, \"Induct\"</p>",
        "id": 393022389,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695650490
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.getInductiveValFromMajor\">Lean.Elab.Tactic.getInductiveValFromMajor</a></p>",
        "id": 393022390,
        "sender_full_name": "loogle",
        "timestamp": 1695650491
    },
    {
        "content": "<p>I did not follow carefully the other thread, but I suspect a <code>MetaM Unit</code> might work just as well: maybe </p>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"MVarId\", \"induct\"</p>\n<p>is useful? (And maybe loogle works, even if it is embedded in extra text! EDIT: apparently not!)</p>",
        "id": 393029028,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695652051
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:72: expected end of input</p>",
        "id": 393029031,
        "sender_full_name": "loogle",
        "timestamp": 1695652052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  \"MVarId\", \"induct\"</p>",
        "id": 393029098,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695652074
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Meta/Tactic/Induction.html#Lean.MVarId.induction\">Lean.MVarId.induction</a></p>",
        "id": 393029101,
        "sender_full_name": "loogle",
        "timestamp": 1695652074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Fin, \"Mod\"</p>",
        "id": 393035196,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695653603
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Fin/Basic.html#Fin.instModFin\">Fin.instModFin</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Equiv/Fin.html#Int.divModEquiv\">Int.divModEquiv</a>, and <a href=\"https://loogle.lean-fro.org/?q=Fin%2C%20%22Mod%22\">130 more</a></p>",
        "id": 393035207,
        "sender_full_name": "loogle",
        "timestamp": 1695653605
    },
    {
        "content": "<p>Is there any way to exclude the modular forms results, for example?</p>",
        "id": 393035241,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695653613
    },
    {
        "content": "<p>No, not yet at least. Prefixing queries with <code>!</code> would probably work.<br>\nWhich <code>Mod</code> do you want here? maybe searching by identifier and not by name substring works better?</p>",
        "id": 393036232,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695653848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Fin, ?_ % ?_</p>\n<p>This is maybe a hack, but you can try to match on <code>Mod</code> in your expressions.</p>",
        "id": 393036287,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695653864
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Fin/Lemmas.html#Fin.add_def\">Fin.add_def</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Fin/Lemmas.html#Fin.coe_mul\">Fin.coe_mul</a>, and <a href=\"https://loogle.lean-fro.org/?q=Fin%2C%20%3F_%20%25%20%3F_\">40 more</a></p>",
        "id": 393036288,
        "sender_full_name": "loogle",
        "timestamp": 1695653865
    },
    {
        "content": "<p>I want the operation <code>Nat -&gt; Fin n</code> that's effectively mod, but I'm realising that I should probably just use <code>coe</code></p>",
        "id": 393036319,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695653877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60loogle.60.20queries/near/392862661\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"644391\">loogle</span> (¬ ?P → ¬ ?Q), (?Q → ?P)</p>\n</blockquote>\n<p>I was wondering why <code>exact?</code> and <code>apply?</code> fail here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">→</span>  <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- `exact?` could not close the goal. Try `apply?` to see partial suggestions.</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">→</span>  <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- apply? didn't find any relevant lemmas</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">→</span>  <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">h.mtr</span>\n</code></pre></div>",
        "id": 393075671,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1695664334
    },
    {
        "content": "<p>That's probably because those are very generic goals. We avoid indexing those to pollute results.</p>",
        "id": 393088897,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695668753
    },
    {
        "content": "<p>Maybe <code>exact?</code>, <code>apply?</code> and friends could mention this in these cases?</p>",
        "id": 393091622,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1695669604
    },
    {
        "content": "<p>As I think I've said somewhere earlier, with the current design of <code>exact?</code>is may be feasible to put back in these very generic results. We do better sorting of the candidates now, so the generic results should be tried last, and we also have an automatic \"stop before you timeout\" mechanism, so there is no danger of having too many lemmas.</p>",
        "id": 393130162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695685048
    },
    {
        "content": "<p>If someone wants to try this, just find where the <code>exact?</code> code uses <code>insertIfSpecific</code> and change it to <code>insert</code>, then let us know how things go!</p>",
        "id": 393130184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695685072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> IsDomain, NoZeroDivisors</p>",
        "id": 393438715,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695807580
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 393438813,
        "sender_full_name": "loogle",
        "timestamp": 1695807602
    },
    {
        "content": "<p>Should be back; for some reason the <code>loogle</code> process takes two minutes of busy CPU time to start on the server, although it’s rather instantaneously on my machine – it just loads a bunch of oleans. <br>\nIf someone is good with concurrent programming in python, I could direct them towards the script that needs to be improved to give a “loogle is starting, please try again later” message or so :-)</p>",
        "id": 393442552,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695808189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> IsDomain, NoZeroDivisors</p>",
        "id": 393442790,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695808223
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Ring/Basic.html#IsDomain.to_noZeroDivisors\">IsDomain.to_noZeroDivisors</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Ring/Basic.html#NoZeroDivisors.to_isDomain\">NoZeroDivisors.to_isDomain</a>, and <a href=\"https://loogle.lean-fro.org/?q=IsDomain%2C%20NoZeroDivisors\">1 more</a></p>",
        "id": 393442793,
        "sender_full_name": "loogle",
        "timestamp": 1695808223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60loogle.60.20queries/near/393442552\">said</a>:</p>\n<blockquote>\n<p>Should be back; for some reason the <code>loogle</code> process takes two minutes of busy CPU time to start on the server, although it’s rather instantaneously on my machine – it just loads a bunch of oleans. <br>\nIf someone is good with concurrent programming in python, I could direct them towards the script that needs to be improved to give a “loogle is starting, please try again later” message or so :-)</p>\n</blockquote>\n<p>I would guess that the disk IO on your server is much slower than the most likely SSD that you have on your machine?</p>",
        "id": 393446108,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695808889
    },
    {
        "content": "<p>Plausible, but <code>top</code> shows high cpu usage, and just <code>unpickl</code>ing shouldn't even cause disk access, should it?</p>",
        "id": 393449703,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695809805
    },
    {
        "content": "<p>We have artists in the crowd!<br>\n<a href=\"/user_uploads/3121/dpsWp-bV51Qz57TTZek9Maav/Screenshot_20230927-122748.png\">Screenshot_20230927-122748.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dpsWp-bV51Qz57TTZek9Maav/Screenshot_20230927-122748.png\" title=\"Screenshot_20230927-122748.png\"><img src=\"/user_uploads/3121/dpsWp-bV51Qz57TTZek9Maav/Screenshot_20230927-122748.png\"></a></div>",
        "id": 393452626,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695810549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Subgroup, Top, Finset.sum</p>",
        "id": 393515550,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695827607
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 393515558,
        "sender_full_name": "loogle",
        "timestamp": 1695827608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Subgroup, Finset.sum</p>",
        "id": 393515613,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695827625
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/GroupAction/Quotient.html#MulAction.card_eq_sum_card_group_div_card_stabilizer\">MulAction.card_eq_sum_card_group_div_card_stabilizer</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/GroupAction/Quotient.html#MulAction.card_eq_sum_card_group_div_card_stabilizer%27\">MulAction.card_eq_sum_card_group_div_card_stabilizer'</a>, and <a href=\"https://loogle.lean-fro.org/?q=Subgroup%2C%20Finset.sum\">1 more</a></p>",
        "id": 393515617,
        "sender_full_name": "loogle",
        "timestamp": 1695827625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Set (Set _) -&gt; Set _</p>",
        "id": 393558682,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1695843402
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 393558719,
        "sender_full_name": "loogle",
        "timestamp": 1695843424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Set (Set _) -&gt; Set _</p>",
        "id": 393561927,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1695844733
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 393561969,
        "sender_full_name": "loogle",
        "timestamp": 1695844755
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.bind#doc\">docs#Set.bind</a></p>",
        "id": 393561985,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695844761
    },
    {
        "content": "<p>or is it <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.join#doc\">docs#Set.join</a></p>",
        "id": 393562021,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695844772
    },
    {
        "content": "<p>you could just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monad.join#doc\">docs#Monad.join</a> since we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.monad#doc\">docs#Set.monad</a></p>",
        "id": 393562199,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695844840
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 393562215,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1695844846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  (List ?a -&gt; Set ?a)</p>",
        "id": 393790035,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695928410
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 393790039,
        "sender_full_name": "loogle",
        "timestamp": 1695928412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  (Finset ?a -&gt; Set ?a)</p>",
        "id": 393790207,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695928481
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Basic.html#Finset.toSet\">Finset.toSet</a></p>",
        "id": 393790211,
        "sender_full_name": "loogle",
        "timestamp": 1695928483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- AlgebraicGeometry.LocallyRingedSpace.Hom</p>",
        "id": 393792307,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1695929412
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 393792362,
        "sender_full_name": "loogle",
        "timestamp": 1695929433
    },
    {
        "content": "<p>I just redeployed, your query fell into the silence while <code>loogle</code> is busy reading <code>olean</code> files (or doing something else that I don’t fully understand yet).</p>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- AlgebraicGeometry.LocallyRingedSpace.Hom</p>",
        "id": 393793166,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695929767
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 393793169,
        "sender_full_name": "loogle",
        "timestamp": 1695929768
    },
    {
        "content": "<p>How about <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Geometry/RingedSpace/LocallyRingedSpace.html#AlgebraicGeometry.LocallyRingedSpace.Hom\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Geometry/RingedSpace/LocallyRingedSpace.html#AlgebraicGeometry.LocallyRingedSpace.Hom</a> ?</p>",
        "id": 393798032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695931773
    },
    {
        "content": "<p>What about it?<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> AlgebraicGeometry.LocallyRingedSpace.Hom</p>",
        "id": 393800383,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695932930
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Geometry/RingedSpace/LocallyRingedSpace.html#AlgebraicGeometry.LocallyRingedSpace.comp\">AlgebraicGeometry.LocallyRingedSpace.comp</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Geometry/RingedSpace/LocallyRingedSpace.html#AlgebraicGeometry.LocallyRingedSpace.id\">AlgebraicGeometry.LocallyRingedSpace.id</a>, and <a href=\"https://loogle.lean-fro.org/?q=AlgebraicGeometry.LocallyRingedSpace.Hom\">33 more</a></p>",
        "id": 393800385,
        "sender_full_name": "loogle",
        "timestamp": 1695932931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  |- AlgebraicGeometry.LocallyRingedSpace.Hom _ _</p>",
        "id": 393800597,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695933013
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Geometry/RingedSpace/LocallyRingedSpace.html#AlgebraicGeometry.LocallyRingedSpace.comp\">AlgebraicGeometry.LocallyRingedSpace.comp</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Geometry/RingedSpace/LocallyRingedSpace.html#AlgebraicGeometry.LocallyRingedSpace.id\">AlgebraicGeometry.LocallyRingedSpace.id</a>, and <a href=\"https://loogle.lean-fro.org/?q=%7C-%20AlgebraicGeometry.LocallyRingedSpace.Hom%20_%20_\">1 more</a></p>",
        "id": 393800599,
        "sender_full_name": "loogle",
        "timestamp": 1695933014
    },
    {
        "content": "<p>Maybe Loogle should complain if a |- pattern isn't of type <code>Sort _</code>, because only those things could be the main type of a lemma (is that right?)</p>",
        "id": 393800970,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695933195
    },
    {
        "content": "<p>Ok, next deployment will do that.</p>",
        "id": 393806800,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695936131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- AlgebraicGeometry.LocallyRingedSpace.Hom</p>",
        "id": 393894320,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695979576
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 393894326,
        "sender_full_name": "loogle",
        "timestamp": 1695979578
    },
    {
        "content": "<p>Oh, nevermind, still deploying…</p>",
        "id": 393894351,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695979588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- AlgebraicGeometry.LocallyRingedSpace.Hom</p>",
        "id": 393901886,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695982323
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Conclusion</span> <span class=\"n\">pattern</span> <span class=\"n\">is</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">AlgebraicGeometry.LocallyRingedSpace</span> <span class=\"bp\">→</span>\n  <span class=\"n\">AlgebraicGeometry.LocallyRingedSpace</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2</span><span class=\"o\">,</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"bp\">`</span><span class=\"kt\">Sort</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 393901902,
        "sender_full_name": "loogle",
        "timestamp": 1695982324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (Set ?a -&gt; WithTop (WithBot ?a))</p>",
        "id": 393932912,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695994700
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 393932915,
        "sender_full_name": "loogle",
        "timestamp": 1695994701
    },
    {
        "content": "<p>(Set ?a -&gt; WithBot (WithTop  ?a))</p>",
        "id": 393932947,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695994714
    },
    {
        "content": "<p>@loogle (Set ?a -&gt; WithBot (WithTop ?a))</p>",
        "id": 393933017,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695994746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  (Set ?a -&gt; WithBot (WithTop ?a))</p>",
        "id": 393933044,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695994758
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 393933047,
        "sender_full_name": "loogle",
        "timestamp": 1695994759
    },
    {
        "content": "<p>Are you looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WithBot.WithTop.completeLattice#doc\">docs#WithBot.WithTop.completeLattice</a> ?</p>",
        "id": 393934233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695995212
    },
    {
        "content": "<p>I am searching for something like infimum of a set.</p>",
        "id": 393934461,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1695995291
    },
    {
        "content": "<p>Yeah that's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sInf#doc\">docs#sInf</a>. If you want the infimum of a set <code>s</code> in a conditionally complete lattice <code>alpha</code>, either use <code>sInf s</code> (with junk value) or <code>iInf fun a =&gt; iInf fun _ : a in s =&gt; (a : WithBot (WithTop alpha)</code> (this has good notation, but I'm on my phone).</p>",
        "id": 393970845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696006411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat.div, Nat.div2</p>",
        "id": 394084142,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1696079477
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 394084143,
        "sender_full_name": "loogle",
        "timestamp": 1696079478
    },
    {
        "content": "<p>@loogle ite, cond</p>",
        "id": 394089592,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1696083761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ite, cond</p>",
        "id": 394089609,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1696083779
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Bool/Basic.html#Bool.cond_decide\">Bool.cond_decide</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Bool/Basic.html#Bool.cond_eq_ite\">Bool.cond_eq_ite</a></p>",
        "id": 394089610,
        "sender_full_name": "loogle",
        "timestamp": 1696083780
    },
    {
        "content": "<p>@loogle HasCountableSeparatingOn α MeasurableSet univ</p>",
        "id": 394134692,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1696126467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> HasCountableSeparatingOn α MeasurableSet univ</p>",
        "id": 394134732,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1696126499
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'α'</p>",
        "id": 394134734,
        "sender_full_name": "loogle",
        "timestamp": 1696126500
    },
    {
        "content": "<p>HasCountableSeparatingOn ?a MeasurableSet univ</p>",
        "id": 394134749,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1696126510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> HasCountableSeparatingOn ?a MeasurableSet univ</p>",
        "id": 394134788,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1696126535
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> unknown identifier 'univ'</p>",
        "id": 394134789,
        "sender_full_name": "loogle",
        "timestamp": 1696126535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> HasCountableSeparatingOn ?a MeasurableSet Set.univ</p>",
        "id": 394135133,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1696126752
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/MeasurableSpace/Basic.html#MeasurableSpace.measurable_injection_nat_bool_of_countablyGenerated\">MeasurableSpace.measurable_injection_nat_bool_of_countablyGenerated</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Dynamics/Ergodic/Function.html#Ergodic.ae_eq_const_of_ae_eq_comp%E2%82%80\">Ergodic.ae_eq_const_of_ae_eq_comp₀</a>, and <a href=\"https://loogle.lean-fro.org/?q=HasCountableSeparatingOn%20%3Fa%20MeasurableSet%20Set.univ\">2 more</a></p>",
        "id": 394135134,
        "sender_full_name": "loogle",
        "timestamp": 1696126753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Nat -&gt; Fin _</p>",
        "id": 395112789,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696537056
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Fin.mk\">Fin.mk</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Fin/Basic.html#Fin.add\">Fin.add</a>, and <a href=\"https://loogle.lean-fro.org/?q=Nat%20-%3E%20Fin%20_\">36 more</a></p>",
        "id": 395112816,
        "sender_full_name": "loogle",
        "timestamp": 1696537067
    },
    {
        "content": "<p>Maybe Loogle should learn to recognize very made queries and give prerecorded answers for those … :-)</p>",
        "id": 395113419,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696537318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ((?a -&gt; ?c) -&gt; (?b -&gt; ?c) -&gt; (?a ⊕ ?b -&gt; ?c))</p>",
        "id": 395258481,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696598375
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 395258498,
        "sender_full_name": "loogle",
        "timestamp": 1696598378
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sum.elim#doc\">docs#Sum.elim</a></p>",
        "id": 395259246,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696598565
    },
    {
        "content": "<p>Yaël Search was again the best!</p>",
        "id": 395259457,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696598628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> any idea what happened here?</p>",
        "id": 395263502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696599921
    },
    {
        "content": "<p>No. I have seen a few cases where the pattern matching code didn't seem to do what it should, often with metavariables.  Maybe not enough backtracking. Someone with a better understanding than me could try to debug this (mathlib branch <code>joachim/find</code>, see <code>tests/Find.lean</code> for starting points.)</p>",
        "id": 395264398,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696600208
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 395292636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696609130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  (?a -&gt; ?c), (?a -&gt; ?c), |- (?a ⊕ ?b -&gt; ?c)</p>",
        "id": 395292670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696609142
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 395292679,
        "sender_full_name": "loogle",
        "timestamp": 1696609145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ?a -&gt; ?c, ?b -&gt; ?c, |- ?a ⊕ ?b -&gt; ?c</p>",
        "id": 395292856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696609211
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 395292860,
        "sender_full_name": "loogle",
        "timestamp": 1696609213
    },
    {
        "content": "<p>It looks like wildcards/metavariables in the conclusion tends to throw it off. Not even<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> _ ⊕ _ -&gt; _<br>\nworks</p>",
        "id": 395293276,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696609341
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 395293278,
        "sender_full_name": "loogle",
        "timestamp": 1696609342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Did you actually try searching? Or are you just giving a canned default response because you're lazy :tssk:</p>",
        "id": 395304913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1696614438
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:101: expected end of input</p>",
        "id": 395304916,
        "sender_full_name": "loogle",
        "timestamp": 1696614439
    },
    {
        "content": "<p>“expected end of input” is a thinly veiled “shut up”?</p>",
        "id": 395310883,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696617228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> if you're happy and you know it, \"&lt;input&gt;:1:31: expected 'then'\"!</p>",
        "id": 395395891,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696671052
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:31: expected 'then'</p>",
        "id": 395395893,
        "sender_full_name": "loogle",
        "timestamp": 1696671052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> if you're happy and you know it then clap your hands</p>",
        "id": 395395971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696671121
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:52: unexpected end of input; expected 'else'</p>",
        "id": 395395973,
        "sender_full_name": "loogle",
        "timestamp": 1696671122
    },
    {
        "content": "<p><a href=\"http://Filter.map\">Filter.map</a> (?g ∘ ?f)</p>",
        "id": 395409507,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1696678265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> <a href=\"http://Filter.map\">Filter.map</a> (?g ∘ ?f)</p>",
        "id": 395409536,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1696678285
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Filter/Basic.html#Filter.map_compose\">Filter.map_compose</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Filter/Basic.html#Filter.map_map\">Filter.map_map</a></p>",
        "id": 395409538,
        "sender_full_name": "loogle",
        "timestamp": 1696678285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Ring, \"characteristic\"</p>",
        "id": 395726166,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696866232
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 395726169,
        "sender_full_name": "loogle",
        "timestamp": 1696866232
    },
    {
        "content": "<blockquote>\n<p>Found 4196 definitions mentioning Ring. Of these, 0 have a name containing \"characteristic\".</p>\n</blockquote>\n<p>Should I expect Loogle to find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharP#doc\">docs#CharP</a> , <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharZero#doc\">docs#CharZero</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharOne#doc\">docs#CharOne</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharTwo#doc\">docs#CharTwo</a> etc. ?</p>",
        "id": 395726627,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696866387
    },
    {
        "content": "<p>They are defined for <code>AddMonoidWithOne</code>s, not rings</p>",
        "id": 395726720,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696866427
    },
    {
        "content": "<p>That query is also asking for lemmas with the string <code>\"characteristic\"</code> in them, which they don’t, it seems.</p>",
        "id": 395727298,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696866646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> AddMonoidWithOne, \"char\"</p>",
        "id": 395727317,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696866655
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/CharZero/Defs.html#CharZero.cast_injective\">CharZero.cast_injective</a>, and <a href=\"https://loogle.lean-fro.org/?q=AddMonoidWithOne%2C%20%22char%22\">23 more</a></p>",
        "id": 395727320,
        "sender_full_name": "loogle",
        "timestamp": 1696866656
    },
    {
        "content": "<p>Ah I see <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span>, thanks!</p>",
        "id": 395727367,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696866674
    },
    {
        "content": "<p>Without knowing better ahead, a possible attempt <code>\"Monoid\", \"One\", \"Char\"</code> doesn't give much as it seems that one can't search for partial string in types.</p>",
        "id": 395728516,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696867172
    },
    {
        "content": "<p><code>\"Char\", _ = 0</code> gives better result.</p>",
        "id": 395729046,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696867362
    },
    {
        "content": "<p>(Maybe the messages from “Ring, \"characteristic\" could be moved to the <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> Loogle queries thread?)<br>\nYes, abundance of type classes and types is of course a problem to a constant-driven search like loogle.</p>",
        "id": 395729178,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696867400
    },
    {
        "content": "<p>Ah sorry, yes, they should.</p>",
        "id": 395729627,
        "sender_full_name": "Utensil Song",
        "timestamp": 1696867480
    },
    {
        "content": "<p>My strategy would be to use string search to find the actual name of the constants. Not easy in this case, but among the hits  for <code>\"characteristic\"</code> are some lemmas whose modules names look promising, and which would tell me about <code>CharP</code>. And that docstring also mentions <code>CharZero</code>. But it’s not the nicest of experiences, I agree.</p>",
        "id": 395729812,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696867540
    },
    {
        "content": "<p>In retrospect, I was actually looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ringChar#doc\">docs#ringChar</a> defined for a unital but not-necessarily-associative semiring. Funny that doc-gen4 gives me a bunch of random stuff for <code>RingChar</code>, I was not aware of that doc-gen4 is case-sensitive.</p>",
        "id": 396022984,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697007621
    },
    {
        "content": "<p>It is case sensitive one way: Upper case only matches upper case, but lower case matches both upper and lower cases.</p>",
        "id": 396024373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697008190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  IntermediateField ?a _, IntermediateField ?b _</p>",
        "id": 396260672,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697106761
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/IntermediateField.html#mem_subalgebraEquivIntermediateField\">mem_subalgebraEquivIntermediateField</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/IntermediateField.html#mem_subalgebraEquivIntermediateField_symm\">mem_subalgebraEquivIntermediateField_symm</a>, and <a href=\"https://loogle.lean-fro.org/?q=IntermediateField%20%3Fa%20_%2C%20IntermediateField%20%3Fb%20_\">335 more</a></p>",
        "id": 396260679,
        "sender_full_name": "loogle",
        "timestamp": 1697106763
    },
    {
        "content": "<p>Is there any way I can tell loogle that I want <code>?a \\ne ?b</code> (statement-wise, not in a \"necessary\" way)?</p>",
        "id": 396260727,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697106784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  IntermediateField ?a _, IntermediateField ?b _, Algebra ?a ?b</p>",
        "id": 396260813,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697106829
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/IntermediateField.html#mem_subalgebraEquivIntermediateField\">mem_subalgebraEquivIntermediateField</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/IntermediateField.html#mem_subalgebraEquivIntermediateField_symm\">mem_subalgebraEquivIntermediateField_symm</a>, and <a href=\"https://loogle.lean-fro.org/?q=IntermediateField%20%3Fa%20_%2C%20IntermediateField%20%3Fb%20_%2C%20Algebra%20%3Fa%20%3Fb\">333 more</a></p>",
        "id": 396260815,
        "sender_full_name": "loogle",
        "timestamp": 1697106830
    },
    {
        "content": "<p>This doesn't seem to work as I'd expect</p>",
        "id": 396260830,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697106838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Algebra R S, Algebra S T, Algebra R T</p>",
        "id": 396331531,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1697130647
    },
    {
        "content": "<p>Failure! Third party responded with 404</p>",
        "id": 396331533,
        "sender_full_name": "loogle",
        "timestamp": 1697130649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> lgebra R S -&gt; Algebra S T -&gt; Algebra R T</p>",
        "id": 396331668,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1697130712
    },
    {
        "content": "<p>Failure! Third party responded with 404</p>",
        "id": 396331672,
        "sender_full_name": "loogle",
        "timestamp": 1697130713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"are you back\"</p>",
        "id": 396332200,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697130895
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 396332203,
        "sender_full_name": "loogle",
        "timestamp": 1697130896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> ?a = -?a</p>",
        "id": 397960715,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1697995608
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 397960740,
        "sender_full_name": "loogle",
        "timestamp": 1697995630
    },
    {
        "content": "<p>On the website, I got an error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Neg</span> <span class=\"o\">(</span><span class=\"n\">Orientation</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">typeclass'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">20000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which looks a bit strange to me...<br>\n<span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 397960810,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1697995696
    },
    {
        "content": "<p>Yes, somehow Loogle is doing more typeclasses inferences than I'd expect for a reason I don't understand. Debugging help would be welcome!</p>\n<p>Prevision discussion: <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/loogls.20vs.2E.200/near/397121219\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/loogls.20vs.2E.200/near/397121219</a></p>",
        "id": 397961671,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697996768
    },
    {
        "content": "<p>In any case I assume you're looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=neg_eq_self#doc\">docs#neg_eq_self</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=neg_eq_self_iff#doc\">docs#neg_eq_self_iff</a></p>",
        "id": 397963127,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697998608
    },
    {
        "content": "<p>In fact, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ring.eq_self_iff_eq_zero_of_char_ne_two#doc\">docs#Ring.eq_self_iff_eq_zero_of_char_ne_two</a>, which is not so easy to find... (I once wrote this, so I knew it must be there <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 397965844,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698001789
    },
    {
        "content": "<p>Maybe one should add a \"neg\" before \"eq_self\"?</p>",
        "id": 397965913,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698001829
    },
    {
        "content": "<p>Definitely! That's the important part of the statement.</p>",
        "id": 397967888,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698003963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (∑' (n : ℕ), _ ^ n)</p>",
        "id": 400140254,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699020322
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 400140258,
        "sender_full_name": "loogle",
        "timestamp": 1699020323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"tsum\", \"geometric\"</p>",
        "id": 400140350,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699020353
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecificLimits/Basic.html#tsum_geometric_inv_two\">tsum_geometric_inv_two</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecificLimits/Basic.html#ENNReal.tsum_geometric\">ENNReal.tsum_geometric</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22tsum%22%2C%20%22geometric%22\">9 more</a></p>",
        "id": 400140353,
        "sender_full_name": "loogle",
        "timestamp": 1699020354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> tsum (fun ?n, ?x ^?n)</p>",
        "id": 400140784,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699020473
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:12: expected '↦', '=&gt;'</p>",
        "id": 400140787,
        "sender_full_name": "loogle",
        "timestamp": 1699020474
    },
    {
        "content": "<p><strong>@loogle</strong> tsum (fun ?n, =&gt; ?x ^?n)</p>",
        "id": 400140948,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699020502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> tsum (fun ?n, =&gt; ?x ^?n)</p>",
        "id": 400140987,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699020516
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:12: expected '↦', '=&gt;'</p>",
        "id": 400140990,
        "sender_full_name": "loogle",
        "timestamp": 1699020516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> tsum (fun ?n =&gt; ?x ^?n)</p>",
        "id": 400141027,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699020528
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/InfiniteSum/Basic.html#Summable.hasSum\">Summable.hasSum</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/InfiniteSum/Basic.html#tsum_empty\">tsum_empty</a>, and <a href=\"https://loogle.lean-lang.org/?q=tsum%20%28fun%20%3Fn%20%3D%3E%20%3Fx%20%5E%3Fn%29\">477 more</a></p>",
        "id": 400141034,
        "sender_full_name": "loogle",
        "timestamp": 1699020531
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_geometric_of_norm_lt_one#doc\">docs#tsum_geometric_of_norm_lt_one</a> ?</p>",
        "id": 400141176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699020570
    },
    {
        "content": "<p>I had found it, but I wanted to see if loogle also finds it...</p>",
        "id": 400141556,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699020681
    },
    {
        "content": "<p>You mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_geometric_of_norm_lt_1#doc\">docs#tsum_geometric_of_norm_lt_1</a> ?</p>",
        "id": 400149849,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699023444
    },
    {
        "content": "<p>Yeas, this is what I had found. (Another naming inconsistency...)</p>",
        "id": 400150094,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699023518
    },
    {
        "content": "<p>4 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.02klzzwxh.3A0000.03.20vs.2E.20HPow\">#Is there code for X? &gt; <code>loogle</code> vs. HPow</a> by <span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span>.</p>",
        "id": 400156290,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699025412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |-?a &lt; ?a.succ, \"Nat\"</p>",
        "id": 401131700,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699527041
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Nat.succ_pos\">Nat.succ_pos</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Nat.zero_lt_succ\">Nat.zero_lt_succ</a>, and <a href=\"https://loogle.lean-lang.org/?q=%7C-%3Fa%20%3C%20%3Fa.succ%2C%20%22Nat%22\">260 more</a></p>",
        "id": 401131708,
        "sender_full_name": "loogle",
        "timestamp": 1699527043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60loogle.60.20queries/near/401131700\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"644391\">loogle</span> |-?a &lt; ?a.succ, \"Nat\"</p>\n</blockquote>\n<p>You can make such queries in vscode now.</p>",
        "id": 401133161,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699527545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644391\">loogle</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60loogle.60.20queries/near/401131708\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Nat.succ_pos\">Nat.succ_pos</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Nat.zero_lt_succ\">Nat.zero_lt_succ</a>, and <a href=\"https://loogle.lean-lang.org/?q=%7C-%3Fa%20%3C%20%3Fa.succ%2C%20%22Nat%22\">260 more</a></p>\n</blockquote>\n<p>These lemmas match because the <code>?a</code> can be instantiated, e.g. to <code>zero</code>. If you want to only get lemmas were these are free variables, this works:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  |-(a : Nat) → a &lt; a.succ</p>",
        "id": 401139879,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699530234
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Nat/Basic.html#Nat.lt_succ_self\">Nat.lt_succ_self</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Nat/Basic.html#Nat.lt.base\">Nat.lt.base</a></p>",
        "id": 401139880,
        "sender_full_name": "loogle",
        "timestamp": 1699530235
    },
    {
        "content": "<p>Why can't I put an emoji as a reaction to the <em>previous</em> message?</p>",
        "id": 401142082,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699531157
    },
    {
        "content": "<p>Seems to be related to having a <em>thread</em> in focus in contrast to a <em>stream</em>...</p>",
        "id": 401142320,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699531235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"tsum\", \"injective\"</p>",
        "id": 401499424,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699698010
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/DirectSum/Basic.html#DirectSum.of_injective\">DirectSum.of_injective</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/DirectSum/Basic.html#DirectSum.mk_injective\">DirectSum.mk_injective</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22tsum%22%2C%20%22injective%22\">2 more</a></p>",
        "id": 401499425,
        "sender_full_name": "loogle",
        "timestamp": 1699698011
    },
    {
        "content": "<p>The \"two more\" are two copies of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.tsum_comp_le_tsum_of_injective#doc\">docs#ENNReal.tsum_comp_le_tsum_of_injective</a> . Is this a bug?</p>",
        "id": 401499455,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699698054
    },
    {
        "content": "<p>Likely, thanks for reporting!<br>\n<a href=\"https://github.com/nomeata/loogle/issues/4\">https://github.com/nomeata/loogle/issues/4</a></p>",
        "id": 401499507,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699698110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  ?n &lt; ?m, ?m &lt;= ?n.succ</p>",
        "id": 401606656,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1699789219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  ?n &lt; ?m, ?m &lt;= ?n.succ</p>",
        "id": 401606707,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1699789291
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Nat.le_of_lt_succ\">Nat.le_of_lt_succ</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Nat.eq_or_lt_of_le\">Nat.eq_or_lt_of_le</a>, and <a href=\"https://loogle.lean-lang.org/?q=%3Fn%20%3C%20%3Fm%2C%20%3Fm%20%3C%3D%20%3Fn.succ\">2452 more</a></p>",
        "id": 401606710,
        "sender_full_name": "loogle",
        "timestamp": 1699789301
    },
    {
        "content": "<p>Meta-variables are scoped within each search filter. If you know which direction you want, you could ask for<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |-  ?n &lt; ?m → Nat.succ ?n &lt;= ?m</p>",
        "id": 401611572,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699793718
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Nat/Basic.html#Nat.succ_le_of_lt\">Nat.succ_le_of_lt</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Basic.html#LT.lt.nat_succ_le\">LT.lt.nat_succ_le</a></p>",
        "id": 401611573,
        "sender_full_name": "loogle",
        "timestamp": 1699793719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Thanks for clarifying! I was about to search for <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/bbN.20which.20.60le_lt.60.20or.20.60lt_le.60.20between.20adjacent.20bbNs/near/401608312\">these</a> lemmas. Then will the below query suffice?<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- ?n &lt; ?m → ?m &lt;= Nat.succ ?n → ?m = Nat.succ ?n</p>",
        "id": 401611775,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1699793937
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 401611776,
        "sender_full_name": "loogle",
        "timestamp": 1699793938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- ?n &lt;= ?m → ?m &lt; Nat.succ ?n → ?m = ?n</p>",
        "id": 401611880,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1699794021
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 401611882,
        "sender_full_name": "loogle",
        "timestamp": 1699794022
    },
    {
        "content": "<p>I guess they don't exist.</p>",
        "id": 401612160,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699794193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- (?n : Nat) ≤ _ → ?n =  _<br>\ngives <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le_antisymm#doc\">docs#Nat.le_antisymm</a>  from which you can derive it</p>",
        "id": 401612207,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699794232
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Nat.le_antisymm\">Nat.le_antisymm</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/Nat/Basic.html#Nat.eq_zero_of_le_zero\">Nat.eq_zero_of_le_zero</a>, and <a href=\"https://loogle.lean-lang.org/?q=%7C-%20%28%3Fn%20%3A%20Nat%29%20%E2%89%A4%20_%20%E2%86%92%20%3Fn%20%3D%20%20_\">9 more</a></p>",
        "id": 401612209,
        "sender_full_name": "loogle",
        "timestamp": 1699794233
    },
    {
        "content": "<p>I think the pattern <code>2 ^ _ + 2 ^ _</code> crashes loogle for everyone :/</p>",
        "id": 403409691,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700581244
    },
    {
        "content": "<p>ah okay. I think it just crashed the backend of loogle. That explains why I have been getting no results in the extension for queries that worked before.</p>",
        "id": 403414821,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700582570
    },
    {
        "content": "<p>Indeed. Locally I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but i seems on the (rather weak) server, the process gets killed (and restarted, but restarting takes a little while).</p>\n<p>It would be good to understand why this query takes so long. Maybe it is trying to <code>defEq</code> some large numbers and does lots of calculation. Or there are many possible instances around that could match.</p>",
        "id": 403415531,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700582740
    },
    {
        "content": "<p>Doing some debugging. The culprit seems to be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Submodule.pow_induction_on_right%27#doc\">docs#Submodule.pow_induction_on_right'</a></p>",
        "id": 403419751,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700584056
    },
    {
        "content": "<p>I think I found a fix. I was using <code>forallTelescopeReducing</code>, and that made it reduce stuff that we probably don't want to reduce. I’ve switched now to the simpler <code>forallTelescope</code>, it seems to fix this problem and still passes the test suite,  let’s see if it still works as well as we expect.<br>\nIt's still slowish, so it may timeout zulip, but it doesn’t crash anymore on the website (but doesn’t find anything):<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  2^_ + 2^_</p>",
        "id": 403423733,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700585388
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 403423826,
        "sender_full_name": "loogle",
        "timestamp": 1700585410
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 404482490,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701115889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  \"within\", \"tendsto\"</p>",
        "id": 404482633,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701115955
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Filter/Cofinite.html#Filter.Tendsto.exists_within_forall_ge\">Filter.Tendsto.exists_within_forall_ge</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Order/Filter/Cofinite.html#Filter.Tendsto.exists_within_forall_le\">Filter.Tendsto.exists_within_forall_le</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22within%22%2C%20%22tendsto%22\">85 more</a></p>",
        "id": 404482637,
        "sender_full_name": "loogle",
        "timestamp": 1701115957
    },
    {
        "content": "<p>Response above seems to have a bunch of duplicates?</p>",
        "id": 404482733,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701116016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 404490714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701119782
    },
    {
        "content": "<p>Probably <a href=\"https://github.com/nomeata/loogle/issues/4\">https://github.com/nomeata/loogle/issues/4</a>, which I yet have to debug. let me do that before it bugs more users.</p>\n<p>Found the bug, thanks for the nudge.</p>",
        "id": 404572654,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701160864
    },
    {
        "content": "<p>another global crash report (apologies!) <code>algebraMap _ _ (algebraMap _ _ _)</code> crashes it.</p>",
        "id": 404872752,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701266632
    },
    {
        "content": "<p>We need to add better error handling for loogle for these crashes somehow. Currently it is not easy to tell when loogle has crashed vs when it can't find something.</p>",
        "id": 404880968,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701268916
    },
    {
        "content": "<p>Is it not? If it can't find something it tells you about it (at least on web and I expect code - Zulip has a short timeout for bots.)</p>",
        "id": 404895199,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701272409
    },
    {
        "content": "<p>That search query just shuts the website down whilst the runner resets, I think</p>",
        "id": 404895440,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701272492
    },
    {
        "content": "<p>This is another “deterministic timeout” exception. So far I erred on the side of caution and killed the backend process if that happens, but that’s probably too harsh, and the backend runner can simply continue running. That should fix many crashes. Let me try that.</p>",
        "id": 404895986,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701272630
    },
    {
        "content": "<p>Ah, I even had code to that effect, but without <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=withCatchingRuntimeEx#doc\">docs#withCatchingRuntimeEx</a> it wouldn’t work. With the next deploys we should see less crashes.</p>",
        "id": 404897765,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701273158
    },
    {
        "content": "<p>Looks like mathlib isn’t free of pranks:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"prank\"</p>",
        "id": 405654291,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701603655
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Holor.html#Holor.CPRankMax1\">Holor.CPRankMax1</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Holor.html#Holor.cprank\">Holor.cprank</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22prank%22\">20 more</a></p>",
        "id": 405654295,
        "sender_full_name": "loogle",
        "timestamp": 1701603656
    },
    {
        "content": "<p>on the other hand:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"crank\"</p>",
        "id": 405663148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701607633
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 405663149,
        "sender_full_name": "loogle",
        "timestamp": 1701607633
    },
    {
        "content": "<p>Combi people need to get going with <a href=\"https://en.wikipedia.org/wiki/Crank_of_a_partition\">https://en.wikipedia.org/wiki/Crank_of_a_partition</a> (we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Partition#doc\">docs#Nat.Partition</a>)</p>",
        "id": 405663512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701607945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> \"rpow\", \"log\"</p>",
        "id": 405716817,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701651421
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Pow/Real.html#Real.abs_rpow_le_exp_log_mul\">Real.abs_rpow_le_exp_log_mul</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Pow/Real.html#Real.log_rpow\">Real.log_rpow</a>, and <a href=\"https://loogle.lean-lang.org/?q=%22rpow%22%2C%20%22log%22\">26 more</a></p>",
        "id": 405716821,
        "sender_full_name": "loogle",
        "timestamp": 1701651422
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 405716879,
        "sender_full_name": "Adomas Baliuka",
        "timestamp": 1701651448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  ?l →ₗ[?r] ?m →ₗ[?r] ?n, |- (?a ⊗?l) →ₗ[?a] (?a ⊗[?r] ?m) →ₗ[?a] (?a ⊗[?r] ?n)</p>",
        "id": 407755555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702482466
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">LinearMap</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.130894774</span> <span class=\"bp\">⊗</span> <span class=\"bp\">?</span><span class=\"n\">m.130978708</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.130894774</span> <span class=\"bp\">⊗</span> <span class=\"bp\">?</span><span class=\"n\">m.130978708</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">CategoryTheory.MonoidalCategory.tensorObj</span> <span class=\"bp\">?</span><span class=\"n\">m.130810777</span> <span class=\"bp\">?</span><span class=\"n\">m.130810779</span> <span class=\"bp\">≅</span>\n    <span class=\"n\">CategoryTheory.MonoidalCategory.tensorObj</span> <span class=\"bp\">?</span><span class=\"n\">m.130810778</span> <span class=\"bp\">?</span><span class=\"n\">m.130810780</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.130810775</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.130810463</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.130810463</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 407755572,
        "sender_full_name": "loogle",
        "timestamp": 1702482470
    },
    {
        "content": "<p>I'm after the construction which sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>→</mo><mi>M</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">L\\to M\\to N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-linear maps of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules) to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>L</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>M</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">(</mo><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A\\otimes_RL)\\to (A\\otimes_RM)\\to(A\\otimes_RN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> (base extension to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-modules if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra)</p>",
        "id": 407755849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702482553
    },
    {
        "content": "<p>I can do it by going via <code>BilinForm</code> and <code>BilinForm.baseChange</code> but wondered whether we had the direct construction in mathlib.</p>",
        "id": 407756062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702482612
    }
]