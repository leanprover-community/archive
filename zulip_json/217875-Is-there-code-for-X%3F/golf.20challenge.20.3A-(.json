[
    {
        "content": "<p>Assistance would be greatly appreciated. Even some hints on which part can be golfed would be nice.<br>\nwait sorry i am fixing the dependencies</p>",
        "id": 396784552,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697405760
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h''</span>\n  <span class=\"n\">cases'</span> <span class=\"o\">(</span><span class=\"n\">not_and_or.mp</span> <span class=\"n\">h''</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"n\">hab</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">refine</span> <span class=\"n\">h'</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hab</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h.symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">thm1</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exfalso</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_succ</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.le_add_left</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm3</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">thm2</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">thm2</span> <span class=\"o\">(</span><span class=\"n\">Nat.mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OurPrime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">OurPrime</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">OurPrime</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hc</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">k'</span><span class=\"o\">,</span> <span class=\"n\">hk'</span><span class=\"o\">⟩,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hc</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk'</span> <span class=\"o\">:=</span> <span class=\"n\">hk'.symm</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk1</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not_eq_zero_of_lt</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">mul_eq_zero_of_left</span> <span class=\"n\">ha</span> <span class=\"n\">k'</span> <span class=\"bp\">▸</span> <span class=\"n\">hk'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">hk2</span><span class=\"o\">,</span> <span class=\"n\">hk3</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">thm3</span> <span class=\"n\">hk'</span> <span class=\"bp\">$</span> <span class=\"n\">not_eq_zero_of_lt</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk4</span> <span class=\"o\">:</span> <span class=\"n\">k'</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hkc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hk</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">mul_eq_right₀</span> <span class=\"bp\">$</span> <span class=\"n\">not_eq_zero_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">$</span> <span class=\"n\">hkc</span> <span class=\"bp\">▸</span> <span class=\"n\">hk'</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k'</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hk'.symm</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hk2</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hk3</span> <span class=\"n\">hk4</span><span class=\"o\">⟩⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"n\">cases'</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">trivial</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"n\">cases'</span> <span class=\"n\">k'</span> <span class=\"k\">with</span> <span class=\"n\">k'</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">one_eq_succ_zero</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk'</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 396785059,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697406434
    },
    {
        "content": "<p>I learned about the right triangle (<code>\\t</code>) like 5 minutes ago, so I am not using it optimally.<br>\nAll the stupid <code>have hki</code> in the example is for <code>linarith</code> to work, but maybe there are simpler ways.<br>\nAny help will be appreciated!</p>",
        "id": 396785110,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697406488
    },
    {
        "content": "<p>Is the code above is missing the definition of <code>OurPrime</code>? Or do you mean just <code>Prime</code>?<br>\nEDIT: seems somehow I missed it!!</p>",
        "id": 396785451,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1697406944
    },
    {
        "content": "<p>Two hints for the first one:</p>\n<ul>\n<li>You can eliminate <code>c</code> using <code>subst</code></li>\n<li>Once you do so, <code>apply?</code>  will tell you the solution</li>\n</ul>",
        "id": 396785496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697406968
    },
    {
        "content": "<p>In fact the same thing applies to <code>thm2</code> and <code>thm3</code>; eliminate <code>c</code> immediately to make the problem simpler</p>",
        "id": 396785515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697407028
    },
    {
        "content": "<p>Okay, I will try, thanks! :D</p>",
        "id": 396785941,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697407561
    },
    {
        "content": "<p>My first two results:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">thm1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">c</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.mul_ne_zero_iff.mp</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">thm1</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_mul_of_pos_right</span> <span class=\"bp\">$</span> <span class=\"n\">zero_lt_of_ne_zero</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>For <code>thm3</code> it's just single line, so it's fine</p>",
        "id": 396786397,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697408047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> By coincidence, almost exactly the same theorem (as your final example) appears as an exercise in lecture notes of mine: see the last problem <a href=\"https://hrmacbeth.github.io/math2001/05_Logic.html#normal-form-for-negations\">on this page</a>.  There isn't a full solution there but there is an outline, and a <a href=\"https://hrmacbeth.github.io/math2001/04_Proofs_with_Structure_II.html#prime-test\">partial proof of an intermediate result</a>.</p>",
        "id": 397634013,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697781044
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 397674742,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697796432
    }
]