[
    {
        "content": "<p>This or something similar:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nsmul_sInf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_sInf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407285992,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1702315182
    },
    {
        "content": "<p>There are versions for <code>NNReal</code> and <code>ENNReal</code>, e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NNReal.iInf_mul#src\">src#NNReal.iInf_mul</a>. You might want to mimic that proof.</p>",
        "id": 407308526,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702323899
    },
    {
        "content": "<p>Half of half of a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Set.setOf_eq_empty_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Set.ext_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Set.range_of_isEmpty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsEmpty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.range</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Set.eq_empty_of_isEmpty</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">EReal</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_sInf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">EReal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">sInf</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sInf</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">isEmpty_or_nonempty</span> <span class=\"n\">α</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_top_of_pos</span> <span class=\"n\">xpos</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.image_univ</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_sInf</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sInf_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.image_univ</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">(</span><span class=\"n\">sInf_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span> <span class=\"n\">xpos.le</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407314360,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1702326243
    },
    {
        "content": "<p>Just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderIso.smulLeft#doc\">docs#OrderIso.smulLeft</a> + <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderIso.map_ciInf#doc\">docs#OrderIso.map_ciInf</a></p>",
        "id": 407314523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702326329
    }
]