[
    {
        "content": "<p>Another one before I go to bed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 404548742,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701148578
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Int.mod_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_sub_iff_add_eq</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">Int.ediv_add_emod'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ZMod.coe_int_cast</span><span class=\"o\">,</span> <span class=\"n\">Int.mod_eq</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 404551864,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1701150939
    },
    {
        "content": "<p>This statement looks evil given that you're using the very non-canonical coercion <code>ZMod n → ℤ</code>.</p>",
        "id": 404560455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701155268
    },
    {
        "content": "<p>Is <code>((r : ZMod n) : \\Z)</code> equal to <code>r % n</code> (at least in the application)? If so then this could be broken into two smaller steps.</p>",
        "id": 404566113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701158117
    },
    {
        "content": "<p>Thanks Timo!</p>",
        "id": 404632965,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701177142
    },
    {
        "content": "<p>Is there a non-evil spelling of this <code>ZMod n → ℤ</code> map?</p>",
        "id": 404633026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701177162
    },
    {
        "content": "<p><code>zmod.val</code>?</p>",
        "id": 404635919,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701178202
    },
    {
        "content": "<p>I think the claim is that the map itself is evil</p>",
        "id": 404666145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701187154
    },
    {
        "content": "<p>I don't see what is so evil about this map. Although I guess another version which is similar in spirit but avoids this coercion is <code>(r : ZMod n) = (r % n : ZMod n)</code>.</p>",
        "id": 404680388,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701191451
    },
    {
        "content": "<p>The map is evil because it doesn't preserve addition, multiplication, or 1. I would maintain that the map from <code>Fin n</code> to the naturals was not evil but that if you're using <code>ZMod n</code> then you're announcing that you care about the ring structure and so you shouldn't be using maps that don't.</p>",
        "id": 404687669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701194262
    },
    {
        "content": "<p>Well, sure, but just because a function is a morphism in that category doesn't mean it's evil. <code>ℝ</code> is a ring too, and <code>sin : ℝ → ℝ</code> doesn't preserve addition, multiplication or 1 either. The fact that a particular function isn't a morphism only means that the API surrounding it's use doesn't come for free and we need to write it separately.</p>",
        "id": 404689221,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701194771
    },
    {
        "content": "<p>The function <code>ZMod n → ℤ</code> seems fine (it's giving a minimal non-negative representative), but it doesn't seem right to have it be a coercion.</p>",
        "id": 404690515,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701195336
    },
    {
        "content": "<p>Right, like <code>sin</code> isn't a coercion</p>",
        "id": 404693079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701196406
    },
    {
        "content": "<p>Aha, evil <em>because it's a coercion</em>, which is what Yaël said, but different from Eric's claim that <em>the map itself is evil</em>. I can get on board with the coercion being evil, not least because it means there are coercions in both directions. I think that's arguably the most evil part of it.</p>",
        "id": 404699751,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701198544
    },
    {
        "content": "<p>Returning to this to mention: it's a shame we lost <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s work in Lean 3 allowing for coercions to possess morphism properties. It would be nice if there were a way to recover this in some form.</p>",
        "id": 404928606,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701283092
    },
    {
        "content": "<p>I understand that it's very different because we don't have an actual <code>coe</code> function anymore. I'm just dreaming / hoping that someone smarter than me comes up with a new idea.</p>",
        "id": 404928836,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701283201
    },
    {
        "content": "<p>it would be pretty easy for us to reintroduce a new <code>coe</code> function</p>",
        "id": 404935326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701285929
    },
    {
        "content": "<p>Though it would probably not be liked by Leo</p>",
        "id": 404935355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701285941
    },
    {
        "content": "<p>(we effectively already did this for <code>coeFn</code> and <code>coeSort</code>)</p>",
        "id": 404935377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701285957
    },
    {
        "content": "<p>I'm not arguing for that in general. I think it was necessary for Fun like, but the auto-unfold in Lean 4 is very nice.</p>",
        "id": 405108948,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701348066
    },
    {
        "content": "<p>I think probably what we should actually visit is arbitrary functions possessing morphism properties</p>",
        "id": 405109599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701348283
    }
]