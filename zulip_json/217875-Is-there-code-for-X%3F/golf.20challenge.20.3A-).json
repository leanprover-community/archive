[
    {
        "content": "<p>I just wrote a truly terrible proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_binom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">powersetLen</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set_binom'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">powersetLen</span> <span class=\"n\">k</span> <span class=\"n\">univ</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Finset.mapFinVal</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↪</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Finset.mapEmbedding</span> <span class=\"n\">Fin.valEmbedding</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset.map</span> <span class=\"o\">(</span><span class=\"n\">Finset.mapFinVal</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set_binom'</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set_binom</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>to which Terry Tao <a href=\"https://mathstodon.xyz/@tao/111233939856249100\">said</a> \"Wow, that is indeed not such an easy thing to justify with the present state of tools.\" Who wants to do it nicely? :-)</p>",
        "id": 396685267,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697326482
    },
    {
        "content": "<p>I'm not at my machine to check, but doesn't this follow almost immediately from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.powersetLen_map#doc\">docs#Finset.powersetLen_map</a> ?</p>",
        "id": 396688785,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697329625
    },
    {
        "content": "<p>Indeed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finset.map</span> <span class=\"o\">(</span><span class=\"n\">Finset.mapFinVal</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set_binom'</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set_binom</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">set_binom</span><span class=\"o\">,</span> <span class=\"n\">set_binom'</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Finset.powersetLen_map</span><span class=\"o\">,</span> <span class=\"n\">Fin.map_valEmbedding_univ</span><span class=\"o\">,</span> <span class=\"n\">Nat.Iio_eq_range</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 396689569,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1697330064
    },
    {
        "content": "<p>beat me to it!</p>",
        "id": 396696308,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697333791
    }
]