[
    {
        "content": "<p>I have <code>E/F</code> and <code>K/F</code> such that <code>E</code> and <code>K</code> are isomorphic as <code>F</code>-algebras. <code>L</code> is an intermediate field of <code>E/F</code> which maps to <code>L'</code> of <code>K/F</code>. It's easy to prove that <code>[L:F]=[L':F]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"n\">i.toAlgHom</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">L.intermediateFieldMap</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearEquiv.lift_rank_eq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">L</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"n\">i.toAlgHom</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I failed to prove <code>[E:L]=[K:L']</code>. My idea is to make <code>L'</code> and <code>K</code> <code>L</code>-algebras, such that <code>K/L'/L</code> is a scalar tower, and such that <code>[L':L]=1</code>. Then I obtain <code>[K:L']=[K:L]</code>. Finally I should prove that <code>E</code> and <code>K</code> are also isomorphic as <code>L</code>-algebras, so <code>[E:L]=[K:L]</code>. But this plan quickly failed :-(. Any suggestions?</p>",
        "id": 408072594,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702600338
    },
    {
        "content": "<p>Application: <code>L</code> and <code>L'</code> are separable closures of <code>E/F</code> and <code>K/F</code>, respectively, so this means that isomorphic field extensions have same (infintie) inseparable degree.</p>",
        "id": 408072859,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702600443
    },
    {
        "content": "<p>Another method is to use the isomorphism <code>i</code> to map linear independent subsets explicitly. But I'm not familiar with the API.</p>",
        "id": 408073423,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702600640
    },
    {
        "content": "<p>Can't you just use the tower law <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>L</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">[</mo><msup><mi>L</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><msup><mi>L</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[E:L]=[E:F]/[L:F]=[K:F]/[L&#x27;:F]=[K:L&#x27;]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 408076248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702601770
    },
    {
        "content": "<p>Something like this would be helpful (modified from flt regular)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Module.rank_eq_one_of_linearEquiv</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module.rank</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FiniteDimensional.rank_eq_one_iff_finrank_eq_one.mpr</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">finrank_eq_one_iff'.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">e</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e.map_smul</span><span class=\"o\">]⟩⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Module.rank_of_equiv_equiv</span> <span class=\"o\">{</span><span class=\"n\">A₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₂</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">A₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">B₁</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">A₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">B₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">A₁</span> <span class=\"bp\">≃+*</span> <span class=\"n\">A₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">B₁</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B₂</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">RingHom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">e₁</span> <span class=\"bp\">=</span> <span class=\"n\">RingHom.comp</span> <span class=\"bp\">↑</span><span class=\"n\">e₂</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">e₁.toRingHom.toAlgebra</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">algebraMap</span> <span class=\"n\">A₁</span> <span class=\"n\">B₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">e₁.symm.toRingHom</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">A₁</span> <span class=\"n\">A₂</span> <span class=\"n\">B₁</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.of_algebraMap_eq</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">RingHom.algebraMap_toAlgebra</span><span class=\"o\">])</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">B₁</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">A₂</span><span class=\"o\">]</span> <span class=\"n\">B₂</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">e₂</span> <span class=\"k\">with</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">RingHom.algebraMap_toAlgebra</span><span class=\"o\">]</span>\n                                                  <span class=\"n\">using</span> <span class=\"n\">FunLike.congr_fun</span> <span class=\"n\">he.symm</span> <span class=\"o\">(</span><span class=\"n\">e₁.symm</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Module.rank</span> <span class=\"n\">A₁</span> <span class=\"n\">A₂</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rank_eq_one_of_linearEquiv</span>\n    <span class=\"o\">{</span> <span class=\"n\">e₁</span> <span class=\"k\">with</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">IsScalarTower.toAlgHom</span> <span class=\"n\">A₁</span> <span class=\"n\">A₁</span> <span class=\"n\">A₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap.map_smul</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lift_rank_mul_lift_rank</span> <span class=\"n\">A₁</span> <span class=\"n\">A₂</span> <span class=\"n\">B₁</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">RingEquiv.toRingHom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e.toLinearEquiv.lift_rank_eq</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 408081105,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702604503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60/near/408076248\">said</a>:</p>\n<blockquote>\n<p>Can't you just use the tower law <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>L</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">[</mo><msup><mi>L</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><msup><mi>L</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[E:L]=[E:F]/[L:F]=[K:F]/[L&#x27;:F]=[K:L&#x27;]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mord\">/</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>?</p>\n</blockquote>\n<p>No, it only works for <code>[E:F]</code> finite case. Otherwise it's possible that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi><mo>⋅</mo><mn>1</mn><mo>=</mo><mi mathvariant=\"normal\">∞</mi><mo>⋅</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\"> \\infty\\cdot 1=\\infty\\cdot 2 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo mathvariant=\"normal\">≠</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\"> 1 \\neq 2 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>.</p>",
        "id": 408142427,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702630768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60/near/408081105\">said</a>:</p>\n<blockquote>\n<p>Something like this would be helpful (modified from flt regular)</p>\n</blockquote>\n<p>Thanks! I think this is what exactly I'm looking for :)</p>",
        "id": 408142724,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702630850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> I slightly modified your code to allow upper algebras being non-commutative, and removed the first lemma (since it comes from <code>rank_self</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">u'</span> <span class=\"n\">v'</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F'</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">iF</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≃+*</span> <span class=\"n\">F'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iE</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃+*</span> <span class=\"n\">E'</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F'</span> <span class=\"n\">E'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">iF.toRingHom</span> <span class=\"bp\">=</span> <span class=\"n\">iE.toRingHom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F'</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">iF.toRingHom.toAlgebra</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">iF.symm.toRingHom</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra'</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">RingEquiv.toRingHom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">RingHom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">RingHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Algebra.commutes</span> <span class=\"n\">_</span> <span class=\"n\">x</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">F'</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.of_algebraMap_eq</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">iF.symm.toRingHom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iF.toRingHom</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">RingEquiv.toRingHom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">RingHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">RingHom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span>\n      <span class=\"n\">RingEquiv.symm_apply_apply</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F'</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">iE</span> <span class=\"k\">with</span>\n    <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">RingEquiv.toRingHom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">RingHom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">RingHom.coe_coe</span><span class=\"o\">,</span>\n        <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">RingEquiv.apply_symm_apply</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">FunLike.congr_fun</span> <span class=\"n\">h.symm</span> <span class=\"o\">(</span><span class=\"n\">iF.symm</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">iF'</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">F'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">iF</span> <span class=\"k\">with</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">IsScalarTower.toAlgHom</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"n\">F'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearMap.map_smul</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">iF'.lift_rank_eq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rank_self</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Cardinal.lift_one.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u'</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lift_rank_mul_lift_rank</span> <span class=\"n\">F</span> <span class=\"n\">F'</span> <span class=\"n\">E</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e.toLinearEquiv.lift_rank_eq</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"n\">i.toAlgHom</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">L.intermediateFieldMap</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearEquiv.lift_rank_eq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">L</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"n\">i.toAlgHom</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">L.intermediateFieldMap</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toRingEquiv</span> <span class=\"n\">i.toRingEquiv</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 408220115,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702658382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60/near/408220115\">said</a>:</p>\n<blockquote>\n<p>Since it comes from <code>rank_self</code></p>\n</blockquote>\n<p>But it is not immediate as it goes through <code>Cardinal.lift</code> shenanigans, and I think it warrants its own lemma?</p>",
        "id": 408221130,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702658788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60/near/408221130\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60/near/408220115\">said</a>:</p>\n<blockquote>\n<p>Since it comes from <code>rank_self</code></p>\n</blockquote>\n<p>But it is not immediate as it goes through <code>Cardinal.lift</code> shenanigans, and I think it warrants its own lemma?</p>\n</blockquote>\n<p>Maybe you're right.</p>",
        "id": 408221240,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702658833
    },
    {
        "content": "<p>By the way, <code>find_home</code> suggests me to put <code>test</code> to <code>[Mathlib.FieldTheory.IntermediateField]</code>. Is it joking?</p>",
        "id": 408221312,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702658875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> has marked this topic as resolved.</p>",
        "id": 408221387,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702658896
    },
    {
        "content": "<p>And the proper generalization should be <code>Semiring</code> And <code>Module</code> and <code>LinearEquiv</code>s with suitable commuting conditions.</p>",
        "id": 408221425,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702658917
    },
    {
        "content": "<p>Though I'm not sure if it's easy to do.</p>",
        "id": 408221489,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702658946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60/near/408221425\">said</a>:</p>\n<blockquote>\n<p>And the proper generalization should be <code>Semiring</code> And <code>Module</code> and <code>LinearEquiv</code>s with suitable commuting conditions.</p>\n</blockquote>\n<p>I think maybe it's similar to the condition of <code>lift_rank_mul_lift_rank</code>, so at least <code>Semiring</code> is not going to work.</p>\n<p>[EDIT] Maybe not, since the definition of <code>Module.rank</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">rank</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">module</span><span class=\"o\">,</span> <span class=\"n\">defined</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">term</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">Cardinal.</span>\n\n<span class=\"n\">We</span> <span class=\"n\">define</span> <span class=\"n\">this</span> <span class=\"n\">as</span> <span class=\"n\">the</span> <span class=\"n\">supremum</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">cardinalities</span> <span class=\"n\">of</span> <span class=\"n\">linearly</span> <span class=\"n\">independent</span> <span class=\"n\">subsets.</span>\n</code></pre></div>\n<p>Maybe to prove the most generalized result, we need to map the linearly independent subsets manually.</p>",
        "id": 408222134,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702659213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60/near/408221425\">said</a>:</p>\n<blockquote>\n<p>And the proper generalization should be <code>Semiring</code> And <code>Module</code> and <code>LinearEquiv</code>s with suitable commuting conditions.</p>\n</blockquote>\n<p>I managed to make the following results:</p>",
        "id": 408997307,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703012156
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_lift_le_rank_of_linearIndependent''''</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hinj</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Cardinal.lift_mk_le'.mpr</span> <span class=\"o\">⟨(</span><span class=\"n\">Equiv.ofInjective</span> <span class=\"n\">v</span> <span class=\"n\">hinj</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.lift_le</span><span class=\"o\">,</span> <span class=\"n\">Module.rank_def</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_trans</span>\n    <span class=\"n\">swap</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_ciSup</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.bddAbove_range.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">Set.range</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv.coe_range</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rank_subsingleton''''</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module.rank</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Module.subsingleton</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">M</span> <span class=\"bp\">//</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨⟨</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">linearIndependent_empty</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Module.rank_def</span><span class=\"o\">,</span> <span class=\"n\">ciSup_eq_of_forall_le_of_forall_lt_exists_gt</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_le_one_iff_set_subsingleton</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Set.subsingleton_of_subsingleton</span>\n  <span class=\"n\">intro</span> <span class=\"n\">w</span> <span class=\"n\">hw</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨⟨{</span><span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearIndependent_iff'</span><span class=\"o\">]</span>\n    <span class=\"n\">intros</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hw.trans_eq</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk_singleton</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rank_zero_of_subsingleton''''</span>\n    <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Module.rank</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">bot_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">le_bot_iff</span><span class=\"o\">,</span> <span class=\"n\">Module.rank_def</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ciSup_le'</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">li</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_bot_iff</span><span class=\"o\">,</span> <span class=\"n\">bot_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.mk_emptyCollection_iff</span><span class=\"o\">,</span> <span class=\"n\">Subtype.coe_mk</span><span class=\"o\">]</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Set.nonempty_iff_ne_empty.2</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">LinearIndependent.ne_zero</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">li</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R'</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZeroHom</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Function.Surjective</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">j</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test0</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LinearIndependent</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearIndependent</span> <span class=\"n\">R'</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">hi'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hi.hasRightInverse</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linearIndependent_iff'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">intro</span> <span class=\"n\">S</span> <span class=\"n\">r'</span> <span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hi'</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_sum</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hi'</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">R'</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">R'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">R</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rank_subsingleton''''</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_one</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">]</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">Module.subsingleton</span> <span class=\"n\">R'</span> <span class=\"n\">M'</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hj.subsingleton</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rank_subsingleton''''</span><span class=\"o\">,</span> <span class=\"n\">rank_zero_of_subsingleton''''</span><span class=\"o\">,</span>\n      <span class=\"n\">Cardinal.lift_zero</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_one</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Module.rank_def</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Cardinal.lift_iSup_le</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.bddAbove_range.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">S</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">S</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cardinal_lift_le_rank_of_linearIndependent''''</span>\n    <span class=\"o\">(</span><span class=\"n\">hj.comp</span> <span class=\"n\">Subtype.val_injective</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">test0</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hi</span> <span class=\"n\">hj</span> <span class=\"n\">hc</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R'</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZeroHom</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃+</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">j</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1b</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">R'</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">test1</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">hi.surjective</span> <span class=\"n\">j.injective</span> <span class=\"n\">hc</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i'</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Function.bijective_iff_has_inverse.1</span> <span class=\"n\">hi</span>\n  <span class=\"k\">let</span> <span class=\"n\">i''</span> <span class=\"o\">:</span> <span class=\"n\">ZeroHom</span> <span class=\"n\">R'</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">i'</span><span class=\"o\">,</span>\n    <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply_fun</span> <span class=\"n\">i</span> <span class=\"n\">using</span> <span class=\"n\">hi.injective</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">refine</span> <span class=\"n\">test1</span> <span class=\"n\">i''</span> <span class=\"n\">j.symm</span> <span class=\"n\">h1.surjective</span> <span class=\"n\">j.symm.injective</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">j</span> <span class=\"n\">using</span> <span class=\"n\">j.injective</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">AddEquiv.apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">F'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F'</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≃+*</span> <span class=\"n\">F'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃+*</span> <span class=\"n\">E'</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F'</span> <span class=\"n\">E'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">i.toRingHom</span> <span class=\"bp\">=</span> <span class=\"n\">j.toRingHom.comp</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F'</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">test1b</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">i.bijective</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">s</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">RingEquiv.toRingHom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">RingHom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">RingHom.coe_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">RingEquiv.coe_toAddEquiv</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">ZeroHom.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"n\">i.toAlgHom</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">L.intermediateFieldMap</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toLinearEquiv.lift_rank_eq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"n\">L</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Module.rank</span> <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"n\">i.toAlgHom</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">L.intermediateFieldMap</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toRingEquiv</span> <span class=\"n\">i.toRingEquiv</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 408997363,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703012166
    },
    {
        "content": "<p>Basically, it's <code>test1</code> which states that if <code>M/R</code> and <code>M'/R'</code> are modules over semiring, such that <code>R-&gt;R'</code> is a surjective map maps zero to zero, <code>M-&gt;M'</code> is an injective monoid map, then <code>rank(M/R) &lt;= rank (M'/R')</code>.</p>\n<p>The <code>test1b</code> is by applying <code>test1</code> in both directions, to obtain <code>rank(M/R) = rank (M'/R')</code>.</p>",
        "id": 408997800,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703012321
    },
    {
        "content": "<p>I generalized the <code>rank_subsingleton</code> and <code>rank_zero_of_subsingleton</code> to semirings. It looks like that a lot of results in <code>Mathlib.LinearAlgebra.Dimension</code> can be generalized to semirings. The <code>cardinal_lift_le_rank_of_linearIndependent</code> can also be generalized to semirings, but the injectivity of <code>v</code> must be provided manually.</p>",
        "id": 408998325,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703012491
    },
    {
        "content": "<p>I have no idea of the proper naming of these <code>test</code>s. Any suggestions?</p>",
        "id": 408998750,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703012629
    },
    {
        "content": "<p>If we really want <code>rank</code> to work with Semirings we should replace LinearIndependent by an injection from Finsupp. As it stands, Nat as a Nat-module has rank aleph0 ({1,2,3,...} is linearly independent!).</p>",
        "id": 408999160,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703012766
    },
    {
        "content": "<p>I think that other spelling is effectively <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum.IsInternal#doc\">docs#DirectSum.IsInternal</a></p>",
        "id": 409000742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1703013388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20.60E.2FL.2FF.60.20and.20.60K.2FL'.2FF.60.20isomorphic.20.3D.3E.20.60.5BE.3AL.5D.3D.5BK.3AL'.5D.60/near/408999160\">said</a>:</p>\n<blockquote>\n<p>If we really want <code>rank</code> to work with Semirings we should replace LinearIndependent by an injection from Finsupp. As it stands, Nat as a Nat-module has rank aleph0 ({1,2,3,...} is linearly independent!).</p>\n</blockquote>\n<p>I think you're right. Perhaps let's stick these results to rings.</p>\n<p>By the way, I don't know how large parts of mathlib will break when the definition of  LinearIndependent is changed, perhaps some parts of mathlib make use of the buggy definition of LinearIndependent for semirings?</p>",
        "id": 409007486,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703016123
    },
    {
        "content": "<p>Given that most people don't really care about semirings when doing this sort of mathematics, I wouldn't worry too much about them. In the unlikely event that semiring theory becomes a thing, we can let the semiring experts refactor the definitions how they want them. I think it's far more important to continue to develop ring theory</p>",
        "id": 409017843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1703020633
    },
    {
        "content": "<p>I created PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/9156\">#9156</a> for these results.</p>",
        "id": 409054520,
        "sender_full_name": "Jz Pan",
        "timestamp": 1703036468
    },
    {
        "content": "<blockquote>\n<p>I don't know how large parts of mathlib will break when the definition of LinearIndependent is changed, perhaps some parts of mathlib make use of the buggy definition of LinearIndependent for semirings?</p>\n</blockquote>\n<p>I don't think any part of mathlib depends on the buggy definition (but if someone adds the Nat-module Nat example to the counterexample archive then it will be different). However proofs that make use of the current defeq will break, but it shouldn't be hard to fix by using the lemma that says the current def and the proposed definition are equivalent for rings, if you just want mathlib to build and not trying to generalize to Semirings at the same time. You also have the option to change the definition of <code>rank</code> only if you just want <code>rank</code> to work for Semirings. An advantage of the injectivity definition is consistency with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis#doc\">docs#Basis</a>, which already works well for Semirings.</p>",
        "id": 409058184,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703037434
    }
]