[
    {
        "content": "<p>Is there a code for Euler's Theorem?</p>",
        "id": 329653267,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677140690
    },
    {
        "content": "<p>In Lean4</p>",
        "id": 329653489,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677140768
    },
    {
        "content": "<p>Euler proved a lot of theorems, which do you have in mind?</p>",
        "id": 329653713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677140862
    },
    {
        "content": "<p>The one about congruence between a^p and a</p>",
        "id": 329654889,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677141336
    },
    {
        "content": "<p>That's due to Fermat and yes it will be there. On mobile right now but try searching the API docs for Fermat or Fermat-Euler</p>",
        "id": 329655153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677141449
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.pow_card\">docs#zmod.pow_card</a>, although I can't find a version for <code>int</code> other than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.modeq.pow_card_sub_one_eq_one\">docs#int.modeq.pow_card_sub_one_eq_one</a></p>",
        "id": 329656803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677141958
    },
    {
        "content": "<p>I'm guessing these are not yet ported to mathlib 4.</p>",
        "id": 329657566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677142215
    },
    {
        "content": "<p>But it's also probably not very hard to prove by hand from what is in mathlib 4 already</p>",
        "id": 329657690,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677142252
    },
    {
        "content": "<p>Indeed, quite a way to go before that's ported: <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/field_theory/finite/basic\">port-status#field_theory/finite/basic</a></p>",
        "id": 329668521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677145101
    },
    {
        "content": "<p>Is there a possibility of considering the numbers as group elements in Z/mod pZ and then using <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/OrderOfElement.html#pow_card_eq_one'\">docs#pow_card_eq_one</a> ?</p>",
        "id": 329719000,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677159016
    },
    {
        "content": "<p>Sure, this is also possible. It really depends on the precise version you prefer.</p>",
        "id": 329727456,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1677161256
    },
    {
        "content": "<p>But how do we convert them into group elements? Or is it in the definition of modZ or modN?</p>",
        "id": 329728960,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677161611
    },
    {
        "content": "<p>This is what I mean by \"it depends on which version you prefer\". If your statement is about integers than it's maybe better to stick to integers. I suggest you to write in Lean the exact statement you want, and we can suggest how to prove it.</p>",
        "id": 329729402,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1677161705
    },
    {
        "content": "<p>I want to prove Fermat's little theorem for natural numbers in Lean4.</p>",
        "id": 329759107,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677168589
    },
    {
        "content": "<p>Riccardo is suggesting that your write the Lean 4 statement yourself. Then we can help with the proof.</p>",
        "id": 329759715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677168746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"575824\">Michael Wahlberg</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euler's.20Theorem/near/329719000\">said</a>:</p>\n<blockquote>\n<p>Is there a possibility of considering the numbers as group elements in Z/mod pZ and then using <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/OrderOfElement.html#pow_card_eq_one'\">docs#pow_card_eq_one</a> ?</p>\n</blockquote>\n<p>did you write this docs link yourself? you should just need to write <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pow_card_eq_one#doc\">docs4#pow_card_eq_one</a></p>",
        "id": 329764157,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677169739
    },
    {
        "content": "<p>Here, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fermat_little_theorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"n\">Nat.coprime</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>  <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 329767509,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677170568
    },
    {
        "content": "<p>I think you're missing a hypothesis on <code>a</code></p>",
        "id": 329802468,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677180524
    },
    {
        "content": "<p>Is there a theorem that asserts that (Z/pZ)^* is a group</p>",
        "id": 336383545,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677207098
    },
    {
        "content": "<p>Or can I prove something is a group here? How does someone do that?</p>",
        "id": 336383858,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677207154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euler's.20Theorem/near/329802468\">said</a>:</p>\n<blockquote>\n<p>I think you're missing a hypothesis on <code>a</code></p>\n</blockquote>\n<p>Is it fine now?</p>",
        "id": 336388874,
        "sender_full_name": "Michael Wahlberg",
        "timestamp": 1677208367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"575824\">@Michael Wahlberg</span> all of this is completely trivial in Lean 3. And if you wait two or three weeks, it is probably also trivial in Lean 4.</p>",
        "id": 336404230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1677219844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"575824\">@Michael Wahlberg</span> the units of any ring (and more generally any monoid) is a group in lean</p>",
        "id": 336409607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677222867
    }
]