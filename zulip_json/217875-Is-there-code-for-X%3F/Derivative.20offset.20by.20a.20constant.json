[
    {
        "content": "<p>I have <code>ruesDiffIteratedDeriv</code>, but need it offset by a constant.<br>\nMWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n<span class=\"c1\">-- import RootOfUnityExponentialSum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">asymptotics</span> <span class=\"n\">real</span> <span class=\"n\">normed_space</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-----------</span>\n<span class=\"c1\">-- This section is properly defined without any sorry elsewhere.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ruesDiff</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffIteratedDeriv</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">iterated_deriv</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-----------</span>\n<span class=\"c1\">-- The following needs help.</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffIteratedDerivOffset</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₁</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">iterated_deriv</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">km</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iterated_deriv_zero</span><span class=\"o\">,</span> <span class=\"n\">zmod.nat_cast_self</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">iterated_deriv_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">clear</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_succ</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The following is the state just before the sorry:<br>\n<a href=\"/user_uploads/3121/22JbXcs5IyJP4YabxRC6Tfq9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/22JbXcs5IyJP4YabxRC6Tfq9/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/22JbXcs5IyJP4YabxRC6Tfq9/image.png\"></a></div>",
        "id": 366674741,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686884341
    },
    {
        "content": "<p>It seems that we don't have this lemma (please open a <code>github</code> issue or better a PR).</p>",
        "id": 366678090,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686885980
    },
    {
        "content": "<p>I mean, a lemma about iterated (Fréchet) derivatives of <code>fun x =&gt; f (x + a)</code>.</p>",
        "id": 366678134,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686886015
    },
    {
        "content": "<p>However, if you have all the necessary <code>differentiable</code>/<code>cont_diff</code> assumptions, then you can use <code>deriv_comp</code> or <code>has_deriv_at.comp _ (has_deriv_at_id.add_const _)</code> (not tested, so the syntax may be slightly incorrect).</p>",
        "id": 366678317,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686886120
    },
    {
        "content": "<p>Okay, I work more on specific examples, and not their generalizations, and thus need help generalizing this lemma to something that is a generalization of both <code>\\R</code> and <code>\\C</code>. Thanks for all the help.</p>",
        "id": 366686022,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686890350
    },
    {
        "content": "<p>Should the Github issue be added to mathlib3 or mathlib4? It seems like maybe it would save time and energy overall to add it to mathlib4, and many mathlib3 files are frozen by the port. Do we need to wait until the port is done before contributing novel code to mathlib4?</p>",
        "id": 366686545,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686890651
    },
    {
        "content": "<p>no to the last sentence</p>",
        "id": 366686680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686890753
    },
    {
        "content": "<p>I am guessing that has_mfderiv_at.comp (The chain rule) or something similar would solve my problem.</p>",
        "id": 366687922,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686891281
    },
    {
        "content": "<p>You don't need manifold derivatives here, just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasFDerivAt.comp#doc\">docs4#HasFDerivAt.comp</a></p>",
        "id": 366823923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686920774
    }
]