[
    {
        "content": "<p>if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra, it is not true that the image in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> of <code>Ring.inverse r</code>, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r \\in R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, coincides with <code>Ring.inverse (r : A)</code> (because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> might be noninverstible in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> while its image in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is invertible), but this holds if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi mathvariant=\"bold\">Q</mi></mrow><annotation encoding=\"application/x-tex\">R=\\mathbf Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8805em;vertical-align:-0.1944em;\"></span><span class=\"mord mathbf\">Q</span></span></span></span>.<br>\nHowever, the following proof seems fairly complicated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">Nat.eq_zero_or_pos</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">hn</span> <span class=\"n\">hn</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">isUnit_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Ring.inverse_non_unit</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span>\n    <span class=\"n\">Ring.inverse_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"k\">suffices</span> <span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_natCast</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">)]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ring.inverse_mul_eq_iff_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">symm</span>\n    <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">one_mul</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_one</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">)]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span>\n    <span class=\"n\">apply</span> <span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ring.eq_mul_inverse_iff_mul_eq</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hn'</span>\n    <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">RingHom.isUnit_map</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hn'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isUnit_iff_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.ne_of_gt</span> <span class=\"n\">hn</span>\n</code></pre></div>",
        "id": 377004514,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689863966
    },
    {
        "content": "<p>This works for any field right? The proof being \"either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> is zero, then it works by junk values, or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> is invertible in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, hence in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> with the same inverse. Am I missing something obvious?</p>",
        "id": 377013218,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689865168
    },
    {
        "content": "<p>Sorry that doesn't answer your question at all <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> My first guess would be to try using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.map#doc\">docs#Units.map</a>, but maybe switching between the different inverse APIs will make it hard.</p>",
        "id": 377013681,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689865232
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Ring</span> <span class=\"n\">algebraMap</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">GroupWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZeroHomClass</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ring.inverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">GroupWithZero.eq_zero_or_unit</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inverse_zero</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">inverse_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">change</span> <span class=\"n\">inverse</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Units.coe_map</span><span class=\"o\">,</span> <span class=\"n\">inverse_unit</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_inv</span><span class=\"o\">,</span> <span class=\"n\">Units.coe_map</span><span class=\"o\">,</span> <span class=\"n\">inverse_unit</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Ring.inverse</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 377020622,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689866355
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Ring.inverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">cases'</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">IsUnit</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span>\n<span class=\"bp\">·</span> <span class=\"n\">lift</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">K</span><span class=\"bp\">ˣ</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMonoidHom</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">Ring.inverse_unit</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Units.coe_map_inv</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMonoidHom</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Ring.inverse_unit</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n<span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have this skeleton of something that may be more useful generally</p>",
        "id": 377022058,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689866611
    },
    {
        "content": "<p>but the right condition so that the <code>sorry</code> holds I don't know</p>",
        "id": 377022166,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689866633
    },
    {
        "content": "<p>the API here doesn't seem to be great</p>",
        "id": 377022250,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689866644
    },
    {
        "content": "<p>It's annoying that <code>Ring.inverse_unit</code> doesn't take <code>is_unit</code></p>",
        "id": 377022394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689866665
    },
    {
        "content": "<p>also that <code>Units.map</code> needs <code>monoidhom</code> instead of <code>monoidhomclass</code></p>",
        "id": 377022752,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689866717
    },
    {
        "content": "<p>I think that might have been deliberate on my part</p>",
        "id": 377022987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689866748
    },
    {
        "content": "<p>why?</p>",
        "id": 377023109,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689866764
    },
    {
        "content": "<p>I don't think this can work with so little assumptions on <code>K</code>, because as Antoine said it doesn't work if <code>x</code> is not invertible in <code>K</code> but is invertible in <code>A</code>. I'd guess my version is essentially the more general you can get (EDIT: without extra assumption like what Antoine describes below).</p>",
        "id": 377023631,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689866838
    },
    {
        "content": "<p>The  most general version would be that of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> such that an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a unit in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> if and only if it is already a unit in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>. These algebras have a name, but I don't remember it.</p>",
        "id": 377024359,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689866942
    },
    {
        "content": "<p>Eric, here's a slightly longer version of yours:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_inverse</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZeroHomClass</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ring.inverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">IsUnit</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">(⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"n\">hu</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">Ring.inverse_unit</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Units.coe_map_inv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">Ring.inverse_unit</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inverse_non_unit</span> <span class=\"n\">_</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">inverse_non_unit</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hu</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">hu</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- `h: IsUnit (↑f x) ⊢ IsUnit x`</span>\n</code></pre></div>",
        "id": 377024614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689866982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Compare.20inverses/near/377023109\">said</a>:</p>\n<blockquote>\n<p>why?</p>\n</blockquote>\n<p>Something to do with the fact that you still end up with a <code>MonoidHom</code> anyway; it feels a bit like deciding you're going to generalize the arguments to <code>MonoidHom.comp</code>.</p>",
        "id": 377025633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689867140
    },
    {
        "content": "<p>Good luck proving that last sorry <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 377025660,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689867146
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExteriorAlgebra.isUnit_algebraMap#doc\">docs#ExteriorAlgebra.isUnit_algebraMap</a> shows one example of when it's true outside <code>GroupWithZero</code>...</p>",
        "id": 377026239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689867249
    },
    {
        "content": "<p>Yes, but I don't think we have any way to state it generally right now</p>",
        "id": 377026576,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689867313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Compare.20inverses/near/377025633\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Compare.20inverses/near/377023109\">said</a>:</p>\n<blockquote>\n<p>why?</p>\n</blockquote>\n<p>Something to do with the fact that you still end up with a <code>MonoidHom</code> anyway; it feels a bit like deciding you're going to generalize the arguments to <code>MonoidHom.comp</code>.</p>\n</blockquote>\n<p>the issue with this is that it now forces you to work with double coercions and it starts being ugly; even if the output isn't polymorphic (and it can't be anyways) it's nice that the input is</p>",
        "id": 377027572,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689867470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Compare.20inverses/near/377023631\">said</a>:</p>\n<blockquote>\n<p>I don't think this can work with so little assumptions on <code>K</code>, because as Antoine said it doesn't work if <code>x</code> is not invertible in <code>K</code> but is invertible in <code>A</code>. I'd guess my version is essentially the more general you can get (EDIT: without extra assumption like what Antoine describes below).</p>\n</blockquote>\n<p>If it's any help, one way to spell \"if f(x) is a unit then x is a unit\" in mathlib is <code>IsLocalRingHom f</code>.</p>",
        "id": 377047458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689871295
    },
    {
        "content": "<p>I had never seen the terminology of a <em>local homomorphism of rings</em> outside of the context of local rings, but this makes sense. For categories, a functor reflecting isomorphisms is called <em>conservative</em>.</p>",
        "id": 377053632,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689872590
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LocalRing.surjective_units_map_of_local_ringHom#doc\">docs#LocalRing.surjective_units_map_of_local_ringHom</a></p>",
        "id": 377054852,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689872844
    },
    {
        "content": "<p>Weird name...</p>",
        "id": 377054885,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689872848
    },
    {
        "content": "<p>But I don't think there's anything there about this, I do think this could be added to that API</p>",
        "id": 377054969,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689872875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Compare.20inverses/near/377053632\">said</a>:</p>\n<blockquote>\n<p>I had never seen the terminology of a <em>local homomorphism of rings</em> outside of the context of local rings, but this makes sense. For categories, a functor reflecting isomorphisms is called <em>conservative</em>.</p>\n</blockquote>\n<p>yes this was funny: the point is reflecting units makes sense even if the rings aren't local. I asked de Jong about it and he suggested that a better definition (in the sense that it might be a more useful concept in the non-local case) was \"Spec(f) sends closed points to closed points, and the image of Spec(f) contains all closed points\" (which implies that f reflects units) but we took the simpler route.</p>",
        "id": 377060935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689874212
    },
    {
        "content": "<p>Here's the route via IsLocalRingHom: I had to bash it out becuse it's funny :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.LocalRing</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Ring</span> <span class=\"n\">algebraMap</span>\n\n<span class=\"c1\">-- missing?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Ring.inverse_unit'</span> <span class=\"o\">{</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">M₀</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">inverse</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">h.unit</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">IsLocalRingHom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ring.inverse</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inverse_unit'</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inverse_unit'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">isUnit_of_map_unit</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Units.coe_map</span><span class=\"o\">,</span> <span class=\"n\">map_inv</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">ext</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inverse_non_unit</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inverse_non_unit</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">IsUnit.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsLocalRingHom</span> <span class=\"n\">f</span> <span class=\"n\">where</span>\n      <span class=\"n\">map_nonunit</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Ring.inverse</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Ring.inverse</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">A</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_nontrivial_iff_subsingleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 377065765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689875376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Compare.20inverses/near/377026239\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExteriorAlgebra.isUnit_algebraMap#doc\">docs#ExteriorAlgebra.isUnit_algebraMap</a> shows one example of when it's true outside <code>GroupWithZero</code>...</p>\n</blockquote>\n<p>is this a local ring hom in Kevin's \"stronger proper\" sense?</p>",
        "id": 377306589,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689947147
    },
    {
        "content": "<p>I'm considering a refactor to condense all these lemmas together but I don't want to base this off what is arguably a \"bad\" definition</p>",
        "id": 377306710,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689947168
    },
    {
        "content": "<p>Kevin can correct me but I think his definition is implicitly commutative</p>",
        "id": 377313689,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689948396
    },
    {
        "content": "<p>Oh, of course</p>",
        "id": 377315771,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689948762
    },
    {
        "content": "<p>The definition is in mathlib so we can just have a look :-)</p>",
        "id": 377315797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689948767
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsLocalRingHom#doc\">docs#IsLocalRingHom</a></p>",
        "id": 377315878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689948779
    },
    {
        "content": "<p>I meant your definition with Spec, Kevin, in case we want to refactor to de Jong's suggestion in the future</p>",
        "id": 377316084,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689948814
    },
    {
        "content": "<p>Oh yeah the Spec version is definitely commutative only but I'm not sure that we're ever going to change our definition (which allows noncommutative rings by the looks of things), which we're seeing show up in other situations anyway</p>",
        "id": 377316362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689948866
    },
    {
        "content": "<p>Why isn't this definition made for monoids?</p>",
        "id": 377316523,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1689948897
    },
    {
        "content": "<p>I don't see why it shouldn't be! The name is getting weirder and weirder but hey...</p>",
        "id": 377316880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689948955
    },
    {
        "content": "<p>It looks like it gets specialized to commutative things quickly</p>",
        "id": 377317054,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689948987
    },
    {
        "content": "<p>I think this is an actual thing people consider the context of monoids. I remember seeing some paper using this a few years ago in the context of stuff \"under spec Z\" in the sense of Toen-Vaquie.</p>",
        "id": 377317278,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1689949034
    },
    {
        "content": "<p><code>IsLocalRingHom</code>. Library note: \"they don't have to be local, or rings.\" I don't even know why we're restricting to homomorphisms either :-)</p>",
        "id": 377317811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689949140
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isUnit_map_of_leftInverse#doc\">docs#isUnit_map_of_leftInverse</a> is for monoids</p>",
        "id": 377319407,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689949419
    },
    {
        "content": "<p>So some easy connections are lying around</p>",
        "id": 377319548,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689949443
    },
    {
        "content": "<p>Here's a (noncommutative!) example of <code>IsLocalRingHom</code> showing up with the current definition: the spectral permanence property for C⋆-algebras can be phrased as, \"If <code>S</code> is a closed star subalgebra of a C⋆-algebra <code>A</code>, then <code>IsLocalRingHom ((↑) : S → A)</code>.\" This phrasing doesn't exist in mathlib currently, but it could with about 10 lines of work,</p>",
        "id": 377327132,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689950896
    },
    {
        "content": "<p>If <code>IsLocalRingHom</code> were stated for <code>MonoidHomClass</code> instead that might be convenient.</p>",
        "id": 377328068,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689951069
    },
    {
        "content": "<p>Isn't <code>IsLocalRingHom</code> already true for <code>algebra_map R (exterior_algebra R M)</code>?</p>",
        "id": 377336284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689952619
    },
    {
        "content": "<p>That is mildly noncommutative <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 377337147,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689952776
    },
    {
        "content": "<p><code>IsLocalRingHom</code> is defined without assuming commutativity though</p>",
        "id": 377337568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689952848
    },
    {
        "content": "<p>Yes</p>",
        "id": 377337630,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689952857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Compare.20inverses/near/377336284\">said</a>:</p>\n<blockquote>\n<p>Isn't <code>IsLocalRingHom</code> already true for <code>algebra_map R (exterior_algebra R M)</code>?</p>\n</blockquote>\n<p>Sorry, I interpreted this as \"we already have a noncommutative example\"</p>",
        "id": 377337935,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1689952914
    },
    {
        "content": "<p>Ah, my mistake. That was indeed what I meant to mean!</p>",
        "id": 377340515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689953345
    },
    {
        "content": "<p>Sorry, my example wasn't meant to be the only noncommutative one, just another and I wanted to emphasize that fact since there was talk of a commutative-only definition.</p>",
        "id": 377347407,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689954709
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6045\">#6045</a> makes a start on this</p>",
        "id": 377382525,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689961827
    },
    {
        "content": "<p>[I will tag it with proper stuff when we have refactor tags in mathlib4!]</p>",
        "id": 377382573,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689961840
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6045\">#6045</a> is now ready for a first round of reviews :)</p>",
        "id": 377783552,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690105428
    }
]