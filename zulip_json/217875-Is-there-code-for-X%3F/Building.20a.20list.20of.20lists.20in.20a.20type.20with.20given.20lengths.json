[
    {
        "content": "<p>In order to compute the cardinality of the conjugacy classes of permutations in a given <code>Fintype α</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Equiv.Perm.card_of_cycleType_mul_eq</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ.filter</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g.cycleType</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">*</span>\n        <span class=\"o\">((</span><span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">m.sum</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"bp\">*</span> <span class=\"n\">m.prod</span> <span class=\"bp\">*</span>\n          <span class=\"o\">(</span><span class=\"n\">m.dedup.map</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">m.count</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">m.sum</span> <span class=\"bp\">≤</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>one step requires to know whenever <code>m : Multiset  ℕ</code> is realized as the <code>Equiv.Perm.cycleType</code> of some permutation <code>g : Equiv.Perm α</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Equiv.permWithCycleType_nonempty_iff</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.Nonempty</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">g.cycleType</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"bp\">↔</span>\n      <span class=\"o\">(</span><span class=\"n\">m.sum</span> <span class=\"bp\">≤</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>For this, it is needed to construct, given <code>m :Multiset ℕ</code>   such that <code>m.sum ≤ Fintype.card α </code>, some <code>l : List (List α)</code> with pairwise distinct members and whose lengths are given by <code>m = l.map length</code>. The first thing I do is defining this function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- From `l: List ℕ`, construct `ml: List (List ℕ)` such that</span>\n<span class=\"sd\">  `ml.map List.length = l` and `ml.join = range l.sum` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.ranges</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.range</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">List.ranges</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>that turns, for example, <code>[1,3,2]</code> into <code>[[0], [1,2,3],[4,5]]</code> and then prove what you can guess, so that this list of lists <br>\nbecomes a permutation of <code>Fin 6</code>, and then of <code>Fin α</code>.<br>\nAll in all, this is quite long,  and I wonder whether there could have been an obvious approach…</p>",
        "id": 393680093,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695898613
    },
    {
        "content": "<p>(The whole stuff that proves the first function and its companion for the alternating group will be made into a bunch of PRs, this is around 3000 lines…<br>\nIf people are interested, that's here :<br>\n<a href=\"https://github.com/AntoineChambert-Loir/Jordan4/blob/main/Jordan/ConjClassCount.lean\">https://github.com/AntoineChambert-Loir/Jordan4/blob/main/Jordan/ConjClassCount.lean</a>)</p>",
        "id": 393680386,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695898686
    },
    {
        "content": "<p>Is there any useful connection to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Nat.antidiagonalTuple#doc\">docs#List.Nat.antidiagonalTuple</a> here?</p>",
        "id": 393681636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695898895
    },
    {
        "content": "<p>I don't see any obvious one…</p>",
        "id": 393682172,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695898990
    },
    {
        "content": "<p>The web editor is down so <del>I haven't tested this</del>, but this seems a bit nicer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.multiSplit</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_l</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">::</span><span class=\"n\">is</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l.splitAt</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t.multiSplit</span> <span class=\"n\">is</span>\n</code></pre></div>\n<p>which gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"s2\">\"this\"</span><span class=\"o\">,</span> <span class=\"s2\">\"should\"</span><span class=\"o\">,</span> <span class=\"s2\">\"work\"</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">multiSplit</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [[], [\"this\", \"should\"], [], [\"work\"]]</span>\n</code></pre></div>",
        "id": 393682632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695899099
    },
    {
        "content": "<p>Thanks, it looks good but the subsequent proofs are not really easier. I'll  think about it…</p>",
        "id": 393926978,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695992634
    }
]