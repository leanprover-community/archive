[
    {
        "content": "<p>Just defined a repeat_enum which works just like Nat.repeat, but it passes the current index into f at each step. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">repeat_enum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Nat.repeat</span> <span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">a'</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n    <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>It works fine. I was just wondering if there is already a way to do this, since it seems like such a natural thing to try.</p>",
        "id": 395610924,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1696823635
    },
    {
        "content": "<p>I think we just had a thread showcasing <code>List.enum</code>.</p>",
        "id": 395702217,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696858915
    },
    {
        "content": "<p>I think you want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.fold#doc\">docs#Nat.fold</a> ?</p>",
        "id": 395706872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696860324
    },
    {
        "content": "<p>That's the one, thank you!</p>",
        "id": 395722614,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1696865080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"575564\">Jesse Slater</span> has marked this topic as resolved.</p>",
        "id": 395722632,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696865089
    }
]