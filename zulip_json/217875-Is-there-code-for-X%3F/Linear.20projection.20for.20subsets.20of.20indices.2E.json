[
    {
        "content": "<p>Is there API for the following natural linear maps? <code>exact?</code> finds nothing of the appropriate type. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.pi</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"bp\">𝔽</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"bp\">𝔽</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- forget all entries outside s</span>\n<span class=\"kd\">def</span> <span class=\"n\">drop_entries</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝔽</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">x</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- forget all entries outside s</span>\n<span class=\"kd\">def</span> <span class=\"n\">drop_entries'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝔽</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">𝔽</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hst</span> <span class=\"n\">x.prop</span><span class=\"o\">⟩</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 396790671,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1697412899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> I think you can combine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.funLeft#doc\">docs#LinearMap.funLeft</a> with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.val#doc\">docs#Subtype.val</a></p>",
        "id": 396791055,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697413332
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.inclusion#doc\">docs#Set.inclusion</a> for <code>drop_entries'</code></p>",
        "id": 396793903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697415854
    }
]