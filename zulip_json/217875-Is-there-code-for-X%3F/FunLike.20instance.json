[
    {
        "content": "<p>Is there a better way to do this and/or are there any pitfalls in this instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">hff'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Function.funext_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hff'</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">FunLike.ext_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hff'</span>\n</code></pre></div>",
        "id": 406567454,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1701963101
    },
    {
        "content": "<p>This looks pretty bad as an instance. Why do you want this?</p>",
        "id": 406567914,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701963247
    },
    {
        "content": "<p>Wanted to coerce <code>α → Equiv.Perm β</code> to <code>α → β → β</code>.</p>",
        "id": 406568126,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1701963322
    },
    {
        "content": "<p>It works, by the by, without an obvious hitch, but it didn't look that nice...</p>",
        "id": 406568247,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1701963358
    },
    {
        "content": "<p>If there is some better way to do this, I am all ears.</p>",
        "id": 406570094,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1701963915
    },
    {
        "content": "<p>Why don't you coerce every <code>Equiv.Perm β</code> to <code>β → β</code> one by one?</p>",
        "id": 406571046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701964215
    },
    {
        "content": "<p>For <code>f : α → Equiv.Perm β</code>, you could write <code>fun a ↦ ⇑(f a)</code>, which I don't think is terrible.</p>",
        "id": 406571065,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701964223
    },
    {
        "content": "<p>Yes, that's what I had essentially.</p>",
        "id": 406571125,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1701964245
    },
    {
        "content": "<p>But that instance I think is really bad.</p>",
        "id": 406571127,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701964247
    },
    {
        "content": "<p>If you think that's better than such an instance, then I'll go with that.</p>",
        "id": 406571182,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1701964264
    },
    {
        "content": "<p>A <code>CoeFun</code> instance might be less bad, because that would at least unfold</p>",
        "id": 406575807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701965471
    },
    {
        "content": "<p>There'd never be an occasion for a <code>CoeFun</code> instance to apply, right? <code>γ → F</code> is already a function</p>",
        "id": 406577720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701966075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/FunLike.20instance/near/406571065\">said</a>:</p>\n<blockquote>\n<p>For <code>f : α → Equiv.Perm β</code>, you could write <code>fun a ↦ ⇑(f a)</code>, which I don't think is terrible.</p>\n</blockquote>\n<p>I probably would write that, or maybe even <code>fun a b ↦ f a b</code>.</p>\n<p>Maybe there's also post-composing with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.toFun#doc\">docs#Equiv.toFun</a> (assuming that the CoeFun for <code>Equiv.Perm</code> is just applying <code>Equiv.toFun</code> directly.)</p>",
        "id": 406578386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701966291
    },
    {
        "content": "<p>It's syntactically not (but defeqally yes). It is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FunLike.coe#doc\">docs#FunLike.coe</a> instead.</p>",
        "id": 406578655,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701966374
    },
    {
        "content": "<p>Ok, then <code>FunLike.coe ∘ f</code>. If <code>(↑) ∘ f</code> works that's probably cleanest.</p>",
        "id": 406579135,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701966528
    },
    {
        "content": "<p>In some ways I suppose if Equiv.Perm automatically coerced to Function.End that might also work, though I'm not sure Bool -&gt; Equiv.Perm would automatically coerce even so.</p>",
        "id": 406715415,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702025834
    },
    {
        "content": "<p>Hmm, we don't seem to have this either.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Function.End.instFunLikeEnd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">Function.End</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"n\">injective_id</span>\n</code></pre></div>",
        "id": 406726530,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702030165
    },
    {
        "content": "<p>I think we don't have that because we're exploiting the defeq</p>",
        "id": 406732409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702032206
    },
    {
        "content": "<p>Aye. I just ran into somewhere where not having it was inconvenient - specifically Function.End doesn't have ext lemmas and to define them it was useful to have that instance.</p>",
        "id": 406732596,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702032256
    }
]