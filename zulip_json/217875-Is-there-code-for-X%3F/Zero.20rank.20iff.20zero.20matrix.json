[
    {
        "content": "<p>Is there a lemma in mathlib saying that a finite dimensional matrix has rank zero iff and only if it is the zero matrix?</p>\n<p>One direction is provided by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.rank_zero\">docs#matrix.rank_zero</a> . After some futile searching I though I would try to prove it on my own but I am stuck?<br>\nIt seems a module with rank zero is both a zero dimension space and an inifinite dimensional space!!! <br>\nWhat am a I missing? Any thoughts on how to finish this one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.std_basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.rank</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.tuple.sort</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">matrix.rank_zero_iff_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">A.rank</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">matrix.rank_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- rw matrix.rank at h,</span>\n  <span class=\"c1\">-- have rnt := (linear_map.finrank_range_add_finrank_ker (matrix.mul_vec_lin A)),</span>\n  <span class=\"c1\">-- rw [h, zero_add, finite_dimensional.finrank_fintype_fun_eq_card] at rnt,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.rank</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">cardinal.to_nat_cast</span><span class=\"o\">,},</span>\n  <span class=\"c1\">-- rank_eq_zero</span>\n  <span class=\"c1\">-- linear_map.range_eq_bot</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365399639,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686521853
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.range_eq_bot\">docs#linear_map.range_eq_bot</a>?</p>",
        "id": 365401265,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686522857
    },
    {
        "content": "<p>and then maybe go through the <code>to_lin</code> machinery</p>",
        "id": 365401315,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686522898
    },
    {
        "content": "<p><del>never mind, I'm no longer sure if this si even true</del> <br>\nI forgot how empty functionsworked</p>",
        "id": 365402733,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686523679
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finrank_eq_zero\">docs#finrank_eq_zero</a> looks like it should do most of the work</p>",
        "id": 365402768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686523683
    },
    {
        "content": "<p>Yeah I was hoping to use that lemma (the commented out bit!)  but I don't know how to tell lean: \"if range has rank zero, then the linear map is <code>bot</code>\"?</p>\n<p>The state after <code>rw matrix.rank at h</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c\">/-</span>\n<span class=\"cm\">  m : Type u_1,</span>\n<span class=\"cm\">  n : Type u_2,</span>\n<span class=\"cm\">  R : Type u_3,</span>\n<span class=\"cm\">  _inst_1 : fintype n,</span>\n<span class=\"cm\">  _inst_2 : fintype m,</span>\n<span class=\"cm\">  _inst_3 : field R,</span>\n<span class=\"cm\">  _inst_4 : nontrivial R,</span>\n<span class=\"cm\">  A : matrix m n R,</span>\n<span class=\"cm\">  h : finite_dimensional.finrank R ↥(linear_map.range A.mul_vec_lin) = 0</span>\n<span class=\"cm\">  ⊢ A = 0</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 365402782,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686523684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Zero.20rank.20iff.20zero.20matrix/near/365402768\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finrank_eq_zero\">docs#finrank_eq_zero</a> looks like it should do most of the work</p>\n</blockquote>\n<p>Yeah that one is for some reason not working!!</p>",
        "id": 365402903,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686523766
    },
    {
        "content": "<p>What goes wrong?</p>",
        "id": 365403081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686523853
    },
    {
        "content": "<p>you may need to throw in a <code>classical</code></p>",
        "id": 365403161,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1686523904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Zero.20rank.20iff.20zero.20matrix/near/365403081\">said</a>:</p>\n<blockquote>\n<p>What goes wrong?</p>\n</blockquote>\n<p>Something like cannot find instance. I will retry it and post the exact thing?</p>",
        "id": 365403299,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686523993
    },
    {
        "content": "<p>Seems I was missing the <code>[decidable_eq m]</code> and <code>[decidale_eq n]</code>. I am not sure if that is the reason. But this seems to work now:<br>\nThanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  and <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.std_basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.rank</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.tuple.sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">range_zero_mat_zero</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.mul_vec</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.zero_apply</span><span class=\"o\">,</span><span class=\"n\">pi.zero_apply</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.funext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_vec</span><span class=\"o\">,</span> <span class=\"n\">dot_product</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">mul_boole</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_ite_eq'</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">,</span> <span class=\"n\">pi.zero_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">matrix.rank_zero_iff_eq_zero</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">A.rank</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">matrix.rank_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.rank</span><span class=\"o\">,</span> <span class=\"n\">finrank_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">linear_map.range_eq_bot</span><span class=\"o\">,</span> <span class=\"n\">linear_map.ext_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">mul_vec_lin_apply</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">range_zero_mat_zero</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365404848,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686525070
    },
    {
        "content": "<p>I'm pretty sure at already have that first lemma</p>",
        "id": 365404880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686525114
    },
    {
        "content": "<p>You mean in mathlib?</p>",
        "id": 365405041,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686525220
    },
    {
        "content": "<p>Can you guess any name?</p>",
        "id": 365405164,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686525308
    },
    {
        "content": "<p>I tried looking but I admit my mathlib search-fu is quite weak <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 365405277,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686525383
    },
    {
        "content": "<p>No, but you should be able to avoid it entirely by using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_eq_zero_iff\">docs#map_eq_zero_iff</a> on <code>to_lin</code> which is a linear equivalence</p>",
        "id": 365405298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686525405
    },
    {
        "content": "<p><code>finrank_eq_zero</code> needs <code>division_ring</code>. Why?</p>",
        "id": 365406046,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686526082
    },
    {
        "content": "<p>Is it for historical reasons or there is a counterexample?</p>",
        "id": 365406270,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686526224
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rank_eq_zero\">docs#rank_eq_zero</a> needs <code>division_ring</code> too.</p>",
        "id": 365406301,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686526252
    },
    {
        "content": "<p>It could easily just be historical</p>",
        "id": 365406470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686526409
    },
    {
        "content": "<p>I'm trying to generalize.</p>",
        "id": 365406485,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686526431
    },
    {
        "content": "<p>It might be best to leave that till the port is done</p>",
        "id": 365406554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686526455
    },
    {
        "content": "<p>I did as many generalizations here as I could in the week or two before the port caught up with the dimension files</p>",
        "id": 365406613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686526501
    },
    {
        "content": "<p>I think there's likely to be a counterexample for semirings because our linear_independent is nonsense there</p>",
        "id": 365406873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686526728
    },
    {
        "content": "<p>I'm looking into it.</p>",
        "id": 365407062,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686526901
    },
    {
        "content": "<p>I'll post what I find later tonight.</p>",
        "id": 365407074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686526919
    },
    {
        "content": "<p>that might be one of the things I was messing up. At some point I was using <code>comm_ring R</code> that might have made <code>finrank_eq_zero</code> not work before I switched to fields</p>",
        "id": 365407122,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686526933
    },
    {
        "content": "<p>A comm_ring is not a division_ring right?</p>",
        "id": 365407167,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686527012
    },
    {
        "content": "<p><del>A counterexample (for <code>module.rank_eq_zero</code> over rings): the rank of <code>zmod 5</code> as a module over <code>int</code> is <code>0</code>.</del> NO</p>",
        "id": 365408563,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686528134
    },
    {
        "content": "<p>We need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_smul_divisors\">docs#no_zero_smul_divisors</a> UPD: if we don't have that, then we need <code>injective (λ c, c • x)</code> instead of <code>x ≠ 0</code>.</p>",
        "id": 365408581,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686528147
    },
    {
        "content": "<p>I guess, you can have a counterexample to your statement about matrices for <code>R = zmod 10</code>. UPD: not sure anymore but you can try. Both singletons <code>{2}</code> and <code>{5}</code> in <code>zmod 10</code> are not linear independent over <code>zmod 10</code>.</p>",
        "id": 365408609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686528181
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rank_zero_iff\">docs#rank_zero_iff</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rank_zero_iff_forall_zero\">docs#rank_zero_iff_forall_zero</a> should help you a lot.</p>",
        "id": 365412702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686530979
    },
    {
        "content": "<p>They have weaker assumptions. I don't want to generalize more results about <code>module.rank</code> before the port is over.</p>",
        "id": 365412856,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686531065
    }
]