[
    {
        "content": "<p>If I have a type <code>a</code> and <code>s : set a</code>, then I can consider <code>t : ↥s</code>. So <code>t</code> is a subset if <code>s</code> considered as a subtype of <code>a</code>, which I should be able to conside as a subset of <code>a</code>, i.e., <code>↑t : set a</code>. But this does not work, and I also couldn't find a definition that would convert <code>t</code> into a <code>set a</code>. Am I overlooking something?</p>",
        "id": 342864533,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679191325
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">coe_set_of_subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">↥</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">({</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>This is a case that showed me why pi types are useful <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> -- something along the lines of <code>x ∈ a ∧ ...</code> does not work.</p>",
        "id": 342865632,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679192280
    },
    {
        "content": "<p><code>(coe '' b : set \\alpha)</code>, or <code>(coe '' t : set a)</code> for your initial sentence</p>",
        "id": 342865831,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1679192451
    },
    {
        "content": "<p>OK (and sorry for changing notation). Should there be a <code>has_coe</code> instance for this?</p>",
        "id": 342865952,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679192547
    },
    {
        "content": "<p>Perhaps a <code>has_lift</code> or <code>has_lift_t</code>, ala <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_list\">docs#lift_list</a></p>",
        "id": 342866077,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1679192666
    },
    {
        "content": "<p>Your definition doesn't do what you want--exercise: what subset of <code>α</code> did you actually define?<br>\nThere is a very similar definition however that does work.</p>",
        "id": 342868734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679195058
    },
    {
        "content": "<p>Is the Pi definition <code>b \\union a\\compl</code>? With the \"similar definition\" using Sigma (or Exists) instead.</p>",
        "id": 342869409,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1679195586
    },
    {
        "content": "<p>You are right (and I just proved it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 342870162,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679196159
    },
    {
        "content": "<p>You can write this as <code>a \\himp b</code> btw</p>",
        "id": 342870270,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679196260
    },
    {
        "content": "<p>Typing \"\\himp\" in VSCode gives me \"⟶imp\"</p>",
        "id": 342871337,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679197125
    },
    {
        "content": "<p>Oh shoot. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/himp_himp\">docs#himp_himp</a></p>",
        "id": 342904004,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679219165
    },
    {
        "content": "<p>It shouldn't be necessary to learn about Heyting algebras to do what I want...</p>",
        "id": 342981085,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679254295
    },
    {
        "content": "<p>I'm just saying that <code>b ∪ aᶜ</code> can be more concisely written <code>a ⇨ b</code>.</p>",
        "id": 342982946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679255449
    },
    {
        "content": "<p>But here <code>a</code> and <code>b</code> have different types, so this gives a type error.</p>",
        "id": 342983487,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679255783
    },
    {
        "content": "<p>(BTW, there doesn't seem to be a VSCode shortcut for typing <code>⇨</code>. At least, hovering over it does not show any hint (other than the docstring for <code>has_himp.himp</code>).)</p>",
        "id": 342983565,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679255864
    },
    {
        "content": "<p>I was referring to <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/set.20on.20a.20subtype.20as.20set.20on.20the.20type.3F/near/342869409\">Yakov's message</a>.</p>",
        "id": 342984447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679256455
    },
    {
        "content": "<p>I meant to add a shortcut to the extension, but I haven't yet gotten around to doing it.</p>",
        "id": 342984545,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679256486
    }
]