[
    {
        "content": "<p>Does there is a prof of this or something similar to this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I was able to prob it, but with a 30 lines prof</p>",
        "id": 399143554,
        "sender_full_name": "Iván Renison",
        "timestamp": 1698578257
    },
    {
        "content": "<p>Can you please write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, with imports?</p>",
        "id": 399145401,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698579850
    },
    {
        "content": "<p>Here is where I want to use it and how I is my prof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Coloring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Hasse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">!=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">!=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.eq_of_beq_eq_true</span> <span class=\"n\">h2</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">beq_self_eq_true</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">beq_self_eq_true</span><span class=\"o\">,</span> <span class=\"n\">beq_iff_eq</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h5</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">aux2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h2</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bne_iff_ne</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_two_ne_zero</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">beq_eq_false_iff_ne</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_two_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">bne_iff_ne</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h5</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux4</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">aux3</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">ZMod.eq_iff_modEq_nat</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not.mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux5</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h.symm</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">aux4</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SimpleGraph.pathGraph.bicoloring</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">SimpleGraph.Coloring</span> <span class=\"o\">(</span><span class=\"n\">pathGraph</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Coloring.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u.val</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⋖</span> <span class=\"n\">v</span> <span class=\"bp\">∨</span> <span class=\"n\">v</span> <span class=\"bp\">⋖</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">pathGraph</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">u.val</span> <span class=\"bp\">⋖</span> <span class=\"n\">v.val</span> <span class=\"bp\">∨</span> <span class=\"n\">v.val</span> <span class=\"bp\">⋖</span> <span class=\"n\">u.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Fin.coe_covby_iff</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">u.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">v.val</span> <span class=\"bp\">∨</span> <span class=\"n\">v.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">u.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Nat.covby_iff_succ_eq</span><span class=\"o\">]</span>\n      <span class=\"k\">match</span> <span class=\"n\">h4</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">aux5</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">h'</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">aux5</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">h'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399146142,
        "sender_full_name": "Iván Renison",
        "timestamp": 1698580506
    },
    {
        "content": "<p>Would it help colouring with <code>ZMod 2</code> instead of <code>Bool</code>?</p>",
        "id": 399146312,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698580665
    },
    {
        "content": "<p>Let me have a look.</p>",
        "id": 399146366,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698580693
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Coloring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Hasse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Odd</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h.add_odd</span> <span class=\"n\">odd_one</span><span class=\"o\">⟩</span>\n  <span class=\"n\">by_contra'</span> <span class=\"n\">even</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.even_iff_not_odd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">even</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.odd_iff_not_even.1</span> <span class=\"o\">(</span><span class=\"n\">even.add_odd</span> <span class=\"n\">odd_one</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bool.eq_iff_eq_true_iff</span><span class=\"o\">,</span> <span class=\"n\">beq_iff_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">beq_iff_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.even_iff</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">Nat.odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">H.1</span> <span class=\"n\">even</span> <span class=\"n\">even</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">H.2</span> <span class=\"n\">even</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works, but it can surely be golfed a little</p>",
        "id": 399147869,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698581709
    },
    {
        "content": "<p><code>foo</code> is maybe somewhere</p>",
        "id": 399147875,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698581721
    },
    {
        "content": "<p>Ah, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.even_add_one#doc\">docs#Nat.even_add_one</a></p>",
        "id": 399148260,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698582039
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Coloring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Hasse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bool.eq_iff_eq_true_iff</span><span class=\"o\">,</span> <span class=\"n\">beq_iff_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">beq_iff_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.even_iff</span><span class=\"o\">,</span> <span class=\"n\">Nat.even_add_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_iff_self</span> <span class=\"n\">H.symm</span>\n</code></pre></div>\n<p>better</p>",
        "id": 399148550,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698582246
    },
    {
        "content": "<p>Thank you</p>",
        "id": 399148607,
        "sender_full_name": "Iván Renison",
        "timestamp": 1698582297
    }
]