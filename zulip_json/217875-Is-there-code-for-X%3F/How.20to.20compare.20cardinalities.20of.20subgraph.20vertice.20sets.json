[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsMaximum</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph.Subgraph</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">M.IsMatching</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">M'</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph.Subgraph</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">M'.IsMatching</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">M'.support</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M.support</span><span class=\"o\">),</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Is such definition okay?</p>\n<p>And, if I want to rewrite to version that explicitly compares cardinalities, I get stuck with error (one of two such errors) <code>failed to synthesize instance Fintype M.verts</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsMaximum'</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph.Subgraph</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">M.IsMatching</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">M'</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph.Subgraph</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">M'.IsMatching</span> <span class=\"bp\">→</span>\n  <span class=\"n\">Finset.card</span> <span class=\"o\">(</span><span class=\"n\">Set.toFinset</span> <span class=\"n\">M'.support</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Finset.card</span> <span class=\"o\">(</span><span class=\"n\">Set.toFinset</span> <span class=\"n\">M.support</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What's the correct/best way to do such direct comparison of cardinalities?</p>",
        "id": 398492762,
        "sender_full_name": "Lessness",
        "timestamp": 1698242668
    },
    {
        "content": "<p>Changed <code>verts</code>to <code>support</code>, because <code>verts</code> can be whatever size even if the graph has no edges.</p>",
        "id": 398510107,
        "sender_full_name": "Lessness",
        "timestamp": 1698247349
    },
    {
        "content": "<p>You can remove <code>Finite V</code> (generally in mathlib we don't include hypotheses that are unnecessary to make the definition, even if the definition is absurd if, for example, <code>V</code> is infinite). There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ncard#doc\">docs#Set.ncard</a> for getting the cardinality of a Set without any finiteness assumptions (it's defined to be <code>0</code> outside the domain of finite sets).</p>",
        "id": 398510768,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698247528
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 398514276,
        "sender_full_name": "Lessness",
        "timestamp": 1698248518
    }
]