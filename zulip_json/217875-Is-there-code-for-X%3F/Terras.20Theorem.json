[
    {
        "content": "<p>Is there a Lean proof for the Terras Theorem. The Theorem is about the Collatz sequences. I found this page on it: <a href=\"http://www.ericr.nl/wondrous/terras.html\">http://www.ericr.nl/wondrous/terras.html</a></p>",
        "id": 397548649,
        "sender_full_name": "Wouter Smeenk",
        "timestamp": 1697736668
    },
    {
        "content": "<p>I'm 99% sure that this proof has not been formalized in Lean.</p>",
        "id": 397548862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697736767
    },
    {
        "content": "<p>Note Tao's stronger result (<a href=\"https://terrytao.wordpress.com/2019/09/10/almost-all-collatz-orbits-attain-almost-bounded-values/\">blog</a>, <a href=\"https://www.quantamagazine.org/mathematician-proves-huge-result-on-dangerous-problem-20191211/\">Quanta</a>) from 2019:<br>\n<a href=\"/user_uploads/3121/Si9kC3appLb0eE8Y5256LORO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Si9kC3appLb0eE8Y5256LORO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Si9kC3appLb0eE8Y5256LORO/image.png\"></a></div>",
        "id": 397740641,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1697817844
    },
    {
        "content": "<p>I've been fiddling a little with the proof provided in the article above, but for now I am unable to simply prove the first lemma (which is stated to be simple).</p>\n<p>Did you make any progress on your side ?</p>",
        "id": 398008837,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698035352
    },
    {
        "content": "<p>It looks easy enough to me, what is your progress?</p>",
        "id": 398009785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698036199
    },
    {
        "content": "<p>Well I realized I was interepreting the \"first k elements\" wrong, because the sequence is starting at 0</p>\n<p>The lemma I am trying to prove is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">First</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Parity</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">Parity</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 398010248,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698036584
    },
    {
        "content": "<p>I just did the base case, now it's time for the induction</p>",
        "id": 398010311,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698036612
    },
    {
        "content": "<p>And I define the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Syr</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Glide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Syr</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Parity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Glide</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 398010490,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698036758
    },
    {
        "content": "<p>I think you want to strengthen the lemma statement to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">First</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">Parity</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">Parity</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 398010821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698037073
    },
    {
        "content": "<p>Well I wondered if it was necessary though, because the first version, implies the second by induction too (I think ?)</p>",
        "id": 398010964,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698037188
    },
    {
        "content": "<p>Yes they are all true and hence equivalent, but this version is closer to the statement and also likely easier to prove by induction</p>",
        "id": 398011058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698037220
    },
    {
        "content": "<p>Once you have the proof it is easier to see whether it can be simplified</p>",
        "id": 398011113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698037272
    },
    {
        "content": "<p>Okay, so I have done some progress, but I am kind of stuck, and I think I am misunderstanding something, may I ask for help ?</p>\n<p>Basically, the two <code>sorry</code> are where I am stuck, the goal resembles one of the hypothesis, but I quite cannot firugre out how to use them...</p>\n<p>Here is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Syr</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Glide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Syr</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Parity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Glide</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">First</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Parity</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">Parity</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.case_strong_induction_on</span> <span class=\"n\">k</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_mul_mod_self_right</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">hyp</span> <span class=\"n\">hb</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n    <span class=\"o\">{</span>\n    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.add_mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">b</span> <span class=\"mi\">2</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_mod</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_mod</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Even</span> <span class=\"n\">b</span>\n    <span class=\"bp\">·</span> <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.even_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hb1</span><span class=\"o\">]</span>\n\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">b</span>\n    <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">Parity</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">Glide</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.iterate_succ</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">Syr</span><span class=\"o\">,</span> <span class=\"n\">Syr</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">hb'.2</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">Parity</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">Glide</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.iterate_succ</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">Syr</span><span class=\"o\">,</span> <span class=\"n\">Syr</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"o\">((</span><span class=\"n\">not_iff_not.2</span> <span class=\"n\">hb'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">))]</span>\n      <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 399953500,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698936325
    },
    {
        "content": "<p>I'm not 100% sure, but it seems to me generalizing the induction over b is the way to go, like so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Syr</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Glide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Syr</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Parity</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Glide</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">First</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Parity</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">Parity</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">revert</span> <span class=\"n\">b</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.case_strong_induction_on</span> <span class=\"n\">k</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">b</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hb</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_mul_mod_self_right</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">hyp</span> <span class=\"n\">b</span> <span class=\"n\">hb</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n    <span class=\"o\">{</span>\n    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.add_mod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">b</span> <span class=\"mi\">2</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_mod</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_mod</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Even</span> <span class=\"n\">b</span>\n    <span class=\"bp\">·</span> <span class=\"n\">repeat</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.even_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hb1</span><span class=\"o\">]</span>\n\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"n\">b</span>\n    <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">Parity</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">Glide</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.iterate_succ</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">Syr</span><span class=\"o\">,</span> <span class=\"n\">Syr</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">hb'.2</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_div_of_dvd_left</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hyp</span><span class=\"o\">]</span> <span class=\"c1\">--works at least</span>\n    <span class=\"bp\">·</span> <span class=\"n\">unfold</span> <span class=\"n\">Parity</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">Glide</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.iterate_succ</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">Syr</span><span class=\"o\">,</span> <span class=\"n\">Syr</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"o\">((</span><span class=\"n\">not_iff_not.2</span> <span class=\"n\">hb'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">))]</span>\n      <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 399995737,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698948047
    },
    {
        "content": "<p>Yep I've been able to do that by slightly changing the definition of the lemma, generalizing over a and b</p>",
        "id": 400082904,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698998704
    },
    {
        "content": "<p>Though I am now stuck  at the proof of the <code>Odd b</code> case, strangely</p>",
        "id": 400082937,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698998730
    },
    {
        "content": "<p>(by the way, I just learned about the <code>show</code> function, nice)</p>",
        "id": 400083321,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698998906
    },
    {
        "content": "<p>I think that the version of the lemma provided in the blog post above is slightly to specific, and that the version in the original Terras paper <a href=\"http://matwbn.icm.edu.pl/ksiazki/aa/aa30/aa3034.pdf\">here</a> is seasier to prove.</p>\n<p>It uses <code>n = m [MOD 2^k]</code> instead of the notation above, which seems a little too restrictive</p>",
        "id": 400084562,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1698999551
    }
]