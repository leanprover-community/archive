[
    {
        "content": "<p>What is the most efficient ways of filling in these sorries? You only realize how useful <code>linarith</code> is when you can't use it...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ENat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_or_ge</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">hin</span><span class=\"bp\">|</span><span class=\"n\">hin</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hin'</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"n\">hin''</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">hin'</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"n\">hin''</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 384309836,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691857648
    },
    {
        "content": "<p>The last one isn't true but the others are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hin</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt_bot</span> <span class=\"n\">hin</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">ENat.add_one_le_iff</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ENat.coe_ne_top</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hin</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_top</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">WithTop.coe_le_coe.2</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_pred_of_lt</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">WithTop.coe_lt_coe.1</span> <span class=\"n\">hin</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not_lt_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">rfl.le</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 384490108,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1691931788
    },
    {
        "content": "<p>Oh indeed the last one can't be true</p>",
        "id": 384490879,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691931972
    },
    {
        "content": "<p>BTW, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENat.add_one_le_of_lt#doc\">docs#ENat.add_one_le_of_lt</a></p>",
        "id": 384577042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691957358
    },
    {
        "content": "<p>For <code>i ≤ n - 1</code>, you can also use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_tsub_of_add_le_right#doc\">docs#le_tsub_of_add_le_right</a></p>",
        "id": 384577191,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691957422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Manipulating.20inequalities.20in.20.60ENat.60/near/384577191\">said</a>:</p>\n<blockquote>\n<p>For <code>i ≤ n - 1</code>, you can also use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_tsub_of_add_le_right#doc\">docs#le_tsub_of_add_le_right</a></p>\n</blockquote>\n<p>No I can't unfortunately <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> because addition is not <code>ContravariantClass</code> on <code>ENat</code>. I can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddLECancellable.le_tsub_of_add_le_right#doc\">docs#AddLECancellable.le_tsub_of_add_le_right</a> in theory, but there's no API around <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddLECancellable#doc\">docs#AddLECancellable</a> in <code>ENat</code>.</p>",
        "id": 384578879,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691958088
    },
    {
        "content": "<p>These are good illustrations of some still common headaches --- and indeed great reminders of how good <code>linarith</code> is when it applies!</p>",
        "id": 384581983,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1691959528
    },
    {
        "content": "<p>Yes, I'm starting to understand why you'd want to do probabilities in <code>Real</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 384582321,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691959660
    },
    {
        "content": "<p><code>ring</code> is also amazing.</p>",
        "id": 384582960,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1691959899
    },
    {
        "content": "<p>One thing I would really argue for here: let's develop the necessary API (whatever that may be, possibly including tactics). In general, I'm much more a fan of \"do the thing that is mathematically what you want\" as opposed to \"sacrifice mathematical meaning in order to make formalizing less painful\". Of course, if the situations are mathematically equivalent, then make your life easy.</p>",
        "id": 384585912,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691961413
    },
    {
        "content": "<p>I completely agree with you, but when these things pop up while doing interesting maths and suddenly you're stuck for this kind of stupid reasons, you have to admit that it's pretty tempting to just go around. But of course this isn't the right solution.</p>",
        "id": 384586795,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691961914
    },
    {
        "content": "<p>I'm very patient with Lean usually, but for some reason this one is just too much for me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 384587009,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691962052
    },
    {
        "content": "<p>I totally understand the predicament!</p>",
        "id": 384588502,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691962927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is there anything that mathematicians can do in order to make <code>linarith</code> work for <code>PNat</code>? For example I have it in the back of my mind that you once said \"there is a missing typeclass\" -- have I misremembered though and this was why <code>ring</code> doesn't work on <code>PNat</code>? Here are some examples of failures. What is a route to making these work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">PNat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">PNat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">PNat</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">NNReal</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">MyNat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 384591698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691964799
    },
    {
        "content": "<p>the <code>ring</code> issue should be self explanatory, it needs a <code>LinearOrderedCommSemiring</code> instance and PNat isn't</p>",
        "id": 384593147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691965373
    },
    {
        "content": "<p>But it is <em>something</em>, right? Do we need to write a new <code>ring</code> for<code> PNat</code> or is it a case of making <code>LinearOrderedCommPreSemiring</code> or whatever <code>PNat</code> is and then generalising 50% of the lemmas in <code>ring</code> to this more general typeclass? Or does that have disadvantages, e.g. it makes <code>ring</code> slower in 98% of use cases?</p>",
        "id": 384593565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691965576
    },
    {
        "content": "<p>the <code>linarith</code> issue is that it expects the base ring to be an additive group and <code>MyNat</code> isn't</p>",
        "id": 384593807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691965713
    },
    {
        "content": "<p>\"so why does <code>Nat</code> work?\" because it has specific support in <code>linarith</code> which works by lifting everything to <code>Int</code></p>",
        "id": 384593923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691965798
    },
    {
        "content": "<p>Maybe it should be lifting into the <code>AddLocalization</code> instead of specifically Nat -&gt; Int</p>",
        "id": 384594098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691965878
    },
    {
        "content": "<p>I suspect something like that is also how to handle the <code>PNat</code> issue, just lift things into the appropriate completion instead of trying to work in whatever gimped structure <code>PNat</code> is and hope it is good enough to have good normal forms</p>",
        "id": 384594334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691966008
    },
    {
        "content": "<p>Aah that's a good idea: extend <code>zify</code> to <code>PNat</code> and hope that it's enough for Anatole! Then <code>linarith</code> and <code>ring</code> become available...</p>",
        "id": 384594636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691966136
    },
    {
        "content": "<p>Except I’m in <code>ENat</code>, not <code>PNat</code> 😅</p>",
        "id": 384598282,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691967681
    },
    {
        "content": "<p>And I don’t think you can hope to embed that in a nice structure</p>",
        "id": 384598305,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691967705
    },
    {
        "content": "<p>It's still under development (and perhaps a bit overcomplicated right now), but for the Tate's algorithm project (with Huriot and Dahmen) I wrote a tactic for solving linear arithmetic ENat goals, seeings as we had so many of them there.<br>\n<a href=\"https://github.com/KisaraBlue/ec-tate-lean/blob/master/ECTate/Tactic/ELinarith.lean\">https://github.com/KisaraBlue/ec-tate-lean/blob/master/ECTate/Tactic/ELinarith.lean</a><br>\nThe idea is simple, find all the enats appearing as atoms in the goal and hypotheses, do cases on whether they are infinite or not, simplify (which will reduce all statements with an infinity in to some more straightforward things that should follow from propositional logic at that point), and then with remaining goals with no infinite variables in, pass to the naturals and run the usual linarith. (note this same strategy should also work for ereal, erat etc.)<br>\nIn fact the presburger-esque theory of extended naturals is decidable (by a similar argument) so in theory there could be a tactic doing much much more than this.<br>\nUnfortunately our tactic isn't yet useful widely (i.e copy-pastable) for a couple of reasons, 1. we started the project before mathlib4 got going, so we rolled our own enat, which we still need to remove. 2. the implementation uses a custom version of simp that avoids a bug in the core simp that i need to upstream sometime 3. its not 100% finished yet and presumably not theoretically complete yet, and perhaps a little overcomplicated now who knows. It does work in the nontrivial cases we needed it to.<br>\nWhen the project reaches a more complete state I hope to PR a good version of this to mathlib.</p>",
        "id": 384602915,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691970530
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6570\">#6570</a> implements <code>ring</code> for <code>PNat</code> via lifting to <code>Nat</code></p>",
        "id": 384621283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691977231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> there was a discussion of a similar tactic to what you describe in <a href=\"#narrow/stream/113488-general/topic/integral_undef\">this thread</a>.  I did not really start any serious attempt on it, but the idea is very similar: decide what counts as \"junk\" value, possibly via an attribute and then let the tactic do the case split and try to <code>simp</code>-away the \"trivial\" case.</p>",
        "id": 384658816,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691992517
    }
]