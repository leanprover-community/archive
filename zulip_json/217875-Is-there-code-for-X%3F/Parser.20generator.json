[
    {
        "content": "<p>(unsure if this is the right stream to put this, this is more metaprogramming related)</p>\n<p>I'm trying to implement a DSL in Lean (specifically, generating Lean statements from a logical specification language). Part of that involves implementing custom syntax in Lean, I've been following <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/08_dsls.md\">metaprogramming in Lean</a> as a guide. </p>\n<p>A lot of my code related to syntax has followed the following pattern: creating (mutual) inductive types for the different types of syntax, creating syntax categories, defining elaborators that translates from custom syntax to our syntax type. A lot of which is really mechanical. </p>\n<p>Is there anything that might resemble a parser generator for Lean? I'm thinking something like Menhir that allows one to define the grammar in a file and generate the custom syntax for it. It might be useful for more general metaprogramming, especially using Lean to interact with other languages. If not, is this something that might be desirable? (I don't mind taking a hack at it).</p>",
        "id": 403063340,
        "sender_full_name": "Jiahua Chen",
        "timestamp": 1700438038
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/Parsec.20parser.20for.20decoding.20Uri.20escapes/near/397698455\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Parsec.20parser.20for.20decoding.20Uri.20escapes/near/397698455</a> for some useful links.</p>",
        "id": 403065099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700439214
    },
    {
        "content": "<p>Thanks! I'll have a look through. These seem promising.</p>",
        "id": 403072118,
        "sender_full_name": "Jiahua Chen",
        "timestamp": 1700442466
    }
]