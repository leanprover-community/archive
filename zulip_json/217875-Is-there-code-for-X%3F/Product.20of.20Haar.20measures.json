[
    {
        "content": "<p>I could not find the fact that a finite product of Haar measures is a Haar measure even though we have the result for two measures: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.prod.is_haar_measure\">docs#measure_theory.measure.prod.is_haar_measure</a></p>",
        "id": 325794210,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675504353
    },
    {
        "content": "<p>I assume you know <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.pi\">docs#measure_theory.measure.pi</a> exists, and just need the missing instance about it</p>",
        "id": 325796385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675505257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Product.20of.20Haar.20measures/near/325796385\">said</a>:</p>\n<blockquote>\n<p>I assume you know <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.pi\">docs#measure_theory.measure.pi</a> exists, and just need the missing instance about it</p>\n</blockquote>\n<p>Yes, indeed. I can construct the measure but I need the proof that it is indeed an Haar measure.</p>",
        "id": 325796546,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675505330
    },
    {
        "content": "<p>But we have the hard theorem that haar measure is uniquely defined (up to scalar) by some list of properties like translation invariance so hopefully it's not too hard to make the instance if it's not there</p>",
        "id": 325818558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675513679
    },
    {
        "content": "<p>I would have thought you can also get it without much work by induction on fin n</p>",
        "id": 325830123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675518365
    },
    {
        "content": "<p>Kevin's proof is probably nicer though</p>",
        "id": 325830188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675518390
    },
    {
        "content": "<p>The <code>pi</code> versions of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.prod.measure_theory.is_finite_measure_on_compacts\">docs#measure_theory.measure.prod.measure_theory.is_finite_measure_on_compacts</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.prod.is_open_pos_measure\">docs#measure_theory.measure.prod.is_open_pos_measure</a> look like the missing pieces. With those you can write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">mG</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open_pos_measure</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open_pos_measure</span> <span class=\"o\">(</span><span class=\"n\">measure_theory.measure.pi</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">mG</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_finite_measure_on_compacts</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_finite_measure_on_compacts</span> <span class=\"o\">(</span><span class=\"n\">measure_theory.measure.pi</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">mG</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_haar_measure</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">sigma_finite</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_measurable_mul</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_haar_measure</span> <span class=\"o\">(</span><span class=\"n\">measure_theory.measure.pi</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n</code></pre></div>",
        "id": 325846939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675525455
    },
    {
        "content": "<p>But we also seem to be missing the pi version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_prod_iff\">docs#is_open_prod_iff</a>, which you'd need to translate the prod proofs replacing <code>prod</code> with <code>pi</code>.</p>",
        "id": 325847160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675525566
    },
    {
        "content": "<p>Yes, I have come  to the same conclusion as Eric that indeed the pi version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_prod_iff\">docs#is_open_prod_iff</a> is the main roadblock. I have started looking at how to prove it but in fact, I already have trouble coming up with a suitable statement...</p>",
        "id": 325847784,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675525850
    },
    {
        "content": "<p>And for that you'll likely want a pi version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_basis.prod_nhds\">docs#filter.has_basis.prod_nhds</a></p>",
        "id": 325847827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675525866
    },
    {
        "content": "<p>My guess of the statement was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_open_pi_iff</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">set.univ.pi</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 325847853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675525878
    },
    {
        "content": "<p>I have no idea if you need a finiteness assumption somewhere, but that  would presumably become obvious when proving it</p>",
        "id": 325847911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675525909
    },
    {
        "content": "<p>Thanks, I'll start with that and see how far I can get.</p>",
        "id": 325847984,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675525931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Product.20of.20Haar.20measures/near/325830123\">said</a>:</p>\n<blockquote>\n<p>I would have thought you can also get it without much work by induction on fin n</p>\n</blockquote>\n<p>You could still take this shortcut, but arguably filling in all the missing API as we're discussing is better for mathlib</p>",
        "id": 325848058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675525964
    },
    {
        "content": "<p>Yeah, I'll see how difficult it is to do it right, but maybe I'll end up just doing an induction in the end <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 325848302,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675526043
    },
    {
        "content": "<p>Here's another statement you might need (also likely missing assumptions)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">filter.has_basis.pi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n  <span class=\"o\">{</span><span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ι'</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ι'</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">hla</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">filter.pi</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ι'</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ι'</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">set.univ.pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 325849612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675526493
    },
    {
        "content": "<p>Just to remark that Haar measures exist for locally compact groups and an arbitrary product of locally compact groups is not in general locally compact.</p>",
        "id": 325851018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675527025
    },
    {
        "content": "<p>The way to proceed in the infinite case is to choose a compact subgroup of all but finitely many of the groups and then take the restricted product (which AFAIK we don't have in mathlib) and this is again locally compact (cf the adeles, which I suspect Xavier knows well)</p>",
        "id": 325851439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675527195
    },
    {
        "content": "<p>Right, my comments are naive  translations of the product versions, which are likely untrue without some combination of <code>fintype</code> and <code>nonempty</code>. <del>Another nearly true statement we're missing might be</del></p>",
        "id": 325851627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675527268
    },
    {
        "content": "<p>Hum, there is already <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_basis_pi\">docs#filter.has_basis_pi</a> so that's already something.</p>",
        "id": 325852559,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675527697
    },
    {
        "content": "<p>Huh, I missed that completely due to the <code>.</code> vs <code>_</code> naming</p>",
        "id": 325852827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675527811
    },
    {
        "content": "<p>It might be nice to have a specialization of that for <code>finite ι</code></p>",
        "id": 325852991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675527869
    },
    {
        "content": "<p>Eric, I get around that searching problem by omitting both <code>.</code> and <code>_</code> when searching</p>",
        "id": 325863257,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675532564
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18390\">#18390</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/2110\">!4#2110</a> for the corresponding mathlib4 PR</p>",
        "id": 326158310,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675697491
    },
    {
        "content": "<p>Note that there is no need to do a manual mathlib4 PR; just make a blank PR and forward-port with the output of mathport once the mathlib3 PR is merged</p>",
        "id": 326163435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675698863
    }
]