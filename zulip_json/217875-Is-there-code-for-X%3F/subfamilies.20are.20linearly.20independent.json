[
    {
        "content": "<p>I'm trying to prove some results in linear algebra (see <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rado's.20theorem.20on.20matroids/near/343475229\">this discussion</a>), and I am having problems dealing with the API successfully. Right now, I am a bit stuck on this simple fact:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_idependent.subfamily</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hJI</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⊆</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">I.restrict</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">J.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This <em>looks</em> like it should be simple (or even in the library), but so far I don't really see how to do it without tying myself in knots. Any suggestions?</p>",
        "id": 344418378,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679723670
    },
    {
        "content": "<p>I would try starting with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inear_independent.comp\">docs#inear_independent.comp</a></p>",
        "id": 344419573,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679724499
    },
    {
        "content": "<p>That's the conclusion I just reached myself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">linear_idependent.subfamily</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hJI</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⊆</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">I.restrict</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">J.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">J.restrict</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">I.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">set.inclusion</span> <span class=\"n\">hJI</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">linear_independent.comp</span> <span class=\"n\">hI</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">set.inclusion_injective</span> <span class=\"n\">hJI</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Still, I'd expect this to be in mathlib...</p>",
        "id": 344419654,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679724600
    },
    {
        "content": "<p>Does the proof still work without the first tactic line?</p>",
        "id": 344421709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679725980
    },
    {
        "content": "<p>Did you try to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.mono\">docs#linear_independent.mono</a>?</p>",
        "id": 344423232,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1679726665
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.restrict_of_comp_subtype\">docs#linear_independent.restrict_of_comp_subtype</a> looks helpful too</p>",
        "id": 344423764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679726916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/subfamilies.20are.20linearly.20independent/near/344423232\">said</a>:</p>\n<blockquote>\n<p>Did you try to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.mono\">docs#linear_independent.mono</a>?</p>\n</blockquote>\n<p>Maybe this lemma should be generalized to take a <code>v : ι → V</code>, with the current spelling being <code>v = id</code></p>",
        "id": 344423994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679727017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/subfamilies.20are.20linearly.20independent/near/344421709\">said</a>:</p>\n<blockquote>\n<p>Does the proof still work without the first tactic line?</p>\n</blockquote>\n<p>No:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">hI.comp</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hI</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">I.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"n\">v</span>\n</code></pre></div>\n<p>(I think I tried that first...)</p>",
        "id": 344523261,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679762371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/subfamilies.20are.20linearly.20independent/near/344423232\">said</a>:</p>\n<blockquote>\n<p>Did you try to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.mono\">docs#linear_independent.mono</a>?</p>\n</blockquote>\n<p>Then you first have to convert to the identity family on the images. I don't think this will be simpler.<br>\n(See <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s remark.)</p>",
        "id": 344523565,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679762464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/subfamilies.20are.20linearly.20independent/near/344423764\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.restrict_of_comp_subtype\">docs#linear_independent.restrict_of_comp_subtype</a> looks helpful too</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">linear_independent.restrict_of_comp_subtype</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>leads to the goal <code>linear_independent F (v ∘ (coe :↥J → ι))</code>. I think the problem here is that <code>set.inclusion hJI</code> is not a coercion, so you cannot directly use <code>linear_independent.restrict_of_comp_subtype</code> (you'd have to replace <code>ι</code> by <code>↥I</code> to be able to make use of the assumption).</p>",
        "id": 344524448,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679762800
    },
    {
        "content": "<p>Now for the next level:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.quotient₁</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hIJ</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"bp\">∪</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">J.restrict</span> <span class=\"o\">((</span><span class=\"n\">mkq</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I guess the way to go is to use <code>linear_independent.map</code> and <code>linear_independent.disjoint_span_image</code>. But to get there was not so easy...<br>\nThe best I have come up with is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.quotient</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">restrict_image_union_left</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"o\">((</span><span class=\"n\">inclusion</span> <span class=\"o\">(</span><span class=\"n\">subset_union_left</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">restrict_apply</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">set_coe.exists</span><span class=\"o\">,</span> <span class=\"n\">inclusion_mk</span><span class=\"o\">,</span>\n             <span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">subtype.mk_eq_mk</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Exists.imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">),</span> <span class=\"n\">Exists.imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">)⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">restrict_image_union_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"o\">((</span><span class=\"n\">inclusion</span> <span class=\"o\">(</span><span class=\"n\">subset_union_right</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">''</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">restrict_apply</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">set_coe.exists</span><span class=\"o\">,</span> <span class=\"n\">inclusion_mk</span><span class=\"o\">,</span>\n             <span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">subtype.mk_eq_mk</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Exists.imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">),</span> <span class=\"n\">Exists.imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">)⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.subfamily</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hJI</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⊆</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">I.restrict</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">J.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">J.restrict</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">I.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hJI</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">linear_independent.comp</span> <span class=\"n\">hI</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inclusion_injective</span> <span class=\"n\">hJI</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.quotient₁</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hIJ</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"bp\">∪</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">J.restrict</span> <span class=\"o\">((</span><span class=\"n\">mkq</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">J.restrict</span> <span class=\"o\">(</span><span class=\"n\">mkq</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mkq</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">J.restrict</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n      <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_independent.map</span> <span class=\"o\">(</span><span class=\"n\">linear_independent.subfamily</span> <span class=\"o\">(</span><span class=\"n\">subset_union_right</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"n\">hv</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">range_restrict</span><span class=\"o\">,</span> <span class=\"n\">ker_mkq</span><span class=\"o\">,</span> <span class=\"n\">restrict_image_union_left</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n             <span class=\"n\">restrict_image_union_right</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">v</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_independent.disjoint_span_image</span> <span class=\"n\">hv</span> <span class=\"o\">(</span><span class=\"n\">set.disjoint_iff.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">set_coe.exists</span><span class=\"o\">,</span> <span class=\"n\">inclusion_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">hx₁J</span><span class=\"o\">,</span> <span class=\"n\">hx₁</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">hx₂I</span><span class=\"o\">,</span> <span class=\"n\">hx₂</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hx₁</span><span class=\"o\">,</span> <span class=\"n\">subtype.mk_eq_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">disjoint.ne_of_mem</span> <span class=\"n\">hIJ</span> <span class=\"n\">hx₂I</span> <span class=\"n\">hx₁J</span> <span class=\"n\">hx₂</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I'm not exactly happy with it (in particular with the need for the <code>set</code> lemmas). Can this be improved?</p>",
        "id": 345291120,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1680065212
    },
    {
        "content": "<p>I think this should be doable with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.map\">docs#linear_independent.map</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.disjoint_span_image\">docs#linear_independent.disjoint_span_image</a>, but the last one requires <code>linear_independent F v</code> instead of <code>linear_independent F ((I ∪ J).restrict v)</code>. Let me see if I can weaken the hypothesis sufficiently...</p>",
        "id": 345347473,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1680083296
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.quotient</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.subfamily</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hJI</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⊆</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">I.restrict</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">J.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">J.restrict</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">I.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">hJI</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">linear_independent.comp</span> <span class=\"n\">hI</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inclusion_injective</span> <span class=\"n\">hJI</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.disjoint_span_image'</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"bp\">∪</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">J</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">∪</span> <span class=\"n\">J</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">I'_def</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">J'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">∪</span> <span class=\"n\">J</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">J'_def</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">I'</span> <span class=\"n\">J'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.disjoint_iff</span><span class=\"o\">,</span> <span class=\"n\">I'_def</span><span class=\"o\">,</span> <span class=\"n\">J'_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hxI</span> <span class=\"bp\">|</span> <span class=\"n\">hxJ</span><span class=\"o\">)⟩</span> <span class=\"n\">hx</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hs</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">linear_independent.disjoint_span_image</span> <span class=\"n\">hv</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">I'_def</span><span class=\"o\">,</span> <span class=\"n\">set.image_restrict</span><span class=\"o\">,</span> <span class=\"n\">set.inter_comm</span><span class=\"o\">,</span> <span class=\"n\">set.union_inter_cancel_left</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">J'_def</span><span class=\"o\">,</span> <span class=\"n\">set.image_restrict</span><span class=\"o\">,</span> <span class=\"n\">set.inter_comm</span><span class=\"o\">,</span> <span class=\"n\">set.union_inter_cancel_right</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.quotient₁</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hIJ</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"bp\">∪</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">J.restrict</span> <span class=\"o\">((</span><span class=\"n\">mkq</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"bp\">∘</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_independent.map</span> <span class=\"o\">(</span><span class=\"n\">linear_independent.subfamily</span> <span class=\"o\">(</span><span class=\"n\">set.subset_union_right</span> <span class=\"n\">I</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"n\">hv</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">submodule.ker_mkq</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">linear_independent.disjoint_span_image'</span> <span class=\"n\">hv</span> <span class=\"n\">hIJ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 345350352,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1680084103
    },
    {
        "content": "<p>Thanks; that looks a bit better (even though it is built from the same building blocks).</p>",
        "id": 345520143,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1680125847
    },
    {
        "content": "<p>Next level: After defining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">linear_independent_on</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">s.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to show</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent_on.union</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent_on</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent_on</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent_on</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have come up with the following proof, which needs some extra stuff connected to sets and sum types.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.quotient</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">union_to_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x.val</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n                           <span class=\"k\">else</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">x.val</span><span class=\"o\">,</span> <span class=\"n\">x.property.resolve_left</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">union_to_sum_inj</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">union_to_sum</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">union_to_sum</span><span class=\"o\">,</span> <span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">subtype.mk_eq_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subtype.ext</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subtype.ext</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">linear_indep</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_independent_on</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">s.restrict</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent_on.union</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent_on</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent_on</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent_on</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span> <span class=\"n\">range_restrict</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">linear_independent_on</span><span class=\"o\">],</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">linear_independent.comp</span> <span class=\"o\">(</span><span class=\"n\">linear_independent.sum_type</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">union_to_sum</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">union_to_sum_inj</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">union_to_sum</span><span class=\"o\">,</span> <span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">restrict_apply</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hx</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum.elim_inl</span><span class=\"o\">,</span> <span class=\"n\">restrict_apply</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum.elim_inr</span><span class=\"o\">,</span> <span class=\"n\">restrict_apply</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">linear_indep</span>\n</code></pre></div>\n<p>and I'm wondering again whether there might be a simpler way.</p>",
        "id": 346518953,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1680517641
    },
    {
        "content": "<p>I need the fact that a family <code>f : ι → M</code> is linearly independent if and only if <code>s.card ≤ finrank R (span R  (s.image f : set M))</code> for all <code>s : finset ι</code> (where <code>M</code> is a vector space over <code>R</code>), but I can't find it in mathlib.</p>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent_iff_card_le_finrank_span\">docs#linear_independent_iff_card_le_finrank_span</a>, which is sort of half of what I need, but there does not seem to be an obvious way to connect this easily with linear independence on an arbitrary type. What I have come up with so far is the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finrank</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">linear_independent</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">iff_card_le_rank_span_on_finsets</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">s.card</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">s.image</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_image</span><span class=\"o\">,</span> <span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">set.mem_range</span><span class=\"o\">,</span>\n               <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">finset.exists_coe</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">subtype.coe_injective</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">linear_independent_iff_card_le_finrank_span.mp</span> <span class=\"n\">H₁</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_coe</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.finrank</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">linear_independent_iff'</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_finset_coe</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">fintype.card_coe</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.linear_independent_iff.mp</span>\n                   <span class=\"o\">(</span><span class=\"n\">linear_independent_iff_card_le_finrank_span.mpr</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span><span class=\"o\">)</span> <span class=\"n\">hg</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a better way?<br>\n(BTW, <code>exact fintype.linear_independent_iff.mp ...</code> does not work; it wants a <code>fintype ι</code> instance...)</p>",
        "id": 348083188,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1681068439
    }
]