[
    {
        "content": "<p>Do we have a proof of the completeness of $R^n$? </p>\n<p>The closest thing I found was <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=euclidean_space.inner_product_space#doc\">docs#euclidean_space.inner_product_space</a></p>",
        "id": 405671124,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1701614251
    },
    {
        "content": "<p>(Why is the docs link not working? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>",
        "id": 405671229,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1701614327
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.complete#doc\">docs#Pi.complete</a> ?</p>",
        "id": 405671233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701614335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Completeness.20of.20Rn/near/405671229\">said</a>:</p>\n<blockquote>\n<p>(Why is the docs link not working? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space.inner_product_space\">docs3#euclidean_space.inner_product_space</a></p>",
        "id": 405671249,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701614353
    },
    {
        "content": "<p>Great, thanks! I was searching in the wrong file.</p>",
        "id": 405671329,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1701614411
    },
    {
        "content": "<p>Is there a simple way to have the following instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.UniformSpace.Pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.PiL2</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompleteSpace</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompleteSpace</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">EuclideanSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">--error</span>\n</code></pre></div>",
        "id": 405672300,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1701615365
    },
    {
        "content": "<p><del>I can work with <code>EuclideanSpace</code> but <code>simp</code> doesn't like it much.</del></p>\n<p>Nvm, I can make <code>EuclideanSpace</code> work.</p>",
        "id": 405672367,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1701615461
    },
    {
        "content": "<p>Not really, no. It would equip <code>n → ℝ</code> with the euclidean norm, and this conflicts with the infinity norm we have by default.</p>",
        "id": 405672685,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701615673
    },
    {
        "content": "<p>Thanks again! I'll stick with <code>EuclideanSpace</code> then.</p>",
        "id": 405673069,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1701615948
    }
]