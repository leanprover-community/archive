[
    {
        "content": "<p>Do we have this subgroup? If no, then how should I call it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span>  <span class=\"n\">name_me</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"bp\">\\</span><span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n <span class=\"bp\">..</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 301290584,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664386905
    },
    {
        "content": "<p>Should it be <code>f : X -&gt; X</code>? Otherwise I'm not sure how to make sense of <code>e (f x) = e x</code></p>",
        "id": 301291307,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664387093
    },
    {
        "content": "<p>Fixed: should be <code>f (e x) = f x</code></p>",
        "id": 301294749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664388082
    },
    {
        "content": "<p>Do we have a way to specify the <code>equiv.perm X</code> and <code>equiv.perm Y</code> actions on <code>X -&gt; Y</code>? Then <code>name_me</code> would be the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.stabilizer\">docs#mul_action.stabilizer</a> of the action of <code>equiv.perm X</code> on <code>X -&gt; Y</code>. (There should be an op in there for this action.)</p>",
        "id": 301295933,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664388395
    },
    {
        "content": "<p>You could also abstract this by having a group acting on both <code>X</code> and <code>Y</code> and looking at equivariants for the action.  The case that Yury mentions is the one where the action on <code>Y</code> is trivial (and the group is <code>equiv.perm X</code>).<br>\nEDIT: I think that I confused the quantification over <code>X</code>  and over <code>f</code>! <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <br>\nSorry for the noise.</p>",
        "id": 301296824,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664388669
    },
    {
        "content": "<p>Category theory has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.End.mul_action_left\">docs#category_theory.End.mul_action_left</a> for nearly the relevant action (but it's the action of <code>X -&gt; X</code> rather than <code>equiv.perm X</code>).</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.mul_action\">docs#pi.mul_action</a> gives the action of <code>equiv.perm Y</code> on <code>X -&gt; Y</code>, but I haven't been able to find the action of <code>equiv.perm X</code> on <code>X -&gt; Y</code>.</p>",
        "id": 301300709,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664389877
    },
    {
        "content": "<p>Looks like the <code>f</code> locus of the stabilizer of the action of <code>perm X</code> on <code>X</code> to me.</p>",
        "id": 301330498,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664400128
    },
    {
        "content": "<p>We don't have any such right actions by functions</p>",
        "id": 301511489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664478057
    },
    {
        "content": "<p>What would the action of <code>f : (perm A)ᵐᵒᵖ</code> on <code>g : A → (perm A)ᵐᵒᵖ</code> be?</p>\n<ul>\n<li>\n<p>The left action via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.mul_action\">docs#pi.mul_action</a> gives <br>\n<code>λ x, op (λ y, (g x).unoo (f.unop y))</code></p>\n</li>\n<li>\n<p>The right action that you want above would gives  <br>\n<code>λ x, op (λ y, (g (f.unop x)).unop y)</code></p>\n</li>\n</ul>\n<p>This is a diamond :(</p>",
        "id": 301513248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664478664
    },
    {
        "content": "<p>Anyway, this would define a subgroup in the opposite group. While I can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.opposite\">docs#subgroup.opposite</a> to bring it back to the group of permutations, this is a rather long line and gives poor definitional equalities.</p>",
        "id": 301722866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664567260
    },
    {
        "content": "<p>So, I would prefer to add my definition under some name to the library. How would you call it?</p>",
        "id": 301722979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1664567297
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.opposite\">docs#subgroup.opposite</a> is definitionally the identity as far as <code>carrier</code> is concerned, and I don't think your definition will be non-defeq to it...</p>",
        "id": 301754334,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664584256
    },
    {
        "content": "<p>It probably will be non-defeq because of the <code>irreducible</code> attribute on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite\">docs#mul_opposite</a>. Personally I think we should remove that attribute, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_opposite\">docs#add_opposite</a> doesn't have the attribute.</p>",
        "id": 301786570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664613749
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16760\">#16760</a></p>",
        "id": 301956687,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664730683
    },
    {
        "content": "<p>I am going back to this stuff, because I need to prove an isomorphism between the group of permutations <code>f : Equiv.Perm X</code> preserving <code>p : X → Y</code> (this is <code>MulAction.Stabilizer (Equiv.Perm X) p</code>), where the action is given by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=arrowAction#doc\">docs#arrowAction</a>, and the product of the groups <code>Equiv.Perm {x | p x = y}</code>, for <code>y: Y</code>. <br>\nThe arrow from <code>MulAction.Stabilizer (Equiv.Perm X) p</code>  is easy to define, but the other one poses me some problems. <br>\nI could define it in the case that ultimately interests me, when <code>X</code> and <code>Y</code> are finite, but there is no reason for this restriction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">  Subgroup of `Equiv.Perm α` preserving a fibration `p : α → ι` -/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">MulAction</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">instance</span>  <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">arrowAction</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">arrowAction.mem_stabilizer_iff</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">stabilizer</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MulAction.mem_stabilizer_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">change</span> <span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Equiv.Perm.inv_apply_self</span><span class=\"o\">,</span> <span class=\"n\">Equiv.Perm.apply_inv_self</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">stabilizer</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">≃*</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Perm.subtypePerm</span> <span class=\"n\">g</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.comp_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">arrowAction.mem_stabilizer_iff.mp</span> <span class=\"n\">g.prop</span><span class=\"o\">]</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Now, if I wish to fill the <code>sorry</code> and define the inverse function, I can start nicely with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">φ_invFun</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">]⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">})</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_φ_invFun</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">φ_invFun</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">φ_invFun</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">Set.coe_setOf</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">]⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>  <span class=\"n\">a</span><span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n</code></pre></div>\n<p>but I am then rapidly stuck because I can't rewrite the natural equalities given by <code>comp_φ_invFun</code>. (Motive is not type-correct…)</p>",
        "id": 391930331,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695135176
    },
    {
        "content": "<p>(As for naming this subgroup, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , if it doesn't have a name yet, it could be called something like <code>Equiv.FibrewisePerm p</code>…)</p>",
        "id": 391931101,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1695135396
    },
    {
        "content": "<p>I don't yet understand where you get stuck. Don't you want something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">φ_invFun_equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">φ_invFun</span> <span class=\"n\">f</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">φ_invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">stabilizer</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">≃*</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Perm.subtypePerm</span> <span class=\"n\">g</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.comp_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">arrowAction.mem_stabilizer_iff.mp</span> <span class=\"n\">g.prop</span><span class=\"o\">]</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">φ_invFun_equiv</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>or are you stuck somewhere else?</p>",
        "id": 391946975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695139757
    },
    {
        "content": "<p>Having tried to fill in the sorries I now understand your question...</p>",
        "id": 391962289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695145001
    },
    {
        "content": "<p>Adding a lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">φ_invFun_eq</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">φ_invFun</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>allows you to rewrite, and this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">  Subgroup of `Equiv.Perm α` preserving a fibration `p : α → ι` -/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">MulAction</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">instance</span>  <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">Equiv.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">arrowAction</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">arrowAction.mem_stabilizer_iff</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">stabilizer</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">g.comp_symm_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">φ_invFun</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">φ_invFun_eq</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">φ_invFun</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_φ_invFun</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">φ_invFun</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">φ_invFun_equiv</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">φ_invFun</span> <span class=\"n\">g</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">φ_invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">φ_invFun_eq</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">comp_φ_invFun</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Subtype.val</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_inv</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">φ_invFun_eq</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">comp_φ_invFun</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Subtype.val</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">stabilizer</span> <span class=\"o\">(</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Perm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">Perm.subtypePerm</span> <span class=\"n\">g</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_setOf_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.comp_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">arrowAction.mem_stabilizer_iff.mp</span> <span class=\"n\">g.prop</span><span class=\"o\">]</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">φ_invFun_equiv</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">comp_φ_invFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">φ_invFun_eq</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 392747922,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695510040
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 392750672,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695512555
    }
]