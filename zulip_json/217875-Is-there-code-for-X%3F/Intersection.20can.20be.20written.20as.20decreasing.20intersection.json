[
    {
        "content": "<p>Is there something along the lines of <code>⋂ (x : ↑(Set.Iio S)), f x = ⋂ (x : ↑(Set.Iio S)) (y : ↑(Set.Iio x)), f ↑y</code> in the library?</p>",
        "id": 385447723,
        "sender_full_name": "Uni Marx",
        "timestamp": 1692187684
    },
    {
        "content": "<p>Probably that fails if the underlying type is something like <code>ℤ</code>.</p>",
        "id": 385485130,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692198836
    },
    {
        "content": "<p>Or any order where <code>Set.Iio x</code> is not a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NoMaxOrder#doc\">docs#NoMaxOrder</a></p>",
        "id": 385485388,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692198914
    },
    {
        "content": "<p>Do you want something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=partialSups#doc\">docs#partialSups</a> ?</p>",
        "id": 385485665,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692198997
    },
    {
        "content": "<p>(As an explicit example of where it fails, consider <code>S := (0 : ℤ)</code>, <code>f : ℤ → Set ℤ</code> which sends <code>-1</code> to <code>∅</code> and everything else to <code>Set.univ</code>. Then the left-hand side is empty, but the right-hand side is everything.)</p>",
        "id": 385486092,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692199129
    },
    {
        "content": "<p>fair - I'm working with conditionally complete lattices with bottom elements either way, but if it takes hypotheses that specific, it's no surprise it's not a thing already</p>",
        "id": 385486437,
        "sender_full_name": "Uni Marx",
        "timestamp": 1692199232
    },
    {
        "content": "<p>If it's not a thing already, it may be because this is not a thing to use for proofs which work in a large generality, even if this is a thing we pretend using in blackboard proofs (maybe because it makes union/intersection more intuitive).<br>\nOn the other hand, mathlib provides a lot of API to relate <code>sup, </code>inf`, etc., this is a purely algebraic game to play, and sometimes it is even fun…</p>",
        "id": 385509675,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692207514
    }
]