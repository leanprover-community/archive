[
    {
        "content": "<p>Is there a Lean 3 typeclass for something like <code>0 &lt; n</code>? Similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/ne_zero.html#ne_zero\">ne_zero</a>?</p>",
        "id": 389338248,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1693976584
    },
    {
        "content": "<p>(misread)</p>",
        "id": 389339573,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1693977363
    },
    {
        "content": "<p><code>NeZero</code> is rather recent, so I don't think we have something like that.</p>",
        "id": 389366164,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1693989269
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.NeBot#doc\">docs#Filter.NeBot</a>, but I think that's the only ordered one, and I guess that zero isn't your <code>bot</code> anyways</p>",
        "id": 389366835,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693989497
    },
    {
        "content": "<p>Why do we create typeclasses for this kind of stuff?</p>",
        "id": 389367923,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693989927
    },
    {
        "content": "<p>We mostly shouldn't. Typeclass search is not designed for proving. :-)</p>",
        "id": 389368809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693990224
    },
    {
        "content": "<p>NeZero was created for flt-regular originally because carrying round all this sort of hypotheses  explicitly was very annoying, and oftentimes they are easy to figure out from context (so in our case we needed that (n : R) was not zero, when n is a nat - but often we worked over Q, char zero, so this can just come from n ≠ 0, and often that comes from being explicitly <code>succ</code>)</p>",
        "id": 389376552,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693992968
    },
    {
        "content": "<p>ne_bot was created as that's what a lot of theorems of filters are done in that generality, and often it is part of the definition, but mathlib felt it was nice to not require this everywhere</p>",
        "id": 389376810,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693993053
    },
    {
        "content": "<p>Hm. My need stems from an older project that I'm currently porting up to Lean 3.5 from 3.3 in preparation to move to Lean 4. The project uses <code>[fact (0 &lt; n)]</code> in some definitions, which I gather is probably not ideal (and seems to be causing some problems anyway), so I'm looking for an alternative. Any suggestions?</p>",
        "id": 389708180,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1694105155
    },
    {
        "content": "<p>If you're taking about natural numbers, ne_zero/NeZero is equivalent</p>",
        "id": 389710989,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694105905
    },
    {
        "content": "<p>(If anyone is motivated to experiment, a potential alternative for typeclasses is having a <code>(hn : 0 &lt; n := by assumption)</code> argument. Then you can either pass it in directly or set it indirectly with a <code>have</code>.)</p>",
        "id": 389752672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694118583
    }
]