[
    {
        "content": "<p>I am looking for something like this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Submonoid.Operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Submonoid.Membership</span>\n\n\n<span class=\"sd\">/-- The submonoid of cancellative elements of a `Monoid` `R`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Cancellative</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">}</span>\n  <span class=\"n\">one_mem'</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"n\">hx₁</span> <span class=\"n\">hx₂</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span><span class=\"bp\">←</span>  <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx₁</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">hx₂</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403544137,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1700642269
    },
    {
        "content": "<p>I don't think we have it. It's probably worth it to do it for semigroups.</p>",
        "id": 403544319,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700642334
    },
    {
        "content": "<p>And of course we want the various cancellative instances.</p>",
        "id": 403544430,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700642383
    },
    {
        "content": "<p>(Related to that final remark: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8428\">#8428</a>)</p>",
        "id": 403545639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700642860
    },
    {
        "content": "<p>By the various cancellative instances do you mean something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subsemigroup.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LeftCancellative</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subsemigroup</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">}</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"n\">hx₁</span> <span class=\"n\">hx₂</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx₂</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">hx₁</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RightCancellative</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subsemigroup</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>  <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">}</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"n\">hx₁</span> <span class=\"n\">hx₂</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx₁</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">hx₂</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403548680,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1700643961
    },
    {
        "content": "<p>I think you can golf that by using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsLeftRegular.mul#doc\">docs#IsLeftRegular.mul</a></p>",
        "id": 403553555,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700645610
    }
]