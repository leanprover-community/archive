[
    {
        "content": "<p>How does one show the result below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Function.extend</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I can't figure out how to use the <code>i in t</code> to simplify <code>Function.extend</code>.  </p>\n<p>I don't have a choice with rewriting the statement as it appears like this in a larger proof.</p>\n<p>Thanks,</p>",
        "id": 408453541,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702829791
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.sum_extend_by_zero#doc\">docs#Fintype.sum_extend_by_zero</a></p>",
        "id": 408453588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702829854
    },
    {
        "content": "<p>That's not exactly the same</p>",
        "id": 408453799,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702830043
    },
    {
        "content": "<p>But very close</p>",
        "id": 408453826,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702830081
    },
    {
        "content": "<p>Yeah, that's the closest I could find</p>",
        "id": 408453912,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702830155
    },
    {
        "content": "<p>Thanks! Maybe unfolding Function.extend reduces it to the above theorem</p>",
        "id": 408453951,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702830216
    },
    {
        "content": "<p>You can rewrite on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_coe_sort#doc\">docs#Finset.sum_coe_sort</a> right-to-left, then apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_congr#doc\">docs#Finset.sum_congr</a></p>",
        "id": 408454021,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702830264
    },
    {
        "content": "<p>Then you'll have to prove <code>∀ i : t, g i = Function.extend Subtype.val g 0 i</code></p>",
        "id": 408454041,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702830293
    },
    {
        "content": "<p>This follows from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Injective.extend_apply#doc\">docs#Function.Injective.extend_apply</a></p>",
        "id": 408454078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702830333
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_congr#doc\">docs#Finset.sum_congr</a> is complaining that the LHS is of type <code>@Finset.sum k t</code> and the RHS is of type <code>@Finset.sum k E</code></p>",
        "id": 408454340,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702830609
    },
    {
        "content": "<p>At least that's what it seems to be trying to do. If I do <code>congr</code> then I explicitly get a goal <code>t = E</code></p>",
        "id": 408454367,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702830660
    },
    {
        "content": "<p>First follow the first part of the sentence</p>",
        "id": 408454395,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702830701
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Function.extend</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Finset.sum_coe_sort</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"bp\">-</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Function.Injective.extend_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Subtype.val_injective</span>\n</code></pre></div>",
        "id": 408454397,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702830709
    },
    {
        "content": "<p>Oh wow, thanks a lot! This was far more complicated than I expected.<br>\n I was trying out the <code>rw [←Finset.sum_coe_sort]</code> but couldn't get it to work</p>",
        "id": 408454479,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702830796
    },
    {
        "content": "<p>Is <code>conv_rhs</code> saying that only apply the tactic to the RHS of the equation?</p>",
        "id": 408454581,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1702830901
    }
]