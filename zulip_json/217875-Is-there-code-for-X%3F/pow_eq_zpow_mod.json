[
    {
        "content": "<p>Do we have this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Group.pow_eq_zpow_mod</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Int.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">Int.emod_add_ediv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">zpow_add</span><span class=\"o\">,</span> <span class=\"n\">zpow_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I found it useful recently. Or should I be using something else? If we want it, does it go in Algebra.GroupPower.Lemmas?</p>",
        "id": 380127412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690748903
    },
    {
        "content": "<p>Sounds good.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find_home</span> <span class=\"n\">Group.pow_eq_zpow_mod</span>     <span class=\"c1\">-- Mathlib.Algebra.GroupPower.Lemmas</span>\n</code></pre></div>",
        "id": 380141811,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690755221
    },
    {
        "content": "<p>Another option would presumably be to go via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=orderOf#doc\">docs#orderOf</a> and show it divides <code>n</code>?</p>",
        "id": 380142637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690755663
    },
    {
        "content": "<p>Why not make <code>n</code> an integer? And if you want to have a look I have similar lemmas <a href=\"https://github.com/YaelDillies/LeanAPAP/blob/master/src/mathlib/group_theory/order_of_element.lean\">here</a>.</p>",
        "id": 380208923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690785577
    }
]