[
    {
        "content": "<p>Do we have this <code>coe_smul</code> in the library?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Nonneg.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.DirectSum.Module</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"ùïú‚â•0\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">c</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"bp\">ùïú‚â•</span><span class=\"mi\">0</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Module.compHom</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nonneg.coeRingHom</span> <span class=\"bp\">ùïú</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(‚ü®</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú‚â•</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks,</p>",
        "id": 382164357,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691247267
    },
    {
        "content": "<p><del>I don't understand -- that sorry isn't true in general right?</del></p>",
        "id": 382167075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691247941
    },
    {
        "content": "<p>But isn't the LHS of the conclusion just <code>0</code>? and <code>hS</code> says that <code>0</code> is in <code>S</code>.</p>",
        "id": 382167991,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691248162
    },
    {
        "content": "<p>Oh sorry, you're absolutely right. Why not <code>convert hS</code> and then use <code>zero_smul</code>?</p>",
        "id": 382174418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691249670
    },
    {
        "content": "<p>The <code>zero_smul</code> is not working :(</p>",
        "id": 382175361,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691249907
    },
    {
        "content": "<p>Lean is not able to identify the coerced 0 with 0</p>",
        "id": 382175418,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691249928
    },
    {
        "content": "<p>Does it work with <code>exact</code>?</p>",
        "id": 382175541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691249968
    },
    {
        "content": "<p>Well then <code>convert</code> it and then you'll find out what the problem is.</p>",
        "id": 382175869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691250040
    },
    {
        "content": "<p>Ah, <code>convert</code> and <code>exact?</code> together did it! Thank you,</p>\n<p>It was <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=smul_eq_zero_of_left#doc\">docs#smul_eq_zero_of_left</a></p>",
        "id": 382176188,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691250127
    },
    {
        "content": "<p>aah, so there was no problem :-)</p>",
        "id": 382176342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691250180
    },
    {
        "content": "<p>Sometimes when you try this approach you get goals like <code>instField.toMul = instOpposite.toMul</code> and you realise that your object has got two different multiplications on it both of which are being displayed as <code>*</code>. But looks like you got away with it :-)</p>",
        "id": 382176528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691250235
    },
    {
        "content": "<p>I had this exact issue last week lol. Had two different zeros coming from two different instances <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 382176747,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691250297
    },
    {
        "content": "<p>Took forever to debug</p>",
        "id": 382176805,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691250313
    },
    {
        "content": "<p>Also, I haven't used <code>convert</code> tactic much. I'll keep it in mind next time something like this comes up! Thanks,</p>",
        "id": 382177074,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691250378
    },
    {
        "content": "<p>Yeah, this is why <code>convert</code> is a powerful debugging tool -- you get some goal <code>long thing = same long thing</code> where <code>rfl</code> is failing, but <code>congr</code> (which is <code>convert rfl</code>) cancels all the parts which are actually equal and just leaves the problematic part.</p>",
        "id": 382177232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691250422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 382178945,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691250909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20SMul.20coercion.20for.20Nonneg.2EcoeRingHom/near/382177232\">said</a>:</p>\n<blockquote>\n<p>Yeah, this is why <code>convert</code> is a powerful debugging tool -- you get some goal <code>long thing = same long thing</code> where <code>rfl</code> is failing, but <code>congr</code> (which is <code>convert rfl</code>) cancels all the parts which are actually equal and just leaves the problematic part.</p>\n</blockquote>\n<p>But how does it happen that 'convert blah X' sometimes suceeds where 'exact blah X' doesn't?</p>",
        "id": 382180061,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691251242
    },
    {
        "content": "<p>convert can discharge some of the remaining goals on its own, for example with Subsingleton.elim</p>",
        "id": 382181875,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1691251707
    },
    {
        "content": "<p><code>convert</code> can prove <code>a : Fintype X</code> equals <code>b : Fintype X</code> even if the proof isn't <code>rfl</code>, but <code>exact</code> can't do this.</p>",
        "id": 382186720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691253175
    },
    {
        "content": "<p>You should add a <code>convert</code> level to the NNG <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 382188288,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691253623
    },
    {
        "content": "<p>I just added a 2+2=4 level :-)</p>",
        "id": 382191046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691254553
    }
]