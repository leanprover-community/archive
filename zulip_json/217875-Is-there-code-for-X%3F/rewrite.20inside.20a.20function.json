[
    {
        "content": "<p>Hi <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>\n<p>Is there a routine technique to deal with equality between functions in the middle of a proof?</p>\n<p>Here is a MWE, where I want to prove that if I divide all members of a list <code>L</code> by a non-zero constant <code>c</code> in a semifield <code>F</code> and then take the sum, it gives me the same result as summing the members of the list and then dividing the result by <code>c</code>... <span aria-label=\"new baby\" class=\"emoji emoji-1f425\" role=\"img\" title=\"new baby\">:new_baby:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.BigOperators.Lemmas</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_of_list_div</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semifield</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">L.sum</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">ext</span> <span class=\"n\">x</span>\n          <span class=\"n\">field_simp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">,</span> <span class=\"n\">List.sum_map_mul_left</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Is there a standard way to avoid introducing the <code>aux</code> term here? Or to write a shorter definition of that term, one that would fit on a sole line?</p>",
        "id": 390022128,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694257252
    },
    {
        "content": "<p>I would rewrite using <code>div_eq_mul_inv</code> here, which is an existing lemma.<br>\nThe only difficulty is that you need to use <code>simp_rw</code> as you are rewriting inside a function.<br>\nSo you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">List.sum_map_mul_right</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>\n<p>or even just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_of_list_div</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semifield</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L.map</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">L.sum</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span> <span class=\"n\">List.sum_map_mul_right</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Bonus: the linter now informs us that <code>hc</code>  isn't actually needed for this proof, as <code>1/ 0= 0</code> etc so both sides are zero in that case</p>",
        "id": 390024733,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694257975
    },
    {
        "content": "<p>Thanks Alex, it looks really good and is exactly the kind of thing I was hoping for but could not get myself <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 390025648,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694258648
    },
    {
        "content": "<p>Maybe a follow-up question would be: is <code>simp_rw</code> the standard way to do <em>rewriting inside a function</em>? Or are there other options?</p>",
        "id": 390026742,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694259471
    },
    {
        "content": "<p>There are other options, but <code>simp_rw</code> is a pretty good one. Depending on the situation you may be able to ust \"enter\" the function using <code>congr</code> and <code>ext</code> (or the more powerful <code>congrm</code>), but that typically only works if your goal is the equality you want to prove by rewriting. You can always do that in a <code>have</code> statement of course, but it can be a bit cumbersome. Another way is to enter <code>conv</code> mode (do we have some Lean4 documentation on <code>conv</code>?)</p>",
        "id": 390027089,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694259723
    },
    {
        "content": "<p>Thanks Anatole! Do you mean like <del><a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></del> <br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean4/conv.html\">https://leanprover.github.io/theorem_proving_in_lean4/conv.html</a>? I have not checked it out yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 390028485,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1694260656
    },
    {
        "content": "<p>Yes, but <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/conv.html\">https://leanprover.github.io/theorem_proving_in_lean4/conv.html</a> is a better place to read about it seeing as we haven't updated the conv docs on the website to lean 4 yet</p>",
        "id": 390029534,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694261427
    },
    {
        "content": "<p>There's a <code>conv</code> page on the actual mathlib4 docs.</p>",
        "id": 390087708,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694312405
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Guide.html\">https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Guide.html</a></p>",
        "id": 390087729,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694312423
    },
    {
        "content": "<p>And</p>",
        "id": 390087731,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694312426
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Introduction.html\">https://leanprover-community.github.io/mathlib4_docs/docs/Conv/Introduction.html</a></p>",
        "id": 390087745,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694312441
    }
]