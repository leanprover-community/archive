[
    {
        "content": "<p>Do we have the ingredients for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">AddSubgroup.eq_zmultiples_int</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zmultiples</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n      <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">Nat.primeFactors</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or does it need to be done by hand?</p>",
        "id": 406359510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701886166
    },
    {
        "content": "<p>ugh... that was more work than I was hoping. There was certainly some missing API in various places. I proved it instead for <code>Ideal.span (k : ℤ)</code> so that I could use that <code>ℤ</code> is a PID (it would have been possible and not too terrible to do without this, but I thought it was easiest), and then got the subgroup result from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddSubgroup.toIntSubmodule#doc\">docs#AddSubgroup.toIntSubmodule</a>. </p>\n<p>The main issue boils down to a <code>Nat</code> result: if <code>j ∣ k</code> and <code>j &lt; k</code>, then there is some <code>p ∈ k.primeFactors</code> so that <code>j | k / p</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">AddSubgroup.toIntSubmodule_zmultiples</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">AddSubgroup.toIntSubmodule</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">zmultiples</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">{(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span>\n  <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ideal.mem_span_singleton</span><span class=\"o\">,</span> <span class=\"n\">Int.mem_zmultiples_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.one_lt_of_mem_properDivisors</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">n.properDivisors</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.one_lt_succ_succ</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.one_lt_div_of_mem_properDivisors</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">n.properDivisors</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_of_mem_properDivisors</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_mul_lt_mul_right</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hm.le</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h_dvd</span><span class=\"o\">,</span> <span class=\"n\">h_lt</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_properDivisors.mp</span> <span class=\"n\">h</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_mul_cancel</span> <span class=\"n\">h_dvd</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h_lt</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.mem_properDivisors_iff_exists</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">n.properDivisors</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span>\n      <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">one_lt_div_of_mem_properDivisors</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">mem_properDivisors.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mem_properDivisors.mpr</span> <span class=\"o\">⟨⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">gcongr</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"k\">fun</span> <span class=\"n\">hm</span> <span class=\"bp\">↦</span> <span class=\"n\">hn</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>     <span class=\"o\">:=</span> <span class=\"n\">h.symm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.nonempty_primeFactors</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n.primeFactors.Nonempty</span> <span class=\"bp\">↔</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">not_iff_not</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.not_nonempty_iff_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">primeFactors_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">]</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_ideal_span_int</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">{(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)}</span> <span class=\"bp\">↔</span>\n      <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">Nat.primeFactors</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">{(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)}</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨(</span><span class=\"n\">Submodule.IsPrincipal.generator</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">natAbs</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.span_natAbs</span><span class=\"o\">,</span> <span class=\"n\">I.span_singleton_generator</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">Ideal.mem_span_singleton_self</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">hq</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ideal.mem_span_singleton</span><span class=\"o\">]</span>\n    <span class=\"n\">norm_cast</span>\n    <span class=\"k\">have</span> <span class=\"n\">hq'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.prime_of_mem_primeFactors</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">hq'</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hk</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_dvd</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">irrefl</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">hk.trans_lt</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div_dvd_of_dvd</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.dvd_of_mem_primeFactors</span> <span class=\"n\">hq</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.pos_of_dvd_of_pos</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_of_lt</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Ideal.mem_span_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">hk</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">hk</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Ideal.span_singleton_eq_span_singleton</span><span class=\"o\">,</span> <span class=\"n\">Int.associated_iff_natAbs</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_cast</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_of_le_of_not_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_ne_zero</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">hk</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">hj</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"k\">have</span> <span class=\"n\">hj'</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">k.properDivisors</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.mem_properDivisors</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">⟨</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm_one</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.mem_properDivisors_iff_exists</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hj'</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.nonempty_primeFactors.mpr</span> <span class=\"n\">hm_one</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">bex</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.primeFactors_mono</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">j</span> <span class=\"n\">m</span> <span class=\"bp\">▸</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"n\">w</span> <span class=\"n\">hp</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"n\">hp'</span>\n    <span class=\"n\">use</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">p</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.mul_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_of_mem_primeFactors</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.div_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_of_mem_primeFactors</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n      <span class=\"n\">Nat.div_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_of_mem_primeFactors</span> <span class=\"n\">hp'</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_zmultiples_int</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zmultiples</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n      <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">Nat.primeFactors</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">AddSubgroup.toIntSubmodule</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">injective.eq_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AddSubgroup.toIntSubmodule_zmultiples</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">SetLike.mem_coe</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">AddSubgroup.coe_toIntSubmodule</span><span class=\"o\">,</span> <span class=\"n\">SetLike.mem_coe</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_ideal_span_int</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 406391580,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701897936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> let me know what you think. If there was some simpler argument you were hoping for, I'd be interested. Otherwise I'll PR bits of this in a day or two.</p>",
        "id": 406392058,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1701898169
    },
    {
        "content": "<p>No, that was the argument I had in mind. Thank you so much for this!</p>",
        "id": 406393239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701898708
    },
    {
        "content": "<p>It's very useful that this could be done so quickly: Rob and I are talking to some CAS people about verifying algorithms modulo CAS black boxes, and this came up in the toy problem we're investigating. I'll be able to use this code in our working group in 20 minutes. :-)</p>",
        "id": 406393367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701898772
    },
    {
        "content": "<p>I was able to do this without translating to ideals.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.dvd_div_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.natAbs_dvd_natAbs</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.natAbs_dvd_natAbs</span><span class=\"o\">,</span> <span class=\"n\">natAbs_mul</span><span class=\"o\">,</span> <span class=\"n\">natAbs_ediv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hbc</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_div_iff</span> <span class=\"o\">(</span><span class=\"n\">natAbs_dvd_natAbs.mpr</span> <span class=\"n\">hbc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">AddSubgroup.eq_zmultiples_int</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">knz</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zmultiples</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">Nat.primeFactors</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Int.subgroup_cyclic</span> <span class=\"n\">G</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zmultiples_eq_closure</span><span class=\"o\">]</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">subst</span> <span class=\"n\">nz</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">zmultiples_zero_eq_bot</span><span class=\"o\">,</span> <span class=\"n\">mem_bot</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.mem_primeFactors</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">,</span> <span class=\"n\">iff_false</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">ne_comm</span><span class=\"o\">,</span> <span class=\"n\">zmultiples_ne_bot</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.ofNat_ne_zero.mpr</span> <span class=\"n\">knz</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_zmultiples</span><span class=\"o\">,</span> <span class=\"n\">Nat.mem_primeFactors</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">q</span> <span class=\"n\">pq</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.Prime.ne_one</span> <span class=\"n\">pq</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">not_or</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">Int.mul_ediv_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_right₀</span><span class=\"o\">,</span> <span class=\"n\">Int.mul_eq_one_iff_eq_one_or_neg_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_eq_one</span><span class=\"o\">,</span> <span class=\"n\">and_false</span><span class=\"o\">,</span> <span class=\"n\">false_or</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nomatch</span> <span class=\"n\">q</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.mem_primeFactors</span><span class=\"o\">,</span> <span class=\"n\">Nat.isUnit_iff</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">Int.mem_zmultiples_iff</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Int.ofNat_dvd</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">Int.dvd_div_iff</span><span class=\"o\">,</span> <span class=\"n\">mul_dvd_mul_iff_right</span> <span class=\"n\">nz</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_dvd_mul_left</span>\n      <span class=\"k\">suffices</span> <span class=\"n\">IsUnit</span> <span class=\"n\">m</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">IsUnit.dvd</span> <span class=\"n\">this</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.isUnit_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.natAbs_dvd_natAbs</span><span class=\"o\">,</span> <span class=\"n\">Int.natAbs_mul</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m.natAbs</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">hm</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.natAbs_eq_iff</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">or_self</span><span class=\"o\">]</span>\n      <span class=\"n\">use</span> <span class=\"n\">m.natAbs.minFac</span><span class=\"o\">,</span> <span class=\"n\">m.natAbs.minFac_prime</span> <span class=\"n\">this</span>\n      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_left</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.minFac_dvd</span> <span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.minFac_dvd</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_of_mul_left_dvd</span>\n</code></pre></div>",
        "id": 406406370,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1701904690
    },
    {
        "content": "<p>Different idea,  by observing the similarity between the statement and <code>addOrderOf_eq_of_nsmul_and_div_prime_nsmul</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">AddSubgroup.mem_iff_nsmul_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">⧸</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">QuotientAddGroup.mk_nsmul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_one</span><span class=\"o\">,</span> <span class=\"n\">QuotientAddGroup.eq_zero_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">AddSubgroup.mem_iff_zsmul_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">⧸</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">QuotientAddGroup.mk_zsmul</span><span class=\"o\">,</span> <span class=\"n\">zsmul_one</span><span class=\"o\">,</span> <span class=\"n\">QuotientAddGroup.eq_zero_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">AddSubgroup.eq_zmultiples_addOrderOf</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zmultiples</span> <span class=\"o\">(</span><span class=\"n\">addOrderOf</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">⧸</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">G.mem_iff_zsmul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">Int.mem_zmultiples_iff</span><span class=\"o\">,</span> <span class=\"n\">addOrderOf_dvd_iff_zsmul_eq_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">AddSubgroup.zmultiples_inj</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↦</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">mem_zmultiples</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">mem_zmultiples</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.mem_zmultiples_iff</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_nat_dvd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span> <span class=\"n\">hm</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_antisymm</span> <span class=\"n\">hm</span> <span class=\"n\">hn</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">QuotientAddGroup.zmultiples_addOrderOf_one</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">addOrderOf</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">⧸</span> <span class=\"n\">AddSubgroup.zmultiples</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"n\">AddSubgroup.zmultiples_inj</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">AddSubgroup.eq_zmultiples_addOrderOf</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">AddSubgroup.eq_zmultiples_int</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zmultiples</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n      <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">Nat.primeFactors</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Int.coe_nat_div</span><span class=\"o\">,</span> <span class=\"n\">G.mem_iff_nsmul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">Nat.mem_primeFactors</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">imp_iff_right</span> <span class=\"n\">w</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.pos_iff_ne_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">w</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">QuotientAddGroup.zmultiples_addOrderOf_one</span> <span class=\"n\">k</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">q</span> <span class=\"n\">hq</span> <span class=\"n\">hqk</span> <span class=\"n\">hkq</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">addOrderOf_nsmul_eq_zero</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hq.ne_one</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.dvd_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_dvd_mul_iff_right</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">addOrderOf_dvd_iff_nsmul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Nat.dvd_div_iff</span> <span class=\"n\">hqk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hkq</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">addOrderOf_eq_of_nsmul_and_div_prime_nsmul</span> <span class=\"n\">w</span> <span class=\"n\">h.1</span> <span class=\"n\">h.2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">G.eq_zmultiples_addOrderOf</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 406465036,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701927621
    }
]