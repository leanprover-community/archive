[
    {
        "content": "<p>Do we have these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IntermediateField.mem_adjoin_iff</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">IntermediateField.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">S</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n      <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">MvPolynomial.aeval</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">MvPolynomial.aeval</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IntermediateField.mem_adjoin_simple_iff</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">IntermediateField.adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n      <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.aeval</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">Polynomial.aeval</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I hope these formulations are correct: it's possible that the <code>aeval</code> of <code>s</code> is zero, but this is still correct since anything divide by zero is zero in Lean, so it is still in that field.</p>",
        "id": 397981945,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698020196
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.adjoin#doc\">docs#IntermediateField.adjoin</a> is defined in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subfield.closure#doc\">docs#Subfield.closure</a>, and there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subfield.mem_closure_iff#doc\">docs#Subfield.mem_closure_iff</a>. </p>\n<p>For <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.adjoin#doc\">docs#Algebra.adjoin</a> we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.adjoin_singleton_eq_range_aeval#doc\">docs#Algebra.adjoin_singleton_eq_range_aeval</a> (and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.adjoin_eq_range#doc\">docs#Algebra.adjoin_eq_range</a> for any set and MvPolynomial), and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.adjoin_eq_ring_closure#doc\">docs#Algebra.adjoin_eq_ring_closure</a> says <code>Subring.closure (Set.range (algebraMap F E) ∪ S) = Algebra.adjoin F S</code>.<br>\nWe also get polynomial representations for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subring.closure#doc\">docs#Subring.closure</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subsemiring.closure#doc\">docs#Subsemiring.closure</a> via <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.adjoin_nat#doc\">docs#Algebra.adjoin_nat</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.adjoin_int#doc\">docs#Algebra.adjoin_int</a>. However, there isn't a Algebra.adjoin_eq_semiring_closure.</p>\n<p>P.S. I found some of these using loogle (example <a href=\"https://loogle.lean-lang.org/?q=Algebra.adjoin%2C+Polynomial\">1</a>, <a href=\"https://loogle.lean-lang.org/?q=Algebra.adjoin%2C+Subring.closure\">2</a>).</p>",
        "id": 398002713,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698032052
    },
    {
        "content": "<p>Thanks, currently I'm lost in the implication chain. Will check them later.</p>",
        "id": 398123818,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698079856
    },
    {
        "content": "<p>OK this code works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IntermediateField.mem_adjoin_iff</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">IntermediateField.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">S</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n      <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">MvPolynomial.aeval</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">MvPolynomial.aeval</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">adjoin</span><span class=\"o\">,</span> <span class=\"n\">mem_mk</span><span class=\"o\">,</span> <span class=\"n\">Subring.mem_toSubsemiring</span><span class=\"o\">,</span> <span class=\"n\">Subfield.mem_toSubring</span><span class=\"o\">,</span>\n    <span class=\"n\">Subfield.mem_closure_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Algebra.adjoin_eq_ring_closure</span><span class=\"o\">,</span> <span class=\"n\">Subalgebra.mem_toSubring</span><span class=\"o\">,</span>\n    <span class=\"n\">Algebra.adjoin_eq_range</span><span class=\"o\">,</span> <span class=\"n\">AlgHom.mem_range</span><span class=\"o\">,</span> <span class=\"n\">exists_exists_eq_and</span><span class=\"o\">]</span>\n  <span class=\"n\">tauto</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">IntermediateField.mem_adjoin_simple_iff</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">IntermediateField.adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n      <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Polynomial.aeval</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"n\">Polynomial.aeval</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">adjoin</span><span class=\"o\">,</span> <span class=\"n\">mem_mk</span><span class=\"o\">,</span> <span class=\"n\">Subring.mem_toSubsemiring</span><span class=\"o\">,</span> <span class=\"n\">Subfield.mem_toSubring</span><span class=\"o\">,</span>\n    <span class=\"n\">Subfield.mem_closure_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Algebra.adjoin_eq_ring_closure</span><span class=\"o\">,</span> <span class=\"n\">Subalgebra.mem_toSubring</span><span class=\"o\">,</span>\n    <span class=\"n\">Algebra.adjoin_singleton_eq_range_aeval</span><span class=\"o\">,</span> <span class=\"n\">AlgHom.mem_range</span><span class=\"o\">,</span> <span class=\"n\">exists_exists_eq_and</span><span class=\"o\">]</span>\n  <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>At first I want to use <code>IntermediateField.mem_adjoin_iff</code> to prove <code>IntermediateField.mem_adjoin_simple_iff</code> but somehow using<code>MvPolynomial.pUnitAlgEquiv</code> is not as easy as copying the proof again.</p>",
        "id": 398163617,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698099611
    },
    {
        "content": "<p>Are these worth to be added to mathlib? It looks like that the existing <code>mem_xxx_iff</code> doesn't look like these two.</p>",
        "id": 398163760,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698099712
    },
    {
        "content": "<p>Those look like good lemmas to me, though the second one should be called <code>mem_adjoin_singleton_iff</code></p>",
        "id": 398164415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698100087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/IntermediateField.2Emem_adjoin_iff/near/398164415\">said</a>:</p>\n<blockquote>\n<p>the second one should be called <code>mem_adjoin_singleton_iff</code></p>\n</blockquote>\n<p>In the file <code>Mathlib.FieldTheory.Adjoin</code> they are usually called <code>simple</code>, though.</p>",
        "id": 398166237,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698101053
    },
    {
        "content": "<p>For example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.mem_adjoin_simple_self#doc\">docs#IntermediateField.mem_adjoin_simple_self</a></p>",
        "id": 398166340,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698101119
    },
    {
        "content": "<p>Yeah, the adjoin lemmas should probably be renamed.</p>",
        "id": 398174242,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1698106620
    },
    {
        "content": "<p>What do you need these lemmas for?</p>",
        "id": 398174279,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1698106651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/IntermediateField.2Emem_adjoin_iff/near/398174279\">said</a>:</p>\n<blockquote>\n<p>What do you need these lemmas for?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/e0830b7f850af1feb80b9ebfee2ec2d17b397b52/Mathlib/FieldTheory/PrimitiveElement.lean#L264\">https://github.com/leanprover-community/mathlib4/blob/e0830b7f850af1feb80b9ebfee2ec2d17b397b52/Mathlib/FieldTheory/PrimitiveElement.lean#L264</a></p>",
        "id": 398276228,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698149503
    }
]