[
    {
        "content": "<p>It is a fact in representation theory that the direct sum of representations is a representation. I am trying to prove this fact. I looked in /representation_theory/* , but could not find it, so I decided to try proving it myself. Here is what I have so far</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">representation_theory.basic</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">direct_sum_of_representations</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n<span class=\"o\">[</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">)]</span>\n<span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What is the best way to prove this? I tried using <code>direct_sum.lmk</code>. Any help would be appreciated.</p>",
        "id": 328697519,
        "sender_full_name": "Atticus Kuhn",
        "timestamp": 1676738318
    },
    {
        "content": "<p>It's arguably a construction (ie a definition) rather than a fact (a theorem). You're missing a definition, not a proof.</p>",
        "id": 328712552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676745726
    },
    {
        "content": "<p>You'll have to look in the API for direct sums to see how to define maps out of and into them</p>",
        "id": 328712617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676745776
    },
    {
        "content": "<p>I would guess this is easiest to prove/construct by unfolding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/representation\">docs#representation</a></p>",
        "id": 328746419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676770026
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">representation_theory.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A more bundled version of `dfinsupp.map_range.linear_map`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">dfinsupp.map_range.module_End</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module.End</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→*</span> <span class=\"n\">module.End</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp.map_range.linear_map</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp.map_range.linear_map_id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp.map_range.linear_map_comp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">direct_sum_of_representations</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">dfinsupp.map_range.module_End.comp</span> <span class=\"o\">(</span><span class=\"n\">pi.monoid_hom</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328799126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676808974
    },
    {
        "content": "<p>Thank you both for your help. I can see that I will have to look more into <code>dfinsupp</code> in the future.</p>",
        "id": 328826465,
        "sender_full_name": "Atticus Kuhn",
        "timestamp": 1676821079
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum\">docs#direct_sum</a> is just a thin layer on top of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a>; if the API you want is missing for <code>direct_sum</code>, it probably exists for <code>dfinsupp</code> instead</p>",
        "id": 328826692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676821187
    },
    {
        "content": "<p>Do you think I should make a PR to mathlib with this? <code>representation_theory.basic</code> has the tensor product of representations, but not the direct sum of representations.</p>",
        "id": 329029977,
        "sender_full_name": "Atticus Kuhn",
        "timestamp": 1676912812
    },
    {
        "content": "<p>We're in the middle of a big port right now, which makes things a bit more complicated than usual.</p>",
        "id": 329038528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676915671
    },
    {
        "content": "<p>It's also worth asking whether by \"direct sum\" you perhaps actually want <code>representation k G (Π i, M j)</code>, which I think we have somewhere too</p>",
        "id": 329038891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676915838
    }
]