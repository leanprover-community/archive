[
    {
        "content": "<p>Just to be sure, we don't have currying of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMultilinearMap#doc\">docs#ContinuousMultilinearMap</a> in the following form, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.Multilinear</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.NormedSpace.OperatorNorm</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"bp\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">50000</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">[</span><span class=\"bp\">√ó</span><span class=\"n\">m</span><span class=\"o\">]</span><span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">[</span><span class=\"bp\">√ó</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"bp\">‚âÉ‚Çó·µ¢</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"o\">[</span><span class=\"bp\">√ó</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)]</span><span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378252717,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690227518
    },
    {
        "content": "<p>(Yes, even the <em>type</em> causes the typclass system to go nuts. There is something fishy going on with continuous multilinear maps that I'm trying to minimize, I've been fighting with &gt;2s TC synthesis of some <code>CoeFun</code>... -- although in this case it's <code>Module</code> that's taking some time)</p>",
        "id": 378253056,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690227610
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMultilinearMap.currySumEquiv#doc\">docs#ContinuousMultilinearMap.currySumEquiv</a></p>",
        "id": 378261451,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690230173
    },
    {
        "content": "<p>Together with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMultilinearMap#doc\">docs#ContinuousMultilinearMap</a>.domDomCongr‚Çó·µ¢ it should give what you want.</p>",
        "id": 378261512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690230195
    },
    {
        "content": "<p>Scratch that, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMultilinearMap.curryFinFinset#doc\">docs#ContinuousMultilinearMap.curryFinFinset</a></p>",
        "id": 378261719,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690230262
    },
    {
        "content": "<p>To get your version, just take <code>s</code> to be the first <code>m</code> elements of <code>Fin (m + n)</code>.</p>",
        "id": 378261791,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690230297
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 378261837,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690230313
    },
    {
        "content": "<p>I wonder if <a href=\"https://github.com/leanprover-community/mathlib4/pull/2202\">#2202</a> will help with <code>CoeFun</code> synth here and there.</p>",
        "id": 378261911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690230338
    },
    {
        "content": "<p>But this is a big refactor.</p>",
        "id": 378261930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690230345
    },
    {
        "content": "<p>Leaving the <code>CoeFun</code> example aside for the moment (I'll try to minimize it), I'd be interested if someone understand why the typeclass inference takes such a long time in this example. On my computer it ends up spending .8s to prove that two instances of <code>AddMonoid</code> are equal, which is very fishy.</p>",
        "id": 378262993,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690230742
    },
    {
        "content": "<p>But when I write the corresponding equality and try to prove it by <code>rfl</code> it takes \"only\" .2s</p>",
        "id": 378263080,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690230783
    },
    {
        "content": "<p>I think it has a lot of tower problems it has to solve, though I'm not sure</p>",
        "id": 378263115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690230804
    },
    {
        "content": "<p>To be clear most of the time here is actually spent on defeq-checking, not typeclass synthesis. EDIT: that's a stupid comment, this is always what takes a long time...</p>",
        "id": 378263302,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690230887
    },
    {
        "content": "<p>Can we help the defeq checker somehow?</p>",
        "id": 378263966,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690231134
    },
    {
        "content": "<p>I'm wondering wether the fact that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMultilinearMap.normedAddCommGroup#doc\">docs#ContinuousMultilinearMap.normedAddCommGroup</a> is defined using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddGroupNorm.toNormedAddCommGroup#doc\">docs#AddGroupNorm.toNormedAddCommGroup</a> could be a problem</p>",
        "id": 378264149,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690231214
    },
    {
        "content": "<p>Why is this a problem?</p>",
        "id": 378264193,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690231242
    },
    {
        "content": "<p>I don't know <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'm trying to guess why it has to unfold so much things to see that the two <code>AddMonoid</code> instances are equal.</p>",
        "id": 378264314,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690231300
    },
    {
        "content": "<p>Will it become faster if you explicitly override <code>toAddCommGroup</code>?</p>",
        "id": 378270038,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690231454
    },
    {
        "content": "<p>It would likely become faster if you did that inside <code>GroupNorm.toNormedCommGroup</code></p>",
        "id": 378275998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690232626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/More.20currying.20of.20continuous.20multilinear.20maps/near/378270038\">said</a>:</p>\n<blockquote>\n<p>Will it become faster if you explicitly override <code>toAddCommGroup</code>?</p>\n</blockquote>\n<p>Overriding <code>toAddCommGroup</code> itself does not have a significant impact, but overriding <code>add</code>, <code>nsmul</code> and <code>zero</code> do!</p>",
        "id": 378442193,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690285500
    },
    {
        "content": "<p>So, you force Lean to flatten the constructor.</p>",
        "id": 378491041,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690294417
    },
    {
        "content": "<p>That's the opposite of the behavior I would expect</p>",
        "id": 378491314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690294458
    },
    {
        "content": "<p>Did you do this in <code>GroupNorm.toNormedCommGroup</code> or your instance?</p>",
        "id": 378491391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690294471
    },
    {
        "content": "<p>I did that directly in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMultilinearMap.normedAddCommGroup#doc\">docs#ContinuousMultilinearMap.normedAddCommGroup</a></p>",
        "id": 378495355,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690295058
    },
    {
        "content": "<p>Maybe, Lean has to unify this instance with some flat instance; then it's easier to do it if both instances are flat. I don't know how to verify this guess.</p>",
        "id": 378496569,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690295283
    },
    {
        "content": "<p>But there's no such thing as a flat instance</p>",
        "id": 378497781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690295482
    },
    {
        "content": "<p>Only nested instances where the nested bits are also nested</p>",
        "id": 378497823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690295491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/More.20currying.20of.20continuous.20multilinear.20maps/near/378275998\">said</a>:</p>\n<blockquote>\n<p>It would likely become faster if you did that inside <code>GroupNorm.toNormedCommGroup</code></p>\n</blockquote>\n<p>Can you try this and see if it helps?</p>",
        "id": 378497989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690295520
    }
]