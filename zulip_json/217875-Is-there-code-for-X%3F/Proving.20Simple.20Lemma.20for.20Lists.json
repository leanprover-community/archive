[
    {
        "content": "<p>I have the following goal state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span>\n<span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">T</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">d</span>\n</code></pre></div>\n<p>What tactic or theorem can I use? This seems like it should be easy to show but I haven't been able to.</p>",
        "id": 340822872,
        "sender_full_name": "Ramneet Singh",
        "timestamp": 1678444889
    },
    {
        "content": "<p>I have written the following proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">singleton_length_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">iff.elim_right</span> <span class=\"o\">(</span><span class=\"n\">list.length_eq_one</span><span class=\"o\">)),</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">singleton_eq_append_implies_empty</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">([</span><span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">a.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">list.length_append</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">])</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">list.length_append</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">],</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">singleton_length_one</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">singleton_length_one</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">list.length</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">a.length</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">iff.elim_left</span> <span class=\"n\">nat.add_eq_one_iff</span> <span class=\"o\">(</span><span class=\"n\">iff.elim_left</span> <span class=\"n\">eq_comm</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">and.elim_left</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">a.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">ne_zero.pos</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),},</span>\n        <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h7</span><span class=\"o\">,},</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">false.rec</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"n\">h6</span><span class=\"o\">)),</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">and.elim_left</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">nat.succ.inj</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">list.length_eq_zero.mp</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>I would be grateful if someone could review this and suggest improvements to the tactics/style.</p>",
        "id": 340831360,
        "sender_full_name": "Ramneet Singh",
        "timestamp": 1678447066
    },
    {
        "content": "<p>How about this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">singleton_eq_append_implies_empty</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">([</span><span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">list.length_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">le_zero_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">list.length</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.length_append</span><span class=\"o\">,</span> <span class=\"n\">list.length_singleton</span><span class=\"o\">,</span> <span class=\"n\">list.append_assoc</span><span class=\"o\">,</span> <span class=\"n\">list.singleton_append</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_of_add_le_add_right</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 340836061,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1678448294
    },
    {
        "content": "<p>And fwiw, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.length_singleton\">docs#list.length_singleton</a></p>",
        "id": 340836182,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1678448326
    },
    {
        "content": "<p>I should probably refactor and generalize my lemma:<br>\n<a href=\"https://github.com/madvorak/grammars/blob/93af02643431b3165b19594415c40b80eaa987ae/src/classes/unrestricted/closure_properties/star.lean#L1424\">https://github.com/madvorak/grammars/blob/93af02643431b3165b19594415c40b80eaa987ae/src/classes/unrestricted/closure_properties/star.lean#L1424</a></p>",
        "id": 340883779,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678460077
    },
    {
        "content": "<p>Also, since you will be working with triples of lists in your project, have a look at this section:<br>\n<a href=\"https://github.com/madvorak/grammars/blob/93af02643431b3165b19594415c40b80eaa987ae/src/utilities/list_utils.lean#L26\">https://github.com/madvorak/grammars/blob/93af02643431b3165b19594415c40b80eaa987ae/src/utilities/list_utils.lean#L26</a></p>",
        "id": 340884502,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678460248
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> and <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> ! This helps a lot :))</p>",
        "id": 340924826,
        "sender_full_name": "Ramneet Singh",
        "timestamp": 1678469846
    }
]