[
    {
        "content": "<p>I can find <code>List.bind</code> and <code>List.pure</code> defined in std but not an actual <code>Monad</code> instance. Is this by design?</p>",
        "id": 401648506,
        "sender_full_name": "Aiken Cairncross",
        "timestamp": 1699832015
    },
    {
        "content": "<p>If you look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List#doc\">docs#List</a>, expand the \"instances for\", and search for <code>Monad</code>, you'll find the instance is provided by Mathlib as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.instMonad#doc\">docs#List.instMonad</a></p>",
        "id": 401648613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699832104
    },
    {
        "content": "<p>There's been debate whether <code>List</code> should be a <code>Monad</code> in core (and maybe std too) since it's not the lazy one you find in languages like Haskell, so it might lead to surprising runtime characteristics for users.</p>",
        "id": 401649252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699832927
    },
    {
        "content": "<p>I wonder if we should at least have something like this so we can switch to the List monad without making List a monad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ListM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">ListM</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">List.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">List.bind</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ListM.run</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ListM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pairs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ListM.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">xs</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">xs</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">pairs</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]</span>\n</code></pre></div>",
        "id": 401649417,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699833134
    },
    {
        "content": "<p>That mirrors <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Id.run#doc\">docs#Id.run</a></p>",
        "id": 401649419,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699833138
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"665938\">@Aiken Cairncross</span>, if you actually want a lazy monadic structure, see <code>MLList</code>.)</p>",
        "id": 401716408,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699866119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665938\">Aiken Cairncross</span> has marked this topic as resolved.</p>",
        "id": 401872469,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699922735
    }
]