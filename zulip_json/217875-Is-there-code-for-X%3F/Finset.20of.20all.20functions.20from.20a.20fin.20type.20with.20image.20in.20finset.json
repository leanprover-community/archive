[
    {
        "content": "<p>Is there a function with the type signature <code>def foo {A B : Type} [fintype A] (S : finset B) : finset (A -&gt; B) := sorry</code> which returns the set of all functions with images subset of B?</p>",
        "id": 340257117,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1678243376
    },
    {
        "content": "<p>By which you mean, <code>∀ f ∈ foo S, finset.univ.image f ⊆ S</code>?</p>",
        "id": 340276993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678257021
    },
    {
        "content": "<p><code>(finset.univ : finset (A → S)).map ⟨(∘ coe), sorry⟩</code> should do the trick</p>",
        "id": 340277233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678257151
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.subtype\">docs#function.embedding.subtype</a> for the map if that helps with the composition proof</p>",
        "id": 340302725,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1678266592
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">⟨(</span><span class=\"bp\">∘</span> <span class=\"n\">coe</span><span class=\"o\">),</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>What do I have to import to synthesize <code>fintype (A → ↥S)</code>?</p>",
        "id": 340400027,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1678290846
    },
    {
        "content": "<p><code>open_locale classical</code> or add some decidability assumptions, look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.fintype\">docs#pi.fintype</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 340402148,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678291312
    },
    {
        "content": "<p>For future reference, I found this way of writing it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function_finset</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.piFinset</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378651778,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1690340476
    },
    {
        "content": "<p>Yes, this is the canonical spelling.</p>",
        "id": 378793922,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1690376744
    },
    {
        "content": "<p>Is there interest in putting in a definition for this, or should I <code>s/function_finset/Fintype.piFinset (fun _ =&gt; S)/g</code> my file?</p>",
        "id": 385288661,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692135193
    },
    {
        "content": "<p>I think probably the latter</p>",
        "id": 385293264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692137760
    },
    {
        "content": "<p>You could use <code>Fintype.piFInset (Function.const S)</code> if you prefer</p>",
        "id": 385293325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692137779
    },
    {
        "content": "<p>In LeanAPAP, we defined notation for it, but I really see no point in having a separate definition.</p>",
        "id": 385356747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692169518
    }
]