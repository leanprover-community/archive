[
    {
        "content": "<p>Hello! Here is tiny code.<br>\n1) Is there already a definition that can be used instead of <code>XOR</code> that's defined here?<br>\n2) What's the best way to replace use of theorem <code>aux</code> with some tactics?<br>\n3) How to show Lean that it can get from instances <code>[DecidableRel M1.Adj]</code> and <code>[DecidableRel M2.Adj]</code> to instance <code>[DecidableRel (GraphSymmDiff M1 M2).Adj]</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">XOR</span> <span class=\"o\">(</span><span class=\"n\">P1</span> <span class=\"n\">P2</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">P1</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">P2</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">P1</span> <span class=\"bp\">∧</span> <span class=\"n\">P2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">G.Subgraph</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">M.Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">G.Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">M</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GraphSymmDiff</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M1</span> <span class=\"n\">M2</span><span class=\"o\">:</span> <span class=\"n\">G.Subgraph</span><span class=\"o\">):</span> <span class=\"n\">G.Subgraph</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SimpleGraph.Subgraph.mk</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Set.univ</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">XOR</span> <span class=\"o\">(</span><span class=\"n\">M1.Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M2.Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">H</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">XOR</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span>\n    <span class=\"k\">let</span> <span class=\"n\">W1</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"n\">M1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"k\">let</span> <span class=\"n\">W2</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"n\">M2</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"n\">tauto</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">H</span>\n    <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Symmetric</span><span class=\"o\">,</span> <span class=\"n\">XOR</span><span class=\"o\">]</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">H</span>\n    <span class=\"n\">tauto</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399068437,
        "sender_full_name": "Lessness",
        "timestamp": 1698513078
    },
    {
        "content": "<p>For <code>aux</code> you don't want a tactic -- this is a theorem in the API for subgraphs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">G.Subgraph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">M.Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">G.Adj</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SimpleGraph.Subgraph.adj_sub</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>If you like, the tactic is <code>exact?</code></p>",
        "id": 399068740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698513353
    },
    {
        "content": "<p>Usually we write <code>M.adj_sub</code> for this (and note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.Subgraph.adj_sub#doc\">docs#SimpleGraph.Subgraph.adj_sub</a> is one of the axioms for a subgraph)</p>",
        "id": 399068847,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698513451
    },
    {
        "content": "<p>What's the definition of the symmetric difference of two subgraphs? It doesn't seem right to set it to have <code>V</code> be the vertex set. It's ignoring the vertex sets of <code>M1</code> and <code>M2</code>.</p>",
        "id": 399069036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698513667
    },
    {
        "content": "<p>1) Thank you both!<br>\n2) I was interested in the edges only, so it seemed okay to leave V. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span></p>",
        "id": 399069241,
        "sender_full_name": "Lessness",
        "timestamp": 1698513857
    },
    {
        "content": "<p>Be sure then that you are interested in <code>G.Subgraph</code> then rather than those <code>H : SimpleGraph V</code> such that <code>H ≤ G</code>. For <code>SimpleGraph V</code>, if you have <code>G G' : SimpleGraph V</code>, then you should be able to write <code>G ∆ G'</code> for the symmetric difference, assuming you have the module for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=symmDiff#doc\">docs#symmDiff</a> imported.</p>",
        "id": 399070415,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698515078
    }
]