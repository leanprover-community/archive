[
    {
        "content": "<p>Is there a proof of the math part of the master theorem (<a href=\"https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)\">https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)</a>)?<br>\nThe semantic search (<a href=\"http://mathlib-search.edayers.com/?query=master+theorem\">http://mathlib-search.edayers.com/?query=master+theorem</a>) seems to have turned up</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">master_theorem</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>which might be equivalent (its got the right sort of feel to it except it deals in powers instead of logs - also I'm not quite sure how the extra log components are handled when f(n) is close to n^ccrit), but I also can't figure out where that is defined in mathlib (I resorted to grep and still couldn't find it).</p>",
        "id": 338191527,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1677437187
    },
    {
        "content": "<p>Note that that generated theorem is false with<code>a=2</code>, <code>b=3</code>, <code>c=1</code></p>",
        "id": 338192044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677437488
    },
    {
        "content": "<p>So I think the answer is \"that doesn't exist in mathlib, it was generated by the language model\"</p>",
        "id": 338192150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677437536
    },
    {
        "content": "<p>Well that makes me feel better about not finding it even with grep. Although is the answer in general the master theorem (or some variant thereof doesn't exist?) I feel like some forms of it almost feel trivial. For example the critical definition could look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">θ</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">θ</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">θ</span><span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">θ</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">θ</span><span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Which is just saying that in the first case the first term dominates, and in the second case they all contribute equally.</p>",
        "id": 338203358,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1677444364
    },
    {
        "content": "<p>Can you write those statements as full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s, where you define the types and quantifiers for all the variables</p>",
        "id": 338205748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677445876
    },
    {
        "content": "<p>The problem is I don't think I understand asymptotic filters enough to be able to write it I think, but I think I can write the exists form.</p>",
        "id": 338205940,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1677446037
    },
    {
        "content": "<p>Ok, I could be wrong, but I think it would look something like (assuming we are sticking to the power version):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">master_theorem_leaf_heavy</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">master_theorem_critical</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm not sure about the root heavy case since I'm not exactly sure how the regularity condition translates.</p>",
        "id": 338206955,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1677446768
    },
    {
        "content": "<p>But I'm not quite sure what the nicest form of the Master Theorem would look like from a mathematical perspective (CS likes to think about it from a divide and conquer perspective, which might not be preferrable in most other situations).</p>",
        "id": 338207049,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1677446877
    },
    {
        "content": "<p>I suspect your quantification <code>∃ (c &lt; a), something(c)</code> means <code>∃ c : ℕ, c + 1 ≤ a ∧ something(c)</code> which is not what you wanted probably.</p>",
        "id": 338211070,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677450424
    },
    {
        "content": "<p>It is what I want, but actually I think I might need to be in ℝ instead (or at least ℚ). Basically there needs to be some separation in the exponent rather than just a polynomial factor.</p>",
        "id": 338211214,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1677450572
    },
    {
        "content": "<p>Without actually dipping into Q I can fake it with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">master_theorem_leaf_heavy</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">cn</span> <span class=\"n\">cd</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">cn</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">cd</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">cn</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"n\">cd</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 338211318,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1677450646
    },
    {
        "content": "<p>Interesting...<br>\nAre you reïmplementing rationals in order to be sure that negative numbers cannot appear there?<br>\nDo you want to have an explicit encoding of <code>c</code> for the sake of using it as a number in your computations later?</p>",
        "id": 338212592,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677451745
    },
    {
        "content": "<p>At the moment I'm not doing anything, I was hoping there was a form that already existed so I can just head towards that, right now I just have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divide_and_conquer_cost</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">program</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fc</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">internal_cost_bound</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">fc</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">internal_cost_bound</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">fc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">divide_and_conquer_cost</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">recurse_count</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>this is essentially the above sum</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>except in a slightly different form.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">=</span>  <span class=\"n\">recurse_count</span> <span class=\"n\">p</span>\n<span class=\"bp\">```</span> <span class=\"n\">and</span>\n<span class=\"bp\">```</span><span class=\"n\">lean</span>\n<span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fc</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">internal_cost_bound</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>where p is held constant so the functions are constants.</p>\n<p>And I've shown</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">divide_and_conquer_cost_sound</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">program</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">fr</span><span class=\"o\">:</span> <span class=\"n\">bank</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfr</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">inp</span> <span class=\"n\">arg</span><span class=\"o\">,</span> <span class=\"n\">recurse_arg</span> <span class=\"n\">p</span> <span class=\"n\">inp</span> <span class=\"n\">arg</span> <span class=\"bp\">→</span> <span class=\"n\">fr</span> <span class=\"n\">arg</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fr</span> <span class=\"n\">inp</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">fc</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">inp</span><span class=\"o\">,</span> <span class=\"n\">call_cost_le</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">inp</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">fc</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"n\">inp</span><span class=\"o\">))):</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">inp</span><span class=\"o\">,</span> <span class=\"n\">p.cost_le</span> <span class=\"n\">inp</span> <span class=\"o\">(</span><span class=\"n\">divide_and_conquer_cost</span> <span class=\"n\">p</span> <span class=\"n\">fc</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"n\">inp</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>So basically all the computational complexity work is done as far as the model goes, and the only thing left is the asymptotics.</p>",
        "id": 338212862,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1677452012
    },
    {
        "content": "<p>If asymptotics is the only thing left, you should celebrate!</p>",
        "id": 338212986,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677452149
    },
    {
        "content": "<p>I am pretty happy, the proofs a very ugly though</p>",
        "id": 338213648,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1677452709
    }
]