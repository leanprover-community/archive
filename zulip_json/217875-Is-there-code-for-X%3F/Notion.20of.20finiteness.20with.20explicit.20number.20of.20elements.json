[
    {
        "content": "<p>I found the <code>Finite</code> which is, I believe, notion of finiteness without number of elements.</p>\n<p>But is there something like, don't know how to name it... for example, <code>Finite A 4</code> which would mean that type <code>A</code> has 4 different elements?</p>",
        "id": 398104131,
        "sender_full_name": "Lessness",
        "timestamp": 1698073131
    },
    {
        "content": "<p>Can you un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> a little? What do you want this notion for?</p>",
        "id": 398104834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698073309
    },
    {
        "content": "<p>If you want to assume that a finset has 4 elements just use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card#doc\">docs#Finset.card</a></p>",
        "id": 398105179,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698073398
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.card#doc\">docs#Fintype.card</a> if you have a type</p>",
        "id": 398105269,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698073425
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.ncard#doc\">docs#Set.ncard</a> if you have a set (this can be a little confusing, we know).</p>",
        "id": 398105486,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698073486
    },
    {
        "content": "<p><code>ncard</code> has a very weird type</p>",
        "id": 398105658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698073540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Notion.20of.20finiteness.20with.20explicit.20number.20of.20elements/near/398104834\">said</a>:</p>\n<blockquote>\n<p>Can you un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> a little? What do you want this notion for?</p>\n</blockquote>\n<p>I'm tinkering with directed graphs, defined as binary relation. (No clue if that's good way to define them; right now just gaining more experience and some fun with Lean.)</p>\n<p>And I want to define a Prop like this: <code>Digraph.Node.HasOutDegree {A: Type} (dg: Digraph A) (x: A) (n: Nat)</code>. Which would mean that <code>{ y: A // dg x y }</code> has size <code>n</code>.</p>",
        "id": 398106582,
        "sender_full_name": "Lessness",
        "timestamp": 1698073806
    },
    {
        "content": "<p><del>docs#Set.Sized might also work for you</del></p>",
        "id": 398107812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698074171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Notion.20of.20finiteness.20with.20explicit.20number.20of.20elements/near/398105658\">said</a>:</p>\n<blockquote>\n<p><code>ncard</code> has a very weird type</p>\n</blockquote>\n<p>Does explicitly writing <code>: \\N</code> in the def fix things?</p>",
        "id": 398114144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698076121
    },
    {
        "content": "<p>Yes, and it would be nice if there was a built-in linter for this</p>",
        "id": 398116251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698076890
    }
]