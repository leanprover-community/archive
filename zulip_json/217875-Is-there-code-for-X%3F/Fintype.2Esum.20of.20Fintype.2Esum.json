[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.BigOperators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_of_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f.uncurry</span> <span class=\"n\">ab</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395551860,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696778143
    },
    {
        "content": "<p>Anyone have any ideas about how to prove this? Seems like there ought to be some existing lemma.</p>",
        "id": 395551951,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696778203
    },
    {
        "content": "<p>This is exactly <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_product%27#doc\">docs#Finset.sum_product'</a></p>",
        "id": 395552005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696778250
    },
    {
        "content": "<p>nice!</p>",
        "id": 395552108,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696778311
    },
    {
        "content": "<p>I should have tried <code>rw?</code> first</p>",
        "id": 395552117,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696778320
    },
    {
        "content": "<p>(<code>Finset.sum_product'</code> is among the suggestions given by <code>rw?</code>, but not among the top 10)</p>",
        "id": 395552162,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696778372
    },
    {
        "content": "<p>Sadly, <code>yael?</code> is only available on Zulip <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 395552387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696778529
    },
    {
        "content": "<p>Maybe we can train an LLM on the corpus of Yael Q&amp;A's ...</p>",
        "id": 395552761,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696778767
    }
]