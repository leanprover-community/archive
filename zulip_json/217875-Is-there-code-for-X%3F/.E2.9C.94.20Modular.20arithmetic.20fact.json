[
    {
        "content": "<p>I need this to complete a proof, yet the proof is stopped by a bug that must be worked around.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helperLemma5</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/-5S4eXpwwyDEnwCCdnCz4L7r/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-5S4eXpwwyDEnwCCdnCz4L7r/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-5S4eXpwwyDEnwCCdnCz4L7r/image.png\"></a></div>",
        "id": 365230929,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686454413
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">existsi</span> <span class=\"o\">(((</span><span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>gives a different error:<br>\n<a href=\"/user_uploads/3121/y_vrq1ox0lWlTdoLp4ViLqgG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/y_vrq1ox0lWlTdoLp4ViLqgG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/y_vrq1ox0lWlTdoLp4ViLqgG/image.png\"></a></div>",
        "id": 365232116,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686455476
    },
    {
        "content": "<p>You can't just cast an int to a nat.</p>",
        "id": 365232236,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1686455585
    },
    {
        "content": "<p>What value are you trying use?</p>",
        "id": 365232255,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1686455606
    },
    {
        "content": "<p>Please read about <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>'s</p>",
        "id": 365232777,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686456084
    },
    {
        "content": "<p>And <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 365232798,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686456098
    },
    {
        "content": "<p>My MWE environment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">asymptotics</span> <span class=\"n\">real</span> <span class=\"n\">normed_space</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">divNearbyNumber</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365233094,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1686456346
    },
    {
        "content": "<p>In the proof I posted as an answer to your previous question, the first part showed that for <code>i : zmod n</code>, this condition is equivalent to <code>i = -y</code>.</p>",
        "id": 365233913,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686457081
    },
    {
        "content": "<p>I really think that you should drop <code>finset.range k</code> and use <code>zmod k</code> instead.</p>",
        "id": 365233982,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686457126
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">divNearbyNumber</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">hk0.ne'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">mem_range.2</span> <span class=\"o\">(</span><span class=\"n\">zmod.val_lt</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmod.nat_cast_val</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">zmod.int_coe_zmod_eq_zero_iff_dvd</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365234428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686457588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Andrew Gerads</span> has marked this topic as resolved.</p>",
        "id": 365234697,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686457822
    },
    {
        "content": "<p>FYI, you should know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.nat_mod\">docs#int.nat_mod</a></p>",
        "id": 365243226,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686463999
    }
]