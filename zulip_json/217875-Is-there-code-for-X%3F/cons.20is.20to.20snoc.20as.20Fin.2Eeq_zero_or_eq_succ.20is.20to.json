[
    {
        "content": "<p>Do we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Fin.eq_castSucc_or_eq_last</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j.castSucc</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>anywhere?</p>",
        "id": 385561053,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692230507
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Fin.eq_castSucc_or_eq_last</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j.castSucc</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">left</span>\n    <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">castSucc_mk</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">right</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Fin.eq_of_val_eq</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_ofNat_eq_mod</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt.base</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">Nat.eq_of_lt_succ_of_not_lt</span> <span class=\"n\">hi</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 385563012,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692231380
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.snocInduction#doc\">docs#Fin.snocInduction</a> maybe?</p>",
        "id": 385567842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692233097
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.consCases#doc\">docs#Fin.consCases</a> is the lemma that I think we should actually have a <code>snoc</code> version of</p>",
        "id": 385568168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692233180
    },
    {
        "content": "<p>I'm starting to think we should have a <code>to_snoc</code> modifier like <code>to_additive</code> for some of these, seems like a bunch of totally analogous lemmas.</p>\n<div class=\"codehilite\" data-code-language=\"Todotxt\"><pre><span></span><code>cons &lt;-&gt; snoc\ntail &lt;-&gt; init\nsucc &lt;-&gt; castSucc\nzero &lt;-&gt; last\npred &lt;-&gt; ???\n</code></pre></div>",
        "id": 385572699,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692234922
    },
    {
        "content": "<p>Or more simply a <code>reverse</code> function, some lemmas about it, and then use that to prove things about snoc type functions</p>",
        "id": 385572836,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692234969
    },
    {
        "content": "<p>(In fact, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.rev#doc\">docs#Fin.rev</a> exists)</p>",
        "id": 385590294,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1692244497
    },
    {
        "content": "<p>Is there any hope of this? I can define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">init_eq_reverse_tail_reverse</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">init</span> <span class=\"n\">q</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but then I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">k</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">castSucc</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>Is there some way of getting lean to know these types are the same?</p>",
        "id": 394101031,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696094315
    },
    {
        "content": "<p>Is this a use case for heterogenous equality?</p>",
        "id": 394101053,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696094361
    },
    {
        "content": "<p>I would recommend composing with <code>Fin.cast</code> on one side</p>",
        "id": 394101251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696094574
    },
    {
        "content": "<p>Sweet, that's exactly what I'm looking for, thanks.</p>",
        "id": 394101291,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696094641
    },
    {
        "content": "<p>Hmm, maybe I spoke too soon. It seems <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cast#doc\">docs#Fin.cast</a> casts <code>Fin n</code> to <code>Fin m</code> when <code>n = m</code>. But what I need is to cast <code>alpha i</code> to <code>alpha j</code> where <code>i = j</code> are equal elements, both of <code>Fin (n + 1)</code></p>",
        "id": 394102333,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696095699
    },
    {
        "content": "<p>I think I want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cast#doc\">docs#cast</a></p>",
        "id": 394102901,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696096208
    },
    {
        "content": "<p>I'm not sure if there's a reason to prefer <code>Eq.cast</code> or <code>▸</code> (\\t), but here's a starting place using the latter</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Fin</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">castSucc_eq_rev_succ_rev</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">castSucc</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">init_eq_reverse_tail_reverse</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">init</span> <span class=\"n\">q</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">castSucc_eq_rev_succ_rev</span> <span class=\"n\">k</span> <span class=\"bp\">▸</span> <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 394103864,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696097377
    },
    {
        "content": "<p>You could also change your goal to <code>HEq (init q k) (reverse (tail (reverse q)) k)</code></p>",
        "id": 394103933,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696097431
    },
    {
        "content": "<p>It works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">init_eq_reverse_tail_reverse</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">init</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">_root_.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">castSucc_eq_rev_succ_rev</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">)))</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">init</span><span class=\"o\">,</span> <span class=\"n\">reverse</span><span class=\"o\">,</span> <span class=\"n\">tail</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">cast_eq_iff_heq</span><span class=\"o\">,</span> <span class=\"n\">castSucc_eq_rev_succ_rev</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg_heq</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 394104758,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696098581
    },
    {
        "content": "<p><code>snoc_eq_reverse_cons_reverse</code> being tricky though</p>",
        "id": 394104943,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696098711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span>  I'm a beginner and I'm curious, does your proof of <code>castSucc_eq_rev_succ_rev</code> look much different from mine?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Fin</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_rev</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">castSucc</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">val_succ</span><span class=\"o\">,</span> <span class=\"n\">val_rev</span><span class=\"o\">,</span> <span class=\"n\">coe_castSucc</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_sub_succ_eq_sub</span><span class=\"o\">]</span>\n  <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">from</span> <span class=\"n\">k.is_lt</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">from</span> <span class=\"n\">is_le'</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rev_succ_rev</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">castSucc</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Fin</span>\n</code></pre></div>",
        "id": 394109689,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696103807
    },
    {
        "content": "<p>I have been using this software for years now and I still do not know how to prove lemmas about tsub, I had just sorried it</p>",
        "id": 394112850,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696107756
    },
    {
        "content": "<p>There should be a <code>zify!</code> tactic which just assumes every <code>tsub</code> it sees is nondegenerate and then throws off the proofs it needs to throw off.</p>",
        "id": 394113376,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696108465
    },
    {
        "content": "<p>Can I steal this? (also I think the one with succ should be the one it simplifies to).</p>",
        "id": 394113916,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696108946
    },
    {
        "content": "<p>Sure!</p>",
        "id": 394116544,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696111017
    },
    {
        "content": "<p>I was thinking that the simp normal form should push <code>rev</code>s to the outside like how there's a simp lemma for <code>-(a + b) = -b - a</code></p>",
        "id": 394116734,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696111161
    },
    {
        "content": "<p>Maybe. My sort of goal with all of this is to make all the things on the right hand side of the comment above simplify to their right hand counterparts so we can easily reduce to one bigger API.</p>",
        "id": 394117384,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696111796
    },
    {
        "content": "<p>I think I mixed myself up. You're right. We push negs to the inside, so we should do the same with <code>rev</code>s.</p>",
        "id": 394117641,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696112115
    },
    {
        "content": "<p>Playing around with this, after I proved that <code>_ ▸ (reverse (reverse q)) = q</code>, I realized I would really want to be able to float these casts in and out of expressions, so I tried to prove <code>_ ▸ (reverse q) = reverse (_ ▸ q)</code> Unfortunately, I think it's impossible. It's similar to the following statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_behaves</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- unprovable, right? we can't prove anything about the result of applying casted functions.</span>\n</code></pre></div>",
        "id": 394147062,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696135595
    },
    {
        "content": "<p>I PRed some of the above lemmas: <a href=\"https://github.com/leanprover/std4/pull/277\">std4#277</a></p>",
        "id": 394149533,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696136823
    },
    {
        "content": "<p>I think you can prove that with <code>revert h</code>, <code>rw [&lt;-funext_iff]</code>, <code>rintro rfl</code> or similar</p>",
        "id": 394182455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696153641
    },
    {
        "content": "<p>If <code>rw</code> doesn't work then applying <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=forall_prop_congr#doc\">docs#forall_prop_congr</a> or similar might</p>",
        "id": 394182680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696153726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/cons.20is.20to.20snoc.20as.20Fin.2Eeq_zero_or_eq_succ.20is.20to/near/394113376\">said</a>:</p>\n<blockquote>\n<p>There should be a <code>zify!</code> tactic which just assumes every <code>tsub</code> it sees is nondegenerate and then throws off the proofs it needs to throw off.</p>\n</blockquote>\n<p>Can you open an issue for this? It sounds like a nice idea and it would be great if it wasn't forgotten. There are definitely people out there (myself included) that look at the tactics issues when bored and want a small project to implement.</p>",
        "id": 394216423,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1696169751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/cons.20is.20to.20snoc.20as.20Fin.2Eeq_zero_or_eq_succ.20is.20to/near/394216423\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/cons.20is.20to.20snoc.20as.20Fin.2Eeq_zero_or_eq_succ.20is.20to/near/394113376\">said</a>:</p>\n<blockquote>\n<p>There should be a <code>zify!</code> tactic which just assumes every <code>tsub</code> it sees is nondegenerate and then throws off the proofs it needs to throw off.</p>\n</blockquote>\n<p>Can you open an issue for this? It sounds like a nice idea and it would be great if it wasn't forgotten. There are definitely people out there (myself included) that look at the tactics issues when bored and want a small project to implement.</p>\n</blockquote>\n<p>Done! <a href=\"https://github.com/leanprover-community/mathlib4/pull/7450\">#7450</a></p>",
        "id": 394218187,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696170502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/cons.20is.20to.20snoc.20as.20Fin.2Eeq_zero_or_eq_succ.20is.20to/near/394182455\">said</a>:</p>\n<blockquote>\n<p>I think you can prove that with <code>revert h</code>, <code>rw [&lt;-funext_iff]</code>, <code>rintro rfl</code> or similar</p>\n</blockquote>\n<p>That approach doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_behaves</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.funext_iff</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ (fun h ↦ cast _ (f i)) = fun h ↦ cast _ f i</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- error: our goal is not an implication</span>\n</code></pre></div>",
        "id": 394234662,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1696178534
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_behaves</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">pi_congr</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">forall_prop_congr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Iff.rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Function.funext_iff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 394254989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696190160
    }
]