[
    {
        "content": "<p>I'm pretty sure we don't have this. Am I wrong? Feel free to golf.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Normed.Field.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Filter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Bornology</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tendsto_inv₀_cobounded</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">Inv.inv</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cobounded</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">comap_norm_atTop</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">NormedAddCommGroup.tendsto_nhds_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[(</span><span class=\"n\">atTop_basis.comap</span> <span class=\"o\">(</span><span class=\"bp\">‖·‖</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)]</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_Ici</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_inv</span><span class=\"o\">,</span> <span class=\"n\">inv_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">hε</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">inv_lt_inv</span> <span class=\"n\">hε</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hε</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">half_lt_self</span> <span class=\"n\">hε</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Filter</span>\n</code></pre></div>",
        "id": 400592068,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699296512
    },
    {
        "content": "<p>We should add <code>comap Inv.inv (𝓝[≠] 0) = cobounded k</code></p>",
        "id": 400663773,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699332842
    },
    {
        "content": "<p>Yes, I have that in my draft.</p>",
        "id": 400663816,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699332857
    },
    {
        "content": "<p>I'll PR shortly.</p>",
        "id": 400663846,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699332878
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8234\">#8234</a></p>",
        "id": 400684072,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699343998
    },
    {
        "content": "<p>I added more lemmas, revived my old branch with <code>(nhds a)⁻¹ = nhds a⁻¹</code>, and made your PR depend on mine. If you prefer to merge the old version, then review my modifications, then feel free to revert your branch and merge the PR.</p>",
        "id": 400857084,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699411969
    },
    {
        "content": "<p>BTW, once this PR is merged (one way or another), I'm going to get rid of <code>comap norm atTop</code>.</p>",
        "id": 400858609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699412541
    },
    {
        "content": "<p>Yeah, I was planning on that too, but if you want to that's fine.</p>",
        "id": 400858709,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699412579
    },
    {
        "content": "<p>I started in <a href=\"https://github.com/leanprover-community/mathlib4/tree/YK-comap-norm-atTop\">branch#YK-comap-norm-atTop</a></p>",
        "id": 400867933,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699417263
    }
]