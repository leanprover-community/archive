[
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.abs_log_sub_add_sum_range_le#doc\">docs#Real.abs_log_sub_add_sum_range_le</a> , but I can't find an analogue for the complex logarithm.<br>\nWhat I really need is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">Complex.log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(which follows by a fairly rough estimate of the power series, but the power series expansion seems to be missing as well -- there are statements like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=expSeries_div_hasSum_exp#doc\">docs#expSeries_div_hasSum_exp</a> on the exponential series, but nothing mentioning \"logSeries\".)</p>\n<p>Wasn't there some activity on holo-/meromorphic functions and power series at some point?</p>",
        "id": 401637775,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699820336
    },
    {
        "content": "<p>I think one possible way to get something like this is to use<br>\n(*) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mfrac><mi>z</mi><mrow><mn>1</mn><mo>+</mo><mi>t</mi><mi>z</mi></mrow></mfrac><mtext> </mtext><mi>d</mi><mi>t</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\log(1 + z) = \\int_0^1 \\frac{z}{1+tz}\\,dt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.476em;vertical-align:-0.9119em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.564em;\"><span style=\"top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1076em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span></span></span></span>,<br>\nthen<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\">∣</mi><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>z</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mrow><mo fence=\"true\">∣</mo><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mfrac><mrow><mo>−</mo><mi>t</mi><msup><mi>z</mi><mn>2</mn></msup></mrow><mrow><mn>1</mn><mo>+</mo><mi>t</mi><mi>z</mi></mrow></mfrac><mtext> </mtext><mi>d</mi><mi>t</mi><mo fence=\"true\">∣</mo></mrow><mo>≤</mo><mfrac><mrow><mi mathvariant=\"normal\">∣</mi><mi>z</mi><msup><mi mathvariant=\"normal\">∣</mi><mn>2</mn></msup></mrow><mrow><mn>1</mn><mo>−</mo><mi mathvariant=\"normal\">∣</mi><mi>z</mi><mi mathvariant=\"normal\">∣</mi></mrow></mfrac><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mi>t</mi><mtext> </mtext><mi>d</mi><mi>t</mi><mo>=</mo><mfrac><mrow><mi mathvariant=\"normal\">∣</mi><mi>z</mi><msup><mi mathvariant=\"normal\">∣</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi mathvariant=\"normal\">∣</mi><mi>z</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle |\\log(1+z) - z| = \\left|\\int_0^1 \\frac{-tz^2}{1+tz}\\,dt\\right| \\le \\frac{|z|^2}{1-|z|} \\int_0^1 t\\,dt = \\frac{|z|^2}{2(1-|z|)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.514em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.45em;\"><span class=\"pstrut\" style=\"height:4.4em;\"></span><span style=\"width:0.333em;height:2.400em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.333em' height='2.400em' viewBox='0 0 333 2400'><path d='M145 15 v585 v1200 v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v-1200 v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v1200 v585 h43z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.564em;\"><span style=\"top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4911em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord mathnormal\">t</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.45em;\"><span class=\"pstrut\" style=\"height:4.4em;\"></span><span style=\"width:0.333em;height:2.400em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.333em' height='2.400em' viewBox='0 0 333 2400'><path d='M145 15 v585 v1200 v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v-1200 v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v1200 v585 h43z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.5em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4911em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">∣</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.564em;\"><span style=\"top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4271em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4911em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>.</p>\n<p>What would be the idiomatic way to obtain (*)? I think I can take it from there.</p>",
        "id": 401739260,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699873125
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=integral_inv_of_pos#doc\">docs#integral_inv_of_pos</a> together with <del>docs#MeasureTheory.integral_add_left_eq_self</del> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_comp_add_left#doc\">docs#intervalIntegral.integral_comp_add_left</a> should get you most of the way</p>",
        "id": 401752782,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699878618
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=integral_inv_of_pos#doc\">docs#integral_inv_of_pos</a> is for the <em>real</em> logarithm. but I need it for the <em>complex</em> one.</p>",
        "id": 401752971,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699878711
    },
    {
        "content": "<p>Albeit for a real (but complex-valued) path integral...</p>",
        "id": 401753123,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699878764
    },
    {
        "content": "<p>Then I'm not sure. Maybe it's instructive to look how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=integral_exp_mul_complex#doc\">docs#integral_exp_mul_complex</a>  is derived <del>from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=integral_exp#doc\">docs#integral_exp</a></del></p>",
        "id": 401753675,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699878966
    },
    {
        "content": "<p>There is <code>Complex_differentiableAt_xxx</code>, for <code>xxx</code> in <code>cos, cosh, exp, Gamma, sin, sinh, tan</code>, but not <code>log</code>!<br>\nWhy did the complex logarithm receive so little love?</p>",
        "id": 401801734,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699892442
    },
    {
        "content": "<p>because it's multi-valued?</p>",
        "id": 401801978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699892495
    },
    {
        "content": "<p>It is still differentiable outside the negative real axis.</p>",
        "id": 401802184,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699892541
    },
    {
        "content": "<p>(The principal branch, which is how <code>Complex.log</code> is defined.)</p>",
        "id": 401802292,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699892566
    },
    {
        "content": "<p>Also, its multi-valuedness is what makes it more interesting!</p>",
        "id": 401802424,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699892597
    },
    {
        "content": "<p>Possibly because nobody's used it much so far</p>",
        "id": 401806549,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699893742
    },
    {
        "content": "<p>I would have thought that <code>log</code> would be included as soon as somebody does special functions...</p>",
        "id": 401806703,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699893794
    },
    {
        "content": "<p>Now I am having the problem that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_deriv_eq_sub%27#doc\">docs#intervalIntegral.integral_deriv_eq_sub'</a> requires <code>deriv f = f'</code> for <code>f</code> a function on all of the reals, where it should suffice to have it on the relevant interval. (My <code>f </code> is <code>t ↦ log (1 + t * z)</code>, and of course I would like to use the chain rule. I think that even assuming</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Complex.hasDerivAt_log</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z.arg</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>I cannot get to <code>deriv log &lt;something&gt;</code> easily, since the <code>&lt;something&gt;</code> would have to be zero along the negative real axis.)</p>\n<p>Ideas?</p>",
        "id": 401807361,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699894000
    },
    {
        "content": "<p>I would think that it would be sufficient to assume <code>HasDerivAt f (f' x) x</code> for all <code>x</code> in <code>Set.uIcc a b</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_deriv_eq_sub%27#doc\">docs#intervalIntegral.integral_deriv_eq_sub'</a>.</p>",
        "id": 401807800,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699894177
    },
    {
        "content": "<p>Also, why use <code>uIcc</code> instead of <code>Icc</code> for real intervals?</p>",
        "id": 401808015,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699894258
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=integral_eq_sub_of_hasDerivAt#doc\">docs#integral_eq_sub_of_hasDerivAt</a> help?</p>",
        "id": 401809036,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699894639
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_eq_sub_of_hasDerivAt#doc\">docs#intervalIntegral.integral_eq_sub_of_hasDerivAt</a> ? Possibly; I'll have a look.</p>",
        "id": 401823832,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699900424
    },
    {
        "content": "<p>OK, I've made some progress.</p>\n<p>Now, in order to prove that the complex log has the correct derivative, I would like to use the characterization of complex differentiability in terms of real derivatives (Cauxhy-Riemann equations). However, I can't find anything resembling that in Mathlib. I'd appreciate any pointers!</p>",
        "id": 401842261,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699908453
    },
    {
        "content": "<p>ha ha Cauchy-Riemann is just the sort of thing that I can imagine that we don't have, because the partial derivative people don't like to choose coordinates :-)</p>",
        "id": 401844079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699909139
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Complex/RealDeriv.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/Complex/RealDeriv.html</a></p>",
        "id": 401845678,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1699909726
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">DifferentiableAt.conformalAt</span><span class=\"bp\">`</span> <span class=\"n\">states</span> <span class=\"n\">that</span> <span class=\"n\">a</span> <span class=\"n\">real</span><span class=\"bp\">-</span><span class=\"n\">differentiable</span> <span class=\"n\">function</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">nonvanishing</span>\n<span class=\"n\">differential</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"n\">complex</span> <span class=\"n\">plane</span> <span class=\"n\">into</span> <span class=\"n\">an</span> <span class=\"n\">arbitrary</span> <span class=\"n\">complex</span><span class=\"bp\">-</span><span class=\"n\">normed</span> <span class=\"n\">space</span> <span class=\"n\">is</span> <span class=\"n\">conformal</span> <span class=\"n\">at</span> <span class=\"n\">a</span> <span class=\"n\">point</span>\n<span class=\"k\">if</span> <span class=\"n\">it's</span> <span class=\"n\">holomorphic</span> <span class=\"n\">at</span> <span class=\"n\">that</span> <span class=\"n\">point.</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">version</span> <span class=\"n\">of</span> <span class=\"n\">Cauchy</span><span class=\"bp\">-</span><span class=\"n\">Riemann</span> <span class=\"n\">equations.</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">##</span> <span class=\"n\">TODO</span>\n\n<span class=\"bp\">*</span> <span class=\"n\">The</span> <span class=\"n\">classical</span> <span class=\"n\">form</span> <span class=\"n\">of</span> <span class=\"n\">Cauchy</span><span class=\"bp\">-</span><span class=\"n\">Riemann</span> <span class=\"n\">equations</span>\n</code></pre></div>",
        "id": 401845727,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1699909750
    },
    {
        "content": "<p>Could somebody please do it? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 401845796,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699909786
    },
    {
        "content": "<p>or prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Complex.hasDerivAt_log</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z.arg</span> <span class=\"bp\">≠</span> <span class=\"n\">Real.pi</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401845921,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699909831
    },
    {
        "content": "<p>Sorry, I'm confused, is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.hasStrictDerivAt_log#doc\">docs#Complex.hasStrictDerivAt_log</a> no good?</p>",
        "id": 401845969,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1699909856
    },
    {
        "content": "<p>It seems to be hard to find, compared with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.hasDerivAt_exp#doc\">docs#Complex.hasDerivAt_exp</a> and friends.</p>",
        "id": 401846132,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699909930
    },
    {
        "content": "<p>At least, I think I tried fairly hard and did not find it...</p>",
        "id": 401846313,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699910023
    },
    {
        "content": "<p>This is probably a useful form for getting the real derivative (as a matrix): <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasStrictDerivAt.complexToReal_fderiv#doc\">docs#HasStrictDerivAt.complexToReal_fderiv</a></p>",
        "id": 401846584,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1699910130
    },
    {
        "content": "<p>There is no <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.hasDerivAt_log#doc\">docs#Complex.hasDerivAt_log</a> . Why not?</p>",
        "id": 401847814,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699910724
    },
    {
        "content": "<p>Likely just laziness on the part of the person who added the StrictDeriv version, it would be a welcome (1-line) pr.</p>",
        "id": 401847954,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1699910795
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">a</span><span class=\"bp\">‖</span> <span class=\"bp\">-</span> <span class=\"bp\">‖</span><span class=\"n\">b</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">‖</span>\n</code></pre></div>\n<p>is not found by <code>exact?</code>. There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=norm_sub_norm_le#doc\">docs#norm_sub_norm_le</a> , but apparently no version with a sum on the right.</p>",
        "id": 401853898,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699913632
    },
    {
        "content": "<p>Also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=norm_le_add_norm_add#doc\">docs#norm_le_add_norm_add</a> is close, but this seems worth adding as well!</p>",
        "id": 401854399,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699913893
    },
    {
        "content": "<p><span aria-label=\"bed\" class=\"emoji emoji-1f6cf\" role=\"img\" title=\"bed\">:bed:</span></p>",
        "id": 401856458,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699914844
    },
    {
        "content": "<p>I have the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">xxx</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">z₁</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I assume this would be a reasonable addition to Mathlib (in particular since I'm using it to prove further results).<br>\nWhat would be a good name for this lemma? <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 402915734,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700343064
    },
    {
        "content": "<p>Let's be mathlib-y -- can you generalize the domain to IsROrC and the codomain to a normed space over that field?</p>",
        "id": 402916601,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700343617
    },
    {
        "content": "<p>I can try, but not tonight.</p>",
        "id": 402916646,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700343649
    },
    {
        "content": "<p>I think it would make sense to have a similar name to the names for FTC-2, like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=intervalIntegral.integral_eq_sub_of_hasDerivAt#doc\">docs#intervalIntegral.integral_eq_sub_of_hasDerivAt</a>.  This version uses <code>MeasureTheory.integral</code>, not <code>intervalIntegral</code>, so maybe it should be called something like <code>MeasureTheory.integral_eq_sub_of_hasDerivAt</code> ... that is still not a perfect name since it doesn't exactly match the form of theorem you have, but it can be a place to get started.</p>",
        "id": 402916930,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700343925
    },
    {
        "content": "<p>I'm trying to prove invariance of derivatives under shift of the argument</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_HasDerivAt.comp_add</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">𝕜'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">h'</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but I'm stuck since apparently neither <code>HasDerivAt.comp</code> nor <code>HasDerivAt.scomp</code> seem to apply. The first one requires the <em>outer</em> function to be of type <code>𝕜' → 𝕜'</code>, and when I try to use the second, I run into type class problems.<br>\n(BTW, <code>apply?</code> has proven to be decidedly unhelpful with goals involving <code>HasDerivAt</code>. It basically never suggests lemmas like <code>HasDerivAt.add</code> etc.)</p>\n<p>I need it only in the case when <code>𝕜 = 𝕜' = ℂ</code> (then <code>HasDerivAt.comp</code> works), but I'm surprised that the statement above is not in Mathib (unless I have missed something).</p>",
        "id": 402921540,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700347507
    },
    {
        "content": "<p>Does this help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">_HasDerivAt.comp_add</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">𝕜'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">h'</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hasDerivAt_id'</span> <span class=\"n\">x</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">const_add</span> <span class=\"n\">a</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">HasDerivAt.scomp</span>  <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:=</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">hh</span> <span class=\"n\">this</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_def</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 402923974,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700349437
    },
    {
        "content": "<p>I notice that you use a \"forward reasoning\" approach here, which is what I was ending up doing in similar situations.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>suggests</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_hasFDerivAt.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">HasStrictDerivAt.hasDerivAt</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivWithinAt_univ.mp</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_tendsto.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_isLittleO.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_tendsto_slope_zero.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_tendsto_slope.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_isLittleO_nhds_zero.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_hasDerivAt_of_ne</span> <span class=\"bp\">?</span><span class=\"n\">f_diff</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hg</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Filter.EventuallyEq.hasDerivAt_iff</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">HasDerivAt.congr_of_eventuallyEq</span> <span class=\"bp\">?</span><span class=\"n\">h</span> <span class=\"bp\">?</span><span class=\"n\">h₁</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Filter.EventuallyEq.hasDerivAt_iff</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">HasDerivWithinAt.hasDerivAt</span> <span class=\"bp\">?</span><span class=\"n\">h</span> <span class=\"bp\">?</span><span class=\"n\">hs</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_hasDerivAt_of_ne'</span> <span class=\"bp\">?</span><span class=\"n\">f_diff</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hg</span> <span class=\"n\">x</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendstoUniformly</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span> <span class=\"n\">x</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendstoUniformlyOnFilter</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendsto_locally_uniformly_on'</span> <span class=\"bp\">?</span><span class=\"n\">hs</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span> <span class=\"bp\">?</span><span class=\"n\">hx</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendstoUniformlyOn</span> <span class=\"bp\">?</span><span class=\"n\">hs</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span> <span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendstoLocallyUniformlyOn</span> <span class=\"bp\">?</span><span class=\"n\">hs</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span> <span class=\"bp\">?</span><span class=\"n\">hx</span>\n</code></pre></div>\n<p>but misses the \"obvious\" suggestion <code>HasDerivAt.add</code> (and <code>exact?</code> \"could not close the goal,\" which can be done by <code>exact HasDerivAt.add hf hg</code>).<br>\nReplacing <code>apply?</code> above by <code>refine HasDerivAt.add ?_ ?_</code> works here, so I'm a bit at a loss why this is.<br>\n<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> </p>\n<p>In more involved use cases, the <code>refine HasDerivAt.... ?_ ?_</code> tends to get stuck in typeclass search, which I assume makes it hard to provide automation for this kind of situation.</p>",
        "id": 403007421,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700398011
    },
    {
        "content": "<p>I think I saw it mentioned somewhere that the lambdas in the conclusion of theorems like that make it hard on <code>apply?</code></p>",
        "id": 403009168,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700399627
    },
    {
        "content": "<p>No, it's something more basic than that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Tactic.librarySearch.lemmas</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>causes <code>exact?</code> / <code>apply?</code> to show that lemmas that it will consider, before it tries applying any. <code>HasDerivAt.add</code> isn't in this list, but I don't understand why yet.</p>",
        "id": 403073657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700443206
    },
    {
        "content": "<p>Oh, no <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> is correct.</p>",
        "id": 403074856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700443872
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>works fine.</p>",
        "id": 403074869,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700443883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span>, does your replacement for <code>DiscrTree</code> cope with this situation?</p>",
        "id": 403075005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700443950
    },
    {
        "content": "<p>If so, what do we need to do to get it into Std?</p>",
        "id": 403075017,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700443960
    },
    {
        "content": "<p>I'm not sure why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">HasDerivAt.add</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"bp\">+</span> <span class=\"n\">g'</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is written like that in the first place, instead of just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">HasDerivAt.add</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"bp\">+</span> <span class=\"n\">g'</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Mathlib seems to compile happily, and this would make <code>exact?</code> work here.</p>",
        "id": 403075430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700444210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, could I summon one of you to see if you have an idea about this last question?</p>",
        "id": 403075648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700444333
    },
    {
        "content": "<p>Okay, I have convinced myself that we can't really change this lemmas. Sorry for the noise.</p>",
        "id": 403079026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700446583
    },
    {
        "content": "<p>Either <code>rw</code> won't work in the presence of a <code>fun</code> in the goal, or <code>convert</code> gives bad goals.</p>",
        "id": 403079052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700446610
    },
    {
        "content": "<p>(The <code>HasDerivAt.add</code> above does seem to be able to be changed, but its relatives about <code>sub</code> and so and cause problems.)</p>",
        "id": 403079092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700446647
    },
    {
        "content": "<p>One can see the problem with the current <code>DiscrTree</code> implementation via:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">HasDerivAt.add</span>\n<span class=\"k\">#check</span> <span class=\"n\">HasDerivAt</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch.DeclMod</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">HasDerivAt.add</span>\n  <span class=\"n\">Mathlib.Tactic.LibrarySearch.processLemma</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which prints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.DiscrTree.Key.const</span> <span class=\"bp\">`</span><span class=\"n\">HasDerivAt</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span>\n     <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span>\n     <span class=\"n\">Lean.Meta.DiscrTree.Key.other</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.const</span> <span class=\"bp\">`</span><span class=\"n\">HAdd.hAdd</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span>\n     <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span>\n     <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.star</span><span class=\"o\">],</span>\n   <span class=\"bp\">`</span><span class=\"n\">HasDerivAt.add</span><span class=\"o\">,</span>\n   <span class=\"n\">Mathlib.Tactic.LibrarySearch.DeclMod.none</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>The <code>.other</code> key for the lambda is the problem here: it then refuses to match <code>f + g</code>.</p>\n<p>As a hack, I could replace these <code>.other</code> keys with <code>.star</code> when building the <code>DiscrTree</code> for <code>exact?</code>...</p>\n<p>Hoping that <span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span> has good news otherwise. :-)</p>",
        "id": 403079130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700446681
    },
    {
        "content": "<p><code>convert</code> worked fine with such lemmas in Lean 3. I believe it's just less brave in Lean 4 (for performance reasons).</p>",
        "id": 403113980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700467428
    },
    {
        "content": "<p>My version of DiscrTree would encode <code>HasDerivAt</code> as follows:<br>\n<code>[⟨HasDerivAt, 8⟩,  *0,  *1,  *2,  *3,  *4,  λ,  ⟨HAdd.hAdd, 6⟩,  *2,  *2,  *2,  *5,  *6,  *7,  ⟨HAdd.hAdd, 6⟩,  *2,  *2,  *2,  *8,  *9,  *10,  *11]</code></p>",
        "id": 403148048,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700479062
    },
    {
        "content": "<p>So yes, it indexes the lambda and the <code>+</code> inside.</p>",
        "id": 403148183,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700479108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Power.20series.20.2F.20bound.20for.20complex.20logarithm/near/403007421\">said</a>:</p>\n<blockquote>\n<p>I notice that you use a \"forward reasoning\" approach here, which is what I was ending up doing in similar situations.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>suggests</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_hasFDerivAt.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">HasStrictDerivAt.hasDerivAt</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivWithinAt_univ.mp</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_tendsto.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_isLittleO.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_tendsto_slope_zero.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_tendsto_slope.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_iff_isLittleO_nhds_zero.mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_hasDerivAt_of_ne</span> <span class=\"bp\">?</span><span class=\"n\">f_diff</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hg</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Filter.EventuallyEq.hasDerivAt_iff</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">HasDerivAt.congr_of_eventuallyEq</span> <span class=\"bp\">?</span><span class=\"n\">h</span> <span class=\"bp\">?</span><span class=\"n\">h₁</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Filter.EventuallyEq.hasDerivAt_iff</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">HasDerivWithinAt.hasDerivAt</span> <span class=\"bp\">?</span><span class=\"n\">h</span> <span class=\"bp\">?</span><span class=\"n\">hs</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_hasDerivAt_of_ne'</span> <span class=\"bp\">?</span><span class=\"n\">f_diff</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hg</span> <span class=\"n\">x</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendstoUniformly</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span> <span class=\"n\">x</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendstoUniformlyOnFilter</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendsto_locally_uniformly_on'</span> <span class=\"bp\">?</span><span class=\"n\">hs</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span> <span class=\"bp\">?</span><span class=\"n\">hx</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendstoUniformlyOn</span> <span class=\"bp\">?</span><span class=\"n\">hs</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span> <span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">hasDerivAt_of_tendstoLocallyUniformlyOn</span> <span class=\"bp\">?</span><span class=\"n\">hs</span> <span class=\"bp\">?</span><span class=\"n\">hf'</span> <span class=\"bp\">?</span><span class=\"n\">hf</span> <span class=\"bp\">?</span><span class=\"n\">hfg</span> <span class=\"bp\">?</span><span class=\"n\">hx</span>\n</code></pre></div>\n<p>but misses the \"obvious\" suggestion <code>HasDerivAt.add</code> (and <code>exact?</code> \"could not close the goal,\" which can be done by <code>exact HasDerivAt.add hf hg</code>).<br>\nReplacing <code>apply?</code> above by <code>refine HasDerivAt.add ?_ ?_</code> works here, so I'm a bit at a loss why this is.<br>\n<span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> </p>\n<p>In more involved use cases, the <code>refine HasDerivAt.... ?_ ?_</code> tends to get stuck in typeclass search, which I assume makes it hard to provide automation for this kind of situation.</p>\n</blockquote>\n<p>The problem here is that there are two equivalent ways of adding two functions: <code>f + g</code> or <code>fun x =&gt; f x + g x</code>. The lemma you want to find uses <code>fun x =&gt; f x + g x</code>, and since the addition in <code>f + g</code> is not reducible, no version of <code>DiscrTree</code> will match up these expressions.</p>",
        "id": 403149431,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700479546
    },
    {
        "content": "<p>This makes me wonder whether it would be a good idea for <code>DiscrTree</code> to attempt unfolding expressions further, and matching the unfolded expression. (In this case unfolding <code>f + g</code>)</p>",
        "id": 403154465,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700481477
    },
    {
        "content": "<p>Is there a particular reason why <code>hasDerivAt.add</code> uses <code>fun x =&gt; f x + g x</code> instead of <code>f + g</code>?</p>",
        "id": 403188004,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700492389
    },
    {
        "content": "<p>Have you read Scott's messages earlier in this thread starting with \"Okay, I have convinced myself\"?</p>",
        "id": 403195030,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700494426
    },
    {
        "content": "<p>Oh sorry, I hadn't. But I don't quite get it. This works fine for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 403209766,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700499503
    },
    {
        "content": "<p>looking at the code for <code>Lean.MVarId.congrCore!</code>, it loops through this list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lean.MVarId.congrPasses</span><span class=\"bp\">!</span> <span class=\"o\">:</span>\n    <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Congr</span><span class=\"bp\">!.</span><span class=\"n\">Config</span> <span class=\"bp\">→</span> <span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[(</span><span class=\"s2\">\"user congr\"</span><span class=\"o\">,</span> <span class=\"n\">userCongr</span><span class=\"bp\">?</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"s2\">\"hcongr lemma\"</span><span class=\"o\">,</span> <span class=\"n\">smartHCongr</span><span class=\"bp\">?</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"s2\">\"congr simp lemma\"</span><span class=\"o\">,</span> <span class=\"n\">congrSimp</span><span class=\"bp\">?</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"s2\">\"Subsingleton.helim\"</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">subsingletonHelim</span><span class=\"bp\">?</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"s2\">\"obvious funext\"</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">obviousFunext</span><span class=\"bp\">?</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"s2\">\"obvious hfunext\"</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">obviousHfunext</span><span class=\"bp\">?</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"s2\">\"congr_implies\"</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">congrImplies</span><span class=\"bp\">?'</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"s2\">\"congr_pi\"</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">congrPi</span><span class=\"bp\">?</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>And \"obvious funext\" seems to do the thing we want: matching <code>f + g</code> with a lambda using <code>funext</code>. (so the behaviour is expected)</p>",
        "id": 403211489,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700500105
    },
    {
        "content": "<p>So I don't see a problem with using <code>f + g</code> in the library lemma.</p>",
        "id": 403211585,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1700500142
    },
    {
        "content": "<p>Requiring <code>convert</code><em>is</em> a problem.</p>",
        "id": 403242211,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700512766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Power.20series.20.2F.20bound.20for.20complex.20logarithm/near/402916601\">said</a>:</p>\n<blockquote>\n<p>Let's be mathlib-y -- can you generalize the domain to IsROrC and the codomain to a normed space over that field?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> It seems I need to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">C</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">NormedSpace.restrictScalars</span> <span class=\"n\">ℝ</span> <span class=\"n\">C</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>to get the statement to type-check. The next problem is that I use <code>HasDerivAt.comp_ofReal</code> in the proof, which does not work with <code>C : IsROrC</code> in place of <code>ℂ</code>. The proof of this involves <code>Complex.ofRealClm.hasDerivAt</code> whose counterpart <code>IsROrC.ofRealClm.hasDerivAt</code> gives an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ContinuousLinearMap.hasDerivAt</span> <span class=\"n\">IsROrC.ofRealClm</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">IsROrC.ofRealClm</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ContinuousLinearMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">Real.semiring</span> <span class=\"n\">Real.semiring</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"n\">UniformSpace.toTopologicalSpace</span>\n    <span class=\"n\">Real.instAddCommMonoidReal</span> <span class=\"bp\">?</span><span class=\"n\">m.478</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">?</span><span class=\"n\">m.478</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PseudoMetricSpace.toUniformSpace</span> <span class=\"bp\">?</span><span class=\"n\">m.478</span> <span class=\"n\">SeminormedRing.toPseudoMetricSpace</span><span class=\"o\">))</span>\n    <span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">NormedSpace.toModule</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NormedSpace.toModule</span> <span class=\"n\">ℝ</span> <span class=\"bp\">?</span><span class=\"n\">m.478</span> <span class=\"n\">Real.normedField</span> <span class=\"n\">NonUnitalSeminormedRing.toSeminormedAddCommGroup</span>\n      <span class=\"n\">NormedAlgebra.toNormedSpace'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.467</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ContinuousLinearMap</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n    <span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"bp\">?</span><span class=\"n\">m.478</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">UniformSpace.toTopologicalSpace</span> <span class=\"bp\">?</span><span class=\"n\">m.478</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PseudoMetricSpace.toUniformSpace</span> <span class=\"bp\">?</span><span class=\"n\">m.478</span> <span class=\"n\">SeminormedAddCommGroup.toPseudoMetricSpace</span><span class=\"o\">))</span>\n    <span class=\"n\">AddCommGroup.toAddCommMonoid</span> <span class=\"n\">NormedSpace.toModule</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NormedSpace.toModule</span> <span class=\"n\">ℝ</span> <span class=\"bp\">?</span><span class=\"n\">m.478</span> <span class=\"n\">NontriviallyNormedField.toNormedField</span> <span class=\"n\">NormedAddCommGroup.toSeminormedAddCommGroup</span>\n      <span class=\"bp\">?</span><span class=\"n\">m.480</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.467</span>\n</code></pre></div>\n<p>Maybe someone can provide an analogue of <code>HasDerivAt.comp_ofReal</code> that works in the <code>ROrC</code> situation?</p>",
        "id": 403242388,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700512850
    },
    {
        "content": "<p>The instance is actually bad, since it conflicts with <code>NormedAlgebra.toNormedSpace'</code> when <code>E = C</code>.<br>\nMy statement is now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">xyz</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">C</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">NormedSpace.restrictScalars</span> <span class=\"n\">ℝ</span> <span class=\"n\">C</span> <span class=\"n\">E</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">z₁</span> <span class=\"bp\">•</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>which is perhaps not so nice. Is there a better way?</p>",
        "id": 403244410,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700513915
    },
    {
        "content": "<p>I'm also having the problem that <code>HasDerivAt.comp</code> does not work as it did previously (for <code>ℝ → ℂ → ℂ</code>) in the situation <code>ℝ → C → E</code>.  My derivative is of the form <code>z₁ • f' (z₀ + ↑t * z₁)</code>, but for <code>HasDerivAt.comp</code> it has to be <code>f' (z₀ + ↑t * z₁) * z₁</code>. I'm giving up for today.</p>",
        "id": 403245992,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700514651
    },
    {
        "content": "<p>It seems that the better version is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">xyz</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">C</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">ℝ</span> <span class=\"n\">C</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z₀</span> <span class=\"n\">z₁</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">z₁</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">z₁</span> <span class=\"bp\">•</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_eq_iff_eq_add'</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">z₀</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">z₁</span>\n  <span class=\"k\">have</span> <span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">IntervalIntegrable</span> <span class=\"o\">(</span><span class=\"n\">z₁</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"bp\">∘</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"n\">MeasureTheory.volume</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">ContinuousOn.const_smul</span> <span class=\"n\">hcont</span> <span class=\"n\">z₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">intervalIntegrable_of_Icc</span> <span class=\"n\">zero_le_one</span>\n  <span class=\"k\">have</span> <span class=\"n\">hderiv'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.uIcc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z₁</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"bp\">∘</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">t</span> <span class=\"n\">ht</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Set.uIcc_of_le</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">zero_le_one</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">ht</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">scomp</span> <span class=\"n\">t</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">↦</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">z₁</span><span class=\"o\">)</span> <span class=\"n\">z₁</span> <span class=\"n\">t</span>\n    <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">hasDerivAt_id</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smul_const</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_smul</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this.const_add</span> <span class=\"n\">z₀</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">integral_eq_sub_of_hasDerivAt</span> <span class=\"n\">hderiv'</span> <span class=\"n\">hint</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">integral_smul</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This directly applies in my use case.</p>\n<p>Is there some part of the naming convention that would apply to statements of the form <code>f (x + y) = f x + ...</code> with a variable <code>f</code>?<br>\nI guess one could state it in the form <code>f (x + y) - f x = ...</code> and call it <code>intervalIntegral_sub_eq_integral_unitInterval</code> or some such. Opinions?</p>",
        "id": 403645192,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700677758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 403646046,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700678086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Power.20series.20.2F.20bound.20for.20complex.20logarithm/near/402923974\">said</a>:</p>\n<blockquote>\n<p>Does this help?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">_HasDerivAt.comp_add</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">𝕜'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">h'</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hasDerivAt_id'</span> <span class=\"n\">x</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">const_add</span> <span class=\"n\">a</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">HasDerivAt.scomp</span>  <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:=</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">hh</span> <span class=\"n\">this</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_def</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I've golfed this down to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Translation in the domain does not change the derivative. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">HasDerivAt.comp_const_add</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">𝕜'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">h'</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_def</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">HasDerivAt.scomp</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:=</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">hh</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hasDerivAt_id'</span> <span class=\"n\">x</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">const_add</span> <span class=\"n\">a</span>\n\n<span class=\"sd\">/-- Translation in the domain does not change the derivative. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">HasDerivAt.comp_add_const</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">𝕜'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">NontriviallyNormedField</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAlgebra</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">𝕜'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜'</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">HasDerivAt</span> <span class=\"n\">h</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">HasDerivAt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">h'</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_def</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">HasDerivAt.scomp</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:=</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">hh</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hasDerivAt_id'</span> <span class=\"n\">x</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">add_const</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>and would now like to PR these lemmas. But I find it hard to find a good home for these. They need <code>Analysis.Calculus.Deriv.{Add|Comp}</code>. It seems that <code>Analysis.Calculus.LineDeriv.Basic</code> is about the only file that imports both, but this does not really seem appropriate. Should I make a new file <code>...Deriv.Shift</code> or so?</p>",
        "id": 403952648,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700826640
    },
    {
        "content": "<p>Files are pretty cheap. How about you do that and anyone who disagrees can comment on the pr</p>",
        "id": 403961665,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700830197
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8614\">#8614</a></p>",
        "id": 403981926,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700837783
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8615\">#8615</a> for the unit interval version of the Fundamental Theorem of Calculus (<code>xyz</code> in an earlier message).</p>",
        "id": 403984689,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700838852
    },
    {
        "content": "<p>I'm using this to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">log_sub_logTaylor_norm_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">z</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‖</span><span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">logTaylor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"bp\">‖</span><span class=\"n\">z</span><span class=\"bp\">‖</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">‖</span><span class=\"n\">z</span><span class=\"bp\">‖</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>logTaylor n z</code> is the value of the <code>n</code>th Taylor polynomial of <code>log (1+z)</code> at the point <code>z</code>.<br>\nThis is now in the file <code>ComplexLog.lean</code> <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts/tree/main/EulerProducts\">here</a>.</p>",
        "id": 403996318,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700844011
    },
    {
        "content": "<p>Next PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/9116\">#9116</a>, which (since I found it useful in my code) introduces a definition <code>Complex.slitPlane</code> for the set of complex numbers minus the closed negative real axis and proves some API lemmas. The PR also replaces conditions of the form <code>0 &lt; x.re  ∨ x.im ≠ 0</code> by <code>x ∈ slitPlane</code> in a bunch of files (and fixes the resulting failures in proofs). It has passed CI just now. Comments are welcome!</p>",
        "id": 408381957,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702767831
    }
]