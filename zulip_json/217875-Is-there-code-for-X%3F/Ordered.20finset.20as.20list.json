[
    {
        "content": "<p>I have a linearly ordered <code>Finset</code> and want it as a <code>List</code>, ordered \"correctly\". Do we have this? I know of <code>Finset.toList</code> but this doesn't care about the order on <code>J</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- J as a list, in the correct order -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">OrderedFinset.asList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 379954723,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1690702726
    },
    {
        "content": "<p>Can you just now sort it?</p>",
        "id": 379956009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690703244
    },
    {
        "content": "<p>Ok, I guess this works: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Sort</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">OrderedFinset.asList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">List.insertionSort</span> <span class=\"o\">(</span><span class=\"bp\">·≤·</span><span class=\"o\">)</span> <span class=\"n\">J.toList</span>\n</code></pre></div>",
        "id": 379956299,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1690703346
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sort#doc\">docs#Finset.sort</a></p>",
        "id": 379960035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690704630
    },
    {
        "content": "<p>That one is computable too</p>",
        "id": 379960056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690704641
    },
    {
        "content": "<p>Cool, thanks!</p>",
        "id": 379964301,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1690706136
    }
]