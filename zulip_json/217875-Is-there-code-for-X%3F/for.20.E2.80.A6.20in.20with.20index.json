[
    {
        "content": "<p>What is the idiomatic way to extend a </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"k\">do</span>\n  <span class=\"bp\">…</span>\n</code></pre></div>\n<p>iteration (where <code>a</code> could be an <code>Array</code>) if I also need the current index? Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>or would I iterate only over the indexes and use <code>a.get! i</code> or something else?</p>",
        "id": 395659809,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696844875
    },
    {
        "content": "<p>In the lean code itself I find this idiom:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">List.range</span> <span class=\"n\">params.size</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">param</span> <span class=\"o\">:=</span> <span class=\"n\">params</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 395660100,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696844967
    },
    {
        "content": "<p>In other places I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">as</span> <span class=\"k\">do</span>\n    <span class=\"bp\">…</span>\n    <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>so I guess the answer is “there is no idiomatic way (yet)”, and whatever works works :-)</p>",
        "id": 395666187,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696846911
    },
    {
        "content": "<p>For lists/arrays i think the following looks quite nice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">foo.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{i}, {a}\"</span>\n</code></pre></div>",
        "id": 395690556,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696855276
    },
    {
        "content": "<p>TIL we have parallel iteration.</p>",
        "id": 395690671,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696855320
    },
    {
        "content": "<p>For lists, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.enum#doc\">docs#List.enum</a></p>",
        "id": 395690858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696855368
    },
    {
        "content": "<p>But no <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.enum#doc\">docs#Array.enum</a>, and presumably that would be inefficient anyway</p>",
        "id": 395690936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696855393
    }
]