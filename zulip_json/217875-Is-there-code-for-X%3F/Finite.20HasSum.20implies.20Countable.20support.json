[
    {
        "content": "<p>Do we have something like <code>HasSum f c → f.support.Countable</code>, where <code>f : α → Real</code>? (Is it even true?)</p>",
        "id": 383209866,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691574192
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 383211196,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691574461
    },
    {
        "content": "<p>It should be true, there's an argument in <a href=\"http://math.se\">math.se</a>, I'll dig it up</p>",
        "id": 383211370,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691574493
    },
    {
        "content": "<p>There is one at <a href=\"https://math.stackexchange.com/a/4228200/53195\">https://math.stackexchange.com/a/4228200/53195</a>, not sure if it’s the most suitable argument to put into mathlib</p>",
        "id": 383216652,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691575524
    },
    {
        "content": "<p>Yes, a little care has to be taken because I think some of the argument can come from the fact there's no reordering allowed in mathlib</p>",
        "id": 383217332,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691575637
    },
    {
        "content": "<p>Without looking at the links: my instinct would be to prove<br>\n1) If you're summable then for all eps &gt; 0 there's a finite subset S of alpha with the property that the sum over any finite subset of alpha disjoint from S has abs value less than eps<br>\n2) If you're summable then for all eps &gt; 0 the set {x : |f(x)|&gt;eps} is finite<br>\n3) done</p>",
        "id": 383225529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691577043
    },
    {
        "content": "<p>Not pretty yet, but works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Instances.ENNReal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">HasSum.countable_support</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.support.Countable</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">eps</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">eps</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.support</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n    <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">):</span><span class=\"n\">Real</span><span class=\"o\">))</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Set.mem_iUnion_of_mem</span> <span class=\"n\">N</span> <span class=\"n\">hN.le</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Set.Countable.mono</span> <span class=\"n\">hf</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.countable_iUnion_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Set.Finite.countable</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Set.finite_coe_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Finite.of_summable_const</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">))</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">positivity</span>\n  <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">indicator</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">NNReal</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n      <span class=\"n\">NNReal.summable_of_le</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">Set.indicator_le</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">↦</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">summable_subtype_iff_indicator</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">NNReal.summable_coe</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 383257282,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691583253
    },
    {
        "content": "<p>I think there's already the statement that if eps&gt;0 then there's some natural n&gt;0 such that 1/n&lt;eps.</p>",
        "id": 383260611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691583829
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_nat_one_div_lt#doc\">docs#exists_nat_one_div_lt</a></p>",
        "id": 383261086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691583921
    },
    {
        "content": "<p>Thanks! Indeed a bit better (updated post above).<br>\nPR’ed at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6473\">https://github.com/leanprover-community/mathlib4/pull/6473</a></p>",
        "id": 383267971,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691585138
    }
]