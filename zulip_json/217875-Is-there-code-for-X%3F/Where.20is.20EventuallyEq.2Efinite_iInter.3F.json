[
    {
        "content": "<p>I needed the following basic fact about filters: if a finite collection of sets agree in the filter, then their intersections do also:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">EventuallyEq.finite_iInter</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Filter.EventuallyEq</span> <span class=\"n\">Filter.Eventually</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">Filter.biInter_finset_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Filter.mem_of_superset</span> <span class=\"n\">h</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ha</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">change</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ball_congr</span> <span class=\"n\">ha</span>\n</code></pre></div>\n<p>For some reason I was unable to find many useful methods in the <code>Filter</code> library to prove this, though the countable version <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EventuallyEq.countable_iInter#doc\">docs#EventuallyEq.countable_iInter</a> of this fact exists for <code>CountableInterFilter</code>.  I was able to prove it eventually, but I wonder if I was missing some obvious tool in MathLib to do this more easily?</p>",
        "id": 408249870,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702670905
    },
    {
        "content": "<p>Usage of <code>=ᶠ[l]</code> for sets is kind of a hack (we silently interpret <code>s : Set α</code> as <code>α → Prop</code>), and probably lacks some supporting lemmas.</p>",
        "id": 408252251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702672052
    },
    {
        "content": "<p>AFAIR, I introduced this hack some time ago. I'm thinking about a better way of doing it; I'm going to try some over the holidays.</p>",
        "id": 408252355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702672101
    },
    {
        "content": "<p>I'll post a golfed proof in ~10min</p>",
        "id": 408252380,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702672116
    },
    {
        "content": "<p>The expected statement is <code>∀ᶠ x in l, x ∈ ⋂ i ∈ s, E i ↔ x ∈ ⋂ i ∈ s, F i</code>.</p>",
        "id": 408252745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702672313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Where.20is.20EventuallyEq.2Efinite_iInter.3F/near/408252745\">said</a>:</p>\n<blockquote>\n<p>The expected statement is <code>∀ᶠ x in l, x ∈ ⋂ i ∈ s, E i ↔ x ∈ ⋂ i ∈ s, F i</code>.</p>\n</blockquote>\n<p>The version above is what came out of applying <code>measure_congr</code>.  What I really wanted to prove was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span><span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">E'</span> <span class=\"n\">i</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">ae</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">E'</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but the measure theory library was also lacking the tools I needed here.</p>",
        "id": 408253188,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702672544
    },
    {
        "content": "<p>For <code>ae</code>, you can use <code>EventuallyEq.countable_iInter</code></p>",
        "id": 408253386,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702672638
    },
    {
        "content": "<p>I'm preparing a PR with all the finite versions.</p>",
        "id": 408253521,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702672686
    },
    {
        "content": "<p>PR to Mathlib?</p>",
        "id": 408253596,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702672717
    },
    {
        "content": "<p>Oh I remember now the (slight) problem with <code>EventuallyEq.countable_iInter</code>, it required <code>ι</code> to be <code>Countable</code> rather than <code>s</code>.</p>",
        "id": 408253816,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702672811
    },
    {
        "content": "<p>I think I know how to get around this by using the coercions from <code>s</code> to <code>ι</code> but I thought it would be easier to search for a <code>Finset</code> version of this tool. (So maybe my MWE should actually be named <code>EventuallyEq.finset_iInter</code>.)</p>",
        "id": 408253903,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702672860
    },
    {
        "content": "<p>In any case there is no urgency on my end since the previous code is a proof of the result, it just feels very non-golfed.</p>",
        "id": 408254102,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702672951
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/9090\">#9090</a></p>",
        "id": 408255183,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702673501
    },
    {
        "content": "<p>It has versions for finite <code>ι</code> and finite <code>s</code> (both as in <code>Set.Finite</code> and <code>Finset</code>). Also, it works for <code>EventuallyLE</code> and <code>EventuallyEq</code>.</p>",
        "id": 408255343,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702673578
    }
]