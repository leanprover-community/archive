[
    {
        "content": "<p>Is there a proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Set.exists_image_eq_and_injOn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">u</span> <span class=\"bp\">=</span>  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">InjOn</span> <span class=\"n\">f</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>somewhere?<br>\nWhat about its immediate corollary</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Set.exists_image_of_subset_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">InjOn</span> <span class=\"n\">f</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 401173467,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699541952
    },
    {
        "content": "<p>How about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.surjOn_iff_exists_bijOn_subset#doc\">docs#Set.surjOn_iff_exists_bijOn_subset</a> ?</p>",
        "id": 401176380,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699542772
    },
    {
        "content": "<p>I can prove those lemmas, but I'm very surprised I can't find them.</p>",
        "id": 401177234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699543022
    },
    {
        "content": "<p>I mean, the lemma I linked is <em>almost</em> exactly the first thing you asked for with <code>t</code> instantiated as <code>f '' s</code>.</p>",
        "id": 401177775,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699543181
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.invFunOn_injOn_image#doc\">docs#Function.invFunOn_injOn_image</a>  ?</p>",
        "id": 401178165,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1699543276
    },
    {
        "content": "<p>Ok, so it seems we don't have those lemmas but indeed Jireh's proof is only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Set.exists_image_eq_and_injOn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">u</span> <span class=\"bp\">=</span>  <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">InjOn</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">surjOn_iff_exists_bijOn_subset.mp</span> <span class=\"o\">(</span><span class=\"n\">surjOn_image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hfu</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hfu.image_eq</span><span class=\"o\">,</span> <span class=\"n\">hfu.injOn</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 401178951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699543491
    },
    {
        "content": "<p>So that's an easy PR.</p>",
        "id": 401178976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699543500
    },
    {
        "content": "<p>I'll PR it later today if nobody else does it in the mean-time (or find those lemmas already there).</p>",
        "id": 401179320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699543592
    },
    {
        "content": "<p>Actually I had an unexpected time-slot and opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/8303\">#8303</a>.</p>",
        "id": 401189206,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699546270
    },
    {
        "content": "<p>I mentioned this on GitHub, but in case you prefer to discuss here: I think this is going in slightly the wrong way. I think we should be <em>encouraging</em> use of the <code>Set.*On</code> API, not inserting lemmas to avoid it.</p>",
        "id": 401198422,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699548884
    },
    {
        "content": "<p>If you strongly disagree, that's fine. I'm not going to push hard about this.</p>",
        "id": 401198500,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699548915
    },
    {
        "content": "<p>I don't understand this objection. The above proof is very short but it is still the combination of four lemmas, which is way above the bar to get a new lemma. And it is a very natural statement which clearly belongs to the very frustrating category of statements that are so intuitively obvious that even spending 1 minute thinking about how to convince Lean is very frustrating.</p>",
        "id": 401222713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699558248
    },
    {
        "content": "<p>And <code>InjOn</code> appears in the conclusion so this is encouraging the use of the <code>Set.*on</code> API.</p>",
        "id": 401223038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699558414
    },
    {
        "content": "<p>I guess my point is this: I don't expect you to ever want <code>∃ u, f '' u  = f '' s ∧ InjOn f u</code> by itself in context (but if I'm wrong, I'd be happy to see an example!). You will therefore always want to destructure it as <code>⟨u, hu, hfu⟩</code>, but if you did that then you would have in context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span>\n<span class=\"n\">hfu</span> <span class=\"o\">:</span> <span class=\"n\">InjOn</span> <span class=\"n\">f</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>My claim is that this is less nice than destructuring the result of <code>surjOn_iff_exists_bijOn_subset.mp (surjOn_image f s)</code> directly as <code>⟨u, hu, hfu⟩</code>, which results in the context</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n<span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span>\n<span class=\"n\">hfu</span> <span class=\"o\">:</span> <span class=\"n\">BijOn</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401226548,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699559871
    },
    {
        "content": "<p>Then you get can to both <code>f '' u = f '' s</code> and <code>InjOn f u</code> with straightfoward applications of dot notation. But you also have easy access to API for <code>SurjOn</code> and <code>BijOn</code>, not to mention you know <code>u ⊆ s</code>, which might be handy (of course, this could be recovered in your version by modifying the lemma statement, but it isn't currently there). The <code>BijOn</code> bundle is much nicer than the unbundled alternative.</p>",
        "id": 401227136,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699560054
    },
    {
        "content": "<p>Again the actual target is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_image_eq_injOn_of_subset_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">InjOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 401228727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699560655
    },
    {
        "content": "<p>And the context was provided in <a href=\"#narrow/stream/113489-new-members/topic/Compactness.20in.20Metric.20Spaces/near/401074057\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Compactness.20in.20Metric.20Spaces/near/401074057</a></p>",
        "id": 401228789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699560681
    },
    {
        "content": "<p>The goal is to get a proof of <code>compact.finite_subcover</code> that is no more than 4 lines long.</p>",
        "id": 401230466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699561376
    },
    {
        "content": "<p>4 lines if you add the following reasonable alias</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">Metric</span> <span class=\"n\">Set</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Open</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">r</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span>\n<span class=\"kd\">def</span> <span class=\"n\">Closed</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Open</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bounded</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span>\n<span class=\"kd\">def</span> <span class=\"n\">Opencover</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">f</span><span class=\"bp\">∈</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Open</span> <span class=\"n\">f</span>\n<span class=\"kd\">def</span> <span class=\"n\">finiteOpenCover</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Opencover</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Set.Finite</span> <span class=\"n\">F</span>\n<span class=\"kd\">def</span> <span class=\"n\">compact</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Opencover</span> <span class=\"n\">F</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"bp\">⊆</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"n\">finiteOpenCover</span> <span class=\"n\">G</span> <span class=\"n\">S</span>\n\n<span class=\"n\">alias</span> <span class=\"o\">⟨</span><span class=\"n\">Set.SurjOn.exists_bijOn_subset</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Set.surjOn_iff_exists_bijOn_subset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">compact.finite_subcover</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Open</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hSF</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span><span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">I.Finite</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">h₃</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hS</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">sUnion_range</span> <span class=\"n\">F</span> <span class=\"bp\">▸</span> <span class=\"n\">hSF</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">hF</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">image_preimage_eq_of_subset</span> <span class=\"n\">h₁</span> <span class=\"bp\">▸</span> <span class=\"n\">surjOn_image</span> <span class=\"bp\">..</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">exists_bijOn_subset</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">of_finite_image</span> <span class=\"o\">(</span><span class=\"n\">h.image_eq</span> <span class=\"bp\">▸</span> <span class=\"n\">h₃</span><span class=\"o\">)</span> <span class=\"n\">h.injOn</span><span class=\"o\">,</span> <span class=\"n\">h₂.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h.image_eq</span><span class=\"o\">,</span> <span class=\"n\">sUnion_image</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 401252968,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699572271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> whatever the outcome of the new lemmas, would you mind adding this alias to <a href=\"https://github.com/leanprover-community/mathlib4/pull/8303\">#8303</a>? At the very least, that PR can clean up that declaration (as you have already done by fixing the existential binder).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"o\">⟨</span><span class=\"n\">Set.SurjOn.exists_bijOn_subset</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Set.surjOn_iff_exists_bijOn_subset</span>\n</code></pre></div>",
        "id": 401278372,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699585819
    },
    {
        "content": "<p>I added the alias and merged so that we can discuss more interesting things.</p>",
        "id": 401389195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699626154
    }
]