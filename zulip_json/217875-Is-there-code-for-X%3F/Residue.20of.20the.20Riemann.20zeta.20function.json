[
    {
        "content": "<p>Do we have the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>s</mi><mo>→</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">(</mo><mi>s</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lim_{s \\to 1} (s-1) \\zeta(s) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> (where $\\zeta$ is the Riemann zeta function)?<br>\nLooking through <code>NumberTheory.ZetaFunction</code>, it does not look like it is there (at least not in this form), but maybe it can be deduced easily from what exists? <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span></p>",
        "id": 409013546,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703018686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Residue.20of.20the.20Riemann.20zeta.20function/near/409013546\">said</a>:</p>\n<blockquote>\n<p>Do we have the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>s</mi><mo>→</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">(</mo><mi>s</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>ζ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lim_{s \\to 1} (s-1) \\zeta(s) = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> (where $\\zeta$ is the Riemann zeta function)?<br>\nLooking through <code>NumberTheory.ZetaFunction</code>, it does not look like it is there (at least not in this form), but maybe it can be deduced easily from what exists? <span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span></p>\n</blockquote>\n<p>Yes, we have that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Lambda(s) - 1/s - 1/(s - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is entire (+ in particular holomorphic at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">s = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>) so the calculation of the residue is easy to get from that. (edit: formatting)</p>",
        "id": 409014178,
        "sender_full_name": "David Loeffler",
        "timestamp": 1703019014
    },
    {
        "content": "<p>OK; which lemma is that precisely?</p>",
        "id": 409014256,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703019059
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=differentiable_completed#doc\">docs#differentiable_completed</a>_zeta₀</p>",
        "id": 409028270,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1703025908
    },
    {
        "content": "<p>The linkifier seems to have got confused by the subscript 0, here's a hand-rolled link: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/ZetaFunction.html#differentiable_completed_zeta₀\">differentiable_completed_zeta₀</a></p>",
        "id": 409104403,
        "sender_full_name": "David Loeffler",
        "timestamp": 1703055144
    },
    {
        "content": "<p>Seems I overlooked that when looking through the file.<br>\nI'll try that approach later. (Yesterday I produced a long and ugly proof (modulo two minor sorries) using the functional equation for the zeta function. It will be interesting to see if using the completed zeta function leads to a shorter/less ugly proof...)</p>",
        "id": 409123967,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703062850
    },
    {
        "content": "<p>How does the following compare for shortness / ugliness with your previous proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ZetaLimit1</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">riemannCompletedZeta</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">riemannCompletedZeta</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Tendsto.sub</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">𝓝</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">riemannCompletedZeta₀</span> <span class=\"mi\">1</span><span class=\"o\">))]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Continuous.tendsto</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_left</span> <span class=\"n\">nhdsWithin_le_nhds</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Continuous.mul</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"o\">)</span> <span class=\"n\">differentiable_completed_zeta₀.continuous</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">𝓝</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">1</span><span class=\"o\">)))]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">ContinuousAt.tendsto</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_left</span> <span class=\"n\">nhdsWithin_le_nhds</span>\n    <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">continuous_sub_right</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuousAt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">continuousAt_const.div</span> <span class=\"n\">continuousAt_id</span> <span class=\"n\">one_ne_zero</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one_div</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">tendsto_const_nhds.mono_left</span> <span class=\"n\">nhdsWithin_le_nhds</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">congr'</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">refine</span> <span class=\"n\">eventually_nhdsWithin_of_forall</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_self</span><span class=\"o\">]</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">Set.mem_compl_singleton_iff.mpr</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ZetaLimit2</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">riemannZeta</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n      <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Real.pi</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">riemannCompletedZeta</span> <span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"n\">Complex.Gamma</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">this.congr'</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">eventually_ne_nhdsWithin</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero'</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">riemannZeta_def</span><span class=\"o\">,</span> <span class=\"n\">Function.update_noteq</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">Real.pi</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)))</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">continuousAt_id.div_const</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const_cpow</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto.mono_left</span> <span class=\"n\">nhdsWithin_le_nhds</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Complex.ofReal_ne_zero.mpr</span> <span class=\"n\">Real.pi_ne_zero</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">Complex.Gamma</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">Real.pi</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)))</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Complex.Gamma_one_half_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Continuous.tendsto</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono_left</span> <span class=\"n\">nhdsWithin_le_nhds</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Complex.differentiable_one_div_Gamma</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous.comp</span> <span class=\"o\">(</span><span class=\"n\">continuous_id.div_const</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">ZetaLimit1.mul</span> <span class=\"n\">h0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">h1</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">ext1</span> <span class=\"n\">s</span>\n    <span class=\"n\">ring</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one_div</span><span class=\"o\">,</span> <span class=\"n\">div_self</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span> <span class=\"bp\">←</span> <span class=\"n\">Complex.ofReal_cpow</span> <span class=\"n\">Real.pi_pos.le</span><span class=\"o\">,</span> <span class=\"n\">Ne.def</span><span class=\"o\">,</span>\n      <span class=\"n\">Complex.ofReal_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">Real.rpow_eq_zero_iff_of_nonneg</span> <span class=\"n\">Real.pi_pos.le</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Real.pi_pos.ne'</span> <span class=\"n\">h.1</span>\n</code></pre></div>",
        "id": 409151216,
        "sender_full_name": "David Loeffler",
        "timestamp": 1703069610
    },
    {
        "content": "<p>It uses many of the same (or similar) ingredients, unsurprisingly, but is certainly a bit better than what I had (which can ceertainly be improved a bit). Thanks!</p>",
        "id": 409153447,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703070014
    },
    {
        "content": "<p>You're welcome! Are you going to PR this as part of your Euler products project, or shall I PR it separately?</p>",
        "id": 409154070,
        "sender_full_name": "David Loeffler",
        "timestamp": 1703070115
    },
    {
        "content": "<p>You are certainly welcome to PR this. At this point, I'm targetting estimates for the complex log (in the open disk of radius 1 about 1) with my PRs; I don't need the residue computation in Matlib urgently. But it should definitely be available!</p>",
        "id": 409155034,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703070282
    }
]