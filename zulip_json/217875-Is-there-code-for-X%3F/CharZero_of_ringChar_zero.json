[
    {
        "content": "<p>Dear All,</p>\n<p>I could not find the result below in mathlib: is it there?  If not, should I PR it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CharP.Basic</span>\n\n<span class=\"c1\">-- is this already in mathlib?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">CharZero_of_ringChar_zero</span> <span class=\"o\">[</span><span class=\"n\">NonAssocRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"n\">ringChar</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CharZero</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 384522494,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691939926
    },
    {
        "content": "<p>Do you mind if I post a proof? You can tell me how stupid it is and how you would have done it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 384543357,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691945678
    },
    {
        "content": "<p>Please do -- that's how the site works :-) We all learn together.</p>",
        "id": 384551398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691948492
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CharP.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">CharZero_of_ringChar_zero</span> <span class=\"o\">[</span><span class=\"n\">NonAssocRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"n\">ringChar</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CharZero</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">char_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">CharP</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ringChar.of_eq</span> <span class=\"n\">c0</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.le_antisymm</span> <span class=\"n\">hle</span> <span class=\"bp\">∘</span> <span class=\"n\">Nat.le_of_sub_eq_zero</span> <span class=\"bp\">∘</span> <span class=\"n\">Nat.eq_zero_of_zero_dvd</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">CharP.cast_eq_zero_iff</span> <span class=\"n\">F</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_sub</span> <span class=\"n\">hle</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">heq</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Nat.le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">hab</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hba</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">hba</span>\n</code></pre></div>",
        "id": 384552258,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691948829
    },
    {
        "content": "<p>Ha, it is pretty stupid. This is better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CharP.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">CharZero_of_ringChar_zero</span> <span class=\"o\">[</span><span class=\"n\">NonAssocRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c0</span> <span class=\"o\">:</span> <span class=\"n\">ringChar</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CharZero</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">char_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">CharP</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ringChar.of_eq</span> <span class=\"n\">c0</span>\n  <span class=\"n\">exact</span> <span class=\"n\">CharP.charP_to_charZero</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 384554352,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691949539
    },
    {
        "content": "<p>This is what I had:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">CharP</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">ringChar_zero_iff_CharZero</span> <span class=\"o\">[</span><span class=\"n\">NonAssocRing</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ringChar</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">CharZero</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ringChar.eq_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">charP_to_charZero</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofCharZero</span> <span class=\"n\">F</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 384556520,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691950225
    },
    {
        "content": "<p>(After posting the initial question, I realized that, even though I did not need it, the converse also held.)</p>",
        "id": 384559935,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691951446
    },
    {
        "content": "<p>one direction holds for semirings, I think</p>",
        "id": 384564440,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691953061
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">NonAssocSemiring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CharZero</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ringChar</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ringChar.eq_zero</span>\n</code></pre></div>",
        "id": 384576651,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691957200
    },
    {
        "content": "<p>Anyway, my question is more about the fact that I always find it hard to navigate the API around characteristics of <code>[remove your favourite subset of assumptions]-rings</code>.</p>",
        "id": 384576928,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691957309
    },
    {
        "content": "<p>Here's a fun fact which I have been trying to use to my advantage recently: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharZero#doc\">docs#CharZero</a> isn't even technically about rings (per the definition)!</p>",
        "id": 384586169,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691961537
    },
    {
        "content": "<p>(how can you use this to your advantage?)</p>",
        "id": 384588552,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691962949
    },
    {
        "content": "<p>If <code>R</code> is a <code>Ring</code> and a <code>StarOrderedRing</code> which is also <code>Nontrivial</code>, then the subtype <code>{ x : R // 0 ≤ x}</code>is an <code>AddCommMonoidWithOne</code> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StrictOrderedSemiring.to_charZero#doc\">docs#StrictOrderedSemiring.to_charZero</a> generalizes a bit (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/4871\">#4871</a> or <a href=\"https://github.com/leanprover-community/mathlib4/pull/6310\">#6310</a>), so in particular you can get <a href=\"https://github.com/leanprover-community/mathlib4/blob/9f8f772f02755375a8301679aeb67186742c59fa/Mathlib/Data/Nat/Cast/Basic.lean#L128-L166\">these lemmas</a> for free for <code>α := {x : R // 0 ≤ x}</code>.</p>",
        "id": 384589151,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691963336
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6572\">#6572</a></p>",
        "id": 384680966,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691999311
    },
    {
        "content": "<p>It's a bit sad that we can write <code>CharP R 0</code> as well as <code>CharZero R</code> and furthermore that they are not even propositionally equivalent without additive inverses. I thus wonder:</p>\n<ol>\n<li>do we ever want the weird meaning of <code>CharP R 0</code> when we have no additive inverses?</li>\n<li>if the answer to 1 is \"no\" then could we redefine <code>CharP</code> so that <code>CharP R 0</code> means what <code>CharZero R</code> means and then either delete <code>CharZero</code> or make it an abbreviation for <code>CharP R 0</code>?</li>\n</ol>",
        "id": 386234827,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692544815
    },
    {
        "content": "<p>I did not think carefully about formalizing <code>Char</code>, but I do find it always tricky to move around this part of the library.</p>\n<p>I personally do not have a good reason behind the current <code>CharP R 0</code>.  I think that I wrote the counterexample and I did so because I found <code>CharP R 0</code> weird!</p>\n<p>I sometimes think about whether having a class <code>CharIsPrimeOrZero</code> would improve the situation, but this has never gone past the thinking stage.</p>",
        "id": 386236968,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692546200
    },
    {
        "content": "<p>For the sake of definiteness, I propose replacing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharP#doc\">docs#CharP</a> with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ActualCharP</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n    <span class=\"n\">cast_eq_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and removing <code>CharZero</code>.</p>\n<p>I'd appreciate any feedback.</p>",
        "id": 386355511,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692613150
    },
    {
        "content": "<p>Am I right that <code>p = 1</code> always works?  And for \"more composite\" <code>p</code>s even more will work?</p>",
        "id": 386356467,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692613408
    },
    {
        "content": "<p>Yes (except for the <code>p = 1</code> point, as clarified by Eric below). Note that <code>ActualCharP</code> is equivalent to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharP#doc\">docs#CharP</a> when we have additive inverses and it's easy to read off these these conclusions from the statement there.</p>",
        "id": 386357173,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692613627
    },
    {
        "content": "<p>For emphasis: what I have proposed is propositionally identical to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CharP#doc\">docs#CharP</a> for an <code>AddGroupWithOne</code>.</p>",
        "id": 386357340,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692613687
    },
    {
        "content": "<p>I don't see how <code>p = 1</code> works?</p>",
        "id": 386360489,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692614737
    },
    {
        "content": "<p>I think this is a good idea, however</p>",
        "id": 386360507,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692614743
    },
    {
        "content": "<p>Eric, you are right: I only thought of one implication, not the iff!</p>",
        "id": 386360695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692614806
    },
    {
        "content": "<p>Eric's correction got me worried enough to prove my various claims above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.CharP.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ActualCharP</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n    <span class=\"n\">cast_eq_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- No change if we have additive inverses</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">CharP</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">ActualCharP</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">CharP.natCast_eq_natCast</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ZMod.eq_iff_modEq_nat</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"n\">refine'</span> <span class=\"n\">CharP.mk</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ZMod.nat_cast_zmod_eq_zero_iff_dvd</span> <span class=\"n\">x</span> <span class=\"n\">p</span>\n\n<span class=\"c1\">-- What's more:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CharZero</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">ActualCharP</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">CharZero.mk</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 386363873,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692615949
    }
]