[
    {
        "content": "<p>I have two functions <code>f g : ℕ → ℝ</code> and a natural number <code>S</code> and I know that <code>(f*ζ) n = g n</code> for all <code>n ∣ S</code>, where * denotes Dirichlet convolution. I want to be able to conclude that <code>f n = (g*μ) n</code> for all <code>n ∣ S</code>, but the standard Moebius inversion results (e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ArithmeticFunction.sum_eq_iff_sum_smul_moebius_eq#doc\">docs#Nat.ArithmeticFunction.sum_eq_iff_sum_smul_moebius_eq</a>) require the equalities hold for all positive <code>n</code>. Ideally there would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sum_eq_iff_sum_smul_moebius_eq'</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">n.divisors</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n     <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"k\">in</span> <span class=\"n\">n.divisorsAntidiagonal</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">x.fst</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>so the condition <code>n ∣ S</code> could be replaced by say <code>Squarefree n</code>. </p>\n<p>I do have a workaround for my application but it's a bit of a painful change of variables. Is there a better way to do this?</p>",
        "id": 368819674,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1687512212
    },
    {
        "content": "<p>I can believe it's not there :-( One way to prove this would be to define new functions F and G which equal f and g on the naturals satisfying <code>P</code> and are 0 outside, and then applying standard Moebius inversion to <code>F</code> and <code>G</code> and then working back to <code>f</code> and <code>g</code>.</p>",
        "id": 368845920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687517227
    },
    {
        "content": "<p>Right - what I ran into when I tried that in an ad-hoc way was that you could have <code>(F*ζ)(2*S) ≠ 0 = G (2*S)</code>, so the result I linked doesn't directly apply. You'd need to work directly with the fact that <code>ζ*μ=1</code>, at which point you also have to make <code>F</code> and <code>G</code> an <code>ArithmeticFunction</code>and you're just repeating the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.ArithmeticFunction.sum_eq_iff_sum_smul_moebius_eq#doc\">docs#Nat.ArithmeticFunction.sum_eq_iff_sum_smul_moebius_eq</a> in a slightly more general context.</p>",
        "id": 368879972,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1687524027
    },
    {
        "content": "<p>Thinking about it some more, what you'd actually have to do is define <code>F</code> as equal to <code>f</code> on <code>P</code> and 0 outside, and define <code>G=F*ζ</code>. Then the standard result applies and on <code>P</code> we get <code>f=F</code> and <code>g=G</code>.</p>",
        "id": 368889914,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1687525777
    },
    {
        "content": "<p>It works! Sadly you do have to swap the definitions of F and G going the other way, so I've had to prove both directions separately.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>The code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>import Mathlib.NumberTheory.ArithmeticFunction\n\nopen Finset\nopen scoped BigOperators Nat.ArithmeticFunction Classical\n\ntheorem sum_eq_iff_sum_smul_moebius_eq_of_prop [AddCommGroup R] {f g : ℕ → R}\n  (P : ℕ → Prop) (hP : ∀ m n, m ∣ n → P n → P m) :\n    (∀ n : ℕ, 0 &lt; n → P n → (∑ i in n.divisors, f i) = g n) ↔\n     ∀ n : ℕ, 0 &lt; n → P n → (∑ x : ℕ × ℕ in n.divisorsAntidiagonal, μ x.fst • g x.snd) = f n := by\n  constructor\n  · intro h\n    let F := fun (n:ℕ) =&gt; if P n then f n else 0\n    let G := fun (n:ℕ) =&gt; (∑ i in n.divisors, F i)\n    have hF : ∀n, P n → F n = f n := by\n      intro n hnP; dsimp only []; rw [if_pos hnP]\n    have hG : ∀n, 0&lt;n → P n → G n = g n := by\n      intro n hn hnP; dsimp only []; rw [←h n hn hnP, sum_congr rfl]\n      intro d hd; rw [if_pos $ hP _ _ (Nat.dvd_of_mem_divisors hd) hnP]\n    intro n hn hnP\n    suffices ∑ d in n.divisors, μ (n/d) • G d = F n from by\n      rw [Nat.sum_divisorsAntidiagonal&#39; (f:= fun x y =&gt; μ x • g y), ←hF n hnP, ←this, sum_congr rfl]\n      intro d hd\n      rw [←hG d (Nat.pos_of_mem_divisors hd)]\n      exact hP _ _ (Nat.mem_divisors.mp hd).1 hnP\n    rw [←Nat.sum_divisorsAntidiagonal&#39; (f:= fun x y =&gt; μ x • G y)]\n    apply Nat.ArithmeticFunction.sum_eq_iff_sum_smul_moebius_eq.mp _ n hn\n    intro _ _; rfl\n  · intro h\n    conv at h =&gt;\n      ext n\n      rw [Nat.sum_divisorsAntidiagonal&#39; (f:= fun x y =&gt; μ x • g y)]\n    let G := fun (n:ℕ) =&gt; if P n then g n else 0\n    let F := fun (n:ℕ) =&gt; ∑ d in n.divisors, μ (n/d) • G d\n    have hF : ∀n, 0&lt;n → P n → F n = f n := by\n      intro n hn hnP; dsimp only []; rw [←h n hn hnP, sum_congr rfl]\n      intro d hd; rw [if_pos $ hP d n (Nat.dvd_of_mem_divisors hd) hnP]\n    have hG : ∀n, P n → G n = g n := by\n      intro n hnP; dsimp only []; rw [if_pos hnP]\n    intro n hn hnP\n    suffices ∑ d in n.divisors, F d = G n from by\n      rw [←hG n hnP, ←this, sum_congr rfl]\n      intro d hd\n      rw [←hF d (Nat.pos_of_mem_divisors hd)]\n      exact hP d n (Nat.dvd_of_mem_divisors hd) hnP\n    apply Nat.ArithmeticFunction.sum_eq_iff_sum_smul_moebius_eq.mpr _ n hn\n    intro _ _\n    rw [Nat.sum_divisorsAntidiagonal&#39; (f:= fun x y =&gt; μ x • G y)]\n</code></pre></div>\n</div></div>",
        "id": 368926053,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1687532261
    },
    {
        "content": "<p>Oh nice! Could I ask you to PR it to mathlib4? It's the most efficient way to get someone to review your code :-)</p>",
        "id": 368926999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687532419
    },
    {
        "content": "<p>If someone could give me write access, sure :) My username is FLDutchmann</p>",
        "id": 368932156,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1687533284
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span></p>",
        "id": 368933101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687533441
    },
    {
        "content": "<p>Invite sent!</p>",
        "id": 368933740,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687533524
    },
    {
        "content": "<p>Got it! Thank you.</p>",
        "id": 368934518,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1687533630
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/5445\">#5445</a></p>",
        "id": 369135636,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1687601880
    }
]