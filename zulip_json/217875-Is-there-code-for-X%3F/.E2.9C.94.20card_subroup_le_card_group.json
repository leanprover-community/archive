[
    {
        "content": "<p>Do we have this lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_subgroup_le_card_group</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 368290539,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687363483
    },
    {
        "content": "<p>We won't have exactly that, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_univ\">docs3#finset.card_le_univ</a> together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset_card\">docs3#set.to_finset_card</a> will get you there</p>",
        "id": 368291874,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687363724
    },
    {
        "content": "<p>Actually, this is easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.finite</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">card_subgroup_le_card_group</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.card_le_of_injective</span> <span class=\"n\">coe</span> <span class=\"n\">subtype.coe_injective</span>\n</code></pre></div>",
        "id": 368296094,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687364619
    },
    {
        "content": "<p>I wonder why the function is explicit there</p>",
        "id": 368367201,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687383357
    },
    {
        "content": "<p>Good point, the person who originally wrote it hasn't contributed to mathlib before so just aa small oversight I think.</p>",
        "id": 368372375,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687385759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> has marked this topic as resolved.</p>",
        "id": 368372386,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687385762
    }
]