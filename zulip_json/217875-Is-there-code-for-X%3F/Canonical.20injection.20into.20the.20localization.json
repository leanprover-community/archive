[
    {
        "content": "<p>What is the idiomatic way to spell the canonical injection from a cancellative commutative monoid <code>α</code> to its localization <code>localization s</code> at a submonoid <code>s</code>? I'm really confused reading <a href=\"https://tqft.net/mathlib/group_theory/monoid_localization\">file#group_theory/monoid_localization</a>.</p>",
        "id": 346928241,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680629787
    },
    {
        "content": "<p>I mean, it's not always injective</p>",
        "id": 346931884,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1680630719
    },
    {
        "content": "<p>Edited the crucial word in</p>",
        "id": 346932458,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680630869
    },
    {
        "content": "<p>Isn’t it just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization_map\">docs#localization_map</a> ?</p>",
        "id": 346951361,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680636527
    },
    {
        "content": "<p>Modulo namespaces</p>",
        "id": 346951454,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680636565
    },
    {
        "content": "<p>If you use rings, then it would be an <code>algebra_map</code> but it seems you want to localize multiplicative monoids?</p>",
        "id": 346951697,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680636637
    },
    {
        "content": "<p>Btw I think it can be noninjective even for cancellative monoids</p>",
        "id": 346952165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680636799
    },
    {
        "content": "<p>Too bad, I proved it was injective in <a href=\"https://github.com/leanprover-community/mathlib/pull/18724\">#18724</a>!</p>",
        "id": 346956636,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680638216
    },
    {
        "content": "<p>It's also \"just\" <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization.monoid_of\">docs#localization.monoid_of</a> or \"just\" <a href=\"https://leanprover-community.github.io/mathlib_docs/find/localization.mk\">docs#localization.mk</a>. What I don't know is what's preferred.</p>",
        "id": 346956764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680638275
    },
    {
        "content": "<p>Too bad. You didn’t say commutative in your original post.</p>",
        "id": 346957183,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680638396
    },
    {
        "content": "<p>The correct amount of qualifiers should be inferred from the context <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 346957423,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680638457
    },
    {
        "content": "<p>For my defence, the entire file is about commutative monoids.</p>",
        "id": 346957546,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680638491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> in case you're curious: <a href=\"https://link.springer.com/article/10.1007/BF01571659\">https://link.springer.com/article/10.1007/BF01571659</a></p>",
        "id": 346958761,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680638861
    },
    {
        "content": "<p>so are you saying that we can't localize noncommutative monoids (with current mathlib)?</p>",
        "id": 346959003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680638935
    },
    {
        "content": "<p>Indeed, that's my understanding.</p>",
        "id": 346959101,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680638964
    },
    {
        "content": "<p>We have Ore localizations, I think</p>",
        "id": 346959163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680638988
    },
    {
        "content": "<p>Oh right! I know nothing of those.</p>",
        "id": 346959220,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680639009
    },
    {
        "content": "<p>... not that I care, because my result (<a href=\"https://github.com/leanprover-community/mathlib/pull/18724\">#18724</a>) only holds for commutative <em>semigroups</em>.</p>",
        "id": 346959271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680639021
    },
    {
        "content": "<p><code>src/ring_theory/ore_localization/basic.lean</code></p>",
        "id": 346959291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680639027
    },
    {
        "content": "<p>Do the notions coincide in the commutative case?</p>",
        "id": 346967349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680641719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Canonical.20injection.20into.20the.20localization/near/346967349\">said</a>:</p>\n<blockquote>\n<p>Do the notions coincide in the commutative case?</p>\n</blockquote>\n<p>Yep</p>",
        "id": 346990010,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1680651132
    },
    {
        "content": "<p>semigroups? I'm confused</p>",
        "id": 347018331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680668669
    },
    {
        "content": "<p>Looking at the PR it doesn't use semigroups, so now I am less confused.</p>",
        "id": 347018373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680668709
    },
    {
        "content": "<p>BTW Ore localizations also exist for monoids even though they are in the <code>ring_theory</code> subdirectory for some reason--it's calculus of fractions stuff.</p>",
        "id": 347018503,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680668817
    },
    {
        "content": "<p>Yeah, my result holds for nonempty semigroups but I can't state it as such with current mathlib.</p>",
        "id": 347035816,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680676822
    },
    {
        "content": "<p>I think the empty semigroup also embeds in an ordered group. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 347038430,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680677794
    },
    {
        "content": "<p>Yeah, but its Grothendieck group isn't a group!</p>",
        "id": 347038710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680677892
    },
    {
        "content": "<p>Surely, if the \"Grothendieck group\" of a semigroup means something, then then it is a group. The question is how to define it, how to compute it, and whether, if I start with a monoid, the Grothendieck group changes if I regard it instead as a semigroup.</p>",
        "id": 347040276,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680678441
    },
    {
        "content": "<p><a href=\"https://eprints.lib.hokudai.ac.jp/dspace/bitstream/2115/55970/1/JFSHIU_11_N4_181-189.pdf\">The paper I'm following</a> defines <code>localization (⊤ : subsemigroup α)</code> and then claims it's a group without mentioning the possibility of it being empty.</p>",
        "id": 347040996,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680678692
    },
    {
        "content": "<p>Where <code>α</code> has an ambient structure of <code>semigroup</code>, or something stronger?</p>",
        "id": 347041143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680678741
    },
    {
        "content": "<p><code>comm_semigroup α</code> is what the paper claims is sufficient (and I believe it, except for adding <code>nonempty α</code>)</p>",
        "id": 347041293,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680678792
    },
    {
        "content": "<p>Every map from an empty (comm)semigroup <code>α</code> to a group <code>G</code> factors uniquely via a group with one element. So do you really need to add that assumption?</p>",
        "id": 347041816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680678976
    },
    {
        "content": "<p>Am I right in saying that <code>localization (⊤ : subsemigroup empty)</code> is empty? If so, yes I do need that assumption to follow the paper's argument.</p>",
        "id": 347042235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680679104
    },
    {
        "content": "<p>I'm sure there's a separate argument that works for empty semigroups, just not the one that the paper is offering.</p>",
        "id": 347042405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680679157
    },
    {
        "content": "<p>I am not sure a priori that localization of semigroups makes sense at all.</p>",
        "id": 347042653,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680679235
    },
    {
        "content": "<p>Read the paper <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 347042730,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680679263
    },
    {
        "content": "<p>Because \"invertibility\" of elements of a semigroup is not preserved by homomorphisms, like it is for monoids.</p>",
        "id": 347042802,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680679281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Canonical.20injection.20into.20the.20localization/near/347042235\">said</a>:</p>\n<blockquote>\n<p>Am I right in saying that <code>localization (⊤ : subsemigroup empty)</code> is empty? If so, yes I do need that assumption to follow the paper's argument.</p>\n</blockquote>\n<p>That depends on what <code>localization</code> means. Despite suggestively writing it between backticks, I don't think Lean can answer that question in the current context.</p>",
        "id": 347042808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680679282
    },
    {
        "content": "<p>You are confusing the construction and the definition. I totally agree that the same construction used to define the Grothendieck group of a commutative monoid can also be applied to a commutative semigroup provided that the semigroup is nonempty.</p>",
        "id": 347042966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680679322
    },
    {
        "content": "<p>But I don't know what it means (if anything) to say that the result is the \"localization of the semigroup\" at all its elements.</p>",
        "id": 347043871,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680679576
    },
    {
        "content": "<p>A thing you can definitely do is consider the universal abelian group with a map of semigroups from your original commutative semigroup A, and I believe it will be the thing in the paper if A is nonempty and the zero group if A is empty.</p>",
        "id": 347044396,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680679705
    },
    {
        "content": "<p>Yeah that's probably the correct answer in general</p>",
        "id": 347044823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680679832
    }
]