[
    {
        "content": "<p>Dear All,</p>\n<p>is there some quantity associated with <code>Expr</code>essions that is strictly decreasing on sub-Expressions?</p>\n<p>I thought of <code>SizeOf.sizeOf</code>, but I may not be using it correctly.  Here is what I have.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.getExprArgs</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span>        <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">arg</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">_</span> <span class=\"n\">bt</span> <span class=\"n\">bb</span> <span class=\"n\">_</span>     <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">bt</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forallE</span> <span class=\"n\">_</span> <span class=\"n\">bt</span> <span class=\"n\">bb</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">bt</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">letE</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"n\">_</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mdata</span> <span class=\"n\">_</span> <span class=\"n\">e</span>         <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">proj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span>        <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"c1\">--  This works for my application, but maybe it already exists?</span>\n<span class=\"n\">partial</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.size</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e.getExprArgs.map</span> <span class=\"n\">size</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">size</span>  <span class=\"c1\">-- 1</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">mkNatLit</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span>  <span class=\"c1\">-- 9</span>\n\n<span class=\"c1\">--  not generating executable code seems to defeat the purpose for my application</span>\n<span class=\"k\">#eval</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>  <span class=\"c1\">-- failed to compile, wants 'noncomputable'</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 382622994,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691413745
    },
    {
        "content": "<p>there is <code>approxDepth</code>, but it is <code>approx</code> because it saturates at 255</p>",
        "id": 382627233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691414499
    },
    {
        "content": "<p>Is the motivation here to use it for termination_by and avoid needing <code>partial</code> on recursive defs elsewhere? Or for sorting reasons?</p>",
        "id": 382630839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691415168
    },
    {
        "content": "<p>My motivation is for sorting reasons: I am working on <code>move_add</code> and I want to successively rewrite a term that cannot <del>contain</del>EDIT[be contained in] one of the next ones that I will rewrite.</p>",
        "id": 382631401,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691415273
    },
    {
        "content": "<p>So, if I am reordering expressions containing <code>a, b, c</code> to \"alphabetical\" order, I do not want a reordering on a subexpression that is <code>b + a</code> to mess up the expression <code>b + a + c</code>.</p>",
        "id": 382631759,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691415347
    },
    {
        "content": "<p>Mario, given the sizes of the terms in <code>Semiring</code>s, I am skeptical that a bound of 255 would be safe enough...</p>",
        "id": 382632925,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691415529
    },
    {
        "content": "<p>Btw, <code>depth</code> bound is adding one on each layer, right?  That would work for me.  The difference with what I have is that it would add 1 to the max of what it sees on the <code>ExprArgs</code>, right?</p>",
        "id": 382633664,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691415644
    }
]