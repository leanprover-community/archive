[
    {
        "content": "<p>Say <code>A, B, C</code> are vector spaces over <code>𝕜</code> and I have a bilinear map <code>A × B  → C</code>, represented as a map <code>f: A →l[𝕜] B →l[𝕜] C</code> as usual. If <code>A, B, C</code> are normed spaces, and I have a proof that <code>f</code> is continuous as a map <code>A × B  → C</code>, is there a simple way of promoting <code>f</code> to a continuous bilinear form, represented an element of <code>A →L[𝕜] B →L[𝕜] C</code>? </p>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/OperatorNorm.html#LinearMap.mkContinuous%E2%82%82\">docs#LinearMap.mkContinuous₂</a>, but that requires an explicit bound on the operator norm.</p>",
        "id": 395420275,
        "sender_full_name": "David Loeffler",
        "timestamp": 1696685540
    },
    {
        "content": "<p><del>(sorry, for some reason I can't get that to linkify)</del></p>",
        "id": 395420421,
        "sender_full_name": "David Loeffler",
        "timestamp": 1696685654
    },
    {
        "content": "<p>The linkifier doesn't like subscripts etc.</p>",
        "id": 395420429,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1696685659
    },
    {
        "content": "<p>(You can use the <code>[xxx](url)</code> syntax to emulate what it should do.)</p>",
        "id": 395420470,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1696685701
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/NormedSpace/OperatorNorm.html#LinearMap.mkContinuous%E2%82%82\">docs#LinearMap.mkContinuous₂</a></p>",
        "id": 395420608,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1696685799
    },
    {
        "content": "<p>NB, in case this gets missed: <strong>the question is still unaswered</strong> (the upvote was for help fixing formatting in the question)</p>",
        "id": 395430018,
        "sender_full_name": "David Loeffler",
        "timestamp": 1696692291
    },
    {
        "content": "<p>Just to make sure, is continuity in <code>A × B → C</code> the same as continuity in <code>A → B → C</code> when talking about linear maps? In general, this is not the case.</p>",
        "id": 395430286,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696692480
    },
    {
        "content": "<p>Is this related to the question of continuous bilinear maps over a TVS? Did that every result in a PR?</p>",
        "id": 395430428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696692569
    },
    {
        "content": "<p>It’s the same for normed spaces. It definitely isn’t in general</p>",
        "id": 395432512,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696694267
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMultilinearMap#doc\">docs#ContinuousMultilinearMap</a> uses the correct definition (no currying trick), but I’m not sure it would be practical to use that API here</p>",
        "id": 395432683,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696694410
    },
    {
        "content": "<p>Anatole, they're the same for bornological spaces too, right?</p>",
        "id": 395433172,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696694657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Making.20a.20continuous.20bilinear.20map/near/395432512\">said</a>:</p>\n<blockquote>\n<p>It’s the same for normed spaces. It definitely isn’t in general</p>\n</blockquote>\n<p>Is there a proof of this easily accessible in the library?</p>",
        "id": 395436032,
        "sender_full_name": "David Loeffler",
        "timestamp": 1696697037
    },
    {
        "content": "<p>I guess I'll have to convert my <code>f</code> into a MultlinearMap, and then use the <code>n = 2</code> case of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MultilinearMap.exists_bound_of_continuous#doc\">docs#MultilinearMap.exists_bound_of_continuous</a>. I'd hoped it would be less painful than this.</p>",
        "id": 395436471,
        "sender_full_name": "David Loeffler",
        "timestamp": 1696697493
    },
    {
        "content": "<p>The context here is trying to define Banach modules over a Banach algebra, without assuming that the scalar multiplication necessarily satifies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>a</mi><mo>∗</mo><mi>v</mi><mi mathvariant=\"normal\">∥</mi><mo>≤</mo><mi mathvariant=\"normal\">∥</mi><mi>a</mi><mi mathvariant=\"normal\">∥</mi><mo>⋅</mo><mi mathvariant=\"normal\">∥</mi><mi>v</mi><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">\\|a * v\\| \\le \\|a \\| \\cdot \\|v\\|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord\">∥</span></span></span></span> – I wanted to assume <code>[ContinuousSMul A V]</code>, not <code>[BoundedSMul A V]</code>. The problem is that in the literature many authors (e.g. Kevin in his previous life...) are very insistent that a Banach space should be a space with an <em>equivalence class</em> of norms (but we shouldn't single out one specific choice of the norm as part of the data).</p>",
        "id": 395436809,
        "sender_full_name": "David Loeffler",
        "timestamp": 1696697768
    },
    {
        "content": "<p>Topological equivalence or Lipschitz equivalence? EDIT: if I understand correctly the modules you care about also happen to be normed spaces over the base field, so it should still be the same thing. If I'm right, this means that the equivalence class of norms is entirely determined by the topology, so it would make sense to use a <code>Normable</code> typeclass similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Metrizable#doc\">docs#Metrizable</a>, right?</p>",
        "id": 395439395,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696700285
    },
    {
        "content": "<p>I definitely think we want to keep the choice of norm in the usual setup, but it shouldn't be too hard to make an intermediate structure if needed.</p>",
        "id": 395439552,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696700491
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 395440112,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696701096
    },
    {
        "content": "<p>Regarding normed modules in general, I think we should have some discussion about how we want to setup everything, especially to make sure that everything works well with the current setup. In particular (this is a bit orthogonal to your original question) I would like some opinions on the <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/NormedModule.20.3F/near/392699965\">plan</a> I made some time ago to make <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BoundedSMul#doc\">docs#BoundedSMul</a> more natural (imho).</p>",
        "id": 395449870,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696708359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Making.20a.20continuous.20bilinear.20map/near/395436809\">said</a>:</p>\n<blockquote>\n<p>The problem is that in the literature many authors (e.g. Kevin in his previous life...) are very insistent that a Banach space should be a space with an <em>equivalence class</em> of norms (but we shouldn't single out one specific choice of the norm as part of the data).</p>\n</blockquote>\n<p>Actually I checked and my memory seems to have been playing tricks on me – both Kevin's /Eigenvarieties/ paper and Bosch–Güntzer–Remmert require a normed module over a normed algebra to have a specific norm satisfing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>a</mi><mo>∙</mo><mi>v</mi><mi mathvariant=\"normal\">∥</mi><mo>≤</mo><mi mathvariant=\"normal\">∥</mi><mi>a</mi><mi mathvariant=\"normal\">∥</mi><mo>⋅</mo><mi mathvariant=\"normal\">∥</mi><mi>v</mi><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">\\|a \\bullet v\\| \\le \\|a\\| \\cdot \\|v\\|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∙</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord\">∥</span></span></span></span>. So this thread was a wild-goose chase.</p>",
        "id": 395501313,
        "sender_full_name": "David Loeffler",
        "timestamp": 1696748762
    }
]