[
    {
        "content": "<p>I wonder if we can find a proper place to do such optimizations (The idea may be stupid :D).</p>\n<p>1) Detect if a function <code>f</code> is an operation on some unital semiring structure <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mo>+</mo><mo separator=\"true\">,</mo><mo>×</mo><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(R, +, \\times, 0, 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">+</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">×</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>. Say <code>f : Nat -&gt; Nat</code>.<br>\n2) <code>f</code> is proven to be total.<br>\n3) The base cases of <code>f</code> is known. e.g. <code>f(0) = 1, f(1) = 1</code>.<br>\n4) The only non-basic case is in the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n) = \\sum_{i = 1}^k a_if(n - k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2887em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.989em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> (we can set a limit of such dependence window)</p>\n<p>Then we can transform such recursion into a loop and thus solve it in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> or even a transition matrix such that solvable in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 395798841,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696907533
    },
    {
        "content": "<p>Note that Nat is not a ring. If you meant unital semiring, then I can prove that f is the identity, thus it would be trivial.</p>",
        "id": 395842313,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1696930094
    },
    {
        "content": "<p>I don't understand step 1; how do you tell if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"double-struck\">N</mi><mo>→</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">f : \\N \\to \\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> is a ring morphism without evaluating it on infinitely many <code>Nat</code>s?</p>",
        "id": 395842649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696930209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Fast.20Unital.20Ring.20Accumulation/near/395842313\">said</a>:</p>\n<blockquote>\n<p>Note that Nat is not a ring. If you meant unital semiring, then I can prove that f is the identity, thus it would be trivial.</p>\n</blockquote>\n<p>sorry updated.</p>",
        "id": 395848990,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696932432
    },
    {
        "content": "<p>I am not sure why f is id. fibonacci function should be one of such f. Perhaps I missed something in the above description.</p>",
        "id": 395849258,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696932511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Fast.20Unital.20Ring.20Accumulation/near/395849258\">said</a>:</p>\n<blockquote>\n<p>I am not sure why f is id. fibonacci function should be one of such f. Perhaps I missed something in the above description.</p>\n</blockquote>\n<p>1 = fib(0+0) ≠ fib 0 + fib 0 = 2</p>",
        "id": 395849688,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696932678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Fast.20Unital.20Ring.20Accumulation/near/395842649\">said</a>:</p>\n<blockquote>\n<p>I don't understand step 1; how do you tell if $f : \\N \\to \\N$ is a ring morphism without evaluating it on infinitely many <code>Nat</code>s?</p>\n</blockquote>\n<p>no, the compiler never proves it but knows in advance.</p>",
        "id": 395849772,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696932719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Fast.20Unital.20Ring.20Accumulation/near/395849688\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Fast.20Unital.20Ring.20Accumulation/near/395849258\">said</a>:</p>\n<blockquote>\n<p>I am not sure why f is id. fibonacci function should be one of such f. Perhaps I missed something in the above description.</p>\n</blockquote>\n<p>1 = fib(0+0) ≠ fib 0 + fib 0 = 2</p>\n</blockquote>\n<p>Ah, I see. Should I just drop endomorphism? f is just a self loop.</p>",
        "id": 395850445,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696932960
    },
    {
        "content": "<p>Actually, I tried to generalize it but may have stated it wrongly. There must be some other restrictions like R should be discrete. For now, maybe one should just think about (Nat, +, *, 0, 1).</p>",
        "id": 395851384,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696933311
    },
    {
        "content": "<p>Or other integral types.</p>",
        "id": 395851467,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696933331
    },
    {
        "content": "<p>Can you write the explicit conditions you want your functions to obey?</p>",
        "id": 395868141,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696939543
    },
    {
        "content": "<p>Sure. I will come up with more details when I am available.</p>",
        "id": 395918174,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1696954872
    },
    {
        "content": "<p>There is a general theory of such optimizations, going by the name of “scalar evolution” or “chains of recurrences” in the compilers literature. Here is a repo with some formalization and links to the literature: <a href=\"https://github.com/bollu/scev-coq\">https://github.com/bollu/scev-coq</a></p>",
        "id": 395967241,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1696975725
    }
]