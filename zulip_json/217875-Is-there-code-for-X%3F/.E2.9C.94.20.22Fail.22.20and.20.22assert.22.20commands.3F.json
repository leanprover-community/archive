[
    {
        "content": "<p>I could have sworn that Lean 4 had a <code>#fail</code> command or something similar which asserts that some other command fails (just like Coq's <code>Fail</code> command). Does it, or was I imagining that?</p>\n<p>Also, is there a command that asserts that two expressions are definitionally equal, or that an expression evaluates to <code>true</code>?</p>",
        "id": 369519193,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687736610
    },
    {
        "content": "<p>std4 has a couple things here that might be useful</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/GuardMsgs.lean\">Std.Tactic.GuardMsgs</a> is one way to assert that a command fails, with a specific error message.</li>\n<li><a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/GuardExpr.lean\">Std.Tactic.GuardExpr</a> has different tactics and commands for asserting that hypotheses, goals, or expressions are equal up to various relations (including defeq). In addition to <code>#guard_expr</code>, it also has a <code>#guard</code> command for checking that a particular expression <code>#eval</code>s to <code>true</code>.</li>\n</ul>",
        "id": 369546180,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687749984
    },
    {
        "content": "<p>There's not so much documentation, but you could look in the tests directory in std4 and mathlib4 for examples. Here's specifically <a href=\"https://github.com/leanprover/std4/blob/main/test/guard_msgs.lean\">the tests for GuardMsgs</a> and <a href=\"https://github.com/leanprover/std4/blob/main/test/guardexpr.lean\">the tests for GuardExpr</a></p>",
        "id": 369546372,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687750098
    },
    {
        "content": "<p>And if you don't actually need to run meta code, don't forget plain old: <code>example : x = y := rfl</code>!</p>",
        "id": 369546448,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687750157
    },
    {
        "content": "<p>Yeah, these GuardExpr commands are probably more useful if you want to check the other relations, but even so you have things like <code>example : x = y := with_reducible rfl</code> at your disposable.</p>",
        "id": 369546609,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687750248
    },
    {
        "content": "<p>It wouldn't be very hard to make <code>#fail</code>, and you could start with the GuardMsgs command's source, but you'd need to think about what to do about error messages. (Does it consume them all? Does it pass them through?) There are lots of ways for something to fail, and <code>#guard_msgs</code> is looking for specific error messages to help ensure a command is failing in the expected way.</p>",
        "id": 369546811,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687750355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.22Fail.22.20and.20.22assert.22.20commands.3F/near/369546448\">said</a>:</p>\n<blockquote>\n<p>And if you don't actually need to run meta code, don't forget plain old: <code>example : x = y := rfl</code>!</p>\n</blockquote>\n<p>Ooh, I love it!</p>",
        "id": 369547515,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687750788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627517\">Tanner Swett</span> has marked this topic as resolved.</p>",
        "id": 369547601,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687750810
    }
]