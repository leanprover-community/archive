[
    {
        "content": "<p>Is it possible to make use of the fact the a definition is computable in lean somehow? Like can we say this definition is computable therefore there is Turing Machine (or otherwise) that models the lean function? I'll admit I'm not 100% sure what this question even means to a certain extent - since the keyword is actually the inverse i.e. \"noncomputable\" whereas things like \"decidable\" are actually built using lean primitives rather than as a keyword. But I'd imagine I'd be thinking of something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">inhabited_tm2_computable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fc</span><span class=\"o\">:</span> <span class=\"n\">computable</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">αen</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">βen</span><span class=\"o\">):</span>\n  <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">turing.tm2_computable</span> <span class=\"n\">αen</span> <span class=\"n\">βen</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where computable would be a typeclass that indicates f is computable as far as lean is concerned (and probably comes bundled with some fin_encoding on its input and output in some way - rather than picking any such existence).</p>\n<p>Does something like this even make sense in lean as a statement? If so, how might one approach it?</p>",
        "id": 350370932,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681683598
    },
    {
        "content": "<p>\"Lean computable\" means that Lean's able to take the definition and evaluate it using it's VM (though without any guarantee that this evaluation is in any way correct). It does this by way of a compiler that creates some bytecode representation. It would be cool if there were a certified compiler and a formal model of the VM, along with something that automatically creates a <code>computable</code> instance with the compiled bytecode and a proof that it correctly computes the function.</p>\n<p>This doesn't exist, but it seems plausible.</p>",
        "id": 350378068,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681686805
    },
    {
        "content": "<p>Is it possible to access that bytecode representation within the lean language itself?</p>",
        "id": 350378474,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681687025
    },
    {
        "content": "<p>And can you access whether a function is computable through the proof language in anyway (outside of the noncomputable keyword)</p>",
        "id": 350378531,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681687061
    },
    {
        "content": "<p>No, <code>noncomputable</code> is a metatheoretic concept. It would take something like having Lean define a <code>computable</code> instance for you to get access to that something is computable.</p>",
        "id": 350379623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681687690
    },
    {
        "content": "<p>The bytecode representation is available to meta code I believe. At least it's available to the C++ side of things, and it could be made available to the Lean side if it's not already.</p>",
        "id": 350379636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681687704
    },
    {
        "content": "<p>Would one be able to define a computable type class that has a lean representation of the byte code, and then use something like derive to generate it, or would I have to generate them on a case by case basis with a tactic?</p>",
        "id": 350380002,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681687962
    },
    {
        "content": "<p>I'm not sure really what having the bytecode would help you do, since the VM compiler isn't formally verified.</p>",
        "id": 350380062,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681688030
    },
    {
        "content": "<p>Oh, so the byte code doesn’t come with a correctness proof?</p>",
        "id": 350380129,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681688064
    },
    {
        "content": "<p>No, not at all, that's what I meant in my first message's first sentence.</p>",
        "id": 350380154,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681688092
    },
    {
        "content": "<p>Given your turing machine question, I think what you'd need is your own formally verified compiler to some formal evaluation model, then use attributes or something to get your compiler to generate these <code>computable</code> instances for you.</p>",
        "id": 350380196,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681688135
    },
    {
        "content": "<p>It would be really cool if someone did this -- it seems like a lot of work though!</p>",
        "id": 350380301,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681688195
    },
    {
        "content": "<p>Yeah, I was hoping there was already something so I could leverage it for complexity, which is even more work…<br>\nSo if I’m understanding your suggested direction, we would create a new @computable attribute, and in theory this attribute could be applied to any non-noncomputable function. But if you needed it, then you would have to derive it (or use a tactic) for each function?</p>",
        "id": 350380512,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681688367
    },
    {
        "content": "<p>Attributes are sort of weird in Lean is that they both act as tags but also as a hook to execute any code you want for metaprogramming purposes. I was thinking <code>computable</code> could be how you say \"I believe this is computable, so derive a <code>computable</code> instance for me\"</p>",
        "id": 350380669,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681688476
    },
    {
        "content": "<p>(For example, you could define a <code>decidable</code> attribute for <code>Prop</code>-valued functions that would try to derive a <code>decidable</code> instance for them.)</p>",
        "id": 350380759,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681688530
    },
    {
        "content": "<p>Ok, i think I understand (@simp complains sometime so I think I’ve seen that behavior, although does a decidable attribute already exist, I don’t think I’ve seen it used). But the end result might be that slowly all computable functions in mathlib get marked with this attribute as we want them in computability/complexity theory?</p>",
        "id": 350380942,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681688670
    },
    {
        "content": "<p>There's no <code>decidable</code> attribute yet, but it might be helpful if there were one.</p>\n<p>Some complicated metaprograms that use attributes as their hook are <code>simps</code> and <code>to_additive</code>.</p>",
        "id": 350381069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681688770
    },
    {
        "content": "<p>Ok, I’ll chew on that then</p>",
        "id": 350381134,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681688835
    },
    {
        "content": "<p>And regarding whether to mark everything with the attribute, I suppose so, but I imagine you wouldn't need to tag every computable function. (Potentially also the compiler could recursively create instances whenever it reaches a definition it hasn't compiled yet.)</p>",
        "id": 350381143,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681688845
    },
    {
        "content": "<p>It looks like you're using Lean 3, but this will all be easier if you're using Lean 4 (though to be clear, this project seems difficult <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 350381247,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681688937
    },
    {
        "content": "<p>I imagine others have already thought about how to do this in the dependent type theory world, and I've heard it go under the name \"program extraction,\" if you want to look to see if there are any provably correct systems.</p>",
        "id": 350381351,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681689020
    },
    {
        "content": "<p>Okay, I’ll take a look, lean 3 had a lot more stuff already proved, but I’ve set up stuff in both, and it sounds like there isn’t much existing work.</p>\n<p>Even if I don’t complete anything on the complexity side, hopefully I’d be able to move the ball forward a little bit</p>",
        "id": 350381435,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681689100
    },
    {
        "content": "<p>For complexity theory, there's also the question of being able to choose different cost models, which might be difficult when what you have is a general Lean compiler. Maybe it's better to have a mini-language that's not quite so dependently typed in which it's easy to write the sorts of programs you want to analyze, and with which it's easy to specify the model of computation? This mini-language could be represented using some inductive type along with some Lean 4 macros to make it convenient to write programs.</p>",
        "id": 350382042,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681689581
    },
    {
        "content": "<p>Yeah, I've played around with that using costed monads as sort of DSL, but then you either have to pay close attention to the implementation (which kind of defeats the purpose of using a theorem prover) or prove that the DSL has the same properties as a similar lean function with the same properties (which kind of defeats the purpose of the DSL in my opinion). I have mini-languages which are essentially models of computation (for example untyped lambda-calculus or turing machines ora novel ram-like model that uses hierarchical memory instead of a flat memory structure), but it'd be nice if the proof writer could avoid ever having to write any code in that underlying model IMO. Certainly on the complexity side the choice of model is very important, but on the computable side it shouldn't be important for the turing-complete class.</p>",
        "id": 350382676,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681690088
    },
    {
        "content": "<p>Yes for computability this is something that doesn't exist yet in Lean, but people more or less understand how to do.</p>",
        "id": 350407241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681708246
    },
    {
        "content": "<p>For complexity it seems a lot harder. I find it hard to even imagine what the system would do and how the user would interact with it.</p>",
        "id": 350407441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681708366
    },
    {
        "content": "<p>In an algorithms paper you have to write proofs that the algorithms run in the stated complexity class, but you don't have to write proofs that the functions they compute are computable. So they are already different kinds of tasks.</p>",
        "id": 350407508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1681708433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Existence.20of.20a.20TM.20.28or.20other.29.20for.20computable.20lean.20functions/near/350407441\">said</a>:</p>\n<blockquote>\n<p>For complexity it seems a lot harder. I find it hard to even imagine what the system would do and how the user would interact with it.</p>\n</blockquote>\n<p>So there is another thread in General with an ongoing conversation, but what I'm converging to is to have a model with referentially transparent constant time composition (this unfortunately throws a wrench in TMs, but lambda calculus and RAM-like models should both support this), and then lean can automatically generate a trace from a definition - based on this conversation maybe using attributes/hooks. This trace would include all calls it makes as well as all recursive usages, so for example inside of list.split it is plain to humans that if the input list matches to list.nil then it makes no calls, and if it pattern matches to (a::l) then it makes a recursive call with l. Assuming any function takes constant time locally, it would be relatively straightforward to show inductively that list.split is O(l.length).</p>\n<p>Currently this is captured with<br>\n<a href=\"https://github.com/calcu16/lean_complexity/blob/main/src/hmem/encoding/list.lean\">https://github.com/calcu16/lean_complexity/blob/main/src/hmem/encoding/list.lean</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">split_trace</span>\n  <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">μ</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complexity.has_encoding</span> <span class=\"o\">(</span><span class=\"n\">runtime_model</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">hmem.trace</span> <span class=\"n\">μ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">encode</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">list.nil</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">list.nil</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">[</span><span class=\"n\">tt</span><span class=\"o\">],</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">encode</span> <span class=\"o\">(</span><span class=\"n\">list.split</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)),</span> <span class=\"o\">[</span><span class=\"n\">ff</span><span class=\"o\">],</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"o\">[],</span> <span class=\"o\">[</span><span class=\"n\">encode</span> <span class=\"n\">xs</span><span class=\"o\">]</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">split_has_trace</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complexity.has_encoding</span> <span class=\"o\">(</span><span class=\"n\">runtime_model</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">split</span> <span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_trace</span> <span class=\"o\">(</span><span class=\"n\">encode</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">split_trace</span> <span class=\"n\">μ</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I intend to abstract this further, such that rather than dealing with the encoded values, the user would be able to interact with the lean types directly instead.</p>\n<p>I leverage this trace to prove complexity here:<br>\n<a href=\"https://github.com/calcu16/lean_complexity/blob/main/src/hmem/encoding/list_complexity.lean\">https://github.com/calcu16/lean_complexity/blob/main/src/hmem/encoding/list_complexity.lean</a><br>\nideally this is also simplified by leveraging the Master Theorem, but that machinery doesn't seem to exist in lean yet either, but also should be straightforward.</p>\n<p>From my vantage point getting from a computable lean function to some form of lean accessible bytecode (i.e. demonstrating computability) is much more difficult then going from computability to complexity</p>",
        "id": 350850390,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681840487
    },
    {
        "content": "<p>The issue is that it is probably much easier to automate proofs of computability in ways that aren't helpful for analyzing complexity.</p>",
        "id": 352021273,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682240322
    },
    {
        "content": "<p>First, in order to prove a certain function is computable, I don't actually have to produce a TM at all, I just have to prove that there (classically) exists one.</p>",
        "id": 352021353,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682240373
    },
    {
        "content": "<p>That's probably not very relevant in practice, but also, I only have to produce a TM that the same automation knows how to reason about (as far as knowing what function it computes).</p>",
        "id": 352021596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682240453
    },
    {
        "content": "<p>I don't have to produce one that is pleasant in any way for manual reasoning about complexity, or one that is stable under changes to definitions, or one that has the right complexity class at all in the first place.</p>",
        "id": 352021684,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682240497
    }
]