[
    {
        "content": "<p>I would like to use the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→*</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">hsum</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"bp\">·‖</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">εpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"bp\">∃</span> <span class=\"n\">N₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span> <span class=\"bp\">≥</span> <span class=\"n\">N₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"bp\">‖∑'</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Tthe assumptions on <code>F</code> can certainly be weakened, but in my use case, I need a field.)</p>\n<p>Any hints?</p>",
        "id": 400324559,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699128959
    },
    {
        "content": "<p>This is the last <code>sorry</code> on the way to the Euler product, BTW.</p>",
        "id": 400327658,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699132685
    },
    {
        "content": "<p>My feeling is that it should come down to a fairly easy manipulation with filters, but I have no experience with this part of Mathlib so far.</p>",
        "id": 400327681,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699132743
    },
    {
        "content": "<p><code>summable_iff_vanishing_norm</code> seems close to what you want.</p>",
        "id": 400335408,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699141838
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_tsum_compl_atTop_zero#doc\">docs#tendsto_tsum_compl_atTop_zero</a> is closer I think :)</p>",
        "id": 400335518,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699142034
    },
    {
        "content": "<p>Another hurdle is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_abs_iff#doc\">docs#summable_abs_iff</a> says <code>Summable f</code> iff <code>Summable |f|</code> but here we have some norm on a complete space rather than an absolute value.</p>",
        "id": 400335682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699142253
    },
    {
        "content": "<p>I think this can be proven without the Summable hypothesis. I'm using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NormedAddCommGroup.tendsto_nhds_zero#doc\">docs#NormedAddCommGroup.tendsto_nhds_zero</a>.</p>",
        "id": 400337191,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699143449
    },
    {
        "content": "<p><del>I mean, it's not true if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f(x)=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>? What do you mean?</del>(it is true, for silly reasons :-) )</p>",
        "id": 400338247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699144227
    },
    {
        "content": "<p>Hmm indeed the lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tendsto_tsum_compl_atTop_zero#doc\">docs#tendsto_tsum_compl_atTop_zero</a> without the summability assumption isn't quite strong enough; it can deal with sets that contain an infinite interval but not a general set.</p>",
        "id": 400338272,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699144249
    },
    {
        "content": "<p>If it's not summable then the tsum (∑') is zero, and I think that's why tendsto_tsum_compl_atTop_zero doesn't have the summability assumption.</p>",
        "id": 400338327,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699144294
    },
    {
        "content": "<p>The statement seems a bit redundant: instead of <code>∀ N ≥ N₀, ∀ s ⊆ {n | N ≤ n}</code> it's equivalent to say <code>∀ s ⊆ {n | N₀ ≤ n}</code>.</p>",
        "id": 400338750,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699144574
    },
    {
        "content": "<p>Okay, I proved a slightly modified version (removing the redundancy and change to weak inequality to not make the proof more complicated):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→*</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">hsum</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"bp\">·‖</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">εpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"bp\">‖∑'</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">summable_iff_vanishing.mp</span> <span class=\"n\">hsum</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Metric.closedBall_mem_nhds</span> <span class=\"mi\">0</span> <span class=\"n\">εpos</span><span class=\"o\">)</span>\n  <span class=\"n\">use</span> <span class=\"k\">if</span> <span class=\"n\">emp</span> <span class=\"o\">:</span> <span class=\"n\">t.Nonempty</span> <span class=\"k\">then</span> <span class=\"n\">t.max'</span> <span class=\"n\">emp</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">norm_tsum_le_tsum_norm</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hsum.subtype</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tsum_le_of_sum_le</span> <span class=\"o\">(</span><span class=\"n\">hsum.subtype</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">s'</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">le_abs_self</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Finset.sum_subtype_map_embedding</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mem_closedBall_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">Real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">Finset.disjoint_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ht</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">hns'</span> <span class=\"n\">hnt</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hms</span><span class=\"o\">⟩,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.mem_map.mp</span> <span class=\"n\">hns'</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span> <span class=\"n\">hms</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">t.le_max'</span> <span class=\"n\">_</span> <span class=\"n\">hnt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_lt</span> <span class=\"o\">((</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hnt</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 400344729,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699148413
    },
    {
        "content": "<p>I used <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_iff_vanishing#doc\">docs#summable_iff_vanishing</a> instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_iff_vanishing_norm#doc\">docs#summable_iff_vanishing_norm</a> (mentioned by Terry) because we can't use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_norm_iff#doc\">docs#summable_norm_iff</a> as we're not working with a normed real vector space (edit: we can still use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=summable_of_summable_norm#doc\">docs#summable_of_summable_norm</a> though). Other key lemmas include <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum_le_of_sum_le#doc\">docs#tsum_le_of_sum_le</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=norm_tsum_le_tsum_norm#doc\">docs#norm_tsum_le_tsum_norm</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Summable.subtype#doc\">docs#Summable.subtype</a>.</p>",
        "id": 400345079,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699148701
    },
    {
        "content": "<p>I'm adding a general lemma as well as Nat specific version at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8194\">#8194</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">Disjoint</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">e</span>\n<span class=\"n\">Summable</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>and the desired <code>example</code> can be obtained by taking <code>e</code> to be an open ball.</p>",
        "id": 400362508,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699162218
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 400370852,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699170281
    }
]