[
    {
        "content": "<p>(I hope this is the correct stream to ask beginner questions) Hello, I am fairly new to Lean and figured I want to do advent of code in it. I would like to get some practice with reasoning about predicates as types. For that, I want to create a structure that will carry a list and a proof of its length, something like that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">FixedArray</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">data.length</span> <span class=\"bp\">==</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>However, I am having trouble constructing an instance of this type. I didn't expect the following to work (I understand why it doesn't), but I hope it illustrates well where I am currently at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">makeFixed</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">FixedArray</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">len</span> <span class=\"o\">:=</span> <span class=\"n\">l.length</span> <span class=\"bp\">==</span> <span class=\"n\">n</span>\n  <span class=\"k\">if</span> <span class=\"n\">len</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">FixedArray.mk</span> <span class=\"n\">l</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>How can I conditionally produce a proof of <code>length</code>?</p>",
        "id": 406614183,
        "sender_full_name": "Marcin Wojnarowski",
        "timestamp": 1701980116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"633816\">James Oswald</span> has marked this topic as resolved.</p>",
        "id": 406614535,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701980298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"633816\">James Oswald</span> has marked this topic as unresolved.</p>",
        "id": 406614560,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701980319
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">makeFixed</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">FixedArray</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">==</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">FixedArray.mk</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 406615178,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1701980593
    },
    {
        "content": "<p>Oh wow! Thanks, that makes sense. How can I then call this function with a compile-time known <code>n</code>? I would like to carry around a type say <code>FixedArray Nat 5</code>. Specifying this as a type works, but calling makeFixed doesnt: <code>makeFixed [1, 2, 3, 4, 5] 5</code> errors out on the <code>5</code> with <code>invalid universe level, ?u.17938 is not greater than 0</code>. I have read before about universes, but I am unsure how this can be applied here</p>",
        "id": 406616341,
        "sender_full_name": "Marcin Wojnarowski",
        "timestamp": 1701981168
    },
    {
        "content": "<p>Nevermind, my fault. I had a typo. It does indeed work.</p>",
        "id": 406616883,
        "sender_full_name": "Marcin Wojnarowski",
        "timestamp": 1701981463
    },
    {
        "content": "<p>Thank you the help!</p>",
        "id": 406616910,
        "sender_full_name": "Marcin Wojnarowski",
        "timestamp": 1701981479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"673052\">Marcin Wojnarowski</span> has marked this topic as resolved.</p>",
        "id": 406616959,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701981487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"673052\">@Marcin Wojnarowski</span> I'd suggest using <code>data.length = n</code> instead of <code>data.length == n</code>. The first is the mathematical equality proposition, and the second is a boolean function that, via a theorem, is <code>true</code> if and only if <code>data.length = n</code>. It doesn't matter much, but it does add a step if you want to prove anything.</p>",
        "id": 406632001,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701988445
    },
    {
        "content": "<p>Ah yes, thank you.</p>",
        "id": 406718218,
        "sender_full_name": "Marcin Wojnarowski",
        "timestamp": 1702026949
    },
    {
        "content": "<p>This also means that if you want to create a fixed array from an array literal, rather than using your <code>Option</code>-based constructor, you can do <code>FixedArray.mk [1,2,3] rfl</code> to get an actual <code>FixedArray Nat 3</code></p>\n<p>(<span class=\"user-mention\" data-user-id=\"673052\">@Marcin Wojnarowski</span> I just noticed that you used implicit arguments for your structure. Switch them to explicit arguments and you can write <code>FixedArray Nat 3</code> rather than <code>@FixedArray Nat 3</code>)</p>",
        "id": 406799806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702054186
    },
    {
        "content": "<p>I need the <code>Option</code>-based version as the actual list length is not known at compile time, only the desired length is known (I want to error out if the given list is of an incorrect length).</p>\n<p>I have changed the arguments to explicit right after posting the question as I noticed it doesnt make sense to have them implicit <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.</p>",
        "id": 406811619,
        "sender_full_name": "Marcin Wojnarowski",
        "timestamp": 1702058263
    }
]