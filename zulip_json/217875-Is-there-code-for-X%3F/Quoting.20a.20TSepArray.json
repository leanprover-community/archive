[
    {
        "content": "<p>How do you explicitly construct a value of type <code>TSepArray</code> using quotation?</p>\n<p>For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>gives a <code>TSyntax</code>, not a <code>TSepArray</code>.</p>",
        "id": 357025029,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683646857
    },
    {
        "content": "<p>Could you give more context (maybe a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)? The <code>quote</code> function is for creating syntax that would evaluate to <code>#[`simp, `foo]</code>. Is that what you want? Or are you wanting a <code>TSepArray `ident</code> to splice in somewhere?</p>",
        "id": 357026502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683647184
    },
    {
        "content": "<p>I want to call a library function that takes <code>TSepArray</code> (<a href=\"https://github.com/leanprover-community/mathlib4/blob/68b21e12e6d612e77f34febea2e00a9358ce2f76/Mathlib/Util/AddRelatedDecl.lean#L43\">addRelatedDecl</a>), and I just want to construct the argument explicitly.</p>",
        "id": 357027011,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683647314
    },
    {
        "content": "<p>Constructing a <code>TSyntax</code> <em>seemed</em> close to my goal of constructing a <code>TSepArray</code>, but maybe that is the wrong path.</p>",
        "id": 357027217,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683647368
    },
    {
        "content": "<p>One thing you need to make sure to do is create a <code>TSyntax `Lean.Parser.Term.attrInstance</code> for each attribute, which isn't just a <code>Name</code>, so that takes a bit more work. <code>quote</code> is specifically for creating a <code>TSyntax `term</code> (a.k.a. a <code>Term</code>).</p>",
        "id": 357027987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683647537
    },
    {
        "content": "<p>Do you need this to be programmatic, or will it be a fixed array?</p>",
        "id": 357028350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683647599
    },
    {
        "content": "<p>It is just a fixed array.</p>",
        "id": 357028684,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683647646
    },
    {
        "content": "<p>I guess this is one way to do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.attrInstance</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Syntax.TSepArray</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.attrInstance</span> <span class=\"s2\">\",\"</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Lean.Parser.Term.attrInstance</span><span class=\"bp\">|</span><span class=\"n\">simp</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Lean.Parser.Term.attrInstance</span><span class=\"bp\">|</span><span class=\"n\">foo</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"n\">arr</span>\n</code></pre></div>",
        "id": 357030515,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683647977
    },
    {
        "content": "<p>Ah, thank you!</p>",
        "id": 357030640,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683647999
    }
]