[
    {
        "content": "<p>Are we really missing the following lemma??</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">H</span> <span class=\"bp\">⊔</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Subgroup.closure</span> <span class=\"o\">((</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.iSup_eq_closure#doc\">docs#Subgroup.iSup_eq_closure</a> which is the version for any indexed family of subgroups and a completely crazy <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.sup_eq_closure#doc\">docs#Subgroup.sup_eq_closure</a> but I can't find the above.</p>",
        "id": 394520004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696284503
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.closure_union#doc\">docs#Subgroup.closure_union</a> is where I'd expect it</p>",
        "id": 394521861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696285636
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/7468\">#7468</a> in case nobody can find it.</p>",
        "id": 394521863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696285637
    },
    {
        "content": "<p>Eric, this is very much related but not the same.</p>",
        "id": 394521890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696285666
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/7468/files#diff-3ea21bd11ed765ebb85bf53c26a6b0ced8171afca566b2b1aaf9b685dbe2e421R3543\">https://github.com/leanprover-community/mathlib4/pull/7468/files#diff-3ea21bd11ed765ebb85bf53c26a6b0ced8171afca566b2b1aaf9b685dbe2e421R3543</a> to see my statement in action.</p>",
        "id": 394521976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696285717
    },
    {
        "content": "<p>Looking at your PR, I see that you use precisely the two results I was going to say we already have</p>",
        "id": 394522005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696285739
    },
    {
        "content": "<p>I think this omission is consistent across all the subobjects</p>",
        "id": 394522052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696285783
    },
    {
        "content": "<p>(and that its omission is a semi-deliberate \"this is just two lemmas together\" thing)</p>",
        "id": 394522127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696285821
    },
    {
        "content": "<p>Perhaps a good indication that this is a bad lemma is that it doesn't help for <code>H ⊔ H' ⊔ H''</code></p>",
        "id": 394522262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696285910
    },
    {
        "content": "<p>To be honest, my actual use if for teaching Lean only. I literally want to be able to say: I know <code>H \\sqcap H'</code> looks silly but the fact that the underlying set is <code>H \\cap H'</code> is kind of random, it contrasts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">H</span> <span class=\"bp\">⊔</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Subgroup.closure</span> <span class=\"o\">((</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span>  <span class=\"n\">sup_eq_closure</span> <span class=\"n\">H</span> <span class=\"n\">H'</span>\n</code></pre></div>",
        "id": 394522556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696286094
    },
    {
        "content": "<p>and I also I won't admit how much time I wasted coming up with the proof, but it was way too much  time.</p>",
        "id": 394522654,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696286157
    },
    {
        "content": "<p>And the current situation is really inconsistent with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.iSup_eq_closure#doc\">docs#Subgroup.iSup_eq_closure</a></p>",
        "id": 394522769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696286214
    },
    {
        "content": "<p>It looks like there's a clash in your PR with existing lemmas that use <code>H * H'</code> instead of <code>H ∪ H'</code></p>",
        "id": 394523466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696286721
    },
    {
        "content": "<p>Oh yes, I even mentioned it in my first post above...</p>",
        "id": 394523902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696287037
    },
    {
        "content": "<p>I tried a blind fix. We'll see what CI thinks.</p>",
        "id": 394524061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696287130
    },
    {
        "content": "<p>Is it mathematically crazy in your opinion, or just crazy in the context of the result you were hoping to find?</p>",
        "id": 394524300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696287278
    },
    {
        "content": "<p>It is mathematically weird because it is more complicated than the union version for no apparent benefit (the multiplication is larger than the union so it's a less good generating set). Note there is a meaningful and relevant very related result in the <em>commutative</em> case: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.mem_sup#doc\">docs#Subgroup.mem_sup</a>. I guess the \"crazy\" version exists only in relation to this.</p>",
        "id": 394524977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696287706
    },
    {
        "content": "<p>Anyway, there is currently a marching band playing on campus next to my office, and I interpret this as a subtle clue that it may be getting late and I should leave my office and go back home.</p>",
        "id": 394525305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696287901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Sugroup.20sup/near/394524977\">said</a>:</p>\n<blockquote>\n<p>It is mathematically weird because it is more complicated than the union version for no apparent benefit (the multiplication is larger than the union so it's a less good generating set). Note there is a meaningful and relevant very related result in the <em>commutative</em> case: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subgroup.mem_sup#doc\">docs#Subgroup.mem_sup</a>. I guess the \"crazy\" version exists only in relation to this.</p>\n</blockquote>\n<p>The “correct” multiplicative result could be that <code>H ⊔ H' = H * H'</code> when one of them normalizes the other one, at least when one of them is normal.</p>",
        "id": 394962328,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1696480143
    }
]