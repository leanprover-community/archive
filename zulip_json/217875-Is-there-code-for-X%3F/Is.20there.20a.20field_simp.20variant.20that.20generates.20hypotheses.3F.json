[
    {
        "content": "<p>In order for <code>field_simp</code> to simplify a hypothesis <code>a/c = b/c</code> to <code>a=b</code>, it requires an existing hypothesis that <code>c \\neq 0</code>.  Is there a version of <code>field_simp</code> that will go ahead and make these simplifications anyway, and add any missing hypothesis of the form <code>c \\neq 0</code> as an additional goal?</p>",
        "id": 397742378,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697818591
    },
    {
        "content": "<p>No, we don't have that. A crude version to fake this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">swap</span>\n</code></pre></div>\n<p>This adds a new goal that <code>c</code> is nonzero, and then puts it at the end of the goals list. Of course, if your idea was to avoid writing <code>c</code> in the first place, it's not a good solution, and in any case once you're stating <code>have : c ≠ 0</code>, you might as well prove it right away.</p>",
        "id": 397743466,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1697819114
    },
    {
        "content": "<p>It could be nice to have intermediate behaviours, too. I wonder if one could design a convenient syntax to specify which out of the not-verified-nonzero denominators should be multiplied through (with a goal of their nonzeroness generated), and which should be kept as denominators.</p>",
        "id": 397744299,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697819447
    },
    {
        "content": "<p>We should probably also just have a <code>field_simp!</code> that forcibly clears all denominators introducing goals as needed.</p>",
        "id": 397744448,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697819518
    },
    {
        "content": "<p>One option could be a totally opaque syntax (<code>field_simp 2 3 7</code> indicating which denominators to multiply out, for a well-defined numbering of the denominators which the user isn't expected to be able to predict) together with a widget like <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> 's congr widget to generate this tactic call, selecting the desired denominators by clicking on them.</p>",
        "id": 397744694,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697819627
    },
    {
        "content": "<p>the docstring for <code>field_simp</code> says that there is a <code>cancel_denoms</code> tactic, but I've never used it. Has it been ported?</p>",
        "id": 397744811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697819667
    },
    {
        "content": "<p>oh sorry that's for numerical denominators</p>",
        "id": 397744846,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697819685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20field_simp.20variant.20that.20generates.20hypotheses.3F/near/397744694\">said</a>:</p>\n<blockquote>\n<p>One option could be a totally opaque syntax (<code>field_simp 2 3 7</code> indicating which denominators to multiply out, for a well-defined numbering of the denominators which the user isn't expected to be able to predict) together with a widget like <span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> 's congr widget to generate this tactic call, selecting the desired denominators by clicking on them.</p>\n</blockquote>\n<p>The widget indeed makes this easy to <em>write</em>, but this sounds unpleasant to maintain if a proof changes slightly</p>",
        "id": 397747124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697820778
    },
    {
        "content": "<p>Perhaps then the tactic should just consume the terms corresponding to the nonzero denominators themselves?</p>",
        "id": 397777392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697836699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20field_simp.20variant.20that.20generates.20hypotheses.3F/near/397777392\">said</a>:</p>\n<blockquote>\n<p>Perhaps then the tactic should just consume the terms corresponding to the nonzero denominators themselves?</p>\n</blockquote>\n<p>If the tactic could also clear denominators in inequalities, adding a hypothesis that the denominators are positive, that would also be convenient.  I've had to do this a couple times now when proving inequalities and can hack things out using some combination of <code>gcongr</code>, <code>mul_le_mul</code>, <code>apply_fun</code>, and rewriting the left and right-hand sides using equalities proven by<code>field_simp</code>, but it would be nice to have an automated tool that does all of this for you.</p>",
        "id": 397863993,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697907925
    },
    {
        "content": "<p>At some point I experimented with adding <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=div_le_div_iff#doc\">docs#div_le_div_iff</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=div_lt_div_iff#doc\">docs#div_lt_div_iff</a> to the basic <code>field_simp</code> simp-set (which would allow <code>⊢ A/B ≤ C/D</code> to be converted to <code>⊢ AD ≤ BC</code>), and it seemed to work without problems.  If someone wanted to try this out on the scale of all of mathlib, it's possible that it would Just Work™.</p>",
        "id": 397866646,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697910305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> can I interest you in learning how to write lean tactics? :-)</p>",
        "id": 397866656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697910321
    },
    {
        "content": "<p>If you want to try this out yourself, you can write <code>attribute [local field_simps] div_le_div_iff div_lt_div_iff</code> at the top of a file.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">field_simps</span><span class=\"o\">]</span> <span class=\"n\">div_le_div_iff</span> <span class=\"n\">div_lt_div_iff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 397867075,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697910731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20field_simp.20variant.20that.20generates.20hypotheses.3F/near/397867075\">said</a>:</p>\n<blockquote>\n<p>If you want to try this out yourself, you can write <code>attribute [local field_simps] div_le_div_iff div_lt_div_iff</code> at the top of a file.</p>\n</blockquote>\n<p>Thanks, this helps, though still it doesn't handle all the use cases I'm seeing.  For instance, in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">field_simps</span><span class=\"o\">]</span> <span class=\"n\">div_le_div_iff</span> <span class=\"n\">div_lt_div_iff</span> <span class=\"n\">div_le_iff'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">convert</span> <span class=\"n\">h3</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n   <span class=\"n\">field_simp</span>\n   <span class=\"n\">ring</span>\n</code></pre></div>\n<p>I would ideally like to apply <code>field_simp</code> to h3 directly, but it doesn't want to clear denominators on an inequality at all.   Could this also be solved through <code>attribute [local field_simps]</code>?</p>",
        "id": 397870221,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697913612
    },
    {
        "content": "<p>That's a good (hard) example.  Since the sign of <code>x</code> is unknown (it's nonzero but could be positive or negative), one really needs <code>field_simp</code> to cancel the <code>x * z / (x * y) </code> down to <code>z / y</code> before proceeding further.  This is a feature of <code>field_simp</code> which I've seen before: it sometimes multiplies through by more factors than necessary.</p>\n<p>It seems like this is already hard in the equality case: note the extra <code>apply mul_left_cancel₀ h</code> line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">field_simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel₀</span> <span class=\"n\">h</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>I guess this means that the \"targeted simp-set\" approach is not a complete solution for the problem <code>field_simp</code> tries to solve, just a heuristic that works in common cases.</p>",
        "id": 397873113,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697916745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20field_simp.20variant.20that.20generates.20hypotheses.3F/near/397867075\">said</a>:</p>\n<blockquote>\n<p>If you want to try this out yourself, you can write <code>attribute [local field_simps] div_le_div_iff div_lt_div_iff</code> at the top of a file.</p>\n</blockquote>\n<p>(by the way, going back to the quick and dirty version,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">field_simps</span><span class=\"o\">]</span> <span class=\"n\">div_le_iff</span> <span class=\"n\">le_div_iff</span> <span class=\"n\">div_lt_iff</span> <span class=\"n\">lt_div_iff</span>\n</code></pre></div>\n<p>might be a bit more powerful than my first suggestion.)</p>",
        "id": 397873331,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697917007
    }
]