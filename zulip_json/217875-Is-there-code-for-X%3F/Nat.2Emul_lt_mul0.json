[
    {
        "content": "<p>Is there </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.mul_lt_mul₀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>in the standard library? And if not, is it worth adding it to the stdlib?</p>\n<p>FWIW, this is what I have right now (but I'd rather use stdlib instead)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.mul_lt_mul₀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"bp\">.</span>\n    <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.mul_lt_mul</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 350259579,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1681626695
    },
    {
        "content": "<p>Is that <code>Nat.mul_lt_mul h1 h2.le (pos_of_gt h2)</code>?</p>",
        "id": 350266381,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681630798
    },
    {
        "content": "<p>I don't think so. <code>Nat.mul_lt_mul</code> requires that <code>0 &lt; b</code>, but in the above theorem <code>b</code> could be <code>0</code>, so I don't think a direct application of <code>Nat.mul_lt_mul</code> will work.</p>",
        "id": 350272192,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1681633644
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Ring/Defs.html#mul_lt_mul\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Ring/Defs.html#mul_lt_mul</a>''</p>",
        "id": 351261194,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681982849
    },
    {
        "content": "<p>We don't have a special case for it for Nat, though. Arguably we should.</p>",
        "id": 351261463,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681982911
    },
    {
        "content": "<p>I think there are proofs that use existing lemmas more without the case split. The issue really is that the hypotheses are not tight: using Nat.pos_of_ne_zero and ne_of_lt, you have either 0 &lt; c or 0 &lt; d, and then for either you can just use Nat.mul_lt_mul'.</p>",
        "id": 351264190,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681983569
    },
    {
        "content": "<p>Nat.mul_lt_mul' (le_of_lt h1) h2 (lt_of_le_of_lt (zero_le _) h1) might work?</p>",
        "id": 351264993,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681983765
    }
]