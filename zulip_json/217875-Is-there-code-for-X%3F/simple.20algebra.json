[
    {
        "content": "<p>Hi everybody!<br>\nI would like to teach my students to do induction with Lean. The goal is not to have an efficient way to prove it in Lean but to be as thorough with the proof as possible. In all three exercises I come quite far, but I always fail to do some simple algebra in Lean to make it understand that the LHS is equal to the RHS. These are the exercises:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"c1\">--exercise 3.1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_one</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_one</span><span class=\"o\">]</span>\n<span class=\"n\">simp</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_sq</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n<span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_cancel_iff</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_id</span><span class=\"o\">]</span> <span class=\"c1\">--Gauss summation formula!</span>\n<span class=\"n\">simp</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_div</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">--this is where I struggle</span>\n<span class=\"c1\">--rw [mul_div (d+1) d 2]</span>\n<span class=\"c1\">--rw [← mul_assoc 2 (d + 1) d / 2]</span>\n<span class=\"gr\">sorry</span>\n<span class=\"n\">done</span>\n\n\n<span class=\"c1\">--exercise 3.2</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_three</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_mul</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_zero</span><span class=\"o\">]</span>\n<span class=\"n\">exact</span> <span class=\"n\">Nat.dvd_zero</span> <span class=\"mi\">6</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n<span class=\"n\">ring_nf</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.sub_sub</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_self_left</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.dvd_add_iff_left</span> <span class=\"n\">hd</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_one_add</span><span class=\"o\">]</span> <span class=\"c1\">--How can I say that either d or (d+1) must be even?</span>\n<span class=\"c1\">--by_cases d = 2*k</span>\n<span class=\"gr\">sorry</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_self_pow</span><span class=\"o\">]</span> <span class=\"c1\">--I don't know why I get an error message here</span>\n<span class=\"n\">done</span>\n\n<span class=\"c1\">--exercise 3.3</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.choose</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_zero</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_one</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.choose_zero_right</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_zero</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_zero</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">]</span> <span class=\"c1\">--I want Lean to do this only to the first sum on the lhs</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.choose_self</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_self</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pow_zero</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_one</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_add</span><span class=\"o\">]</span>\n<span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_succ'</span><span class=\"o\">]</span> <span class=\"c1\">--and this to the second sum on the lhs</span>\n<span class=\"gr\">sorry</span>\n<span class=\"n\">done</span>\n</code></pre></div>\n<p>I know that in the first exercises the problem is that /2 is not defined for natural numbers, but I don’t know how to deal with it. In exercise two I would like first to consider d to be even and then (d+1). Then I would just need to multiply the 3 on the RHS with the 2 of the even definition and 6 would divide this term. For the last exercise I am following this proof:</p>\n<p><a href=\"/user_uploads/3121/slyqxJwpiMJc5Br7URY8aym2/Binomialtheorem.png\">Binomialtheorem.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/slyqxJwpiMJc5Br7URY8aym2/Binomialtheorem.png\" title=\"Binomialtheorem.png\"><img src=\"/user_uploads/3121/slyqxJwpiMJc5Br7URY8aym2/Binomialtheorem.png\"></a></div><p>But the problem is that when I want to “take out” the last term first sum on the LHS, Lean takes it out in both sums. How can I make it that just the first sum is edited?<br>\nThank you all in advance for your help!</p>\n<p>All the best<br>\nMatt</p>",
        "id": 399235529,
        "sender_full_name": "Mattia Bottoni",
        "timestamp": 1698648535
    },
    {
        "content": "<p>Here is how I would solve your first question in Lean. I start by proving intermediate results over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>, where subtraction and division behave normally, and then it's easy to deduce your result using the <code>qify</code> tactic.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux1</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">push_cast</span>\n    <span class=\"n\">ring</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux2</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">push_cast</span>\n    <span class=\"n\">ring</span>\n\n<span class=\"c1\">-- remark: aux1 and aux2 have exactly the same proof.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">qify</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aux1</span><span class=\"o\">,</span> <span class=\"n\">aux2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 399283669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698665864
    },
    {
        "content": "<p>Your second and third statements have natural subtraction in the statement, so I would like to claim that they do not formally represent the statements which you think they say. The symbol <code>-</code> on natural numbers should <em>not</em> be thought of as what a mathematician means by subtraction, because no mathematician thinks that 2 - 3 = 0 whatever a type theorist says. I don't care about claims of the form \"in every case, I can prove that a&lt;=b, so b-a makes sense\". I believe that to formally represent the meaning of such statements correctly (in the eyes of mathematicians) you should be coercing into the integers or rationals in the statements, as I have done with my solution to your first question.</p>",
        "id": 399284447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698666151
    },
    {
        "content": "<p>Thank you very much for your feedback! I will think about that :)</p>",
        "id": 399512427,
        "sender_full_name": "Mattia Bottoni",
        "timestamp": 1698755791
    }
]