[
    {
        "content": "<p>(Those who lurk in Coq zulip chat too, hi! I'm from there. Greetings and best wishes to Lean zulip chat! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>\n<p>Ok, to the question - is there some formalization of extensive form games with information sets in Lean?</p>\n<p>Thank you!</p>",
        "id": 396562017,
        "sender_full_name": "Lessness",
        "timestamp": 1697225853
    },
    {
        "content": "<p>Karl Palmskog in the Coq zulip chat gave me link to his repository which contained some interesting formalization of game theory, but without information sets (as far as I could tell): <a href=\"https://github.com/palmskog/DependentTypesForExtensiveGames\">https://github.com/palmskog/DependentTypesForExtensiveGames</a></p>\n<p>Also, Wikipedia has section \"Formal definition\": <a href=\"https://en.wikipedia.org/wiki/Extensive-form_game#Formal_definition\">https://en.wikipedia.org/wiki/Extensive-form_game#Formal_definition</a><br>\nMaybe this is useful.</p>",
        "id": 396563252,
        "sender_full_name": "Lessness",
        "timestamp": 1697226555
    },
    {
        "content": "<p>Hello! I think that this doesn't exist yet in Lean.</p>",
        "id": 396679487,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697319954
    },
    {
        "content": "<p>This is my try which I'm proud about. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Beginner's happiness. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <br>\nOf course, I still need to formalize strategies of players etc., for this to have any use.</p>\n<p>Anyway, if there are any mistakes, please tell me. And, if you want, suggestions of better ways how to formalize this are welcome.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">payouts</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">decision_node</span> <span class=\"o\">(</span><span class=\"n\">node_id</span> <span class=\"n\">player</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">choices</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ids_with_degree</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.leaf</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Tree.decision_node</span> <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"n\">choices</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">List.length</span> <span class=\"n\">choices</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">List.join</span> <span class=\"o\">(</span><span class=\"n\">choices.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ids_with_degree</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">distinct_elements</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">L</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">List.Mem</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">/\\</span> <span class=\"n\">distinct_elements</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_id</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.Mem</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">ids_with_degree</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">find_first</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">L</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n              <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">x</span>\n              <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">find_first</span> <span class=\"n\">f</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get_degree</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">find_first</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span> <span class=\"bp\">==</span> <span class=\"n\">Prod.fst</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids_with_degree</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">extensive_form_game</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">underlying_tree</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">n</span> <span class=\"n\">q</span>\n  <span class=\"n\">information_set</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">property_1</span><span class=\"o\">:</span> <span class=\"n\">distinct_elements</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">ids_with_degree</span> <span class=\"n\">underlying_tree</span><span class=\"o\">))</span>\n  <span class=\"n\">property_2</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">List.Mem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">Prod.snd</span> <span class=\"o\">(</span><span class=\"n\">ids_with_degree</span> <span class=\"n\">underlying_tree</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">property_3</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">id1</span> <span class=\"n\">id2</span><span class=\"o\">,</span>\n              <span class=\"n\">has_id</span> <span class=\"n\">id1</span> <span class=\"n\">underlying_tree</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">has_id</span> <span class=\"n\">id2</span> <span class=\"n\">underlying_tree</span> <span class=\"bp\">-&gt;</span>\n              <span class=\"n\">information_set</span> <span class=\"n\">id1</span> <span class=\"bp\">=</span> <span class=\"n\">information_set</span> <span class=\"n\">id2</span> <span class=\"bp\">-&gt;</span>\n              <span class=\"n\">get_degree</span> <span class=\"n\">id1</span> <span class=\"n\">underlying_tree</span> <span class=\"bp\">=</span> <span class=\"n\">get_degree</span> <span class=\"n\">id2</span> <span class=\"n\">underlying_tree</span>\n</code></pre></div>",
        "id": 397552409,
        "sender_full_name": "Lessness",
        "timestamp": 1697738318
    }
]