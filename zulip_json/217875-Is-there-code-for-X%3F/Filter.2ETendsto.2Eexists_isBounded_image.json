[
    {
        "content": "<p>I can't find this, but perhaps my phrasing is just off. I can't imagine that we really don't have it though. Note: I'm aware of the existence of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.isBoundedUnder_le#doc\">docs#Filter.Tendsto.isBoundedUnder_le</a>, and while you <em>could</em> use that to get this, it's not really any easier.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Bounded</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Bornology</span> <span class=\"n\">Metric</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Filter.Tendsto.exists_isBounded_image</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">IsBounded</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">nhds_basis_ball.mem_of_mem</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Metric.isBounded_ball</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">subset</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">-</span> <span class=\"o\">‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hy</span>\n</code></pre></div>",
        "id": 400806781,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699386730
    },
    {
        "content": "<p>This should follow from <code>disjoint (nhds _) (cobounded _)</code>.</p>",
        "id": 400857289,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699412066
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.HasBasis.disjoint_iff_left#doc\">docs#Filter.HasBasis.disjoint_iff_left</a></p>",
        "id": 400857722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699412228
    },
    {
        "content": "<p>Something like <code>(l.basis_sets.map _).disjoint_iff_left.1 ((disjoint_nhds_cobounded _).mono_left hf)</code> (not tested)</p>",
        "id": 400857938,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699412313
    },
    {
        "content": "<p>Probably with <code>compl_mem_cobounded</code></p>",
        "id": 400857965,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699412327
    },
    {
        "content": "<p>The only reason I like this strangely looking proof more than yours is that we may want to add typeclasses for \"topology plays nicely with bornology\" later if we have some use cases.</p>",
        "id": 400858182,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699412408
    },
    {
        "content": "<p>And if we do this, it may be useful to see which basis properties (like \"nhds are bounded\") were used in the proof.</p>",
        "id": 400858435,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699412501
    }
]