[
    {
        "content": "<p>Suppose we have <code>A : Type</code> <code>R : A → A → Prop</code> and <code>P : A → Prop</code>. Assume <code>¬ P a</code> for some <code>a : A</code>. Also assume we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">u</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">u</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>Is there any way to pick a (choice) function <code>f : Nat → A</code> such that <code>f 0 = a</code> and <code>R (f n) (f succ n)</code> for all <code>n</code>?</p>",
        "id": 401720447,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699867674
    },
    {
        "content": "<p>Yes, what have you tried?</p>",
        "id": 401724455,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699868746
    },
    {
        "content": "<p>I'm not familiar with mathlib enough, but I tried to use <code>Classical.axiomOfChoice</code> or <code>Classical.skolem</code>, but they didn't work.</p>",
        "id": 401725436,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699868986
    },
    {
        "content": "<p>What do you mean didn't work? Try using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists.choose#doc\">docs#Exists.choose</a>, along with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists.choose_spec#doc\">docs#Exists.choose_spec</a></p>",
        "id": 401726587,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699869270
    },
    {
        "content": "<p>I mean I received some error message probably due to the pattern is not suitable with them. I'll look at your suggestions. Thanks.</p>",
        "id": 401728493,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699869764
    },
    {
        "content": "<p>People here will be happy to help debugging your error messages, and the best way to enable them to help you easily is to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> .</p>",
        "id": 401730732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699870434
    },
    {
        "content": "<p>deleted</p>",
        "id": 401734361,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699871456
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is something which compiles on my machine too. I get <code>unknown identifier 'beta_red'</code> with your code. You can just edit your post to contain some (possibly sorried) definitions, the relevant imports/opens etc.</p>",
        "id": 401734755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699871571
    },
    {
        "content": "<p>I see. I think it's ok now, right?</p>",
        "id": 401735396,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699871724
    },
    {
        "content": "<p>Now, there are other unknown identifiers. Actually, I don't think it depends on what <code>beta_red</code> is. Maybe, it's better to use sorried definitions?</p>",
        "id": 401735843,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699871877
    },
    {
        "content": "<p>Yes, a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is something that shows what you want help with in a single code block. You can check if you've made a mwe by clicking the \"View in Lean playground\" icon in the top right of a zulip code block.</p>",
        "id": 401736573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699872149
    },
    {
        "content": "<p>Hopefully, it's good now. Sorry, it's the first time I've submitted a  <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :)<br>\nI only need to have a suitable function <code>f</code> to obtain <code>¬ SN1 t</code> in the last step.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">SN1</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(((</span><span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)))))</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">SN2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">t</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SN2</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SN2</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">SN1_to_SN2</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">SN1</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span>\n  <span class=\"n\">intro</span> <span class=\"n\">notsnt</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">SN2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">u</span> <span class=\"n\">t'</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">SN2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">u</span> <span class=\"n\">notsnu</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">F</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">F</span>\n    <span class=\"n\">apply</span> <span class=\"n\">notsnu</span> <span class=\"o\">(</span><span class=\"n\">SN2.sn</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 401740804,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699873689
    },
    {
        "content": "<p>so you can create your desired function using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.choose#doc\">docs#Classical.choose</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.choose_spec#doc\">docs#Classical.choose_spec</a> (although it's probably best to do that separately), or you can prove this theorem using <code>push_neg</code>. Are you hoping to be able to evaluate these terms?</p>",
        "id": 401754301,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699879214
    },
    {
        "content": "<p>Also, note the similarities between your <code>SN2</code> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WellFounded.fix#doc\">docs#WellFounded.fix</a></p>",
        "id": 401754329,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699879228
    },
    {
        "content": "<p>There's a <code>choose</code> tactic for picking a function. It's a lot more convenient than using Classical.choose</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/30d39f9a058b13ec1786a90af4c051d650762951/Mathlib/Tactic/Choose.lean#L174\">https://github.com/leanprover-community/mathlib4/blob/30d39f9a058b13ec1786a90af4c051d650762951/Mathlib/Tactic/Choose.lean#L174</a></p>",
        "id": 401755396,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699879607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/suitable.20choice/near/401754301\">said</a>:</p>\n<blockquote>\n<p>Are you hoping to be able to evaluate these terms?</p>\n</blockquote>\n<p>If you mean using them in other lemmas, yes. In some cases, I need to replace <code>SN1 t</code> with <code>SN2 t</code>.</p>",
        "id": 401814237,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699896487
    },
    {
        "content": "<p>I think Eric meant \"evaluate\" as in \"use <code>#eval</code> or otherwise compile and run the code\". If this is just for proofs, and if you can prove what you need even with an arbitrary choice, then there's nothing to worry about.</p>",
        "id": 401815797,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699897070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/suitable.20choice/near/401755396\">said</a>:</p>\n<blockquote>\n<p>There's a <code>choose</code> tactic for picking a function. It's a lot more convenient than using Classical.choose</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/30d39f9a058b13ec1786a90af4c051d650762951/Mathlib/Tactic/Choose.lean#L174\">https://github.com/leanprover-community/mathlib4/blob/30d39f9a058b13ec1786a90af4c051d650762951/Mathlib/Tactic/Choose.lean#L174</a></p>\n</blockquote>\n<p>It seems very useful in my case, but I expect the function from <code>Nat</code> to <code>A</code> in my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but there is no <code>Nat</code> expression in <code>this</code> term. That's why I confused. How can I use <code>choose</code> tactic in this case?</p>",
        "id": 401816304,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699897260
    },
    {
        "content": "<p>Oh, I see, I didn't really read your question carefully. Just for sake of showing what <code>choose</code> does, here's what it does to <code>this</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">SN1_to_SN2</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">SN1</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span>\n  <span class=\"n\">intro</span> <span class=\"n\">notsnt</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">SN2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">u</span> <span class=\"n\">t'</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">SN2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">u</span> <span class=\"n\">notsnu</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">F</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">F</span>\n    <span class=\"n\">apply</span> <span class=\"n\">notsnu</span> <span class=\"o\">(</span><span class=\"n\">SN2.sn</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"n\">using</span> <span class=\"n\">this</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Adds these local variables:</span>\n<span class=\"cm\">  f : (u : A) → ¬SN2 A R u → A</span>\n<span class=\"cm\">  u : ∀ (u : A) (a : ¬SN2 A R u), R u (f u a)</span>\n<span class=\"cm\">  hu : ∀ (u : A) (a : ¬SN2 A R u), ¬SN2 A R (f u a)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401818291,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699898130
    },
    {
        "content": "<p>Now you're saying you want to generate an <code>R</code> chain. I suppose you could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.iterate#doc\">docs#Nat.iterate</a> without too much work? I'm not sure if there's already something in the library for this. (I know I've wanted this exact same thing as you before, but I don't remember how I did it -- I suspect it might have been manually using <code>choose</code>)</p>",
        "id": 401818501,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699898232
    },
    {
        "content": "<p>Here's such a function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Nat.iterate</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">,</span> <span class=\"n\">hu</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">⟩)</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">notsnt</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 401818953,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699898418
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> , I'll try these. Btw, it's good to hear from you after SLMATH school :)</p>",
        "id": 401819016,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699898445
    },
    {
        "content": "<p>Btw <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  mentioned about well-founded issue. I also wanted to use it. See this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">R_O</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">t1</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">t2</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">SN2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">t</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SN2</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SN2</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">SN2_O</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">sn2ts</span>\n  <span class=\"n\">cases</span> <span class=\"n\">sn2ts</span>\n  <span class=\"n\">next</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">SN2.sn</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t'</span> <span class=\"n\">rtt'</span>\n    <span class=\"n\">apply</span> <span class=\"n\">SN2_O</span> <span class=\"n\">t'</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">t'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R_O</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"n\">rtt'</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 401819528,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699898608
    },
    {
        "content": "<p>In <code>SN2_O</code> lemma, I receive this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">SN2_O</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">6</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">because</span> <span class=\"n\">its</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"kd\">inductive</span> <span class=\"n\">family</span> <span class=\"n\">and</span> <span class=\"n\">indices</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"kd\">variables</span>\n  <span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>",
        "id": 401819711,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699898655
    },
    {
        "content": "<p>How can I handle such problem? It seems I have well-founded relation. Do you have any idea <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> ?</p>",
        "id": 401819823,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699898710
    },
    {
        "content": "<p>If you are doing a tactic proof for <code>SN2_O</code>, you should use <code>induction</code> instead of <code>cases</code> and then use the induction hypothesis instead of referencing the lemma <code>SN2_O</code> in the proof (which implicitly calls the equation compiler to process a recursive definition and this does not work on inductive predicates)</p>",
        "id": 401858522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699915905
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">SN2_O</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">sn2ts</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t'</span> <span class=\"n\">at</span> <span class=\"n\">sn2ts</span>\n  <span class=\"n\">induction</span> <span class=\"n\">sn2ts</span> <span class=\"n\">generalizing</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sn</span> <span class=\"n\">F</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span>\n    <span class=\"n\">apply</span> <span class=\"n\">SN2.sn</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t'</span> <span class=\"n\">rtt'</span>\n    <span class=\"n\">apply</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"n\">t'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R_O</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"n\">rtt'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 401859182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699916265
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Actually a lemma similar to<code>SN2_O</code> was the reason why I need an equivalence because it was easy to show it with <code>SN1</code>. I used induction on <code>sn2ts</code> but I received the error <code>tactic 'induction' failed, major premise type is not an inductive type </code> I tried to generalize, but it didn't work I expected. And I learn now that after <code>generalize</code> tactic, I should use <code>induction sn2ts generalizing t with ...</code> I didn't know the part <code>generalizing t with...</code>. Thanks a lot.</p>",
        "id": 401861599,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699917580
    },
    {
        "content": "<blockquote>\n<p>I used induction on sn2ts but I received the error <code>tactic 'induction' failed, major premise type is not an inductive type</code></p>\n</blockquote>\n<p>that shouldn't happen, <code>sn2ts</code> is an inductive type</p>",
        "id": 401861744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699917646
    },
    {
        "content": "<p>Since it is <code>SN2</code> of a term <code>O t s</code>, I thing induction does not work directly. That's why we need first generalize <code>O t s</code> with <code>t'</code>.</p>",
        "id": 401861981,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699917781
    },
    {
        "content": "<p>The problem is that I didn't know the correct way to generalize. And I learned now, thanks.</p>",
        "id": 401862019,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699917818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/suitable.20choice/near/401818953\">said</a>:</p>\n<blockquote>\n<p>Here's such a function:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Nat.iterate</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"n\">SN2</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">,</span> <span class=\"n\">hu</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span><span class=\"o\">⟩)</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">notsnt</span><span class=\"o\">⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It worked well. Thanks for the suggestion. I should keep it in my mind for other things :)</p>",
        "id": 401889193,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1699928683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622405\">Elif Uskuplu</span> has marked this topic as resolved.</p>",
        "id": 401889262,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699928702
    }
]