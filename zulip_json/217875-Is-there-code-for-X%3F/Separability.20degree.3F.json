[
    {
        "content": "<p>I need to use the maximal separable subextension in the work of separable closure. Thus I need to prove that the sum, difference and product of two separable elements is also separable. This is not in mathlib4 yet. I check the standard textbook and it looks like that the separability degree is needed.</p>\n<ul>\n<li>If <code>L/K</code> is finite algebraic extension of fields, define the separability degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [L:K]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be the number of embeddings of <code>L</code> to a fixed algebraic closure <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>K</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\"> \\overline{K} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> of <code>K</code> which is compatible with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>→</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\"> K\\to L </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>→</mo><mover accent=\"true\"><mi>K</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\"> K\\to\\overline{K} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span>.</li>\n</ul>",
        "id": 392670620,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695462102
    },
    {
        "content": "<p>It has the following properties:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>≤</mo><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [L:K]_s\\leq [L:K] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">]</span></span></span></span>.</li>\n<li>multiplicative: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>M</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>M</mi><mo>:</mo><mi>L</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [M:K]_s=[M:L]_s[L:K]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</li>\n<li>An element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>∈</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\"> \\alpha\\in L </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is separable over <code>K</code> if and only if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [K(\\alpha):K]_s=[K(\\alpha):K] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">]</span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [L:K]_s=[L:K] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">]</span></span></span></span> if and only if every element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>∈</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\"> \\alpha\\in L </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is separable over <code>K</code>, i.e. <code>L/K</code> is a separable field extension.</li>\n<li>As a corollary, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\"> \\alpha_1,\\cdots,\\alpha_n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are separable elements over <code>K</code>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\"> K(\\alpha_1,\\cdots,\\alpha_n)/K </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a separable field extension.</li>\n</ul>\n<p>Are these in mathlib4 yet?</p>",
        "id": 392671022,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695462216
    },
    {
        "content": "<p>Besides, if <code>L/K</code> is an algebraic extension of characteristic <code>p</code> fields, <code>x</code> is an element of <code>L</code>, then <code>x</code> is separable over <code>K</code> if and only if <code>K(x)=K(x^p)</code>. This is relatively easy to proof. Is it in mathlib4 yet?</p>",
        "id": 392671343,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695462328
    },
    {
        "content": "<p>Is this related to the separable degree of a polynomial <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.HasSeparableContraction.degree#doc\">docs#Polynomial.HasSeparableContraction.degree</a> ?</p>",
        "id": 392672480,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695462771
    },
    {
        "content": "<p>Really we want the separable degree of a finite extension of fields. If the extension is simple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K(\\alpha)/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> then I suspect that the separable degree of the extension is just the degree of the separable contraction of the min poly of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>, but there are non-simple extensions all over the place when you drop separability assumptions.</p>",
        "id": 392680659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695466783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/392680659\">said</a>:</p>\n<blockquote>\n<p>If the extension is simple <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K(\\alpha)/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> then I suspect that the separable degree of the extension is just the degree of the separable contraction of the min poly of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span></p>\n</blockquote>\n<p>Yes I think that's true. The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [K(\\alpha):K]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> should be just the number of <em>distinct</em> roots of the minimal polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\"> \\alpha </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> over <code>K</code>. Is it equal to the degree of the separable contraction?</p>\n<blockquote>\n<p>but there are non-simple extensions all over the place when you drop separability assumptions.</p>\n</blockquote>\n<p>We may use the multiplicity. The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [K(\\alpha_1,\\cdots,\\alpha_n):K]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>:</mo><mi>K</mi><mo stretchy=\"false\">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>α</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [K(\\alpha_1,\\cdots,\\alpha_i):K(\\alpha_1,\\cdots,\\alpha_{i-1})]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> over all <code>1&lt;=i&lt;=n</code>.</p>",
        "id": 392707757,
        "sender_full_name": "Jz Pan",
        "timestamp": 1695481685
    },
    {
        "content": "<p>I think you have a good plan! The items you listed are not in mathlib4 as far as I know, but should be relatively straightforward from what's already there. For example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.adjoin.finrank#doc\">docs#IntermediateField.adjoin.finrank</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.card_algHom_adjoin_integral#doc\">docs#IntermediateField.card_algHom_adjoin_integral</a> give you one direction of the third item.</p>\n<p>The trickiest one is probably multiplicativity, where you need to switch from the algebraic closure of K to that of L, so it would be easier if you prove any IsAlgClosed extension of the base field gives you the same separable degree.</p>",
        "id": 392725759,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695491588
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cardinal_mk_algHom#doc\">docs#cardinal_mk_algHom</a> which gives the first item easily (the RHS is obviously equal to <code>finrank K V</code>); otherwise it would take some effort (induction) to prove.</p>\n<p>(I found these by looking at files that import Mathlib.FieldTheory.Separable)</p>",
        "id": 392727134,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695492831
    },
    {
        "content": "<p>Such general result <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=linearIndependent_toLinearMap#doc\">docs#linearIndependent_toLinearMap</a> should probably be moved much earlier ...<br>\nInteresting that what mathlib attributes to Dedekind (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=linearIndependent_monoidHom#doc\">docs#linearIndependent_monoidHom</a>) is also <a href=\"https://math.stackexchange.com/questions/3886660/intuition-of-artins-linear-independence-theorem\">attributed to Artin</a>.</p>",
        "id": 392727634,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695493318
    },
    {
        "content": "<p>Let me post the first WIP draft here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.AlgebraicClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">v'</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Field</span>\n\n<span class=\"sd\">/-- If `E / F` is an algebraic extension, then the separable degree of `E / F`</span>\n<span class=\"sd\">is the number of `F`-algebra homomorphisms from `E` to the algebraic closure of `E`.</span>\n<span class=\"sd\">Note that if `E / F` is not algebraic, then this definition makes no mathematical sense,</span>\n<span class=\"sd\">for example `sepDegree ℚ ℚ(X)` is countably infinite,</span>\n<span class=\"sd\">whereas `sepDegree ℚ ℝ` is one (!).</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sepDegree</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finSepDegree</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.toNat</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Adhoc</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">i.comp</span> <span class=\"o\">(</span><span class=\"n\">AlgEquiv.ofInjectiveField</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.toAlgHom</span> <span class=\"bp\">=</span> <span class=\"n\">i.fieldRange.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsAlgClosed</span> <span class=\"n\">i.fieldRange</span> <span class=\"n\">where</span>\n  <span class=\"n\">splits</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test4</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">i.fieldRange</span> <span class=\"bp\">≤</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test5</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">E'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">i.fieldRange</span> <span class=\"bp\">≤</span> <span class=\"n\">i'.fieldRange</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">IsAlgClosed</span> <span class=\"n\">i'.fieldRange</span> <span class=\"o\">:=</span> <span class=\"n\">test3</span> <span class=\"n\">i'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">test4</span> <span class=\"n\">halg</span> <span class=\"n\">i</span> <span class=\"n\">i'.fieldRange</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Adhoc</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sepDegree_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nonempty.intro</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IsScalarTower.toAlgHom</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sepDegree_nezero</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">NeZero.mk</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">sepDegree_nonempty</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sepDegree</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Cardinal.mk_ne_zero</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finSepDegree_nezero_of_finiteDimensional</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">NeZero.mk</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">minpoly.AlgHom.fintype</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">sepDegree_nonempty</span> <span class=\"n\">F</span> <span class=\"n\">E</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.mk_toNat_eq_card</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Fintype.card_ne_zero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sepDegree_equiv_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E'</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Equiv.ulift.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(</span><span class=\"n\">sepDegree_equiv_of_equiv</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">E'</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">Equiv.ulift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">E'</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E'</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_uLift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this.cardinal_eq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_eq_of_equiv</span> <span class=\"o\">(</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.toNat_lift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Cardinal.toNat</span>\n    <span class=\"o\">(</span><span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">E'</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sepDegree_equiv_of_isAlgClosed</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hac</span> <span class=\"o\">:=</span> <span class=\"n\">IsAlgClosure.ofAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">halg</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">IsAlgClosed.lift</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">hac.algebraic</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">i.comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span> <span class=\"n\">AlgEquiv.ofInjectiveField</span> <span class=\"n\">i</span>\n  <span class=\"k\">let</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">i.comp</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">invFun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">i'.symm.toAlgHom.comp</span> <span class=\"o\">(</span><span class=\"n\">IntermediateField.inclusion</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">test5</span> <span class=\"n\">halg</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comp</span> <span class=\"n\">f.rangeRestrict</span>\n  <span class=\"k\">have</span> <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">Function.RightInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AlgHom.comp_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">AlgHom.comp_assoc</span><span class=\"o\">,</span> <span class=\"n\">test1</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">right_inv</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">i.comp</span> <span class=\"n\">f</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">toFun</span><span class=\"o\">,</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">invFun</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">left_inv</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">right_inv</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_eq_of_isAlgClosed</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.mk_uLift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">((</span><span class=\"n\">Equiv.ulift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">AlgebraicClosure</span> <span class=\"n\">E</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(</span><span class=\"n\">sepDegree_equiv_of_isAlgClosed</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">halg</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">cardinal_eq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_eq_of_isAlgClosed</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">Cardinal.toNat</span> <span class=\"o\">(</span><span class=\"n\">Cardinal.mk</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.toNat_lift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Cardinal.toNat</span>\n    <span class=\"o\">(</span><span class=\"n\">sepDegree_eq_of_isAlgClosed</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">halg</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_self</span> <span class=\"o\">:</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">le_antisymm</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"n\">Cardinal.le_one_iff_subsingleton.2</span> <span class=\"n\">AlgHom.subsingleton</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Cardinal.one_le_iff_ne_zero.2</span> <span class=\"o\">(</span><span class=\"n\">sepDegree_nezero</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_self</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_self</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.one_toNat</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_bot</span> <span class=\"o\">:</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">IntermediateField.botEquiv</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">sepDegree_self</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Cardinal.lift_one.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">Cardinal.lift_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_bot</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_bot</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.one_toNat</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_top</span> <span class=\"o\">:</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.lift_id</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">E</span> <span class=\"n\">IntermediateField.topEquiv</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_top</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_top</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_bot'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">IntermediateField.botEquiv</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrictScalars</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_bot'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.toNat_lift</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Cardinal.toNat</span> <span class=\"o\">(</span><span class=\"n\">sepDegree_bot'</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sepDegree_top'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Cardinal.lift_id</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">sepDegree_eq_of_equiv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"o\">((</span><span class=\"n\">IntermediateField.topEquiv</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">restrictScalars</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_top'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_top'</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- theorem sepDegree_le_rank : sepDegree F E ≤ Module.rank F E := by sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lift_sepDegree_mul_lift_sepDegree_of_isAgebraic_of_adjoin_simple</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">halga</span> <span class=\"o\">:</span> <span class=\"n\">IsAlgebraic</span> <span class=\"n\">E</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">E</span> <span class=\"n\">E</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- If `E / F` is an algebraic extension, `K / E` is a finite extension, then</span>\n<span class=\"sd\">$[K:F]_s = [E:F]_s [K:E]_s$. See also `lift_rank_mul_lift_rank`. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lift_sepDegree_mul_lift_sepDegree_of_isAgebraic_of_finiteDimensional</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">L</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sepDegree</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sepDegree_bot'</span><span class=\"o\">,</span> <span class=\"n\">sepDegree_self</span><span class=\"o\">,</span> <span class=\"n\">Cardinal.lift_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">⟮</span><span class=\"n\">x</span><span class=\"bp\">⟯.</span><span class=\"n\">restrictScalars</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">α</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.of_algebraMap_eq</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">halgL</span> <span class=\"o\">:</span> <span class=\"n\">Algebra.IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lift_sepDegree_mul_lift_sepDegree_of_isAgebraic_of_adjoin_simple</span>\n      <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">K</span> <span class=\"n\">halgL</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">isAlgebraic_of_finite</span> <span class=\"n\">L</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- sepDegree ... restrictScalars</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sepDegree_top'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">induction_on_adjoin</span> <span class=\"n\">P</span> <span class=\"n\">base</span> <span class=\"n\">ih</span> <span class=\"bp\">⊤</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_le_finrank_of_adjoin_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">IsAlgebraic</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">finSepDegree_le_finrank</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">K</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">finSepDegree</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">K</span>\n  <span class=\"k\">have</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree_bot</span><span class=\"o\">,</span> <span class=\"n\">IntermediateField.finrank_bot</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"bp\">⟮</span><span class=\"n\">x</span><span class=\"bp\">⟯.</span><span class=\"n\">restrictScalars</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">induction_on_adjoin</span> <span class=\"n\">P</span> <span class=\"n\">base</span> <span class=\"n\">ih</span> <span class=\"bp\">⊤</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">finrank_top</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">finSepDegree_top</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Field</span>\n</code></pre></div>",
        "id": 399280757,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698664755
    },
    {
        "content": "<p>The first goal is to prove:</p>\n<ul>\n<li>Multiplicativity: If <code>E / F</code> is an algebraic extension, <code>K / E</code> is a finite extension, then<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo stretchy=\"false\">[</mo><mi>K</mi><mo>:</mo><mi>E</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> [K:F]_s = [E:F]_s [K:E]_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. This should be proved by induction on <code>K / E</code>. When <code>K = E(x)</code>, we should have a non-canonical bijection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>F</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mo>×</mo><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>E</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mo lspace=\"0em\" rspace=\"0em\">∼</mo></mpadded></mover><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>F</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\operatorname{Hom}_{F}(E,\\overline E)\\times\\operatorname{Hom}_E(E(x),\\overline E)\\xrightarrow\\sim\\operatorname{Hom}_F(E(x),\\overline E) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1333em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1333em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8788em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mrel mtight\">∼</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1333em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>",
        "id": 399281408,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698665021
    },
    {
        "content": "<p>Note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><mi>E</mi></msub><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\operatorname{Hom}_E(E(x),\\overline E) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1333em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is 1-to-1 correspondence to the distinct roots in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\"> \\overline{E} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> of the minimal polynomial <code>f</code> of <code>x</code> over <code>E</code>, and the above bijection maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>ϕ</mi><mo separator=\"true\">,</mo><mi>β</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (\\phi,\\beta) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ϕ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mclose\">)</span></span></span></span> to a ring homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mover accent=\"true\"><mi>E</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\"> E(x)\\to\\overline E </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8833em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.8033em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> whose restriction on <code>E</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\"> \\phi </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span>, and maps <code>x</code> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\"> \\beta </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span>.</p>",
        "id": 399282115,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698665262
    },
    {
        "content": "<ul>\n<li>Then we can prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><msub><mo stretchy=\"false\">]</mo><mi>s</mi></msub><mo>≤</mo><mo stretchy=\"false\">[</mo><mi>E</mi><mo>:</mo><mi>F</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [E:F]_s\\leq [E:F] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span></span></span></span> for finite extension <code>E / F</code> by induction, using the simple extension case and the above multiplicativity.</li>\n</ul>",
        "id": 399282577,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698665441
    },
    {
        "content": "<p>Should these be put inside <code>Mathlib.FieldTheory.SeparableDegree</code>, or in a new file?</p>",
        "id": 399282945,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698665608
    },
    {
        "content": "<p>You mean <code>Mathlib.FieldTheory.Separable</code>? I think that file is long enough to warrant a new file.</p>",
        "id": 399329979,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698680911
    },
    {
        "content": "<blockquote>\n<p>we should have a non-canonical bijection </p>\n</blockquote>\n<p>Rather than that, it may work nicer to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.sigmaFiberEquiv#doc\">docs#Equiv.sigmaFiberEquiv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Cardinal.mk_sigma#doc\">docs#Cardinal.mk_sigma</a>.</p>",
        "id": 399337056,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698683141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/399329979\">said</a>:</p>\n<blockquote>\n<p>You mean <code>Mathlib.FieldTheory.Separable</code>? I think that file is long enough to warrant a new file.</p>\n</blockquote>\n<p>No, I mean this <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/SeparableDegree.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/SeparableDegree.html</a></p>",
        "id": 399370624,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698696856
    },
    {
        "content": "<p>Oh sorry I forgot about that file ... It's short enough and you may want to relate your new results with polynomials' separable degree, so it would be reasonable to put them in the same file. If you start a new file, I'm not sure what it should be named: maybe move the polynomial file to Mathlib/RingTheory/Polynomial/SeparableDegree so you can name your new file Mathlib/FieldTheory/SeparableDegree.</p>",
        "id": 399409703,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698718380
    },
    {
        "content": "<p>I'm going to advocate for starting a new file, because the existing file imports much less. My rule of thumb for splitting a file is either when it would grow past 500 - 1000 lines, or when the imports would change.</p>",
        "id": 399439355,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698735480
    },
    {
        "content": "<p>(Does <a href=\"https://tqft.net/mathlib4files/Mathlib\">file#Mathlib</a>.FieldTheory.SeparableDegree work?)</p>",
        "id": 399439431,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698735519
    },
    {
        "content": "<p>Yes, please don't add imports to existing files, essentially ever. (And reviewers, please be <em>very</em> skeptical of this, maybe to the point we want a robot to complain about it.) It is a major cause of rot.</p>",
        "id": 399443853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698737834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/399439431\">said</a>:</p>\n<blockquote>\n<p>(Does <a href=\"https://tqft.net/mathlib4files/Mathlib\">file#Mathlib</a>.FieldTheory.SeparableDegree work?)</p>\n</blockquote>\n<p>I think it has to be separated by <code>/</code> not <code>.</code>: <a href=\"https://tqft.net/mathlib4files/Mathlib/FieldTheory/SeparableDegree\">file#Mathlib/FieldTheory/SeparableDegree</a></p>",
        "id": 399444532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698738186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/399443853\">said</a>:</p>\n<blockquote>\n<p>Yes, please don't add imports to existing files, essentially ever. (And reviewers, please be <em>very</em> skeptical of this, maybe to the point we want a robot to complain about it.) It is a major cause of rot.</p>\n</blockquote>\n<p>I see. Fortunately, <a href=\"https://tqft.net/mathlib4files/Mathlib/FieldTheory/SeparableDegree\">file#Mathlib/FieldTheory/SeparableDegree</a> is not imported by any other files. So I assume it's OK for this special case? Except for external projects.</p>",
        "id": 399510881,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698755285
    },
    {
        "content": "<p>I would still just create a new file: it's much better to have many small files than one huge file, and the best time to split is when writing new things.</p>",
        "id": 399511743,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698755577
    },
    {
        "content": "<p>I see. So is the current plan to</p>\n<ul>\n<li>rename current <code>Mathlib/FieldTheory/SeparableDegree</code> to <code>Mathlib/RingTheory/Polynomial/SeparableDegree</code></li>\n<li>... and create new <code>Mathlib/FieldTheory/SeparableDegree</code>?</li>\n</ul>",
        "id": 399517881,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698757753
    },
    {
        "content": "<p>Sounds good to me!</p>",
        "id": 399517921,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698757768
    },
    {
        "content": "<p>It's tempted to define the notation <code>Field.Emb E F</code> to be <code>E →ₐ[F] (AlgebraicClosure E)</code>, which is used in several textbooks. Is it a good idea?</p>",
        "id": 399937800,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698932245
    },
    {
        "content": "<p>BTW, I made a draft pull request <a href=\"https://github.com/leanprover-community/mathlib4/pull/8117\">#8117</a></p>",
        "id": 399937864,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698932267
    },
    {
        "content": "<blockquote>\n<p>... just the number of <em>distinct</em> roots of the minimal polynomial of <code>α</code> over <code>K</code></p>\n</blockquote>\n<p>... and that's the definition of the separable degree of a polynomial in Stacks <a href=\"https://stacks.math.columbia.edu/tag/09H5\">https://stacks.math.columbia.edu/tag/09H5</a> . It should be equal to the degree of the separable contraction.</p>\n<p>However, currently we lack the definition of the separable degree of a general polynomial; the definition of separable contraction requires the character to be known in advance. So maybe we should add that definition?</p>",
        "id": 400006498,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698952833
    },
    {
        "content": "<p>Certainly when I've lectured this material, your <code>Field.Emb</code> has played a prominent role in discussions of separability.</p>",
        "id": 400029151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698964760
    },
    {
        "content": "<p>Added <code>Emb F E</code> as well as some basic properties to <a href=\"https://github.com/leanprover-community/mathlib4/pull/8117\">#8117</a></p>",
        "id": 400039585,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698971887
    },
    {
        "content": "<p>I don't think so, because that definition singles one particular algebraic closure. And any algebraically closed extension suffices.</p>",
        "id": 400678776,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699341307
    },
    {
        "content": "<p>But for a definition we use a fixed algebraic closure, and then prove a theorem saying it's the same for any alg closed extension, right? You can't make a definition saying \"for all alg closures it's this number which might a priori depend on the choice\".</p>",
        "id": 400686854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699345013
    },
    {
        "content": "<p>Currently the newly added code in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8117\">#8117</a> is more than 300 lines. Should I submit the PR now or should I add more codes to it?</p>",
        "id": 401735807,
        "sender_full_name": "Jz Pan",
        "timestamp": 1699871859
    },
    {
        "content": "<p>It is already a long PR, so you shouldn't add more stuff. Of course we look forward for more results in others PRs!</p>",
        "id": 401735979,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699871920
    },
    {
        "content": "<p>I also finished another 300 (<span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>) lines of code about the basic results of separable degree of polynomials.</p>",
        "id": 402599967,
        "sender_full_name": "Jz Pan",
        "timestamp": 1700187993
    },
    {
        "content": "<p>What is the current progress of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8117\">#8117</a>? It was \"ready-to-merge\" for several days, but no further automatic processes taking action.</p>",
        "id": 404664287,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701186573
    },
    {
        "content": "<p>Hmm. I didn't notice it's not merged. Probably a bors glitch. Could <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> please call bors again?</p>",
        "id": 404665025,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701186793
    },
    {
        "content": "<p>I kicked it on the queue again. Hopefully no glitches this time round!</p>",
        "id": 404665441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701186929
    },
    {
        "content": "<p>By the way, currently the following things are finished (only stay in my computer for now):</p>\n<ul>\n<li>basic results of separable degree of polynomials</li>\n<li>relation of separable degree of field extensions to that of polynomials</li>\n<li>separable degree of field extensions divides (and hence smaller or equal to) the degree of field extensions</li>\n<li>(relative) separable closure, or called maximal separable subextension, proved that it forms an<code>IntermediateField</code></li>\n</ul>\n<p>The next thing is to prove some separably closed and purely inseparable properties of (relative) separable closure. But I think these two files are not imported by the separable degree file yet.</p>\n<p>Is it OK to add these two imports to separable degree file, or it's better to create a new files for (relative) separable closure, and add these two files for import?</p>",
        "id": 404667287,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701187419
    },
    {
        "content": "<p>Do you wan to add imports to FieldTheory/SeparableDegree or RingTheory/Polynomial/SeparableDegree? <del>Both are leaf files so I wouldn't mind.</del> Edit: I think AlgebraicClosure is a somewhat heavy import, so maybe the SepClosed file should import the SeparableDegree file(s), not the other way around?</p>\n<blockquote>\n<p>(relative) separable closure, or called maximal separable subextension, proved that it forms anIntermediateField</p>\n</blockquote>\n<p>I have defined the relative algebraic closure as an intermediate field in a branch, and <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...IntermediateField_algClosure#diff-426d60d7e9edc9e20379127612410ad633864c2d5a9cd001729d128f0993b00eR444-R448\">this lemma</a> might be useful to you.</p>",
        "id": 404672261,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701188996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/404672261\">said</a>:</p>\n<blockquote>\n<p>Do you wan to add imports to FieldTheory/SeparableDegree or RingTheory/Polynomial/SeparableDegree? <del>Both are leaf files so I wouldn't mind.</del> Edit: I think AlgebraicClosure is a somewhat heavy import, so maybe the SepClosed file should import the SeparableDegree file(s), not the other way around?</p>\n</blockquote>\n<p>Currently the <code>FieldTheory/SeparableDegree</code> already imports <code>AlgebraicClosure</code> since the <code>Emb</code> is already defined to be the type of embeddings into  <code>AlgebraicClosure</code>. What I want to do is also import <code>IsSepClosed</code> to <code>FieldTheory/SeparableDegree</code>, but only used for stating properties of relative separable closure. But maybe the other way around is better? Or perhaps create a new file <code>SeparableClosure</code> which imports <code>IsSepClosed</code> and <code>SeparableDegree</code>?</p>\n<p>PS: I remembered that there seems to be purely inseparable in mathlib, but I didn't find them. Maybe there are no such definitions yet. The only one is <code>Polynomial.contraction_degree_eq_or_insep</code> which mentions <code>insep</code>.</p>\n<blockquote>\n<blockquote>\n<p>(relative) separable closure, or called maximal separable subextension, proved that it forms anIntermediateField</p>\n</blockquote>\n<p>I have defined the relative algebraic closure as an intermediate field in a branch, and <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...IntermediateField_algClosure#diff-426d60d7e9edc9e20379127612410ad633864c2d5a9cd001729d128f0993b00eR444-R448\">this lemma</a> might be useful to you.</p>\n</blockquote>\n<p>No worries, I already proved that if <code>x</code> is a separable element, then <code>F(x) / F</code> is a separable extension. In particular <code>1/x</code> is also a separable element.</p>",
        "id": 404713970,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701203883
    },
    {
        "content": "<blockquote>\n<p>By the way, currently the following things are finished (only stay in my computer for now)</p>\n</blockquote>\n<p>I will create a (draft) PR soon. <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 404714299,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701204023
    },
    {
        "content": "<p>Oh indeed! If it already import AlgebraicClosure, importing IsSepClosed adds very little, since IsSepClosed only imports AlgebraicClosure. (IsSepClosed doesn't currently use AlgebraicClosure, but your TODOs will need it.)</p>",
        "id": 404716567,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701205016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/404716567\">said</a>:</p>\n<blockquote>\n<p>(IsSepClosed doesn't currently use AlgebraicClosure, but your TODOs will need it.)</p>\n</blockquote>\n<p>My plan is some of the remaining TODOs will be implemented in other files <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 404721668,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701207005
    },
    {
        "content": "<p>I created a new draft PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8696\">#8696</a>. Comments are welcomed.</p>",
        "id": 404752008,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701220688
    },
    {
        "content": "<p>I suspect that there are some redundant codes, for example, it's possible that I used some lengthy code in earlier theorems, but in later theorems I found a simpler way to write code, but I forgot to adapt it to earlier codes.</p>",
        "id": 404752997,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701221035
    },
    {
        "content": "<p>I want to prove that the degree of the relative separable closure <code>L</code> of a finite extension <code>E/F</code> over the base field <code>F</code> is equal to the separable degree of <code>E/F</code>. But I found that maybe it's harder than what I think before.</p>\n<p>As usual, it should be proved by induction:</p>\n<ul>\n<li>If <code>E=F(x)</code>, let <code>f</code> be the minimal polynomial of <code>x</code>, with <code>f(X)=g(X^(p^n))</code> where <code>g</code> is separable. Then I claim that <code>L=F(x^(p^n))</code>. To prove it is indeed the relative separable closure, I should prove that <code>L/F</code> is separable while <code>E/L</code> is <strong>purely inseparable</strong>, and then I should prove that such characterization is equivalent to <code>L</code> being the relative separable closure. <strong>(Note that currently purely inseparable is not defined yet.)</strong></li>\n<li>If <code>K/E/F</code> is a field extension tower, <code>L1, L2, L3</code> are relative separable closures of <code>E/F, K/E, K/F</code>, respectively, then I should prove that <code>[L3:F] = [L1:F] * [L2:E]</code>. To prove this, first I claim that <code>L3</code> is indeed equal to the relative separable closure of <code>K/L1</code>. Secondly, I claim that <code>[L3:L1] = [L2:E]</code>, which should be proved via that <code>E/L1</code> is purely inseparable, while <code>L3/L1</code> is separable, hence they are <strong>linearly disjoint</strong> over <code>L1</code>. <strong>(I think linearly disjoint is not in mathlib yet.)</strong> Lastly, <code>L2</code> should be equal to the compositum of <code>E</code> and <code>L3</code> over <code>L1</code>, which gives my second claim.</li>\n</ul>\n<p>Any suggestions to a simpler proof?</p>",
        "id": 405222746,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701384993
    },
    {
        "content": "<p>I think it's easy to show [E:L] must be purely inseparable in general (not just in the E=F(x) case). (If the minimal polynomial of some element x in E has more than 1 root, you contract it to a separable irreducible polynomial with more than 1 root, and adjoining such a root (which exists in E, of the form x^(p^n)) gives you a larger separable subextension of E/F.) By the tower law you've proven, you just need to show the separable degree of a purely inseparable extension is 1, but that easily follows from the definition + induction, as the minimal polynomials have only one root.</p>",
        "id": 405225759,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701386336
    },
    {
        "content": "<p>Oh, you also need the separable degree of a separable extension is equal to its degree. Maybe it's in your PRs, didn't look yet ...</p>",
        "id": 405225960,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701386423
    },
    {
        "content": "<p>Oh, thanks! It's great <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 405227434,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701387269
    },
    {
        "content": "<p>I made a mistake in defining <code>sepDegree F E</code>. Currently it is defined to be the cardinality of <code>Emb F E</code>. Originally I want to prove that it is equal to <code>Module.rank E (separableClosure F E)</code> if <code>E / F</code> is algebraic. It turns out that this is true only when <code>sepDegree F E</code> is finite. When it is infinite, it behaves badly.</p>",
        "id": 405898201,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701718275
    },
    {
        "content": "<p>For example, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mrow><mi mathvariant=\"double-struck\">Q</mi><mtext>-alg</mtext></mrow></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>μ</mi><msup><mi>p</mi><mi mathvariant=\"normal\">∞</mi></msup></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mo>≅</mo><msubsup><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi><mo>×</mo></msubsup></mrow><annotation encoding=\"application/x-tex\"> \\mathrm{Hom}_{\\mathbb{Q}\\text{-alg}}(\\mathbb{Q}(\\mu_{p^\\infty}),\\overline{\\mathbb{Q}})\\cong\\mathbb{Z}_p^\\times </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.175em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">Q</span><span class=\"mord text mtight\"><span class=\"mord mtight\">-alg</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2655em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.8089em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1667em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1544em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span></span></span></span> which is uncountable, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>μ</mi><msup><mi>p</mi><mi mathvariant=\"normal\">∞</mi></msup></msub><mo stretchy=\"false\">)</mo><mo>:</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [\\mathbb{Q}(\\mu_{p^\\infty}):\\mathbb{Q}] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2655em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">]</span></span></span></span> is only countable. So it's possible that the separable degree of an infinite field extension is larger than the degree of the field extension itself <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>Anyone has suggestions? Currently I tend to remove the <code>sepDegree</code>, but only leave <code>Emb</code> and <code>finSepDegree</code>. Then I redefine <code>sepDegree F E</code> to be <code>Module.rank F (separableClosure F E)</code>, and I can prove that when <code>Emb</code> is finite, it coincides with the previous definition.</p>",
        "id": 405898648,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701718455
    },
    {
        "content": "<p>Indeed, it happens for any algebraic extension of infinite separable degree, where you make infinitely many choices to define an embedding. I suspect <code>#(Emb F E) = 2^Module.rank F (separableClosure F E)</code> is always true in the infinite case (&lt;= is easy but &gt;= may require transfinite induction), and I agree <code>sepDegree</code> should be redefined and <code>finSepDegree</code> can be kept.</p>",
        "id": 405902140,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701719951
    },
    {
        "content": "<p>OK. I managed to remove <code>sepDegree</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8696\">#8696</a>.</p>\n<p>By the way, it seems that the file <code>SeparableDegree</code> gets too long. Perhaps the new contents should be split into 3 files:</p>\n<ul>\n<li>results directly related to separable degree should be keep in <code>SeparableDegree</code> file</li>\n<li><code>SeparableClosure</code> should have results related to (relative) separable closure and its properties not involving purely inseparable</li>\n<li><code>PurelyInseparable</code>should have the definition of purely inseparable, its properties and its relation to separable closure</li>\n</ul>\n<p>I still need to figure out how to organize the latter two files since I found that these properties are usually mixed together. Do you have any suggestions?</p>",
        "id": 405945490,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701738364
    },
    {
        "content": "<p>Haven't looked at the PR close enough to form educated suggestions about organization, unfortunately.</p>\n<p>Just sharing a random observation: the integrality condition in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsSeparable#doc\">docs#IsSeparable</a> is redundant when the base ring is nontrivial, because of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=minpoly.eq_zero#doc\">docs#minpoly.eq_zero</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.not_separable_zero#doc\">docs#Polynomial.not_separable_zero</a> :)</p>",
        "id": 405981619,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701756524
    },
    {
        "content": "<p>Couldn't you just define the inseparable degree of an algebraic extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\"> E \\to F </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>F</mi><mo>:</mo><msub><mi>E</mi><mi>s</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [F : E_s] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> E_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the separable closure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\"> E </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. And prove the coincidence in the finite case?</p>",
        "id": 405997754,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701763336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/405997754\">said</a>:</p>\n<blockquote>\n<p>Couldn't you just define the inseparable degree of an algebraic extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>→</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\"> E \\to F </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>F</mi><mo>:</mo><msub><mi>E</mi><mi>s</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> [F : E_s] </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\"> E_s </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the separable closure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\"> E </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>. And prove the coincidence in the finite case?</p>\n</blockquote>\n<p>This is my plan. Currently inseparable degree is not defined yet; only separable degree is defined.</p>\n<p>I prefer to keep current <code>finSepDegree F E := Cardinal.toNat (Cardinal.mk (Emb F E))</code> definition since it's crucial to develop the theory of separable closure; without it you can't even prove that the set of separable elements form a field. Then I can define <code>sepDegree F E := Module.rank F (separableClosure F E)</code>, and I can prove that <code>finSepDegree F E = Cardinal.toNat (sepDegree F E)</code>, namely, they are both finite or infinite, and if they are finite, they coincide.</p>",
        "id": 406049479,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701780646
    },
    {
        "content": "<p>Why not use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.card#doc\">docs#Nat.card</a> then? Does anyone care about the cardinality if it's infinite? With Nat.card you just get the answer 0 for infinite sets, and as the degree can't actually be 0 this seems like a really nice use case.</p>",
        "id": 406060259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701784128
    },
    {
        "content": "<p>You're right. <code>Nat.card α := Cardinal.toNat (Cardinal.mk α)</code> and that's what I'm exactly looking for. Sorry I overlooked it before. I'll change it later.</p>",
        "id": 406061371,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701784507
    },
    {
        "content": "<p>Don't apologise -- I'm just trying to help :-)</p>",
        "id": 406061489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701784550
    },
    {
        "content": "<p>I rapidly looked at Bourbaki's algebra, and saw they make finiteness assumptions here and there, and couldn't find a general definition by browsing the web. Using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.card#doc\">docs#Nat.card</a> is nice because that does not assert that the number might be relevant when infinite. In math, we may add an hypothesis to a definition,but that is less natural in Lean.</p>",
        "id": 406168167,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701814322
    },
    {
        "content": "<p>Sure. Now the definition uses <code>Nat.card</code> instead.</p>",
        "id": 406192823,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701826302
    },
    {
        "content": "<p>Now I'm stuck with a stupid question: if a vector space is not <code>FiniteDimensional</code>, and given any natural number <code>n</code>, how can I choose <code>n</code> linearly independent elements of it?</p>",
        "id": 406193072,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701826436
    },
    {
        "content": "<p>More specifically, if <code>E / F</code> is an infinite algebraic extension, for any natural number <code>n</code>, I want to find an intermediate field <code>L</code> such that <code>L / F</code> is finite of degree <code>&gt;= n</code>.</p>\n<p>[EDIT] OK, I think induction by <code>n</code> should work. Suppose <code>L / F</code>is finite of degree <code>&gt;= n</code>, choose any <code>x</code> not in <code>L</code>, then <code>L(x) / F</code> is finite of degree <code>&gt;= n + 1</code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 406194118,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701827024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366779\">Jz Pan</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/406193072\">said</a>:</p>\n<blockquote>\n<p>Now I'm stuck with a stupid question: if a vector space is not <code>FiniteDimensional</code>, and given any natural number <code>n</code>, how can I choose <code>n</code> linearly independent elements of it?</p>\n</blockquote>\n<p>The easiest way I can think of uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsNoetherian.iff_rank_lt_aleph0#doc\">docs#IsNoetherian.iff_rank_lt_aleph0</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsNoetherian.iff_fg#doc\">docs#IsNoetherian.iff_fg</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.rank_def#doc\">docs#Module.rank_def</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_iSup_iff#doc\">docs#lt_iSup_iff</a></p>",
        "id": 406226549,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701839196
    },
    {
        "content": "<p>OK, finally I'm stuck with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is same as <code>IntermediateField.eq_of_le_of_finrank_le</code> but with <code>FiniteDimensional K L</code> replaced by <code>FiniteDimensional K E</code>. It must be correct. Why is it not in mathlib yet? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 406318883,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701873293
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IntermediateField.toSubalgebra_injective</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Subalgebra.toSubmodule_injective</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"n\">E.toSubalgebra</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hfin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">FiniteDimensional.eq_of_le_of_finrank_le</span> <span class=\"n\">h_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 406323560,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701874823
    },
    {
        "content": "<p>And I think it is a better statement than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.eq_of_le_of_finrank_le#doc\">docs#IntermediateField.eq_of_le_of_finrank_le</a> (it is more general)</p>",
        "id": 406323691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701874843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/406323691\">said</a>:</p>\n<blockquote>\n<p>And I think it is a better statement than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.eq_of_le_of_finrank_le#doc\">docs#IntermediateField.eq_of_le_of_finrank_le</a> (it is more general)</p>\n</blockquote>\n<p>I think so. Same as other three similar statements (in two of them, replace <code>FiniteDimensional K L</code> by <code>FiniteDimensional F L</code>).</p>\n<p>The problem is that does this change make the existing code works seamlessly, namely, can we get <code>FiniteDimensional K E</code> from <code>FiniteDimensional K L</code> automatically via typeclass inference. But the answer is \"no\" I think? Therefore we need to add four new statements, otherwise the existing code breaks?</p>",
        "id": 406361023,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701886759
    },
    {
        "content": "<p>Oh, I see that in <code>FiniteDimensional.eq_of_le_of_finrank_le</code> the condition corresponds to <code>FiniteDimensional K E</code>. So the problem is the <code>IntermediateField</code> version being not general enough.</p>",
        "id": 406361644,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701886988
    },
    {
        "content": "<p>Yeah the instance from <code>FiniteDimensional K L</code> to <code>FiniteDimensional K E</code> should be safe (where <code>E : IntermediateField K L</code>). If it's not there we should just add it.</p>",
        "id": 406361845,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701887062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/406361845\">said</a>:</p>\n<blockquote>\n<p>Yeah the instance from <code>FiniteDimensional K L</code> to <code>FiniteDimensional K E</code> should be safe (where <code>E : IntermediateField K L</code>). If it's not there we should just add it.</p>\n</blockquote>\n<p>I found them. They are <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.finiteDimensional_left#doc\">docs#IntermediateField.finiteDimensional_left</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.finiteDimensional_right#doc\">docs#IntermediateField.finiteDimensional_right</a>.</p>",
        "id": 406375329,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701892347
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/blob/561ab0981d6df710afb3d34423378152195e3440/Mathlib/FieldTheory/IntermediateField.lean#L710C77-L710C77\">https://github.com/leanprover-community/mathlib4/blob/561ab0981d6df710afb3d34423378152195e3440/Mathlib/FieldTheory/IntermediateField.lean#L710C77-L710C77</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nonrec</span> <span class=\"kd\">theorem</span> <span class=\"n\">eq_of_le_of_finrank_le</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toSubalgebra_injective</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Subalgebra.toSubmodule.injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">eq_of_le_of_finrank_le</span> <span class=\"n\">h_le</span> <span class=\"n\">h_finrank</span>\n</code></pre></div>\n<p>What does the <code>nonrec</code> mean?</p>",
        "id": 406376131,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701892642
    },
    {
        "content": "<p>It means that <code>eq_of_le_of_finrank_le</code> is non-recursive, ie it won't refer to itself (as it would if it were a proof by induction). Without it, Lean would think <code>eq_of_le_of_finrank_le</code> is referring to itself in <code>eq_of_le_of_finrank_le h_le h_finrank</code> even though it's referring to a different theorem (they look the same here because some namespaces have been opened) because of how name resolution works.</p>",
        "id": 406376397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701892752
    },
    {
        "content": "<p>I see. Is it not necessary if it's written as <code>FiniteDimensional.eq_of_le_of_finrank_le</code> in the proof?</p>",
        "id": 406377501,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701893116
    },
    {
        "content": "<p>Assuming you got the namespaces right, yes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 406377887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701893286
    },
    {
        "content": "<p>I tried to generalize the second statement without success, because its proof uses the first statement, so I have to convert these intermediate fields back and forth :(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IntermediateField</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Adjoin</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">E</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">K</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">Subalgebra.toSubmodule</span> <span class=\"n\">E.toSubalgebra</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hfin</span>\n  <span class=\"n\">IntermediateField.toSubalgebra_injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Subalgebra.toSubmodule_injective</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">FiniteDimensional.eq_of_le_of_finrank_le</span> <span class=\"n\">h_le</span> <span class=\"n\">h_finrank</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">h_le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.of_algebraMap_eq</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">FiniteDimensional.left</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">FiniteDimensional.right</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n  <span class=\"k\">let</span> <span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">IsScalarTower.toAlgHom</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fieldRange</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"n\">Subalgebra.algebra</span> <span class=\"n\">E'.toSubalgebra</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n  <span class=\"k\">have</span> <span class=\"n\">hE</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">restrictScalars</span> <span class=\"n\">K</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_le_of_finrank_le''</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"n\">bot_le</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">IntermediateField.finrank_bot</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">finrank_mul_finrank</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- rw [hE] -- this doesn't work</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finrank</span> <span class=\"n\">E</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">finrank_pos</span>\n    <span class=\"n\">nlinarith</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">restrictScalars</span> <span class=\"n\">K</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hE</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">restrictScalars_bot_eq_self</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 406387421,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701896399
    },
    {
        "content": "<p>Currently, in mathlib, the proof of the second statement uses the first one. But I suspect there are other proofs?<br>\n(PS: Fortunately, I only need to use the generalization of the first statement.)</p>",
        "id": 406388319,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701896606
    },
    {
        "content": "<p>I tried that the changes to <code>IntermediateField.eq_of_le_of_finrank_le</code> won't break mathlib (<a href=\"https://github.com/leanprover-community/mathlib4/pull/8696/files#diff-136515d94d81377fde45d93d4247bec3ef961127a852be2706600dd0c2424c08\">https://github.com/leanprover-community/mathlib4/pull/8696/files#diff-136515d94d81377fde45d93d4247bec3ef961127a852be2706600dd0c2424c08</a>). <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> , would you like to open a PR for these changes? Or should I open a PR?</p>",
        "id": 406413950,
        "sender_full_name": "Jz Pan",
        "timestamp": 1701908553
    },
    {
        "content": "<p>Feel free to open the PR!</p>",
        "id": 406484729,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701934829
    },
    {
        "content": "<p>Here's a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.IntermediateField.eq_of_le_of_finrank_le''''</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h_le</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_finrank</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"n\">finrank</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">h_le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">Subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"k\">from</span> <span class=\"n\">h_le.antisymm</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this.ge</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trivial</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">∈</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n    <span class=\"n\">convert</span> <span class=\"bp\">←</span> <span class=\"n\">x'.prop</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Subtype.ext_iff.mp</span> <span class=\"n\">hx'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subalgebra.bot_eq_top_iff_finrank_eq_one</span><span class=\"o\">]</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toModule</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">IsScalarTower.of_algebraMap_eq</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">left</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">right</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_mul_le_mul_left</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finrank_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finrank</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"n\">finrank_pos</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">finrank_mul_finrank'</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Feel free to PR. I think with some effort we may remove the finiteness conditions from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiniteDimensional.finrank_mul_finrank#doc\">docs#FiniteDimensional.finrank_mul_finrank</a> (and this proof would become a little shorter), and maybe the primed version (with finite free modules) as well.</p>",
        "id": 406698076,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702019244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Separability.20degree.3F/near/406698076\">said</a>:</p>\n<blockquote>\n<p>Here's a proof: ...</p>\n</blockquote>\n<p>Thank you very much, but <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  already came up with a proof at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8873#discussion_r1419362683\">https://github.com/leanprover-community/mathlib4/pull/8873#discussion_r1419362683</a> . I forgot to mention it here.</p>",
        "id": 406771938,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702046232
    },
    {
        "content": "<p>Currently I'm splitting my PR into small parts, here is the part one: <a href=\"https://github.com/leanprover-community/mathlib4/pull/9041\">#9041</a> which consists of the results before separable closure.</p>",
        "id": 407831474,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702511663
    },
    {
        "content": "<p>It's mostly ready for review.</p>",
        "id": 407831506,
        "sender_full_name": "Jz Pan",
        "timestamp": 1702511684
    }
]