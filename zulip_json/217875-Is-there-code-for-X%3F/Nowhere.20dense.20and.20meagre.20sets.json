[
    {
        "content": "<p>These are necessary to formalize Sard's theorem: the conceptual statement of Sard's theorem is that the set of critical values is meagre --- its complement is comeagre (<code>residual</code> in mathlib), it contains the intersection of countably many open dense sets. This is also the correct generalisation to Banach manifolds.</p>\n<p>While residual sets are nicer than meagre ones (e.g., the former form a filter), writing the proof only in terms of residual sets would be awkward: decomposing the critical set into disjoint subsets naturally yields a union of subsets.</p>\n<p>Would a PR adding nowhere dense and meagre sets to mathlib be welcomed? (I'd prove their API using the analogous results for open dense resp. residual sets.)</p>",
        "id": 390972592,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694706966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, haven't you defined meagre sets already?</p>",
        "id": 390973215,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694707175
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"464202\">@Felix Weilacher</span> was into this</p>",
        "id": 390977415,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1694708521
    },
    {
        "content": "<p>I have a very old lean3 write up of some basics of Baire category ending in a proof of Kuratowski Ulam <a href=\"https://github.com/Felix-Weilacher/dst/blob/main/src/Baire.lean\">here</a>.  (There are a few trivial sorry's) I took a break from working on this b/c of the port but I did plan to fix it up and PR it to mathlib4 soon. </p>\n<p>Does mathlib have a function which takes in a <code>Filter</code> <code>f</code> on a Boolean algebra and outputs the <code>Order.Ideal</code> consisting of all complements of elements of <code>f</code>? Defining this first, let's call it <code>dual f</code>, and then defining <code>meager X := dual (residual X)</code> would probably be the way to go. </p>\n<p>For whatever reason, the API for <code>Filter</code>s is a lot more developed than the API for <code>Ideal</code>s. For example there is not even a notion of a sigma-Ideal (see <code>CountableInterFilter</code>) which is the Type you'd want <code>meager X</code> to have. There is also a lot of nice infrastructure for working what I would call mod an ideal that uses the dual filter. E.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Eventually#doc\">docs#Filter.Eventually</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.EventuallyEq#doc\">docs#Filter.EventuallyEq</a>. I have always wondered whether this was intentional and analogous to e.g. the convention that we should prefer <code>lt</code> to <code>gt</code>. Anyways with all this, it might be better to try and stick with using <code>residual</code> over <code>meager</code> as much as possible.</p>",
        "id": 390983355,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694710605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nowhere.20dense.20and.20meagre.20sets/near/390983355\">said</a>:</p>\n<blockquote>\n<p>I have a very old lean3 write up of some basics of Baire category ending in a proof of Kuratowski Ulam <a href=\"https://github.com/Felix-Weilacher/dst/blob/main/src/Baire.lean\">here</a>.  (There are a few trivial sorry's) I took a break from working on this b/c of the port but I did plan to fix it up and PR it to mathlib4 soon.</p>\n</blockquote>\n<p>Cool!</p>",
        "id": 390983502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694710662
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 390984390,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694710962
    },
    {
        "content": "<p>All that being said, I think nowhere denseness itself would be a very nice addition</p>",
        "id": 390984487,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694711005
    },
    {
        "content": "<p>So I'll prepare a short PR adding just the elementary API for this - and you can refactor this later to your liking?</p>",
        "id": 390986628,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694711910
    },
    {
        "content": "<p>That sounds ideal! (no pun intended)</p>",
        "id": 390987700,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694712358
    },
    {
        "content": "<p>Felix, I've been revamping the <code>Ideal</code> API, but it's complicated by the fact that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Order.PFilter#doc\">docs#Order.PFilter</a> also exists and is not used to define <code>Filter</code>.</p>",
        "id": 390990336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694713366
    },
    {
        "content": "<p>I'm currently adding the \"apply <code>compl</code> everywhere\" to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UpperSet#doc\">docs#UpperSet</a>, which is a prerequisite to what you want.</p>",
        "id": 390990434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694713413
    },
    {
        "content": "<p>Oh I didn't even realize <code>Filter</code> wasn't  a special case of the order theoretic version in mathlib.</p>",
        "id": 390991387,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1694713788
    },
    {
        "content": "<p>Yeah... it's an annoying historical accident</p>",
        "id": 390991878,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694713952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=residual#doc\">docs#residual</a></p>",
        "id": 390993664,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1694714698
    },
    {
        "content": "<p>PR at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7180\">#7180</a></p>",
        "id": 391118176,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694768882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nowhere.20dense.20and.20meagre.20sets/near/390991878\">said</a>:</p>\n<blockquote>\n<p>Yeah... it's an annoying historical accident</p>\n</blockquote>\n<p>Why should you keep the two terminologies in Mathlib? This will force you to maintain by hand two parallel architectures of lemmas, which will quickly by unfeasible.</p>",
        "id": 391359704,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1694859052
    },
    {
        "content": "<p>Presumably because unifying is <em>also</em> work</p>",
        "id": 391360055,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694859247
    },
    {
        "content": "<p>Especially given how widespread the use of <code>Filter</code> is.</p>",
        "id": 391364566,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694862252
    },
    {
        "content": "<p>Yes, I think there's a bit more to it than just an \"historical accident\". The real reason we haven't fixed that yet is that filters of sets are <strong><em>everywhere</em></strong> in topology in Mathlib. So when the general definition was added (<a href=\"https://tqft.net/mathlib4files/Mathlib/Order/PFilter\">file#Mathlib/Order/PFilter</a> says in 2020, 3 years after <a href=\"https://tqft.net/mathlib4files/Mathlib/Order/Filter/Basic\">file#Mathlib/Order/Filter/Basic</a>), there was already a <em>lot</em> of APIs about this special case, and no one was sufficiently interested in the general case to really develop its API (I don't even think there was a consensus that unifying was the right thing to do). I'm now convinced that we should do it at some point because a few people have already complained for the lack of API in the general case, but I'm not even sure how much actually generalizes. For sure the lattice structure does, but what about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FIlter.map#doc\">docs#FIlter.map</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.comap#doc\">docs#Filter.comap</a> ?</p>",
        "id": 391382538,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694873716
    },
    {
        "content": "<p>I don't know about <code>Filter.map</code>, but <code>Filter.comap</code> generalises verbatim.</p>",
        "id": 391382790,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694873860
    },
    {
        "content": "<p>The story is a bit similar for set and order ideals : the need for them and the definition came later than the super-crucial filters on sets, and in the meantime we realized that in a lot of cases where you'd think we need them, we can just use filters instead. A great example of that is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.ae#doc\">docs#MeasureTheory.Measure.ae</a>, which works so well that I'm now convinced that working with this filter is more natural than working with the ideal of null-sets. I don't know what kind of arguments are usually done with meagre sets, but if a lot of them are reasoning \"modulo meagre sets\" then almost-surely working with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=residual#doc\">docs#residual</a> will be more convenient. A not-so-great example in my opinion is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bornology#doc\">docs#Bornology</a>, which really should be defined in terms of ideal rather than the current trick to go back to filters.</p>",
        "id": 391383356,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694874223
    },
    {
        "content": "<p>We have always said that a refactor that has no impact at all on the use of filters in topology and analysis would be welcome. But I fear this isn't so easy.</p>",
        "id": 391383782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694874483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nowhere.20dense.20and.20meagre.20sets/near/391382790\">said</a>:</p>\n<blockquote>\n<p>I don't know about <code>Filter.map</code>, but <code>Filter.comap</code> generalises verbatim.</p>\n</blockquote>\n<p>Oh in my mind <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.map#doc\">docs#Filter.map</a> would have been the easiest one to generalize (except it now goes in the opposite direction): if you have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>:</mo><mi>B</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\phi : B\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> a morphism of lattices (you probably need way less but whatever) then you can define a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mrow><mi mathvariant=\"normal\">F</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">t</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Filter}(A)\\to\\mathrm{Filter}(B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Filter</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Filter</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> by taking the preimage by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span>. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.map#doc\">docs#Filter.map</a> is the special case where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding=\"application/x-tex\">\\phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ϕ</span></span></span></span> is the inverse image under a function.</p>\n<p>Anyways, this shows that I haven't thought a lot about it, so maybe forget that last sentence about generalizations.</p>",
        "id": 391384083,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694874665
    },
    {
        "content": "<p>Another thing to note is that a bunch of people here have developped a very good intuition of how filter works and what they represent, and to me at least it's not obvious at all that any of this applies to the general case. This is still not an argument against unification of course, just a justification for why we haven't done it already.</p>",
        "id": 391384280,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694874803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Nowhere.20dense.20and.20meagre.20sets/near/391383782\">said</a>:</p>\n<blockquote>\n<p>We have always said that a refactor that has no impact at all on the use of filters in topology and analysis would be welcome. But I fear this isn't so easy.</p>\n</blockquote>\n<p>I thought so too but, come to think of it, filters are a place where defeq is rarely used, so there's potential for deep rewrites to actually be quite innocuous.</p>",
        "id": 391384379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694874860
    },
    {
        "content": "<p>I agree with Yael, I was scared of it but in the end I don't think it will break that many things. The thing I'm still wondering about is what the naming should be</p>",
        "id": 391384457,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694874918
    },
    {
        "content": "<p>I believe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter#doc\">docs#Filter</a> has to stay.<br>\nSince it duplicates <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Order.Ideal#doc\">docs#Order.Ideal</a>,  my (possibly too radical) suggestion would be to simply remove <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Order.PFilter#doc\">docs#Order.PFilter</a>. If Mathlib really needs something duplicate because the order is reversed, I'd suggest to introduce something such as <code>Order.Coideal</code> and to have the lemmas written automatically when needed.</p>",
        "id": 391392578,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1694879068
    },
    {
        "content": "<p>Note that we already have a bunch of definitions that are order duals of each other (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monotone#doc\">docs#Monotone</a> vs <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Antitone#doc\">docs#Antitone</a> for example). we don't have <code>@[to_additive]</code>-style automation for dualising for reasons (*), but we already do a lot of proof by dualizing, so nothing unusual here. </p>\n<p>(*) IIRC the reason is that what you want to do is less obvious: do you want to reverse <em>all</em> order relations at once, or do you want to state the 2^n variations where n is the number of ordered sets appearing in your lemmas?</p>",
        "id": 391393654,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694879607
    },
    {
        "content": "<p>Also, people definitely want filters on general lattices in order to do point-free topology (ping <span class=\"user-mention\" data-user-id=\"411579\">@Sam van G</span>), so I don't think we should get rid of it.</p>",
        "id": 391393989,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694879717
    },
    {
        "content": "<p>I agree that we do not want to replace all <code>Filter X</code> by <code>Filter (Set X)</code>. One possibility is to have <code>Set.Filter</code> and <code>Order.Filter</code>. I don't think that would cause too many clashes because we don't usually <code>open Order</code> in topology files, but maybe that would increase the risk of confusion.</p>",
        "id": 391394501,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694879903
    },
    {
        "content": "<p>What we should do is make <code>Filter X</code> an abbreviation of <code>PFilter (Set X)</code>, slowly move <code>Filter</code> API to <code>PFilter</code>, then dualise everything that we want to <code>Order.Ideal</code>.</p>",
        "id": 391401373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694884192
    },
    {
        "content": "<p>I agree with the strategy, but I claim that we should change the name of <code>PFilter</code>.</p>",
        "id": 391402712,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694885377
    },
    {
        "content": "<p>To what? <code>Order.Filter</code>?</p>",
        "id": 391402720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694885395
    },
    {
        "content": "<p>For example</p>",
        "id": 391402778,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694885433
    },
    {
        "content": "<p>We also have to think about what happens to lemmas that are generalized to <code>PFilter</code>: do we keep the <code>Filter</code> version as a special case, or do we expect people using <code>Filter</code> to go search for lemmas about <code>PFilter</code>?</p>",
        "id": 391402982,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694885524
    },
    {
        "content": "<p>So you want to change the name from <code>Order.PFilter</code> to <code>Order.Filter</code>? (just making sure you know it's already in the <code>Order</code> namespace) Do you want it to be <code>protected</code> so that it doesn't conflict with <code>Filter</code>?</p>",
        "id": 391403132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694885631
    },
    {
        "content": "<p>I don’t think protecting it is needed, since no one opens <code>Order</code></p>",
        "id": 391404098,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694886295
    },
    {
        "content": "<p>But I think one thing we could do is change the current <code>Filter</code> to <code>Set.Filter</code> so that it’s easier to disambiguate if needed</p>",
        "id": 391404184,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694886339
    },
    {
        "content": "<p>Ah but that could mess up linking in docs</p>",
        "id": 391404296,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694886416
    },
    {
        "content": "<p>or <code>Topology.Filter</code>. In general, a bunch of topological material deserves to be put under a namespace, eg <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LocallyFinite#doc\">docs#LocallyFinite</a>.</p>",
        "id": 391415988,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694895475
    },
    {
        "content": "<p>I believe that leaving <code>Filter</code> as such and something else for order filters (either protecting or some other name) is the way to go. In any case, the <code>P</code> in  <code>PFilter</code> is somewhat misleading. An <code>O</code> would be more appropriate.</p>",
        "id": 391420004,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1694898797
    }
]