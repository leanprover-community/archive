[
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.group#doc\">docs4#Pi.group</a> where <code>I : Prop</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406971576,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1702156436
    },
    {
        "content": "<p>No, but <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> has asked for this before</p>",
        "id": 406974729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702158162
    },
    {
        "content": "<p>(in the same context of Con(NF), actually)</p>",
        "id": 406974763,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702158181
    },
    {
        "content": "<p>I think the problem is that we can't have one instance for both because it would live in a universe that's not sufficiently obviously in Type</p>",
        "id": 406974811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702158206
    },
    {
        "content": "<p>And it has to live in Type because we decided that only types are allowed to be groups</p>",
        "id": 406974985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702158282
    },
    {
        "content": "<p>Is there a problem with supplying both instances, or is it just undesirable?</p>",
        "id": 406975312,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1702158436
    },
    {
        "content": "<p>It's not just a matter of supplying both instances, but also maintaining an entire parallel API.</p>",
        "id": 406975440,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702158488
    },
    {
        "content": "<p>That makes sense. The cost sounds pretty high given how few people will use such a feature.</p>",
        "id": 406975709,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1702158621
    },
    {
        "content": "<p>Is there any harm with using the existing instance with PLift? Also I'm curious, what's the intended use?</p>",
        "id": 406976032,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702158785
    },
    {
        "content": "<p>The use case is that I want the group structure on <code>∀ x : α, [Foo x] → G x</code>. More precisely, <code>Foo</code> encodes the <code>x</code> that have been \"calculated so far\" in a very large induction.</p>",
        "id": 406976237,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1702158883
    },
    {
        "content": "<p>To be quite fair, you could just make <code>Foo</code> <code>Type</code>-valued and everything should still work.</p>",
        "id": 406976779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702159149
    },
    {
        "content": "<p>That's true, but there are some very good reasons this particular <code>Foo</code> should be in <code>Prop</code>!</p>",
        "id": 406976825,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1702159180
    }
]