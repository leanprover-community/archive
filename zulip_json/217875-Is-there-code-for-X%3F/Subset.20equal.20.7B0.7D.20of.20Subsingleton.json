[
    {
        "content": "<p>I could not find the following results:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.subset_eq_of_subsingleton</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Set.subsingleton_of_subsingleton.eq_singleton_of_mem</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.subset_eq_zero_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Set.subset_eq_of_subsingleton</span> <span class=\"n\">s</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.subset_eq_one_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Set.subset_eq_of_subsingleton</span> <span class=\"n\">s</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Is it something that should be added to Mathlib?</p>",
        "id": 402193512,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1700042974
    },
    {
        "content": "<p>yes, also maybe a version for <code>Unique/default</code></p>",
        "id": 402197087,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1700043896
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.Nonempty.eq_singleton_of_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">default</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Nonempty.subset_singleton_iff</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">_</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Unique.uniq</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.Nonempty.eq_singleton_zero_of_nonempty</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">Set.Nonempty.eq_singleton_of_nonempty</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.Nonempty.eq_singleton_one_of_nonempty</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">Set.Nonempty.eq_singleton_of_nonempty</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">uniqueOfNonempty</span> <span class=\"o\">:</span> <span class=\"n\">Unique</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">uniqueOfSubsingleton</span> <span class=\"n\">h.choose</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.Nonempty.eq_singleton_of_nonempty_of_subsingleton</span> <span class=\"o\">:</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">uniqueOfNonempty</span> <span class=\"n\">h</span>\n    <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">default</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">uniqueOfNonempty</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.eq_singleton_of_nonempty</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.subset_eq_of_subsingleton</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.eq_singleton_of_nonempty_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">Unique.uniq</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.subset_eq_zero_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Set.subset_eq_of_subsingleton</span> <span class=\"n\">h</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.subset_eq_one_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Set.subset_eq_of_subsingleton</span> <span class=\"n\">h</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 402198258,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700044177
    },
    {
        "content": "<p>Thanks. Can you go ahead and PR your more complete version?</p>",
        "id": 402199517,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1700044436
    },
    {
        "content": "<p>I don't have time for it right now, but feel free to reuse my code :)</p>",
        "id": 402202561,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700045369
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8423\">#8423</a></p>",
        "id": 402219586,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1700050049
    }
]