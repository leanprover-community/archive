[
    {
        "content": "<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> be two matrices, with A being invertible. The rank of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is not affected by pre or post multiplication by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>. Is there code for this in mathlib? (or Mathlib4)</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>invertible</mtext><mi>A</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mtext>rank</mtext><mo stretchy=\"false\">(</mo><mrow><mi>A</mi><mi>B</mi></mrow><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>rank</mtext><mo stretchy=\"false\">(</mo><mrow><mi>B</mi><mi>A</mi></mrow><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>rank</mtext><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{invertible} A \\implies \\text{rank}({AB}) = \\text{rank}({BA}) = \\text{rank}({B})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7184em;vertical-align:-0.024em;\"></span><span class=\"mord text\"><span class=\"mord\">invertible</span></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">rank</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">rank</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">A</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">rank</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 363949743,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686046314
    },
    {
        "content": "<p>I don't think we have it, but it should follow without too much work either from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.rank_mul_le_left\">docs#matrix.rank_mul_le_left</a>, or by proving it about <code>linear_equiv</code> first then using <code>matrix.to_lin</code></p>",
        "id": 363950566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686046526
    },
    {
        "content": "<p>I have a proof that seems like a lot more work than what you suggest. Any tips? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.rank</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rank_mul_unit</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">A.det</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">⬝</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"n\">B.rank</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.rank</span><span class=\"o\">,</span> <span class=\"n\">mul_vec_lin_mul</span><span class=\"o\">,</span> <span class=\"n\">linear_map.range_comp_of_range_eq_top</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">matrix.rank</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_map.range_eq_top</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">((</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec_lin</span> <span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_vec_lin_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_vec_lin_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_vec_mul_vec</span><span class=\"o\">,</span> <span class=\"n\">mul_nonsing_inv</span><span class=\"o\">,</span> <span class=\"n\">one_mul_vec</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rank_mul_unit'</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">A.det</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"n\">B.rank</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">linear_map.ker</span> <span class=\"o\">((</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec_lin</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.ker</span> <span class=\"o\">(</span><span class=\"n\">B.mul_vec_lin</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_vec_lin_mul</span><span class=\"o\">,</span> <span class=\"n\">linear_map.ker_comp_of_ker_eq_bot</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">linear_map.ker_eq_bot</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">function.injective</span><span class=\"o\">,</span> <span class=\"n\">mul_vec_lin_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">matrix.mul_vec</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_vec_mul_vec</span><span class=\"o\">,</span> <span class=\"n\">nonsing_inv_mul</span> <span class=\"n\">A</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">one_mul_vec</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hB</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.finrank_range_add_finrank_ker</span> <span class=\"o\">((</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec_lin</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">linear_map.finrank_range_add_finrank_ker</span> <span class=\"o\">((</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_vec_lin</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">add_left_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">matrix.rank</span><span class=\"o\">,</span> <span class=\"n\">matrix.rank</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 363952219,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686046957
    },
    {
        "content": "<p>Apply matrix.rank_mul_le_left twice and use antisymmetry?</p>",
        "id": 363952604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686047056
    },
    {
        "content": "<p>Related Question: <br>\nIs<code>linear_ordered_field</code> needed in <code>rank_transpose</code>, <code>rank_transpose_mul_self</code>?</p>",
        "id": 363969127,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686050972
    },
    {
        "content": "<p>No and maybe</p>",
        "id": 363969684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686051104
    },
    {
        "content": "<p>There's another thread with a better proof of <code>rank_transpose</code></p>",
        "id": 363969730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686051116
    },
    {
        "content": "<p><code>rank_transpose_self</code> is going to need <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>'s refactor of <code>star_ordered_ring</code></p>",
        "id": 363969843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686051132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rank.20of.20Matrix.20Multiplied.20by.20an.20Invertible.20Matrix/near/363969127\">said</a>:</p>\n<blockquote>\n<p>Related Question: <br>\nIs<code>linear_ordered_field</code> needed in <code>rank_transpose</code>, <code>rank_transpose_mul_self</code>?</p>\n</blockquote>\n<p>Over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>, the matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.16em\" columnalign=\"center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi>i</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi>i</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\begin{pmatrix}1 &amp; i \\cr i &amp; -1 \\end{pmatrix}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.95em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span> is symmetric and its square is zero.  The rank goes from 1 to 0, so some assumption on the field is needed.</p>",
        "id": 363973130,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686051774
    },
    {
        "content": "<p>I think that Eric is referring to <a href=\"#narrow/stream/116395-maths/topic/row.20rank.20equals.20column.20rank/near/360941958\">this proof</a>.</p>\n<p>With <code>rank_transpose'</code> from the previous link, you can prove <code>rank_mul_unit'</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">rank_mul_unit'</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">A.det</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rank</span> <span class=\"bp\">=</span> <span class=\"n\">B.rank</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">matrix.rank_transpose'</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">matrix.rank_transpose'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">transpose_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">rank_mul_unit</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">det_transpose</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 364022561,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686062233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rank.20of.20Matrix.20Multiplied.20by.20an.20Invertible.20Matrix/near/363969843\">said</a>:</p>\n<blockquote>\n<p><code>rank_transpose_self</code> is going to need <span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span>'s refactor of <code>star_ordered_ring</code></p>\n</blockquote>\n<p>For Future Ref:</p>\n<ul>\n<li>The Refactor Eric is Referring to: <a href=\"https://github.com/leanprover-community/mathlib/pull/18854\">Pull Request 18854</a></li>\n<li>The <a href=\"#narrow/stream/116395-maths/topic/Star.20ordered.20ring\">Zulip thread</a> containing the Star Ordered Ring refactor discussion .</li>\n<li>Another related thread about <code>rank_transpose</code> a.k.a <a href=\"#narrow/stream/116395-maths/topic/row.20rank.20equals.20column.20rank\">column rank equal row rank.</a></li>\n</ul>",
        "id": 364286636,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686145985
    }
]