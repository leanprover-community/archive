[
    {
        "content": "<p>I am trying to simulate Buchberger's algorithm on Lean4 but <code>MvPolynomial.monomial</code> seems to be declared in a noncomputable way so I am trying to declare it locally and I would like to receive some help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">}(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finsupp.support</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finsupp.support</span> <span class=\"n\">p</span><span class=\"o\">)[</span><span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"n\">p</span><span class=\"o\">]:</span>\n  <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span><span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"n\">Set.toFinset</span> <span class=\"o\">(</span><span class=\"n\">Set.singleton</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n      <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Set.singleton</span> <span class=\"n\">t</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Set.singleton</span> <span class=\"o\">((</span><span class=\"n\">Finsupp.toFun</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)),</span>\n      <span class=\"n\">mem_support_toFun</span><span class=\"o\">:=</span> <span class=\"n\">_</span>\n      <span class=\"o\">:</span> <span class=\"n\">Finsupp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  type mismatch</span>\n<span class=\"cm\">  { support := Set.toFinset (Set.singleton t), toFun := ?m.126323, mem_support_toFun := ?m.126837 }</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  { x // x ∈ p.support } →₀ ?m.78690 : Type (max ?u.77308 ?u.78687)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  MvPolynomial σ R : Type (max ?u.77308 u)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Also apart from having a difficulty on defining my own version of <code>MvPolynomial.monomial</code>, would I run into more trouble for using preexisting <code>MvPolynomial</code> and <code>Finsupp</code> which are again defined as <code>noncomputable</code>?</p>",
        "id": 363494860,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1685883725
    },
    {
        "content": "<p>You'll quickly find that you can reuse almost none of <code>MvPolynomial</code> or <code>Finsupp</code> if you want computability</p>",
        "id": 363496670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685884378
    },
    {
        "content": "<p>Im still hoping that we can change that, but we certainly can't do so until the port is over</p>",
        "id": 363496739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685884410
    },
    {
        "content": "<p>In the meantime, you could build your polynomials from <code>DFinsupp</code> which <em>is</em> computable</p>",
        "id": 363496941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685884472
    },
    {
        "content": "<p>Though algorithmically it's not very efficient</p>",
        "id": 363496975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685884490
    },
    {
        "content": "<p>What would be an efficient way to do multivariable polynomials?</p>",
        "id": 363497044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685884521
    },
    {
        "content": "<p>A <code>list (monomial times coefficients)</code> quotiented out by the obvious thing?</p>",
        "id": 363497541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685884732
    },
    {
        "content": "<p><del>That's dfinsupp</del></p>",
        "id": 363499096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685885246
    },
    {
        "content": "<p>Arguably <code>mv_poly V R = finsupp (finsupp V ℕ) R</code> as we have it today is fine, the problem is that <code>dfinsupp</code> is inefficient for this use and <code>finsupp</code> is infinitely inefficient as it doesn't compute at all!</p>",
        "id": 363499535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685885390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Making.20a.20computable.20version.20of.20MvPolynomial.2Emonomial/near/363497541\">said</a>:</p>\n<blockquote>\n<p>A <code>list (monomial times coefficients)</code> quotiented out by the obvious thing?</p>\n</blockquote>\n<p>It you have a monomial order, then rather than a quotient you can use the subtype of lists than are in strict monomial order with nonzero coefficients. Polynomial addition then for example is a merging of the two lists (like merge sort) where when there are duplicates you add coefficients.</p>",
        "id": 363513747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685890213
    },
    {
        "content": "<p>I'm currently trying Dfinsupp as suggested. But I am not sure whether I am using it right.</p>\n<p>If I want to declare <code>x</code> as a Dfinsupp from <code>σ</code> to <code>ℕ</code> would it be correct to write <code>(x : (Π₀ (i : σ), ℕ))</code>?</p>\n<p>Also, I am having trouble understanding the meaning of the <code>[inst : (i : ι) → Zero (β i)]</code> part in definition of Dfinsupp. Does this mean that initially <code>β</code> is a zero function?</p>",
        "id": 363977491,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1686052744
    },
    {
        "content": "<p>The <code>zero</code> thing just means that every type in your codomain defines a zero</p>",
        "id": 363985939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686054512
    },
    {
        "content": "<p>You can write it more succinctly as <code>(x : Π₀ i : σ, ℕ)</code>, no need for the other two pairs of parens</p>",
        "id": 363986131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686054558
    },
    {
        "content": "<p>Thank you</p>",
        "id": 364014117,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1686060420
    },
    {
        "content": "<p>Also, I find that <code>β</code> does not quite act like I expect it would. For instance, I tried to build a way of representing the multiplication of (monic) monomials as the following way but it doesn't seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">TermMul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">Π₀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">)[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">σ</span><span class=\"o\">]:=</span>\n  <span class=\"n\">Dfinsupp.mk</span> <span class=\"o\">(</span><span class=\"n\">x.support.toList</span> <span class=\"bp\">++</span> <span class=\"n\">y.support.toList</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span>\n   <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x.support.toList</span> <span class=\"bp\">++</span> <span class=\"n\">y.support.toList</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x.toFun</span> <span class=\"bp\">+</span> <span class=\"n\">y.toFun</span> <span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type expected, got</span>\n<span class=\"cm\">  ((x.toFun + y.toFun) ↑i : ℕ)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is there a way that I can explicitly define the shape of the underlying function when using <code>Dfinsupp.mk</code>?</p>",
        "id": 364031741,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1686064065
    },
    {
        "content": "<p>I'd recommend avoiding <code>Dfinsupp.mk</code> and just using the constructor directly via <code>where</code> syntax</p>",
        "id": 364104192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686081729
    },
    {
        "content": "<p>Though I feel like what you actually want is just <code>def TermMul (x y : Π₀ i : σ, ℕ) := x + y</code>?</p>",
        "id": 364104310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686081773
    },
    {
        "content": "<p>Then is there a way to input an arbitrary function in <code>Dfinsupp.toFun</code>? I am trying some experiments but I seem to be misunderstanding the format:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">DfinsuppBuilder</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)[(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)]:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">support'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Dfinsupp</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  (i : Type u) → a i</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Type (max (u + 1) v) : Type (max (u + 2) (v + 1))</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  (i : ?m.112963 a) → ?m.112964 a i : Type (max ?u.1227 ?u.1228)</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">square</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">support'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Dfinsupp</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type expected, got</span>\n<span class=\"cm\">  (square i : ℕ)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 364263390,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1686141098
    },
    {
        "content": "<p>First error: <code>(i : σ) → a i</code> is not a function, it's the type of all functions. <code>toFun</code> wants one function.</p>",
        "id": 364264513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686141359
    },
    {
        "content": "<p>Second error is the same. You make functions with the <code>fun</code> constructor.</p>",
        "id": 364264683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686141405
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">square</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">support'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Dfinsupp</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 364264924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686141467
    },
    {
        "content": "<p>Thank you</p>",
        "id": 364265303,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1686141560
    },
    {
        "content": "<p>I am trying to implement the <code>support'</code> part of <code>Dfinsupp</code> but I am having an issue. The only way I know how to match the shape of <code>{ s // ∀ (i : ι), i ∈ s ∨ toFun i = 0 }</code> is by using <code>Classical.indefiniteDescription</code> which does not seem to be the intention of the authors of Dfinsupp since <code>Classical.indefiniteDescription</code> is noncomputable. Is there a way to solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">square</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">square</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t</span> <span class=\"o\">:(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p2</span> <span class=\"n\">x</span><span class=\"o\">):=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p3</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">square</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">support'</span> <span class=\"o\">:=</span> <span class=\"n\">Trunc.mk</span> <span class=\"o\">(</span><span class=\"n\">Classical.indefiniteDescription</span> <span class=\"n\">p2</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">Dfinsupp</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Classical.indefiniteDescription', and it does not have executable code</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 365038269,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1686381980
    },
    {
        "content": "<p>I think you want <code>Trunk.mk ⟨{1, 2, 3, 4}, sorry⟩</code></p>",
        "id": 365051285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686385706
    },
    {
        "content": "<p>Thank you</p>",
        "id": 365079579,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1686393074
    }
]