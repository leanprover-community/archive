[
    {
        "content": "<p>While trying to prove the Euler product for the Riemann zeta function, I found myself in a situation where I need something like the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.filter</span> <span class=\"n\">P</span> <span class=\"bp\">++</span> <span class=\"n\">l.filter</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">~</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Side question: in mathlib3, <code>list.filter</code> had a <code>α → Prop</code> argument. In Mathlib, it is <code>α → Bool</code>, which induces lots of <code>decide (blah)</code> terms coming up in the code. I assume there is a CS reason for this change, bit it seems to make life more difficult when you just want to prove things. Is there an alternative that uses <code>Prop</code> instead?)</p>\n<p>In any case, what would be a good way to prove the above? (It looks like it should be in Mathlib anyway...)</p>",
        "id": 400292259,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699098592
    },
    {
        "content": "<p>Answer to side question: No <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 400292458,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699098759
    },
    {
        "content": "<p>Just out of curiosity: Can somebody elaborate on the reasons for going from <code>Prop</code> to <code>Bool</code>?</p>",
        "id": 400292497,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699098806
    },
    {
        "content": "<p>Here is an attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">l.filter</span> <span class=\"n\">P</span> <span class=\"bp\">++</span> <span class=\"n\">l.filter</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">~</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">List.perm_iff_count.mpr</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.count_append</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">head</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span>\n      <span class=\"bp\">·</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">head</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ih</span>\n      <span class=\"bp\">·</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">head</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">List.count_cons_of_ne</span> <span class=\"n\">ha.symm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ih</span>\n</code></pre></div>\n<p>But my feeling is there should be something more direct than going via counting occurrences...</p>",
        "id": 400293509,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699099637
    },
    {
        "content": "<p>(It also needs an additional <code>DecidableEq</code> instance.)</p>",
        "id": 400293553,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699099669
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.perm_iff_count#doc\">docs#List.perm_iff_count</a> ?</p>",
        "id": 400293620,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699099733
    },
    {
        "content": "<p>In a similar context, I needed to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">List.Perm.trans</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>to be able to use <code>calc</code> with list permutations. Should this be an instance in Mathlib?</p>",
        "id": 400293628,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699099744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Struggling.20with.20List.2Efilter/near/400293620\">said</a>:</p>\n<blockquote>\n<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.perm_iff_count#doc\">docs#List.perm_iff_count</a> ?</p>\n</blockquote>\n<p>Yes, as you can see from the proof above.</p>",
        "id": 400293638,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699099757
    },
    {
        "content": "<p>Then I don't understand what you mean by</p>\n<blockquote>\n<p>But my feeling is there should be something more direct that going via counting occurrences...</p>\n</blockquote>",
        "id": 400293835,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699099981
    },
    {
        "content": "<p>Certainly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">head</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span>\n      <span class=\"bp\">·</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">head</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ih</span>\n      <span class=\"bp\">·</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">head</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">List.count_cons_of_ne</span> <span class=\"n\">ha.symm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ih</span>\n</code></pre></div>\n<p>should be its own lemma, if that's what you mean.</p>",
        "id": 400293883,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699100027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Struggling.20with.20List.2Efilter/near/400293835\">said</a>:</p>\n<blockquote>\n<p>Then I don't understand what you mean by</p>\n<blockquote>\n<p>But my feeling is there should be something more direct that going via counting occurrences...</p>\n</blockquote>\n</blockquote>\n<p>Typo, it should read \"than\", not \"that\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 400295115,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699101351
    },
    {
        "content": "<p>Ah! My feeling is that this is the most direct.</p>",
        "id": 400295295,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699101516
    },
    {
        "content": "<p>OK. Will try to PR the two lemmas later (the one you separated out above and the original one using the other one).</p>",
        "id": 400295338,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699101585
    },
    {
        "content": "<p>What would be a good file for these to go in?<br>\n<code>#find_home</code> suggests <code>Mathlib.Data.Nat.Order.Basic</code>, which is not what I would have expected...</p>",
        "id": 400300866,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699106121
    },
    {
        "content": "<p>I think for my original statement, <code>Mathlib.Data.List.Perm</code> is appropriate.<br>\nYaël's lemma needs only <code>List.count</code> and <code>List.filter</code>. This could perhaps go into <code>Mathlib.Data.List.Lemmas</code>?</p>",
        "id": 400301594,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699106655
    },
    {
        "content": "<p><code>Data.List.Count</code> is where my lemma should go</p>",
        "id": 400305801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699110332
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8189\">#8189</a> for the <code>Trans</code> instance and Yaël's lemma. The other lemma is essentially covered by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.filter_append_perm#doc\">docs#List.filter_append_perm</a> (which I noticed by looking for occurrences of <code>filter</code>in <code>Data.List.Perm</code> while trying to find a good place for the lemma).</p>",
        "id": 400329876,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699135656
    },
    {
        "content": "<p>Equivalence of lists corresponds to equality of multisets, so I'd be tempted to compare the two multisets, in the hope that more API exists for them.</p>",
        "id": 400678337,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699341116
    },
    {
        "content": "<p>Indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">l.filter</span> <span class=\"n\">P</span> <span class=\"bp\">++</span> <span class=\"n\">l.filter</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">~</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Multiset.coe_eq_coe</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Multiset.coe_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Multiset.coe_filter</span><span class=\"o\">,</span> <span class=\"n\">Multiset.filter_add_not</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 400682211,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699342987
    }
]