[
    {
        "content": "<p>Is there a tactic that will turn <code>x ≠ y</code> and <code>¬(x = y)</code> into <code>y ≠ x</code> and <code>¬(y = x)</code> respectively, that can be used on either the goal or a given hypothesis with <code>at</code>?</p>",
        "id": 338061080,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677359462
    },
    {
        "content": "<p>How about <code>rw [ne_comm]</code> or <code>rw [ne_comm] at h</code>?</p>",
        "id": 338061304,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677359682
    },
    {
        "content": "<p>For the <code>¬(x = y)</code> form you can rewrite with <code>eq_comm</code> instead if <code>ne_comm</code> doesn't work.</p>",
        "id": 338061421,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677359801
    },
    {
        "content": "<p>Thank you. It would still be nice to have a single tactic I guess, or somehow make <code>symmetry</code> do this, if that is possible maybe.</p>",
        "id": 338061704,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677360034
    },
    {
        "content": "<p>I would have expected <code>symmetry</code> to work.</p>",
        "id": 338062684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677360759
    },
    {
        "content": "<p>okay, so symmetry does indeed work on the goal, but not on a hypothesis</p>",
        "id": 338062852,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677360881
    },
    {
        "content": "<p>but <code>symmetry at h</code> doesn't seem to be valid at all, even for regular equalities.</p>",
        "id": 338062877,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677360917
    },
    {
        "content": "<p>Hmm, I didn't realize symmetry worked on the goal. Does it for both versions?</p>",
        "id": 338062985,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677361016
    },
    {
        "content": "<p>what do you mean \"both versions\"?</p>",
        "id": 338063012,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677361040
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 338063029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677361054
    },
    {
        "content": "<p>both of those work</p>",
        "id": 338063031,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677361056
    },
    {
        "content": "<p>It even works for fancier things like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.isomorphism</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≅</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 338063129,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677361129
    },
    {
        "content": "<p>Sorry, the <code>¬(x = y)</code> version. It doesn't seem to work for me there.</p>",
        "id": 338063139,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677361138
    },
    {
        "content": "<p>For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">symmetry</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">relation</span> <span class=\"n\">application</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">expected</span> <span class=\"n\">property.</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">variable_</span><span class=\"o\">,</span>\n<span class=\"n\">h1_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">h1_right</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n<span class=\"n\">contra</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 338063183,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677361175
    },
    {
        "content": "<p>Yeah, <code>symmetry</code> shouldn't work in that case because it would try to look for a <code>symm</code> lemma for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not\">docs#not</a></p>",
        "id": 338063194,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677361191
    },
    {
        "content": "<p>but a <code>dsimp</code> should change that to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span></span></span></span> I suppose.</p>",
        "id": 338063256,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677361211
    },
    {
        "content": "<p>Sorry, I have something to go to. I'll be back later.</p>",
        "id": 338063463,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1677361369
    }
]