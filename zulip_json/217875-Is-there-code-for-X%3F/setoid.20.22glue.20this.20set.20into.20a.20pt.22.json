[
    {
        "content": "<p>Do we have the setoid with relation given by <code>(x ∈ s ∧ y ∈ s) ∨ x = y</code>?</p>",
        "id": 368646017,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687455362
    },
    {
        "content": "<p>If not, what would be a good name for this setoid?</p>",
        "id": 368646117,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687455379
    },
    {
        "content": "<p>I guess you can build it as the kernel of <code>if x ∈ s then none else some x</code> to avoid needing to show an equivalence</p>",
        "id": 368646824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687455542
    },
    {
        "content": "<p>At least if I don't care about using <code>Classical.choice</code></p>",
        "id": 368647166,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687455611
    },
    {
        "content": "<p>Ah, good point</p>",
        "id": 368652159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687456743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/setoid.20.22glue.20this.20set.20into.20a.20pt.22/near/368646117\">said</a>:</p>\n<blockquote>\n<p>If not, what would be a good name for this setoid?</p>\n</blockquote>\n<p>First try: <em>blow down</em> (tbh, trying to remember the “blow up” name, the word <em>implode</em> arrived to my mind in first place).</p>",
        "id": 368693145,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1687467626
    },
    {
        "content": "<p>Or <code>contract</code></p>",
        "id": 368697875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687469181
    },
    {
        "content": "<p>I was about to say <code>contract</code> as well.</p>",
        "id": 368703366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687471217
    },
    {
        "content": "<p>In homotopy theory this construction always also means that, when <code>s</code> is empty, we adjoin a new point; is that something you want to do?</p>",
        "id": 368794629,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687507188
    },
    {
        "content": "<p>This won't be a <code>Setoid</code> on the original space. I don't know. I just saw a bunch of counterexamples of type \"the quotient of real numbers by gluing all rational numbers in 1 point\" and realized that we can't formalize them (yet).</p>",
        "id": 368979150,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687542589
    },
    {
        "content": "<p>We could have a variant of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Setoid.mkClasses#doc\">docs4#Setoid.mkClasses</a> that says for every point there is at most one set from the collection containing it, and then extend that collection with singleton sets to form a partition. If it's called <code>Setoid.mkWithClasses</code>, then you could have <code>Setoid.mkWithClass : Set X -&gt; Setoid X</code> as a special case.</p>",
        "id": 368983169,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687543544
    },
    {
        "content": "<p>This avoids this whole issue with the empty set, because <code>Setoid.mkClasses</code> basically ignores the empty class since it's irrelevant to the equivalence relation.</p>",
        "id": 368983481,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687543622
    },
    {
        "content": "<p>This naming also avoids that <code>contract</code> and <code>collapse</code> make it sound like there's some point everything's being collapsed to.</p>",
        "id": 368983676,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687543670
    }
]