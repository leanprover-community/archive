[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Location in library / proof / name?</p>\n<p>(<code>slim_check</code> agrees there are no counterexamples due to misunderstanding rounding!)</p>",
        "id": 372738829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688604028
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Field.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">w.eq_or_lt</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"bp\">;</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Int.ediv_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"o\">(</span><span class=\"n\">Int.cast_pos.2</span> <span class=\"n\">hb</span><span class=\"o\">)]</span>\n    <span class=\"n\">norm_cast</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Int.ediv_mul_le</span> <span class=\"n\">_</span> <span class=\"n\">hb.ne'</span>\n</code></pre></div>\n<p>About location: <code>#find_home</code>?</p>",
        "id": 372743050,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688606090
    },
    {
        "content": "<p>If we move lemmas about <code>Rat</code> to <code>Std</code>, then you may need a version of <code>le_div_iff</code>.</p>",
        "id": 372743128,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688606136
    },
    {
        "content": "<p><code>algebra.order.floor</code></p>",
        "id": 372795432,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688628802
    },
    {
        "content": "<p>Your lemma is basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.floor_le\">docs3#int.floor_le</a></p>",
        "id": 372795539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688628837
    },
    {
        "content": "<p>Looking at the code, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.floor_le#doc\">docs#Int.floor_le</a> might be more useful, but I don't see anything similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.floor_div_eq_div#doc\">docs#Nat.floor_div_eq_div</a> for Int on first sight</p>",
        "id": 372798212,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1688629509
    }
]