[
    {
        "content": "<p>Is there something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span> <span class=\"n\">Functor</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comb</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ColimitCocone</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ColimitCocone</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cocone.pt</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cocone</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"o\">(</span><span class=\"n\">Sigma.uncurry</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>i.e. given a family of coproduct diagrams indexed over some type <code>α</code> and a coproduct of the cone points, is there one big coproduct on <code>Sigma f</code>?<br>\nI tried to formulate this for arbitrary functors first (indead of restricting to <code>Discrete.functor</code>) but I struggled to emulate the dependence on the value of <code>f</code>.<br>\nThere is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.combineCocones#doc\">docs#CategoryTheory.Limits.combineCocones</a> but there the index categories are the same for every diagram (i.e. <code>f</code> above would have to be constant).</p>",
        "id": 401441241,
        "sender_full_name": "Christian Merten",
        "timestamp": 1699653180
    },
    {
        "content": "<p>I prove something similar in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8242\">#8242</a>:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/8242/files#diff-872c679954b062c45a489c6ba4184c58b3220532467f779d8859dcc80692358dR435-R444\">https://github.com/leanprover-community/mathlib4/pull/8242/files#diff-872c679954b062c45a489c6ba4184c58b3220532467f779d8859dcc80692358dR435-R444</a></p>",
        "id": 401444404,
        "sender_full_name": "Joël Riou",
        "timestamp": 1699655547
    }
]