[
    {
        "content": "<p>I've been trying to write up a proof that the real numbers have the Archimedean Property. One part involves defining this set:<br>\n<a href=\"/user_uploads/3121/cNkO7xdPdcveMliw6NjDt3tC/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/cNkO7xdPdcveMliw6NjDt3tC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/cNkO7xdPdcveMliw6NjDt3tC/image.png\"></a></div><p>I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>but that gives me an error. I'm guessing it's to do with casting but I don't really know how that works so I'm stumped.</p>",
        "id": 376146322,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1689623614
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 376146612,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1689623701
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/5WDuu4Rk8y-jlR7dvV82WaFT/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5WDuu4Rk8y-jlR7dvV82WaFT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/5WDuu4Rk8y-jlR7dvV82WaFT/image.png\"></a></div>",
        "id": 376149129,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1689624428
    },
    {
        "content": "<p>To me it looks like you are simply writing <code>(n : ℝ) * ε</code> where you should (like on your screenshot) be writing <code>x = n * ε</code>, so simple typo. But as Ruben suggests, the error message probably gives some sort of a hint about whether you made such a typo or not. (The \"failed to synthesize <code>has_mul Prop</code>\" might be that hint.)</p>",
        "id": 376149288,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1689624484
    },
    {
        "content": "<p>ah yeah that does it</p>",
        "id": 376149592,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1689624574
    },
    {
        "content": "<p>Since I left out the equality, it was trying to interpret the result of n * ε as a Prop</p>",
        "id": 376149762,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1689624629
    },
    {
        "content": "<p>And as Prop doesn't implement has_mul, that error message pops up</p>",
        "id": 376149853,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1689624659
    },
    {
        "content": "<p>Also while I'm here, how would I write \"the set of integers less than 0\" but have it be of the type \"set ℝ\"?</p>",
        "id": 376150473,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1689624811
    },
    {
        "content": "<p>There are probably a couple of different spellings, and I'm not at all sure which one is the best. One option is very much along the lines you had there, so something like <code>S : Set ℝ := {x | x &lt; 0 ∧ ∃ (n : ℤ), x = n}</code>. Another one might be <code>S : Set ℝ := Int.cast '' (Set.Iio (0 : ℤ))</code>. There might be many others, some more convenient than others...</p>",
        "id": 376153052,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1689625324
    },
    {
        "content": "<p>Just to throw in another, <code>S : Set ℝ := {(n : ℝ) | (n : ℤ) (_ : n &lt; 0)}</code> uses the <code>{ term | binders... }</code> notation for an image set. There's also <code>S : Set ℝ := {(n : ℝ) | (n ∈ Set.Iio (0 : ℤ))}</code>, which uses extended binders for <code>∈</code></p>",
        "id": 376168240,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689629788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"632788\">shortc1rcuit</span> has marked this topic as resolved.</p>",
        "id": 376320746,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689681322
    }
]