[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">t</span><span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a.1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">a.2</span> <span class=\"o\">}</span><span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>I believe that \"eta reduction for structures' should simplify the goal to <code>a = b*c</code>.  However, simp doesn't seem to do this.  is there another way I can get \"eta reduction for structures\" to simplify this expression?</p>",
        "id": 371375763,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1688193830
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.eta#doc\">docs4#Fin.eta</a></p>",
        "id": 371376316,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688194017
    },
    {
        "content": "<p>there is no \"eta reduction\" rule, there is an eta defeq rule</p>",
        "id": 371376375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688194040
    },
    {
        "content": "<p>I would like to do this simplification in general, i.e. <code>MyType.mk x.1 x.2 x.3 = x</code>.  Is there a way to do so?</p>",
        "id": 371377025,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1688194288
    },
    {
        "content": "<p>I would guess <code>simp (cfg:={eta:=true})</code>, which is the (quite more verbose) Lean 4 version of <code>simp {eta:=tt}</code>.</p>",
        "id": 371377706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688194546
    },
    {
        "content": "<p><code>simp (config:={eta:=true})</code> doesn't simplify anything. (I think it is also enabled by default.)</p>",
        "id": 371377958,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1688194628
    },
    {
        "content": "<p>(for completeness, <code>simp (config:={eta:=true, etaStruct := .all})</code> does nothing either, but I believe that's the default option as well)</p>",
        "id": 371378335,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1688194752
    },
    {
        "content": "<p>Could you <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>? It seems unlikely one would need this frequently.</p>",
        "id": 371416519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688204089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I am writing a tactic that takes a theorem like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">&lt;</span><span class=\"n\">t</span><span class=\"o\">):</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"n\">h₁</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">b</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And rewrites it to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x_1</span>\n</code></pre></div>\n<p>I have gotten it to the point where it generates this theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x_1.1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x_1.1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I don't think this is such an odd request, to simplify structures in this way in the context of a tactic.</p>",
        "id": 371518941,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1688226423
    },
    {
        "content": "<p>Aren't those statement definitionally equal? You wouldn't actually need to simplify, you can just assign.</p>",
        "id": 371639827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688280796
    },
    {
        "content": "<p>Hmm, ok, I could try to write a tactic that uses <code>change</code> where it finds this pattern.</p>",
        "id": 372100328,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1688408981
    },
    {
        "content": "<p>Ok, I got it working!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Find</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isEtaStruct</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">declName</span><span class=\"o\">,</span> <span class=\"n\">declArgs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e.getAppFnArgs</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">declName</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.ctorInfo</span> <span class=\"n\">ctorInfo</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">ctorInfo.induct</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.inductInfo</span> <span class=\"n\">indInfo</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">indInfo.ctors.length</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">ctorInfo.numFields</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">declArgs.size</span> <span class=\"bp\">==</span> <span class=\"n\">ctorInfo.numParams</span> <span class=\"bp\">+</span> <span class=\"n\">ctorInfo.numFields</span> <span class=\"k\">then</span>\n        <span class=\"k\">match</span> <span class=\"n\">declArgs.get</span><span class=\"bp\">?</span> <span class=\"n\">ctorInfo.numParams</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Expr.proj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">logInfo</span> <span class=\"s2\">\"hello\"</span>\n          <span class=\"k\">if</span> <span class=\"bp\">←</span>  <span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"n\">arg</span> <span class=\"k\">then</span>\n            <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n          <span class=\"k\">else</span>\n            <span class=\"n\">pure</span> <span class=\"n\">none</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs'.back</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"k\">if</span> <span class=\"bp\">←</span>  <span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"n\">arg</span> <span class=\"k\">then</span>\n                <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n              <span class=\"k\">else</span>\n                <span class=\"n\">pure</span> <span class=\"n\">none</span>\n          <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">pure</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">none</span>\n\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">etastruct</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Meta.transform</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">post</span><span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isEtaStruct</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">TransformStep.done</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">TransformStep.continue</span>\n  <span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"etastruct\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">Parser.Tactic.location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">etastruct</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.changeLocalDecl'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">etastruct</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.change</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">etastruct</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"etastruct failed\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a.1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">a.2</span> <span class=\"o\">}</span><span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">):</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a.1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">a.2</span> <span class=\"o\">}</span><span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">etastruct</span> <span class=\"n\">at</span> <span class=\"n\">d</span>\n  <span class=\"n\">etastruct</span>\n  <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 372389597,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1688495182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Eta.20reduction.20for.20structures/near/371518941\">said</a>:</p>\n<blockquote>\n<p>I am writing a tactic that takes a theorem like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">&lt;</span><span class=\"n\">t</span><span class=\"o\">):</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"n\">h₁</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">b</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And rewrites it to </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x_1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm still curious about when you would use this tactic.</p>",
        "id": 372423751,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688510030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> </p>\n<p>I'm looking to rewrite this lemma for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Array.getElem_eq_data_get</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">List.get</span> <span class=\"n\">a.data</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Array.getElem_eq_data_get_reversed</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">a</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">List.get</span> <span class=\"n\">a.data</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">i.2</span>\n</code></pre></div>\n<p>Which I then use in my simp set.  It is important to simplify the LHS, because if I just leave the LHS like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Array.getElem_eq_data_get_reversed</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">List.get</span> <span class=\"n\">a.data</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Simp will not match it properly.</p>",
        "id": 372428269,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1688513092
    },
    {
        "content": "<p>(a little <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rewriting.20constructors.20under.20forall.20bindings/near/361834565\">previous discussion</a>)</p>",
        "id": 372432070,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688515613
    }
]