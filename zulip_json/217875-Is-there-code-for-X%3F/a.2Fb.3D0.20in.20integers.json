[
    {
        "content": "<p>Is this true, and do we have it if so?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>A student just needed the direction I couldn't find. In fact I couldn't even find this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Reminder: lemmas about integer division have <code>ediv</code> not <code>div</code> in the name.</p>",
        "id": 380375254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690815070
    },
    {
        "content": "<p>I would hope slim check would find a counterexample if its not true?</p>",
        "id": 380388944,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690817145
    },
    {
        "content": "<p>It seems to be true for a, b in [-1000,1000]:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span>\n  <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"n\">for</span> <span class=\"n\">sa</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">sb</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n      <span class=\"n\">for</span> <span class=\"n\">a'</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"n\">for</span> <span class=\"n\">b'</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sa</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a'</span>\n        <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sb</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b'</span>\n        <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"n\">cond</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">|</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"n\">cond</span>\n</code></pre></div>",
        "id": 380389670,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690817248
    },
    {
        "content": "<p>And the direction you asked about follows from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.le_ediv_of_mul_le#doc\">docs#Int.le_ediv_of_mul_le</a></p>",
        "id": 380390225,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690817317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, here's another way to check it (but sadly with much smaller bounds):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.Icc</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n    <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 380406781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690819738
    }
]