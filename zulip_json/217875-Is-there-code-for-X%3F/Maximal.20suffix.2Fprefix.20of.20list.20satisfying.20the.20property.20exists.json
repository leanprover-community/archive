[
    {
        "content": "<p>I had to use the following theorem in my project, and this theorem looks quite useful. Is there a code for this theorem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">List.exists_maximal_suffix</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp_empty</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">hp_suffix</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">l'</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">l'</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">l'</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">l'</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l''</span><span class=\"o\">,</span> <span class=\"n\">l''</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">l''</span> <span class=\"bp\">→</span> <span class=\"n\">l''.length</span> <span class=\"bp\">≤</span> <span class=\"n\">l'.length</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">l</span> <span class=\"n\">ih</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp_empty</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">⟨</span><span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">hl'₁</span><span class=\"o\">,</span> <span class=\"n\">hl'₂</span><span class=\"o\">,</span> <span class=\"n\">hl'₃</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">l'</span> <span class=\"bp\">=</span> <span class=\"n\">l</span>\n  <span class=\"bp\">.</span> <span class=\"n\">by_cases</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exists</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">l</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.suffix_rfl</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.isSuffix.length_le</span> <span class=\"n\">h</span>\n    <span class=\"bp\">.</span> <span class=\"n\">exists</span> <span class=\"n\">l</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hl'₂</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">suffix_cons</span><span class=\"o\">,</span> <span class=\"n\">hl'₂</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n      <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.suffix_cons_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h₃.elim</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h₃</span>\n      <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₃</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₄</span>\n        <span class=\"n\">contradiction</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">List.isSuffix.length_le</span> <span class=\"n\">h₃</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exists</span> <span class=\"n\">l'</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hl'₂</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.suffix_cons_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hl'₁</span>\n    <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.suffix_cons_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h₂.elim</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h₂</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exfalso</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">List.isSuffix.eq_of_length</span> <span class=\"n\">hl'₁</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">List.isSuffix.length_le</span> <span class=\"n\">hl'₁</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">hl'₃</span> <span class=\"n\">_</span> <span class=\"n\">List.suffix_rfl</span> <span class=\"o\">(</span><span class=\"n\">hp_suffix</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₃</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">List.suffix_cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)))))</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hl'₃</span> <span class=\"n\">_</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span>\n</code></pre></div>",
        "id": 373296661,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1688754021
    },
    {
        "content": "<p>Isn't the witness to this just l.reverse.take_while p.reverse?</p>",
        "id": 373310814,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1688757951
    },
    {
        "content": "<p>Yes, it seems like there is a function <code>List.rtakeWhile</code> for the reversed <code>takeWhile</code>, and there are bunch of lemmas such as <code>rtakeWhile_suffix</code>..</p>",
        "id": 373312626,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1688758480
    },
    {
        "content": "<p>How do you find such definitions and lemmas which you want? I spend several minutes searching for desired definitions or lemmas, and after asking here it always turns out there exists one.</p>",
        "id": 373313118,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1688758638
    },
    {
        "content": "<p>I knew about take while. And since you're talking about the retention of suffixes that satisfy predicates, it was a matter of composition. Although now I realize that my predicate was on your elements, yours is on the list itself. So my witness needs to be rejiggered to mention sublists or suffixes or something.</p>",
        "id": 373318189,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1688760302
    }
]