[
    {
        "content": "<p>Is there some statement in mathlib, so that the following easily follows:<br>\n<a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/7f5d3f682445a766d903f4e598d7b29c09f7a4b1/MathPuzzles/Imo2019Q1.lean#L21-L22\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/7f5d3f682445a766d903f4e598d7b29c09f7a4b1/MathPuzzles/Imo2019Q1.lean#L21-L22</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_from_linear</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">):</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>This is some sort of version of <a href=\"https://en.wikipedia.org/wiki/Cauchy%27s_functional_equation\">https://en.wikipedia.org/wiki/Cauchy%27s_functional_equation</a> for the integers, I suppose. I'm not quite sure what is the right generality; the proof currently is a bit cumbersome using induction on ℤ.</p>",
        "id": 351054445,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1681912120
    },
    {
        "content": "<p>One thing you can do is building a linear function <code>ℤ →ₗ[ℤ] ℤ</code> (this should be very easy) and than using something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.ext_ring\">docs#linear_map.ext_ring</a></p>",
        "id": 351055644,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1681912366
    },
    {
        "content": "<p>\"additive implies linear\" is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.to_int_linear_map\">docs#add_monoid_hom.to_int_linear_map</a>, perhaps combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.mk'\">docs#add_monoid_hom.mk'</a></p>",
        "id": 351057038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681912657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_from_linear</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">):</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.to_int_linear_map</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_hom.mk'</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">linear_map.map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 351058835,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1681913062
    },
    {
        "content": "<p>It's in Lean 3, but the Lean4 version should be the same</p>",
        "id": 351058950,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1681913089
    },
    {
        "content": "<p>Great, works like a charm, also in lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.LinearMap</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_from_linear</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">):</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoidHom.toIntLinearMap</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">AddMonoidHom.mk'</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">LinearMap.map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 351060172,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1681913335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> has marked this topic as resolved.</p>",
        "id": 351060250,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681913348
    }
]