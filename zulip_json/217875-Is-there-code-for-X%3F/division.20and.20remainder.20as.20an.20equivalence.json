[
    {
        "content": "<p>Do we have anything like this anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The equivalence between `a` and `(a / n, a % n)` for nonzero `n`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">nat.div_mod_equiv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne_zero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">p.2</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">nat.div_add_mod'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">prod.ext</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fin.ext</span> <span class=\"bp\">$</span> <span class=\"n\">nat.mul_add_mod_of_lt</span> <span class=\"n\">p.2.is_lt</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_mul_div_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_zero.pos</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">nat.div_eq_zero</span> <span class=\"n\">p.2.is_lt</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(and similarly for <code>int</code>)</p>",
        "id": 325359453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675333314
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.div_mod_unique\">docs#nat.div_mod_unique</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.div_mod_unique\">docs#int.div_mod_unique</a> are the closest I can find</p>",
        "id": 325359608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675333349
    },
    {
        "content": "<p>Maybe we have the group-theoretical formulation? I can't find anything though...</p>",
        "id": 325363850,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1675334617
    },
    {
        "content": "<p><del>The <code>int</code> version can be spelt <code>int.div_mod_equiv (n : ℕ) : ℤ ≃ ℤ × zmod n</code> I think</del></p>",
        "id": 325365019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675334949
    },
    {
        "content": "<p>Wouldn't it be more convenient to just pass <code>(h : n \\ne 0)</code>?</p>",
        "id": 325368002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675335887
    },
    {
        "content": "<p>Oh, probably</p>",
        "id": 325368123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675335919
    },
    {
        "content": "<p>Oh, I remember the reason now; <code> ↑a</code> needs <code>ne_zero</code></p>",
        "id": 325369632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675336359
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18359\">#18359</a></p>",
        "id": 325375495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675338165
    },
    {
        "content": "<p>I think you should not pass the typeclass burden onto the users of <code>nat.div_mod_equiv</code>.</p>",
        "id": 325375752,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675338248
    },
    {
        "content": "<p>I would expect that for most cases <code>n</code> is a constant, and so <code>ne_zero</code> is actually more convenient</p>",
        "id": 325376231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675338357
    }
]