[
    {
        "content": "<p>Hi how to define 2-category in lean? I found that it even quite hard to define the data</p>",
        "id": 396628096,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1697271171
    },
    {
        "content": "<p>I checked <code>Quiver</code>'s definition and try something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Products.Basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">TwoQuiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">V</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span>\n  <span class=\"n\">Trans</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 396628230,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1697271272
    },
    {
        "content": "<p>Is the type signature OK for <a href=\"https://ncatlab.org/nlab/show/2-category\">https://ncatlab.org/nlab/show/2-category</a> ?</p>",
        "id": 396628273,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1697271323
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Products.Basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">u‚ÇÉ</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">TwoCategory</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚Üí</span>  <span class=\"n\">C</span> <span class=\"bp\">‚Üí</span>  <span class=\"n\">V</span>\n  <span class=\"n\">h_comp</span><span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">√ó</span> <span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span>\n</code></pre></div>\n<p>too <a href=\"https://live.lean-lang.org/#code=import%20Mathlib.CategoryTheory.Category.Basic%0D%0Aimport%20Mathlib.CategoryTheory.Products.Basic%0D%0A%0D%0A%0D%0Aopen%20CategoryTheory%0D%0A%0D%0Auniverse%20w%20v%20u%E2%82%81%20u%E2%82%82%20u%E2%82%83%0D%0A%0D%0Avariable%20(V%20%3A%20Type%20v)%20%5BCategoryTheory.Category.%7Bw%7D%20V%5D%0D%0A%0D%0Aclass%20TwoCategory%20(C%3A%20Type%20u%E2%82%81)%20where%0D%0A%20%20Hom%20%3A%20C%20%E2%86%92%20%20C%20%E2%86%92%20%20V%0D%0A%20%20h_comp%7BX%20Y%20Z%3A%20C%7D%3A%20Hom%20X%20Y%20%C3%97%20Hom%20Y%20Z%20%E2%86%92%20Hom%20X%20Z%0D%0A\">code in playground</a> but it says \"type expected, got (Hom X Z : V)\"</p>",
        "id": 396628735,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1697271729
    },
    {
        "content": "<p>I understand that <code>Hom X Z</code> is a value with type <code>V</code>, but it should also be treat as a type too?</p>",
        "id": 396628821,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1697271836
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Bicategory#doc\">docs#CategoryTheory.Bicategory</a></p>",
        "id": 396630734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697273288
    },
    {
        "content": "<p>I am continuing the construction of the definition of 2-category in lean, using the idea similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Bicategory#doc\">Bicategory</a>.<br>\nNow I get the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Products.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Products.Associator</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Currying</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory.prod</span>\n<span class=\"kd\">universe</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">u‚ÇÉ</span>  <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span> <span class=\"n\">v‚ÇÉ</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÉ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÉ</span><span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- copy from Mathlib.CategoryTheory.Functor.Currying</span>\n<span class=\"c1\">-- where it does not curry the second, werid</span>\n<span class=\"kd\">def</span> <span class=\"n\">curryObj‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">√ó</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">E</span>\n    <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n      <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"mi\">ùüô</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n      <span class=\"n\">map_id</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">F.map_id</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">prod_id</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">F.map_id</span> <span class=\"o\">‚ü®</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">‚ü©</span>\n      <span class=\"n\">map_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">F.map_comp</span><span class=\"o\">]}</span>\n  <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n      <span class=\"n\">naturality</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y'</span><span class=\"o\">}</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">F.map_comp</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"n\">map_id</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">F.map_id</span> <span class=\"n\">_</span>\n  <span class=\"n\">map_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">F.map_comp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">TwoCategory</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">homCategory</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"n\">h_comp</span><span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">‚•§</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">-- cannot use symbol ùüô</span>\n  <span class=\"n\">id</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span>\n  <span class=\"n\">id_eq‚ÇÅ</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">curryObj</span> <span class=\"n\">h_comp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"n\">id_eq‚ÇÇ</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">curryObj‚ÇÇ</span> <span class=\"n\">h_comp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n  <span class=\"n\">assoc</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h_comp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">‚ãô</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h_comp</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h_comp</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">‚ãô</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">h_comp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 396705653,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1697340019
    },
    {
        "content": "<p>But in the definition of <code>assoc</code> the kernel reprots the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Functor.prod</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"n\">h_comp</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">h_comp</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">‚•§</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">‚•§</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is it any way to fix this? It seems that the equivalance (C √ó D) √ó E ‚âå C √ó D √ó E has to be considered. I saw <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/CategoryTheory/Products/Associator.html#CategoryTheory.prod.associativity\">CategoryTheory.prod.associativity</a>. But I have no idea how to use it. Thank you very much!</p>",
        "id": 396705996,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1697340316
    },
    {
        "content": "<p>Can't you just use the existing Bicategory? Setting up this definition is not the easiest learning exercise for a beginner.</p>",
        "id": 396717969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697347534
    },
    {
        "content": "<p>Yeah I can do that too. Now I see that \"any strict 2-category is a bicategory in which the unitors and associator are identities. \" in <a href=\"https://ncatlab.org/nlab/show/bicategory\">ncatlab</a>. Using the existing bicategory and adding two more constraints to it should be enough, I will try to do it this way.</p>",
        "id": 396719009,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1697348375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"560873\">@Coriver Chen</span>  it's worth noting that a strict twocategory can be made to have seven entries just like a category, if you bundle them up right:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- definition of a (strict) twocategory</span>\n<span class=\"kd\">structure</span> <span class=\"n\">twocategory.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"n\">Obj</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"n\">category</span>\n  <span class=\"n\">Idn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"n\">Cat.Hom</span> <span class=\"bp\">*</span><span class=\"n\">_Cat</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"n\">Cmp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"n\">Cat.Hom</span> <span class=\"o\">((</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span><span class=\"n\">_Cat</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"n\">Id‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">((</span><span class=\"n\">Cmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">‚àò</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"mi\">ùüô</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">))</span> <span class=\"bp\">√ó</span><span class=\"n\">_Fun</span> <span class=\"o\">(</span><span class=\"n\">Idn</span> <span class=\"n\">D</span><span class=\"o\">))</span> <span class=\"bp\">‚àò</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PrdId‚ÇÅ</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Fst</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">))</span>\n  <span class=\"n\">Id‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">((</span><span class=\"n\">Cmp</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">‚àò</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Idn</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span><span class=\"n\">_Fun</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)))</span> <span class=\"bp\">‚àò</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PrdId‚ÇÇFst</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">))</span>\n  <span class=\"n\">Ass</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Obj</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n        <span class=\"o\">((</span><span class=\"n\">Cmp</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚àò</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"mi\">ùüô</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"bp\">√ó</span><span class=\"n\">_Fun</span> <span class=\"o\">(</span><span class=\"n\">Cmp</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Cmp</span> <span class=\"n\">B</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚àò</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Cmp</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span><span class=\"n\">_Fun</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">)))</span> <span class=\"bp\">‚àò</span><span class=\"n\">_</span><span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">PrdAss</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">D</span> <span class=\"n\">E</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Fst</span>\n</code></pre></div>\n<p>This is more cumbersome than using a bicategory though.</p>",
        "id": 396719511,
        "sender_full_name": "Dean Young",
        "timestamp": 1697348794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"559197\">@Dean Young</span> Thank you for the alternative definition. I will try this too. The definition of it seems to be possible in three ways: via data like obj, 1-morphism and 2-morphism; or as an enriched category; or from the definition of bicategory.</p>",
        "id": 396720636,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1697349667
    }
]