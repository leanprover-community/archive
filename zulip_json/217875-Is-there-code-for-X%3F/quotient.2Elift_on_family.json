[
    {
        "content": "<p>Do we have some construction of the following form? (generalizing <code>lift_on_2</code>, <code>lift_on_3</code>, etc.):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.setoid.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quotient.lift_on'</span> <span class=\"o\">(</span><span class=\"n\">quotient.mk'</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotient.lift_on_family'</span>\n  <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 286096782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655223261
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.induction_on_pi\">docs#quotient.induction_on_pi</a> seems close</p>",
        "id": 286097050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655223380
    },
    {
        "content": "<p>Hrrmmm that's a theorem...</p>",
        "id": 286097097,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655223407
    },
    {
        "content": "<p>But yet it's close</p>",
        "id": 286097113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655223413
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.choice\">docs#quotient.choice</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.fin_choice\">docs#quotient.fin_choice</a> are the only other things that mention <code>Π i, setoid</code> or the misspelling <code>∀ i, setoid</code></p>",
        "id": 286097395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655223547
    },
    {
        "content": "<p>I can't seem to figure out a way to define <code>quotient.lift_on_family'</code> compputably. Is it possible?</p>",
        "id": 286102259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655225700
    },
    {
        "content": "<p>I doubt it, but not sure exactly how to prove it</p>",
        "id": 286103066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655226079
    },
    {
        "content": "<p>Presumably it's possible if the index type is finite</p>",
        "id": 286106889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655227755
    },
    {
        "content": "<p><code>(Π i, quotient (S i)) → quotient (pi_setoid : setoid (Π i, X i))</code> cannot be defined in ZF without choice, because then <code>Π i, X i</code> could be empty even though <code>X i</code> is nonempty for every <code>i</code> (a choice function is exactly an element of the pi type). In this case, if <code>S i</code> is the equivalence relation that identifies all elements, then <code>quotient (S i)</code> is a singleton for every <code>i</code> and therefore <code>Π i, quotient (S i)</code> is also a singleton, but <code>quotient pi_setoid</code> is empty.</p>",
        "id": 286107465,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655228041
    },
    {
        "content": "<p>Just discovered that it's discussed 7 years ago: <a href=\"https://github.com/leanprover/lean/issues/649#issuecomment-107993581\">https://github.com/leanprover/lean/issues/649#issuecomment-107993581</a></p>",
        "id": 298196289,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662863442
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/Well-founded.20recursion.20for.20pgames\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Well-founded.20recursion.20for.20pgames</a> I found a similar problem again a few days ago.</p>",
        "id": 298245560,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662899772
    },
    {
        "content": "<p>I proved this for <code>[fintype ι]</code> <code>[decidable_eq ι]</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/18315\">#18315</a>.</p>",
        "id": 324040902,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1674823580
    },
    {
        "content": "<p>Are those list/multiset/finset versions of independent interest? Because if you just want quotient.lift for fintype, you can just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotient_lift</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.lift</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">quotient.fin_choice</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Note that I changed <code>α : ι → Sort*</code> to <code>Type*</code>, but if you want the Sort version you probably just need to change some <code>Type</code> to <code>Sort</code> in existing code.</p>",
        "id": 324345106,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674937084
    },
    {
        "content": "<p>I moved <code>quotient.fin_choice</code> things to my new file and proved them without choice. <code>multiset</code> version is used in <a href=\"https://github.com/leanprover-community/mathlib/pull/18318\">#18318</a>.</p>",
        "id": 324551667,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1675068011
    },
    {
        "content": "<p>I agree that removing decidability from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.sigma_uncurry\">docs#direct_sum.sigma_uncurry</a> is a nice application of the multiset version, but I also think you don't really need 330 lines in list/quot.lean. Here is how you might construct <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.fin_choice\">docs#quotient.fin_choice</a> without classical.choice in 62 lines: <a href=\"https://gist.github.com/alreadydone/48fcd994d56a129d1eeb347b1e568424\">https://gist.github.com/alreadydone/48fcd994d56a129d1eeb347b1e568424</a><br>\nEven though restoring computability is of some interest, I think most people regard it pointless to remove uses of classical.choice in proofs (which doesn't contribute to non-computability) in exchange for a much longer proof.</p>",
        "id": 324857018,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675155704
    },
    {
        "content": "<p>Actually quotient.fin_choice doesn't depend on most lines in my PR, but then I'll check again to see if it can be golfed.</p>",
        "id": 324880672,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1675162832
    },
    {
        "content": "<p>Note I just made <a href=\"https://github.com/leanprover-community/mathlib/pull/18337\">#18337</a> to make the changes you're suggesting easier to port/review</p>",
        "id": 324896905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675167688
    },
    {
        "content": "<p>In my PR, </p>\n<ul>\n<li><code>quotient.fin_choice_aux</code> and <code>quotient.fin_choice_aux_eq</code> became <code>list.quotient_choice</code> and <code>list.quotient_choice_mk</code>.</li>\n<li>I proved the dependent recursion principle for quotients indexed by a <code>list</code>.</li>\n<li>Because I need the version for <code>multiset</code>,  I had to use <code>quotient.hrec_on</code> (rather than <code>quotient.lift_on</code>) and deal with annoying <code>heq</code>.</li>\n<li>There are also some other simple lemmas.</li>\n</ul>\n<p>These make <code>list/quot.lean</code> much longer.</p>",
        "id": 324947027,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1675180065
    },
    {
        "content": "<p>What's the difference between quotients indexed by lists and quotients indexed by the finite subtype of membership in the lists?</p>",
        "id": 324949058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675180525
    },
    {
        "content": "<p>Then I'll try to prove <a href=\"https://github.com/leanprover-community/mathlib/pull/18318\">#18318</a> with the fintype version. If it's ok, I'll remove other versions.</p>",
        "id": 324957758,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1675182621
    },
    {
        "content": "<p>Alternatively, as a direct approach, you could also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.subtype_quotient_equiv_quotient_subtype\">docs#equiv.subtype_quotient_equiv_quotient_subtype</a> (where I think all the hard work had been done) as in my code; here's a draft and you should be able to fill in the sorry using adapted versions of the lemmas in my code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">include</span> <span class=\"n\">S</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotient.map_pi_mem_multiset_of_list</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">⊆</span> <span class=\"bp\">↑</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">pi_setoid</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">pi_setoid</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">he</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">he</span> <span class=\"n\">i</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotient_choice</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">pi_setoid</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.subtype_quotient_equiv_quotient_subtype</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">iff.rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">iff.rfl</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quotient.lift_on</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">quotient.fin_choice_aux</span> <span class=\"bp\">↑</span><span class=\"n\">l</span> <span class=\"bp\">$</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">$</span> <span class=\"n\">l.2</span> <span class=\"bp\">▸</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_pi_mem_multiset_of_list</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">multiset.subset_of_le</span> <span class=\"n\">l.2.ge</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.subtype_quotient_equiv_quotient_subtype\">docs#equiv.subtype_quotient_equiv_quotient_subtype</a> when trying to resolve some issues that arised when Remi Bottinelli was working on quiver quotients.)</p>",
        "id": 324963551,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675184025
    },
    {
        "content": "<p>Update <a href=\"https://gist.github.com/alreadydone/48fcd994d56a129d1eeb347b1e568424\">gist</a> to generalize lemmas and kill the sorry in the multiset version.</p>",
        "id": 324980992,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675188568
    },
    {
        "content": "<p>If you're still planning to PR something along these lines, I recommend adding an entry to <a href=\"https://github.com/leanprover-community/mathlib4/wiki/port-comments\">#port-comments</a> (so that it appears on <a href=\"https://leanprover-community.github.io/mathlib-port-status/old\">#port-status</a>) asking people not to port <code>data.fintype.quotient</code> yet</p>",
        "id": 325248087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675279216
    },
    {
        "content": "<p>Any news? Because this comment on <a href=\"https://leanprover-community.github.io/mathlib-port-status/old\">#port-status</a> is starting to bubble to the top...</p>",
        "id": 357843383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683892168
    },
    {
        "content": "<p>If we decide to abandon the in-flight mathlib3 changes here, we should remember that we already ported the lemmas in one of these files once, so can recover the proof repairs from the original port</p>",
        "id": 357855074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683894687
    },
    {
        "content": "<p>(the lemmas were moved from a ported file to an unported file, making them disappear from mathlib 4)</p>",
        "id": 357855265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683894728
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span> about which mathlib3 PRs are salvageable</p>",
        "id": 357855346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683894746
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib4/pull/3971\">!4#3971</a> which ports <code>Data.Fintype.Quotient</code>.<br>\nAt the moment, <a href=\"https://github.com/leanprover-community/mathlib/pull/18315\">#18315</a> is dependent PR of this PR.<br>\nDoes this PR seems to takes long time?<br>\nIf so, we had better forward-port <a href=\"https://github.com/leanprover-community/mathlib/pull/18315\">#18315</a> later.</p>",
        "id": 358202317,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1684040053
    },
    {
        "content": "<p>Sorry for missing the message. I've been very busy recently. I will try to update the PR when I have time. If it blocks too many PRs, just ignore it and I will make a new mathlib4 PR later.</p>",
        "id": 360490711,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1684838234
    },
    {
        "content": "<p>I'm leaning towards either:</p>\n<ul>\n<li>Merge everything into mathlib3 pretty much as is, throw away <code>Mathlib.Data.Multiset.Pi</code> in mathlib4 and re-port it from scratch</li>\n<li>Throw away the mathlib3 PRs, redo them in future in mathlib4</li>\n</ul>",
        "id": 360492289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684838651
    },
    {
        "content": "<p>We need to get on, there is serious port momentum at the minute.</p>",
        "id": 360525041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684847006
    },
    {
        "content": "<p>I don't understand this argument. There are 749 files that are yet to port. What makes the 7 blocked by <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/data/fintype/quotient\">port-status#data/fintype/quotient</a> special?</p>",
        "id": 360527008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684847408
    },
    {
        "content": "<p>There are seven open mathlib4 PRs blocked on it, not just any seven files: <a href=\"https://github.com/leanprover-community/mathlib4/pull/3971\">!4#3971</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/3972\">!4#3972</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/3976\">!4#3976</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/3980\">!4#3980</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/3989\">!4#3989</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/3991\">!4#3991</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/4112\">!4#4112</a></p>",
        "id": 360527370,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684847488
    },
    {
        "content": "<p>There was another thread in the PR reviews stream about it, but I can't link to it because I'm on mobile (edit: <a href=\"#narrow/stream/144837-PR-reviews/topic/.2318417.20and.20port-status.23data.2Ffintype.2Fquotient\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2318417.20and.20port-status.23data.2Ffintype.2Fquotient</a>)</p>",
        "id": 360527724,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684847558
    },
    {
        "content": "<p>Ah apologies, I thought I was looking there</p>",
        "id": 360530146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684848045
    },
    {
        "content": "<p>For the moment, I've excluded <a href=\"https://github.com/leanprover-community/mathlib/pull/18315\">#18315</a> from dependents of <a href=\"https://github.com/leanprover-community/mathlib4/pull/3971\">!4#3971</a>.</p>",
        "id": 360566194,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1684855560
    }
]