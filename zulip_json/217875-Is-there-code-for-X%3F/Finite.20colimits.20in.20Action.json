[
    {
        "content": "<p>Is there a reason why there are no instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">LargeCategory</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HasFiniteColimits</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasFiniteColimits</span> <span class=\"o\">(</span><span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">out</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Adjunction.hasColimitsOfShape_of_equivalence</span> <span class=\"o\">(</span><span class=\"n\">Action.functorCategoryEquivalence</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HasFiniteCoproducts</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasFiniteCoproducts</span> <span class=\"o\">(</span><span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">out</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Adjunction.hasColimitsOfShape_of_equivalence</span> <span class=\"o\">(</span><span class=\"n\">Action.functorCategoryEquivalence</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor</span>\n</code></pre></div>\n<p>in <code>Mathlib.RepresentationTheory.Action</code> analogous to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Action.instHasFiniteLimitsActionInstCategoryAction#doc\">docs#Action.instHasFiniteLimitsActionInstCategoryAction</a> ?</p>",
        "id": 404291135,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701033492
    },
    {
        "content": "<p>No reason except that you haven't done it yet. :-)</p>",
        "id": 404305042,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045520
    },
    {
        "content": "<p>(I think I wrote the first cut of that file, and I'm sure I left a lot out. Also --- it is already a rather large file, so if you see any good points to split it that would be lovely too.)</p>",
        "id": 404305168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045590
    },
    {
        "content": "<p>I'll split in definitions / generalities and permanence properties. This roughly halves the file, are you happy with that? Should I make a new file <code>Mathlib.RepresentationTheory.ActionPermanence</code>? Or should I create a new folder <code>Mathilb/RepresentationTheory/Action</code> and then two files <code>Basic</code> and <code>Permanence</code>?</p>",
        "id": 404364047,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701075603
    },
    {
        "content": "<p>What does \"permanence\" mean here?</p>",
        "id": 404386139,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701082513
    },
    {
        "content": "<p>Ah, I mean: Specific properties of <code>Action G V</code> that are induced by specific properties of <code>V</code>, e.g. if <code>V</code> has all limits, then <code>Action G V</code> has all limits, if <code>V</code> is abelian, then <code>Action G V</code> is abelian, etc.</p>",
        "id": 404409071,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701090770
    },
    {
        "content": "<p>i.e. properties that are preserved under the replacement <code>V</code> by <code>Action G V</code>.</p>",
        "id": 404409407,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701090850
    },
    {
        "content": "<p>Great, yes. Feel free to split up these properties even further (e.g. monoidal/braided/symmetric/duality stuff somewhere, limits/abelianness elsewhere, etc). I was lazy setting up this file and made it a big bag.</p>",
        "id": 404414838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701092640
    },
    {
        "content": "<p>I am wondering whether we could generalize <code>Action V G</code> to allow arbitrary universe parameters for the category <code>V</code>? (This would require changing <code>Action.ρ</code> using <code>MonoidHom</code> directly, and maybe unbundling <code>G : MonCat</code> to a type <code>G</code> equipped with <code>[Monoid G</code>].) In the future, I might want to develop a bit the notion of symmetric objects (presheaves over the category of nonemtpy finite sets), and in that context, a more general <code>Action</code> would be useful.</p>",
        "id": 404416508,
        "sender_full_name": "Joël Riou",
        "timestamp": 1701093183
    },
    {
        "content": "<p>To me Preservation sounds more standard terminology than Permanence?</p>",
        "id": 404416697,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1701093245
    },
    {
        "content": "<p>\"Permanence\" is probably a Frenchism: this is found for example in the <em>Elements of Algebraic Geometry</em> by Grothendieck and Dieudonné.</p>",
        "id": 404446040,
        "sender_full_name": "Joël Riou",
        "timestamp": 1701102033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20colimits.20in.20Action/near/404416508\">said</a>:</p>\n<blockquote>\n<p>I am wondering whether we could generalize <code>Action V G</code> to allow arbitrary universe parameters for the category <code>V</code>? (This would require changing <code>Action.ρ</code> using <code>MonoidHom</code> directly, and maybe unbundling <code>G : MonCat</code> to a type <code>G</code> equipped with <code>[Monoid G</code>].) In the future, I might want to develop a bit the notion of symmetric objects (presheaves over the category of nonemtpy finite sets), and in that context, a more general <code>Action</code> would be useful.</p>\n</blockquote>\n<p>Let's do the split first to get this out of the way and then think about extending the notion? I need <code>Action</code> for <code>V = FintypeCat</code> which is not a <code>LargeCategory</code> either, although Lean does not seem to care.<br>\nRelated: Maybe we can extend this in such a way such that restricting to the category of continuous <code>G</code>-sets (for a topological group <code>G</code>), i.e. where the action additionally satisfies <code>G × A → A</code> continuous when <code>A</code> is equipped with the discrete topology (or maybe not necessarily discrete, but some topology), is natural?</p>",
        "id": 404447422,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701102474
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8660\">#8660</a></p>",
        "id": 404453469,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701104421
    },
    {
        "content": "<p>Just to say that I am actively interested in the case where G has a topology and A has the discrete topology and the action is continuous.</p>",
        "id": 404456056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701105303
    },
    {
        "content": "<p>mumble mumble mumble internal group object mumble mumble mumble</p>",
        "id": 404456844,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701105565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"668959\">@Qi Ge</span> you might find this thread interesting as well.</p>",
        "id": 404456932,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701105602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> offered in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Galois.20categories\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Galois.20categories</a> that she could port her definition from Lean3.</p>",
        "id": 404456973,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701105605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20colimits.20in.20Action/near/404456844\">said</a>:</p>\n<blockquote>\n<p>mumble mumble mumble internal group object mumble mumble mumble</p>\n</blockquote>\n<p>How is the category of representations a category of internal group objects? Or did I misunderstand?</p>",
        "id": 404457530,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701105837
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mod_#doc\">docs#Mod_</a> for example</p>",
        "id": 404457781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701105939
    },
    {
        "content": "<p>if you use this in the case of the category of topological spaces with the Cartesian monoidal structure, then this would become the category of topological spaces with a continuous action of a topological monoid</p>",
        "id": 404457973,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701106012
    },
    {
        "content": "<p>Where you would use a term of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mon_#doc\">docs#Mon_</a> to represent the topological monoid.</p>",
        "id": 404458058,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701106035
    },
    {
        "content": "<p>But it needs a monoidal structure on <code>C</code>, so it can't be a replacement of <code>Action G V</code>, right?</p>",
        "id": 404458405,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701106167
    },
    {
        "content": "<p>If you use the cartesian monoidal structure, then I think it could be? How is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Action#doc\">docs#Action</a> defined?</p>",
        "id": 404458551,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701106214
    },
    {
        "content": "<p>Ah you're right it won't be as general.</p>",
        "id": 404458619,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701106244
    },
    {
        "content": "<p>But in order to state something like \"the action is continuous\" you at least need products to even write down a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>×</mo><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">G \\times A \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>",
        "id": 404458708,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701106273
    },
    {
        "content": "<p>As elements of a type <code>V</code> with a monoid homomorphism from <code>G</code> to the endomorphisms of each object.</p>",
        "id": 404458732,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701106283
    },
    {
        "content": "<p>The two should be equivalent in the case where the category is cartesian closed</p>",
        "id": 404458913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701106347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20colimits.20in.20Action/near/404458708\">said</a>:</p>\n<blockquote>\n<p>But in order to state something like \"the action is continuous\" you at least need products to even write down a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>×</mo><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">G \\times A \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>\n</blockquote>\n<p>Yes, my use case (which is still the one of <code>V = FintypeCat</code> and <code>G</code> the automorphism group of a fibre functor) would fit in the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mod_#doc\">docs#Mod_</a> setting.</p>",
        "id": 404458992,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701106379
    },
    {
        "content": "<p>Although I am hesitant to formulate this in terms of <code>Mod_</code> as I fear that the API is still a bit lacking. It would be convenient to have one structure that naturally fits the general use case of <code>Action G V</code> and of these more specialized situations. Then I would be willing to invest in adding API for that.</p>",
        "id": 404459407,
        "sender_full_name": "Christian Merten",
        "timestamp": 1701106522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648495\">Christian Merten</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20colimits.20in.20Action/near/404458732\">said</a>:</p>\n<blockquote>\n<p>As elements of a type <code>V</code> with a monoid homomorphism from <code>G</code> to the endomorphisms of each object.</p>\n</blockquote>\n<p>This approach doesn't work for continuous actions since the category of topological spaces is not cartesian-closed.</p>",
        "id": 404468132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701109807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20colimits.20in.20Action/near/404458708\">said</a>:</p>\n<blockquote>\n<p>But in order to state something like \"the action is continuous\" you at least need products to even write down a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>×</mo><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">G \\times A \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>\n</blockquote>\n<p>One definition for the type class of continuous group action would be the type such a map <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. But I don't think it is the right thing to do in Lean as it does not extend <code>MulAction</code> for example... So maybe it should be something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.MulAction</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ContinuousMulAction</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">MulAction</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">ContinuousSMul</span> <span class=\"n\">M</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>(Is there a diamond happening here? I'm still not entirely clear on how lean deals with inheritance and I'm not through reading about <code>old_structure_cmd</code> from earlier...)</p>",
        "id": 404472651,
        "sender_full_name": "Qi Ge",
        "timestamp": 1701111618
    },
    {
        "content": "<p>I think we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMulAction#doc\">docs#ContinuousMulAction</a></p>",
        "id": 404472880,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701111694
    },
    {
        "content": "<p>Oh sorry it is just ContinuousSmul</p>",
        "id": 404473070,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701111745
    },
    {
        "content": "<p>Yeah we still need <code>MulAction</code> for group action</p>",
        "id": 404473072,
        "sender_full_name": "Qi Ge",
        "timestamp": 1701111745
    },
    {
        "content": "<p>There’s no need to introduce a new class, just use ContinuousSmul as a “mixin”</p>",
        "id": 404473171,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701111777
    },
    {
        "content": "<p>Same for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMul#doc\">docs#ContinuousMul</a></p>",
        "id": 404473226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701111791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20colimits.20in.20Action/near/404473171\">said</a>:</p>\n<blockquote>\n<p>There’s no need to introduce a new class, just use ContinuousSmul as a “mixin”</p>\n</blockquote>\n<p>What does it mean for a \"mixin\"?</p>",
        "id": 404473823,
        "sender_full_name": "Qi Ge",
        "timestamp": 1701112068
    },
    {
        "content": "<p>a mixin is a class that gets introduced in an ad-hoc way. For example, if you want to prove a lemma about a topological space with a continuous action of a topological monoid you could formulate it as (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foobbar</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinunousMul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContinuousSMul</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">...`</span>\n</code></pre></div>",
        "id": 404476121,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701113201
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Mixin\">https://en.wikipedia.org/wiki/Mixin</a></p>",
        "id": 404476242,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701113253
    }
]