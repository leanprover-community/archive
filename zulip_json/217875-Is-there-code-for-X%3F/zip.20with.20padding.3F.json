[
    {
        "content": "<p>Do we have somewhere the function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">List.zipWith'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">γ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">),</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">none</span> <span class=\"o\">::</span> <span class=\"n\">zipWith'</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">none</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">zipWith'</span> <span class=\"n\">f</span> <span class=\"o\">[]</span> <span class=\"n\">bs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">zipWith'</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n</code></pre></div>\n<p>which is like <code>zipWith</code> but consumes the entirety of both lists, providing <code>none</code> values where necessary?</p>",
        "id": 391612941,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695009603
    },
    {
        "content": "<p>I guess</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.zipWithAll</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">γ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">as.map</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bs.map</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">bs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">zipWithAll</span> <span class=\"n\">f</span> <span class=\"n\">as</span> <span class=\"n\">bs</span>\n</code></pre></div>\n<p>is better to avoid the <code>partial</code>.</p>",
        "id": 391613262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695009759
    },
    {
        "content": "<p>If you add a <code>Monad List</code> instance, is this close to what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">List</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.zipWithAll3</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">la</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lb</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">la.zip</span> <span class=\"n\">lb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>EDIT: certainly not, since the <code>zip</code> discards the entries of the longer list.</p>",
        "id": 391620712,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695013827
    },
    {
        "content": "<p>Slightly more pertinent to the question at hand, the closest that I could find is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.zipWithLeft%27#doc\">docs#List.zipWithLeft'</a> and its neighbours.  I could not find a <code>List.zipWithMax'</code> or similar, though...</p>",
        "id": 391673922,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1695034935
    }
]