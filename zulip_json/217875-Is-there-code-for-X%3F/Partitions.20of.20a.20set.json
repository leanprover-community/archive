[
    {
        "content": "<p>I can't see a good way to work with non-indexed partitions of a set <code>s</code>, where <code>s</code> may be infinite and there may be infinitely many parts. Working with <code>Setoid s</code> quickly leads to DTT hell if one wants to work with the cells of the partition as sets themselves. </p>\n<p><code>Finpartition</code> has a good API  when the partition has finitely many parts; is there a reason <code>Set.Partition</code> doesn't exist?</p>",
        "id": 406822263,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1702062495
    },
    {
        "content": "<p>Probably because nobody has created it :)</p>",
        "id": 406823257,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702062942
    },
    {
        "content": "<p>Ok. Presumably <code>CompleteLattice</code> is the right setting. Something like the following : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Partition</span> <span class=\"o\">[</span><span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"n\">pairwiseDisjoint</span> <span class=\"o\">:</span> <span class=\"n\">parts.PairwiseDisjoint</span> <span class=\"n\">id</span>\n  <span class=\"n\">bot_not_mem</span> <span class=\"o\">:</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∉</span> <span class=\"n\">parts</span>\n  <span class=\"n\">Sup_eq</span> <span class=\"o\">:</span> <span class=\"bp\">⨆</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">parts</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>Would <code>Partition</code> by itself be ok as a name here? Or maybe <code>PartitionOf</code></p>",
        "id": 406823540,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1702063063
    },
    {
        "content": "<p>You could look at <a href=\"https://github.com/leanprover-community/mathlib4/blob/b383ae3471c02c9c6249948d26394b577203edf5//Mathlib/Combinatorics/SimpleGraph/Partition.lean#L59-L66\">https://github.com/leanprover-community/mathlib4/blob/b383ae3471c02c9c6249948d26394b577203edf5//Mathlib/Combinatorics/SimpleGraph/Partition.lean#L59-L66</a></p>\n<p>It looks like we used <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Setoid.IsPartition#doc\">docs#Setoid.IsPartition</a> on a plain <code>Set (Set α)</code></p>",
        "id": 406825022,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702063698
    },
    {
        "content": "<p>I don't see why there couldn't be <code>def Set.partitions (s : Set α) := {p : Set (Set α) | Setoid.IsPartition p}</code></p>",
        "id": 406825221,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702063776
    },
    {
        "content": "<p>Presumably you don't need the <code>(s : Set α)</code> there.</p>",
        "id": 406825570,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1702063895
    },
    {
        "content": "<p>or I guess <code>⋃₀ p = s</code> in the set builder.</p>",
        "id": 406825676,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1702063935
    },
    {
        "content": "<p>That wouldn't cover lattice partitions though - would there be value in that extra generality?</p>",
        "id": 406825738,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1702063969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329425\">Peter Nelson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Partitions.20of.20a.20set/near/406822263\">said</a>:</p>\n<blockquote>\n<p><code>Finpartition</code> has a good API  when the partition has finitely many parts; is there a reason <code>Set.Partition</code> doesn't exist?</p>\n</blockquote>\n<p>The reason is basically two-fold:</p>\n<ul>\n<li>I didn't need it</li>\n<li>I am not yet happy enough with the <code>Finpartition</code> API to copy the design over</li>\n</ul>",
        "id": 406825803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702063996
    },
    {
        "content": "<p>Given that I do need it and am starting to crib from it as we speak, what are some of those design concerns?</p>",
        "id": 406825997,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1702064098
    }
]