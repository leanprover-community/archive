[
    {
        "content": "<p>Is there a conventional functional programming name for this function? Does it exist already somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foldlMap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">gs</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">as.size</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">init</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">as</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n    <span class=\"n\">b</span>  <span class=\"o\">:=</span> <span class=\"n\">b'</span>\n    <span class=\"n\">gs</span> <span class=\"o\">:=</span> <span class=\"n\">gs.push</span> <span class=\"n\">g</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">gs</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401036119,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699483769
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.mapAccumr#doc\">docs#List.mapAccumr</a> is the list version for foldr</p>",
        "id": 401044927,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699489140
    },
    {
        "content": "<p>I know that the Mathematica name for your function is <a href=\"https://reference.wolfram.com/language/ref/FoldList.html\">FoldList</a>, though it starts with <code>gs := #[init]</code>.</p>",
        "id": 401045094,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699489228
    },
    {
        "content": "<p>I'm looking for the analogue of <a href=\"https://reference.wolfram.com/language/ref/FoldPairList.html?q=FoldPairList\">FoldPairList</a>, haha!</p>",
        "id": 401045208,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699489307
    },
    {
        "content": "<p>(Though actually that's even slightly different as well, since it doesn't return the final accumulated value)</p>",
        "id": 401045809,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699489644
    },
    {
        "content": "<p>Just guessing, but maybe the typical FP strategy here is just to <code>mapM</code> in a state monad, since that's what this is, but it can sometimes be convenient to not have to <code>StateT</code> things...either that or there is no typical strategy, perhaps because for whatever reason people wind up not really having to do this that often.</p>",
        "id": 401046354,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699489957
    }
]