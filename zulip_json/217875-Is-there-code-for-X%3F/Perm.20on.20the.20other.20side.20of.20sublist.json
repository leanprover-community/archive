[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.subperm\">docs#list.subperm</a> is defined as <code>∃ l ~ l₁, l &lt;+ l₂</code>. It's obviously equivalent to <code>∃ l ~ l₂, l₁ &lt;+ l</code>, but does mathlib know it? I did not manage to find it nor to prove it myself.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subperm_iff</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">&lt;+~</span> <span class=\"n\">l₂</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 365034990,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686380793
    },
    {
        "content": "<p>In general, I find it very hard to work with <code>list.perm</code>. Do we have any API about how it relates to reordering the elements of the list?</p>",
        "id": 365035161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686380879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, this is probably a question for you.</p>",
        "id": 365035250,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686380898
    },
    {
        "content": "<p>mathlib does know it</p>",
        "id": 365035333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686380921
    },
    {
        "content": "<blockquote>\n<p>Do we have any API about how it relates to reordering the elements of the list?</p>\n</blockquote>\n<p>this is a confusing statement for me, because it is literally the definition of \"reordering the elements of the list\"</p>",
        "id": 365035409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686380950
    },
    {
        "content": "<p><code>list.perm</code> means \"The two lists are related by a series of local permutations\", as opposed to \"The two lists are related by a global permutation\". If I had a global permutation, proving <code>list.subperm_iff</code> and using <code>list.perm</code> in general would be much easier.</p>",
        "id": 365035761,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686381085
    },
    {
        "content": "<p>I'm not sure that's a distinction that exists</p>",
        "id": 365035825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686381120
    },
    {
        "content": "<p>any permutation is expressible as a series of local permutations, and <code>list.perm</code> is a Prop</p>",
        "id": 365035942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686381157
    },
    {
        "content": "<p>there are loads of theorems that characterize <code>list.perm</code> however you care to think about it</p>",
        "id": 365036051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686381192
    },
    {
        "content": "<p>but I know that the theorem you are looking for is proved quite early as part of the setup</p>",
        "id": 365036099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686381209
    },
    {
        "content": "<p>Then can I get an actual reordering of the elements from a <code>l₁ ~ l₂</code> hypothesis? Like, a permutation <code>σ : equiv.perm (fin l₁.length)</code> such that <code>∀ i, l₁.get (σ i) = l₂.get i</code>?</p>",
        "id": 365036133,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686381230
    },
    {
        "content": "<p>surely that theorem is somewhere in the <code>equiv.perm</code> file</p>",
        "id": 365036226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686381253
    },
    {
        "content": "<p>but keep in mind that this reasoning is not in line with the dependency structure, we wouldn't be able to use it in <code>data.list.perm</code></p>",
        "id": 365036316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686381293
    },
    {
        "content": "<p>Really? <code>equiv.perm</code> is very low in the import hierarchy now.</p>",
        "id": 365036456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686381352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Perm.20on.20the.20other.20side.20of.20sublist/near/365036226\">said</a>:</p>\n<blockquote>\n<p>surely that theorem is somewhere in the <code>equiv.perm</code> file</p>\n</blockquote>\n<p>What is \"the\" file? Having a cursory read through <code>logic.equiv.defs</code>, <code>group_theory.perm.basic</code>, <code>group_theory.perm.list</code> didn't yield anything.</p>",
        "id": 365036665,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686381423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Perm.20on.20the.20other.20side.20of.20sublist/near/365035333\">said</a>:</p>\n<blockquote>\n<p>mathlib does know it</p>\n</blockquote>\n<p>At any rate, if you have an answer to my original question, I'll take it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 365036752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686381453
    },
    {
        "content": "<p>do you want a lean 3 proof?</p>",
        "id": 365036897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686381503
    },
    {
        "content": "<p>Yes please, I'm reviving <a href=\"https://github.com/leanprover-community/mathlib/pull/10865\">#10865</a> so I don't have the luxury to go to Lean 4 just yet.</p>",
        "id": 365036979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686381535
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subperm_iff</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">&lt;+~</span> <span class=\"n\">l₂</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span> <span class=\"n\">h₂.subperm.trans</span> <span class=\"n\">h₁.subperm</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂.exists_perm_append</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h₂.trans</span> <span class=\"o\">(</span><span class=\"n\">h₁.append_right</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prefix_append</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sublist</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 365038121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686381952
    },
    {
        "content": "<p>Aaah, <code>exists_perm_append</code> is the ingredient I was missing. Thanks Mario!</p>",
        "id": 365038292,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686381988
    }
]