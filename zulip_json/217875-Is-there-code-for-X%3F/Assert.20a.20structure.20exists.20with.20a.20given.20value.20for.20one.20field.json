[
    {
        "content": "<p>Is there a best practice for asserting that a structure exists meeting its internal criteria if one field has a given value, for instance, define a function of x':R with return type Prop, if there is a point (x',y,z) in the <code>StandardTwoSimplex</code> (see below) as defined in Mathematics in Lean? My eventual goal is: define isPolyTimeFunction, which takes a function \\alpha\\r\\beta and has a return type Prop, returning true if the nested structure Computability.TMComputable.TM2ComputableInPolyTime exists with numerous criteria (there is a TM, a polynomial, encodings for inputs/outputs, (nested) with a halting computation for each a:\\alpha with the correct output within the poly bound). So this def would return Prop rather than present the structure:  <code>def PolyTimeFunction {α β: Type} {ea : FinEncoding α} {eb : FinEncoding β} (f : α → β) :=\n  @TM2ComputableInPolyTime α β ea eb f</code>. Apologies that is not a mwe but that would be huge.</p>\n<div class=\"codehilite\" data-code-language=\"structure\"><pre><span></span><code>x : R\ny : R\nz : R\nx_nonneg : 0 ≤ x\ny_nonneg : 0 ≤ y\nz_nonneg : 0 ≤ z\nsum_eq : x + y + z = 1```\n</code></pre></div>",
        "id": 406159397,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1701810437
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hunterPred</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">StandardTwoSimplex</span><span class=\"o\">,</span> <span class=\"n\">s.x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span>\n</code></pre></div>\n<p>or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hunterPred</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.range</span> <span class=\"n\">StandardTwoSimplex.x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406159976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701810675
    },
    {
        "content": "<p>(Use triple backtick for multiline code blocks, see <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>)</p>",
        "id": 406161040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701811147
    },
    {
        "content": "<p>Apologies I realized f is not a field. I want to add a def at the end of TMComputable, but instead of  <code>def isPolyTimeFunction {α β: Type} {ea : FinEncoding α} {eb : FinEncoding β} (f : α → β) :Prop :=\n∃tmp : @TM2ComputableInPolyTime α β ea eb f, True</code>, how do I assert that the structure is nonempty with that f (has a polytime TM computing f)? The structure already asserts all of the needed criteria.</p>",
        "id": 406164153,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1701812468
    },
    {
        "content": "<p><code>Nonempty TheStructure</code>?</p>",
        "id": 406164662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701812730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"397140\">@Hunter Monroe</span> the triple backticks before and after need to be on their own line, or the first line of text will be eaten and it won't be highlighted</p>",
        "id": 406175725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701818215
    }
]