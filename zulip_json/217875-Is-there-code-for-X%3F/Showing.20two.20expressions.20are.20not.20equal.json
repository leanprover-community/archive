[
    {
        "content": "<p>I want to show that two terms are not equal by proving some predicate holds on one side but not the other. That is, in my proof I'd like to apply the following theorem and prove the two sub-cases.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ne_of_prop</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>This lemma doesn't seem to exist in mathilb. Is there a better way to do this? The terms <code>x</code> and <code>y</code> are quite ugly, so I'd like to avoid having to write them out in the proof.</p>",
        "id": 385750187,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1692305543
    },
    {
        "content": "<p>Can you prove it via the contrapositive of <code>congr_arg</code> as well?  That might be a way to golf the proof enough that you do not actually need the lemma in the first place.</p>",
        "id": 385750986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692305796
    },
    {
        "content": "<p>Start with <code>apply ne_of_apply_ne p</code>, perhaps</p>",
        "id": 385751012,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692305806
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ne_of_mem_of_not_mem#doc\">docs#ne_of_mem_of_not_mem</a> is very close (it's defeq)</p>",
        "id": 385759036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692309099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Showing.20two.20expressions.20are.20not.20equal/near/385751012\">said</a>:</p>\n<blockquote>\n<p>Start with <code>apply ne_of_apply_ne p</code>, perhaps</p>\n</blockquote>\n<p>Annoyingly I looked for that but <code>exact?</code> didn't find it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- exact? -- fails</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ne_of_apply_ne</span> <span class=\"n\">p</span> <span class=\"n\">hxy</span>\n</code></pre></div>\n<p>But I'm not quite on the latest mathlib so it may not reproduce.</p>",
        "id": 385759463,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1692309401
    },
    {
        "content": "<p>That said getting from <code>p x ≠ p y</code> to what I want is still a little verbose so I'll probably go with Eric's suggestion</p>",
        "id": 385759471,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1692309407
    },
    {
        "content": "<p>Also should there be a propositional version just so I don't get tempted by defeq abuse?</p>",
        "id": 385760185,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1692309794
    },
    {
        "content": "<p>The problem with the propositional version is that it's hard to name</p>",
        "id": 385764361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692312509
    },
    {
        "content": "<p><code>ne_of_of_not</code> isn't ideal!</p>",
        "id": 385764399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692312537
    }
]