[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- is there a tactic that can avoid all of this manual rewriting?</span>\n  <span class=\"k\">have</span> <span class=\"n\">h9</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">HSub.hSub</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">):</span><span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h9</span>\n</code></pre></div>\n<p>Is there a tactic that can automate this proof?</p>",
        "id": 367172268,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687008281
    },
    {
        "content": "<p>(that code is Lean 4)</p>",
        "id": 367172318,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687008298
    },
    {
        "content": "<p>What about (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n  <span class=\"n\">linear_combination</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 367176249,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687009328
    },
    {
        "content": "<p>Nice!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LinearCombination</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lemma2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n  <span class=\"n\">linear_combination</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 367176564,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687009441
    },
    {
        "content": "<p>And it succeeds in context: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/commit/a7526ac929ae14aaa95983f1dea4d2b0b2b17bb5\">https://github.com/dwrensha/math-puzzles-in-lean4/commit/a7526ac929ae14aaa95983f1dea4d2b0b2b17bb5</a><br>\nThanks!</p>",
        "id": 367178150,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687009819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tactic.20for.20easy.20calculations.20in.20ZMod.20p.3F/near/367176249\">said</a>:</p>\n<blockquote>\n<p>What about (untested)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n  <span class=\"n\">linear_combination</span> <span class=\"n\">h</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Last time I checked, <code>norm_num</code> doesn't have any specific support for <code>ZMod</code> so I believe the <code>norm_num</code> call is just a complicated way to write <code>dec_trivial</code>. I was actually looking into making a tactic that goes through an expression in characteristic <code>p</code> and rewrites all coefficients to be between <code>0</code> and <code>p</code>. My Lean4 metaprogramming skills aren't quite good enough to make it work yet though :P</p>",
        "id": 367554605,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687164106
    },
    {
        "content": "<p>just plain <code>rfl</code> seems to work for me</p>",
        "id": 367600557,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687173808
    },
    {
        "content": "<p>Makes me wonder why <code>linear_combination</code> needs this hint from me.</p>",
        "id": 367606857,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687175158
    },
    {
        "content": "<p>Well <code>4 = 11</code> and infinitely many other similar statements are also true by <code>rfl</code>...</p>",
        "id": 367608045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687175400
    },
    {
        "content": "<p>Polyrith can solve things like this after <a href=\"https://github.com/leanprover-community/mathlib/pull/17142\">#17142</a></p>",
        "id": 367608402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687175468
    },
    {
        "content": "<blockquote>\n<p>Well 4 = 11 and infinitely many other similar statements are also true by rfl</p>\n</blockquote>\n<p>My (naive) reasoning is:</p>\n<ol>\n<li><code>linear_combination</code> is chaining together a bunch of <code>ring</code>invocations</li>\n<li><code>ring</code> is stronger than <code>ring_nf</code>, which is \"ring normal form\", and \"normal form\" means normalizing all terms</li>\n<li><code>(-3 : ZMod 7)</code> should normalize to <code>4</code>, (as should <code>(11 : ZMod 7)</code>).</li>\n</ol>",
        "id": 367671651,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687187019
    },
    {
        "content": "<p>\"normal form\" means \"normal form in the language of rings\", not \"normal form in whatever ring you happen to be using\"</p>",
        "id": 367673160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687187298
    },
    {
        "content": "<p>Somewhat surprisingly, <code>ring</code> can't even solve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lemma2</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 367674462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687187543
    },
    {
        "content": "<p>Thats probably as ring is designed for CommRings, so its probably silently falling back to not doing very much at all (maybe it even thinks it's working on the nats inside the ofnat notation).</p>",
        "id": 367678393,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687188306
    },
    {
        "content": "<p>It would certainly be nice to normalize to some normal form for rings of some fixed explicitly given characteristic in addition, but we don't have a tactic that does that yet, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> was working on something like this in lean 3 I believe. EDIT: oops I see Anne already mentioned this above <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 367680619,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687188648
    },
    {
        "content": "<p>I am working on this in Lean 4 right as we speak!</p>",
        "id": 367680897,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687188710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tactic.20for.20easy.20calculations.20in.20ZMod.20p.3F/near/367678393\">said</a>:</p>\n<blockquote>\n<p>Thats probably as ring is designed for CommRings</p>\n</blockquote>\n<p>This gets me every time...</p>",
        "id": 367685984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687189829
    },
    {
        "content": "<p>Can we call it <code>comm_ring_nf</code> to make that clear?</p>",
        "id": 367686066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687189851
    },
    {
        "content": "<p>crnf?</p>",
        "id": 367686705,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687189997
    },
    {
        "content": "<p>I don't think we need to make it short since no one ever types <code>ring_nf</code> anyway</p>",
        "id": 367704409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687194205
    },
    {
        "content": "<p>I'm pretty sure every use of it exists because <code>Try this</code> generated it when someone typed <code>ring</code></p>",
        "id": 367704473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687194224
    },
    {
        "content": "<p>my brain really wants \"crnf\" to mean \"carriage return / newline feed\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 367728664,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687200956
    },
    {
        "content": "<p>To return to the original problem, you don't need to state some fact like <code>(4 : zmod 7) = -3</code> that's particularly relevant to the problem.  You can just write out whatever the defining features of your ring are and then include them in your <code>linear_combination</code> calculation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lemma2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"n\">ZMod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">linear_combination</span> <span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 367740356,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687204866
    },
    {
        "content": "<p>See also the discussion for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> at<br>\n<a href=\"https://hrmacbeth.github.io/computations_in_lean/02_Using_Polyrith.html#isometries-of-the-complex-plane\">https://hrmacbeth.github.io/computations_in_lean/02_Using_Polyrith.html#isometries-of-the-complex-plane</a></p>",
        "id": 367740433,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687204898
    },
    {
        "content": "<p>My tactic is now PR'd as <a href=\"https://github.com/leanprover-community/mathlib4/pull/5376\">#5376</a>!</p>",
        "id": 368481796,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687425602
    },
    {
        "content": "<p>In Coq (note: I don't know the details), tactics like <code>ring</code> and <code>field</code> allow type-specific plugins for things like <code>IsNumeral</code> and \"is <code>n = m</code>?\"</p>",
        "id": 369298782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687663037
    },
    {
        "content": "<p>I guess, <code>mathlib</code> uses <code>norm_num</code> for this and only deals rational constants.</p>",
        "id": 369298919,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687663104
    },
    {
        "content": "<p>Is it possible to write a <code>norm_num</code> plugins that knows about <code>CharP</code>?</p>",
        "id": 369298997,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687663143
    },
    {
        "content": "<p>Disclaimer: I know nothing about internals of <code>norm_num</code>.</p>",
        "id": 369299034,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687663165
    },
    {
        "content": "<p>depends on what you mean, what is triggering the plugin to be called?</p>",
        "id": 369299182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687663261
    },
    {
        "content": "<p>E.g., <code>ring</code> wants to know whether <code>2 = 5</code> or not</p>",
        "id": 369299499,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687663412
    },
    {
        "content": "<p>Or <code>ring</code> never wants this, it wants to normalize the coefficient?</p>",
        "id": 369299623,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687663463
    },
    {
        "content": "<p>that's right</p>",
        "id": 369299640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687663475
    },
    {
        "content": "<p>Can we have some <code>normalize</code> operation with plugins, then? (Part of) <a href=\"https://github.com/leanprover-community/mathlib4/pull/5376\">#5376</a> can be one of them.</p>",
        "id": 369299740,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687663542
    },
    {
        "content": "<p>most likely this can't be done with plugins, you would need to change parts of the core</p>",
        "id": 369299829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687663567
    },
    {
        "content": "<p>I think that has the same issue, what induces the plugin to be called? Why is it not calling all plugins on every number all the time?</p>",
        "id": 369299940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687663633
    },
    {
        "content": "<p>there needs to be some kind of trigger which isn't always true</p>",
        "id": 369300010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687663671
    },
    {
        "content": "<p>Can it call all plugins on the final result of the computation in <code>Rat</code>? Or will it be too slow?</p>",
        "id": 369301416,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687664485
    },
    {
        "content": "<p>(e.g., since failing an instance search for <code>CharP</code> can be slow)</p>",
        "id": 369301449,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687664513
    },
    {
        "content": "<p>how final is final? Anything that is happening inside <code>ring</code> is called a ton of times</p>",
        "id": 369302089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687664916
    },
    {
        "content": "<p>note that in lean 3 there was a separate tactic <code>norm_fin</code> that handled this reasoning</p>",
        "id": 369302121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687664942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tactic.20for.20easy.20calculations.20in.20ZMod.20p.3F/near/369298782\">said</a>:</p>\n<blockquote>\n<p>In Coq (note: I don't know the details), tactics like <code>ring</code> and <code>field</code> allow type-specific plugins for things like <code>IsNumeral</code> and \"is <code>n = m</code>?\"</p>\n</blockquote>\n<p>This is one of the reasons I implemented <code>reduce_mod_char</code>, Assia was somewhat shocked that this functionality wasn't available in our <code>ring</code> :)</p>",
        "id": 369739981,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687792385
    },
    {
        "content": "<p>If I recall correctly, in Coq the user specifies which coefficients to use in a call to <code>ring</code>. Based on some quick Lean 3 experiments, it should be possible in our implementation to define a record with info on how to recognize/add/subtract/multiply coefficients, and a zero-test. If the user writes <code>ring</code>, we put the <code>ℚ</code> version of this record, if the user writes <code>ring zmod 5</code> we use <code>zmod 5</code>, etc.</p>",
        "id": 369741913,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687792732
    },
    {
        "content": "<p><code>reduce_mod_char</code> is more like <code>norm_fin</code> in that it looks at the type to figure out the characteristic, rather than using typeclass inference. Unlike <code>norm_fin</code>, <code>reduce_mod_char</code> also supports polynomials over <code>zmod n</code>, etc.</p>",
        "id": 369742319,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687792801
    },
    {
        "content": "<p>Is it easy to write override this in case it can't be figured out, e.g. <code>reduce_mod_char p</code> will use inference to find the right instance?</p>",
        "id": 369743554,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687792994
    },
    {
        "content": "<p>The problem isn't so much figuring out the characteristic of a single expression, as it is figuring out which subexpressions are eligible for rewriting. I suppose we could a heuristic to drill down to the \"interesting\" expressions (e.g. if we see <code>$a = $b</code>, try <code>$a</code> and <code>$b</code>) and then try rewriting any of their subexpressions with the same type. But that seems quite fragile: what if we want to show <code>Polynomial.natDegree ((3 * X^3 : (ZMod 3)[X]) = 0</code>?</p>",
        "id": 369981255,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687858321
    },
    {
        "content": "<p>I'm suggesting a mixed approach - the approach you suggest usually, but if you are given an explicit <code>p</code>, then assume all expressions containing any sort of numeral could be subject to this and look at typeclass search.</p>",
        "id": 369986647,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687859215
    },
    {
        "content": "<p>Because as I see it, this approach doesn't work if you're working over <code>K [char_p p K] </code></p>",
        "id": 369986779,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687859238
    },
    {
        "content": "<p>It was discussed to make <code>p</code> an outparam of <code>CharP</code>. That would help here, right?</p>",
        "id": 369988244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687859491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/tactic.20for.20easy.20calculations.20in.20ZMod.20p.3F/near/369988244\">said</a>:</p>\n<blockquote>\n<p>It was discussed to make <code>p</code> an outparam of <code>CharP</code>. That would help here, right?</p>\n</blockquote>\n<p>I certainly expect it would not hurt, although Lean 4 is slightly more willing to find instances when there are still metavariables in the goal.</p>",
        "id": 370003456,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687861685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> does <code>reduce_mod_char</code> normalize rational expressions too btw?</p>",
        "id": 370207089,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687900262
    },
    {
        "content": "<p>There is no special handling for those, beyond using <code>norm_num</code>'s machinery to parse expressions. Could you give an example of something you'd like the tactic to handle?</p>",
        "id": 370366651,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687947704
    },
    {
        "content": "<p>E.g. to turn <code>(1 : Zmod 2)/ 3</code> into <code>1</code> (or more interestingly for larger numbers of course!<br>\nMaybe that one already works actually. But <code>(1 : Zmod 5)/ 2</code> into <code>3</code> would be non-trivial</p>",
        "id": 370376265,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687949141
    },
    {
        "content": "<p>That's indeed along the same lines as I was thinking, thanks for confirming! I couldn't actually figure out how to make <code>(1 : Zmod 5)/ 2</code> elaborate correctly, there is no <code>HDiv</code> instance and adding a <code>Fact (Prime 5)</code> hypothesis didn't seem to help...</p>",
        "id": 370377821,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687949457
    },
    {
        "content": "<p>But that should yield a field instance, shouldn't it?</p>",
        "id": 370379123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687949714
    },
    {
        "content": "<p>Sounds like a bug</p>",
        "id": 370379148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687949718
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.FieldSimp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"mi\">5</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_beq_false</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">field_simp</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 370379928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687949860
    },
    {
        "content": "<p>Probably <code>Prime</code> was not elaborating to <code>Nat.Prime</code> in your example</p>",
        "id": 370380008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687949879
    },
    {
        "content": "<p>I indeed forgot <code>Nat.Prime != Prime</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 370401889,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687953883
    },
    {
        "content": "<p>(Now that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Prime#doc\">docs#Nat.Prime</a> is defined in terms of the ring structure, would it be worth removing it altogether to avoid this kind of confusion?)</p>",
        "id": 370402884,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687954032
    },
    {
        "content": "<p>But it is defined to be <code>Irreducible</code>, right?</p>",
        "id": 370403048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687954064
    },
    {
        "content": "<p>Oh yeah... I suppose that matches more closely with the standard notion of \"only divisible by 1 and itself\". Looks like one year ago the plan was to get rid of <code>Nat.Prime</code> altogether: <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312709.20-.20redefine.20nat.2Eprime.20as.20prime\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.2312709.20-.20redefine.20nat.2Eprime.20as.20prime</a></p>",
        "id": 370411604,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1687955581
    }
]