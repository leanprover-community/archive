[
    {
        "content": "<p>Is there (can there be?) a computable version of axiom of choice on countable (maybe enumerable is more important here, all countable sets are enumerable - but I don't know if they are computably enumerable ) sets (similar to finsets) or at least on Nat?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nat.subtype_of_exists</span><span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">):</span>  <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm not sure by lean standards, but by human standards \"h\" means to me that if I wrote a for loop and checked for P, eventually it would halt - and as a layman that would be computable.</p>",
        "id": 351180126,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681956734
    },
    {
        "content": "<p>You can state it as an axiom, and implement it with a general recursive function at compile time. But note that there is no way to (1) prove it without using other axioms, or (2) make it reduce during typechecking. This is because if it were to have the obvious definitional equalities, it will render typechecking undecidable.</p>",
        "id": 351181074,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1681957740
    },
    {
        "content": "<p>Of course you can also just add equational lemmas, which is fine.</p>",
        "id": 351181087,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1681957762
    },
    {
        "content": "<p>I'm not quite sure I understand how this would render typechecking undecidable. Would it be fair to say that \"In order to be computable in lean its not enough to say that it will halt, but when it will halt?\"</p>",
        "id": 351181616,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1681958312
    },
    {
        "content": "<p>Well it's quite simple actually, suppose <code>h</code> is actually a variable, your computation will not be blocked by that variable, because your computation doesn't inspect (i.e. <code>match</code>) on <code>h</code> <em>at all</em>. Therefore if <code>h</code> is actually a false assumption — you are always allowed to assume false things in logic! — then it gets undecidable, because there is general recursion going on.</p>",
        "id": 351190539,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1681961653
    },
    {
        "content": "<p>Note that usually when we talk about computation, we don't reduce anything under a binder. So when actually compiling the program and running it, you will never encounter the said case. However, typechecking needs to reduce under binders, otherwise Lean won't be able to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mn>0</mn><mo>+</mo><mi>x</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\forall x, 0 + x = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, because it can't reduce under the forall!</p>",
        "id": 351191188,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1681961789
    },
    {
        "content": "<p>Wait why does chrome automatically suggest searching in mathlib when I type <code>lean xxx</code> in the address bar?</p>",
        "id": 351192877,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1681962120
    },
    {
        "content": "<p>This already exists, it is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find_x\">docs#nat.find_x</a></p>",
        "id": 351207099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681966449
    },
    {
        "content": "<p>I doubt that a general countable set is computably enumerable, but as Mario said it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> and friends which you probably want here.</p>",
        "id": 351216538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681970730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Axiom.20of.20choice.20on.20countable.20types/near/351216538\">said</a>:</p>\n<blockquote>\n<p>I doubt that a general countable set is computably enumerable, but as Mario said it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> and friends which you probably want here.</p>\n</blockquote>\n<p>Yeah, I was thinking more about that, I think there might be a diagonalization argument for that since the powerset of nat is uncountable, at least one of the sets cannot be computably enumerable.</p>",
        "id": 351366502,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1682005984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"562941\">Andrew Carter</span> has marked this topic as resolved.</p>",
        "id": 351366583,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682006005
    },
    {
        "content": "<p>I don't really understand the connection you are making between computably enumerable types and nat.find. This isn't counting the powerset of nat in any obvious way?</p>",
        "id": 351367971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682006336
    },
    {
        "content": "<p>This isn't the axiom of countable choice at all. Nat is well ordered so it has a choice function, full stop</p>",
        "id": 351368557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682006450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Axiom.20of.20choice.20on.20countable.20types/near/351367971\">said</a>:</p>\n<blockquote>\n<p>I don't really understand the connection you are making between computably enumerable types and nat.find. This isn't counting the powerset of nat in any obvious way?</p>\n</blockquote>\n<p>Yeah, I only really needed Nat anyway, but was originally looking for the most general since mathlib likes to generalize. If something is computably enumerable then I can use nat.find to use choice on that type as well (via the enumeration) so I figured that was the more general form - but perhaps being well ordered is the more general form. (My powerset thought was just agreeing with <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  that computable choice for countable sets is impossible). It's a bit weird to me that the nat naming doesn't line up with the same naming from the axiom of choice, but nat.find is what I wanted. Thanks.</p>",
        "id": 351396862,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1682014104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Axiom.20of.20choice.20on.20countable.20types/near/351190539\">said</a>:</p>\n<blockquote>\n<p>Well it's quite simple actually, suppose <code>h</code> is actually a variable, your computation will not be blocked by that variable, because your computation doesn't inspect (i.e. <code>match</code>) on <code>h</code> <em>at all</em>. Therefore if <code>h</code> is actually a false assumption — you are always allowed to assume false things in logic! — then it gets undecidable, because there is general recursion going on.</p>\n</blockquote>\n<p>Two things, (1) nat.find apparently does exist, and (2) lean uses noncomputable functions in proofs all the time, so I don't think there is a typechecking decidability issue with faking computability (which in this case doesn't even need to be faked).</p>",
        "id": 351397386,
        "sender_full_name": "Andrew Carter",
        "timestamp": 1682014251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"562941\">Andrew Carter</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Axiom.20of.20choice.20on.20countable.20types/near/351396862\">said</a>:</p>\n<blockquote>\n<p>It's a bit weird to me that the nat naming doesn't line up with the same naming from the axiom of choice, but nat.find is what I wanted. Thanks.</p>\n</blockquote>\n<p><code>nat.find</code> is a bit more than <code>classical.choice</code> though, since it finds the <em>least</em> element satisfying the condition</p>",
        "id": 351415665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682020124
    },
    {
        "content": "<p>IIRC mathcomp has a typeclass for \"has a choice function\" in the sense <code>\\forall P: A -&gt; bool, (∃ n, P n) -&gt;  { n // P n }</code></p>",
        "id": 351415808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682020193
    },
    {
        "content": "<p>mathlib isn't very interested in the concept since it's provably always true</p>",
        "id": 351415895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682020211
    },
    {
        "content": "<p>I think it is called a \"searchable set\", and it does not track well with more traditional mathematical concepts. There are uncountable searchable sets: IIRC <code>(Nat -&gt; Bool) -&gt; Bool</code> is searchable</p>",
        "id": 351416559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682020463
    },
    {
        "content": "<p>see also <a href=\"https://math.andrej.com/2014/05/08/seemingly-impossible-proofs/\">https://math.andrej.com/2014/05/08/seemingly-impossible-proofs/</a></p>",
        "id": 351417473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682020783
    },
    {
        "content": "<p>To add more to what <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  said,  there is a library in Coq called <a href=\"https://coq.inria.fr/library/Coq.Logic.ConstructiveEpsilon.html\">ConstructiveEpsilon</a>. Basically, you if you have <code>Prop</code> Sigma type then you can construct a witness (<code>Type</code> Sigma type) by doing a proof search.</p>",
        "id": 352198311,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1682324593
    }
]