[
    {
        "content": "<p>Is there support somewhere for proving that certain L-series have Euler products (and that both sides of the equation converge in a suitable right half-plane)?</p>\n<p><strong>Context:</strong> One of the projects in my formalization \"seminar\" is to formalize the L-series proof that asymptotically there are as many primes that are congruent to 1 mod 4 as primes that are congruent to 3 mod 4 (in terms of Dirichlet density). The student doing this will need the Euler product expansion of the zeta function and the Dirichlet L-function of the quadratic character mod 4.</p>\n<ul>\n<li>There seems to be quite a lot of API for infinite sums, but I have not found anything for infinite products. Am I missing something?</li>\n<li>There is some material on the zeta function, but it does not include the Euler product, as far as I can see. <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span> ?</li>\n</ul>",
        "id": 400111270,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699009454
    },
    {
        "content": "<p>Hi Michael:</p>\n<ul>\n<li>\n<p>AFAIK there is barely any general API for infinite products. It's been discussed before on zulip, and got a bit bogged down in arguments over what the definitions should be, e.g. what it means for a product to \"converge\" when some of its terms are zero. For the infinite product for the sine function (a product due to Euler, but not an \"Euler product\" in the usual sense!) I ducked the issue by working with the sequence of partial products over <code>fin n</code>.</p>\n</li>\n<li>\n<p>There is a lot of material on the zeta function ‚Äì¬†specifically, the formula for even integer values in terms of Bernoulli numbers, and the meromorphic continuation. The former is already mostly there for general Dirichlet characters, but that doesn't seem to be so relevant here. Adapting the analytic-continuation proof to handle more general Dirichlet characters should be no problem, it's just a matter of adding an extra parameter into a bunch of already-written stuff (the starting point would be to generalise <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.tsum_exp_neg_mul_int_sq#doc\">docs#Complex.tsum_exp_neg_mul_int_sq</a>, which is the Poisson summation formula applied to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>‚Ü¶</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy=\"false\">(</mo><mo>‚àí</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\mapsto exp(-a x ^ 2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Ü¶</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord\">‚àí</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, to allow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>‚Ü¶</mo><mi>exp</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mo>‚àí</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>i</mi><mi>t</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x \\mapsto \\exp(-a x ^ 2 + i t x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Ü¶</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord\">‚àí</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> for an arbitrary <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>). I meant to do this myself but it got overtaken by the lean4 port and then I forgot about it <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>\n</li>\n</ul>",
        "id": 400121685,
        "sender_full_name": "David Loeffler",
        "timestamp": 1699013651
    },
    {
        "content": "<p>Here is the previous discussion I mentioned: <a href=\"#narrow/stream/113488-general/topic/infinite.20product.20clash.20with.20type.20product/near/326028832\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/infinite.20product.20clash.20with.20type.20product/near/326028832</a><br>\nThe stumbling block, if I understand correctly, is that there doesn't seem to be a single notion of \"infinitely iterated operation in a topological monoid\" that is consistent with the usual mathematical usage of infinite sums and infinite products.</p>",
        "id": 400122551,
        "sender_full_name": "David Loeffler",
        "timestamp": 1699013985
    },
    {
        "content": "<p>Thanks. It looks like we will have to see what it is precisely that we need (I assume, in the end it's the logarithmic derivative as a Dirichlet series) and then come up with some way of getting there. I assume we'll need something like products over <code>{p : Finset.range n | p.val.Prime}</code> ...</p>",
        "id": 400122879,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699014105
    },
    {
        "content": "<p>Here is a suitable statement for the zeta function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span> <span class=\"c1\">-- being lazy</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">primesBelow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Topology</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àè</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">primesBelow</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">riemannZeta</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Let's see if/how we get there... (EDIT: fixed the filter on <code>‚Ñï</code>)</p>",
        "id": 400125765,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699015097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span>: In the module docstring for <a href=\"https://tqft.net/mathlib4files/Mathlib/NumberTheory/ZetaFunction\">file#Mathlib/NumberTheory/ZetaFunction</a>, <code>zeta_eq_tsum_of_one_lt_re</code>should be replaced by <code>zeta_eq_tsum_one_div_nat_add_one_cpow</code>.</p>",
        "id": 400126787,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699015466
    },
    {
        "content": "<p>Writing <code>example {s : ‚ÑÇ} (h : |s| &lt; 1) : ...</code> I get the message <code>failed to synthesize instance Abs ‚ÑÇ</code>.<br>\nOK; I guess I want the <em>real</em> absolute value, which is not compatible with the <code>Abs</code> notation class.<br>\nDo I really have to write <code>Complex.abs.toFun s</code>? There should be something more like <code>|s|</code>.</p>",
        "id": 400128166,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699016025
    },
    {
        "content": "<p>I think using norm (rather than abs) works better for ‚ÑÇ.</p>",
        "id": 400128375,
        "sender_full_name": "David Loeffler",
        "timestamp": 1699016101
    },
    {
        "content": "<p>Definitely <code>Complex.abs s</code> should work, no need for <code>Complex.abs.toFun s</code></p>",
        "id": 400128805,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699016255
    },
    {
        "content": "<p>OK. But <code>s.abs</code>does not...</p>",
        "id": 400128955,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699016306
    },
    {
        "content": "<p>Yeah, dot notation like that seems to only work if <code>Complex.abs</code> is a real function, not for a bundled one</p>",
        "id": 400129127,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699016377
    },
    {
        "content": "<p>Not sure if anyone filed an issue about that</p>",
        "id": 400129155,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699016389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euler.20products/near/400126787\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span>: In the module docstring for <a href=\"https://tqft.net/mathlib4files/Mathlib/NumberTheory/ZetaFunction\">file#Mathlib/NumberTheory/ZetaFunction</a>, <code>zeta_eq_tsum_of_one_lt_re</code>should be replaced by <code>zeta_eq_tsum_one_div_nat_add_one_cpow</code>.</p>\n</blockquote>\n<p>PR at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8153\">#8153</a></p>",
        "id": 400129358,
        "sender_full_name": "David Loeffler",
        "timestamp": 1699016451
    },
    {
        "content": "<p>Sorry but can we just not use <code>Complex.abs</code> anymore and use <code>‚Äñ ‚Äñ</code> instead?</p>",
        "id": 400135598,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1699018792
    },
    {
        "content": "<p>One of my most hated simp lemmas of all time is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.norm_eq_abs#doc\">docs#Complex.norm_eq_abs</a>.</p>",
        "id": 400135665,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1699018808
    },
    {
        "content": "<p>There is <code>geom_sum</code> and friends, but <code>tsum_geometric</code>. Sigh...</p>",
        "id": 400139967,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699020228
    },
    {
        "content": "<p>BTW, <code>#find (‚àë' (n : ‚Ñï), _ ^ n)</code> times out.</p>",
        "id": 400140086,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699020257
    },
    {
        "content": "<p>Let me advertise <a href=\"https://github.com/leanprover-community/mathlib/pull/18405\">!3#18405</a> which I think is a necessary first step.</p>",
        "id": 400140559,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1699020403
    },
    {
        "content": "<p>!3 <span aria-label=\"shocked\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"shocked\">:shocked:</span></p>",
        "id": 400147015,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699022441
    },
    {
        "content": "<p>I don't find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">s.re</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(same with <code>Complex.norm</code>)</p>",
        "id": 400167978,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699028999
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.abs</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">s.re</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Complex.abs_cpow_eq_rpow_re_of_pos</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast_pos.mpr</span> <span class=\"n\">h.bot_lt</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 400169709,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699029586
    },
    {
        "content": "<p>I have now produced some 300 lines of code culminating in the following results.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">euler_product</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hsum</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"bp\">‚Äñ</span><span class=\"n\">f</span> <span class=\"bp\">¬∑‚Äñ</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hf‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmul</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">Nat.Coprime</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àè</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">primesBelow</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‚àë'</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"bp\">‚àë'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">euler_product_multiplicative</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedField</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí*‚ÇÄ</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hsum</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‚Äñ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àè</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">primesBelow</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">‚Åª¬π</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"bp\">‚àë'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">riemannZeta_eulerProduct</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.re</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">‚àè</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">primesBelow</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">‚Åª¬π</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">riemannZeta</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Thanks for all the help!</p>",
        "id": 400389774,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699185976
    },
    {
        "content": "<p>On the way, I am intrducing definitions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"sd\">/-- `primesBelow n` is the set of primes less than `n` as a finset. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">primesBelow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- `factorsBelow n` is the set of positive natural numbers all of whose prime factors</span>\n<span class=\"sd\">are less than `n`. -/</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">factorsBelow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">p</span> <span class=\"bp\">‚àà</span> <span class=\"n\">factors</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>with some API. My plan would be to begin with a PR adding these to Mathlib, to be followed by the general theorems above, and finally the special case with the zeta function.</p>",
        "id": 400390079,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699186244
    },
    {
        "content": "<p>I just saw this thread, RIP. I have been working on the exact same results and same APIs for the past week, and for my project in general.</p>",
        "id": 400552341,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699283595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> My current version is <a href=\"https://github.com/MichaelStollBayreuth/EulerProducts/tree/main/EulerProducts\">here</a>.<br>\nIs yours available somewhere, so we can compare?</p>",
        "id": 400560688,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699285912
    },
    {
        "content": "<p>[here] is the relevant parts, <code>prime_Ico</code> is your <code>primesBelow</code>, and <code>smooth</code> is your <code>factorsBelow</code>. I also had <code>Pr</code> which is Primorial and <code>rough</code> for a funny name. You saw my #maths thread, that one is in progress but shouldn't be terrible, and I think it's a slightly more general version of your result.</p>",
        "id": 400562006,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699286275
    },
    {
        "content": "<p>At least it's very closely related</p>",
        "id": 400562063,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699286284
    },
    {
        "content": "<p>Also I think you can replace all your <code>Tendsto ... atTop ...</code> with <code>hasSum</code> (and swapping the arguments), though not sure if that's what you want</p>",
        "id": 400562172,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699286318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euler.20products/near/400562006\">said</a>:</p>\n<blockquote>\n<p>[here] is the relevant parts, </p>\n</blockquote>\n<p>You did not put in the URL.</p>",
        "id": 400562338,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699286364
    },
    {
        "content": "<p>lmao <a href=\"https://gist.github.com/grhkm21/9724ddefe33509c5774230720392b2be\">here</a></p>",
        "id": 400562760,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699286455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579936\">Gareth Ma</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euler.20products/near/400562172\">said</a>:</p>\n<blockquote>\n<p>Also I think you can replace all your <code>Tendsto ... atTop ...</code> with <code>hasSum</code> (and swapping the arguments), though not sure if that's what you want</p>\n</blockquote>\n<p>I don't think so, as the LHS is a product, not a sum. Once infinite products are in, it can be written more succinctly.</p>",
        "id": 400562785,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699286461
    },
    {
        "content": "<p>ok</p>",
        "id": 400563426,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699286571
    },
    {
        "content": "<p>But yes, if you get your results into Mathlib I can also add mine in I guess</p>",
        "id": 400563646,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699286600
    },
    {
        "content": "<p>I'll have to go home now. I'll have a look later.</p>",
        "id": 400564278,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699286699
    },
    {
        "content": "<p>I have now made the first PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/8252\">#8252</a>). It sets up a new file <code>Mathlib.NumberTheory.SmoothNumbers</code> with the definitions of  <code>primesBelow</code> and  <code>smoothNumbers</code>, the relevant API lemmas and the equivalence <code>‚Ñï √ó smoothNumbers p ‚âÉ smoothNumbers p.succ</code> when <code>p</code> is prime.</p>",
        "id": 400818798,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699392557
    },
    {
        "content": "<p>Here is another small preparatory PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8325\">#8325</a> . It adds two API lemmas on <code>HasSum</code>/<code>tsum</code> that I found useful.</p>",
        "id": 401410575,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699634590
    },
    {
        "content": "<p>Is it worthy to expand <code>tsum_eq_tsum_diff_singleton</code> to a set of zero-values, to a finite set of values, or given an inclusion of supports?</p>",
        "id": 401411328,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1699634993
    },
    {
        "content": "<p>Maybe. The case I need is functions on Nat taking the value zero at zero, so the current version is already generalized a bit. But I can try to come up with something more general that is as easy to use.</p>",
        "id": 401411555,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699635091
    },
    {
        "content": "<p>I've added a version for arbitrary set differences.</p>",
        "id": 401423166,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699641463
    },
    {
        "content": "<p>The first real Euler products PR is now at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8410\">#8410</a> . It proves the general formula for Euler products, once for functions that are only multiplicative on coprime arguments (which is the minimal requirement) and once for completely multiplicative ones (using the formula for the geometric series).</p>",
        "id": 402052341,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699989292
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8751\">#8751</a> is the next PR. It proves the Euler product formula for the Riemann zeta function and for Dirichlet L-series.</p>",
        "id": 405189229,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701373706
    }
]