[
    {
        "content": "<p>I couldn't find in mathlib the following characterization of monotone functions with domain a <code>Finset</code>, anyone recognize it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Monotone</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Finset.subset_insert</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">s</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">v</span> <span class=\"n\">huv</span>\n      <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">_</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">union_sdiff_of_subset</span> <span class=\"n\">huv</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">t</span> <span class=\"n\">using</span> <span class=\"n\">Finset.induction</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">t</span> <span class=\"n\">_hit</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">·</span> <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n        <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">i</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.union_insert</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 385929975,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1692369110
    },
    {
        "content": "<p>I think it should follow from some result about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Covby#doc\">docs#Covby</a> ?</p>",
        "id": 385932492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692369771
    },
    {
        "content": "<p>I don't see why it would, because this really only true because you can get to any finset by a finite sequence of insertion. For example the result is false for <code>Set</code> (take <code>f s = 1</code> if <code>s</code> is finite and <code>f s = 0</code> otherwise)</p>",
        "id": 385933388,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692370013
    },
    {
        "content": "<p>The mathematical result is that the order on <code>Finset</code> is the smallest order relation such that <code>s ⊆ insert i s</code>, but I don't think we have that nor a good way to use it.</p>",
        "id": 385933951,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692370174
    },
    {
        "content": "<p>I think the version I want is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Cover</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_iff_forall_covby</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Monotone</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⋖</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">h.le</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n    <span class=\"c1\">-- iterate over a chain between `a` and `b`</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 385934136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692370211
    },
    {
        "content": "<p>Oh okay with <code>LocallyFiniteOrder</code> that would work</p>",
        "id": 385934377,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692370278
    },
    {
        "content": "<p>Where the other two missing pieces are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Finset.covby_cons</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⋖</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Finset.ssubset_cons</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊂</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hts</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊂</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.covby_iff_eq_cons</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⋖</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h'</span> <span class=\"bp\">▸</span> <span class=\"n\">Finset.covby_cons</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 385936127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692370675
    },
    {
        "content": "<p>By the way, while using my brand new lemma, I realised that the more convenient version is to put an extra condition <code>i ∉ s</code> on the index:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Finset.monotone_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Monotone</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>",
        "id": 385937974,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1692371117
    },
    {
        "content": "<p>Just to be clear, that makes it exactly (up to propositional equality) <code>Covby</code>.</p>",
        "id": 385940601,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692371962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/monotone.20functions.20from.20finset/near/385934136\">said</a>:</p>\n<blockquote>\n<p>I think the version I want is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Cover</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_iff_forall_covby</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Monotone</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⋖</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">h.le</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n    <span class=\"c1\">-- iterate over a chain between `a` and `b`</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I claim that the right way to prove this is to start with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Cover</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⋖</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 385941502,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692372232
    },
    {
        "content": "<p>Then things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Relation.ReflTransGen.lift#doc\">docs#Relation.ReflTransGen.lift</a> should get the monotonicity result</p>",
        "id": 385941716,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692372298
    },
    {
        "content": "<p>Note that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.relationReflTransGen_of_exists_chain#doc\">docs#List.relationReflTransGen_of_exists_chain</a></p>",
        "id": 385941884,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692372358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/monotone.20functions.20from.20finset/near/385937974\">said</a>:</p>\n<blockquote>\n<p>By the way, while using my brand new lemma, I realised that the more convenient version is to put an extra condition <code>i ∉ s</code> on the index</p>\n</blockquote>\n<p>At that point you may as well use <code>cons</code> instead of <code>insert</code>, which also saves you from needing <code>[DecidableEq α]</code></p>",
        "id": 385946271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692374095
    },
    {
        "content": "<p>btw I have a big PR with a bunch of relevant lemmas</p>",
        "id": 385949015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692375100
    },
    {
        "content": "<p>What a surprise!</p>",
        "id": 385949165,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692375163
    },
    {
        "content": "<p>But Yaël, the key question is: is it Lean 3 or Lean 4? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 385950319,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692375615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> I don't think your lemma <code>foo</code> is true unless you assume <code>α</code> is a <code>PartialOrder</code>, because if <code>x ≠ y</code> but <code>x ≤ y</code> and <code>y ≤ x</code>, then <code>Relation.ReflTransGen (· ⋖ ·) x y</code> is false because there is no <em>strictly</em> increasing chain from <code>x</code> to <code>y</code>.</p>",
        "id": 385960601,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692380222
    },
    {
        "content": "<p>Ah right. That problem doesn’t arise if we use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Wcovby#doc\">docs#Wcovby</a> though, right? But restricting to partial orders is probably fine anyway</p>",
        "id": 385962159,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692380925
    },
    {
        "content": "<p>Let the golfing begin, I am totally unfamiliar with this end of the library:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.LocallyFinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Cover</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⩿</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n        <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⩿</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strong_induction_on</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Icc_eq_empty_iff.mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span> <span class=\"n\">h</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">card_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n        <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">mem_singleton.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">left_mem_Icc.mpr</span> <span class=\"n\">hxy</span>\n        <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"n\">mem_singleton.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">right_mem_Icc.mpr</span> <span class=\"n\">hxy</span>\n        <span class=\"n\">substs</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n        <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span> <span class=\"n\">h</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">card_lt_card</span> <span class=\"bp\">&lt;|</span>\n          <span class=\"o\">⟨</span><span class=\"n\">Ico_subset_Icc_self</span><span class=\"o\">,</span> <span class=\"n\">not_subset.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">right_mem_Icc.mpr</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">right_not_mem_Ico</span><span class=\"o\">⟩⟩⟩)</span>\n        <span class=\"n\">by_cases</span> <span class=\"n\">hxy'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Relation.ReflTransGen.single</span>\n            <span class=\"o\">⟨</span><span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">hxc</span> <span class=\"n\">hcy</span> <span class=\"bp\">↦</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">hcy.trans_le</span> <span class=\"n\">hxy'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hxc</span><span class=\"o\">⟩</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h_non</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_Ico.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">le_rfl</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_not_le</span> <span class=\"n\">hxy</span> <span class=\"n\">hxy'</span><span class=\"o\">⟩⟩</span>\n          <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z_mem</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_maximal</span> <span class=\"n\">h_non</span>\n          <span class=\"k\">have</span> <span class=\"n\">z_card</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n            <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span>\n              <span class=\"n\">card_le_of_subset</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"n\">hw</span> <span class=\"bp\">↦</span> <span class=\"n\">Icc_subset_Ico_right</span> <span class=\"o\">(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">z_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hw</span>\n            <span class=\"n\">_</span>              <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n          <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">z_card</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">z_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">rfl</span>\n          <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">⩿</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">z_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">hzc</span> <span class=\"n\">hcy</span> <span class=\"bp\">↦</span> <span class=\"n\">hz</span> <span class=\"n\">c</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hzc</span><span class=\"o\">⟩</span>\n            <span class=\"n\">exact</span> <span class=\"n\">mem_Ico.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">⟨(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">z_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hzc.le</span><span class=\"o\">,</span> <span class=\"n\">hcy</span><span class=\"o\">⟩</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Relation.ReflTransGen.tail</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h₂.trans</span> <span class=\"n\">h₁.le</span>\n</code></pre></div>",
        "id": 385971070,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692384953
    },
    {
        "content": "<p>One place I feel like there <em>should</em> be obvious room for improvement: I did strong induction on the cardinality of <code>Finset.Icc x y</code>, but it would have been nicer if I could have used some sort of direct induction principle; I couldn't see how to make things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.induction_on#doc\">docs#Finset.induction_on</a> apply in this situation though.</p>",
        "id": 385977177,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692387514
    },
    {
        "content": "<p>I think you really have to use cardinality here though, because you don’t know how much you decrease the cardinality at each step, so you have to use some kind of well-foundedness. Probably you could also use well foundedness of <code>\\subset</code> on <code>Finset</code>, but I can’t think of anything else</p>",
        "id": 385984713,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692390492
    },
    {
        "content": "<p>Yes, the well-foundedness of <code>⊆</code> on <code>Finset</code> was the kind of thing I was thinking, but I guess it's not too important.</p>",
        "id": 385991485,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692394105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I've added a bit more below, but I haven't yet added the glue that connects covby to insert for <code>Finset</code>. If you would like to clean it up and PR it, that's fine, but if you want me to I can probably do it sometime this weekend.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.LocallyFinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Cover</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_iff_reflTransGen_wcovby</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⩿</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hxy</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⩿</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strong_induction_on</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">Icc_eq_empty_iff.mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">hxy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">card_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n        <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">mem_singleton.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">left_mem_Icc.mpr</span> <span class=\"n\">hxy</span>\n        <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"n\">mem_singleton.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">right_mem_Icc.mpr</span> <span class=\"n\">hxy</span>\n        <span class=\"n\">substs</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n        <span class=\"n\">rfl</span>\n      <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">card_lt_card</span> <span class=\"bp\">&lt;|</span>\n          <span class=\"o\">⟨</span><span class=\"n\">Ico_subset_Icc_self</span><span class=\"o\">,</span> <span class=\"n\">not_subset.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">right_mem_Icc.mpr</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">right_not_mem_Ico</span><span class=\"o\">⟩⟩⟩)</span>\n        <span class=\"n\">by_cases</span> <span class=\"n\">hxy'</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Relation.ReflTransGen.single</span>\n            <span class=\"o\">⟨</span><span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">hxc</span> <span class=\"n\">hcy</span> <span class=\"bp\">↦</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">hcy.trans_le</span> <span class=\"n\">hxy'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hxc</span><span class=\"o\">⟩</span>\n        <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">h_non</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_Ico.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">le_rfl</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_not_le</span> <span class=\"n\">hxy</span> <span class=\"n\">hxy'</span><span class=\"o\">⟩⟩</span>\n          <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z_mem</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_maximal</span> <span class=\"n\">h_non</span>\n          <span class=\"k\">have</span> <span class=\"n\">z_card</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n            <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span>\n              <span class=\"n\">card_le_of_subset</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"n\">hw</span> <span class=\"bp\">↦</span> <span class=\"n\">Icc_subset_Ico_right</span> <span class=\"o\">(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">z_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hw</span>\n            <span class=\"n\">_</span>              <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n          <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">z_card</span> <span class=\"o\">(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">z_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">rfl</span>\n          <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">⩿</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">z_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">hzc</span> <span class=\"n\">hcy</span> <span class=\"bp\">↦</span> <span class=\"n\">hz</span> <span class=\"n\">c</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hzc</span><span class=\"o\">⟩</span>\n            <span class=\"n\">exact</span> <span class=\"n\">mem_Ico.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">⟨(</span><span class=\"n\">mem_Ico.mp</span> <span class=\"n\">z_mem</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hzc.le</span><span class=\"o\">,</span> <span class=\"n\">hcy</span><span class=\"o\">⟩</span>\n          <span class=\"n\">exact</span> <span class=\"n\">Relation.ReflTransGen.tail</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n  <span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h₂.trans</span> <span class=\"n\">h₁.le</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_iff_forall_wcovby</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⩿</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">hf</span> <span class=\"n\">h.le</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Relation.reflTransGen_eq_self</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">·</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"n\">IsRefl.reflexive</span> <span class=\"n\">transitive_le</span><span class=\"o\">]</span>\n    <span class=\"n\">using</span> <span class=\"n\">Relation.ReflTransGen.lift</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_iff_reflTransGen_wcovby.mp</span> <span class=\"n\">hab</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Relation</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Relation.ReflTransGen.reflGen</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">ReflTransGen</span> <span class=\"o\">(</span><span class=\"n\">ReflGen</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ReflTransGen</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">refl_trans_gen_idem</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">ReflTransGen.mono</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">ReflGen.to_reflTransGen</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">ReflTransGen.mono</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">ReflGen.single</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Relation.ReflGen_eq</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ReflGen</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">ReflGen.refl</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">ReflGen.single</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reflTransGen_wcovby_eq_reflTransGen_covby</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">ReflTransGen</span> <span class=\"o\">((</span><span class=\"bp\">·</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">⩿</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ReflTransGen</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⋖</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">wcovby_iff_eq_or_covby</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ReflGen_eq</span><span class=\"o\">,</span> <span class=\"n\">ReflTransGen.reflGen</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_iff_reflTransGen_covby</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">Relation.ReflTransGen</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">⋖</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_iff_reflTransGen_wcovby</span><span class=\"o\">,</span> <span class=\"n\">reflTransGen_wcovby_eq_reflTransGen_covby</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monotone_iff_forall_covby</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LocallyFiniteOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⋖</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">hf</span> <span class=\"n\">h.le</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Relation.reflTransGen_eq_self</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">·</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"n\">IsRefl.reflexive</span> <span class=\"n\">transitive_le</span><span class=\"o\">]</span>\n    <span class=\"n\">using</span> <span class=\"n\">Relation.ReflTransGen.lift</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_iff_reflTransGen_covby.mp</span> <span class=\"n\">hab</span>\n</code></pre></div>\n</div></div>",
        "id": 386001596,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692400528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Thank you for this nice lemma!  I won't get to PR'ing it this weekend, but if you also don't I will put it on my to-do list.</p>",
        "id": 386003287,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1692401605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> : <a href=\"https://github.com/leanprover-community/mathlib4/pull/6709\">#6709</a></p>",
        "id": 386462777,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692647590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/monotone.20functions.20from.20finset/near/385950319\">said</a>:</p>\n<blockquote>\n<p>But Yaël, the key question is: is it Lean 3 or Lean 4? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Currently Lean 3, haven't had time to port anything in the past month.</p>",
        "id": 386542304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692687199
    }
]