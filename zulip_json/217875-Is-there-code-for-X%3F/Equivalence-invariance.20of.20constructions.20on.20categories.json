[
    {
        "content": "<p>Specifically, if I have <code>e1 : C ≌ C'</code> and <code>e2 : D ≌ D'</code> is there a definition that will give me <code>(C ⥤ D) ≌ (C' ⥤ D')</code> and <code>(C ⥤ D) × (C' ⥤ D')</code> in terms of them?</p>",
        "id": 361666475,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685236731
    },
    {
        "content": "<p>This follows from the fact that <code>Prod : Cat.{v₁, u₁} × Cat.{v₂, u₂} → Cat.{max v₁ v₂, max u₂ u₁}</code> and <code>Fun : Cat.{v₁, u₁}^op × Cat.{v₂, u₂} → Cat.{max u₁ v₂, max (max (max u₂ u₁) v₂) v₁}</code> are (strict) 2-functors, but I don't really feel like filling in that theory</p>\n<p>(edit: and also it's insufficient when C, C' live in different universes)</p>",
        "id": 361667134,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685237243
    },
    {
        "content": "<p>You could combine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.equivalence.congr_left\">docs#category_theory.equivalence.congr_left</a> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.equivalence.congr_right\">docs#category_theory.equivalence.congr_right</a>, swapping out one side at a time</p>",
        "id": 361668009,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1685238103
    },
    {
        "content": "<p>oh great, I only needed congr_left. thanks!</p>",
        "id": 361668498,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685238574
    },
    {
        "content": "<p>(but there's no such code for products still, right?)</p>",
        "id": 361668592,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685238670
    },
    {
        "content": "<p>Did you mean to write <code>(C × C') ≌ (D × D')</code>? Not that I could find on a cursory scan of the docs.</p>",
        "id": 361669217,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1685239238
    },
    {
        "content": "<p>Yep, sorry</p>",
        "id": 361669229,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685239245
    },
    {
        "content": "<p>guess I'll add this to Mathlib.CategoryTheory.Products.Basic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Equivalence.prodCongr</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₃</span><span class=\"o\">}</span> <span class=\"n\">C'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₄</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₄</span><span class=\"o\">}</span> <span class=\"n\">D'</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≌</span> <span class=\"n\">C'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">≌</span> <span class=\"n\">D'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span> <span class=\"bp\">≌</span> <span class=\"n\">C'</span> <span class=\"bp\">×</span> <span class=\"n\">D'</span> <span class=\"n\">where</span>\n  <span class=\"n\">functor</span> <span class=\"o\">:=</span> <span class=\"n\">e1.functor.prod</span> <span class=\"n\">e2.functor</span>\n  <span class=\"n\">inverse</span> <span class=\"o\">:=</span> <span class=\"n\">e1.inverse.prod</span> <span class=\"n\">e2.inverse</span>\n  <span class=\"n\">unitIso</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">NatTrans.prod</span> <span class=\"n\">e1.unitIso.hom</span> <span class=\"n\">e2.unitIso.hom</span><span class=\"o\">,</span> <span class=\"n\">NatTrans.prod</span> <span class=\"n\">e1.unitIso.inv</span> <span class=\"n\">e2.unitIso.inv</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">counitIso</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">NatTrans.prod</span> <span class=\"n\">e1.counitIso.hom</span> <span class=\"n\">e2.counitIso.hom</span><span class=\"o\">,</span> <span class=\"n\">NatTrans.prod</span> <span class=\"n\">e1.counitIso.inv</span> <span class=\"n\">e2.counitIso.inv</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">functor_unitIso_comp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 361669286,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1685239286
    }
]