[
    {
        "content": "<p>I can't seem to find this (straightforward?) lemma about <code>Fintype</code>, and loogle/moogle/apply? don't seem to know either <span aria-label=\"frowning\" class=\"emoji emoji-1f626\" role=\"img\" title=\"frowning\">:frowning:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">L1</span> <span class=\"n\">h1</span> <span class=\"n\">L2</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">L1</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">L2</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I also am failing to write it myself. Is this function not possible?</p>",
        "id": 400041122,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698972817
    },
    {
        "content": "<p>How can you construct a value of the type of h1 or h2 without being over a fintype?</p>",
        "id": 400041733,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1698973143
    },
    {
        "content": "<p>I'm not sure what you mean -- <code>Fintype V</code> is one of the arguments</p>",
        "id": 400041876,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698973217
    },
    {
        "content": "<p>The idea is just to get access to both the concrete list AND a proof that it is complete, all within the quotient being eliminated. I guess I'm looking for some sort of quotient version of <code>attach</code>?</p>",
        "id": 400041998,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698973280
    },
    {
        "content": "<p>Oh, sorry, I misread the question. I read it as trying to get rid of the Fintype constraint.</p>",
        "id": 400042027,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1698973290
    },
    {
        "content": "<p>You can define the multiset function via a dependent lift I think</p>",
        "id": 400042357,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1698973405
    },
    {
        "content": "<p>actually, maybe that's also my question -- I don't see a dependent lift function; is it even possible to define a dependent lift over quotients?</p>",
        "id": 400042546,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698973471
    },
    {
        "content": "<p>Yes, the lift is creating the function from prop to beta. You'll likely have to go through Quotient.recOn</p>",
        "id": 400042791,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1698973626
    },
    {
        "content": "<p>maybe some progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">L1</span> <span class=\"n\">h1</span> <span class=\"n\">L2</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">L1</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">L2</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.recOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"n\">Fintype.elems.val</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">L</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">funext</span> <span class=\"n\">h</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">HasEquiv.Equiv</span><span class=\"o\">,</span> <span class=\"n\">Setoid.r</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"n\">Fintype.complete</span>\n</code></pre></div>\n<p>I'll take another stab tomorrow, unless someone who understands <code>Quotient.recOn</code> gets to it by then <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 400046535,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698975951
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">L1</span> <span class=\"n\">h1</span> <span class=\"n\">L2</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">L1</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">L2</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.hrecOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"n\">Finset.univ.val</span>\n    <span class=\"n\">f</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">L1</span> <span class=\"n\">L2</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Function.hfunext</span>\n      <span class=\"bp\">·</span> <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">1</span>\n        <span class=\"n\">exact</span> <span class=\"n\">List.Perm.mem_iff</span> <span class=\"n\">p</span>\n      <span class=\"n\">intros</span>\n      <span class=\"n\">apply</span> <span class=\"n\">heq_of_eq</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"n\">Fintype.complete</span>\n</code></pre></div>",
        "id": 400069488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698991086
    },
    {
        "content": "<p>thank you kyle!! my code is now sorry-less, much appreciated</p>",
        "id": 400147559,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1699022644
    },
    {
        "content": "<p>I came up with a version that uses some new lemmas for <code>Quotient</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Quotient.toTrunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trunc</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q.recOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">Trunc.mk</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">Trunc.eq</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Quotient.elim</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q.toTrunc.lift</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">x.val</span> <span class=\"n\">x.prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.elim</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.elim</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">L1</span> <span class=\"n\">h1</span> <span class=\"n\">L2</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">L1</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">L2</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finset.univ.val.elim</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">L</span> <span class=\"n\">hL</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">L</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Multiset.mem_coe</span><span class=\"o\">,</span> <span class=\"n\">hL</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Should these be PRed?</p>",
        "id": 400175398,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699031479
    },
    {
        "content": "<p>A slight golf of the first one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Quotient.toTrunc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trunc</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q.recOnSubsingleton</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span>\n</code></pre></div>",
        "id": 400177676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699032371
    },
    {
        "content": "<p>ooh, I do like that implementation. does this make it easier to prove this lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Multiset.elim_eq_forall</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmotive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">},</span> <span class=\"n\">Multiset.elim</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">L</span> <span class=\"n\">hL</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 400178153,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1699032588
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Multiset.elim_eq_forall</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmotive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">},</span> <span class=\"n\">Multiset.elim</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">L</span> <span class=\"n\">hL</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">Quotient.inductionOn</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hmotive</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 400181018,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699033799
    },
    {
        "content": "<p>Thank y'all for the quick help, I get lost so quickly with quotients <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span></p>",
        "id": 400181758,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1699034103
    }
]