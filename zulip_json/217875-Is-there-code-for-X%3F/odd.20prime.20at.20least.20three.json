[
    {
        "content": "<p>Hi all,</p>\n<p>Just wondering if there exists a proof for <br>\n<code>nat.prime p ∧ odd p → 3 ≤ p</code></p>\n<p>Thank you!</p>",
        "id": 338082525,
        "sender_full_name": "Will Midwood",
        "timestamp": 1677375053
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.succ_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h.left.two_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">nat.odd_iff_not_even.mp</span> <span class=\"n\">h.right</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">▸</span> <span class=\"n\">even_two</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 338088496,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1677380320
    },
    {
        "content": "<p>The term mode proof is fine, but I wanted to see what's going on better, so here's a tactic proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.odd_iff_not_even</span><span class=\"o\">,</span> <span class=\"n\">hp.even_iff</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_le_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hp.two_le</span> <span class=\"n\">hodd</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 338123194,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677406368
    },
    {
        "content": "<p>It seems like we're missing a <code>nat.succ_le_iff_le_and_ne</code> lemma, which is what the last two lines are doing.</p>",
        "id": 338123345,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677406448
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.succ_le_iff\">docs#order.succ_le_iff</a> + <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lt_iff_le_and_ne\">docs#lt_iff_le_and_ne</a></p>",
        "id": 338126167,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1677407916
    },
    {
        "content": "<p>Thanks all! I didn't realise that <code>nat.succ_le_ifff</code> would automatically decrement 3 to 2. Handy trick!</p>",
        "id": 338139612,
        "sender_full_name": "Will Midwood",
        "timestamp": 1677413957
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime.five_le_of_ne_two_of_ne_three\">docs#nat.prime.five_le_of_ne_two_of_ne_three</a>, which makes me wonder why there is no similar statement for 3...</p>",
        "id": 338141326,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1677414695
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime.even_iff\">docs#nat.prime.even_iff</a> could also be used in the proof.</p>",
        "id": 338142414,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1677415093
    }
]