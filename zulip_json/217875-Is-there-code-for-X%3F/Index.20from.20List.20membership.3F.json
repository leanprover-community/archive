[
    {
        "content": "<p>Any suggestions for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">idx_of_mem'</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">xs.get</span><span class=\"bp\">?</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>I can probably get there by bashing at <code>List.findIdx?</code> for a bit, but it seems awkward.</p>",
        "id": 394978877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696490054
    },
    {
        "content": "<p>Done, but it doesn't fit in the margin here... Still curious if anyone sees something less icky.</p>",
        "id": 394982119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696491449
    },
    {
        "content": "<p><code>List.mem_iff_get? </code>?</p>",
        "id": 394982628,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696491654
    },
    {
        "content": "<p>Not sure if this is what you are looking for. Kind of hacked at it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">idx_of_mem'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">xs.get</span><span class=\"bp\">?</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.mem_iff_get</span><span class=\"bp\">?</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">w</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Encodable.chooseX</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 394983359,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696491965
    },
    {
        "content": "<p>Added y as a param.</p>",
        "id": 394983397,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696491987
    },
    {
        "content": "<p>Ah, nice. I'd use <code>Nat.find</code> and <code>Nat.find_spec</code> as they are less deeply embedded in Mathlib than <code>Encodable.chooseX</code>.</p>",
        "id": 394984603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696492539
    },
    {
        "content": "<p>Cool. I just did an <code>apply?</code> and it gave me the last line :)</p>",
        "id": 394984754,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696492598
    },
    {
        "content": "<p>Would it be better to return the element of <code>Fin xs.length</code> here?</p>",
        "id": 394998097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696497626
    },
    {
        "content": "<p>Indeed, I would find the following more convenient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fidx_of_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">xs.length</span> <span class=\"bp\">//</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I don't see any shortcuts on how to write this function compared to Kayla's suggestion, though.</p>",
        "id": 395000396,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696498500
    }
]