[
    {
        "content": "<p>I'm just starting out with lean having some experience with other proof assistants like Coq. Is there a <code>Search</code> like tactic in lean4?</p>\n<p>From what I can tell there is only the <code>TryThis</code> API, which is not yet implemented, and <code>library_search</code>, which doesn't seem that useful when it can't complete the proof. Are there any better alternatives for looking for relevant theorems and/or definitions than manually skimming the API reference?</p>",
        "id": 352896418,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682529584
    },
    {
        "content": "<p>What I meant in <a href=\"#narrow/stream/113489-new-members\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members</a> is that you should ask in <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> what you're looking for, not that you're looking for <code>Search</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 352898834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682529925
    },
    {
        "content": "<p>I realized this just after posting, and was about to ask you to clairfy. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> </p>\n<p>Thanks for the answer!</p>",
        "id": 352899414,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682530014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455113\">Oskar Goldhahn</span> has marked this topic as resolved.</p>",
        "id": 352899571,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682530038
    },
    {
        "content": "<p>At any rate, a great way to find lemmas is to guess what lemma you want there to be, then write the statement and use <code>library_search</code> or <code>squeeze_simp</code>on it.</p>",
        "id": 352899754,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682530065
    },
    {
        "content": "<p>Understand: It's not because <code>library_search</code> must close the goal to work that you can't make it work on more complicated goals. It's just that you need to tell it what to look for.</p>",
        "id": 352900288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682530135
    },
    {
        "content": "<p>But also, have you tried the very recent <code>propose</code>? It's a sort of reverse <code>library_search</code>. It has the same architecture, except that it works forward from the hypotheses in context, rather than backwards from the goal.</p>",
        "id": 352900661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682530187
    },
    {
        "content": "<p>That looks nice as well, but won't work for my case because there are no hypotheses.</p>",
        "id": 352901715,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682530338
    },
    {
        "content": "<p>If you post an example of a concrete search problem for which the existing tooling doesn't seem to help, we can either try to identify something that does help, or use it as inspiration for new search tools!</p>",
        "id": 352948331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682543679
    }
]