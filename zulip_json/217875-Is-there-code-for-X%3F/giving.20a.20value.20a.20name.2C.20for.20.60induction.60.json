[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Digits</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.digits_add'</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxb</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx0</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"c1\">-- I want to do induction on the list `Nat.digits b y`. These</span>\n  <span class=\"c1\">-- next two lines are to give that value a name. Is there</span>\n  <span class=\"c1\">-- a nicer way to accomplish this?</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ds</span><span class=\"o\">,</span> <span class=\"n\">ds</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">exists_eq</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ds</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span>\n\n  <span class=\"n\">revert</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ds</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">d</span> <span class=\"n\">ds</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 389504166,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694028652
    },
    {
        "content": "<p>I find myself doing this dance often:</p>\n<ol>\n<li>construct a trivial existential</li>\n<li>immediately unpack it</li>\n</ol>\n<p>The point is that I need the value to have a name so that I can do <code>induction</code> with it.<br>\nIs there a better way to do this?</p>",
        "id": 389504344,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694028730
    },
    {
        "content": "<p>You can do <code>induction Nat.digits b y with</code>, is that what you are asking for?</p>",
        "id": 389504543,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694028826
    },
    {
        "content": "<p>That fails because of the <code>revert x y</code> line.</p>",
        "id": 389504732,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694028924
    },
    {
        "content": "<p><code>y</code> is no longer in context there</p>",
        "id": 389504743,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694028929
    },
    {
        "content": "<p>Ah sorry, does </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n</code></pre></div>\n<p>get you what you want? (maybe I should think about whats actually needed to prove this..)</p>",
        "id": 389505183,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694029108
    },
    {
        "content": "<p>for what it's worth, the complete proof is here: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/3a2c6843f13d53e45edbd553045e78c512b1664f/MathPuzzles/Usa2003Q1.lean#L21-L53\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/3a2c6843f13d53e45edbd553045e78c512b1664f/MathPuzzles/Usa2003Q1.lean#L21-L53</a></p>",
        "id": 389505311,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694029172
    },
    {
        "content": "<p>I'm just trying to clean it up before maybe PR'ing it to mathlib</p>",
        "id": 389505329,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694029183
    },
    {
        "content": "<p>when I try <code>induction Nat.digits b y generalizing x y with</code>, I end up unable to prove the <code>nil</code> branch, because I need <code>y</code> to be zero and that information has now been lost</p>",
        "id": 389506235,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694029599
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lemma for mathlib?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.digits_add'</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxb</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx0</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxb</span> <span class=\"n\">hx0</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hyy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.digits_eq_nil_iff_eq_zero.mp</span> <span class=\"n\">hy</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">hyy</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.digits_of_lt</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">hx0</span> <span class=\"n\">hxb</span>\n  <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">d</span> <span class=\"n\">ds</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">List.length_cons</span><span class=\"o\">,</span> <span class=\"n\">Nat.pow_succ</span><span class=\"o\">,</span> <span class=\"n\">List.cons_append</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n       <span class=\"n\">by_contra</span> <span class=\"n\">H</span>\n       <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.eq_zero_of_nonpos</span> <span class=\"n\">y</span> <span class=\"n\">H</span>\n       <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n       <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.digits_def'</span> <span class=\"n\">hb</span> <span class=\"n\">hyp</span>\n    <span class=\"k\">have</span> <span class=\"n\">hdd</span> <span class=\"o\">:=</span> <span class=\"n\">hy.symm</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hdd</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">ds</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">hxb</span> <span class=\"n\">hx0</span> <span class=\"n\">h5.symm</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h5</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n    <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">List.length</span> <span class=\"n\">ds</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Nat.digits_def'</span> <span class=\"n\">hb</span> <span class=\"n\">h6</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.mul_assoc</span><span class=\"o\">]</span>\n\n    <span class=\"n\">congr</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Nat.add_mod</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_mod_left</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_mod</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h4.symm</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h5</span><span class=\"o\">,</span><span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span>\n      <span class=\"k\">have</span> <span class=\"n\">hbz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_one.trans</span> <span class=\"n\">hb</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Nat.add_div</span> <span class=\"n\">hbz</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h6</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">%</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.not_le.mpr</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">y</span> <span class=\"n\">hbz</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h6</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Nat.mul_div_left</span> <span class=\"n\">_</span> <span class=\"n\">hbz</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 389506875,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694029943
    },
    {
        "content": "<p>I'm not sure that the default induction tactic supports this, but you can use <code>induction'</code> instead which has a slightly different syntax</p>",
        "id": 389506967,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694029980
    },
    {
        "content": "<p>This isn't quite what you were looking for but this can be proved much more simply:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.digits_add'</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxb</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx0</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">ofDigits</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ofDigits_append</span><span class=\"o\">,</span> <span class=\"n\">ofDigits_digits</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">digits_ofDigits</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">forall_and</span><span class=\"o\">,</span> <span class=\"n\">or_imp</span><span class=\"o\">,</span> <span class=\"n\">hxb</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">digits_lt_base</span> <span class=\"n\">hb</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span>\n</code></pre></div>",
        "id": 389514796,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694033684
    },
    {
        "content": "<p>wow!</p>",
        "id": 389518591,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694035632
    },
    {
        "content": "<p>I opened a PR for a slight generalization of this theorem: <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/6999\">https://github.com/leanprover-community/mathlib4/pull/6999</a></p>",
        "id": 389557570,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694057002
    }
]