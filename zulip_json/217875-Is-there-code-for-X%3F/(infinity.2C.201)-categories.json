[
    {
        "content": "<p>What progress (if any) has been made towards infinity categories in Lean?</p>",
        "id": 408745535,
        "sender_full_name": "Andrea Bourque",
        "timestamp": 1702956612
    },
    {
        "content": "<p>IIRC we have simplicial sets but nobody has needed infinity categories yet</p>",
        "id": 408784397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702963764
    },
    {
        "content": "<p>I am also interested in  (infinity,1)-categories in lean.</p>",
        "id": 408933319,
        "sender_full_name": "Joseph Tooby-Smith",
        "timestamp": 1702992274
    },
    {
        "content": "<p>I don't think there's any obstruction to making the quasicategory definition</p>",
        "id": 408955371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702999220
    },
    {
        "content": "<p>Here's a start that I created some time ago.</p>\n<ul>\n<li>As you can see, the definition can be made in a few lines.</li>\n<li>The first minor objective would be to show that the nerve of a 1-category is a quasicategory. Back then this was quite annoying. But recently <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> has added quite some API for chains of arrows in categories. So with a bit of refactoring and gluing, this should now be quite doable.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicTopology.SimplicialSet</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicTopology.Nerve</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Kan complexes and quasicategories</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">CategoryTheory.Limits</span> <span class=\"n\">Opposite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Simplicial</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SSet</span>\n\n<span class=\"sd\">/-- A *Kan complex* is a simplicial set `S` if it satisfies the following horn-filling condition:</span>\n<span class=\"sd\">for every `n : ℕ` and `0 ≤ i ≤ n`,</span>\n<span class=\"sd\">every map of simplicial sets `σ₀ : Λ[n, i] → S` can be extended to a map `σ : Δ[n] → S`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">Kan_complex</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">SSet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hornFilling</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)⦄</span> <span class=\"o\">(</span><span class=\"n\">σ₀</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"bp\">Δ</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">σ₀</span> <span class=\"bp\">=</span> <span class=\"n\">hornInclusion</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- A *quasicategory* is a simplicial set `S` if it satisfies the following horn-filling condition:</span>\n<span class=\"sd\">for every `n : ℕ` and `0 &lt; i &lt; n`,</span>\n<span class=\"sd\">every map of simplicial sets `σ₀ : Λ[n, i] → S` can be extended to a map `σ : Δ[n] → S`.</span>\n\n<span class=\"sd\">[Kerodon, 003A] -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">quasicategory</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">SSet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">hornFilling</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)⦄</span> <span class=\"o\">(</span><span class=\"n\">σ₀</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_hn</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Fin.last</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"bp\">Δ</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">σ₀</span> <span class=\"bp\">=</span> <span class=\"n\">hornInclusion</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Every Kan complex is a quasicategory.</span>\n\n<span class=\"sd\">[Kerodon, 003C] -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">SSet</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Kan_complex</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">quasicategory</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">hornFilling</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">σ₀</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Kan_complex.hornFilling</span> <span class=\"n\">σ₀</span>\n\n<span class=\"c1\">-- TODO: move</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fin_two_zero_le_one</span> <span class=\"o\">:</span> <span class=\"n\">ZeroLEOneClass</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">nerve</span>\n\n<span class=\"c1\">-- TODO: move</span>\n<span class=\"sd\">/-- A constructor for `n`-simplices of the nerve of a category,</span>\n<span class=\"sd\">by specifying `n+1` objects and a morphism between each of the `n` pairs of adjecent objects. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">nerve.mk</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mor</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">obj</span> <span class=\"n\">i.castSucc</span> <span class=\"bp\">⟶</span> <span class=\"n\">obj</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">nerve</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- TODO: move</span>\n<span class=\"kd\">def</span> <span class=\"n\">nerve.source</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nerve</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">f.obj</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO: move</span>\n<span class=\"kd\">def</span> <span class=\"n\">nerve.target</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nerve</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">f.obj</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO: move</span>\n<span class=\"kd\">def</span> <span class=\"n\">nerve.arrow</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nerve</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]))</span> <span class=\"o\">:</span> <span class=\"n\">source</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">target</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f.map</span> <span class=\"o\">(</span><span class=\"n\">homOfLE</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">zero_le_one</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO: move</span>\n<span class=\"kn\">open</span> <span class=\"n\">SimplexCategory</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nerve.source_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nerve</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]))</span> <span class=\"o\">:</span>\n    <span class=\"n\">source</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">nerve</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- TODO: move</span>\n<span class=\"kn\">open</span> <span class=\"n\">SimplexCategory</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nerve.target_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nerve</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]))</span> <span class=\"o\">:</span>\n    <span class=\"n\">target</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">nerve</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nerve</span>\n\n<span class=\"sd\">/-- The nerve of a category is a quasicategory.</span>\n\n<span class=\"sd\">[Kerodon, 0032] -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">quasicategory</span> <span class=\"o\">(</span><span class=\"n\">nerve</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hornFilling</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">σ₀</span> <span class=\"n\">h₀</span> <span class=\"n\">hₙ</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">horn</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n      <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">SimplexCategory.Hom.mk</span> <span class=\"o\">(</span><span class=\"n\">OrderHom.const</span> <span class=\"n\">_</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">swap</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">unop_op</span><span class=\"o\">,</span> <span class=\"n\">SimplexCategory.len_mk</span><span class=\"o\">,</span> <span class=\"n\">asOrderHom</span><span class=\"o\">,</span> <span class=\"n\">SimplexCategory.Hom.toOrderHom_mk</span><span class=\"o\">,</span>\n        <span class=\"n\">OrderHom.const_coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.union_singleton</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.univ_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.subset_def</span><span class=\"o\">,</span>\n        <span class=\"n\">Set.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_range</span><span class=\"o\">,</span> <span class=\"n\">Function.const_apply</span><span class=\"o\">,</span> <span class=\"n\">exists_const</span><span class=\"o\">,</span>\n        <span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">]</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">Fin.last</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hₙ.ne'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h₀.trans</span> <span class=\"n\">hₙ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₀.ne</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"bp\">Δ</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">⟶</span> <span class=\"n\">nerve</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n      <span class=\"n\">yonedaEquiv.symm</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">nerve.mk</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">use</span> <span class=\"n\">σ</span>\n    <span class=\"n\">swap</span>\n    <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">σ₀.app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n    <span class=\"n\">swap</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">horn</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">SimplexCategory.Hom.mk</span> <span class=\"o\">⟨</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">j.castSucc</span><span class=\"o\">,</span> <span class=\"n\">j.succ</span><span class=\"o\">],</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">σ₀.app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"n\">e</span>\n    <span class=\"n\">swap</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.monotone_iff_le_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">dsimp</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Matrix.cons_val_succ</span><span class=\"o\">,</span> <span class=\"n\">Matrix.cons_val_fin_one</span><span class=\"o\">,</span> <span class=\"n\">Fin.le_iff_val_le_val</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_succ</span><span class=\"o\">,</span>\n        <span class=\"n\">Fin.forall_fin_one</span><span class=\"o\">,</span> <span class=\"n\">Fin.castSucc_zero</span><span class=\"o\">,</span> <span class=\"n\">Matrix.cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">Fin.coe_castSucc</span><span class=\"o\">,</span>\n        <span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">]</span>\n    <span class=\"n\">swap</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">unop_op</span><span class=\"o\">,</span> <span class=\"n\">SimplexCategory.len_mk</span><span class=\"o\">,</span> <span class=\"n\">asOrderHom</span><span class=\"o\">,</span> <span class=\"n\">SimplexCategory.Hom.toOrderHom_mk</span><span class=\"o\">,</span>\n        <span class=\"n\">OrderHom.const_coe_coe</span><span class=\"o\">,</span> <span class=\"n\">Set.union_singleton</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.univ_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.subset_def</span><span class=\"o\">,</span>\n        <span class=\"n\">Set.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_range</span><span class=\"o\">,</span> <span class=\"n\">Function.const_apply</span><span class=\"o\">,</span> <span class=\"n\">exists_const</span><span class=\"o\">,</span>\n        <span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span> <span class=\"n\">not_or</span><span class=\"o\">,</span> <span class=\"n\">unop_op</span><span class=\"o\">,</span> <span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">Fin.forall_fin_two</span><span class=\"o\">]</span>\n      <span class=\"n\">dsimp</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j.castSucc</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">Fin.last</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n        <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">Fin.last</span><span class=\"o\">,</span> <span class=\"n\">Fin.zero_eta</span><span class=\"o\">,</span> <span class=\"n\">Fin.not_lt_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hₙ</span>\n        <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hₙ.ne'</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h₀.trans</span> <span class=\"n\">hₙ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"n\">Fin.succ_eq_last_succ</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fin.lt_iff_val_lt_val</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_last</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span> <span class=\"n\">hₙ</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fin.castSucc_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Fin.last</span><span class=\"o\">,</span> <span class=\"n\">Fin.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_zero</span><span class=\"o\">]</span>\n          <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">hₙ</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₀.ne</span><span class=\"o\">,</span> <span class=\"n\">Fin.succ_ne_zero</span> <span class=\"n\">j</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"n\">nerve.arrow</span> <span class=\"n\">f</span>\n      <span class=\"c1\">-- let δ := fun (i : Fin 2) ↦ (nerve C).map (SimplexCategory.δ i).op</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">horn</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]))</span> <span class=\"bp\">↦</span>\n        <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">σ₀.naturality</span> <span class=\"o\">(</span><span class=\"n\">SimplexCategory.δ</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">types_comp</span><span class=\"o\">,</span> <span class=\"n\">Function.comp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">φ</span> <span class=\"bp\">≫</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nerve.source_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">eqToHom</span>\n        <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">horn</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">SimplexCategory.δ</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">j.castSucc</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Subtype.ext</span>\n        <span class=\"n\">apply</span> <span class=\"n\">SimplexCategory.Hom.ext'</span>\n        <span class=\"n\">apply</span> <span class=\"n\">OrderHom.ext</span>\n        <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n        <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Fin.forall_fin_one</span><span class=\"o\">]</span>\n        <span class=\"n\">rfl</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nerve.target_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">eqToHom</span>\n        <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">horn</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">SimplexCategory.δ</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">j.succ</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Subtype.ext</span>\n        <span class=\"n\">apply</span> <span class=\"n\">SimplexCategory.Hom.ext'</span>\n        <span class=\"n\">apply</span> <span class=\"n\">OrderHom.ext</span>\n        <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n        <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Fin.forall_fin_one</span><span class=\"o\">]</span>\n        <span class=\"n\">rfl</span>\n    <span class=\"n\">apply</span> <span class=\"n\">NatTrans.ext</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Opposite.rec</span>\n    <span class=\"n\">apply</span> <span class=\"n\">SimplexCategory.rec</span>\n    <span class=\"n\">intro</span> <span class=\"n\">m</span>\n    <span class=\"n\">ext</span> <span class=\"n\">f</span>\n    <span class=\"n\">refine</span> <span class=\"n\">CategoryTheory.Functor.ext</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">SSet</span>\n</code></pre></div>",
        "id": 408956334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1702999514
    },
    {
        "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"488744\">@Jack McKoen</span> who is working on related things right now</p>",
        "id": 408964670,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1703002045
    }
]