[
    {
        "content": "<p>Good evening everyone,<br>\nThis is a relatively simple question, I think.<br>\nSo I have been working on showing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gaussian_complex</span>  <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a.re</span><span class=\"o\">):</span> <span class=\"n\">schwartz_map</span> <span class=\"n\">ℝ</span>   <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">smooth'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"n\">gaussian_smooth_complex</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">decay'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"n\">gaussian_decay</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Now I wish to show the same thing for  <code>lean schwartz_map ℝ^d  ℂ</code>.  Just not quite sure how to proceed since <br>\nLean very much dislikes <code>lean {d:ℕ } {a:ℂ} (ha:0&lt;a.re): schwartz_map ℝ^d   ℂ </code>, thus I was thinking there must be some notation for <code>lean ℝ^d</code> somewhere.</p>",
        "id": 341526049,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678728536
    },
    {
        "content": "<p><code>ℝ^d</code> is usually either <code>fin d -&gt; ℝ</code>, or if you need the euclidean norm structure, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space\">docs#euclidean_space</a></p>",
        "id": 341526361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678728627
    },
    {
        "content": "<p>(note that you can't use <code> `lean some_lean_code` </code> to highlight inline lean code, just use <code> `some_lean_code` </code>)</p>",
        "id": 341526535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678728675
    },
    {
        "content": "<p>Do you mean in the big or small lines of code? :D</p>",
        "id": 341527017,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678728812
    },
    {
        "content": "<p>For the small ones, but lean is set as the default for big ones anyway, so thats not really needed either</p>",
        "id": 341527114,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678728842
    },
    {
        "content": "<p>What's the <code>to_fun</code> that you want for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">R</mi><mi>d</mi></msup></mrow><annotation encoding=\"application/x-tex\">ℝ^d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord amsrm\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span></span></span></span>? Is it the sum of the squares of the components?</p>",
        "id": 341527527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678728956
    },
    {
        "content": "<p>Because if so, I think you'd do better to define this on an arbitrary <code>normed_algebra ℝ A</code> (or weaker) and replace <code>x ^ 2</code> with the norm of <code>x</code> squared.</p>",
        "id": 341528275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678729158
    },
    {
        "content": "<p>So, I am trying to do some work on fourier transform on <code>ℝ ^d</code>. I wanted to started with the multiple-dimensional Gaussian function, but I am not quite sure how to write it since it is not happy with the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.schwartz_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gaussian_complex</span>  <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">a.re</span><span class=\"o\">):</span> <span class=\"n\">schwartz_map</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>   <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">smooth'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"n\">gaussian_smooth_complex</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">decay'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"n\">gaussian_decay</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">real</span>\n</code></pre></div>",
        "id": 341533726,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678729456
    },
    {
        "content": "<p>I guess, the broader, the better :D</p>",
        "id": 341534116,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678729578
    },
    {
        "content": "<p>What do you intend <code>x^2</code> to mean when <code>x</code> is a vector? Because to lean, it means \"square each coefficient\"</p>",
        "id": 341534290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678729641
    },
    {
        "content": "<p>True, yeah, I guess it would be the norm and then squared!</p>",
        "id": 341534478,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678729690
    },
    {
        "content": "<p>Well then you need to write that!</p>",
        "id": 341535021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678729848
    },
    {
        "content": "<p>Yay, great, it worked like that! </p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import data.complex.exponential\nimport analysis.normed_space.exponential\nimport analysis.schwartz_space\nimport tactic\nimport topology.basic\n\n\nopen complex\nopen real\n\nnoncomputable theory\n\nnamespace real\n\ndef gaussian_complex  {d:ℕ } {a:ℂ} (ha:0&lt;a.re): schwartz_map (fin d -&gt; ℝ)   ℂ :=\n  { to_fun := λ x : (fin d -&gt; ℝ), complex.exp (-a * ‖x‖^2),\n    smooth' :=\n    begin\n      sorry,\n    end,\n    decay' :=\n    begin\n      sorry,\n    end}\n\nend real\n</code></pre></div>\n<p>But would it then be incorrect to use<code>(fin d -&gt; ℝ)</code>   ?</p>",
        "id": 341536033,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678730156
    },
    {
        "content": "<p>Yes, the norm on <code>fin d -&gt; ℝ</code> is the inf norm</p>",
        "id": 341536116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730175
    },
    {
        "content": "<p>I would recommend you generalize to <code>schwartz_map A ℂ</code>, and add typeclasses to <code>A</code> as you find that you need them</p>",
        "id": 341536236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730218
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/schwartz_map\">docs#schwartz_map</a> tells you that you need at least <code>[normed_add_comm_group A] [normed_space ℝ A]</code></p>",
        "id": 341536595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730312
    },
    {
        "content": "<p>I don't know what typeclasses are, is there a place I can read about them? :D <br>\nAnd thank you for the help!</p>",
        "id": 341536618,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678730319
    },
    {
        "content": "<p>I don't know the proofs of the sorries, but that might be enough. Do you already have a proof for the 1D case?</p>",
        "id": 341536683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730343
    },
    {
        "content": "<p>I would guess <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> has a relevant section on typeclasses</p>",
        "id": 341536749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678730363
    },
    {
        "content": "<p>Oh, yeah, these sorry's were just for shortening the thing :D I have the proof for 1D so now I will \"just\" adjust them <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 341537791,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678730637
    },
    {
        "content": "<p>You probably want to have an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a> and at some point you will need to assume that you have finite dimensions.</p>",
        "id": 341595492,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678751709
    },
    {
        "content": "<p>It might be worthwhile to prove a composition result for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/schwartz_map\">docs#schwartz_map</a> that is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∘</mo><mi>g</mi><mo>∈</mo><mi mathvariant=\"script\">S</mi></mrow><annotation encoding=\"application/x-tex\">f \\circ g \\in \\mathcal{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.075em;\">S</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi mathvariant=\"script\">S</mi></mrow><annotation encoding=\"application/x-tex\">f \\in \\mathcal{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.075em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is smooth and polynomially bounded (this should be a sufficient condition, but I haven't checked it).</p>",
        "id": 341595625,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678751816
    },
    {
        "content": "<p>The problem is only that we have not very much API for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iterated_fderiv\">docs#iterated_fderiv</a>, so you have to fill in some of the blanks there.</p>",
        "id": 341595700,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678751879
    },
    {
        "content": "<p>(also for Schwartz space question feel free to ping me)</p>",
        "id": 341595822,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1678751976
    },
    {
        "content": "<p>I am precisely working on bounds for the iterated derivative of the product and composition of maps, in <a href=\"https://github.com/leanprover-community/mathlib/tree/SG_norm_iterated_fderiv_comp\">branch#SG_norm_iterated_fderiv_comp</a>. But don't hold your breath, because I have very little Lean time currently.</p>",
        "id": 341636011,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1678777898
    },
    {
        "content": "<p>Prerequisites PR in <a href=\"https://github.com/leanprover-community/mathlib/pull/18592\">#18592</a>.</p>",
        "id": 342144544,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1678907131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590693\">@rtertr (Sonia)</span> are you still working on this / do you plan to PR your work at some point?</p>",
        "id": 361144184,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685041228
    },
    {
        "content": "<p>Hi, yes, I got it to work for the inner space product :D Couldn't do it for the Banach unfortunately! Will submit some time soon, will try to have the Fourier inversion formula as well (but let's see:))</p>",
        "id": 361403168,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1685123974
    }
]