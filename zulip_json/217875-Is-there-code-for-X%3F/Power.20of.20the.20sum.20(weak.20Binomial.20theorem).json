[
    {
        "content": "<p>I have a (long and ugly) proof using Binomial theorem of the following result. It can be useful to show easily some results on CommSemiring. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Sum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_pow'</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405694928,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1701635040
    },
    {
        "content": "<p>Use induction on <code>n</code>?</p>",
        "id": 405695365,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701635466
    },
    {
        "content": "<p>I did. Surely can be done better. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_pow'</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"mi\">0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">pow_succ'</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>  <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">add_mul</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">mul_add</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">mul_add</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">add_add_add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">pow_mul_comm'</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,(</span><span class=\"n\">distrib_three_right</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">Commute.right_comm</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,(</span><span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 405696888,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1701636869
    },
    {
        "content": "<p>With the caps.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_pow'</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"mi\">0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">pow_succ'</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">]</span>\n    <span class=\"n\">use</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>  <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">add_mul</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">mul_add</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">mul_add</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span><span class=\"bp\">@</span><span class=\"n\">add_add_add_comm</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">pow_mul_comm'</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,(</span><span class=\"n\">distrib_three_right</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">Commute.right_comm</span> <span class=\"n\">h</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,(</span><span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 405697287,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1701637220
    },
    {
        "content": "<p>That's better than my induction proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Sum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_pow'</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Nat.choose</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h.add_pow</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">tsub_self</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.choose_self</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">Finset.sum_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Finset.sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_add_cancel</span><span class=\"o\">]</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_pow''</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">Commute</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">hcx</span><span class=\"o\">,</span> <span class=\"n\">hcy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n      <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Commute.eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n        <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_left_comm</span><span class=\"o\">]</span>\n        <span class=\"n\">congr</span> <span class=\"mi\">1</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hcy.eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Commute.add_right</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Commute.pow_right</span> <span class=\"n\">h.symm</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Commute.mul_right</span> <span class=\"n\">hcy</span> <span class=\"o\">(</span><span class=\"n\">Commute.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Commute.add_right</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Commute.pow_self</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Commute.mul_right</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hcx</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Commute.add_right</span> <span class=\"o\">(</span><span class=\"n\">Commute.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Commute.add_right</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Commute.pow_right</span> <span class=\"n\">h.symm</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Commute.mul_right</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hcy</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Commute.add_right</span> <span class=\"n\">h.symm</span> <span class=\"o\">(</span><span class=\"n\">Commute.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_pow'''</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">add_pow''</span> <span class=\"n\">h</span> <span class=\"n\">n</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 405697664,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701637442
    },
    {
        "content": "<p>Xavier's proof, a bit shortened:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_pow'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"mi\">0</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span>\n    <span class=\"n\">use</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"n\">add_add_add_comm</span><span class=\"o\">,</span> <span class=\"n\">distrib_three_right</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">h.right_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 405698299,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1701638018
    },
    {
        "content": "<p>I find the proof by  <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> very interesting to learn how to manipulate sums. Thanks.</p>",
        "id": 405698776,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1701638392
    },
    {
        "content": "<p>Then it was worth writing :)</p>",
        "id": 405699150,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701638661
    }
]