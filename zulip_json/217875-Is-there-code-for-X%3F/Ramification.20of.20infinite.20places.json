[
    {
        "content": "<p>Do we have something close to this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"o\">(</span><span class=\"n\">finrank</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">NumberField</span> <span class=\"o\">(</span><span class=\"n\">InfinitePlace</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_infinitePlace_eq_finrank_mul_of_odd</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">NumberField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsGalois</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Odd</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">InfinitePlace</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">(</span><span class=\"n\">InfinitePlace</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405531854,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701520246
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span></p>",
        "id": 405531871,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701520265
    },
    {
        "content": "<p>I'm confused. What about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(2^{1/3})/\\mathbb{Q})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1/3</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 405534330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701522470
    },
    {
        "content": "<p>Oops I forgot <code>IsGalois k K</code>. Fixed.</p>",
        "id": 405534542,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701522630
    },
    {
        "content": "<p>No, we do not have anything close to this result but it might not be too difficult to prove things in that direction. I’m quite busy this weekend but I’ll have more time to see what can be done during the week.</p>",
        "id": 405564032,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1701548644
    },
    {
        "content": "<p>I have pushed a preliminary version here: <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/FltRegular/NumberTheory/InfinitePlace.lean\">https://github.com/leanprover-community/flt-regular/blob/master/FltRegular/NumberTheory/InfinitePlace.lean</a></p>",
        "id": 405652068,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701603171
    },
    {
        "content": "<p>I think we should replace the current definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ComplexEmbedding.IsRamified</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">σ</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">IsConjGal</span> <span class=\"n\">φ</span> <span class=\"n\">σ</span>\n</code></pre></div>\n<p>by <code>¬IsReal φ ∧ IsReal (φ.comp (algebraMap k K))</code>, which extends to the case of non-Galois <code>K/k</code>. The idea is that <code>algebraMap k K</code> induces a homomorphism from the completion of <code>k</code> w.r.t. the absolute value induced by <code>φ.comp (algebraMap k K)</code> to the completion of <code>K</code> w.r.t. the absolute value induced by <code>φ</code>; the completion is ℝ or ℂ when the embedding is real or complex respectively, and we consider the extension of archimedean local fields <code>ℝ → ℂ</code> as having ramification index 2 (and inertial degree 1). (This is also the factor of 2 (<code>mult</code>) that appears in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NumberField.Units.dirichletUnitTheorem.logEmbedding_component#doc\">docs#NumberField.Units.dirichletUnitTheorem.logEmbedding_component</a> <del>docs#NumberField.mixedEmbedding.convexBodySum;</del> the natural normalized absolute value on ℂ should be the usual one squared, but I don't think we should change it in mathlib ...)</p>",
        "id": 405688560,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1701629211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> Well, I see you didn't wait in the end and wrote the code yourself <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<p>On a quick look, it looks great but I do agree with Junyan that the definition of <code>IsRamified</code> should be changed similarly to what he suggests. The definition of <code>IsRamified</code> for infinite place should be changed also accordingly. I'll have more time to look in details if needed later this week. </p>\n<p>BTW, the normalised absolute value can be obtained using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NumberField.InfinitePlace.mult#doc\">docs#NumberField.InfinitePlace.mult</a> as it is done in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NumberField.InfinitePlace.prod_eq_abs_norm#doc\">docs#NumberField.InfinitePlace.prod_eq_abs_norm</a></p>",
        "id": 405699088,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1701638625
    },
    {
        "content": "<p>Yeah I botched together a first version just so that the sorry can be filled.</p>",
        "id": 405742088,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701663626
    },
    {
        "content": "<p>I fixed the definition. I wonder if we should use <code>¬IsReal</code> or <code>IsComplex</code>, or whether we should actually do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">InfinitePlace.IsUnramified</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">InfinitePlace</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">w.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">mult</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 405754656,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701671333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Ramification.20of.20infinite.20places/near/405754656\">said</a>:</p>\n<blockquote>\n<p>I fixed the definition. I wonder if we should use <code>¬IsReal</code> or <code>IsComplex</code>, or whether we should actually do</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">InfinitePlace.IsUnramified</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">InfinitePlace</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">w.map</span> <span class=\"o\">(</span><span class=\"n\">algebraMap</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">mult</span> <span class=\"n\">w</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, that's probably the best way to define it.</p>",
        "id": 405767289,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1701676936
    }
]