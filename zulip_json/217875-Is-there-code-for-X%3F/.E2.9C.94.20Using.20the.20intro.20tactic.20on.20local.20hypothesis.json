[
    {
        "content": "<p>Hi folks, I've run into a universal quantifier in a local hypothesis like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>If this hypothesis had been the goal, I could have used <code>intro b</code> to turn the goal into <code>∃ a, (g ∘ f) a = b</code>. Using <code>intro b at h</code> to do the same thing to the local hypothesis doesn't seem to work however. Does someone have any pointers for how to make this work?</p>\n<p>(In case I'm not making any sense, this is for the GlimpseOfLean tutorial by Patrick Massot (<a href=\"https://github.com/PatrickMassot/GlimpseOfLean/blob/master/GlimpseOfLean/Exercises/04Exists.lean\">https://github.com/PatrickMassot/GlimpseOfLean/blob/master/GlimpseOfLean/Exercises/04Exists.lean</a> with the example I'm trying to prove starting at line 98)</p>",
        "id": 390344801,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1694448407
    },
    {
        "content": "<p>you can't introduce a <code>b</code>if this is a hypothesis. Instead, you can <em>specialize</em> at some <code>b</code> that already exissts.</p>",
        "id": 390344989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694448473
    },
    {
        "content": "<p>Or in code <code>specialize h b</code></p>",
        "id": 390345449,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694448616
    },
    {
        "content": "<p>Right, I forgot about that one. Thanks!</p>",
        "id": 390345470,
        "sender_full_name": "Rick de Wolf",
        "timestamp": 1694448622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"603023\">Rick de Wolf</span> has marked this topic as resolved.</p>",
        "id": 390345493,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694448630
    },
    {
        "content": "<ul>\n<li>forall in goal: <code>intro</code></li>\n<li>forall in hypothesis: <code>specialize</code></li>\n<li>exists in goal: <code>use</code></li>\n<li>exists in hypothesis: <code>cases</code>/<code>obtain</code></li>\n<li>let in goal: <code>intro</code></li>\n<li>let in hypothesis: <code>extract_let</code></li>\n</ul>",
        "id": 390345762,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694448722
    },
    {
        "content": "<p>Should I add <code>extract_let</code> to the cheatsheet? I wasn't aware of this tactic before.<br>\n<a href=\"https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf\">https://github.com/madvorak/lean4-cheatsheet/blob/main/lean-tactics.pdf</a></p>",
        "id": 390368398,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694457680
    },
    {
        "content": "<p>It's from just a couple months ago -- I'd added it to complete this set. Feel free to add it if you think <code>let</code> expressions are worth mentioning on the cheatsheet.</p>",
        "id": 390369846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694458322
    },
    {
        "content": "<p>Martin, <code>library_search</code> gemmated into <code>exact?</code> and <code>apply?</code>.</p>",
        "id": 390371586,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694459001
    },
    {
        "content": "<p>True! I will replace <code>library_search</code> only by <code>exact?</code> because <code>apply?</code> never happened to help me anyways.</p>",
        "id": 390372500,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694459357
    },
    {
        "content": "<p>Why not both? I regularly find <code>apply?</code> useful (though as with all things it helps more when you are already quite sure the lemma you need exists and would recognize it when you see it)</p>",
        "id": 390381608,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694463434
    },
    {
        "content": "<p>There is also <code>rw?</code> that I find useful.</p>",
        "id": 390382723,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694463902
    },
    {
        "content": "<p>Let's continue the discussion about which tactics should be in the cheatsheet in its dedicated topic:<br>\n<a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet\">https://leanprover.zulipchat.com/#narrow/stream/187764-Lean-for-teaching/topic/Lean4.20cheatsheet</a></p>",
        "id": 390456655,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694501944
    }
]