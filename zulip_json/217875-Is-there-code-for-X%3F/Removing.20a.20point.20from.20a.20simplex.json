[
    {
        "content": "<p>Do we have this somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Euclidean.MongePoint</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span> <span class=\"n\">RealInnerProductSpace</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Affine.Simplex</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddTorsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Get the face of `s` that doesn't include `i` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">faceWithout</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Affine.Simplex</span> <span class=\"n\">ℝ</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Affine.Simplex</span> <span class=\"n\">ℝ</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">points</span> <span class=\"o\">:=</span> <span class=\"n\">s.points</span> <span class=\"bp\">∘</span> <span class=\"n\">Fin.succAbove</span> <span class=\"n\">i</span>\n  <span class=\"n\">Independent</span> <span class=\"o\">:=</span> <span class=\"n\">s.Independent.comp_embedding</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAboveEmb</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span>\n</code></pre></div>",
        "id": 402346037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700091324
    },
    {
        "content": "<p>(relatedly: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8419\">#8419</a> fixes the misnamed <code>Independent</code> field)</p>",
        "id": 402346103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700091363
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , maybe?</p>",
        "id": 402391136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700114325
    },
    {
        "content": "<p>Or <span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> ?</p>",
        "id": 402403543,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1700119863
    },
    {
        "content": "<p>Nope, don't have it. That's the kind of stuff you'd need for simplicial homology but I was more directly interested in Sperner's theorem.</p>",
        "id": 402409137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700121917
    },
    {
        "content": "<p>It seems it is related to <code>Affine.Simplex.face</code>, but with different definitional properties.</p>",
        "id": 402417257,
        "sender_full_name": "Joël Riou",
        "timestamp": 1700125054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Removing.20a.20point.20from.20a.20simplex/near/402403543\">said</a>:</p>\n<blockquote>\n<p>Or <span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> ?</p>\n</blockquote>\n<p>Haven't done it, sorry. I've only worked with abstract simplicial complexes so far.</p>",
        "id": 403006408,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1700397124
    }
]