[
    {
        "content": "<p>It seems that there is no <code>PerfectRing</code> instance for finite fields (after searching docs I only found that currently only perfect closure, perfection and algebra closure are <code>PerfectRing</code>). Should I try to add it into mathlib4?</p>",
        "id": 378420415,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690281193
    },
    {
        "content": "<p>This came up in the stream about the Leidein conference. I proposed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.PerfectClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Finite.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CharP</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n    <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">FiniteField.card</span> <span class=\"n\">K</span> <span class=\"n\">p</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">frobenius</span><span class=\"o\">]</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred.succ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pred_eq_sub_one</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_pred</span> <span class=\"n\">n.ne_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">FiniteField.pow_card</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span>  <span class=\"o\">:</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n    <span class=\"n\">PerfectRing</span> <span class=\"n\">K</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n  <span class=\"n\">PerfectRing.ofSurjective</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"630204\">@D. J. Bernstein</span> you may be interested in this.</p>",
        "id": 378420946,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690281296
    },
    {
        "content": "<p>It's a bit sad that you need to repeat</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>so often...</p>",
        "id": 378423567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690281824
    },
    {
        "content": "<p>I didn't try to optimize the code at all, so it's very possible it can be improved.</p>",
        "id": 378424297,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690281942
    },
    {
        "content": "<p>We could also use <code>[Finite K]</code> (possibly at the cost of <code>have : Fintype K := Fintype.ofFinite K</code> somewhere).</p>",
        "id": 378424644,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690282012
    },
    {
        "content": "<p>After all we only care <em>that</em> <code>K</code> is finite, now <em>how</em>!</p>",
        "id": 378424842,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690282055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20field.20is.20perfec.20ring/near/378424644\">said</a>:</p>\n<blockquote>\n<p>We could also use <code>[Finite K]</code> (possibly at the cost of <code>have : Fintype K := Fintype.ofFinite K</code> somewhere).</p>\n</blockquote>\n<p>Currently the finite field API in mathlib4 uses <code>Fintype K</code> but not <code>Finite K</code>.</p>",
        "id": 378436621,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690284414
    },
    {
        "content": "<p>I know this but I like to take every opportunity to push <code>Finite</code>. Maybe someone reading this might carry out a reactor of this part of the library to favour <code>Finite</code> over <code>Fintype</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 378442898,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690285639
    },
    {
        "content": "<p>That <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PerfectRing#doc\">docs#PerfectRing</a>  instance should be computable, right?</p>",
        "id": 378492908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690294745
    },
    {
        "content": "<p>It's proving surjectivity by defining an explicit inverse, so you should state the stronger result that says the explicit inverse is an inverse</p>",
        "id": 378494151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690294912
    },
    {
        "content": "<p>(thought we might be missing the glue that expresses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FiniteField.card#doc\">docs#FiniteField.card</a> as <code>Fintype.card F = p ^ nat.log p (Fintype.card F)</code>)</p>",
        "id": 378494401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690294931
    },
    {
        "content": "<p>I made the above code shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.PerfectClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Finite.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CharP</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n    <span class=\"n\">Function.Surjective</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">FiniteField.card</span> <span class=\"n\">K</span> <span class=\"n\">p</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">frobenius</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_succ'</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_pred</span> <span class=\"n\">n.ne_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">FiniteField.pow_card</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span>  <span class=\"o\">:</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n    <span class=\"n\">PerfectRing</span> <span class=\"n\">K</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n  <span class=\"n\">PerfectRing.ofSurjective</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378631509,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690331241
    },
    {
        "content": "<p>Here's the computable version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.PerfectClosure</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Finite.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CharP</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n    <span class=\"n\">Function.RightInverse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">Nat.log</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">pred</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">FiniteField.card</span> <span class=\"n\">K</span> <span class=\"n\">p</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">frobenius</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_succ'</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Nat.log_pow</span> <span class=\"n\">hp.one_lt</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_pred</span> <span class=\"n\">n.ne_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">FiniteField.pow_card</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span>  <span class=\"o\">:</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n    <span class=\"n\">PerfectRing</span> <span class=\"n\">K</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CharP.char_is_prime</span> <span class=\"n\">K</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n  <span class=\"o\">{</span> <span class=\"n\">pthRoot'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">Nat.log</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">pred</span><span class=\"o\">)</span>\n    <span class=\"n\">frobenius_pthRoot'</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">pthRoot_frobenius'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">frobenius_inj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">bar</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 378636340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690333024
    },
    {
        "content": "<p>What about adding <code>instance : Fact (Nat.Prime p) := ⟨CharP.char_is_prime K p⟩</code>? Then we can remove three <code>have</code>s and from now on, <code>[Field K] [Fintype K] (p : ℕ) [CharP K p]</code> automatically imply <code>Fact (Nat.Prime p)</code>. Not sure if this will clash with existing type class instances.</p>",
        "id": 378712584,
        "sender_full_name": "Jz Pan",
        "timestamp": 1690361332
    },
    {
        "content": "<p>That instance doesn't work because lean has no way to find <code>K</code></p>",
        "id": 378712663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690361351
    },
    {
        "content": "<p>Adding <code>[Fact (Nat.Prime p)]</code> to the assumptions is the easy way out</p>",
        "id": 378712879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690361395
    },
    {
        "content": "<p>There is a short proof of this in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6182\">#6182</a> (still WIP)</p>",
        "id": 379203066,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690471241
    }
]