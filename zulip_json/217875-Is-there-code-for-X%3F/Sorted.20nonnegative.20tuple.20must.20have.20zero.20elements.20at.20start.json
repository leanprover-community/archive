[
    {
        "content": "<p>Given a sorted (monotone) tuple  (with m elements) of non-negative elements, and we know exactly r  (r \\leq m) are zero, all the r elements at the beginning must be zero.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"sd\">/-- A sorted nonnegative list with m elements and exactly r ≤ m zero elemnts has the first</span>\n<span class=\"sd\">(r) elemnts as zero -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wierd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hrm</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span>  <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nz_cnt</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span>  <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_sorted</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 386124091,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1692462919
    },
    {
        "content": "<p>Ok this got out of hand!! <br>\nI am finally able to prove it but this should not be that hard. Where did I go in the wrong direction??</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">wierd0</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">](</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Fintype.card</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">+</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_subtype_compl</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_cancel_left</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Fintype.card_subtype_le</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">wierd01</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"n\">q</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"bp\">+</span>\n    <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">wierd0</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"o\">}</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">q</span> <span class=\"bp\">↑</span><span class=\"n\">i</span>\n\n<span class=\"c1\">-- set_option pp.explicit true</span>\n<span class=\"sd\">/-- A sorted nonnegative list with m elements and exactly r ≤ m non-zero elemnts has the first</span>\n<span class=\"sd\">(m - r) elemnts as zero -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wierd2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hrm</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span>  <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nz_cnt</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span>  <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_sorted</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hjm</span>\n  <span class=\"k\">have</span> <span class=\"n\">hj</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"o\">(</span> <span class=\"n\">h_nonneg</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hj</span> <span class=\"k\">with</span> <span class=\"n\">hj</span> <span class=\"n\">hj</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">hj.symm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exfalso</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Monotone</span> <span class=\"n\">at</span> <span class=\"n\">h_sorted</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n      <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">+</span>\n          <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"n\">wierd0</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Fintype.card_pos_iff.2</span>\n          <span class=\"n\">refine'</span> <span class=\"n\">Nonempty.intro</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n          <span class=\"n\">refine'</span> <span class=\"o\">⟨</span> <span class=\"o\">⟨</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span> <span class=\"n\">hjm</span> <span class=\"o\">⟩</span>\n        <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">]</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Fintype.card_fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)]</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_eq</span><span class=\"o\">]</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Nonempty.intro</span>\n          <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">⟩</span>\n          <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">⟩</span>\n            <span class=\"k\">have</span> <span class=\"n\">hrq</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">]</span>\n            <span class=\"n\">refine</span> <span class=\"o\">⟨</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">⟩</span>\n            <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"n\">hrq</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">]</span>\n            <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Fin.is_lt</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n            <span class=\"n\">apply</span> <span class=\"n\">Nat.add_lt_of_lt_sub</span> <span class=\"n\">this</span>\n          <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n            <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_sub_of_add_lt</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_cancel</span><span class=\"o\">]</span>\n            <span class=\"n\">apply</span> <span class=\"n\">Fin.is_lt</span>\n            <span class=\"n\">apply</span> <span class=\"n\">y.prop</span>\n          <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span>\n            <span class=\"n\">dsimp</span>\n            <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">add_le_iff_nonpos_right</span><span class=\"o\">,</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span>\n              <span class=\"n\">add_tsub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">Fin.eta</span><span class=\"o\">]</span>\n          <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span>\n            <span class=\"n\">dsimp</span>\n            <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">congr</span>\n              <span class=\"n\">congr</span>\n              <span class=\"n\">congr</span>\n              <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_cancel'</span><span class=\"o\">]</span>\n              <span class=\"n\">rfl</span>\n              <span class=\"n\">exact</span> <span class=\"n\">x.prop</span>\n            <span class=\"n\">done</span>\n        <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt.base</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n        <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h5</span> <span class=\"n\">_</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_le_add</span> <span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">h4</span><span class=\"o\">))</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_subtype_compl</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_fin</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h_nz_cnt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h1</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">q</span> <span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n    <span class=\"k\">have</span> <span class=\"n\">hjq</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hjm</span> <span class=\"n\">hq.left</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hq.2</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hj</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h_sorted</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hjq</span><span class=\"o\">)</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">not_lt.2</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 386139441,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1692474022
    },
    {
        "content": "<p>You nerd-sniped me badly - this is an alternative proof (which can probably be tidied up quite a bit still):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Perm</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Fin</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">List.countp</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">List.ofFn</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.ofFn_eq_map</span><span class=\"o\">,</span> <span class=\"n\">List.countp_map</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_subtype</span><span class=\"o\">,</span> <span class=\"n\">Finset.card</span><span class=\"o\">,</span> <span class=\"n\">Finset.filter_val</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">Multiset.countp_eq_card_filter</span><span class=\"o\">,</span> <span class=\"n\">Fin.univ_def</span><span class=\"o\">,</span> <span class=\"n\">Multiset.coe_countp</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span> <span class=\"k\">with</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"sd\">/-- A sorted nonnegative list with m elements and exactly r ≤ m non-zero elemnts has the first</span>\n<span class=\"sd\">(m - r) elemnts as zero -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wierd2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hrm</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span>  <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nz_cnt</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span>  <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_sorted</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hjm</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">List.ofFn</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.length_ofFn</span><span class=\"o\">,</span> <span class=\"n\">Fin.is_lt</span><span class=\"o\">]⟩</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">l.get</span> <span class=\"n\">j'</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.Sorted</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h_sorted</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_nz_cnt</span> <span class=\"o\">:</span> <span class=\"n\">l.countp</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">]</span>\n    <span class=\"n\">simpa</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.get</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Ne.symm</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h_nonneg</span> <span class=\"n\">j</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">j'</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.get</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">this</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.get_ofFn</span><span class=\"o\">,</span> <span class=\"n\">Fin.castIso_mk</span><span class=\"o\">,</span> <span class=\"n\">Fin.eta</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h_sorted</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Fin.val_fin_le</span><span class=\"o\">]</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hk.le</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_nz_cnt'</span> <span class=\"o\">:</span> <span class=\"n\">List.countp</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_eq_iff_eq_add</span> <span class=\"n\">hrm</span><span class=\"o\">]</span>\n    <span class=\"n\">trans</span> <span class=\"n\">l.length</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h_nz_cnt</span><span class=\"o\">]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">List.length_eq_countp_add_countp</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n    <span class=\"n\">apply</span> <span class=\"n\">List.countp_congr</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.mem_ofFn</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_iff_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"k\">calc</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span>\n    <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Finset.Ici</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">h_nz_cnt'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt_sub_left</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hjm</span>\n    <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.Ici</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">hk</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">Fin.mk_le_mk</span><span class=\"o\">,</span> <span class=\"n\">Fin.val_fin_le</span><span class=\"o\">,</span> <span class=\"n\">List.get_ofFn</span><span class=\"o\">,</span> <span class=\"n\">Fin.castIso_mk</span><span class=\"o\">,</span> <span class=\"n\">Fin.eta</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n      <span class=\"n\">apply</span> <span class=\"n\">this</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hk</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">decide_eq_true_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_subtype</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Finset.card_le_of_subset</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">hk</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 386202636,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1692522574
    },
    {
        "content": "<p>Thanks! I will see if I can push it down further. </p>\n<p>It is the kind of thing that you look at and say surely it cannot be that difficult and it just keeps going on and on ...... and on ...</p>",
        "id": 386204217,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1692523903
    },
    {
        "content": "<p>Yeah this is the nature of formalisation of mathematics. You have to completely revisit your concept of what is straightforward, and an important question is \"how can I make this kind of argument more straightforward to formalise\". Sometimes the answer is more lemmas, sometimes a new tactic, sometimes the refactoring of a definition...</p>",
        "id": 386208405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692527056
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LocallyFinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Perm</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Fin</span>\n\n<span class=\"c1\">-- set_option pp.explicit true</span>\n<span class=\"sd\">/-- A sorted nonnegative list with m elements and exactly r ≤ m non-zero elemnts has the first</span>\n<span class=\"sd\">(m - r) elemnts as zero -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wierd2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span>  <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_nz_cnt</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span> <span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span>  <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_sorted</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h_nz_cnt</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h_nz_cnt</span> <span class=\"o\">:=</span> <span class=\"n\">h_nz_cnt.lt_of_le'</span> <span class=\"o\">(</span><span class=\"n\">h_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h_nz_cnt.trans_le</span> <span class=\"o\">(</span><span class=\"n\">h_sorted</span> <span class=\"n\">hi</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne'</span>\n    <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card_subtype_compl</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_fin</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_left</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">tsub_le_iff_right</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_subtype</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.card_mono</span> <span class=\"bp\">$</span> <span class=\"k\">show</span> <span class=\"n\">Finset.Ici</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_Ici</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">Finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">key</span> <span class=\"n\">hk</span>\n</code></pre></div>",
        "id": 386220739,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692536363
    },
    {
        "content": "<p>I think I found the \"good\" proof</p>",
        "id": 386220753,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692536370
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> <br>\nThat is a lot smaller than what I was able to do. </p>\n<p>So small question: whilst writing your proof. At any point did you think, surely this must be in mathlib?</p>",
        "id": 386230726,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1692543395
    },
    {
        "content": "<p>No, but I will say that this was my second attempt and I had a think in between.</p>",
        "id": 386231040,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692543536
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 386231077,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692543580
    },
    {
        "content": "<p>Mabye my question was phrased in correctly. I mean in your attempts: did you need any subfacts/sublemmas that you thought must be in mathlib somewhere?</p>",
        "id": 386239692,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1692548593
    },
    {
        "content": "<p>This seems like a slightly nicer lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- All the elements `· ≤ a` appear the start of a sorted tuple -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wierd2'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_sorted</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card_subtype_compl</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_fin</span><span class=\"o\">,</span> <span class=\"n\">tsub_le_iff_tsub_le</span><span class=\"o\">,</span> <span class=\"n\">Fintype.card_subtype</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.card_mono</span> <span class=\"bp\">$</span> <span class=\"k\">show</span> <span class=\"n\">Finset.Ici</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Finset.mem_Ici</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Finset.mem_filter.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">Finset.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h.trans_le</span> <span class=\"o\">(</span><span class=\"n\">h_sorted</span> <span class=\"n\">hk</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 386244663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692552989
    },
    {
        "content": "<p>It should be true as an <code>iff</code> too, right?</p>",
        "id": 386244673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692553004
    },
    {
        "content": "<p>Logically yes it should be true both ways. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">wierd6</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_sorted</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Fintype.card</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Small questions?</p>\n<ol>\n<li>How does the show tactic work <code>(Finset.card_mono $ show Finset.Ici j ≤ _ from fun k hk ↦ ?_)</code></li>\n<li>Is the from clause here related to the from I see sometimes with suffices?</li>\n</ol>",
        "id": 386247346,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1692555438
    },
    {
        "content": "<p><code>show (type) from X</code> takes the term X and tries to force it to be the type <code>(type)</code>. They're not separate tactics</p>",
        "id": 386248321,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692556346
    },
    {
        "content": "<p>The proof would probably be clearer with a <code>calc</code> block or <code>transitivity</code> where that <code>show</code> is</p>",
        "id": 386249454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692557286
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> , <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> , Lemma is in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6728\">#6728</a>.</p>",
        "id": 386604313,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1692709631
    },
    {
        "content": "<p>I think we should strive to prove your <code>iff</code> version if we're going to have it in mathlib!</p>",
        "id": 386610987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692711567
    }
]