[
    {
        "content": "<p>Is there a tactic or a clever way to deal with reordering elements in sets that are defined in terms of <code>Set.insert</code> and <code>Set.singleton</code>? Like in the following (Lean4-) example I don't like that I have to apply <code>pair_comm</code> and <code>insert_comm</code> manually.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">{{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">},</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subset.antisymm_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">intro</span> <span class=\"n\">B</span> <span class=\"n\">hB</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pair_comm</span> <span class=\"mi\">2</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">insert_comm</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"n\">tauto</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pair_comm</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">insert_comm</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n    <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>Note that using <code>Finset</code> instead this is much simpler, due to how they are implemented:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">{{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>\n<p>So even lifting the problem to <code>Finset</code> would help in a lot of cases I have in mind.</p>",
        "id": 325265106,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1675284624
    },
    {
        "content": "<p>Does decide not help?</p>",
        "id": 325266718,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675285260
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">{{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">},</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">insert_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">insert_emptyc_eq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 325268072,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675285802
    },
    {
        "content": "<p>Unfortunately, adding an <code>insert_singleton_comm</code> lemma doesn't work.</p>",
        "id": 325268554,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675285979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Equality.20of.20sets/near/325268072\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">({{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">{{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">},</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">insert_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">insert_emptyc_eq</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's cool, thanks!</p>",
        "id": 325268843,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1675286079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> has marked this topic as resolved.</p>",
        "id": 325276162,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675288656
    },
    {
        "content": "<p>Your finset example was easy only because you didn't include <code>A</code> in that example</p>",
        "id": 325278229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675289462
    }
]