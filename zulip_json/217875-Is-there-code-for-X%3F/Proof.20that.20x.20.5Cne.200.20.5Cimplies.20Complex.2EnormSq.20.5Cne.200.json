[
    {
        "content": "<p>Getting back into Lean &amp; Mathlib by working through the latest ed of Axler's Linear Algebra. We are first asked to prove that complex numbers follow the expected laws, which I first did by defining de novo <code>MyComplex</code> but I then wanted to show this in terms of the Mathlib definition of <code>Complex</code>. Almost everything is given except for the existence of an additive inverse, which is trivial, and the existence of a multiplicative inverse, which is less trivial, it seems.</p>\n<p>I got <code>theorem exists_mul_inv: ∀x : ℂ , x≠ 0 → ∃y, x * y = 1</code> down to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>This is obviously doable to prove from the definition, but I wondered if the complex norm is otherwise proven to follow the usual laws, so that I could show this for <code>normSq</code>?</p>",
        "id": 404543534,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701145342
    },
    {
        "content": "<p>Is this what you're looking for?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- `simp` uses the fact that `Complex.normSq` is defined as a `MonoidWithZeroHom`</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Complex.normSq</span> <span class=\"c1\">-- ℂ →*₀ ℝ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Complex.normSq</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">map_eq_zero</span> <span class=\"n\">Complex.normSq</span>\n</code></pre></div>",
        "id": 404549222,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1701149024
    },
    {
        "content": "<p>Ahhhh. Yes, perfect.</p>",
        "id": 404550974,
        "sender_full_name": "Arien Malec",
        "timestamp": 1701150297
    }
]