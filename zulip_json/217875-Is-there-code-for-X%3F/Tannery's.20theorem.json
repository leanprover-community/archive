[
    {
        "content": "<p>Is there code for Tannery's theorem or something like it?</p>\n<p>I'm indexing over an arbitrary type in the sum and taking the limit in the extended positive reals.</p>",
        "id": 403199074,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1700495761
    },
    {
        "content": "<p>I'm working in Lean4</p>",
        "id": 403204103,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1700497451
    },
    {
        "content": "<p>If you are referring to <a href=\"https://en.wikipedia.org/wiki/Tannery%27s_theorem\">this</a>, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.tendsto_integral_of_dominated_convergence#doc\">docs#MeasureTheory.tendsto_integral_of_dominated_convergence</a> that is a generalization</p>",
        "id": 403204369,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700497550
    },
    {
        "content": "<p>I saw that, but I'm struggling to get it in the form I need.</p>",
        "id": 403247125,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1700515152
    },
    {
        "content": "<p>The amount of measure theory I have to wade through here makes it challenging</p>",
        "id": 403247947,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1700515531
    },
    {
        "content": "<p>Something like this, maybe?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"sd\">/-- Auxiliary lemma to translate integrability statements into summability -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">integrable_count_iff</span> <span class=\"o\">{</span><span class=\"bp\">𝓚</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"bp\">𝓚</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SecondCountableTopology</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓚</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Integrable</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Measure.count</span> <span class=\"n\">_</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">borel</span> <span class=\"n\">G</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">BorelSpace</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"bp\">𝓚</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Integrable</span><span class=\"o\">,</span> <span class=\"n\">eq_true_intro</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSpace.Top.measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">aestronglyMeasurable</span><span class=\"o\">,</span>\n    <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">HasFiniteIntegral</span><span class=\"o\">,</span> <span class=\"n\">lintegral_count</span><span class=\"o\">,</span> <span class=\"n\">lt_top_iff_ne_top</span><span class=\"o\">,</span>\n    <span class=\"n\">ENNReal.tsum_coe_ne_top_iff_summable</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">NNReal.summable_coe</span><span class=\"o\">,</span> <span class=\"n\">coe_nnnorm</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- **Tannery's theorem**: countable sums commutes with limits when the norm of the summand is uniformly</span>\n<span class=\"sd\">bounded by a summable function.</span>\n\n<span class=\"sd\">(This is the special case of the Lebesgue dominated convergence</span>\n<span class=\"sd\">theorem for the counting measure on a discrete countable set.) -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_tsum_of_dominated</span> <span class=\"o\">{</span><span class=\"bp\">𝓚</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"bp\">𝓚</span><span class=\"o\">]</span>\n   <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SecondCountableTopology</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">𝓚</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">𝓚</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"bp\">𝓚</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_sum</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">bound</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">h_bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">bound</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">tsum</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- choose measure space structures</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">borel</span> <span class=\"n\">G</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">BorelSpace</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"bp\">𝓚</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"bp\">𝓚</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Measure.count</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">-- set up hypotheses for dominated convergence</span>\n  <span class=\"k\">have</span> <span class=\"n\">bound_int</span> <span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"n\">bound</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">integrable_count_iff</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h_sum.norm</span>\n  <span class=\"k\">have</span> <span class=\"n\">b_int</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"bp\">‖</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">h_sum.of_norm_bounded</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_norm</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_tendsto</span> <span class=\"o\">((</span><span class=\"n\">continuous_norm.tendsto</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"n\">h_bound</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- apply dominated convergence</span>\n  <span class=\"k\">have</span> <span class=\"n\">DC</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto_integral_of_dominated_convergence</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSpace.Top.measurable</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">aestronglyMeasurable</span><span class=\"o\">)</span>\n    <span class=\"n\">bound_int</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"n\">Function.swap</span> <span class=\"n\">h_bound</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- massage integrals back to sums in the result</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">integral_countable'</span> <span class=\"o\">(</span><span class=\"n\">integrable_count_iff.mpr</span> <span class=\"n\">b_int</span><span class=\"o\">),</span>\n    <span class=\"n\">Measure.count_singleton</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.one_toReal</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">DC</span>\n  <span class=\"n\">convert</span> <span class=\"n\">DC</span> <span class=\"n\">using</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral_countable'</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Measure.count_singleton</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integrable_count_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">h_sum.of_norm_bounded</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_norm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">h_bound</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403408550,
        "sender_full_name": "David Loeffler",
        "timestamp": 1700581001
    },
    {
        "content": "<p>That's great, thanks a lot!</p>\n<p>It seems to me like it should be possible to get rid of the countability assumption because summability of the bound implies that <code>a</code> has countable support. Am I wrong?</p>",
        "id": 403420996,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1700584439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455113\">Oskar Goldhahn</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tannery's.20theorem/near/403420996\">said</a>:</p>\n<blockquote>\n<p>That's great, thanks a lot!</p>\n<p>It seems to me like it should be possible to get rid of the countability assumption because summability of the bound implies that <code>a</code> has countable support. Am I wrong?</p>\n</blockquote>\n<p>Sounds like an exercise for the reader <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 403424818,
        "sender_full_name": "David Loeffler",
        "timestamp": 1700585782
    },
    {
        "content": "<p>I'll give it a try.</p>\n<p>Thanks again!</p>",
        "id": 403424918,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1700585818
    },
    {
        "content": "<p>I managed to get rid of the countability as well. It seems to me like countability is also unneeded in some of the adjacent theorems, such as <code>integral_countable'</code>.</p>\n<p>Does it make sense to try to get this added to Mathlib?</p>\n<p>Here's the resulting code, which can surely be shortened (I'm comfortable with proof assistants in general but not used to Lean specifically):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"sd\">/-- Auxiliary lemma to translate integrability statements into summability -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">integrable_count_iff</span> <span class=\"o\">{</span><span class=\"bp\">𝓚</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SecondCountableTopology</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">𝓚</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Integrable</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Measure.count</span> <span class=\"n\">_</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"bp\">‖</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">borel</span> <span class=\"n\">G</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">BorelSpace</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"bp\">𝓚</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Integrable</span><span class=\"o\">,</span> <span class=\"n\">eq_true_intro</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSpace.Top.measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">aestronglyMeasurable</span><span class=\"o\">,</span>\n    <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">HasFiniteIntegral</span><span class=\"o\">,</span> <span class=\"n\">lintegral_count</span><span class=\"o\">,</span> <span class=\"n\">lt_top_iff_ne_top</span><span class=\"o\">,</span>\n    <span class=\"n\">ENNReal.tsum_coe_ne_top_iff_summable</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">NNReal.summable_coe</span><span class=\"o\">,</span> <span class=\"n\">coe_nnnorm</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- **Tannery's theorem**: countable sums commutes with limits when the norm of the summand is uniformly</span>\n<span class=\"sd\">bounded by a summable function.</span>\n\n<span class=\"sd\">(This is the special case of the Lebesgue dominated convergence</span>\n<span class=\"sd\">theorem for the counting measure on a discrete countable set.) -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_tsum_of_dominated</span> <span class=\"o\">{</span><span class=\"bp\">𝓚</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n   <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SecondCountableTopology</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">𝓚</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">𝓚</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"bp\">𝓚</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_sum</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">bound</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">h_bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">bound</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">tsum</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- handle uncountable 𝓚</span>\n  <span class=\"k\">have</span> <span class=\"n\">bound_supp_sub_a_supp</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">bound</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intros</span> <span class=\"n\">bound_eq_zero</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simpa</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">bound_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_bound</span> <span class=\"n\">k</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">count_a_supp</span> <span class=\"o\">:</span> <span class=\"n\">Countable</span> <span class=\"n\">bound.support</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Set.Countable.to_subtype</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Summable.countable_support</span> <span class=\"n\">h_sum</span>\n  <span class=\"k\">let</span> <span class=\"n\">b'</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">bound.support</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"n\">k</span>\n  <span class=\"k\">let</span> <span class=\"n\">bound'</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">bound.support</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">bound</span> <span class=\"n\">k</span>\n  <span class=\"k\">let</span> <span class=\"n\">h_sum'</span><span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"n\">bound'</span>\n  <span class=\"bp\">·</span> <span class=\"k\">match</span> <span class=\"n\">h_sum</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span>\n      <span class=\"n\">exists</span> <span class=\"n\">x</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hasSum_subtype_support</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p</span>\n      <span class=\"k\">have</span> <span class=\"n\">bound_eq</span> <span class=\"o\">:</span> <span class=\"n\">bound'</span> <span class=\"bp\">=</span> <span class=\"n\">bound</span> <span class=\"bp\">∘</span> <span class=\"n\">Subtype.val</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bound_eq</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">p</span>\n    <span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">hab'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">bound.support</span><span class=\"o\">):</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">hab</span> <span class=\"n\">k</span>\n  <span class=\"k\">let</span> <span class=\"n\">h_bound'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">bound.support</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‖</span><span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">bound</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h_bound</span> <span class=\"n\">k</span> <span class=\"n\">n</span>\n  <span class=\"c1\">-- choose measure space structures</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">borel</span> <span class=\"n\">G</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">BorelSpace</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">bound.support</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">MeasureSpace</span> <span class=\"n\">bound.support</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Measure.count</span><span class=\"o\">⟩</span>\n  <span class=\"c1\">-- set up hypotheses for dominated convergence</span>\n  <span class=\"k\">have</span> <span class=\"n\">bound_int</span> <span class=\"o\">:</span> <span class=\"n\">Integrable</span> <span class=\"n\">bound'</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">integrable_count_iff</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h_sum'.norm</span>\n  <span class=\"k\">have</span> <span class=\"n\">b_int</span> <span class=\"o\">:</span> <span class=\"n\">Summable</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"bp\">‖</span><span class=\"n\">b'</span> <span class=\"n\">k</span><span class=\"bp\">‖</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">h_sum'.of_norm_bounded</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">norm_norm</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_tendsto</span> <span class=\"o\">((</span><span class=\"n\">continuous_norm.tendsto</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"n\">h_bound</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- apply dominated convergence</span>\n  <span class=\"k\">have</span> <span class=\"n\">DC</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto_integral_of_dominated_convergence</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">MeasurableSpace.Top.measurable</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">aestronglyMeasurable</span><span class=\"o\">)</span>\n    <span class=\"n\">bound_int</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"n\">Function.swap</span> <span class=\"n\">h_bound'</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"n\">hab'</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- massage integrals back to sums in the result</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">integral_countable'</span> <span class=\"o\">(</span><span class=\"n\">integrable_count_iff.mpr</span> <span class=\"n\">b_int</span><span class=\"o\">),</span>\n    <span class=\"n\">Measure.count_singleton</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.one_toReal</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">DC</span>\n  <span class=\"n\">convert</span> <span class=\"n\">DC</span> <span class=\"n\">using</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">n</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral_countable'</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Measure.count_singleton</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">tsum_subtype_eq_of_support_subset</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span>\n    <span class=\"n\">contrapose</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intros</span> <span class=\"n\">H</span>\n    <span class=\"n\">apply</span> <span class=\"n\">bound_supp_sub_a_supp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integrable_count_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"n\">h_sum'.of_norm_bounded</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_norm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">h_bound'</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_all</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Eq.symm</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsum_subtype_eq_of_support_subset</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span>\n    <span class=\"n\">contrapose</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">intros</span> <span class=\"n\">bound_eq0</span>\n    <span class=\"k\">have</span> <span class=\"n\">tendsto0</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n    <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">ak_const</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">·</span> <span class=\"n\">funext</span> <span class=\"n\">n</span>\n        <span class=\"n\">apply</span> <span class=\"n\">bound_supp_sub_a_supp</span>\n        <span class=\"n\">exact</span> <span class=\"n\">bound_eq0</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ak_const</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds</span>\n    <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">tendsto0</span>\n</code></pre></div>",
        "id": 404124565,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1700930195
    },
    {
        "content": "<p>Sorry, I only just saw this. I think this would be a nice addition to mathlib; but the result is kind of non-optimal, because it only applies when the \"limit\" variable <code>n</code> is varying over the natural numbers. </p>\n<p>I think the result is actually true with all the limits along <code>atTop ℕ</code> replaced by limits along an arbitrary filter. That would be an awesome thing to have in mathlib, but would need a different proof.</p>",
        "id": 407077810,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702221542
    }
]