[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsSquare</span> <span class=\"n\">a</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm stuck on this. It seems like it ought to be easy. Am I missing something?</p>",
        "id": 406192710,
        "sender_full_name": "David Renshaw",
        "timestamp": 1701826234
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsSquare</span> <span class=\"n\">a</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.instDvdInt</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h.symm.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.pow_dvd_pow_iff</span> <span class=\"n\">two_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_pow</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_right_inj'</span> <span class=\"o\">(</span><span class=\"n\">pow_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">sq</span> <span class=\"n\">k</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 406203283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701830384
    },
    {
        "content": "<p>Nice!</p>",
        "id": 406203546,
        "sender_full_name": "David Renshaw",
        "timestamp": 1701830465
    },
    {
        "content": "<p>Surely that first line should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Dvd.intro_left</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 406203575,
        "sender_full_name": "David Renshaw",
        "timestamp": 1701830475
    },
    {
        "content": "<p>I was struggling to find the lemma, thanks</p>",
        "id": 406203614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701830488
    },
    {
        "content": "<p>does <code>exact?</code> not find it for you?</p>",
        "id": 406203641,
        "sender_full_name": "David Renshaw",
        "timestamp": 1701830498
    },
    {
        "content": "<p>I didn't try</p>",
        "id": 406203661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701830504
    },
    {
        "content": "<p><code>Int.pow_dvd_pow_iff two_pos</code> is the big thing I was missing here. I suppose that <code>exact?</code> didn't find it for me because it needed the <code>two_pos</code>.</p>",
        "id": 406203938,
        "sender_full_name": "David Renshaw",
        "timestamp": 1701830590
    },
    {
        "content": "<p>Maybe a more general form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">IsSquare.of_int_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">IsSquare</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">IsSquare</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IsSquare</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Dvd.intro_left</span> <span class=\"n\">_</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sq</span><span class=\"o\">,</span> <span class=\"n\">Int.pow_dvd_pow_iff</span> <span class=\"n\">two_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_mul_mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_right_inj'</span> <span class=\"n\">ha0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 406205488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701831015
    },
    {
        "content": "<p>Not golfed at all</p>",
        "id": 406205500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701831018
    },
    {
        "content": "<p>I can give you a proof with an \"explicit\" witness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Polyrith</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Int.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Int</span> <span class=\"kn\">hiding</span> <span class=\"n\">gcd</span> <span class=\"n\">gcd_dvd_left</span> <span class=\"n\">gcd_dvd_right</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsSquare</span> <span class=\"n\">a</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_dvd_left</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">l</span>  <span class=\"o\">:=</span> <span class=\"n\">gcd_dvd_right</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">gcdB</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"n\">gcdA</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">hd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hk</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_right_cancel₀</span> <span class=\"o\">(</span><span class=\"n\">pow_ne_zero</span> <span class=\"mi\">2</span> <span class=\"n\">hd</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">gcdA</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">gcdB</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Int.gcd_eq_gcd_ab</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">polyrith</span>\n</code></pre></div>",
        "id": 406209483,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701832157
    },
    {
        "content": "<p>My mind went to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=exists_associated_pow_of_mul_eq_pow#doc\">docs#exists_associated_pow_of_mul_eq_pow</a>, but it doesn't apply here</p>",
        "id": 406254083,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701850642
    },
    {
        "content": "<p>Some previous cases of folks getting stuck on basically the same thing: </p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20.60a.5E2.20.E2.88.A3.20b.5E2.20.E2.86.92.20a.20.E2.88.A3.20b.60.20.3F/near/275563324\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/.E2.9C.94.20.60a.5E2.20.E2.88.A3.20b.5E2.20.E2.86.92.20a.20.E2.88.A3.20b.60.20.3F/near/275563324</a></p>\n<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60a.20*.20a.20.E2.88.A3.20b.20*.20b.20.E2.86.92.20a.20.E2.88.A3.20b.60.20on.20the.20integers/near/221755947\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60a.20*.20a.20.E2.88.A3.20b.20*.20b.20.E2.86.92.20a.20.E2.88.A3.20b.60.20on.20the.20integers/near/221755947</a></p>",
        "id": 406286889,
        "sender_full_name": "David Renshaw",
        "timestamp": 1701862642
    },
    {
        "content": "<p>Neither <code>exact?</code>nor <code>rw?</code> are helpful here. Nor is <a href=\"http://moogle.ai\">moogle.ai</a> (at least with the queries I tried).</p>",
        "id": 406287347,
        "sender_full_name": "David Renshaw",
        "timestamp": 1701862814
    },
    {
        "content": "<p>Should we add <code>Int.div_pow</code> with some divisibility assumption?</p>",
        "id": 406308761,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701870516
    },
    {
        "content": "<p>(and <code>Nat.div_pow</code>)</p>",
        "id": 406308810,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701870528
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.pow_div#doc\">docs#Nat.pow_div</a> is something to look out for</p>",
        "id": 406309043,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701870579
    },
    {
        "content": "<p>It's about <code>x ^ m / x ^ n</code>, we need <code>(x / y) ^ n</code>.</p>",
        "id": 406316993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701872737
    },
    {
        "content": "<p>Yes, so you should make clear in the lemma names how your new lemma is different from the old.</p>",
        "id": 406317214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701872802
    },
    {
        "content": "<p>IMHO, <code>Nat.pow_div</code> should be renamed to <code>Nat.pow_sub</code> with swapped LHS and RHS.</p>",
        "id": 406317421,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701872862
    },
    {
        "content": "<p>Compare with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=pow_sub#doc\">docs#pow_sub</a></p>",
        "id": 406317555,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701872900
    },
    {
        "content": "<p>BTW, should we have a typeclass for <code>b ≠ 0 → (a * b) / b = a</code>? It's true for <code>GroupWithZero</code>s but also for <code>Nat</code> and <code>Int</code>.</p>",
        "id": 406318157,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1701873074
    },
    {
        "content": "<p>Semi-related: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8839\">#8839</a></p>",
        "id": 406318504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701873177
    }
]