[
    {
        "content": "<p>There is a theorem <code>le_unbot_iff</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_unbot_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">unbot</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>in Mathlib.Order.WithBot.<br>\nHowever there is no theorem <code>unbot_le_iff</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">unbot_le_iff</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">WithBot.unbot</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">WithBot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is this not implemented yet, or will this not be implemented as there is a workaround?</p>",
        "id": 378380792,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1690273832
    },
    {
        "content": "<p>A good thing to do if you have <code>h</code> is <code>lift b to \\alpha using h</code></p>",
        "id": 378384226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690274605
    },
    {
        "content": "<p>Though I guess that's just as good an argument against the first lemma as it is the second</p>",
        "id": 378384466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690274653
    },
    {
        "content": "<p>But we have the first lemma in mathlib, why not second? Or am I missing a point?</p>",
        "id": 378390045,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1690275724
    },
    {
        "content": "<p>The mathlib3 git history might answer that</p>",
        "id": 378396882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690277027
    },
    {
        "content": "<p>Actually the first theorem was added yesterday, along with <code>untop_le_iff</code>. I don't see a reason for <code>unbot_le_iff</code> and <code>le_untop_iff</code> not to be implemented. May I make a pull request for that?</p>",
        "id": 378399264,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1690277470
    },
    {
        "content": "<p>Sorry, I just added what I needed, and missed the obvious symmetric lemma.</p>",
        "id": 378400212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690277657
    },
    {
        "content": "<p>Then I'll make a pull request of what I need, will that be okay <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ?</p>",
        "id": 378401390,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1690277893
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6124\">#6124</a></p>",
        "id": 378405208,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1690278643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"574112\">Jihoon Hyun</span> has marked this topic as resolved.</p>",
        "id": 378469154,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690290530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> We use <code>untop</code> for <code>ENNReal.toReal</code>, and <code>lift</code>ing a long expression to <code>NNReal</code> is not always convenient. It's easier to rewrite using a lemma and prove <code>\\ne \\top</code>.</p>",
        "id": 378487560,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690293794
    }
]