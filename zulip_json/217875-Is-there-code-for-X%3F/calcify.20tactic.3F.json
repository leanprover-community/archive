[
    {
        "content": "<p>I really like <code>calc</code> proofs, they are pretty, easy to understand and easier to maintain (as you know what step broke when you change something). But they are sometimes a bit tedious to write out.</p>\n<p>Do we have a tactic that works a bit like <code>show_term</code>, but produces a nice sequence of <code>calc</code> steps?<br>\n(I could imagine a tactic that mangles the proof term to right-associate all <code>trans</code> rules, distributes <code>cong</code> into <code>trans</code>, and finally writes out the top-level sequence of <code>trans</code> steps a explicit calc steps.)<br>\nIf not, who would find it useful?</p>",
        "id": 391528678,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694965667
    },
    {
        "content": "<p>What do you mean by \"distributes <code>cong</code> into <code>trans</code>\"?</p>",
        "id": 391529258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694965818
    },
    {
        "content": "<p>something like <code>congr_arg f (Eq.trans h1 h2) = Eq.trans (congr_arg f h1) (congr_arg f h2)</code>.<br>\nOr in prose: A proof that takes two rewriting steps under some expression can be turned into a proof that takes two top-level rewriting steps, each under some expression.</p>",
        "id": 391529515,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694965918
    },
    {
        "content": "<p>Of course, things can become arbitrary complicated when the relation isn’t equality, or when there are dependent motives, I expect… but I could imagine it would work well with rewriting <code>simp</code> or <code>rw</code> calls to more explicit forms.<br>\nVery much anti-golfing, of course :-)</p>",
        "id": 391530175,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694966047
    }
]