[
    {
        "content": "<p>Does Mathlib know to get <code>(Comm)Ring S</code> from <code>CommRing R</code>, <code>(Comm)Semiring S</code> and <code>Algebra R S</code>?<br>\nThis is mathematically quite obvious. Would adding an instance cause any trouble?</p>",
        "id": 381943886,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691173609
    },
    {
        "content": "<p>Yes, I think this is actually a big problem. It's because the new data (e.g., <code>neg</code>) will depend on the algebra structure. So if <code>S</code> is an algebra over two different rings <code>R</code> and <code>R'</code>, then it will have two non-defeq <code>neg</code> functions. Even if you avoid that with <code>Classical.choice</code> or some such, you still have the problem that when <code>S</code> is <em>already</em> a ring, you have two <code>neg</code>s (the one from the algebra structure and the fact that it is a semiring, and the one it is already endowed with).</p>",
        "id": 381945371,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691173938
    },
    {
        "content": "<p>You could add it as a <code>def</code> to use locally in proofs though.</p>",
        "id": 381945702,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691174015
    },
    {
        "content": "<p>OK. For me it won't be a problem though, I'll do as in the classic litterature and stick to rings all along, the slight added generality has never been of any use.</p>",
        "id": 381963013,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691178683
    },
    {
        "content": "<p>If I wanted to allow this generality, I would need to extend <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingQuot#doc\">docs#RingQuot</a> to semirings, which should not be a problem either, unless a semiring-quotient of a ring by an equivalence relation differs from its ring-quotient (does it?).</p>",
        "id": 381963989,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691179028
    },
    {
        "content": "<p>This exists and it's how we build the ring instance on TensorAlgebra</p>",
        "id": 381977831,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691183787
    },
    {
        "content": "<p>It's something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.semiringToRing#doc\">docs#Algebra.semiringToRing</a></p>",
        "id": 381977875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691183807
    },
    {
        "content": "<p>Thank you! Then it was probably a mistake of  mine that triggered the problem.<br>\nTwo additional questions regarding instances. Imagine I have some relation <code>r</code> on a <code>CommSemiring R</code> and I define a new type <code>A</code>by  <code>def A := RingQuot r</code> and I want Lean to know that <code>A</code> is a <code>CommSemiring</code>.</p>\n<ul>\n<li>\n<p>There is an instance<code>RingQuot.instSemiring</code>, but <code>example : Semiring A := inferInstance</code> does not work, unless I do <code>dsimp [A]</code>. Is this expected?</p>\n</li>\n<li>\n<p>Should I register all instances (<code>CommSemiring</code>â€¦) explicitly, just the one which are the most general (hence <code>CommSemiring</code>but not <code>Semiring</code>), or just the ones that I will specifically use?</p>\n</li>\n</ul>",
        "id": 382045668,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691217056
    },
    {
        "content": "<p>Another option would be to make your A an <code>abbrev</code></p>",
        "id": 382072326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691225606
    },
    {
        "content": "<p>Or at least, do that until you have everything working, and copy across all the instances later</p>",
        "id": 382072624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691225662
    },
    {
        "content": "<p>Just to give a warning about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.semiringToRing#doc\">docs#Algebra.semiringToRing</a>; I think I mispoke, and it's only used to construct the ring instance on the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FreeAlgebra#doc\">docs#FreeAlgebra</a>; generally it should be a last resort  when there is genuinely no reasonable way to inherit a ring structure</p>",
        "id": 382093815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691230212
    }
]