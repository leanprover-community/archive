[
    {
        "content": "<p>Seems trivial, but don't know what tactic to show it (lean4)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">AorB</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">AorB</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">AorB</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">AorB.A</span> <span class=\"bp\">=</span> <span class=\"n\">AorB.A</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">AorB.A</span> <span class=\"bp\">≠</span> <span class=\"n\">AorB.B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 391868586,
        "sender_full_name": "Ben",
        "timestamp": 1695115581
    },
    {
        "content": "<p>Something that should work in place of that <code>sorry</code> is <code>by intro h; cases h</code></p>",
        "id": 391869445,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695115832
    },
    {
        "content": "<p>With <code>import Mathlib.Tactic</code> you can do <code>example : AorB.A ≠ AorB.B := by rintro ⟨⟩</code></p>",
        "id": 391869534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695115861
    },
    {
        "content": "<p>There's also <code>fun h =&gt; nomatch h</code> I believe</p>",
        "id": 391869637,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695115893
    },
    {
        "content": "<p><del>(with <code>import Std.Tactic.NoMatch</code>)</del>(this works in core)</p>",
        "id": 391869692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695115908
    },
    {
        "content": "<p>These are all making use of a definition that <code>inductive</code> creates for you. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">AorB.A</span> <span class=\"bp\">≠</span> <span class=\"n\">AorB.B</span> <span class=\"o\">:=</span> <span class=\"n\">AorB.noConfusion</span>\n</code></pre></div>\n<p>It's rare to see it directly used.</p>",
        "id": 391870320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695116140
    },
    {
        "content": "<p>Ah awesome, I saw noConfusion in Nat but couldn't figure out where it came from. So it's auto generated like <code>inj</code> on functions</p>",
        "id": 391871652,
        "sender_full_name": "Ben",
        "timestamp": 1695116455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 391871663,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695116458
    },
    {
        "content": "<p>If you import mathlib and write <code>whatsnew in</code> above a definition you'll see everything which gets auto-generated by it.</p>",
        "id": 391872539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695116666
    },
    {
        "content": "<p>Lean 3 but still a good read to understand noConfusion: <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a></p>",
        "id": 391877078,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695117903
    }
]