[
    {
        "content": "<p><code>set_theory.cardinal</code> seems to be about the cardinality of a <code>Type</code>, but is there something for the cardinality of a (sub)<code>set</code>? I guess I could make a new type that represents the set (first field being the element and the second being a proof that it is in the <code>set</code>), but I feel like there should be a more ergonomic way to do this.</p>",
        "id": 370925784,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1688072966
    },
    {
        "content": "<p>The construction you describe is actually quite common, so you can usually just use a set where a type is expected and it should work. But under the hood the definition is precisely what you describe!</p>",
        "id": 370926750,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688073180
    },
    {
        "content": "<p>Do you need cardinality of a finite set, or do you really want to use the full-blown cardinal numbers?</p>",
        "id": 370926972,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688073210
    },
    {
        "content": "<p>(keyword for the first concept: there is a <em>coercion</em> function that Lean will insert when you use a set where a type is expected, and under the hood it uses the <code>subtype</code> structure, terms of which are pairs like you described)</p>",
        "id": 370928533,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688073679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Cardinality.20of.20a.20set/near/370926750\">said</a>:</p>\n<blockquote>\n<p>The construction you describe is actually quite common, so you can usually just use a set where a type is expected and it should work. But under the hood the definition is precisely what you describe!</p>\n</blockquote>\n<p>That worked, thanks! I do think I need the full cardinal numbers (with the Aleph numbers and all that) since I might be working with infinite sets.</p>",
        "id": 370943762,
        "sender_full_name": "Ricardo Prado Cunha",
        "timestamp": 1688079699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620085\">Ricardo Prado Cunha</span> has marked this topic as resolved.</p>",
        "id": 370949575,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688082489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Cardinality.20of.20a.20set/near/370928533\">said</a>:</p>\n<blockquote>\n<p>(keyword for the first concept: there is a <em>coercion</em> function that Lean will insert when you use a set where a function is expected, and under the hood it uses the <code>subtype</code> structure, terms of which are pairs like you described)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> can you clarify: do you mean coercion for using a set where a <strong>type</strong> is expected.</p>",
        "id": 370976339,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1688093063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> Yes of course, I fixed it.</p>",
        "id": 371033522,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688110887
    }
]