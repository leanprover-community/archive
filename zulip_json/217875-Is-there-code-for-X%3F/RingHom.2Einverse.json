[
    {
        "content": "<p>Is there a reason for which the following definition seems to be absent from mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RingHom.inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Function.RightInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inverse</span> <span class=\"n\">g</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inverse</span> <span class=\"n\">g</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 376576306,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689755854
    },
    {
        "content": "<p>We tend to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingEquiv#doc\">docs#RingEquiv</a>, but it's possible that this literal construction is missing (I am sure we have something really really close).</p>",
        "id": 376578816,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689756341
    },
    {
        "content": "<p>I don't understand the error message <code>compiler IR check failed at 'RingHom.inverse'._rarg', error: unknown declaration 'RingEquiv.ofBijective'</code> in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RingHom.inverse'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">](</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n    <span class=\"n\">RingEquiv.toRingHom</span> <span class=\"o\">(</span><span class=\"n\">RingEquiv.ofBijective</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 376595359,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689759652
    },
    {
        "content": "<p>(For comparison, there are  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv#doc\">docs#MulEquiv</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulHom.inverse#doc\">docs#MulHom.inverse</a>, as well as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.inverse#doc\">docs#MonoidHom.inverse</a>.)</p>",
        "id": 376596206,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689759847
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Equiv</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">RingHom.inverse'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">](</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n    <span class=\"n\">RingEquiv.toRingHom</span> <span class=\"o\">(</span><span class=\"n\">RingEquiv.ofBijective</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>works</p>",
        "id": 376596452,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689759908
    },
    {
        "content": "<p>Thanks! I was just writing that I appreciated that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.inverse#doc\">docs#MonoidHom.inverse</a> didn't have to be tagged with <code>noncomputable</code>…</p>",
        "id": 376596666,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689759954
    },
    {
        "content": "<p>I think <code>RingHom.inverse</code> is a fine definition and we should add it</p>",
        "id": 376596776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689759968
    },
    {
        "content": "<p>Do you understand the error message?</p>",
        "id": 376596849,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689759985
    },
    {
        "content": "<p>If we have for other structures I don't see any reason to not having it also for <code>RingEquiv</code>.</p>",
        "id": 376596855,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689759987
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingEquiv.ofBijective#doc\">docs#RingEquiv.ofBijective</a> is <code>noncomputable</code>, so everything that depends on it should also be tagged <code>noncomputable</code>? But I am not sure.</p>",
        "id": 376597166,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689760059
    },
    {
        "content": "<p>Note we also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NonUnitalAlgHom.inverse#doc\">docs#NonUnitalAlgHom.inverse</a></p>",
        "id": 376597332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689760095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingHom.2Einverse/near/376596849\">said</a>:</p>\n<blockquote>\n<p>Do you understand the error message?</p>\n</blockquote>\n<p>What error message?</p>",
        "id": 376597382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689760106
    },
    {
        "content": "<p>Indeed <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.inverse#doc\">docs#MonoidHom.inverse</a> is done by hand.</p>",
        "id": 376597436,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689760118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingHom.2Einverse/near/376596855\">said</a>:</p>\n<blockquote>\n<p>If we have for other structures I don't see any reason to not having it also for <code>RingEquiv</code>.</p>\n</blockquote>\n<p>I think it's somewhat less compelling for the equivs; you can always build it yourself from <code>RingEquiv.ofRingHom</code> and <code>RingHom.inverse</code></p>",
        "id": 376597795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689760198
    },
    {
        "content": "<p>I think it should be called <code>RingEquiv.ofRingHom'</code> or something if we do have it; <code>RingEquiv.inverse</code> would be confusing</p>",
        "id": 376597978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689760233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> I think that the difference is in between having <code>h : Function.Bijective f</code> and <code> (h₁ : Function.LeftInverse g ↑f) (h₂ : Function.RightInverse g ↑f)</code>. In the first case you have a bijective function and you cannot produce (in a <code>computable</code> way) an inverse (I believe). In the second case you have the inverse and you can compute with it.</p>",
        "id": 376598748,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689760366
    },
    {
        "content": "<p>The point is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Bijective#doc\">docs#Function.Bijective</a> means injective and surjective, there is no inverse bundled in the definition.</p>",
        "id": 376599128,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689760438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingHom.2Einverse/near/376597382\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingHom.2Einverse/near/376596849\">said</a>:</p>\n<blockquote>\n<p>Do you understand the error message?</p>\n</blockquote>\n<p>What error message?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingHom.2Einverse/near/376595359\">said</a>:</p>\n<blockquote>\n<p>I don't understand the error message <code>compiler IR check failed at 'RingHom.inverse'._rarg', error: unknown declaration 'RingEquiv.ofBijective'</code> in </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RingHom.inverse'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">](</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Function.Bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n    <span class=\"n\">RingEquiv.toRingHom</span> <span class=\"o\">(</span><span class=\"n\">RingEquiv.ofBijective</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 376602840,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1689761152
    },
    {
        "content": "<p>I got a similar error the other day, which was also fixed by adding <code>noncomputable</code> (and I was also very confused with the error message).</p>",
        "id": 376608418,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1689762208
    },
    {
        "content": "<p>Yes, that error just means \"add <code>noncomputable</code>\", but in this case the better solution is to make it computable since otherwise the def is mostly pointless</p>",
        "id": 376609229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689762377
    },
    {
        "content": "<p>Right, I agree with making this definition computable in this case, but would it be possible to change the error message in general?</p>",
        "id": 376609531,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1689762447
    },
    {
        "content": "<p>I made a short PR : <a href=\"https://github.com/leanprover-community/mathlib4/pull/5997\">#5997</a></p>",
        "id": 376612970,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1689763081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>, you should request that in a different thread in #lean4, with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 376619252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689764359
    },
    {
        "content": "<p>I was very confused why the inverse of a computable bijection might not be computable but Mario explained the issue to me in 2019 and I wrote a <a href=\"https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/\">blog post</a> about it.</p>",
        "id": 376638651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689768225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"406490\">María Inés de Frutos Fernández</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/RingHom.2Einverse/near/376609531\">said</a>:</p>\n<blockquote>\n<p>Right, I agree with making this definition computable in this case, but would it be possible to change the error message in general?</p>\n</blockquote>\n<p>I think this error message is not really intentional, and really a result of the work on the new compiler (which I'm not sure the status of right now), I think it will go away eventually in the future and be replaced by something more understandable when the new compler is done.</p>",
        "id": 376640840,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689768603
    }
]