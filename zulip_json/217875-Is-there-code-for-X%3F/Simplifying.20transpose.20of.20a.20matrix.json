[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Can you help with a matrix simp which your PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14992\">#14992</a> seems to have broken?  I am comparing <a href=\"https://github.com/leanprover-community/mathlib/commit/b06e32c2ee11bcdc5930b08f295b92dce3e902e5\">this commit</a> (after) with <a href=\"https://github.com/leanprover-community/mathlib/commit/834488ee38ffbf4ad304a2df091cc66122e1bf69\">this commit</a> (before) since there are olean caches available for both of them. There are 7 commits between them and only <a href=\"https://github.com/leanprover-community/mathlib/pull/14992\">#14992</a> relates to matrices.</p>\n<p>Here is a code snippet which breaks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⋆`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_star.star</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.vec_mul</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">⋆</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]])</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.vec_head</span><span class=\"o\">,</span> <span class=\"n\">matrix.vec_tail</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The point seems to be that the simp-lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.cons_vec_mul\">docs#matrix.cons_vec_mul</a> changed statement in <a href=\"https://github.com/leanprover-community/mathlib/pull/14992\">#14992</a> and the new, more specific statement only applies to matrices of the form <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.of\">docs#matrix.of</a> -- but <code>⋆ ![![c, a], ![d, a]]</code> is not of this form.</p>",
        "id": 365996801,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1686691824
    },
    {
        "content": "<p>The <code>!![c, a; d, a]</code> notation is not available at the time of these commits, but if you jump to <a href=\"http://83092fb4622a606815d2c378af1a448566125bcb\">the commit</a> a few days later where that notation is defined (<a href=\"https://github.com/leanprover-community/mathlib/pull/14991\">#14991</a>), the following variant also breaks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.vec_mul</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.vec_head</span><span class=\"o\">,</span> <span class=\"n\">matrix.vec_tail</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 365997230,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1686691963
    },
    {
        "content": "<p>Can you squeeze the simp on the commit that works?</p>",
        "id": 365998336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686692393
    },
    {
        "content": "<p>I need to wait for my laptop to cool down, but then will take a look</p>",
        "id": 365998498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686692442
    },
    {
        "content": "<p>Note that in the brief period where <code>!![]</code> notation didn't exist, the intended spelling was <code>of ![![]]</code></p>",
        "id": 365998955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686692626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simplifying.20transpose.20of.20a.20matrix/near/365998336\">said</a>:</p>\n<blockquote>\n<p>Can you squeeze the simp on the commit that works?</p>\n</blockquote>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">matrix.vec_head</span><span class=\"o\">,</span> <span class=\"n\">matrix.vec_tail</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_vec_mul</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_zero_eq_one</span><span class=\"o\">,</span> <span class=\"n\">matrix.empty_vec_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">pi.add_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">matrix.star_apply</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">matrix.cons_val_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 366000656,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1686693274
    },
    {
        "content": "<p>Also, on matrices I think <code>ᴴ</code> is prefered to <code>star</code> as the former works on rectangular matrices too</p>",
        "id": 366000699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686693293
    },
    {
        "content": "<p>This proves it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.vec_mul</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">ᴴ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.vec_mul_conj_transpose</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 366000751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686693328
    },
    {
        "content": "<p>I see.  Should <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.vec_mul_conj_transpose\">docs#matrix.vec_mul_conj_transpose</a> be a simp-lemma then?</p>",
        "id": 366000976,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1686693407
    },
    {
        "content": "<p>It's not obvious to me that we should necessarily expect <code>simp</code> to behave well on concrete matrices</p>",
        "id": 366001256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686693507
    },
    {
        "content": "<p>The missing pieces in comparison to the original proof are the lemmas <code>transpose_of</code> and <code>conj_transpose_of</code>, which we should probably have, but don't obvious make sense as simp lemmas</p>",
        "id": 366001432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686693597
    },
    {
        "content": "<p>Here's another trivial lemma that simp can't prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 366001881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686693765
    },
    {
        "content": "<p>Back to your original problem: my opinion is that we should be writing a tactic to generate the following proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.reflection</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.vec_mul</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">ᴴ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_mul</span><span class=\"bp\">ᵣ</span><span class=\"n\">_eq</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 366002416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686693957
    },
    {
        "content": "<p>I had a mathlib3 PR that did this (though only for <code>matrix.mul</code> while I waited for feedback), but it drowned in the porting tide</p>",
        "id": 366002586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686694014
    },
    {
        "content": "<p>The <code>matrix.vec_mulᵣ_eq</code> lemmas made it to mathlib though</p>",
        "id": 366002632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686694030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simplifying.20transpose.20of.20a.20matrix/near/366001256\">said</a>:</p>\n<blockquote>\n<p>It's not obvious to me that we should necessarily expect <code>simp</code> to behave well on concrete matrices</p>\n</blockquote>\n<blockquote>\n<p>Here's another trivial lemma that simp can't prove:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I have generally expected <code>simp</code> to be able to behave well on <em>element evaluations</em> of concrete matrices.  In your example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 366002850,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1686694112
    },
    {
        "content": "<p>If we want that to work I think we want a lemma of the form <code>matrix.vec_mul (cons x xs) A i = x * A 0 i + matrix.vec_mul xs (A.submatrix fin.succ id)</code></p>",
        "id": 366003416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686694312
    },
    {
        "content": "<p><del>In fact, I think such a lemma is defeq to the current <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.cons_vec_mul\">docs#matrix.cons_vec_mul</a></del></p>",
        "id": 366003948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686694504
    },
    {
        "content": "<p>Here's the solution that I think we want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">cons_vec_mul_apply</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">o'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"n\">o'</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">o'</span><span class=\"o\">):</span>\n  <span class=\"n\">vec_mul</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"mi\">0</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">vec_mul</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">B.submatrix</span> <span class=\"n\">fin.succ</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">cons_vec_mul</span> <span class=\"n\">x</span> <span class=\"n\">v</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.vec_mul</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">ᴴ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 366004603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686694757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simplifying.20transpose.20of.20a.20matrix/near/366002850\">said</a>:</p>\n<blockquote>\n<p>I have generally expected <code>simp</code> to be able to behave well on <em>element evaluations</em> of concrete matrices.  In your example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>works.</p>\n</blockquote>\n<p>Note that we haven't worked out how to make that work in Lean 4, or at least haven't implemented it in mathlib4 (<code>test/matrix.lean</code> in mathlib4 thus has the relevant tests commented out).</p>",
        "id": 366013661,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1686698763
    },
    {
        "content": "<p>I would guess it's easier in lean 4 as we can match against <code>ofNat (succ n)</code> instead of needing to deal with bit0</p>",
        "id": 366014437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686699231
    },
    {
        "content": "<p>The tests in question are <a href=\"https://github.com/leanprover-community/mathlib4/blob/0c4c62b4124314da00569ad4d2e9a411666ed355/test/matrix.lean#L102-L137\">here</a>, cc <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 367746537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687207020
    },
    {
        "content": "<p>(nevermind)</p>",
        "id": 367749572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687208174
    },
    {
        "content": "<p>My attempt at this was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">vecCons_ofNat_succ</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Matrix.vecCons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but this doesn't behave usefully</p>",
        "id": 367750545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687208635
    },
    {
        "content": "<p>Hmm, actually my test was bad.Maybe it's ok...</p>",
        "id": 367750754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687208732
    }
]