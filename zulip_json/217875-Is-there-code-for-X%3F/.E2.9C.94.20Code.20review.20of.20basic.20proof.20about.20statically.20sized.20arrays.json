[
    {
        "content": "<p>Hi, I wasn't sure if this was the appropriate place for this but this at least seemed more suitable than the other Streams.</p>\n<hr>\n<p>I've made a subtype of <code>Array</code> that has a fixed size and have defined an <code>append</code> operation on it. Does this look like the idiomatic way of doing it? I was particularly wondering if there's a more concise way to bring <code>xs_prop</code> and <code>ys_prop</code> into scope without the nested pattern match:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- An Array with n elements</span>\n<span class=\"kd\">def</span> <span class=\"n\">MyArray</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">arr.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">MyArray</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">MyArray</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MyArray</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">xs_val</span><span class=\"o\">,</span> <span class=\"n\">xs_prop</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">ys</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">ys_val</span><span class=\"o\">,</span> <span class=\"n\">ys_prop</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">⟨</span> <span class=\"n\">xs_val</span> <span class=\"bp\">++</span> <span class=\"n\">ys_val</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.size_append</span><span class=\"o\">]</span> <span class=\"c1\">-- (xs : Array α) (ys : Array α) : (xs ++ ys).size = xs.size = ys.size</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">xs_prop</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ys_prop</span><span class=\"o\">]</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 403052755,
        "sender_full_name": "Aiken Cairncross",
        "timestamp": 1700428361
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.val#doc\">docs#Subtype.val</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype.property#doc\">docs#Subtype.property</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Array.size_append</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">xs.size</span> <span class=\"bp\">+</span> <span class=\"n\">ys.size</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- An Array with n elements</span>\n<span class=\"kd\">def</span> <span class=\"n\">MyArray</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">arr.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">MyArray</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">MyArray</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MyArray</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span> <span class=\"n\">xs.val</span> <span class=\"bp\">++</span> <span class=\"n\">ys.val</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Array.size_append</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">xs.property</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ys.property</span><span class=\"o\">]</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 403054655,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1700430137
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 403060718,
        "sender_full_name": "Aiken Cairncross",
        "timestamp": 1700435564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"665938\">Aiken Cairncross</span> has marked this topic as resolved.</p>",
        "id": 403060724,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700435569
    },
    {
        "content": "<p>You can also combine all the <code>rw</code>s into a single <code>rw [X, Y, Z]</code>.</p>",
        "id": 403064865,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700439055
    }
]