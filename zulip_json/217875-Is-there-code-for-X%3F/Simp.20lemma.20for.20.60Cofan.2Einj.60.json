[
    {
        "content": "<p>Given <code>(C : Type u) [Category.{v, u} C] (ι : Type w) (f : ι → C) (t : Cofan f) (i : ι)</code>, neither me nor <code>simp</code> can find a <code>simp</code> lemma for <code>Cofan.inj t i = t.ι.app ⟨i⟩</code>. Do you have objections to adding this (and the dual of course)? I find myself rewriting this manually quite often, because the general (co)limit machinery only applies for the latter version.</p>",
        "id": 402205370,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700046247
    },
    {
        "content": "<p>We certainly do not want this as a simp lemma. We may experiment making the definition of <code>Cofan.inj</code> an abbreviation instead of a <code>def</code>: if this does not break too many things, this may be ok. Otherwise, the right way would be to develop more the suitable incarnation of the (co)limits API to the special case of (co)products.</p>",
        "id": 402267913,
        "sender_full_name": "Joël Riou",
        "timestamp": 1700061830
    },
    {
        "content": "<p>If anything, there should be a simp lemma going the other way!</p>",
        "id": 402273088,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700063215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simp.20lemma.20for.20.60Cofan.2Einj.60/near/402267913\">said</a>:</p>\n<blockquote>\n<p>We certainly do not want this as a simp lemma. We may experiment making the definition of <code>Cofan.inj</code> an abbreviation instead of a <code>def</code>: if this does not break too many things, this may be ok. Otherwise, the right way would be to develop more the suitable incarnation of the (co)limits API to the special case of (co)products.</p>\n</blockquote>\n<p>May I ask why we don't want this to be a simp lemma?</p>",
        "id": 402295092,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700069641
    },
    {
        "content": "<p>As Joel said, the whole point of introducing <code>Cofan</code> as a def is to build an API around it which specializes the API for cocones in this particular case. If you introduce the simp lemma you suggest, that means that whenever you use <code>(d)simp</code> in a proof, that will escape the API that you build around <code>Cofan</code> and <code>Cofan.inj</code>, which is counterproductive!</p>",
        "id": 402295584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700069788
    },
    {
        "content": "<p>Can you give some examples where you need to do such a rewrite? It might be indicating that some API around cofans are missing.</p>",
        "id": 402299693,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1700071338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simp.20lemma.20for.20.60Cofan.2Einj.60/near/402295584\">said</a>:</p>\n<blockquote>\n<p>As Joel said, the whole point of introducing <code>Cofan</code> as a def is to build an API around it which specializes the API for cocones in this particular case. If you introduce the simp lemma you suggest, that means that whenever you use <code>(d)simp</code> in a proof, that will escape the API that you build around <code>Cofan</code> and <code>Cofan.inj</code>, which is counterproductive!</p>\n</blockquote>\n<p>I guess this effect is exactly what I intended, since I felt like the general API around <code>Cocone</code> is more practical. But if extending the API around <code>Cofan</code> is the goal, then I understand why a <code>simp</code> lemma would be counterproductive.</p>",
        "id": 402300948,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700071767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simp.20lemma.20for.20.60Cofan.2Einj.60/near/402299693\">said</a>:</p>\n<blockquote>\n<p>Can you give some examples where you need to do such a rewrite? It might be indicating that some API around cofans are missing.</p>\n</blockquote>\n<p>Some examples (intermediate helper equalities that I used to show some inclusions in coproducts are monomorphisms):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span> <span class=\"n\">Functor</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Cofan</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsColimit</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Cofan.inj</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">Sigma.ι</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">colimit.isoColimitCocone</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"n\">t.ι.app</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">Sigma.ι</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">colimit.isoColimitCocone</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Discrete.functor_obj</span><span class=\"o\">,</span> <span class=\"n\">const_obj_obj</span><span class=\"o\">,</span> <span class=\"n\">colimit.isoColimitCocone_ι_hom</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">})</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ColimitCocone</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">F.mapCocone</span> <span class=\"n\">t.cocone</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ι.app</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">Cofan.inj</span> <span class=\"n\">t.cocone</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">F.mapCocone</span> <span class=\"n\">t.cocone</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ι.app</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">t.cocone.ι.app</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Functor.mapCocone_ι_app</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Dropping the <code>show</code> lines do not work, <code>simp</code> does not make any significant progress then.</p>",
        "id": 402303038,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700072539
    },
    {
        "content": "<p>both can be proved with <code>simp ; rfl</code></p>",
        "id": 402304900,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700073269
    },
    {
        "content": "<p>or just <code>aesop_cat</code> for that matter.</p>",
        "id": 402304975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700073306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simp.20lemma.20for.20.60Cofan.2Einj.60/near/402304900\">said</a>:</p>\n<blockquote>\n<p>both can be proved with <code>simp ; rfl</code></p>\n</blockquote>\n<p>Sure, thats what <code>aesop</code> does.</p>",
        "id": 402305070,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700073349
    },
    {
        "content": "<p>I guess, \"<code>simp</code> does not make any significant progess then\" is wrong, it does progress, but not as much as I would hope and less if I would just formulate this in terms of <code>t.ι.app ⟨i⟩</code> instead of <code>Cofan.inj</code>.</p>",
        "id": 402305323,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700073447
    }
]