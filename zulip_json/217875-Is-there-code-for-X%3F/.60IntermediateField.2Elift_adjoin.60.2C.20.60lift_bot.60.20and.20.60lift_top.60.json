[
    {
        "content": "<p>I think we only have <code>IntermediateField.restrictScalars_bot_eq_self</code> and <code>IntermediateField.restrictScalars_top</code>, but not the three I mentioned:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">IntermediateField.lift_adjoin</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lift</span><span class=\"o\">,</span> <span class=\"n\">adjoin_map</span><span class=\"o\">,</span> <span class=\"n\">coe_val</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">IntermediateField.lift_bot</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">adjoin_empty</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">adjoin_empty</span><span class=\"o\">,</span> <span class=\"n\">lift_adjoin</span><span class=\"o\">,</span> <span class=\"n\">Set.image_empty</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">IntermediateField.lift_top</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">adjoin_univ</span><span class=\"o\">,</span> <span class=\"n\">lift_adjoin</span><span class=\"o\">,</span> <span class=\"n\">Set.image_univ</span><span class=\"o\">,</span> <span class=\"n\">Subtype.range_coe_subtype</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">adjoin_le_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">subset_adjoin</span> <span class=\"n\">F</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>We also don't have <code>restrictScalars_adjoin</code> but I think it's quite close to <code>adjoin_adjoin_left</code>. Are these lemmas useful?</p>",
        "id": 398552040,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698263749
    },
    {
        "content": "<p>I indeed can't find any of these. They would make good (<code>@[simp]</code>?) lemmas. I think <code>restrictScalars_adjoin</code> too, based on my guess as to what it would look like.</p>",
        "id": 398666127,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698318768
    },
    {
        "content": "<p>The second one should follow from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">map_bot</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">toSubalgebra_injective</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">bot_toSubalgebra</span><span class=\"o\">,</span> <span class=\"n\">Algebra.map_bot</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 398668384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698319735
    },
    {
        "content": "<p>(that proof becomes even shorter with <a href=\"https://github.com/leanprover-community/mathlib4/pull/7957\">#7957</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/7958\">#7958</a>)</p>",
        "id": 398671799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698321000
    },
    {
        "content": "<p>That's great. I proposed these lemmas in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7788\">#7788</a>, I'll check for merge conflicts with your PRs.</p>",
        "id": 398775298,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698358475
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.IsAlgClosed.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Separable</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Polynomial</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_adjoin</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lift</span><span class=\"o\">,</span> <span class=\"n\">adjoin_map</span><span class=\"o\">,</span> <span class=\"n\">coe_val</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_adjoin_simple</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">α.1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lift_adjoin</span><span class=\"o\">,</span> <span class=\"n\">Set.image_singleton</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_bot</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">toSubalgebra_injective</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">bot_toSubalgebra</span><span class=\"o\">,</span> <span class=\"n\">Algebra.map_bot</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_bot</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lift</span><span class=\"o\">,</span> <span class=\"n\">map_bot</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjoin_self</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">adjoin_le_iff.2</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subset_adjoin</span> <span class=\"n\">F</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_top</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">adjoin_univ</span><span class=\"o\">,</span> <span class=\"n\">lift_adjoin</span><span class=\"o\">,</span> <span class=\"n\">Set.image_univ</span><span class=\"o\">,</span> <span class=\"n\">Subtype.range_coe_subtype</span><span class=\"o\">,</span> <span class=\"n\">adjoin_self</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">restrictScalars_adjoin</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">restrictScalars</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L'</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">({</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">adjoin_self</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">adjoin_adjoin_left</span><span class=\"o\">,</span> <span class=\"n\">adjoin_self</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IntermediateField</span>\n</code></pre></div>",
        "id": 398778353,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698360429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60IntermediateField.2Elift_adjoin.60.2C.20.60lift_bot.60.20and.20.60lift_top.60/near/398666127\">said</a>:</p>\n<blockquote>\n<p>I indeed can't find any of these. They would make good (<code>@[simp]</code>?) lemmas. I think <code>restrictScalars_adjoin</code> too, based on my guess as to what it would look like.</p>\n</blockquote>\n<p>I think <code>lift_adjoin_simple</code>, <code>map_bot</code>, <code>lift_bot</code>, <code>adjoin_self</code>, <code>lift_top</code> could be simp lemmas. I'm not sure for <code>lift_adjoin</code>. Clearly the <code>restrictScalars_adjoin</code> is not a good simp lemma, since usually you want a set of generators of <code>K</code>, not the whole <code>K</code>.</p>",
        "id": 398778562,
        "sender_full_name": "Jz Pan",
        "timestamp": 1698360569
    }
]