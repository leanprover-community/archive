[
    {
        "content": "<p>I have something that looks like a monad, but am only able to implement the monad functions when the generic types implement a certain typeclass/set of typeclasses. Does there exist code for something like a \"restricted monad\"?</p>",
        "id": 352949369,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682544110
    },
    {
        "content": "<p>Unfortunately, no, but <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> and I have wanted one before. The typical example is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.monad\">docs#finset.monad</a> which could be made computable if we could restrict to types with decidable equality.</p>",
        "id": 352949805,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682544318
    },
    {
        "content": "<p>I would say this is exactly what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Monad#doc\">docs4#CategoryTheory.Monad</a> is designed for: it's a monad in an arbitrary category, not just in <code>Type u</code>. :-)</p>",
        "id": 352949817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682544322
    },
    {
        "content": "<p>Then if you need typeclasses, you can build the category of bundled objects, as we do throughout the algebra / order / topology hierarchies.</p>",
        "id": 352949998,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682544406
    },
    {
        "content": "<p>Decidable equality is exactly what I need as well. At least at first.</p>\n<p>Does the Category Theoretical Monad also support things like do notation?</p>",
        "id": 352950003,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682544409
    },
    {
        "content": "<p>No, no <code>do</code> notation. I have no idea whether something might be possible. Sounds fun. :-)</p>",
        "id": 352950069,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682544435
    },
    {
        "content": "<p>The thread about refactoring monads to support this is at <a href=\"#narrow/stream/113488-general/topic/Changing.20the.20functor.20typeclasses/near/265813573\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Changing.20the.20functor.20typeclasses/near/265813573</a></p>",
        "id": 352950377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682544572
    },
    {
        "content": "<p>Note that this hits two birds with one stone; it supports restricting monads to specific types, but also removes the universe restrictions that currently force some awkward <code>ulift</code> dances.</p>",
        "id": 352952204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682545406
    },
    {
        "content": "<p>I think <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO\">#lean4 &gt; universe polymorphic IO</a> discusses the latter aspect, in the context of Lean 4 instead of Lean 3</p>",
        "id": 352952306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682545447
    },
    {
        "content": "<p>Particularly this message:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO/near/282722931\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> I would also be very happy if you could explore the <code>is_monadic</code> approach you suggested. I could only find preliminary experiments in the commit you posted above. You had compelling examples above. Again, I think even if the experiments are not successful, I think we would learn a lot from them.  For <code>is_monadic</code>, I am also curious about the interaction with all \"gadgets\" we use (e.g., transformers, <code>MonadLift</code>, <code>MonadControl</code>, etc). It would also be great to explore whether the two approaches could coexist. I suspect it should be feasible, but I didn't have time to play with your approach yet.</p>\n</blockquote>\n<p>I unfortunately never did find time to look at this, so feel free to explore it yourself if you're particularly motivated</p>",
        "id": 352952633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682545612
    },
    {
        "content": "<p>I'm using lean4 anyways. I might have a look, but I'm just a beginner (literally started two days ago, though I've been eyeing it for a while and have some experience with other proofassistants). I'll probably steal the workaround from finset. Is it right that it's impossible to prove that some predicates are undecidable?</p>",
        "id": 352952912,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682545769
    },
    {
        "content": "<p>All predicates are decidable if you assume the axiom of choice (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Classical.decPred#doc\">docs4#Classical.decPred</a>)</p>",
        "id": 352953564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682546057
    },
    {
        "content": "<p>That's what I thought. If you want to actually prove things like undecidability of equality for the reals you would need a separate definition of decidable, am I right?</p>",
        "id": 352954270,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682546311
    },
    {
        "content": "<p>The axiom of choice is neither provable nor disprovable using only lean's logic, so you won't be able to prove anything which contradicts it. In particular you can't prove undecidability of equality for the reals using lean's logic.</p>",
        "id": 352955082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1682546467
    },
    {
        "content": "<p>It wouldn't let you prove false, no. Here's how Coq are doing it: <a href=\"https://github.com/uds-psl/coq-library-undecidability\">https://github.com/uds-psl/coq-library-undecidability</a></p>",
        "id": 352958868,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682547173
    },
    {
        "content": "<blockquote>\n<p>It wouldn't let you prove false,</p>\n</blockquote>\n<p>Sure it does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">Classical.decEq</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 352959843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682547368
    },
    {
        "content": "<p>So at least you need a different meaning of \"decidable\" to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Decidable#doc\">docs4#Decidable</a> if you want to do so</p>",
        "id": 352960713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682547531
    },
    {
        "content": "<p>If you use the same definition for decidability it does. If you use a different one it might not. The reference I linked defines <code>undecidable</code> by reduction to a non-controversial undecidable problem.</p>",
        "id": 352960861,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682547566
    },
    {
        "content": "<p>This means that classically everything would be <code>undecidable</code> according to their definition.</p>",
        "id": 352961240,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1682547632
    },
    {
        "content": "<p>One could implement the following sort of syntactic transformation, providing a version of <code>do</code> notation in an arbitrary category.</p>\n<p>Here let's have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>Then one could write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">m.obj</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">Do</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">w</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n  <span class=\"n\">h</span>  <span class=\"n\">y</span>\n</code></pre></div>\n<p>Note here I'm writing an imaginary <code>Do</code> rather than <code>do</code>, and it acts like a binder with a \"variable\" <code>w : X</code>, although of course <code>X</code> need not even have an underlying type.<br>\nThis would be interpreted as if you had written</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">m.obj</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">m.map</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">m.μ.app</span> <span class=\"n\">Y</span> <span class=\"bp\">≫</span> <span class=\"n\">m.map</span> <span class=\"n\">h</span> <span class=\"bp\">≫</span> <span class=\"n\">m.μ.app</span> <span class=\"n\">Z</span>\n</code></pre></div>\n<p>Additional \"features\" (e.g. using the result of a let binding in a statement later than the subsequent one) would require additional structure on the category <code>C</code>. (e.g. at very least a <a href=\"https://ncatlab.org/nlab/show/monoidal+category+with+diagonals\">monoidal category with diagonals</a>).</p>\n<p>We would have to call this \"<code>Do</code> unchained\", rather than \"<a href=\"https://leanprover.github.io/papers/do.pdf\"><code>do</code> unchained</a>\". Are there existing implementations for general categories/monads in other languages?</p>",
        "id": 352989522,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682553353
    },
    {
        "content": "<p>(If anyone would like to try implementing this in Lean 4, please count me in! :-)</p>",
        "id": 352989977,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682553437
    },
    {
        "content": "<p>I don't (yet) speak <code>CategoryTheory</code>, but this was something I found myself wanting when using unbundled universal properties</p>",
        "id": 352999021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682555266
    },
    {
        "content": "<p>Fun idea! Here's the \"ascii-art\" analogue, which is quite easy to define:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Monad.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CategoryTheory.pure</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.obj</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">M.η.app</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CategoryTheory.bind</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.obj</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.obj</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">M.map</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">M.μ.app</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">55</span>  <span class=\"s2\">\" &gt;&gt;= \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CategoryTheory.bind</span>\n</code></pre></div>",
        "id": 353044058,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682564563
    },
    {
        "content": "<p>Where is Lean4's <code>do</code> syntax actually defined?</p>",
        "id": 353045779,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682564914
    },
    {
        "content": "<p>Elab/Do.lean</p>",
        "id": 353045953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682564956
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 353046029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682564968
    },
    {
        "content": "<p>it's quite complicated, since it supports if, for, try-finally and mutation on top</p>",
        "id": 353046437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682565040
    },
    {
        "content": "<p>yeah, I figured as much</p>",
        "id": 353046497,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682565058
    },
    {
        "content": "<p>for the basic bind sequence thing you don't need most of it</p>",
        "id": 353046519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682565060
    },
    {
        "content": "<p>I haven't read up on the context here</p>",
        "id": 353046683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682565088
    },
    {
        "content": "<p>is this about <a href=\"http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf\">compiling to CCCs</a>?</p>",
        "id": 353046811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682565117
    },
    {
        "content": "<p>I'm just going off of Scott's last message. I also haven't kept up with the whole thread.</p>",
        "id": 353047117,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682565178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Restricted.20Monads/near/353046811\">said</a>:</p>\n<blockquote>\n<p>is this about <a href=\"http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf\">compiling to CCCs</a>?</p>\n</blockquote>\n<p>Yes, although the fragment I was talking about required much less than a CCC. (In fact just a monad in any category.)</p>",
        "id": 353066272,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682569069
    }
]