[
    {
        "content": "<p>This worked in Lean 3, but the new structure-based <code>MulIOpposite</code> makes it no longer work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">mul_opposite</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ᵐᵒᵖᵐᵒᵖ</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">mul_equiv.refl</span> <span class=\"n\">M</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖᵐᵒᵖ</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ring_equiv.refl</span> <span class=\"n\">R</span>\n<span class=\"c1\">-- ok, this one didn't work very well</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖᵐᵒᵖ</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">alg_equiv.refl</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 381691818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691130717
    },
    {
        "content": "<p>I'm not too upset that these no longer work; but do we have them anywhere in mathlib?</p>",
        "id": 381692075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691130776
    },
    {
        "content": "<p>If we don't already have them, it's not too hard to build the last one as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul_opposite.op_op_alg_equiv</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖᵐᵒᵖ</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">alg_equiv.of_linear_equiv</span>\n  <span class=\"o\">((</span><span class=\"n\">mul_opposite.op_linear_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">mul_opposite.op_linear_equiv</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 381692813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691130947
    },
    {
        "content": "<p>A related question is whether we have <code>ℂᵐᵒᵖ ≃ₐ[ℂ] ℂ</code> anywhere; the closest I can find is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.fromOpposite#doc\">docs#RingHom.fromOpposite</a></p>",
        "id": 381708574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691134099
    },
    {
        "content": "<p>You mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.conj#doc\">docs#Complex.conj</a> ? Oh that doesn't exist any more? And <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=starRingEnd#doc\">docs#starRingEnd</a> is a ring hom, not an algebra equiv?</p>",
        "id": 381794931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691147820
    },
    {
        "content": "<p>Sorry, that question was unclear: I mean <code>id</code></p>",
        "id": 381796487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691148071
    },
    {
        "content": "<p>Either way, I just ended up writing all these (in lean3, so now I need to wait for mathport to start up)</p>",
        "id": 381799905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691148626
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6364\">#6364</a> has <code>ℂᵐᵒᵖ ≃ₐ[ℂ] ℂ</code> and some missing <code>AlgHom</code> versions of <code>RingHom</code> helpers.</p>",
        "id": 381816697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691151215
    },
    {
        "content": "<p>The motivation for all this was to build <code>Aᵐᵒᵖ ⊗[R] Bᵐᵒᵖ ≃ₐ[S] (A ⊗[R] B)ᵐᵒᵖ</code>, which in turn I needed to build one of those \"conjure a hom then <code>ext</code>\" proofs</p>",
        "id": 381817046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691151269
    },
    {
        "content": "<p>(oh I'm an idiot -- complex conjugation is not C-linear)</p>",
        "id": 381833153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691153577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Double.20opposite.20is.20the.20same.20ring.2Falgebra/near/381816697\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6364\">#6364</a> has <code>ℂᵐᵒᵖ ≃ₐ[ℂ] ℂ</code> and some missing <code>AlgHom</code> versions of <code>RingHom</code> helpers.</p>\n</blockquote>\n<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span>; this is unfortunately a bit long, but it's all just expansion of existing boilerplate.</p>",
        "id": 383897958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691748677
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6525\">#6525</a> contains the titular result of this thread, along with some other helpers I needed for <code>Aᵐᵒᵖ ⊗[R] Bᵐᵒᵖ ≃ₐ[S] (A ⊗[R] B)ᵐᵒᵖ</code>. (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6555\">#6555</a>)</p>",
        "id": 383989354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691764698
    }
]