[
    {
        "content": "<p>Hi, as thread name suggests, is there code for proving pell's equation has non-trivial fundamental solutions? I only found related code in <code>number_theory/pell.lean</code>, but inside it only proves the special case <code>d = a^2 - 1</code> for <code>x^2 - dy^2 = +-1</code>. If not, I would like to make progress on this! However, it seems like a large project to me, so if anyone can give me some directions on where to start then that will be great. Do I just follow some textbook / notes and grind through the lemmas one by one? Thanks! :)</p>",
        "id": 322885832,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674407343
    },
    {
        "content": "<p>And also I guess, how do you guys approach adding large contributions? I was working on a proof on some other theorem the past few days (which turned out to be in mathlib already...), and handling 300 lines of code in a single file is already making me dizzy haha.</p>",
        "id": 322885976,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674407425
    },
    {
        "content": "<p>I believe that <span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> has a student working on this. I also had a student which proved the existence of solutions but they didn't push it to mathlib, it was just a student project.</p>",
        "id": 322888775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674409131
    },
    {
        "content": "<p>Alright, I will see if there are any interesting places to work on. I am also only an undergraduate student haha :)</p>",
        "id": 322891212,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674410730
    },
    {
        "content": "<p>It's quite hard to find low-hanging fruit in elementary number theory nowadays. One thing we don't have is Dirichlet's units theorem, a far-reaching generalisation of Pell. A PhD student of mine needs it for their proof of the Mordell-Weil theorem.</p>",
        "id": 322891547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674410990
    },
    {
        "content": "<p>I would look at the situation differently. It's now rather difficult to contribute to mathlib as an undergraduate; perhaps the best idea might be to choose something from the <a href=\"https://leanprover-community.github.io/undergrad_todo.html\">undergrad todo list</a>, although please open a discussion before embarking on something because there will be opinions about how to set up definitions, or half-finished work you can build on etc. The other situation is that adding anything to mathlib right now is kind of tricky because we are in the middle of porting the entire library to lean 4. I would encourage you to work on standalone projects (like your Mersenne project, which is a great way to get into Lean) and just formalise what the heck you want, e.g. just do Pell -- who cares if someone else did Pell. Do it, add it to the Mersenne stuff, write a little write-up about it and stick it online. This will buy the community some time to get the port done ;-)</p>",
        "id": 322892125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674411329
    },
    {
        "content": "<p>Hahahaha that definitely sounds great too, maybe I can work on some projects then write a blog or two on it, since I am definitely learning a lot and it is a very interesting topic :) Thanks for your suggestions!</p>",
        "id": 322892503,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674411549
    },
    {
        "content": "<p>Just to confirm what <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> mentioned earlier: I do have a student working on Pell's equation. He does in fact have a <code>sorry</code>-free proof of the existence of non-trivial solutions, which he is in the process of cleaning up somewhat. My plan is to then clean it up further to make it mathlib-ready and add it to mathlib at some point.</p>",
        "id": 322893119,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1674411941
    },
    {
        "content": "<p>If somebody wants to fill gaps in elementary number theory then I think it would be great to add some of the classical results about asymptotic growth of arithmetic functions. For example, that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>n</mi><mrow><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">d(n) = n^{o(1)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span> <a href=\"https://terrytao.wordpress.com/2008/09/23/the-divisor-bound/\">see here</a> and <a href=\"https://github.com/b-mehta/unit-fractions/blob/b60c39a3ebd40a84104a4064840b10fc2af15fb8/src/for_mathlib/basic_estimates.lean#L825\">here</a> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mi>ϵ</mi></msup><mi mathvariant=\"normal\">/</mi><mi>φ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n^\\epsilon/\\varphi(n) = o(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">ϵ</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\epsilon &lt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 322984120,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1674469618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> how much of that stuff got done in unit fractions?</p>",
        "id": 322990612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674471560
    },
    {
        "content": "<p>I just added a link to the message above with a weak bound but they have full formalisations of stronger bounds directly above!</p>",
        "id": 322991196,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1674471731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/322891547\">said</a>:</p>\n<blockquote>\n<p>It's quite hard to find low-hanging fruit in elementary number theory nowadays. One thing we don't have is Dirichlet's units theorem, a far-reaching generalisation of Pell. A PhD student of mine needs it for their proof of the Mordell-Weil theorem.</p>\n</blockquote>\n<p>I had some idea in my head that someone was actually working on this already</p>",
        "id": 322992794,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674472229
    },
    {
        "content": "<p>We had been considering continuing our <a href=\"https://github.com/lean-forward/class-group-and-mordell-equation\">diophantine project</a> towards the units theorem, but I don't think we have any concrete progress towards that.</p>",
        "id": 322993894,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674472611
    },
    {
        "content": "<p>I have been working the proof of Dirichlet's theorem lately (although I also spent too much time having fun porting files to mathlib4 <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>).<br>\n I am almost finished proving  the results for lattice theory that are needed and so I should able to start working on the final stage soon.</p>",
        "id": 323005810,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1674476382
    },
    {
        "content": "<p>I am interested in that, though I am not sure what <em>should</em> be added to mathlib and what shouldn't. For example, things like Mertens' estimate and various sieve estimates (which depends on other useful elementary estimates) are proven in the Unit Fractions project, in particular lemma 2.7 and 2.8. However, those weren't added to mathlib</p>",
        "id": 323031396,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674483544
    },
    {
        "content": "<p>Though I can always work in a separate project first then ask when I get some progress :P</p>",
        "id": 323031682,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674483608
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span></p>",
        "id": 323033017,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674483932
    },
    {
        "content": "<p>Lots of the stuff in the basic estimates file ought to be in mathlib, the reason it's not is a combination of me not having time, and some unclear questions about where it should go and how it should be structured, eg what's the correct mathlib version of partial summation which is usable as a tool for analytic number theory</p>",
        "id": 324115685,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1674841311
    },
    {
        "content": "<p>I have now a 70-line proof ready of the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pell.ex_nontriv_sol</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_square</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Is there support for adding this result to mathlib now?</p>",
        "id": 328849990,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676832765
    },
    {
        "content": "<p>it depends on where it lies with respect to the frontier of ported files</p>",
        "id": 328850268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676832947
    },
    {
        "content": "<p>If so, the question is where this is supposed to go. Everything that is done in <code>number_theory.pell</code> has the assumption <code>d = a^2 - 1</code> pretty much baked in -- it starts with the lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">a1</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>and epxresses everything in terms of <code>a</code> instead of <code>d</code> (which is <code>d a1</code> in the file).<br>\nSo it would be difficult to adapt it to the general case (at least without a major refactor).<br>\nMy suggestion would be to </p>\n<ul>\n<li>move <code>number_theory.pell</code> to <code>number_theory.pell.special</code> (in particular, set up a subfolder <code>pell</code>)</li>\n<li>add a new file <code>number_theory.pell.general</code> that contains the new result and can be expanded (and may perhaps eventually also include the material that is now in <code>number_theory.pell</code> as special cases)</li>\n</ul>",
        "id": 328850403,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676833017
    },
    {
        "content": "<p>If it depends on stuff that has already been ported you would probably be better off PR'ing it directly to mathlib4</p>",
        "id": 328850435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676833035
    },
    {
        "content": "<p>You might also consider making the number_theory.pell theorem depend on yours</p>",
        "id": 328850477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676833079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/328850435\">said</a>:</p>\n<blockquote>\n<p>If it depends on stuff that has already been ported you would probably be better off PR'ing it directly to mathlib4</p>\n</blockquote>\n<p>This requires either porting manually or working out how to setup mathport one-shot, right? Vs PRing to mathlib3 where the actual porting is automatic.</p>",
        "id": 328850578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676833115
    },
    {
        "content": "<p>According to <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/number_theory/pell\">this</a> (was there a linkifier shortcut?), there are still 27 or so dependencies missing.</p>",
        "id": 328850609,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676833136
    },
    {
        "content": "<p>for a 70 line just-written proof I imagine porting manually isn't too hard</p>",
        "id": 328850611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676833137
    },
    {
        "content": "<blockquote>\n<p>was there a linkifier shortcut?</p>\n</blockquote>\n<p><code>port-status#path/to/file</code></p>",
        "id": 328850747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676833213
    },
    {
        "content": "<p>apparently <code>number_theory.pell</code> is one of the dependencies too</p>",
        "id": 328850794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676833241
    },
    {
        "content": "<p>Right now, it is just a stand-alone statement and proof, which imports <code>tactic.qify</code>, <code>data.zmod.basic</code> and <code>number_theory.diophantine_approximation</code>.</p>",
        "id": 328850810,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676833248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/328850794\">said</a>:</p>\n<blockquote>\n<p>apparently <code>number_theory.pell</code> is one of the dependencies too</p>\n</blockquote>\n<p>OK, then make it 26 <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 328850851,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676833267
    },
    {
        "content": "<p>Of course, the theory around it should also be built (group structure &amp;c)...</p>",
        "id": 328850911,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676833309
    },
    {
        "content": "<p>The chain of unported files to <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/number_theory/pell\">port-status#number_theory/pell</a> has length ~17.</p>",
        "id": 328852172,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676833990
    },
    {
        "content": "<p>how does this happen <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> I <em>know</em> that file has abnormally low dependencies for mathlib</p>",
        "id": 328852319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676834089
    },
    {
        "content": "<p>what does the port-status PDF picture for it look like?</p>",
        "id": 328852392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676834149
    },
    {
        "content": "<p>I guess this is spoiled by <code>number_theory.zsqrtd.basic</code> ..</p>",
        "id": 328852401,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676834153
    },
    {
        "content": "<p>that was just <code>int</code>, twice</p>",
        "id": 328852426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676834163
    },
    {
        "content": "<p>Click on \"show graph\" on the page linked above.</p>",
        "id": 328852463,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676834176
    },
    {
        "content": "<p>it used to be 100 lines at the top of <code>pell</code></p>",
        "id": 328852475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676834183
    },
    {
        "content": "<p>unfortunately the graph on the web page doesn't include the gray nodes from the original version</p>",
        "id": 328852539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676834241
    },
    {
        "content": "<p>Yeah, I would assume that much of the imports is  not actually needed (like tensor products...).</p>",
        "id": 328852647,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676834298
    },
    {
        "content": "<p>that is to say, I would expect that of those 26 unported dependencies, 25 of them are gray nodes for pell</p>",
        "id": 328852649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676834300
    },
    {
        "content": "<p>In any case, my proof depends on <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/number_theory/diophantine_approximation\">port-status#number_theory/diophantine_approximation</a>, which is still quite a bit away from the frontier.</p>",
        "id": 328853208,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676834648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/328852539\">said</a>:</p>\n<blockquote>\n<p>unfortunately the graph on the web page doesn't include the gray nodes from the original version</p>\n</blockquote>\n<p>Yes, these are far too expensive to calculate for all 3000 files every 30 minutes</p>",
        "id": 328853871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676835089
    },
    {
        "content": "<p>Or at least, we'd need a better approach to do it than iterating the current approach 3000 times!</p>",
        "id": 328854127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676835261
    },
    {
        "content": "<p>Let me note in passing that using this, together with <a href=\"https://github.com/leanprover-community/mathlib/pull/18460\">#18460</a> (which could do with some reviewing), it would be easy to show that every positive solution to Pell's equation for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> comes from a convergent of the continued fraction expansion of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>d</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{d}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.1078em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">d</span></span></span><span style=\"top:-2.8922em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1078em;\"><span></span></span></span></span></span></span></span></span>...</p>",
        "id": 328854486,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676835538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/328852319\">said</a>:</p>\n<blockquote>\n<p>how does this happen <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> I <em>know</em> that file has abnormally low dependencies for mathlib</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18468\">#18468</a> attempts to cut this path a bit</p>",
        "id": 328854849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676835816
    },
    {
        "content": "<p>This PR is now passing CI</p>",
        "id": 329253943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677001967
    },
    {
        "content": "<p>I have now made a PR with the existence theorem (<a href=\"https://github.com/leanprover-community/mathlib/pull/18484\">#18484</a>). It just adds a new file <code>number_theory.pell_general</code> containing the result. The 75 lines containing the docstring, statement, and proof correspond to 25 lines in Ireland-Rosen, so the de Bruijn factor is not too bad...</p>",
        "id": 329580827,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1677097982
    },
    {
        "content": "<p>With some more golfing by <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>, it is now down to 66 lines.<br>\nI have also added a link to <code>100.yaml</code>.</p>",
        "id": 337981998,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1677324538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> suggested to rename <code>number_theory.pell</code> to <code>...pell_matiyasevic</code> and <code>...pell_general</code> to <code>...pell</code>. This is done in <a href=\"https://github.com/leanprover-community/mathlib/pull/18503\">#18503</a>, together with some updating of the documentation.</p>",
        "id": 338175458,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1677429085
    },
    {
        "content": "<p>By now, I have written code to show that the solution set consists of the powers (with integer exponents) of a fundamental solution (up to sign) w.r.t. to the usual group structure on the solution set. The next PR, <a href=\"https://github.com/leanprover-community/mathlib/pull/18567\">#18567</a>, is just a small addition to show that a positive solution exists, which will be used to define the fundamental solution.</p>",
        "id": 340505347,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1678332224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/328852319\">said</a>:</p>\n<blockquote>\n<p>how does this happen <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> I <em>know</em> that file has abnormally low dependencies for mathlib</p>\n</blockquote>\n<p>one way this happens is that there are a bunch of lemmas in the original pell file that were ad-hoc specializations / repetitions of lemmas that later appeared in the library in a more natural location, if later people come and replace these with replace these with references to the library versions so the library doesn't contain multiple versions of the same thing, then the dependencies go up</p>",
        "id": 340545106,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678352142
    },
    {
        "content": "<p>indeed, the extent to which that is a tradeoff is not really appreciated in the normal review process</p>",
        "id": 340545683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678352311
    },
    {
        "content": "<p>because make no mistake, that is actively making mathlib worse for certain applications (users that don't want to import hundreds of files for a basic result and came to mathlib because it is the canonical source for these kinds of theorems)</p>",
        "id": 340545956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678352392
    },
    {
        "content": "<p>well those users could simply pin an older version if the material is stable and not being actively developed?</p>",
        "id": 340546589,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678352567
    },
    {
        "content": "<p>Mario, are you contradicting your t-shirt?</p>",
        "id": 340546612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678352575
    },
    {
        "content": "<p>Why would a user not want to import hundreds of files for a basic result? Every lecture I've given this term has started <code>import tactic</code> and many of them then import one or two other files so that the material works. Under the hood it would not surprise me if I'm importing hundreds if not thousands of files every lecture but I've never seen a down side to this.</p>",
        "id": 340546733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678352612
    },
    {
        "content": "<p>Generally the cohesiveness and non-silod nature of mathlib is touted as a good thing!</p>",
        "id": 340546747,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678352615
    },
    {
        "content": "<p>On day one of an analysis lecture the lecturer imports the real numbers and makes no apology, and also doesn't make any attempt to explain what's going on under the hood -- they just say \"here's the API\".</p>",
        "id": 340547137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678352726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/340546747\">said</a>:</p>\n<blockquote>\n<p>Generally the cohesiveness and non-silod nature of mathlib is touted as a good thing!</p>\n</blockquote>\n<p>I don't think this has to come at the cost of cohesiveness at all. You can have a basic definition of <code>Real</code> and then prove it is equivalent to the  fancy definition in a fancy file</p>",
        "id": 340547710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678352888
    },
    {
        "content": "<p>In a lot of computational applications you need to make a specialized representation of e.g. polynomials and then prove they are representable by the abstract version afterward; in this situation usually the computational model will have few dependencies and the proofs will depend on the more complex abstract polynomial file</p>",
        "id": 340548161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353013
    },
    {
        "content": "<p>If I am interested in computational applications of Pell then lean would not be my first choice of system :-)</p>",
        "id": 340549082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/340547137\">said</a>:</p>\n<blockquote>\n<p>On day one of an analysis lecture the lecturer imports the real numbers and makes no apology, and also doesn't make any attempt to explain what's going on under the hood -- they just say \"here's the API\".</p>\n</blockquote>\n<p>Kevin, this approach is very specific to classroom teaching. I don't think it works for substantial developments on top of std/mathlib, especially other libraries</p>",
        "id": 340549093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353259
    },
    {
        "content": "<p>I don't really understand why another library cares whether it's importing ten files or 1000</p>",
        "id": 340549197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353297
    },
    {
        "content": "<p>Disclaimer: I am not a computer scientist</p>",
        "id": 340549307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353327
    },
    {
        "content": "<p>I want all the theorems :-)</p>",
        "id": 340549365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353345
    },
    {
        "content": "<p>I do too, but not if it takes 6 hours and a larger machine than I have to compile</p>",
        "id": 340549487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353369
    },
    {
        "content": "<p>Mario, the current \"use a mathematical hammer\" approach is trying to keep the compile time of <em>all</em> of mathlib as low as possible.</p>",
        "id": 340549736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678353455
    },
    {
        "content": "<p>and yet, it keeps growing</p>",
        "id": 340549770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353470
    },
    {
        "content": "<p>If we keep around all the low-tech versions, then they only add <em>more</em> to that growing number.</p>",
        "id": 340549800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678353480
    },
    {
        "content": "<p>and is already much larger than the stomachs of most computer scientists</p>",
        "id": 340549864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353489
    },
    {
        "content": "<p>the thing is, most people don't care about most of mathlib</p>",
        "id": 340549929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353508
    },
    {
        "content": "<p>and the current structure means most people have to depend on most of mathlib</p>",
        "id": 340550002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353536
    },
    {
        "content": "<p>Those computer scientists should grab a copy of EGA from their local library, brew a pot of tea, and try to \"compile\" it (-;</p>",
        "id": 340550030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678353544
    },
    {
        "content": "<p>The nature of mathematics is that beyond some point it becomes a hugely interconnected mess. The statement of FLT can be made in core but the proof is going to require importing the vast majority of what we have now</p>",
        "id": 340550309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353603
    },
    {
        "content": "<p>And a heck of a lot more</p>",
        "id": 340550360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353610
    },
    {
        "content": "<p>that's fine, if things are actually <em>used</em> then they should be dependencies</p>",
        "id": 340550423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353630
    },
    {
        "content": "<p>I think we can avoid ZFC and the game theory stuff but most of the rest is on the radar :-)</p>",
        "id": 340550482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353648
    },
    {
        "content": "<p>the thing is we have huge quantities of unnecessary stuff getting pulled in most of the time</p>",
        "id": 340550508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353660
    },
    {
        "content": "<p>Yes! Isn't it great that computers are so good now!</p>",
        "id": 340550564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353687
    },
    {
        "content": "<p>\"actually <em>used</em>\" is almost always up for debate.</p>",
        "id": 340550570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678353692
    },
    {
        "content": "<p>My operating system pulls in huge quantities of unnecessary stuff but I'm not complaining</p>",
        "id": 340550671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353723
    },
    {
        "content": "<p>I complain a lot about that too</p>",
        "id": 340550710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353732
    },
    {
        "content": "<p>I can read my email and that's fine</p>",
        "id": 340550711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/340550711\">said</a>:</p>\n<blockquote>\n<p>I can read my email and that's fine</p>\n</blockquote>\n<p>I complain a lot about that too</p>",
        "id": 340550748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678353746
    },
    {
        "content": "<p>Actually I'm not very good at reading my email but I can't blame my operating system for this.</p>",
        "id": 340550853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353775
    },
    {
        "content": "<p>But let's get back to Pell! How do we get a minimal setup for computing it but then import more stuff for proving it? What does that setup look like?</p>",
        "id": 340551011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678353820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Proving.20Pell's.20equation.20is.20solvable/near/340550570\">said</a>:</p>\n<blockquote>\n<p>\"actually <em>used</em>\" is almost always up for debate.</p>\n</blockquote>\n<p>\"transitively reachable from the proof term\" is clearly an upper bound on it though, and we have hard data on how prevalent that is</p>",
        "id": 340551057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353833
    },
    {
        "content": "<p>Re: pell, I think the only obvious example of such a thing was the <code>Z[√d]</code> construction</p>",
        "id": 340551263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353879
    },
    {
        "content": "<p>So you are not complaining about low-tech proofs getting replaced by high-tech proofs. But just about the fact that our coarse import strategies pull in so much junk that isn't used?</p>",
        "id": 340551307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678353889
    },
    {
        "content": "<p>Yes to the second, it depends to the first</p>",
        "id": 340551482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353937
    },
    {
        "content": "<p>low-tech -&gt; high-tech is a tradeoff, is it worth reducing the size of mathlib by X in exchange for increasing the dependency cost of this file and all its dependents by Y</p>",
        "id": 340551683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678353985
    },
    {
        "content": "<p>As long as a decision is made with eyes wide open to the costs, I'm okay with either approach</p>",
        "id": 340551947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678354048
    },
    {
        "content": "<p>Note that <code>std</code> contains a number of theorems about ordering on <code>Nat</code> that are literally copy-pasted from theorems about <code>LinearOrder</code></p>",
        "id": 340552190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678354104
    },
    {
        "content": "<p>this is a deliberate duplication of work in order to make it possible to work with <code>Nat</code> without a huge stack</p>",
        "id": 340552361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678354151
    },
    {
        "content": "<p>I always found it fascinating in mathlib3 that <code>data.nat.basic</code> imported a vast amount of stuff -- somehow that was not what I would have guessed.</p>",
        "id": 340557606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678355635
    },
    {
        "content": "<p>But I wasn't losing any sleep over it :-)</p>",
        "id": 340557680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678355646
    },
    {
        "content": "<p>that makes one of us</p>",
        "id": 340557713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678355655
    },
    {
        "content": "<p>Surely it's possible to create a tool which consumes a definition / lemma in Mathlib and emits a new source tree which includes exactly those definitions and lemmas which it needs?</p>\n<p>This wouldn't solve the problem of dependencies that exist because some very general definition / lemma is being applied in a trivial situation but it could still be useful / interesting (and one could imagine an even more powerful tool which also attacks this).</p>\n<p>One of the benefits of having a library of mathematics that is understood by a computer should be that we can manipulate the mathematics in useful ways.</p>",
        "id": 340565626,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1678357661
    },
    {
        "content": "<p>Sure, I've even written a tool like that before (not for lean though). It's somewhat harder to do on lean source because of tactics and annotations</p>",
        "id": 340575001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678359907
    },
    {
        "content": "<p>Most kinds of semantic processing on lean source require compiling it though, which means that you might have to pay the costs anyway</p>",
        "id": 340575302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678359993
    },
    {
        "content": "<p>At a file level it is definitely possible with minimal analysis, and I would like mathlib4 to be usable in this way. Early on I was pushing for lake to be able to create ad-hoc packages by tree-shaking files from mathlib4 so that std doesn't need to exist</p>",
        "id": 340575645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678360087
    },
    {
        "content": "<p>at this point it looks unlikely to happen in the near term but it is not a fundamentally hard problem</p>",
        "id": 340575779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678360132
    },
    {
        "content": "<p>but for that kind of thing to be useful mathlib would need to change its ways to have a less tangled structure, smaller files and more stratification</p>",
        "id": 340576369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678360265
    },
    {
        "content": "<p>smaller files is something we can probably all agree on.</p>",
        "id": 340597370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678366395
    },
    {
        "content": "<p>Not to distract from this important discussion too much <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  -- here is the next PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/18568\">#18568</a>.<br>\nIt defines a type for the solutions and provides it with a group structure and compatible negation.</p>",
        "id": 340753621,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1678416557
    },
    {
        "content": "<p>For those following this thread but not the PR; I've argued in that PR that we might not need a new type, and could just use <code>unitary (sqrt d)</code> instead. To be able to do that, we need the hopefully non-controversial <a href=\"https://github.com/leanprover-community/mathlib/pull/18572\">#18572</a>.</p>",
        "id": 341307310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678639205
    },
    {
        "content": "<p>It probably also makes sense to generalize <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pell.is_pell\">docs#pell.is_pell</a> to an arbitrary <code>d</code> (and move it from <code>number_theory.pell_matiyasevic</code> to <code>number_theory.pell</code>)</p>",
        "id": 341307344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678639226
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> for the refactor <code>zsqrtd.conj</code> --&gt; <code>star</code>.<br>\nSome comments regarding the general approach:</p>\n<ul>\n<li>I think it makes sense to have a separate type for solutions to the Pell equation (which can be <code>unitary (zsqrtd d)</code> under the hood) and provide an API for it. E.g., I want to think of a solution as a pair <code>(x, y)</code> of integers and not necessarily as the element <code>x + y √d</code> of <code>zsqrtd d</code> -- writing <code>a.re</code> and <code>a.im</code> is not very intuitive in this context, for example.</li>\n<li>I would like to develop the general theory \"in the right way\" (what this is may certainly be debatable) first, before refactoring what is now in <code>number_theory.pell_matiyasevic</code>.</li>\n</ul>",
        "id": 341324444,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1678647857
    },
    {
        "content": "<p>Regarding your second point; I think it would make sense to first move all the stuff in <code>pell_matiyasevic</code> that isn't actually restricted to <code>d = a*a - 1</code> to the <code>pell</code> file; and only then develop things the right way</p>",
        "id": 341326413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678648993
    },
    {
        "content": "<p>It might be that that's only the definition of <code>is_pell</code> and little else</p>",
        "id": 341326577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678649074
    },
    {
        "content": "<p>Even <code>is_pell</code> is written in terms of <code>a</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">pell.is_pell</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">√↑</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(this is how the HTML docs show it; it is not as apparent in the source...)</p>",
        "id": 341327022,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1678649300
    },
    {
        "content": "<p>My point is that it would be rather painful to try to do this in parallel, since <code>d = a^2 - 1</code> is really pretty much hard-coded in <code>pell_matiyasevic</code>.</p>",
        "id": 341327144,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1678649379
    },
    {
        "content": "<p>The first few relevant lines in <code>pell_matiyasvic</code>are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">a1</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>So there is literally nothing in this file that is not tied to this special case.</p>",
        "id": 341327324,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1678649452
    },
    {
        "content": "<p>I'm not explaining what I mean very well, so I made <a href=\"https://github.com/leanprover-community/mathlib/pull/18573\">#18573</a>. It looks like barely anything generalizes though, so I think it's fine to ignore <code>is_pell</code> for your current work (although I think <a href=\"https://github.com/leanprover-community/mathlib/pull/18573\">#18573</a> is good to have anyway).</p>",
        "id": 341336999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678656208
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18626\">#18626</a> is the next PR in this sequence. It adds some API lemmas for Pell solutions, which I need to be able to define what a fundamental solution is and to prove some properties later.</p>",
        "id": 343270338,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1679371343
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18901\">#18901</a> defines fundamental solutions and proves their existence and uniqueness and that the fundamental solution (essentially, i.e., up to a sign) generates the group of solutions (and is characterized by this property).<br>\nReviews welcome!</p>",
        "id": 354735569,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1682879954
    },
    {
        "content": "<p>Any further comments on <a href=\"https://github.com/leanprover-community/mathlib/pull/18901\">#18901</a> ?</p>",
        "id": 356294445,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1683376512
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19010\">#19010</a> is a small PR that just fixes two lemma names in the module docstring (so that doc-gen links them correctly).</p>",
        "id": 358238842,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684062491
    }
]