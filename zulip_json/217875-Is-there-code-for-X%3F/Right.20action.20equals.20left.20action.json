[
    {
        "content": "<p>Do we have this lemma anywhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Basic</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">MulOpposite.smul_eq_smul</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MulOpposite.op</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"n\">MulOpposite.op</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">MulOpposite.op</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n                          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n                          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_assoc</span><span class=\"o\">]</span>\n                          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_comm</span><span class=\"o\">]</span>\n                          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_smul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 368292047,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687363763
    },
    {
        "content": "<p>(Informally it says that <code>IsScalarTower R Rᵐᵒᵖ M</code> is the condition for an R-R-bimodule to be really just a left (say) module.)</p>",
        "id": 368292759,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687363912
    },
    {
        "content": "<p>Isn't this <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCentralScalar#doc\">docs#IsCentralScalar</a> ?</p>",
        "id": 368295413,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687364479
    },
    {
        "content": "<p>OK <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCentralScalar#doc\">docs#IsCentralScalar</a> is the way to make this statement and I have here a proof that this instance arises from <code>IsScalarTower R Rᵐᵒᵖ M</code> (subject to the other assumptions). Thanks!</p>",
        "id": 368296350,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687364670
    },
    {
        "content": "<p>We don't need to worry about type class loops anymore, right? Or do we? If we do, I'd be concerned you're about to create one.</p>",
        "id": 368296917,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687364774
    },
    {
        "content": "<p>I <em>believe</em> we don't and thus could maybe add:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.OfAssociative</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Derivation.Basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SMulCommClass</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsCentralScalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">m</span>\n  <span class=\"k\">calc</span> <span class=\"n\">MulOpposite.op</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">MulOpposite.op</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span>\n                          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n                          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"n\">m</span>\n                          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">smul_comm</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"n\">m</span>\n                          <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_smul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 368297066,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687364810
    },
    {
        "content": "<p>I can't find the other instance I expected might exist anyway, so I think it's fine either way.</p>",
        "id": 368297235,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687364853
    },
    {
        "content": "<p>But now that you've drawn my attention to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCentralScalar#doc\">docs#IsCentralScalar</a> I don't really need this anymore :)</p>",
        "id": 368297253,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687364856
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 368297359,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687364881
    },
    {
        "content": "<p>I do think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCentralScalar.op_smul_eq_smul#doc\">docs#IsCentralScalar.op_smul_eq_smul</a> should be <code>simp</code> though.</p>",
        "id": 368297533,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687364916
    },
    {
        "content": "<p>The other direction of the loop is that <code>IsCentralScalar R M</code> implies some of the <code>ᵐᵒᵖ</code> tower instances</p>",
        "id": 368302673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687366062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Right.20action.20equals.20left.20action/near/368297533\">said</a>:</p>\n<blockquote>\n<p>I do think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsCentralScalar.op_smul_eq_smul#doc\">docs#IsCentralScalar.op_smul_eq_smul</a> should be <code>simp</code> though.</p>\n</blockquote>\n<p>This seems reasonable; I think I was just trying to be conservative.</p>",
        "id": 368302845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687366095
    },
    {
        "content": "<p>Let's see if <a href=\"https://github.com/leanprover-community/mathlib4/pull/5346\">#5346</a> builds!</p>",
        "id": 368305186,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687366649
    }
]