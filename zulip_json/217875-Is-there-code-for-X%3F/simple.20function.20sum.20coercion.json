[
    {
        "content": "<p>This lemma feels like it should be in mathlib but I could not find it. I would appreciate a pointer on how to prove it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Function.SimpleFunc</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">BigOperators</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">SimpleFunc</span> <span class=\"bp\">Ω</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402399717,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700118262
    },
    {
        "content": "<p>Is it not something like<code>'Finset.sum_map_val</code>?  Here:<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/BigOperators/Basic.html#Finset.sum_map_val\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/BigOperators/Basic.html#Finset.sum_map_val</a></p>",
        "id": 402400962,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1700118856
    },
    {
        "content": "<p>I don't see any similarity. My lemma is about SimpleFunc</p>",
        "id": 402401086,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700118957
    },
    {
        "content": "<p>Hmm sorry maybe I misunderstood the question then. I thought you simply wanted to commute the function and sum</p>",
        "id": 402401241,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1700119035
    },
    {
        "content": "<p>I edited the question to include the imports.  I need to compute the sum and the coercion from <code>SimpleFunc</code> to the underlying function</p>",
        "id": 402401457,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700119110
    },
    {
        "content": "<p>I need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.SimpleFunc.coe_add#doc\">docs#MeasureTheory.SimpleFunc.coe_add</a> but instead of two functions, finitely many of them</p>",
        "id": 402402536,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700119547
    },
    {
        "content": "<p>Mathematically, I would do induction on the cardinality of the fintype <code>I</code>. But I'm struggling to make it work in Lean.</p>",
        "id": 402404903,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700120380
    },
    {
        "content": "<p>Sorry I'm on mobile and not much help, but can you do induction on your finset instead of it's cardinality?</p>",
        "id": 402406635,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1700120948
    },
    {
        "content": "<p>I don't know what it would mean to do induction on a finset</p>",
        "id": 402406813,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700121007
    },
    {
        "content": "<p>I tried <code>induction' I with I hI</code> but it gave an error.</p>",
        "id": 402407335,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700121236
    },
    {
        "content": "<p>Something like this: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Basic.html#Finset.induction\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Basic.html#Finset.induction</a></p>",
        "id": 402407930,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1700121488
    },
    {
        "content": "<p>This looks quite relevant. The difficulty becomes translating between a fintype and a finset</p>",
        "id": 402409303,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700121982
    },
    {
        "content": "<p>It would be called <code>SimpleFunc.coe_sum</code> but it is indeed missing. Please state it with <code>⇑</code></p>",
        "id": 402409324,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700121993
    },
    {
        "content": "<p>There's no difficulty at all. But you need to generalise your statement</p>",
        "id": 402409382,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700122013
    },
    {
        "content": "<p>I'm sure there is no difficulty for someone skilled at Lean but so far I have not found a way</p>",
        "id": 402409501,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700122060
    },
    {
        "content": "<p>I'm not sure what you mean by stating it with <code>⇑</code>. You mean instead of <code>toFun</code>? I feel uneasy about the many up arrows that Lean employs so I wanted to be explicit about my coercion.</p>",
        "id": 402409690,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700122140
    },
    {
        "content": "<p>To what should the statement be generalized? I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_sum</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">SimpleFunc</span> <span class=\"bp\">Ω</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span>\n<span class=\"o\">(</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span>\n</code></pre></div>\n<p>and tried induction on <code>n</code> but got stuck.</p>",
        "id": 402409879,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700122212
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Function.SimpleFunc</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SimpleFunc</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_prod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">SimpleFunc</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">Finset.cons_induction</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 402409980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700122258
    },
    {
        "content": "<p>(untested, but it should work)</p>",
        "id": 402410030,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700122278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/simple.20function.20sum.20coercion/near/402409690\">said</a>:</p>\n<blockquote>\n<p>I feel uneasy about the many up arrows that Lean employs so I wanted to be explicit about my coercion.</p>\n</blockquote>\n<p>Sadly for you, if <code>f : α →ₛ β</code>, then <code>⇑f</code> and <code>f.toFun</code> are not syntactically equal, so you really have to stick to the first.</p>",
        "id": 402410233,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700122372
    },
    {
        "content": "<p>Else no lemma will apply, except the one turning <code>f.toFun</code> into <code>⇑f</code>.</p>",
        "id": 402410296,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700122405
    },
    {
        "content": "<p>I'm getting an error in the →ₛ symbol. I know I can just change it to <code>SimpleFunction \\a \\b</code> but I assume this code compiles for you. It's weird that it does not compile for me</p>",
        "id": 402410614,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700122548
    },
    {
        "content": "<p>No, I literally wrote it on Zulip without an infoview to look at. I fixed it now.</p>",
        "id": 402410952,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700122681
    },
    {
        "content": "<p>It's very impressive. Thank you for your help</p>",
        "id": 402412312,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700123206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/simple.20function.20sum.20coercion/near/402410030\">said</a>:</p>\n<blockquote>\n<p>(untested, but it should work)</p>\n</blockquote>\n<p>isnt this essentially how LLMs solve IMO problems in lean? guess without an infoview and then check the answer. This is more evidence towards the belief you're just a LLM Yaël  <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 402431826,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1700129499
    },
    {
        "content": "<p>Come on Yael, the canonical proof is obviously to conjure the <code>→+</code>  and use map_sum. As an AI language model, you should know this!</p>",
        "id": 402435551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700130461
    }
]