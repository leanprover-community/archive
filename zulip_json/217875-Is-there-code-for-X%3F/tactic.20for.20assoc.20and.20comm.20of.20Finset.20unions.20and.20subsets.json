[
    {
        "content": "<p>I can prove this by various applications of commutativity and associativity lemmas, but I'm curious if there is a tactic that would be simpler.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">alpha</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">alpha</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">D</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span> <span class=\"bp\">∪</span> <span class=\"n\">D</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 395794162,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696904945
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 395794591,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696905207
    },
    {
        "content": "<p>Similarly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">alpha</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">alpha</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">D</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span> <span class=\"bp\">∪</span> <span class=\"n\">D</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 395794779,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696905307
    },
    {
        "content": "<p>IIRC the corresponding questions for <code>Set alpha</code> could be tackled with <code>ext; finish</code> in lean 3, but <code>finish</code> was never ported. How does <code>ext; simp; tauto/aesop</code> do? </p>\n<p>Oh hmm that was for equalities; how about reducing the question to \"x in this implies x in that\" first (probably ext doesn't do this) and then trying the logic tactics?</p>",
        "id": 395812864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696917418
    },
    {
        "content": "<p>I actually have a tactic idea that would solve those kinds of goals.</p>",
        "id": 395818074,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696920545
    }
]