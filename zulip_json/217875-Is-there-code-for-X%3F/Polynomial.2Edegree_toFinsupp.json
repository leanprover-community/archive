[
    {
        "content": "<p>Does the following exist?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Polynomial.degree_toFinsupp</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">degree</span> <span class=\"o\">{</span> <span class=\"n\">toFinsupp</span> <span class=\"o\">:=</span> <span class=\"n\">List.toFinsupp</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 401017958,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699475332
    },
    {
        "content": "<p>I had something like it in here <a href=\"https://github.com/leanprover-community/mathlib/pull/15477/files\">https://github.com/leanprover-community/mathlib/pull/15477/files</a></p>",
        "id": 401018488,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699475573
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15476/files#diff-fae6d434339c03bb00dae13fc68db6fad33f196335665c91f06aad5d4f52eaf6R150\">https://github.com/leanprover-community/mathlib/pull/15476/files#diff-fae6d434339c03bb00dae13fc68db6fad33f196335665c91f06aad5d4f52eaf6R150</a></p>",
        "id": 401018554,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699475607
    },
    {
        "content": "<p>Aha, now I need to understand how we work on stuff together in <code>mathlib</code>. If I need the result for a different result, do I copy-paste, wait for your PR to be merged, and then rework my code to use your PR?</p>",
        "id": 401018764,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699475698
    },
    {
        "content": "<p>Well, Yakov's result is in a mathlib 3 PR that will never be merged, so you could translate it to lean 4 and add it yourself</p>",
        "id": 401019379,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699475985
    },
    {
        "content": "<p>15476 should be easy to rewrite in lean4, it is only a single file, and <code>getD</code> instead of <code>nthd</code></p>",
        "id": 401019987,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699476268
    },
    {
        "content": "<p>Alternatively, this is a lean 4 proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Polynomial.degree_toFinsupp</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">degree</span> <span class=\"o\">{</span> <span class=\"n\">toFinsupp</span> <span class=\"o\">:=</span> <span class=\"n\">List.toFinsupp</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">degree</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Finset.max_le</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">st</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hx</span>\n  <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_withBot</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n  <span class=\"n\">exact</span> <span class=\"n\">List.getD_eq_default</span> <span class=\"n\">xs</span> <span class=\"mi\">0</span> <span class=\"n\">this.le</span>\n</code></pre></div>",
        "id": 401019991,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699476269
    },
    {
        "content": "<p>But Yakov has probably thought more about the best way to state those results</p>",
        "id": 401020033,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699476292
    },
    {
        "content": "<p>Is there a place one can ask for code review to get better at <code>mathlib</code>ing? Here's the proof I came up with, which is clearly way more verbose:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.ToFinsupp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Polynomial.degree_toFinsupp</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">degree</span> <span class=\"o\">{</span> <span class=\"n\">toFinsupp</span> <span class=\"o\">:=</span> <span class=\"n\">List.toFinsupp</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">xs</span>\n    <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">degree</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">degree</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">List.toFinsupp</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">Finset.range_succ</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Finset.max_le</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ha₁</span><span class=\"o\">,</span> <span class=\"n\">ha₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.mem_filter.mp</span> <span class=\"n\">ha</span>\n      <span class=\"k\">have</span> <span class=\"n\">ha₃</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.mem_insert.mp</span> <span class=\"n\">ha₁</span>\n      <span class=\"n\">cases'</span> <span class=\"n\">ha₃</span> <span class=\"k\">with</span> <span class=\"n\">ha₄</span> <span class=\"n\">ha₅</span>\n      <span class=\"bp\">.</span> <span class=\"n\">subst</span> <span class=\"n\">ha₄</span>\n        <span class=\"n\">norm_cast</span>\n        <span class=\"n\">apply</span> <span class=\"n\">WithBot.coe_le_coe.mpr</span>\n        <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">Nat.cast</span><span class=\"o\">]</span>\n      <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">ha₆</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.mem_range.mp</span> <span class=\"n\">ha₅</span>\n        <span class=\"n\">norm_cast</span>\n        <span class=\"n\">apply</span> <span class=\"n\">WithBot.coe_le_coe.mpr</span>\n        <span class=\"n\">norm_cast</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ha₆</span> <span class=\"bp\">⊢</span>\n        <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">Nat.le_add_one_iff</span><span class=\"o\">,</span> <span class=\"n\">ha₆</span><span class=\"o\">]</span>\n        <span class=\"n\">left</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">ha₆</span>\n</code></pre></div>",
        "id": 401021114,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699476805
    },
    {
        "content": "<p>Generally, by making a PR to mathlib</p>",
        "id": 401021171,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699476838
    },
    {
        "content": "<p>In this particular proof,  I struggled to deal with <code>WithBot</code>, and to repeatedly destruct the proof witness <code> a ∈ Finset.filter (fun i =&gt; ¬List.getD (x :: xs) i 0 = 0) (insert (List.length xs) (Finset.range (List.length xs)))</code></p>",
        "id": 401021263,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699476871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Polynomial.2Edegree_toFinsupp/near/401021171\">said</a>:</p>\n<blockquote>\n<p>Generally, by making a PR to mathlib</p>\n</blockquote>\n<p>Would it be impolite to ask for review here to get better at mathlib, without making a PR, since I presume your version would be far more preferable? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 401021334,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699476909
    },
    {
        "content": "<p>I think (looking at my proof), you went off in an inefficient direction at <code>cases xs</code> - if you hadn't started that way, you probably wouldn't have ended up much more verbose than I did</p>",
        "id": 401021595,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699477029
    },
    {
        "content": "<p>So sometimes it's just luck in getting the \"right\" start</p>",
        "id": 401021623,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699477045
    },
    {
        "content": "<p>I shared the PR because I think having an API layer between lists and polynomial that doesn't rely on a direct piercing through the API layers would be better</p>",
        "id": 401025622,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699478701
    },
    {
        "content": "<p>It's not about the length / style of this one proof, but the collection of proofs / gadgets you might want about such constructions.</p>",
        "id": 401025699,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699478732
    },
    {
        "content": "<p>and in building that collection, one finds proof patterns</p>",
        "id": 401025721,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699478747
    },
    {
        "content": "<p>If you're having to unfold API via tactics like <code>simp [degree]</code>, <code>simp [List.toFinsupp]</code>, sure, you'll be able to get a proof that compiles. But it won't create for a nice API microecosystem</p>",
        "id": 401025827,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1699478798
    }
]