[
    {
        "content": "<p>If I have <code>L : Finset String</code>, is there a way to obtain an arbitrary <code>String</code> that is not a member of <code>L</code>?</p>",
        "id": 394976618,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696489114
    },
    {
        "content": "<p>One would hope that<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  HasCompl.compl, Infinite, Set.Nonempty</p>",
        "id": 394978122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696489759
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 394978126,
        "sender_full_name": "loogle",
        "timestamp": 1696489760
    },
    {
        "content": "<p>I was angling for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Infinite</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s.toSet</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>but it seems there something missing there.</p>",
        "id": 394978194,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696489795
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Infinite.exists_not_mem_finset#doc\">docs#Infinite.exists_not_mem_finset</a></p>",
        "id": 394978289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696489816
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 394978465,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696489888
    },
    {
        "content": "<p>So I guess the better search was just <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Infinite, Finset</p>",
        "id": 394978598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696489930
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Card.html#instInfiniteFinset\">instInfiniteFinset</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Card.html#Infinite.exists_not_mem_finset\">Infinite.exists_not_mem_finset</a>, and <a href=\"https://loogle.lean-fro.org/?q=Infinite%2C%20Finset\">13 more</a></p>",
        "id": 394978601,
        "sender_full_name": "loogle",
        "timestamp": 1696489930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> is still more effective. :-)</p>",
        "id": 394978646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696489958
    }
]