[
    {
        "content": "<p>I don't see a version of <code>Quotient.sound</code> for <code>QuotientGroup</code>; there's probably a much simpler way to do it than this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Subgroup.Normal</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">QuotientGroup.sound</span> <span class=\"o\">[</span><span class=\"n\">Subgroup.Normal</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.opposite</span> <span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">QuotientGroup.coe_mk'</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_preimage</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_smul_set</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y_mem</span><span class=\"o\">,</span> <span class=\"n\">gy_eq_x</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_preimage</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">y_mem</span>\n    <span class=\"n\">convert</span> <span class=\"n\">y_mem</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.leftRel</span> <span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">gy_eq_x</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_smul_set</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_preimage</span><span class=\"o\">]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hx</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.leftRel</span> <span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 387428446,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1693058010
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuotientGroup.eq#doc\">docs#QuotientGroup.eq</a></p>",
        "id": 387429101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693058558
    },
    {
        "content": "<p>Yes I saw that, but it's for individual elements, whereas I want to move the preimage under the quotient map of an arbitrary set in the quotient, by an element of the subgroup...? Maybe I'm missing something trivial?</p>",
        "id": 387429545,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1693058885
    },
    {
        "content": "<p>I can hit it with <code>Set.mem_inv_smul_set_iff</code> first; should help. I'm still struggling with <code>QuotientGroup.eq</code> because it doesn't recognize <code>Subgroup.opposite Γ</code> as a <code>Subgroup G</code>...?</p>",
        "id": 387430221,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1693059426
    },
    {
        "content": "<p>Ok now I can just use <code>Quotient.sound</code> directly. Still, maybe there's a cleaner way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.QuotientGroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Subgroup.Normal</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">QuotientGroup.sound</span> <span class=\"o\">[</span><span class=\"n\">Subgroup.Normal</span> <span class=\"bp\">Γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.opposite</span> <span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.mk'</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">QuotientGroup.coe_mk'</span><span class=\"o\">]</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_preimage</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Set.mem_inv_smul_set_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inv_inv</span><span class=\"o\">,</span> <span class=\"n\">coe_mk'</span><span class=\"o\">,</span> <span class=\"n\">mem_preimage</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.leftRel</span> <span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">use</span> <span class=\"n\">g</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 387430492,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1693059650
    },
    {
        "content": "<p>Isn't sound just one direction of eq?</p>",
        "id": 387430720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693059851
    },
    {
        "content": "<p>If Gamma is a subgroup of G, why would Opposite Gamma be a subgroup of G? The law is reversed.</p>",
        "id": 387434443,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1693062812
    }
]