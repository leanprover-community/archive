[
    {
        "content": "<p>Hey there, I am attempting to write a certified compiler for a tiny language that compiles to 65C02 assembly, and in the process I want to split a UInt16 into two UInt8s, is there a way to do that ?</p>",
        "id": 402499888,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700149502
    },
    {
        "content": "<p>Found an alternative: use <code>UInt16.toUInt8</code> together with <code>UInt16.shiftRight 8</code>, I thought there would be some kind of shortcut</p>",
        "id": 402513136,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700153329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> has marked this topic as resolved.</p>",
        "id": 402513150,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700153333
    },
    {
        "content": "<p>You can of course make such a shortcut and submit it to the library, we don't have too many people working on bit-twiddling stuff like this right now</p>",
        "id": 402516380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700154275
    },
    {
        "content": "<p>To lean's library you mean ?</p>",
        "id": 402516504,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700154308
    },
    {
        "content": "<p>Beacause I am not using mathlib in this example (not sure I'd need it).</p>",
        "id": 402516565,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700154326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"658705\">@Thomas Vigouroux</span>, the standard library at <a href=\"https://github.com/leanprover/std4\">https://github.com/leanprover/std4</a></p>",
        "id": 402602533,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700189310
    },
    {
        "content": "<p>'k, I'll open a PR there then !</p>",
        "id": 402626502,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700203936
    },
    {
        "content": "<p>I'll wait a little though, as I might add quite a bunch of these</p>",
        "id": 402626574,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700203987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Out of interest, what is the goal for the standard library? I might be interesting in contributing some of these bit-twiddling things.</p>",
        "id": 402729899,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700237131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> is preparing a roadmap document describing the intended scope of the lean standard library (Std). I think they may be planning to talk about it at the next community meeting.</p>",
        "id": 402805674,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700268234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"658705\">Thomas Vigouroux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Splitting.20a.20UInt16.20into.20two.20UInt8/near/402626574\">said</a>:</p>\n<blockquote>\n<p>I'll wait a little though, as I might add quite a bunch of these</p>\n</blockquote>\n<p>Obviously don't atomize into individual lemmas (I'm guilty of this when I find I need particular statements from Mathlib), but small PRs are good PRs. :-)</p>",
        "id": 402805803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700268283
    },
    {
        "content": "<p>I'll think about that then !</p>\n<p>Tiny question: how can I use the std4 in my project ? That way I'll be able to see what parts I can use, and what parts I need to add to fit my needs ?</p>",
        "id": 403010124,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700400459
    },
    {
        "content": "<p>Something like this: <a href=\"https://github.com/leanprover-community/mathlib4/blob/35f9ee30d7d638e26f3206412afa26ed2a2474e2/lakefile.lean#L49\">https://github.com/leanprover-community/mathlib4/blob/35f9ee30d7d638e26f3206412afa26ed2a2474e2/lakefile.lean#L49</a></p>",
        "id": 403010479,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700400730
    },
    {
        "content": "<p>That worked, thanks !</p>",
        "id": 403106049,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1700464341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"658705\">@Thomas Vigouroux</span> and <span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> My gut reaction is that primitives for getting low/high order bits out a <code>UInt</code> type (beyond coercisions like <code>UInt16.toUInt8</code> are too specific for Std, but if you have trouble with proofs, general lemmas or proof automation would be welcome. </p>\n<p>There's some work going on for SAT/SMT integration though so perhaps once that's available there will be less need for lemmas on bit-twiddling.</p>",
        "id": 403245203,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1700514246
    },
    {
        "content": "<p>Yes, I have a separate project ATM that unwinds bitvectors in other ways but it'll be good to see this new update when it's ready.</p>",
        "id": 403245290,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700514303
    },
    {
        "content": "<p>(specifically I have the equivalence Fin (2^(m + 1)) to Bool x Fin(2^m) for the m + 1 possible choices and API around that)</p>",
        "id": 403245445,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700514390
    },
    {
        "content": "<p>But that's more of a mathlib jobby</p>",
        "id": 403245469,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1700514405
    }
]