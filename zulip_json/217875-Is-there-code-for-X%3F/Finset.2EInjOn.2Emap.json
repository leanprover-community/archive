[
    {
        "content": "<p>to define maps of <code>Finset</code> under a <code>Function</code>,  mathlib has <code>Finset.map</code> when the map is an embedding, and <code>Finset.image</code> in general, given a decidability instance. The case where the map is injective on the given <code>Finset</code> seems to be missing :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">_root_.Finset.InjOn.map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Set.InjOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Multiset.map</span> <span class=\"n\">f</span> <span class=\"n\">s.val</span><span class=\"o\">,</span>\n  <span class=\"n\">nodup</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Multiset.nodup_map_iff_inj_on</span> <span class=\"n\">s.nodup</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hs</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>should I PR it?</p>",
        "id": 404406353,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701089845
    },
    {
        "content": "<p>Is there a way to spell this with <code>s.attach.map</code>?</p>",
        "id": 404406606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701089943
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extracted_2.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Set.InjOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SetCoe.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hs</span> <span class=\"n\">x.prop</span> <span class=\"n\">y.prop</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extracted_1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Set.InjOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">extracted_2</span> <span class=\"n\">s</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Finset.InjOn.map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Set.InjOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">s.attach.map</span> <span class=\"o\">{</span> <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"n\">extracted_1</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 404408248,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701090470
    },
    {
        "content": "<p>My version was analogous :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Set.InjOn.embedding</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Set.InjOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">Set.restrict</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SetCoe.ext</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">x.prop</span> <span class=\"n\">y.prop</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Finset.map_of_injOn'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Set.InjOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">s.attach.map</span> <span class=\"o\">(</span><span class=\"n\">Set.InjOn.embedding</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 404409223,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701090809
    },
    {
        "content": "<p>and I guess, <code>Set.InjOn.embedding</code> suffices, without needing to explicitly define the second one.</p>",
        "id": 404409521,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1701090897
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">_root_.Finset.InjOn.map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">Set.InjOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span>\n  <span class=\"n\">s.attach.map</span> <span class=\"o\">{</span> <span class=\"n\">inj'</span> <span class=\"o\">:=</span> <span class=\"n\">hs.injective</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.InjOn.injective#doc\">docs#Set.InjOn.injective</a>)</p>",
        "id": 404409525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701090899
    },
    {
        "content": "<p><code>Set.InjOn.embedding</code> seems like a reasonable thing to PR</p>",
        "id": 404409620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701090930
    }
]