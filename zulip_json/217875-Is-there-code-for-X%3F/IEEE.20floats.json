[
    {
        "content": "<p>Has anyone formalized the IEEE float rounding semantics in Lean?</p>\n<p>I’m specifically interested in whether one could prove the correctness of interval arithmetic and expansion arithmetic routines written in Lean using Lean’s float, then use code extraction to get straight line routines for use in high performance contexts.</p>",
        "id": 327740182,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1676370636
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fp.float\">docs#fp.float</a> is the closest thing I'm aware of in Lean 3.</p>",
        "id": 327744704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676371942
    },
    {
        "content": "<p>It's not possible to prove anything useful about the builtin <a href=\"https://leanprover-community.github.io/mathlib_docs/find/native.float\">docs#native.float</a> (because it's <code>meta</code>) or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Float#doc\">docs4#Float</a> (because it's <code>opaque</code> and secretly an alias for <code>Unit</code>!)</p>",
        "id": 327745232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676372101
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/270676-lean4/topic/IEEE.20floats/near/272592908\">this thread</a> in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a></p>",
        "id": 327745431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676372157
    },
    {
        "content": "<p>But that doesn’t have any of the rounding theorems, right?  I.e., “rounded x * y is the closest float to x * y”?</p>",
        "id": 327745517,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1676372170
    },
    {
        "content": "<p>Thanks!  That Lean4 thread is a good summary.</p>",
        "id": 327746022,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1676372321
    },
    {
        "content": "<p>Worse than that, the <code>*</code> that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fp.float\">docs#fp.float</a> has is <code>meta</code> (there is a TODO in the source) so you can't even prove anything about it!</p>",
        "id": 327746514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676372459
    },
    {
        "content": "<p>Sure, though to clarify I meant fp.float didn’t have those theorems about the non-meta type.</p>\n<p>Edit: Ah, I see what you mean.</p>",
        "id": 327746663,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1676372508
    },
    {
        "content": "<p>In case it wasn't clear, fp.float is absolutely not supposed to actually be <code>meta</code>, it just was not a high priority to finish those theorems because no one wanted to see it completed</p>",
        "id": 327751304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676373957
    },
    {
        "content": "<p>So I wouldn't say \"you can't prove anything about it\", it's rather the other way around - if you prove things about it then it won't need to be <code>meta</code> anymore</p>",
        "id": 327751511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676374016
    },
    {
        "content": "<p>I guess what would be more accurate would be to say is \"you can't prove things about the current <code>*</code> without first redefining <code>*</code> to contain the currently missing proofs\"?</p>",
        "id": 327752728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676374405
    }
]