[
    {
        "content": "<p>nlinarith is failing to solve this problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>But replacing <code>a^2</code> by <code>a*a</code> is fine, as is replacing <code>a : \\R</code> with <code>a : \\N</code>.  So I suspect the problem is with <code>Real:rpow</code> not being recognized by nlinarith.  </p>\n<p>I can fix it with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>but perhaps nlinarith should just natively be happy with real squares being non-negative?</p>\n<p>Incidentally, I am surprised to not see a method in mathlib that directly asserts that squares of real numbers are non-negative (at least, I was not able to locate it with various searches). This is like <em>the</em> most fundamental inequality in all of analysis.</p>",
        "id": 397018659,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697514138
    },
    {
        "content": "<p>Seems like a bug, it's working in the <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic%0Aimport%20data.real.basic%0A%0Aexample%20%28a%20%3A%20%E2%84%9D%29%20%3A%20a%5E2%20%E2%89%A5%200%20%3A%3D%20by%0A%20%20nlinarith%0A\">most recent mathlib3</a> (which is the quickest way I could pull up an alternate version ... someone should bisect).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Should.20nlinarith.20know.20about.20x.5E2.20.5Cgeq.200.20when.20x.20is.20real.3F/near/397018659\">said</a>:</p>\n<blockquote>\n<p>Incidentally, I am surprised to not see a method in mathlib that directly asserts that squares of real numbers are non-negative (at least, I was not able to locate it with various searches). This is like <em>the</em> most fundamental inequality in all of analysis.</p>\n</blockquote>\n<p>Have you seen <code>positivity</code>?</p>",
        "id": 397019922,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697514770
    },
    {
        "content": "<p>... Ohhh ... I think this is the real-powers bug.</p>",
        "id": 397020324,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697514953
    },
    {
        "content": "<p>I'm getting a similar issue with positivity.</p>\n<p><a href=\"/user_uploads/3121/hCywBgPtNcBOTXt8I_mS8KR3/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hCywBgPtNcBOTXt8I_mS8KR3/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hCywBgPtNcBOTXt8I_mS8KR3/image.png\"></a></div>",
        "id": 397020467,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697515032
    },
    {
        "content": "<p>Short version: the mumbo-jumbo</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fixes this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n</code></pre></div>",
        "id": 397020587,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697515107
    },
    {
        "content": "<p>It definitely does seem to be using real powers here.</p>\n<p><a href=\"/user_uploads/3121/_WU0MokZqqL_BiEunJFYtZEp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_WU0MokZqqL_BiEunJFYtZEp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/_WU0MokZqqL_BiEunJFYtZEp/image.png\"></a></div>",
        "id": 397020588,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697515108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Should.20nlinarith.20know.20about.20x.5E2.20.5Cgeq.200.20when.20x.20is.20real.3F/near/397020587\">said</a>:</p>\n<blockquote>\n<p>Short version: the mumbo-jumbo</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fixes this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Actually it produces a different error message!</p>\n<p><a href=\"/user_uploads/3121/HS6AJU17N4UDFnrLCGQw6X-1/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HS6AJU17N4UDFnrLCGQw6X-1/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HS6AJU17N4UDFnrLCGQw6X-1/image.png\"></a></div>",
        "id": 397020840,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697515247
    },
    {
        "content": "<p>Long version: in Lean 4 it was initally planned to make a^b preferentially parse as if b were of the same type as a -- so a^b for <code>a</code> real was interpreted to have <code>b</code> real, too (unless further specified).  This wasn't the case in Lean 3, and of course it's not what we expect in math.  The <code>local macro_rules</code> is a temporary fix while we wait for <a href=\"https://github.com/leanprover/lean4/pull/2667\">lean4#2667</a> from core, or similar.</p>",
        "id": 397020896,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697515266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Should.20nlinarith.20know.20about.20x.5E2.20.5Cgeq.200.20when.20x.20is.20real.3F/near/397020840\">said</a>:</p>\n<blockquote>\n<p>Actually it produces a different error message!</p>\n</blockquote>\n<p>Note the <code>(0:ℝ)</code> where my code differs from yours ... the quick fix has unwanted side effects in other aspects of parsing.</p>",
        "id": 397021219,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697515351
    },
    {
        "content": "<p>OK that fix works now.  Anyway I now have enough workarounds for my current application, thanks.  (Though I still find it odd that there isn't a theorem such as Real.mul_self_ge_zero  in Mathlib.  Surely I wasn't the first to have wanted to use it!)</p>",
        "id": 397021641,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697515627
    },
    {
        "content": "<p>there certainly is</p>",
        "id": 397021863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697515791
    },
    {
        "content": "<p>Well, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sq_nonneg#doc\">docs#sq_nonneg</a> does exist (saying <code>a ^ (2:ℕ)</code> is nonnegative), but there doesn't exist a lemma saying <code>a ^ (2:ℝ)</code> is nonnegative (which, due to the powers bug, is what Terry was initially writing).</p>",
        "id": 397021957,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697515833
    },
    {
        "content": "<p>Ah, I found LinearOrderedRing.mul_self_nonneg  at least.</p>",
        "id": 397021985,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697515856
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mul_self_nonneg#doc\">docs#mul_self_nonneg</a></p>",
        "id": 397022017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697515877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> any idea why this doesn't work:</p>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> 0 ≤ ?a * ?a</p>",
        "id": 397022127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697515937
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 397022132,
        "sender_full_name": "loogle",
        "timestamp": 1697515940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> one thing to keep in mind is that mathlib always uses \\le instead of \\ge in theorem statements, which usually doesn't matter but affects lemma naming. The other thing you would need to know to predict this name is that <code>0 ≤</code> has the special name <code>nonneg</code> in lemma statements instead of <code>zero_le</code></p>",
        "id": 397022401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697516058
    },
    {
        "content": "<p>(similarly for <code>pos</code>, <code>neg</code> and <code>nonpos</code>)</p>",
        "id": 397022477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697516089
    },
    {
        "content": "<p>Anyway: open up any analysis file in mathlib currently and you'll see the hack</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>at the top -- you'll likely want to do the same in your code.</p>",
        "id": 397023251,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697516621
    }
]