[
    {
        "content": "<p>I am working on matroids and independence in particular</p>\n<p>Currently I have tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Indep</span> <span class=\"o\">:</span> <span class=\"n\">E.powerset</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">Set.powerset</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"n\">E</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"n\">p1</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"n\">p2</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"bp\">∅</span>\n</code></pre></div>\n<p>and only <code>#check Indep p2</code> seems to work. How do I change the types of E, p1, and the empty set so that I can use the Indep operator on them?</p>",
        "id": 361750977,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1685278941
    },
    {
        "content": "<p><code>E: Set u</code> does not mean what you think it means; the <code>u</code> is unrelated to <code>universe u</code>, and instead refers to <code>u : Type w</code> that Lean is inserting for you.</p>\n<p>I think you want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Indep</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"n\">p1</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"bp\">∅</span>\n</code></pre></div>",
        "id": 361751570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685279116
    },
    {
        "content": "<p>If I want to explicitly declare that <code>E</code> is a set(I want to make sure that I can take a power set of E), then should I write like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Indep</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"n\">E</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"bp\">∅</span>\n</code></pre></div>\n<p><code>Indep</code> is supposed to be like a topology on the ground set <code>E</code> so that certain subsets of <code>E</code> have the property <code>Indep</code>.</p>",
        "id": 361754528,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1685280093
    },
    {
        "content": "<p><code>Type</code> means set. <code>Set</code> means subset.</p>",
        "id": 361755272,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685280362
    },
    {
        "content": "<p>But if I write <code>(E: Type u)</code> I cannot obtain a powerset of <code>E</code> like <code>Set.powerset E</code></p>",
        "id": 361755703,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1685280487
    },
    {
        "content": "<p><code>Set E</code> is itself the type (set) of all subsets of <code>E</code>.</p>",
        "id": 361755778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685280516
    },
    {
        "content": "<p>If <code>s : Set E</code>, so <code>s</code> is a subset of <code>E</code>, then <code>s.powerset</code> gives you the set of all further subsets of <code>s</code>.</p>",
        "id": 361756013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685280587
    },
    {
        "content": "<p>The names are unfortunately not very helpful for mathematicians.</p>",
        "id": 361756045,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685280596
    },
    {
        "content": "<p>I would like to thank both of you. Though I still have a few follow up questions:</p>\n<ol>\n<li>Why does this not work? Is there a way that I can move between <code>Set E</code> and <code>Set.powerset E</code>?</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Indep</span> <span class=\"o\">:</span> <span class=\"n\">E.powerset</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Indep</span> <span class=\"n\">p1</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>If I only import <code>Mathlib.Init.Set</code> and not the whole <code>Mathlib</code> I run into trouble defining <code>Indep</code>. Is there a specific file that is working behind?</li>\n</ol>",
        "id": 361758664,
        "sender_full_name": "Hyunsang Hwang",
        "timestamp": 1685281532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"403479\">Hyunsang Hwang</span> has marked this topic as resolved.</p>",
        "id": 361758679,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685281540
    }
]