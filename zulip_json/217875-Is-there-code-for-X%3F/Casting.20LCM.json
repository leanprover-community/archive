[
    {
        "content": "<p>Hi, is there a lemma for <code>↑(s.lcm (coe : ℕ → ℕ)) = s.lcm (coe : ℕ → ℝ)</code>?</p>",
        "id": 326496747,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675825449
    },
    {
        "content": "<p>I also tried proving from scratch by induction, but then I run into another goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">s.lcm</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s.lcm</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset.lcm</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ha</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">fold_insert</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.cast_id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- h: ↑(fold lcm 1 coe s) = fold lcm 1 coe s</span>\n<span class=\"c1\">-- ⊢ ↑(lcm a (fold lcm 1 coe s)) = lcm ↑a ↑(fold lcm 1 coe s)</span>\n</code></pre></div>",
        "id": 326496783,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675825500
    },
    {
        "content": "<p>I don't think the <code>finset.lcm</code> in <code>ℝ</code> is what you think it is. In particular, I'm pretty sure it only takes the values <code>0</code> or <code>1</code>, depending on whether <code>0</code> is in the finset or not.</p>",
        "id": 326497447,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675826004
    },
    {
        "content": "<p>In particular, the <code>normalized_gcd_monoid</code> instance on <code>ℝ</code> comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/comm_group_with_zero.normalized_gcd_monoid\">docs#comm_group_with_zero.normalized_gcd_monoid</a>, and the definition of <code>lcm</code> there is: <code>lcm := λ (a b : G₀), ite (a = 0 ∨ b = 0) 0 1</code>.</p>",
        "id": 326497598,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675826090
    },
    {
        "content": "<p>Then <code>finset.lcm</code> is just a fold over this.</p>",
        "id": 326497619,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675826108
    },
    {
        "content": "<p>Ohh hmm, that's clearly not what I want <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> Let me take a look at what I need again. Thanks!</p>",
        "id": 326498403,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675826716
    },
    {
        "content": "<p>On another note: <code>coe : nat -&gt; nat</code> is weird. Why try to coerce from <code>nat</code> to itself? Maybe you want <code>id</code> there?</p>",
        "id": 326500271,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675828299
    },
    {
        "content": "<p>Yea, my original version had <code>id</code>, but I thought that if such a theorem exists, it might be in the form of <code>.lcm_coe_coe</code> or something instead of <code>lcm_id_coe</code> haha.</p>",
        "id": 326501438,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1675829025
    }
]