[
    {
        "content": "<p>Hey there, I am encountering a lot of instances of theorems which proofs are along the lines of \"by recursion on the size of T\" where T is an inductive type.</p>\n<p>I am wondering if there could be a lemma that generalize <code>Nat.strongRec</code> to work when the strong recursion is actually the result of a function <code>T -&gt; Nat</code>, and if possible, have the proof that his principle is correct?</p>",
        "id": 405439866,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701465715
    },
    {
        "content": "<p>I thin the actual lemma is somewhere along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">map_rec</span> <span class=\"o\">{</span><span class=\"n\">motive</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">weight</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ind</span><span class=\"o\">:</span> <span class=\"c\">/-</span><span class=\"cm\"> translation of Nat.strongRec ind argument -/</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">motive</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 405440170,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701465845
    },
    {
        "content": "<p>This is usually done using well founded recursion where you use <code>termination_by t =&gt; weight t</code></p>",
        "id": 405440358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701465945
    },
    {
        "content": "<p>With the ind argument being along the lines of <code>\\all (v:T), (\\all v', weight v' &lt; weight v -&gt; motive v') -&gt; motive v</code></p>",
        "id": 405440445,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701465973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Generic.20strong.20recursion.20over.20naturals/near/405440358\">said</a>:</p>\n<blockquote>\n<p>This is usually done using well founded recursion where you use <code>termination_by t =&gt; weight t</code></p>\n</blockquote>\n<p>Hmm I think I am not familiar enough with termination_by then... I wanted to use this principle as part of proofs that are not necessarily termination proofs (actually proofs about sequent calculus G4ip)</p>",
        "id": 405440606,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701466047
    },
    {
        "content": "<p>It's not a termination proof, it's a proof by well founded recursion on <code>T</code></p>",
        "id": 405441018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701466275
    },
    {
        "content": "<p>I don't really understand that<br>\nFor me my question we just about doing strong recursion on natural numbers, but casting the property as a property on <code>T</code> and the recursion on a \"weight function\" given by the user</p>",
        "id": 405441914,
        "sender_full_name": "Thomas Vigouroux",
        "timestamp": 1701466727
    },
    {
        "content": "<p>For example, you could prove <code>map_rec</code> using well-founded recursion on <code>T</code> with <code>termination_by _ =&gt; weight x</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">map_rec</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">weight</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">weight</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ind</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">map_rec</span> <span class=\"n\">weight</span> <span class=\"n\">ind</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">map_rec</span> <span class=\"n\">weight</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">weight</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 405561753,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1701546678
    },
    {
        "content": "<p>In general, there are sort of two styles of inductive proof in lean, those using the <code>induction</code> tactic and those using <a href=\"https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html#structural-recursion-and-induction\">recursive definitions</a>.</p>\n<p>For example, you can prove <code>0 + n = n</code> using two different syntaxes for induction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">zero_add_n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add_n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_add'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add'</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"c1\">-- Note: This is recursive. We are referring to `zero_add` in its own definition.</span>\n    <span class=\"c1\">-- Lean needs to infer a proof that this recursion terminates</span>\n</code></pre></div>\n<p>If you want to use the <code>induction</code> tactic to do the kind of \"weighted induction\" you're talking about, you would indeed need a lemma like <code>map_rec</code> so you could say <code>induction x using map_rec</code>, but with the approach where you use a recursive definition, all you would need is to add <code>termination_by =&gt; weight x</code> to the end of your definition, which might be easier.</p>",
        "id": 405563161,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1701547764
    },
    {
        "content": "<p>you can also use <code>let rec</code> in the middle of a proof if your inductive hypothesis doesn't match the original theorem</p>",
        "id": 405563279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701547881
    }
]