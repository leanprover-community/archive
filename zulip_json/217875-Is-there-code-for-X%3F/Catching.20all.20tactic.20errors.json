[
    {
        "content": "<p>I have a tactic expression (<code>Syntax</code>) and a goal (<code>MVarId</code>). I want to find out if the tactic solves the goal, in an isolated manner – I don’t care about the resulting proof or error messages, I just need a <code>Bool</code>.</p>\n<p>I thought I could just use <code>Term.runTactic</code> and catch exceptions, but that doesn’t quite work: There are tactics, in particular <code>{ … }</code> or the center dot, that will themselves recover from errors, <em>log</em> an <code>Error</code> (but not throw one) and <code>admit</code> the goal.</p>\n<p>What is the most robust way to still fail them. I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>              <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">MonadLog.hasErrors</span> <span class=\"k\">then</span>\n                <span class=\"n\">throwError</span> <span class=\"s2\">\"Tactic execution had errors\"</span>\n</code></pre></div>\n<p>but the message log is rather global (<code>CoreM</code>), and it seems to be a heavy hammer to try to recognize if the tactic added any <em>new</em> errors to the log etc.</p>\n<p>Looking for <code>sorry</code> in the expression isn’t great either, because if the user really writes <code>sorry</code>, then that should work.</p>\n<p>So I think I'd like to locally say <code>logError</code> is <code>throwError</code>.</p>",
        "id": 408158635,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702636290
    },
    {
        "content": "<p>Tactics are supposed to recover or not depending on the current <code>recover</code> state. You can turn off recovery with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.withoutRecover#doc\">docs#Lean.Elab.Tactic.withoutRecover</a></p>",
        "id": 408159915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702636638
    },
    {
        "content": "<p>Ah, now I see it. Great!</p>",
        "id": 408160110,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702636696
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.withoutErrToSorry#doc\">docs#Lean.Elab.Term.withoutErrToSorry</a> to turn off elaboration errors creating sorries</p>",
        "id": 408160203,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702636728
    },
    {
        "content": "<p>I saw that one, but not the other. Let’s see…</p>",
        "id": 408160267,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702636750
    },
    {
        "content": "<p>Re sorries in expressions: you can look for <em>synthetic</em> sorries, which are ones users did not write</p>",
        "id": 408160348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702636784
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.evalFailIfSuccess#doc\">docs#Lean.Elab.Tactic.evalFailIfSuccess</a> is an example of turning off recovery and error-to-sorry)</p>",
        "id": 408160488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702636835
    },
    {
        "content": "<p>By the way, <code>withoutRecover</code> is key to the implementation of the <code>&lt;|&gt;</code> tactic combinator. That's how the LHS tactic failing can reliably cause backtracking and trying the RHS tactic.</p>",
        "id": 408162435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702637511
    },
    {
        "content": "<p>If you need a bool, perhaps the implementation is <code>(t *&gt; done *&gt; pure true) &lt;|&gt; pure false</code></p>",
        "id": 408162788,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702637642
    }
]