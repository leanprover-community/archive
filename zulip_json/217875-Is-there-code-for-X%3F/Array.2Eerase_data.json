[
    {
        "content": "<p>Would anyone be interested in proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Array</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">erase_data</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.erase</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"n\">l.data.erase</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?</p>\n<p>Unfortunately at the moment we have almost no facts about <code>Array.erase</code> (or the functions <code>Array.feraseIdx</code> and <code>Array.indexOf?</code> that it is built out of).</p>",
        "id": 403869131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700785487
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Option</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pmap_congr</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">H₁</span> <span class=\"n\">H₂</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">h₁</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pmap</span> <span class=\"n\">f</span> <span class=\"n\">o</span> <span class=\"n\">H₁</span> <span class=\"bp\">=</span> <span class=\"n\">pmap</span> <span class=\"n\">g</span> <span class=\"n\">o</span> <span class=\"n\">H₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Option</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_nil</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_start_succ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Option.map</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">hl</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n    <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_cons</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bif</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">Option.map</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_start_succ</span><span class=\"o\">,</span> <span class=\"n\">Bool.cond_eq_ite</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">indexOf</span><span class=\"bp\">?</span><span class=\"n\">_nil</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">indexOf</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n  <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_nil</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">indexOf</span><span class=\"bp\">?</span><span class=\"n\">_cons</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">indexOf</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">Option.map</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">indexOf</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">indexOf</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_cons</span><span class=\"o\">,</span> <span class=\"n\">Bool.cond_eq_ite</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_eq_findIdx</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">Option.guard</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">findIdx</span> <span class=\"n\">p</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_nil</span><span class=\"o\">,</span> <span class=\"n\">Option.guard</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_cons</span><span class=\"o\">,</span> <span class=\"n\">findIdx_cons</span><span class=\"o\">,</span> <span class=\"n\">Bool.cond_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">]</span>\n    <span class=\"n\">symm</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">ha</span>\n    <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Option.guard</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n      <span class=\"n\">split_ifs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">indexOf</span><span class=\"bp\">?</span><span class=\"n\">_eq_indexOf</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">indexOf</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">Option.guard</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">indexOf</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_eq_findIdx</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_lt_length</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">findIdx</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_eq_findIdx</span><span class=\"o\">,</span> <span class=\"n\">Option.guard_eq_some</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">indexOf</span><span class=\"bp\">?</span><span class=\"n\">_lt_length</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">indexOf</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"n\">findIdx</span><span class=\"bp\">?</span><span class=\"n\">_lt_length</span> <span class=\"n\">hn</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eraseIdx_indexOf</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">eraseIdx</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">indexOf</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">List.erase</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.erase_cons</span><span class=\"o\">,</span> <span class=\"n\">List.indexOf_cons</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hb</span>\n    <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">take_append_drop_succ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">take</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">eraseIdx</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.casesAuxOn</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hl</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">List</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Array</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">indexOfAux_eq_indexOfAux_data</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">indexOfAux</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Option.pmap</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_lt_of_lt_sub</span> <span class=\"o\">(</span><span class=\"n\">List.length_drop</span> <span class=\"n\">n</span> <span class=\"n\">as.data</span> <span class=\"bp\">▸</span> <span class=\"n\">hm</span><span class=\"o\">)⟩)</span>\n        <span class=\"o\">(</span><span class=\"n\">List.indexOf</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">List.drop</span> <span class=\"n\">n</span> <span class=\"n\">as.data</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.indexOf</span><span class=\"bp\">?</span><span class=\"n\">_lt_length</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm₁</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongRec</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ind</span> <span class=\"n\">m</span> <span class=\"n\">hm₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">indexOfAux</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hn</span>\n    <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">getElem_eq_data_get</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"n\">Option.pmap</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">hdas</span> <span class=\"o\">:</span> <span class=\"n\">List.drop</span> <span class=\"n\">n</span> <span class=\"n\">as.data</span> <span class=\"bp\">=</span> <span class=\"n\">List.get</span> <span class=\"n\">as.data</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">List.drop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">as.data</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.tail_drop</span><span class=\"o\">]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">List.eq_cons_of_mem_head</span><span class=\"bp\">?</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_zero</span><span class=\"o\">,</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_drop</span><span class=\"o\">,</span> <span class=\"n\">List.get</span><span class=\"bp\">?</span><span class=\"n\">_eq_get</span> <span class=\"n\">hn</span><span class=\"o\">]</span>\n      <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">ha</span>\n      <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hdas</span><span class=\"o\">,</span> <span class=\"n\">List.indexOf</span><span class=\"bp\">?</span><span class=\"n\">_cons</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"n\">Option.pmap</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">specialize</span> <span class=\"n\">hm₂</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hm₁</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_succ_lt_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hdas</span><span class=\"o\">,</span> <span class=\"n\">List.indexOf</span><span class=\"bp\">?</span><span class=\"n\">_cons</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hm₂</span><span class=\"o\">,</span> <span class=\"n\">Option.pmap_map</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"n\">Option.pmap</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Option.pmap_congr</span>\n        <span class=\"n\">intro</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">hb₂</span> <span class=\"n\">hb₃</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.drop_eq_nil_of_le</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"n\">Option.pmap</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">indexOf</span><span class=\"bp\">?</span><span class=\"n\">_eq_indexOf</span><span class=\"bp\">?</span><span class=\"n\">_data</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">indexOf</span><span class=\"bp\">?</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"bp\">=</span>\n      <span class=\"n\">Option.pmap</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">List.indexOf</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"n\">as.data</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.indexOf</span><span class=\"bp\">?</span><span class=\"n\">_lt_length</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">indexOf</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">indexOfAux_eq_indexOfAux_data</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"n\">Option.pmap</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eraseIdxAux_data</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">eraseIdxAux</span> <span class=\"n\">n</span> <span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"n\">List.eraseIdx</span> <span class=\"n\">as.data</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm₁</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongRec</span> <span class=\"n\">generalizing</span> <span class=\"n\">as</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ind</span> <span class=\"n\">m</span> <span class=\"n\">hm₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">eraseIdxAux</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hn</span>\n    <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">hm₂</span> <span class=\"n\">_</span>\n        <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hm₁</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_add_lt_sub</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_one_le_iff.mpr</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">Nat.zero_lt_one</span><span class=\"o\">])</span>\n        <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"n\">as</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.pred_le</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hm₂</span><span class=\"o\">,</span> <span class=\"n\">data_swap</span><span class=\"o\">,</span> <span class=\"n\">getElem_eq_data_get</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">List.take_append_drop_succ</span><span class=\"o\">,</span>\n        <span class=\"n\">min_eq_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">),</span> <span class=\"n\">min_eq_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_iff_add_one_le.mp</span> <span class=\"n\">hn</span><span class=\"o\">)]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">List.ext_get</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">List.length</span> <span class=\"n\">as.data</span> <span class=\"bp\">=</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n          <span class=\"n\">min_eq_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">))]</span>\n        <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.casesAuxOn</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n        <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_eq</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_sub_assoc</span><span class=\"o\">,</span>\n            <span class=\"n\">Nat.lt_iff_add_one_le.mp</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_sub_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">)]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">hk₁</span> <span class=\"n\">hk₂</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">Nat.lt_trichotomy</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">hk₃</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hk₃</span><span class=\"o\">)</span>\n        <span class=\"bp\">·</span> <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">apply</span> <span class=\"n\">List.get_append_left</span>\n          <span class=\"n\">tactic'</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">hk₃</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n              <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">hk₃</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n              <span class=\"k\">show</span> <span class=\"n\">List.length</span> <span class=\"n\">as.data</span> <span class=\"bp\">=</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n          <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">apply</span> <span class=\"n\">List.get_append_left</span>\n            <span class=\"n\">tactic'</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hk₃</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">hk₃</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n                <span class=\"k\">show</span> <span class=\"n\">List.length</span> <span class=\"n\">as.data</span> <span class=\"bp\">=</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.get_take'</span><span class=\"o\">,</span> <span class=\"n\">List.get_set</span><span class=\"o\">,</span> <span class=\"n\">Nat.ne_of_gt</span> <span class=\"n\">hk₃</span><span class=\"o\">,</span>\n            <span class=\"n\">Nat.ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"n\">hk₃</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">))]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.casesAuxOn</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">apply</span> <span class=\"n\">List.get_append_right'</span>\n              <span class=\"n\">tactic'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n            <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">apply</span> <span class=\"n\">List.get_append_right'</span>\n              <span class=\"n\">tactic'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.get_drop'</span><span class=\"o\">]</span>\n          <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">apply</span> <span class=\"n\">List.get_append_left</span>\n              <span class=\"n\">tactic'</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_add_of_pos_right</span> <span class=\"n\">Nat.zero_lt_one</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n                  <span class=\"k\">show</span> <span class=\"n\">List.length</span> <span class=\"n\">as.data</span> <span class=\"bp\">=</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n            <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">apply</span> <span class=\"n\">List.get_append_right'</span>\n              <span class=\"n\">tactic'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.get_take'</span><span class=\"o\">,</span> <span class=\"n\">List.get_drop'</span><span class=\"o\">,</span> <span class=\"n\">List.get_set</span><span class=\"o\">,</span>\n              <span class=\"n\">min_eq_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span>\n                <span class=\"o\">(</span><span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_add_of_pos_right</span> <span class=\"n\">Nat.zero_lt_one</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">)),</span>\n              <span class=\"k\">show</span> <span class=\"n\">List.length</span> <span class=\"n\">as.data</span> <span class=\"bp\">=</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">conv_lhs</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">apply</span> <span class=\"n\">List.get_append_right'</span>\n            <span class=\"n\">tactic'</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le_iff_le_add.mp</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_refl</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"n\">Nat.lt_iff_add_one_le.mp</span> <span class=\"n\">hk₃</span><span class=\"o\">)]</span>\n          <span class=\"n\">conv_rhs</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">apply</span> <span class=\"n\">List.get_append_right'</span>\n            <span class=\"n\">tactic'</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le_iff_le_add.mp</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_refl</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"n\">Nat.lt_iff_add_one_le.mp</span> <span class=\"n\">hk₃</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">k</span><span class=\"o\">))]</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.get_drop'</span><span class=\"o\">,</span> <span class=\"n\">List.get_set</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n            <span class=\"n\">min_eq_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span>\n              <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">)),</span>\n            <span class=\"k\">show</span> <span class=\"n\">List.length</span> <span class=\"n\">as.data</span> <span class=\"bp\">=</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n            <span class=\"n\">Nat.ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"n\">n</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)))),</span>\n            <span class=\"n\">Nat.ne_of_lt</span>\n              <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_add_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)))]</span>\n          <span class=\"n\">congr</span> <span class=\"mi\">2</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_right_comm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.add_sub_of_le</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">hk₃</span><span class=\"o\">),</span>\n            <span class=\"n\">Nat.add_sub_of_le</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le_iff_le_add.mp</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_refl</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"n\">Nat.lt_iff_add_one_le.mp</span> <span class=\"n\">hk₃</span><span class=\"o\">))]</span>\n    <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span>\n      <span class=\"k\">have</span> <span class=\"n\">has</span> <span class=\"o\">:</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"bp\">≤</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.sub_le_iff_le_add</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">List.take_append_drop_succ</span><span class=\"o\">,</span> <span class=\"n\">List.dropLast_eq_take</span><span class=\"o\">,</span> <span class=\"n\">Nat.pred_eq_sub_one</span><span class=\"o\">,</span>\n        <span class=\"n\">List.drop_eq_nil_of_le</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">List.length</span> <span class=\"n\">as.data</span> <span class=\"bp\">=</span> <span class=\"n\">size</span> <span class=\"n\">as</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">feraseIdx_data</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"n\">as</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">feraseIdx</span> <span class=\"n\">as</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"n\">List.eraseIdx</span> <span class=\"n\">as.data</span> <span class=\"n\">i.val</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">feraseIdx</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.sub_min_sub_right</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_sub_one_of_lt</span> <span class=\"n\">i.isLt</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">erase_data</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">as</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">data</span> <span class=\"bp\">=</span> <span class=\"n\">List.erase</span> <span class=\"n\">as.data</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">erase</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span>\n  <span class=\"n\">next</span> <span class=\"n\">_</span> <span class=\"n\">has</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">indexOf</span><span class=\"bp\">?</span><span class=\"n\">_eq_indexOf</span><span class=\"bp\">?</span><span class=\"n\">_data</span><span class=\"o\">,</span> <span class=\"n\">List.indexOf</span><span class=\"bp\">?</span><span class=\"n\">_eq_indexOf</span><span class=\"o\">,</span> <span class=\"n\">Option.pmap_eq_none_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Option.guard</span><span class=\"o\">,</span> <span class=\"n\">imp_false</span><span class=\"o\">,</span> <span class=\"n\">LE.le.ge_iff_eq</span> <span class=\"n\">List.indexOf_le_length</span><span class=\"o\">,</span> <span class=\"n\">List.indexOf_eq_length</span><span class=\"o\">,</span>\n      <span class=\"bp\">-</span> <span class=\"n\">Option.pmap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">has</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.erase_of_not_mem</span> <span class=\"n\">has</span><span class=\"o\">]</span>\n  <span class=\"n\">next</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">indexOf</span><span class=\"bp\">?</span><span class=\"n\">_eq_indexOf</span><span class=\"bp\">?</span><span class=\"n\">_data</span><span class=\"o\">,</span> <span class=\"n\">List.indexOf</span><span class=\"bp\">?</span><span class=\"n\">_eq_indexOf</span><span class=\"o\">,</span> <span class=\"n\">Option.pmap_eq_some_iff</span><span class=\"o\">,</span>\n        <span class=\"bp\">-</span> <span class=\"n\">Option.pmap</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hi.left.symm</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Array</span>\n</code></pre></div>",
        "id": 404224712,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1700990144
    },
    {
        "content": "<p>Heroic, <span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Miyahara Kō</span> , thank you so much!</p>",
        "id": 404252264,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701000863
    },
    {
        "content": "<p>On a related note, I have a proof of <code>Array.zipWith_eq_zipWith_data</code>, but it relies on some lemmas about lists that are still in mathlib. Should I PR it to mathlib or just wait until those lemmas are moved to Std?</p>",
        "id": 404264698,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1701010082
    },
    {
        "content": "<p>I'd say PR to mathlib so that the proofs don't get lost</p>",
        "id": 404271540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701015384
    },
    {
        "content": "<p>You can always move them all at once later</p>",
        "id": 404271546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701015395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>, you can also move the lemmas up to Std yourself! I know we have a PR backlog at Std, just like at Mathlib, but anything necessary for <code>Array.zipWith_eq_zipWith_data</code> is in scope for Std.</p>",
        "id": 404304905,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045456
    },
    {
        "content": "<p>Sure! How does this moving process work exactly? If we first add the lemmas to Std, we have duplication of lemmas for a while, and if we first delete from mathlib, well that doesn't work either...!</p>",
        "id": 404305259,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1701045622
    },
    {
        "content": "<p>We add lemmas to Std first.</p>",
        "id": 404305285,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045639
    },
    {
        "content": "<p>Doesn't the duplication break things?</p>",
        "id": 404305306,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1701045654
    },
    {
        "content": "<p>If all that is required at Mathlib is deleting the corresponding lemmas, then we just do it at the same time as the dependency bump.</p>",
        "id": 404305327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045667
    },
    {
        "content": "<p>Ah -- OK I see.</p>",
        "id": 404305354,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1701045684
    },
    {
        "content": "<p>If the Mathlib fixes are more complicated, it is helpful to create a Mathlib PR that uses the Std branch for your PR, and link to it.</p>",
        "id": 404305366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045690
    },
    {
        "content": "<p>That way we can see that the adaptations are reasonable, and saves time for the person (often me :-) doing the dependency bump.</p>",
        "id": 404305408,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045712
    },
    {
        "content": "<p>Wait, what is the \"dependency bump\" here? The mathlib lakefile depends on Std <code>main</code>, not on a particular commit.</p>",
        "id": 404305557,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1701045776
    },
    {
        "content": "<p>The <code>lake-manifest.json</code> file pins a more specific version of dependencies to be used (if the file exists, but it is checked in for mathlib)</p>",
        "id": 404305693,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701045843
    },
    {
        "content": "<p>i.e. only when you run <code>lake update</code> does it actually move to the latest commit on <code>main</code>.</p>",
        "id": 404305744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045859
    },
    {
        "content": "<p>(The regular \"chore: bump Std dependency\" PRs that come through are me doing that.)</p>",
        "id": 404305793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045889
    },
    {
        "content": "<p>Oh I see now. In my private repos I've been tracking particular commits directly in the lakefile instead.</p>",
        "id": 404305858,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1701045920
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/396\">std4#396</a></p>",
        "id": 404314934,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1701050813
    }
]