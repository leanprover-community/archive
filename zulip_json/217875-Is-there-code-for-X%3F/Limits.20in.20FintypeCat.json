[
    {
        "content": "<p>Are there any results on (co)limits in <code>FintypeCat</code>? For example that it has all finite (co)limits and that <code>forget FintypeCat</code> preserves all finite (co)limits?</p>",
        "id": 400025313,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698962569
    },
    {
        "content": "<p>Or that <code>FintypeCat</code> is a full subcategory of <code>Type</code>?</p>",
        "id": 400026973,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698963492
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FintypeCat#doc\">docs#FintypeCat</a></p>",
        "id": 400027884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698964013
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FintypeCat.incl#doc\">docs#FintypeCat.incl</a> is full and faithful, these are both instances (you can just find them by clicking on the link in my last message and then scrolling down).</p>\n<p>My guess is that page basically contains all facts about FintypeCat known to mathlib, so existence of and reflection of limits and colimits looks like it's not there</p>",
        "id": 400028330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698964256
    },
    {
        "content": "<p>Thanks, I was searching for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.FullSubcategory#doc\">docs#CategoryTheory.FullSubcategory</a> in relation to <code>FintypeCat</code> because I found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.hasLimit_of_closed_under_limits#doc\">docs#CategoryTheory.Limits.hasLimit_of_closed_under_limits</a> which I wanted to use to show that <code>FintypeCat</code> has all finite (co)limits. But I suppose I can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.createsLimitOfFullyFaithfulOfIso#doc\">docs#CategoryTheory.createsLimitOfFullyFaithfulOfIso</a> and the instances that you have linked?</p>",
        "id": 400028591,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698964436
    },
    {
        "content": "<p>Yeah these would be great additions to mathlib</p>",
        "id": 400028758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698964535
    },
    {
        "content": "<p>I need it for galois categories, so I'll have to write this at some point.</p>",
        "id": 400028885,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698964597
    },
    {
        "content": "<p>It seems we don’t have anything about (co)limits in <code>FintypeCat</code></p>",
        "id": 400028926,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698964631
    },
    {
        "content": "<p>So maybe the plan is to prove that finite (Co)limits exist in Type and then show that they're finite (the limit injects into the product and the colimit admits a surjection from the coproduct) and then let general nonsense take over?</p>",
        "id": 400029362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698964898
    },
    {
        "content": "<p>Yeah I think one should show that the forgetful functor creates all finite limits and colimits</p>",
        "id": 400029442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698964928
    },
    {
        "content": "<p>Yes, that was my idea and it is already shown that <code>Type</code> has all (finite) (co)limits.</p>",
        "id": 400029509,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698964987
    },
    {
        "content": "<p>Take a look at the api for (co)limits in concrete categories. There’s a bunch of stuff there that might help</p>",
        "id": 400029811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1698965189
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8137\">#8137</a>, will fix the linting issues tomorrow.</p>",
        "id": 400037323,
        "sender_full_name": "Christian Merten",
        "timestamp": 1698970428
    },
    {
        "content": "<p>I was wondering what the best way to transport over results from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Shapes.Types#doc\">docs#CategoryTheory.Limits.Shapes.Types</a> is. Specifically I need some API around binary products, i.e. analogs of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Types.binaryProductIso#doc\">docs#CategoryTheory.Limits.Types.binaryProductIso</a> etc.</p>\n<p>One can certainly transport all data back and forth with <code>FintypeCat.incl</code> or one can just copy the code in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Shapes.Types#doc\">docs#CategoryTheory.Limits.Shapes.Types</a> more or less verbatim and replace all occurences of <code>Type u</code> with <code>FintypeCat.{u}</code>. Same question applies for all finite constructions in said file.</p>",
        "id": 403235926,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700510159
    },
    {
        "content": "<p>I hope it is possible to do this using concrete categories. A few days ago, I did a PR about the products and pullbacks in concrete categories <a href=\"https://github.com/leanprover-community/mathlib4/pull/8507\">#8507</a>. In particular <a href=\"https://github.com/leanprover-community/mathlib4/pull/8507/files#diff-5ed8283d8adc6009eb1d2aa1228b162f5d281a8d9d34c91a9f3004a625e7e3f4R45\">https://github.com/leanprover-community/mathlib4/pull/8507/files#diff-5ed8283d8adc6009eb1d2aa1228b162f5d281a8d9d34c91a9f3004a625e7e3f4R45</a> is the bijection <code>(forget C).obj (∏ F) ≃ ∀ j, F j</code> with <code>F : J → C</code> and <code>forget C : C  ⥤ Type _</code> is the forgetful functor of a concrete category <code>C</code> (when <code>forget</code> commutes with suitable limits). Presumably, if you need more \"shapes\", this should be added to this new file <code>Mathlib.CategoryTheory.Limits.Shapes.ConcreteCategory</code> when <a href=\"https://github.com/leanprover-community/mathlib4/pull/8507\">#8507</a> is merged.</p>",
        "id": 403463476,
        "sender_full_name": "Joël Riou",
        "timestamp": 1700601290
    },
    {
        "content": "<p>Thanks for the pointer. I think <code>FintypeCat</code> is somewhat special, because the product is not only the product in types after applying <code>forget FintypeCat</code> (aka <code>FintypeCat.incl</code>) but is actually <code>of (∏ F)</code>. Not having to compose everything with <code>FintypeCat.incl</code> makes it slightly less annoying to work with.</p>",
        "id": 403464056,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700601556
    },
    {
        "content": "<p>You could construct an explicit limit cone with a particular cone point.</p>",
        "id": 403464703,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700601867
    },
    {
        "content": "<p>I think thats what's done in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Shapes.Types#doc\">docs#CategoryTheory.Limits.Shapes.Types</a> and this can be adapted easily to the case of <code>FintypeCat</code>. Is that what you are suggesting?</p>",
        "id": 403464935,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700601964
    },
    {
        "content": "<p>Specifically I did this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FintypeCat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FProd.fst</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.of</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.fst</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"bp\">!</span> <span class=\"n\">pt</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">binaryProductCone</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">BinaryFan</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">BinaryFan.mk</span> <span class=\"n\">FProd.fst</span> <span class=\"n\">Prod.snd</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">binaryProductCone_fst</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">binaryProductCone</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">binaryProductCone_snd</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">binaryProductCone</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">Prod.snd</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- The product type `X × Y` is a binary product for `X` and `Y`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"bp\">!</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">binaryProductLimit</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">IsLimit</span> <span class=\"o\">(</span><span class=\"n\">binaryProductCone</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">BinaryFan</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s.fst</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s.snd</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">fac</span> <span class=\"n\">_</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">Discrete.recOn</span> <span class=\"n\">j</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">WalkingPair.casesOn</span> <span class=\"n\">j</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">uniq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Prod.ext</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">⟨</span><span class=\"n\">WalkingPair.left</span><span class=\"o\">⟩)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">⟨</span><span class=\"n\">WalkingPair.right</span><span class=\"o\">⟩)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The category of types has `X × Y`, the usual cartesian product,</span>\n<span class=\"sd\">as the binary product of `X` and `Y`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">binaryProductLimitCone</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Limits.LimitCone</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">binaryProductLimit</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- The categorical binary product in `Type u` is cartesian product. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">binaryProductIso</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">Limits.prod</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span> <span class=\"n\">FintypeCat.of</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">limit.isoLimitCone</span> <span class=\"o\">(</span><span class=\"n\">binaryProductLimitCone</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">elementwise</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">binaryProductIso_hom_comp_fst</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">binaryProductIso</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"n\">_root_.Prod.fst</span> <span class=\"bp\">=</span> <span class=\"n\">Limits.prod.fst</span> <span class=\"o\">:=</span>\n  <span class=\"n\">limit.isoLimitCone_hom_π</span> <span class=\"o\">(</span><span class=\"n\">binaryProductLimitCone</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">WalkingPair.left</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">elementwise</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">binaryProductIso_hom_comp_snd</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">binaryProductIso</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"n\">_root_.Prod.snd</span> <span class=\"bp\">=</span> <span class=\"n\">Limits.prod.snd</span> <span class=\"o\">:=</span>\n  <span class=\"n\">limit.isoLimitCone_hom_π</span> <span class=\"o\">(</span><span class=\"n\">binaryProductLimitCone</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">WalkingPair.right</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">FintypeCat</span>\n</code></pre></div>",
        "id": 403465153,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700602053
    },
    {
        "content": "<p>which is just copy paste from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Shapes.Types#doc\">docs#CategoryTheory.Limits.Shapes.Types</a> but adapted to <code>FintypeCat</code>.</p>",
        "id": 403465276,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700602095
    },
    {
        "content": "<p>I think the best solution is to rely on what we have for general concrete categories (and develop more if you need more shapes), and then just use <code>FintypeCat.equivEquivIso {A B : FintypeCat} : A ≃ B ≃ (A ≅ B)</code> in order to translate the equivalences in <code>Type</code> into isomorphisms in <code>FintypeCat</code> if this is really what you need. I do not think we want to duplicate too much of the code.</p>",
        "id": 403465645,
        "sender_full_name": "Joël Riou",
        "timestamp": 1700602283
    },
    {
        "content": "<p>I see your argument, although to have a usable API for <code>FintypeCat</code> one needs to add quite a few additional simp lemmas (e.g. <code>binaryProductIso_hom_comp_fst</code> above) that will be going back and forth with isomorphisms and applying the <code>Type u</code> equivalent at the right place. So I think in the end, not just replicating leads to the same amount of code.</p>",
        "id": 403466537,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700602728
    },
    {
        "content": "<p>In case of finite products and using <a href=\"https://github.com/leanprover-community/mathlib4/pull/8507\">#8507</a>, the following code does the job:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.FintypeCat</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.ConcreteCategory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FintypeCat</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PreservesLimit</span> <span class=\"o\">(</span><span class=\"n\">Discrete.functor</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">PreservesLimit</span> <span class=\"n\">_</span> <span class=\"n\">incl.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">productIso</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">equivEquivIso</span> <span class=\"o\">(</span><span class=\"n\">Concrete.productEquiv</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">productIso_hom_apply_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">FintypeCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">productIso</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">π</span> <span class=\"n\">X</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Concrete.productEquiv_apply_apply</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">productIso_inv_apply_π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">π</span> <span class=\"n\">X</span> <span class=\"n\">j</span> <span class=\"o\">((</span><span class=\"n\">productIso</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Concrete.productEquiv_symm_apply_π</span> <span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">FintypeCat</span>\n</code></pre></div>",
        "id": 403470370,
        "sender_full_name": "Joël Riou",
        "timestamp": 1700604425
    },
    {
        "content": "<p>Indeed, this looks very convincing, thanks. When <a href=\"https://github.com/leanprover-community/mathlib4/pull/8507\">#8507</a> is merged, I'll try to add the <code>FintypeCat</code> version of the shapes I need. I guess this should then go in a new file <code>Mathlib.CategoryTheory.Limits.Shapes.FintypeCat</code>?</p>",
        "id": 403471509,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700605013
    },
    {
        "content": "<p>Yes, this is the right location!</p>",
        "id": 403472211,
        "sender_full_name": "Joël Riou",
        "timestamp": 1700605354
    }
]