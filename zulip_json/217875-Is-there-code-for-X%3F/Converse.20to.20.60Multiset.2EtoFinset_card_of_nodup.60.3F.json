[
    {
        "content": "<p>I think we only have this in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Multiset.toFinset_card_of_nodup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset.card</span> <span class=\"o\">(</span><span class=\"n\">Multiset.toFinset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">Multiset.card</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>But in fact its converse is also true.</p>",
        "id": 401548548,
        "sender_full_name": "Jz Pan",
        "timestamp": 1699744036
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Multiset.toFinset_card_eq_card_iff_nodup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">m.toFinset.card</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">m.Nodup</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">dedup_eq_self</span><span class=\"o\">]</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h1</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m.toFinset.card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">card</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">card_lt_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Ne.lt_of_le</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">dedup_le</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n  <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">toFinset_card_of_nodup</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 401549664,
        "sender_full_name": "Jz Pan",
        "timestamp": 1699745433
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 401557332,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699751095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Finset.card, Multiset.Nodup</p>",
        "id": 401557358,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699751110
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Card.html#Finset.card_mk\">Finset.card_mk</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Card.html#Multiset.toFinset_card_of_nodup\">Multiset.toFinset_card_of_nodup</a></p>",
        "id": 401557360,
        "sender_full_name": "loogle",
        "timestamp": 1699751111
    },
    {
        "content": "<p>In fact you should first prove <code>card m.dedup = card m ↔ m.Nodup</code>.</p>",
        "id": 401592859,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699779049
    },
    {
        "content": "<p>@loogle Multiset.card, Multiset.dedup</p>",
        "id": 401596610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699781526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Multiset.card, Multiset.dedup</p>",
        "id": 401596620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699781537
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Card.html#Multiset.card_toFinset\">Multiset.card_toFinset</a></p>",
        "id": 401596621,
        "sender_full_name": "loogle",
        "timestamp": 1699781538
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Multiset</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">m.dedup</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">m.Nodup</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eq_of_le_of_card_le</span> <span class=\"o\">(</span><span class=\"n\">dedup_le</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">h.ge</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">dedup_eq_self</span>\n</code></pre></div>",
        "id": 401600161,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699783772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Converse.20to.20.60Multiset.2EtoFinset_card_of_nodup.60.3F/near/401600161\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Multiset</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">m.dedup</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">m.Nodup</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eq_of_le_of_card_le</span> <span class=\"o\">(</span><span class=\"n\">dedup_le</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">h.ge</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">dedup_eq_self</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Cool! This is much shorter than my proof. Should this be added in mathlib?</p>",
        "id": 401642425,
        "sender_full_name": "Jz Pan",
        "timestamp": 1699825566
    },
    {
        "content": "<p>What do you think, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> ? :)</p>",
        "id": 401642566,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699825794
    },
    {
        "content": "<p>I opened the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8515\">#8515</a>. Comments are welcomed.</p>",
        "id": 403051719,
        "sender_full_name": "Jz Pan",
        "timestamp": 1700427529
    }
]