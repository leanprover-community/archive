[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.OfFn</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.ofFn_inj.mp</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 399892186,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698918068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 399892295,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698918107
    },
    {
        "content": "<p>This also works (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinVec.etaExpand_eq#doc\">docs#FinVec.etaExpand_eq</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Reflection</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FinVec.etaExpand_eq</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 399894336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698918787
    },
    {
        "content": "<p>Which way is recommended for mathlib?</p>",
        "id": 399898070,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698919924
    },
    {
        "content": "<p>In the long run, <a href=\"https://github.com/leanprover-community/mathlib4/pull/5863\">#5863</a>...</p>",
        "id": 399899061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698920243
    }
]