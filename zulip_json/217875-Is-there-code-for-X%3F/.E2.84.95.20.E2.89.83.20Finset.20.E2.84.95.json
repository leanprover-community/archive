[
    {
        "content": "<p>I'm looking for the equivalence that maps each <code>n</code> to the <code>Finset ℕ</code> that its binary representation encodes. Is that somewhere?</p>",
        "id": 405150992,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1701360757
    },
    {
        "content": "<p>What's the map, exactly?</p>",
        "id": 405151153,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701360811
    },
    {
        "content": "<p>The inverse of the map takes {2,3,37} to 2^2 + 2^3 + 2^37.</p>",
        "id": 405151483,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1701360917
    },
    {
        "content": "<p>I hope that's sufficient as a definition.</p>",
        "id": 405151864,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1701361042
    },
    {
        "content": "<p>Hmm, I see. I don't think we have that</p>",
        "id": 405152239,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701361171
    },
    {
        "content": "<p>We have <code>Digits</code> right?</p>",
        "id": 405152727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701361331
    },
    {
        "content": "<p>With a bit of list manipulation, we should be able to turn it into the required finset.</p>",
        "id": 405152764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701361351
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 405152964,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1701361434
    },
    {
        "content": "<p>This feels like a good building block:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- we have to use `DFinsupp` because `Finsupp.single` is not computable</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.equivDigits</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π₀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Nat.digits</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">attach.enum.map</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DFinsupp.single</span> <span class=\"n\">d.1</span> <span class=\"o\">⟨</span><span class=\"n\">d.2</span><span class=\"o\">,</span> <span class=\"n\">Nat.digits_lt_base</span> <span class=\"n\">hb</span> <span class=\"n\">d.2.prop</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.sum</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Nat.equivDigits</span> <span class=\"mi\">10</span> <span class=\"gr\">sorry</span> <span class=\"mi\">10203</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinsupp</span>\n<span class=\"c1\">-- fun₀ | 0 =&gt; 3 | 2 =&gt; 2 | 4 =&gt; 1</span>\n</code></pre></div>",
        "id": 405156525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701362517
    },
    {
        "content": "<p>This is the TODO in <code>Combinatorics.SetFamily.Colex</code>.</p>",
        "id": 405164190,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701364829
    },
    {
        "content": "<p>My definition or Peter's?</p>",
        "id": 405171794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701367467
    },
    {
        "content": "<p>Peter's. Well, after composing with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Colex.ofColex#doc\">docs#Finset.Colex.ofColex</a></p>",
        "id": 405195162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701375733
    }
]