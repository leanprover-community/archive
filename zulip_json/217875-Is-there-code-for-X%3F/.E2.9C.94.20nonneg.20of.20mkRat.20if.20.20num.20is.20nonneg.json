[
    {
        "content": "<p>I am currently looking for a theorem that says something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">Rat.mkRat</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Anyone a clue, where this could be found or how to prove it easily?</p>",
        "id": 390740665,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1694616521
    },
    {
        "content": "<p>I got it now. Use <code>Rat.divInt_ofNat</code> or <code>Rat.mk_eq_divInt</code> to make it to a division and proceed from there</p>",
        "id": 390743267,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1694617274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571277\">Ira Fesefeldt</span> has marked this topic as resolved.</p>",
        "id": 390743274,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694617276
    },
    {
        "content": "<p>I fought a bit with <code>mkRat</code> until I found <code>Rat.mkRat_eq_div</code> which is much nicer indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">mkRat</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Rat.mkRat_eq_div</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">div_nonneg</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.cast_nonneg</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 390744672,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694617665
    },
    {
        "content": "<p>Thanks! Will use it</p>",
        "id": 390746117,
        "sender_full_name": "Ira Fesefeldt",
        "timestamp": 1694618064
    }
]