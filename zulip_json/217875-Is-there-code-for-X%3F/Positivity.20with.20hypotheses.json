[
    {
        "content": "<p>Today I tried using <code>positivity</code> for the first time, but it didn't work, and maybe I misunderstood how it works. I had the following state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">LinearOrderedField</span> <span class=\"n\">α</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"n\">η</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span>\n<span class=\"n\">hη</span><span class=\"o\">:</span> <span class=\"n\">η</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">dp1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hP₁</span><span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"n\">dp1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">hP₀</span><span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">dp1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">dp1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">η</span> <span class=\"bp\">-</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"n\">dp1</span>\n</code></pre></div>\n<p>I was expecting positivity to look at the expression <code>coeff P dp1</code> and see that <code>hP₁</code> guarantees that it's negative, etc. and the product of two positive numbers is positive, and a positive number minus a negative is a positive, qed. I guess that <code>positivity</code> doesn't use hypotheses? Any tips?</p>",
        "id": 407326736,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702332030
    },
    {
        "content": "<p>To be clear, this isn't a hard one to solve.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hP₀</span> <span class=\"n\">hη</span>\n<span class=\"n\">linarith</span>\n</code></pre></div>\n<p>closes the goal. Just slightly disappointed. :)<br>\nSide note: it's odd that <code>positivity</code> only handles <code>0 &lt; x</code>, but not <code>x &lt; y</code> or even <code>x &lt; 0</code>.</p>",
        "id": 407327117,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702332148
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? (that way people will find it easier to debug)</p>",
        "id": 407327197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702332174
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.RingDivision</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">hη</span> <span class=\"o\">:</span> <span class=\"n\">η</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dp1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP₁</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"n\">dp1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP₀</span><span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">dp1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">dp1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">η</span> <span class=\"bp\">-</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"n\">dp1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- have := mul_pos hP₀ hη</span>\n    <span class=\"c1\">-- linarith</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407327762,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702332352
    },
    {
        "content": "<p>Here's the step it's stuck on (the issue is not hypotheses, <code>positivity</code> deals with these fine).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 407328135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702332508
    },
    {
        "content": "<p>I thought the idea was that positivity dealt with things that are \"structurally\" positive, so subtraction is out of scope?</p>",
        "id": 407328528,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702332703
    },
    {
        "content": "<p>BTW</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">demo</span> <span class=\"o\">(</span><span class=\"n\">hη</span> <span class=\"o\">:</span> <span class=\"n\">η</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dp1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP₁</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"n\">dp1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP₀</span><span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">dp1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">dp1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">η</span> <span class=\"bp\">-</span> <span class=\"n\">coeff</span> <span class=\"n\">P</span> <span class=\"n\">dp1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 407328566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702332720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Positivity.20with.20hypotheses/near/407328528\">said</a>:</p>\n<blockquote>\n<p>I thought the idea was that positivity dealt with things that are \"structurally\" positive, so subtraction is out of scope?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">positivity</span>\n</code></pre></div>\n<p>works but maybe subtraction is feature creep?</p>",
        "id": 407328699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702332765
    },
    {
        "content": "<p>Neat! I didn't know about <code>nlinarith</code>. It's always disappointingly hard to find a list of these great tactics <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 407345040,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702341512
    },
    {
        "content": "<p>The way I understood it, <code>positivity</code> recursively decides terms to be some subset of {positive, negative, zero} and then works its way up from there. Seems like it should be straightforward to add a rule that {positive,zero}-{negative,zero} is {positive,zero} and {positive}-{negative} is {negative}, no?</p>\n<p>Maybe I should learn some more lean so I could do that...</p>",
        "id": 407345389,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702341693
    },
    {
        "content": "<p>Oh, I misremembered. It's \"positive\", \"nonnegative\", \"nonzero\", or \"none\".</p>",
        "id": 407345503,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702341737
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">_</span> <span class=\"bp\">/</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalDiv</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">zα</span> <span class=\"n\">pα</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not /\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">_e_eq</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">_a</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">LinearOrderedSemifield</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n  <span class=\"n\">assumeInstancesCommute</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_f_eq</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">withDefault</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">assertDefEqQ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">u.succ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">HDiv.hDiv</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ra</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">zα</span> <span class=\"n\">pα</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">rb</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">zα</span> <span class=\"n\">pα</span> <span class=\"n\">b</span>\n  <span class=\"k\">match</span> <span class=\"n\">ra</span><span class=\"o\">,</span> <span class=\"n\">rb</span> <span class=\"k\">with</span>\n</code></pre></div>\n<p>ha! nope. Nope, I'm messing around with that. No idea. :)</p>",
        "id": 407346288,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1702342108
    },
    {
        "content": "<blockquote>\n<p>It's always disappointingly hard to find a list of these great tactics</p>\n</blockquote>\n<p>mathlib 3 has <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a>, not sure if there's a similar page for mathlib 4</p>",
        "id": 407352752,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1702345315
    },
    {
        "content": "<p>There was some recent discussion <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Congr.20in.20hypothesis/near/406292988\">here</a>.</p>",
        "id": 407353616,
        "sender_full_name": "Richard Copley",
        "timestamp": 1702345786
    },
    {
        "content": "<p>Certainly I'd be happy with <code>positivity</code> handling negative inputs. It makes the logic of extensions slightly more complicated, but it does let us handle more cases that actually show up in practice.</p>",
        "id": 407406702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702365039
    }
]