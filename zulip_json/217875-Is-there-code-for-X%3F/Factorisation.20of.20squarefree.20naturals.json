[
    {
        "content": "<p>I'm having trouble putting the pieces together. Do we have anything related to the prime factorisation of a squarefree natural?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Squarefree</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Int.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_support_factorization_of_squarefree</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">support_factorization_prod</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p.Prime</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">factorization</span> <span class=\"bp\">$</span> <span class=\"bp\">∏</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">support_factorization_div_gcd</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">factorization</span> <span class=\"bp\">$</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">m.gcd</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"n\">factorization</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 393027963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695651779
    },
    {
        "content": "<p>This is probably a question for <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span></p>",
        "id": 393028015,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695651794
    },
    {
        "content": "<p>I feel like the first lemma is true for more than just squarefree numbers</p>",
        "id": 393028345,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695651876
    },
    {
        "content": "<p>No. <code>(factorization 4).support = {2}</code>.</p>",
        "id": 393028528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695651933
    },
    {
        "content": "<p>Oh is it not <code>Nat.factorization</code>? Sorry.</p>",
        "id": 393028994,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695652043
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factorization_prod_pow_eq_self#doc\">docs#Nat.factorization_prod_pow_eq_self</a> would be the lemma for Nat.factorization</p>",
        "id": 393029092,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695652070
    },
    {
        "content": "<p>It is. And <code>Nat.factorization 4</code> is the <code>Finsupp</code> with value <code>2</code> at <code>2</code> and <code>0 </code> elsewhere, so its support is <code>{2}</code>.</p>",
        "id": 393029253,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695652111
    },
    {
        "content": "<p>Oh I understand now, it's without the exponent, thanks.</p>",
        "id": 393029358,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695652146
    },
    {
        "content": "<p>Also we really need <code>primeFactors : Finset ℕ := (Nat.factorization n).support</code>.</p>",
        "id": 393030187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695652326
    },
    {
        "content": "<p>Let me write that quickly.</p>",
        "id": 393030348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695652353
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/287929-mathlib4/topic/toFinsetFactors/near/391003733\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/toFinsetFactors/near/391003733</a></p>",
        "id": 393036279,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1695653859
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.prod_factors_toFinset_of_squarefree#doc\">docs#Nat.prod_factors_toFinset_of_squarefree</a> for the first one</p>",
        "id": 393037216,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1695654086
    },
    {
        "content": "<p>I got the first two. What about the third?</p>",
        "id": 393037658,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695654180
    },
    {
        "content": "<p>in your MWE it's picking up <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=factorization#doc\">docs#factorization</a>, btw</p>",
        "id": 393039162,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695654540
    },
    {
        "content": "<p>Are they not equal, actually?</p>",
        "id": 393039362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695654586
    },
    {
        "content": "<p>probably? api is disjoint though</p>",
        "id": 393039838,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695654715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> factorization, Nat.factorization</p>",
        "id": 393039857,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695654722
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 393039864,
        "sender_full_name": "loogle",
        "timestamp": 1695654722
    },
    {
        "content": "<p>Ugh, time for a refactor, I guess.</p>",
        "id": 393040416,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695654868
    },
    {
        "content": "<p>i mean but then you ruin the fact that <code>Nat.factorization</code> is computable</p>",
        "id": 393040712,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695654956
    },
    {
        "content": "<p>i take that back and instead say computable efficiently</p>",
        "id": 393040817,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695654975
    },
    {
        "content": "<p>I'm not sure if <code>factorization</code> runs in a decent time for e.g. the Gaussian integers</p>",
        "id": 393040858,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695654985
    },
    {
        "content": "<p><code>noncomputable</code>, never mind</p>",
        "id": 393040876,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695654992
    },
    {
        "content": "<p>Yeah, it's a <code>Finsupp</code></p>",
        "id": 393040903,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695654999
    },
    {
        "content": "<p>still computable, we don't have the lean3 poisoning</p>",
        "id": 393041042,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695655034
    },
    {
        "content": "<p>It's not even like you can evaluate it (there's currently no representation for <code>Finsupp</code>). If you want decent pretty-printing results, you should use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.factors#doc\">docs#Nat.factors</a>.</p>",
        "id": 393041059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695655037
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/-LGQkdeL-yEf1bQ68Sx-f7xT/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-LGQkdeL-yEf1bQ68Sx-f7xT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-LGQkdeL-yEf1bQ68Sx-f7xT/image.png\"></a></div>",
        "id": 393041373,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695655102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  made this recently iirc</p>",
        "id": 393041406,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695655109
    },
    {
        "content": "<p>I was not made aware!</p>",
        "id": 393041585,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695655153
    },
    {
        "content": "<p>Note that the notation it prints isn't computable!</p>",
        "id": 393041696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695655190
    },
    {
        "content": "<p>So you can't actually paste it and evaluate it, but you can paste it for use in a proof</p>",
        "id": 393041834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695655217
    },
    {
        "content": "<p>The new notation should be visible in things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.single_add#doc\">docs#Finsupp.single_add</a></p>",
        "id": 393041941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695655249
    },
    {
        "content": "<p>Lol I guess not, weird</p>",
        "id": 393042059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695655273
    },
    {
        "content": "<p>Yeah exactly. I knew you added the notation, but I understood it was input-only.</p>",
        "id": 393042235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695655298
    },
    {
        "content": "<p>assuming <code>example {m n : ℕ} (h : Squarefree m) : Coprime (m / gcd m n) n</code>, here's a solution</p>",
        "id": 393048727,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695656663
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mono</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CanonicallyOrderedAddMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.support</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">ht</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ht</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.le_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.mem_support_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pos_iff_ne_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Finsupp.mem_support_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">ht.trans_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne'</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">support_factorization_div_gcd</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.factorization</span> <span class=\"bp\">$</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">m.gcd</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"n\">Nat.factorization</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">\\</span> <span class=\"o\">(</span><span class=\"n\">Nat.factorization</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">factorization_div</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">gcd_dvd_left</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">factorization</span> <span class=\"n\">m</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">factorization</span> <span class=\"n\">n</span>\n  <span class=\"n\">set</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">factorization</span> <span class=\"o\">(</span><span class=\"n\">m.gcd</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subset_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.subset_sdiff</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">mono</span> <span class=\"n\">tsub_le_self</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">factorization_div</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">gcd_dvd_left</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">factorization_disjoint_of_coprime</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine</span> <span class=\"n\">tsub_le_tsub_left</span> <span class=\"bp\">?</span><span class=\"n\">h</span> <span class=\"n\">f</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">factorization_le_iff_dvd</span> <span class=\"o\">(</span><span class=\"n\">Nat.gcd_ne_zero_left</span> <span class=\"n\">hm.ne_zero</span><span class=\"o\">)</span> <span class=\"n\">hn.ne_zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n      <span class=\"n\">exact</span> <span class=\"n\">gcd_dvd_right</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.subset_support_tsub</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mono</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(adding Mathlib.Data.Nat.Factorization.Basic as an import)</p>",
        "id": 393048842,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695656699
    },
    {
        "content": "<p>I'm kind of surprised the first lemma doesn't exist</p>",
        "id": 393048882,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695656708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> Monotone, <a href=\"http://Finsupp.support\">Finsupp.support</a></p>",
        "id": 393048903,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695656717
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 393048906,
        "sender_full_name": "loogle",
        "timestamp": 1695656718
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Notation.20for.20.02klzzwxh.3A0000.03\">#general &gt; Notation for <code>Finsupp</code></a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 393062342,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695660159
    },
    {
        "content": "<p>Can you remove <code>hn : Squarefree n</code>?</p>",
        "id": 393063161,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695660465
    },
    {
        "content": "<p>I guess so, unless my little lemma is false without that. (I really doubt it considering I <code>slim_check</code>ed it)</p>",
        "id": 393065063,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695661071
    },
    {
        "content": "<p>Oh, I see that <code>n ≠ 0</code> is necessary</p>",
        "id": 393068453,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695662080
    },
    {
        "content": "<p>This was my proof. I defined <code>primeFactors n</code> as <code>(factorization n).support</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mem_primeFactors</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">n.primeFactors</span> <span class=\"bp\">↔</span> <span class=\"n\">p.Prime</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">primeFactors_div_gcd</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span>  <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">primeFactors</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">m.gcd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">primeFactors</span> <span class=\"n\">m</span> <span class=\"bp\">\\</span> <span class=\"n\">primeFactors</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">m.gcd</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.div_ne_zero</span> <span class=\"bp\">$</span> <span class=\"n\">gcd_ne_zero_right</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">$</span> <span class=\"n\">gcd_le_left</span> <span class=\"n\">_</span> <span class=\"n\">hm.ne_zero.bot_lt</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_primeFactors</span><span class=\"o\">,</span> <span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">not_false_eq_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">mem_sdiff</span><span class=\"o\">,</span>\n    <span class=\"n\">hm.ne_zero</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">dvd_div_iff</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨⟨</span><span class=\"n\">hp.1</span><span class=\"o\">,</span> <span class=\"n\">dvd_of_mul_left_dvd</span> <span class=\"n\">hp.2</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">hpn</span> <span class=\"bp\">↦</span> <span class=\"n\">hp.1.not_unit</span> <span class=\"bp\">$</span> <span class=\"n\">hm</span> <span class=\"n\">_</span> <span class=\"bp\">$</span>\n    <span class=\"o\">(</span><span class=\"n\">mul_dvd_mul_right</span> <span class=\"o\">(</span><span class=\"n\">dvd_gcd</span> <span class=\"o\">(</span><span class=\"n\">dvd_of_mul_left_dvd</span> <span class=\"n\">hp.2</span><span class=\"o\">)</span> <span class=\"n\">hpn</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hp.2</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"bp\">↦</span>\n      <span class=\"o\">⟨</span><span class=\"n\">hp.1.1</span><span class=\"o\">,</span> <span class=\"n\">Coprime.mul_dvd_of_dvd_of_dvd</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hp.1.2</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coprime_comm</span><span class=\"o\">,</span> <span class=\"n\">hp.1.1.coprime_iff_not_dvd</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">hpn</span> <span class=\"bp\">↦</span> <span class=\"n\">hp.2</span> <span class=\"n\">hp.1.1</span> <span class=\"bp\">$</span> <span class=\"n\">hpn.trans</span> <span class=\"bp\">$</span> <span class=\"n\">gcd_dvd_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 393088360,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695668598
    },
    {
        "content": "<p>Here is where I use it (Marica-Schönheim), if you're interested: <a href=\"#narrow/stream/116395-maths/topic/Discrete.20correlation.20inequalities\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Discrete.20correlation.20inequalities</a></p>",
        "id": 393106713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695674316
    }
]