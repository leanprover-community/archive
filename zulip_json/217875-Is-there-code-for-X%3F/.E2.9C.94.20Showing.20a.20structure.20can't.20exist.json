[
    {
        "content": "<p>Is there any way to write the equivalent of \"it is impossible to implement this structure on this type\"? My best attempt has been this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">ordered_field</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where \"ordered_field\" is the structure and \"s\" is the type, but that obviously doesn't work as negation requires a Prop while the stuff inside the brackets is a Type. Is there a way to do this correctly or should I use something other than a structure?</p>",
        "id": 375285271,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1689344686
    },
    {
        "content": "<p>You could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_field</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">ordered_field</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 375288153,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689345213
    },
    {
        "content": "<p>There's this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">some_hypotheses_here</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ordered_field</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which says that there does not exist an ordered field structure on <code>s</code>, but it's probably not what you want because it doesn't say anything about what the field or order structures are. Instead, maybe you would want (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">some_other_hypotheses</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ordered_field</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h.le</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">h.mul</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">h.add</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">h.one</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">h.zero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This says that if <code>s</code> is a type with some <code>field</code> and <code>partial_order</code> structure, it is not an <code>ordered_field</code> with those operations.</p>",
        "id": 375288189,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689345219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> the first one seems to work for me but I'm slightly confused. I thought implication operates on Prop?</p>",
        "id": 375291460,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1689345819
    },
    {
        "content": "<p><code>→</code> is the generic function type. When the things on both the left and right of it are <code>Prop</code>s, then it is the special case of an implication.</p>",
        "id": 375291952,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689345898
    },
    {
        "content": "<p>The symbol <code>-&gt;</code> means \"function\", so <code>ordered_field s -&gt; false</code> means that every time you a term of type <code>ordered_field </code> you get a term of type <code>false</code>, so in practice if you have an <code>ordered_field</code> structure you can derive a contradiction.</p>",
        "id": 375292003,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1689345905
    },
    {
        "content": "<p>But note, as I said above, that this is probably <em>not</em> what you want to say. For example, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_field</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is <em>not</em> provable.</p>",
        "id": 375292600,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689345985
    },
    {
        "content": "<p>I should say that if you're trying to show that <code>complex</code> can't be a linear order, neither of those spellings will work, since <code>linear_ordered_field</code> contains the data of the group structure, and you could set it to be \"the group structure on <code>real</code> by identifying <code>real</code> and <code>complex</code> because they have the same size\".</p>",
        "id": 375292782,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689346016
    },
    {
        "content": "<p>You will also need to state the group structure coming from <code>linear_ordered_field complex</code> agrees with the existing group structure.</p>",
        "id": 375293076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689346073
    },
    {
        "content": "<p>Yaël, this is exactly what I was suggesting above.</p>",
        "id": 375293592,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689346172
    },
    {
        "content": "<p>Sorry I had already typed a long paragraph by the time your message came in <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 375294027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689346249
    },
    {
        "content": "<p>You can prove something like (Lean 4 syntax)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">≃+*</span><span class=\"n\">o</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≃+*</span><span class=\"n\">o</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 375309353,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689349139
    },
    {
        "content": "<p>I can confirm that Jireh's method works. It took a while and the proof's a bit messy but I got there. Thanks for the help!</p>",
        "id": 375385261,
        "sender_full_name": "shortc1rcuit",
        "timestamp": 1689367457
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Hom.Ring</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">ComplexOrder</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≃+*</span><span class=\"n\">o</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lt_irrefl</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">e.symm</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">e.symm</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">mul_self_nonneg</span> <span class=\"n\">_</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">map_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 375394877,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689370874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"632788\">shortc1rcuit</span> has marked this topic as resolved.</p>",
        "id": 376320807,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689681334
    }
]