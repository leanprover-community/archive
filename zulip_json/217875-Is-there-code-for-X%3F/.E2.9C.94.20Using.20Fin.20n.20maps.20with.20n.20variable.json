[
    {
        "content": "<p>I want to create a structure given <code>len : Nat</code> and <code>vec : Fin len → ℝ</code>. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">TestStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">vec</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">len</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Test</span> <span class=\"o\">:</span> <span class=\"n\">TestStruct</span> <span class=\"n\">where</span>\n  <span class=\"n\">len</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n  <span class=\"n\">vec</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Test compiles and inside that block Lean understands <code>vec : Fin 2 → ℝ</code>, but elsewhere I need to know that <code>vec 0 = 0</code> for other computations. I want something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">Test.len</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">vec0</span> <span class=\"o\">:</span> <span class=\"n\">Test.vec</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Lean threw errors until I added the <code>OfNat</code> instance, I'm guessing that it is trying to tell if 0 belongs to <code>Fin Test.len</code>. Even adding that line the theorem seems like it should be true by definition but Lean disagrees. How can I get the info I want, or is there a better way to do this?</p>",
        "id": 377428532,
        "sender_full_name": "Daniel Morrison",
        "timestamp": 1689973772
    },
    {
        "content": "<p>It doesn't know that <code>Test.len</code> is nonzero while trying to synthesize that <code>OfNat</code> instance. If you make your definition <code>@[reducible]</code> it probably will work.</p>",
        "id": 377429479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689974121
    },
    {
        "content": "<p>It did work! What does <code>@[reducible]</code> do that makes this work?</p>",
        "id": 377433610,
        "sender_full_name": "Daniel Morrison",
        "timestamp": 1689975538
    },
    {
        "content": "<p>It causes Lean to more readily unfold the definition of <code>Test</code>, and typeclass inference generally won't unfold a <code>def</code> unless it's reducible.</p>",
        "id": 377434630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689975948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622397\">Daniel Morrison</span> has marked this topic as resolved.</p>",
        "id": 377434723,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689975977
    }
]