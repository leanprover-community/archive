[
    {
        "content": "<p>Suppose I have a map <code>f : Fin n → X</code>, and a subset <code>S</code> of <code>Fin n</code> of cardinality <code>m = S.card</code>; I'd like to create a map <code>g : Fin m → X</code>by restricting <code>f</code> to the elements of <code>S</code>. Is there a clean way to do this? Thanks!</p>",
        "id": 351149013,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1681936883
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.equiv_fin\">docs#fintype.equiv_fin</a> composed with <code>f</code>, I suppose?</p>",
        "id": 351149943,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681937244
    },
    {
        "content": "<p>you may need to cast to get the right <code>m</code> in the <code>fin m</code> as well, but that should be straightforward.</p>",
        "id": 351150021,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1681937281
    },
    {
        "content": "<p>Can you write out the full mwe?</p>",
        "id": 351151704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681937965
    },
    {
        "content": "<p>This sounds like something that can be done computably if the details are what I think they are</p>",
        "id": 351151889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681938019
    },
    {
        "content": "<p>(concretely, I think the statement I think we should have is <code>[FinEnum X] (s : Finset X) : FinEnum s</code>)</p>",
        "id": 351153581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681938664
    },
    {
        "content": "<p>That's great, thanks! I'll try to play with that in my application...</p>",
        "id": 351154754,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1681939141
    }
]