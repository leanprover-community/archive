[
    {
        "content": "<p>Do I understand from <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/Submonoid/Inverses.html\">this</a> that there is no concept of Sˣ where S is a submonoid of a monoid?</p>",
        "id": 406741300,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702035448
    },
    {
        "content": "<p>Or rather, I suppose this concept exists, but there's no API for it?</p>",
        "id": 406741359,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702035470
    },
    {
        "content": "<p>I assume you're talking about the TODO comment referring to <a href=\"https://github.com/leanprover-community/mathlib/pull/10679\">!3#10679</a> ?</p>",
        "id": 406741619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702035589
    },
    {
        "content": "<p>Yes.</p>",
        "id": 406743752,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702036601
    },
    {
        "content": "<p>Can you remind my why your request is not just <code>Units S</code>?</p>",
        "id": 406747481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702038131
    },
    {
        "content": "<p>It might be! I am just finding working with that tricky.</p>\n<p>This is my situation. I have S, Submonoid M.  I have T, Subgroup N where we have m : N ≃* Mˣ. M is a monoid, N is a group ( I think).</p>\n<p>It is also true that ∀ x : N, x ∈ T ↔ (m x).val ∈ S</p>\n<p>I want to show that T ≃* Sˣ.</p>\n<p>(This is because I have some MulEquiv between another monoid M2 ≃* S, and I want to show that M2ˣ ≃* T.)</p>",
        "id": 406750535,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702039240
    },
    {
        "content": "<p>Might not have all the details right there. To be more concrete:<br>\nI have <code>\\beta -&gt; Function.End (\\alp) ≃* S</code>, where S is a submonoid of <code>Function.End (\\gam)</code>.<br>\nI can prove that <code>(\\beta -&gt; Function.End (\\alp))ˣ ≃* \\beta -&gt; Equiv.Perm (\\alp)</code>.<br>\nI want to show that <code>\\beta -&gt; Equiv.Perm (\\alp) ≃* T</code>, where <code>T</code> is a subgroup of  <code>Equiv.Perm (\\gam)</code> such that π is in <code>T</code> just when <code>⇑π</code> is in <code>S</code>.</p>",
        "id": 406751314,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702039499
    },
    {
        "content": "<p>In other words, T is \"filter the Equivs by the same filter we use on the Ends to get S\" (and this does form a subgroup).</p>",
        "id": 406751499,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702039562
    },
    {
        "content": "<p>Can you make that first comment into a mwe?</p>",
        "id": 406752063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702039731
    },
    {
        "content": "<p>Which one? I will do, just went for lunch.</p>",
        "id": 406752212,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702039777
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Units.Equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 406761374,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702043108
    },
    {
        "content": "<p>And the whole context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Units.Equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">barfoo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">N₂</span> <span class=\"bp\">≃*</span> <span class=\"n\">M₂</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N₂</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">e₂.trans</span> <span class=\"o\">((</span><span class=\"n\">Units.mapEquiv</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">foobar</span> <span class=\"n\">e</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 406761418,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702043123
    },
    {
        "content": "<p><code>.trans ?_ (e.submonoidMap T.toSubmonoid).symm</code> maybe makes some progress but I'm not certain</p>",
        "id": 406765915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702044371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Units.Equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Submonoid.twoSidedInv</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">S.mul_mem</span> <span class=\"n\">ha.1</span> <span class=\"n\">hb.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">Units.val_mul</span><span class=\"o\">,</span> <span class=\"n\">S.mul_mem</span> <span class=\"n\">hb.2</span> <span class=\"n\">ha.2</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">S.one_mem</span><span class=\"o\">,</span> <span class=\"n\">S.one_mem</span><span class=\"o\">⟩</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ha.2</span><span class=\"o\">,</span> <span class=\"n\">ha.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Submonoid.mem_twoSidedInv_iff</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S.twoSidedInv</span> <span class=\"bp\">↔</span>\n<span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"bp\">!</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Submonoid.unitsEquivTwoSidedInv</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"n\">S.twoSidedInv</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">ˣ</span><span class=\"o\">),</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Submonoid.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_one</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Submonoid.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_one</span><span class=\"o\">]⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">SetLike.coe_mem</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">SetLike.coe_mem</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">),</span> <span class=\"n\">x.2.1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">),</span> <span class=\"n\">x.2.2</span><span class=\"o\">⟩,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Submonoid.mk_mul_mk</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_one</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Submonoid.mk_mul_mk</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_one</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_eta</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mk</span><span class=\"o\">,</span> <span class=\"n\">Units.mk_val</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.inv_mk</span><span class=\"o\">,</span> <span class=\"n\">Units.mk_val</span><span class=\"o\">,</span> <span class=\"n\">Subtype.coe_eta</span><span class=\"o\">]</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.val_mul</span><span class=\"o\">,</span> <span class=\"n\">Submonoid.coe_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar1</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">Subgroup.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S.twoSidedInv</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">S.unitsEquivTwoSidedInv.trans</span> <span class=\"o\">(((</span><span class=\"n\">MulEquiv.subgroupMap</span> <span class=\"n\">e</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">foobar1</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">S.twoSidedInv</span><span class=\"o\">)</span> <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">MulEquiv.subgroupMap</span> <span class=\"n\">e</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">barfoo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">N₂</span> <span class=\"bp\">≃*</span> <span class=\"n\">M₂</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N₂</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">e₂.trans</span> <span class=\"o\">((</span><span class=\"n\">Units.mapEquiv</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">foobar</span> <span class=\"n\">e</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 406784336,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702050171
    },
    {
        "content": "<p>This helps a bit.</p>",
        "id": 406784361,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702050178
    },
    {
        "content": "<p>Specifically this <code>Submonoid.twoSidedInv</code> construct is the thing I felt was missing.</p>",
        "id": 406784440,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702050200
    },
    {
        "content": "<p><code>foobar1</code> feels \"obvious\" but I can't find a theorem for it. Essentially you're saying that if you restrict a MulEquiv to subgroups in a way that is surjective, it's a mul equiv on the subgroups.</p>",
        "id": 406784770,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702050315
    },
    {
        "content": "<p>Which surely we have.</p>",
        "id": 406784796,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702050321
    },
    {
        "content": "<p>It may be actually that we have an equality...</p>",
        "id": 406785072,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702050401
    },
    {
        "content": "<p>Yes!</p>",
        "id": 406785430,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702050508
    },
    {
        "content": "<p>overlong message deleted</p>",
        "id": 406786146,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702050749
    },
    {
        "content": "<p>Here we go:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Units.Equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.Subgroup.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Submonoid.twoSidedInv</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">S.mul_mem</span> <span class=\"n\">ha.1</span> <span class=\"n\">hb.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">Units.val_mul</span><span class=\"o\">,</span> <span class=\"n\">S.mul_mem</span> <span class=\"n\">hb.2</span> <span class=\"n\">ha.2</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">S.one_mem</span><span class=\"o\">,</span> <span class=\"n\">S.one_mem</span><span class=\"o\">⟩</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ha.2</span><span class=\"o\">,</span> <span class=\"n\">ha.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Submonoid.mem_twoSidedInv_iff</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S.twoSidedInv</span> <span class=\"bp\">↔</span>\n<span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"bp\">!</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Submonoid.unitsEquivTwoSidedInv</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"n\">S.twoSidedInv</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">ˣ</span><span class=\"o\">),</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Submonoid.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_one</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Submonoid.coe_mul</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_one</span><span class=\"o\">]⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">SetLike.coe_mem</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">SetLike.coe_mem</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">),</span> <span class=\"n\">x.2.1</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">),</span> <span class=\"n\">x.2.2</span><span class=\"o\">⟩,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Submonoid.mk_mul_mk</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_one</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Submonoid.mk_mul_mk</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"n\">OneMemClass.coe_one</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Subtype.coe_eta</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mk</span><span class=\"o\">,</span> <span class=\"n\">Units.mk_val</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.inv_mk</span><span class=\"o\">,</span> <span class=\"n\">Units.mk_val</span><span class=\"o\">,</span> <span class=\"n\">Subtype.coe_eta</span><span class=\"o\">]</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.val_mul</span><span class=\"o\">,</span> <span class=\"n\">Submonoid.coe_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar1</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">Subgroup.map</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">S.twoSidedInv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">MulEquiv.map_inv</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">T.inv_mem</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">MulEquiv.apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">S.unitsEquivTwoSidedInv.trans</span> <span class=\"o\">((</span><span class=\"n\">foobar1</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">T</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">MulEquiv.subgroupMap</span> <span class=\"n\">e</span> <span class=\"n\">T</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">barfoo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">N₂</span> <span class=\"bp\">≃*</span> <span class=\"n\">M₂</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span> <span class=\"bp\">≃*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N₂</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">e₂.trans</span> <span class=\"o\">((</span><span class=\"n\">Units.mapEquiv</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">foobar</span> <span class=\"n\">e</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 406791352,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702052013
    },
    {
        "content": "<p>I tried to golf that first definition but I think the result is worse:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Submonoid.twoSidedInv</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">toSubmonoid</span> <span class=\"o\">:=</span> <span class=\"n\">S.comap</span> <span class=\"o\">(</span><span class=\"n\">Units.coeHom</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">S.comap</span> <span class=\"o\">((</span><span class=\"n\">Units.coeHom</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">MulEquiv.inv'</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.toMonoidHom</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">unop</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ha.2</span><span class=\"o\">,</span> <span class=\"n\">ha.1</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 406794008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702052590
    },
    {
        "content": "<p>I mean if it has the same simps lemmas etc...</p>",
        "id": 406794367,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702052666
    },
    {
        "content": "<p>Please see <a href=\"https://github.com/leanprover-community/mathlib4/pull/9006\">#9006</a>.</p>",
        "id": 407520481,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702399972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I used your definition in the end because it's perfectly fine for using in practice and is more concise.</p>",
        "id": 407520580,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702400014
    },
    {
        "content": "<p>I think it may be possible to make an even more concise definition using the supremum however!</p>",
        "id": 407522035,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702400435
    },
    {
        "content": "<p>-- nope</p>",
        "id": 407523028,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702400727
    },
    {
        "content": "<p>This is just the \"set\" <code>Sˣ</code> (packaged as a <code>Subgroup Mˣ</code>), right?</p>",
        "id": 407524398,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702401228
    },
    {
        "content": "<p>It's certainly equivalent to it - like, yes, but as you say the packaging is different.</p>",
        "id": 407524695,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702401350
    },
    {
        "content": "<p>In practice being able to use it as a <code>Subgroup Mˣ</code> was useful.</p>",
        "id": 407524772,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702401366
    },
    {
        "content": "<p>So I suggest to modify the docs: you can explain the actual definition in a section \"implementation detail\", but then just says \"the units of <code>S</code> packaged as a <code>Subgroup Mˣ</code>. Normally the user doesn't want to know the actual definition, it is your job to proved a nice API :)</p>",
        "id": 407524990,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702401469
    },
    {
        "content": "<p>I am also wondering whether this can replace <code>IsUnit.submonoid</code> entirely, it looks just better. (even if one can probably find situations where <code>IsUnit.submonoid</code> needs to be used)</p>",
        "id": 407526142,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702401856
    },
    {
        "content": "<p>Cool, thanks - I've not got much experience writing docs from scratch.</p>\n<p>Yes - I think probably this is Just Better than IsUnit.submonoid. But I didn't want to start by removing stuff.</p>\n<p>I will probably focus on improving the API before I finalise the docs though. In particular it would be nice to prove this Galois connection that I think exists between <code>Submonoid.units</code> and the following coercion.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Subgroup.unitsHasCoeToSubmonoid</span> <span class=\"o\">:</span> <span class=\"n\">CoeOut</span> <span class=\"o\">(</span><span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H.toSubmonoid.map</span> <span class=\"o\">(</span><span class=\"n\">Units.coeHom</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>With this coercion, I think we have <code>S.units = sSup (fun H : Subgroup Mˣ =&gt; H ≤ S)</code>, from which I think proving the GC would not be so hard. But proving that is tricky! Mainly I don't have a good grasp for what the supremum looks like for an indexed set of (non-commutative...) groups...</p>",
        "id": 407527720,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702402383
    },
    {
        "content": "<p>So I can prove things are in the supremum - but getting any information from the fact something is in the supremum seems hard!</p>",
        "id": 407527824,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702402420
    },
    {
        "content": "<p>Of course, I might not be right that this works! But intuitively, the units should be the biggest group you can fit inside the monoid - right?</p>",
        "id": 407528125,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702402507
    },
    {
        "content": "<p>I am not suggesting to change the definition! Just that when I read \"The greatest subgroup of the type of units of <code>M</code> contained within <code>S</code>.\" I just think \"isn't this just the units of <code>S</code>\"?</p>",
        "id": 407528434,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702402613
    },
    {
        "content": "<p>So the actual Lean definition can stay like it is, but say somewhere that this is just an implementation issue, mathematically it is just \"the units of <code>S</code>\"</p>",
        "id": 407528646,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702402674
    },
    {
        "content": "<p>For sure, for sure</p>",
        "id": 407529835,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702403028
    },
    {
        "content": "<p>I think the current definition is good (it has a nice refl IFF representation, which is a good sign!).</p>",
        "id": 407529961,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702403054
    },
    {
        "content": "<p>This supremum lemma would just be useful for some of the ordering facts.</p>",
        "id": 407530027,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702403077
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The units of `S`, packaged as a subgroup of `Mˣ`.  -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"s2\">\" The additive units of `S`, packaged as an additive subgroup of `AddUnits M`. \"</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Submonoid.units</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">toSubmonoid</span> <span class=\"o\">:=</span> <span class=\"n\">S.comap</span> <span class=\"o\">(</span><span class=\"n\">Units.coeHom</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">S.comap</span> <span class=\"o\">((</span><span class=\"n\">Units.coeHom</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n    <span class=\"o\">(</span><span class=\"n\">MulEquiv.inv'</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.toMonoidHom</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">unop</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ha.2</span><span class=\"o\">,</span> <span class=\"n\">ha.1</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- A subgroup of units represented as a submonoid of `M`.  -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"s2\">\" A additive subgroup of additive units represented as a additive submonoid of `M`. \"</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Subgroup.ofUnits</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">S.toSubmonoid.map</span> <span class=\"o\">(</span><span class=\"n\">Units.coeHom</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Subgroup.mem_ofUnits_iff</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S.ofUnits</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Submonoid.mem_units_iff</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S.units</span> <span class=\"bp\">↔</span>\n    <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Submonoid.units_mono</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">Submonoid.units</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hST</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">hST</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">hST</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Submonoid.ofunits_units_le</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S.units.ofUnits</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span>  <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hx</span> <span class=\"bp\">▸</span> <span class=\"n\">hy.1</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Submonoid.ofUnits_mono</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.ofUnits</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hST</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hST</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Submonoid.ofUnits_units_eq</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"n\">M</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S.ofUnits.units</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">SetLike.ext</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Units.ext</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">S.inv_mem</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩⟩)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unitsGaloisCoinsertion</span> <span class=\"o\">:</span> <span class=\"n\">GaloisCoinsertion</span> <span class=\"o\">(</span><span class=\"n\">Subgroup.ofUnits</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Submonoid.units</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">GaloisCoinsertion.monotoneIntro</span> <span class=\"n\">Submonoid.units_mono</span> <span class=\"n\">Submonoid.ofUnits_mono</span>\n  <span class=\"n\">Submonoid.ofunits_units_le</span> <span class=\"n\">Submonoid.ofUnits_units_eq</span>\n</code></pre></div>\n<p>This is rather good - it's actually a coinsertion.</p>",
        "id": 407546161,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702408157
    },
    {
        "content": "<p>Further discussion for this will take place in <a href=\"#narrow/stream/144837-PR-reviews/topic/.239006.20Unit.20subgroup\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.239006.20Unit.20subgroup</a>.</p>",
        "id": 407781423,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702490109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> has marked this topic as resolved.</p>",
        "id": 407781454,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702490121
    }
]