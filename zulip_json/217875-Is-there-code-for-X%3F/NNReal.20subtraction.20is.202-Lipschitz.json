[
    {
        "content": "<p>Here is a small puzzle-game for those who enjoy playing with <code>NNReal</code>. Maybe I'm missing something, but  I would enjoy if this was less of a puzzle. What can we do? (For the record, I agree that subtraction in <code>NNReal</code> is pathological, but its 2-Lipschitzness is not pathological.)</p>\n<p><strong>Claim:</strong> Subtraction in <code>ℝ≥0</code> (i.e., the mapping <code>ℝ≥0 × ℝ≥0 → ℝ≥0</code> given by <code>(x, y) ↦ x - y</code>) is 2-Lipschitz.</p>\n<p><strong>Proof:</strong> The metric on the product <code>ℝ≥0 × ℝ≥0</code> is the max-distance of the two components, so the claim is obvious. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">□</mi></mrow><annotation encoding=\"application/x-tex\">\\square</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;\"></span><span class=\"mord amsrm\">□</span></span></span></span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.NNReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">NNReal.lipschitzWith_sub</span> <span class=\"o\">:</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"bp\">-</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Below is my Lean-attempt at the puzzle, but please try it first and decide whether you like <code>NNReal</code>s, if you haven't already. (And then please golf my stupid solution.)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.NNReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">NNReal.lipschitzWith_sub_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">1</span>\n    <span class=\"o\">((((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">max</span> <span class=\"n\">p.fst</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">Neg.neg</span><span class=\"o\">)</span>\n      <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x.val</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">isom</span> <span class=\"o\">:=</span> <span class=\"o\">(((</span><span class=\"n\">isometry_add_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">isometry_neg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">isometry_subtype_coe</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}))</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">((</span><span class=\"n\">lipschitzWith_max.comp</span> <span class=\"o\">(</span><span class=\"n\">LipschitzWith.prod_mk_right</span> <span class=\"mi\">0</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">isom.lipschitz</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">NNReal.lipschitzWith_sub_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">1</span>\n    <span class=\"o\">((((</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">max</span> <span class=\"n\">p.fst</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n      <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">x.val</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">isom</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">isometry_add_right</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">isometry_subtype_coe</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">((</span><span class=\"n\">lipschitzWith_max.comp</span> <span class=\"o\">(</span><span class=\"n\">LipschitzWith.prod_mk_right</span> <span class=\"mi\">0</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">isom.lipschitz</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">NNReal.lipschitzWith_sub</span> <span class=\"o\">:</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"bp\">-</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lipschitzWith_iff_dist_le_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">NNReal.coe_ofNat</span><span class=\"o\">]</span>\n  <span class=\"n\">change</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">-</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q.1</span> <span class=\"bp\">-</span> <span class=\"n\">q.2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">p.1</span> <span class=\"n\">q.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">p.2</span> <span class=\"n\">q.2</span><span class=\"o\">))</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">dist_eq</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_le</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">-</span> <span class=\"n\">p.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">q.1</span> <span class=\"bp\">-</span> <span class=\"n\">p.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">q.1</span> <span class=\"bp\">-</span> <span class=\"n\">q.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span> <span class=\"n\">NNReal.lipschitzWith_sub_left</span> <span class=\"n\">p.2</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lipschitzWith_iff_dist_le_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">aux</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dist_eq</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">aux</span> <span class=\"n\">p.1</span> <span class=\"n\">q.1</span>\n  <span class=\"bp\">·</span> <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span> <span class=\"n\">NNReal.lipschitzWith_sub_right</span> <span class=\"n\">q.1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lipschitzWith_iff_dist_le_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">aux</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dist_eq</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">aux</span> <span class=\"n\">p.2</span> <span class=\"n\">q.2</span>\n</code></pre></div>\n</div></div>",
        "id": 385992827,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692394986
    },
    {
        "content": "<p>Okay I have a fun solution</p>",
        "id": 385996650,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692397545
    },
    {
        "content": "<p>This looks really annoying until you realize the existence of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LipschitzWith.max_const#doc\">docs#LipschitzWith.max_const</a></p>",
        "id": 385996721,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692397572
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.NNReal</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Isometry.lipschitzWith_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">PseudoEMetricSpace</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Isometry</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">LipschitzWith</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">LipschitzWith</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LipschitzWith</span><span class=\"o\">,</span> <span class=\"n\">h.edist_eq</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">NNReal.lipschitzWith_sub</span> <span class=\"o\">:</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"bp\">-</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isometry_subtype_coe.lipschitzWith_iff</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Isometry</span> <span class=\"o\">(</span><span class=\"n\">Prod.map</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">isometry_subtype_coe.prod_map</span> <span class=\"n\">isometry_subtype_coe</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(((</span><span class=\"n\">LipschitzWith.prod_fst.comp</span> <span class=\"n\">this.lipschitz</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sub</span>\n    <span class=\"o\">(</span><span class=\"n\">LipschitzWith.prod_snd.comp</span> <span class=\"n\">this.lipschitz</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">max_const</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 385996733,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692397581
    },
    {
        "content": "<p>(The first lemma should just be in the library)</p>",
        "id": 385996752,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692397603
    },
    {
        "content": "<p>Oh actually you were using <code>lipschitzWith_max</code> already</p>",
        "id": 385996815,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692397678
    },
    {
        "content": "<p>(Note that the proof is taking about 1s so probably we want to optimize it a bit before PR-ing)</p>",
        "id": 385996956,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692397766
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">NNReal.lipschitzWith_sub</span> <span class=\"o\">:</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"bp\">-</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">lipschitzWith_iff_dist_le_mul</span><span class=\"o\">,</span> <span class=\"n\">Prod.dist_eq</span><span class=\"o\">,</span> <span class=\"n\">NNReal.dist_eq</span><span class=\"o\">,</span> <span class=\"n\">NNReal.coe_sub_def</span><span class=\"o\">,</span> <span class=\"n\">NNReal.coe_two</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">y1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">y2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">abs_max_sub_max_le_abs</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_sub_sub_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">abs_sub</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>is my solution</p>",
        "id": 385997209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692397947
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 385997259,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692398002
    },
    {
        "content": "<p>I think I prefer my solution since it doesn't involve unfolding the definition of <code>LipschitzWith</code>, but essentially we're doing the same thing.</p>",
        "id": 385997377,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692398090
    },
    {
        "content": "<p>I really adore Anatole's principled way of using only lemmas that should absolutely be expected to be there. And adding the one that wasn't! (...and as Anatole noted, the one thing that required knowing something specific in the library wass the existence of <code>LipschitzWith.max_const</code>.)</p>\n<p>That said, Eric's solution essentially follows the elementary argument I had in mind in my pen-and-paper proof (<em>Pf.: Obvious. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">□</mi></mrow><annotation encoding=\"application/x-tex\">\\square</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.675em;\"></span><span class=\"mord amsrm\">□</span></span></span></span></em>), and Eric manages to do this 5 times more efficiently than I did!</p>\n<p>Thank you both very much!</p>\n<p>I'm trying figure out the lessons I (and maybe others) should learn, particularly for working with <code>NNReal</code>. </p>\n<p>Anatole's solution is just a great reminder to stick to the clear, soft, and elegant mathematical reasoning. (It's not the first time I try to learn that, but I will try to learn it again --- in principle I know it pays off in formalization and in the real world.) This lesson seems more general than just a strategy to fight <code>NNReal</code>s.</p>\n<p>I really admire the efficiency of Eric's solution, but the general lesson from it seems less clear to me... Ok, unfolding the definition of <code>NNReal</code> subtraction early on was definitely a good idea, and finding the lemma <code>abs_max_sub_max_le_abs</code> was really helpful. I feel like I tried to do very similar things with less success...</p>",
        "id": 386001632,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692400552
    },
    {
        "content": "<p>Btw, I think lemmas of this flavor should go to Mathlib so that no one else ever has to do the puzzle again. <span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span></p>\n<p>Is the right <em>statement</em> to PR the 2-Lipschitzness of subtraction, or is there a more helpful one? Is there a good generalization that applies not only to <code>NNReal</code>?</p>",
        "id": 386002141,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692400829
    },
    {
        "content": "<p>I feel like I got lucky that my proof worked; once I unfolded to real, my strategy was just \"guess lemmas names about max, sub, and abs until I find one that matches\". Surprisingly I didn't hit any dead ends, but I find that I rarely get away with that strategy on inequalities</p>",
        "id": 386002350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692400981
    },
    {
        "content": "<p>Indeed, it is worth noting that everyone got out of <code>NNReal</code> to <code>Real</code> more or less as fast as possible (except Anatole only did that on the codomain side in the first step and on the domain side a bit later...). Sure, this is reasonable --- especially if one knows or expects the <code>Real</code> API to be better.</p>",
        "id": 386002741,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692401246
    },
    {
        "content": "<p>An interesting thing about my solution is that (without even thinking about it) I basically mimicked the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NNReal.instContinuousSubNNRealInstTopologicalSpaceNNRealInstSubNNReal#doc\">docs#NNReal.instContinuousSubNNRealInstTopologicalSpaceNNRealInstSubNNReal</a></p>",
        "id": 386003033,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692401414
    },
    {
        "content": "<p>I guess this is the kind of proofs you get good at by combining tons of continuity/measurability/differentiability lemmas in similar ways</p>",
        "id": 386003205,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692401534
    },
    {
        "content": "<p>To me Lipschitzness seemed quantitative and continuity/measurability/differentiability seem qualitative... But you showed that the strategy worked with Lipschitzness, too!</p>\n<p>(EDIT: maybe differentiability is not qualitative if you actually keep track of the differentials, as you often do!)</p>",
        "id": 386003326,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692401639
    },
    {
        "content": "<p>I never really used the Lipschitz API, so I was happily surprised about that too!</p>",
        "id": 386003607,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692401789
    },
    {
        "content": "<p>Anyways, for the PRs. I would personally like to see also the \"partial results\" (which are in fact quantitatively stronger than the general result) <code>NNReal.lipschitzWith_sub_right</code> and <code>NNReal.lipschitzWith_sub_left</code> in the library. But is there a generalization beyond <code>NNReal</code>?</p>",
        "id": 386003651,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692401814
    },
    {
        "content": "<p>And incidentally, the partial results in <code>Real</code> are not in Mathlib as far as I can see. But <code>Real</code>s are useless for puzzles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Real.lipschitzWith_sub_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">isometry_add_left</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">isometry_neg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lipschitz</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Real.lipschitzWith_sub_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LipschitzWith</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">isometry_add_right</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">lipschitz</span>\n</code></pre></div>",
        "id": 386004568,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692402379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/NNReal.20subtraction.20is.202-Lipschitz/near/386002741\">said</a>:</p>\n<blockquote>\n<p>Indeed, it is worth noting that everyone got out of <code>NNReal</code> to <code>Real</code> more or less as fast as possible (except Anatole only did that on the codomain side in the first step and on the domain side a bit later...). Sure, this is reasonable --- especially if one knows or expects the <code>Real</code> API to be better.</p>\n</blockquote>\n<p>I don't think this is an argument for avoiding NNReal; I think rather it's a case for avoiding subtraction in the junk zone if you can (i.e. by using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LipschitzOnWith#doc\">docs#LipschitzOnWith</a> in the valid region)</p>",
        "id": 386005403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692402869
    },
    {
        "content": "<p>I agree --- and these types of results are about setting up the API, so the implementation isn't important at all (it is ok to go to <code>Real</code> fast). What matters is that once the API is there, the user doesn't face too challenging puzzles.</p>",
        "id": 386006378,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1692403388
    }
]