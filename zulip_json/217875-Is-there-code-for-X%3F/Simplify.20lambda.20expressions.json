[
    {
        "content": "<p>Here is a MWE.  I would like to simplify the LHS of the equation to just <code>f</code>.  (RHS is irrelevant).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Find</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>  <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">asdf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>unfortunately <code>simp</code> does nothing here.  It seems like there were a few previous threads about reducing these sorts of expressions (e.g. <a href=\"#narrow/stream/113489-new-members/topic/Simplifying.20lambda.20expressions\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Simplifying.20lambda.20expressions</a>) and that the conclusion was that this simplification is called beta reduction and <code>dsimp only</code> or <code>simp only</code> should handle it, but that does not seem to be happening here.</p>",
        "id": 357146862,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683688982
    },
    {
        "content": "<p>You need to give it a little bit more direction, I think.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">asdf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"n\">trace_state</span>\n</code></pre></div>",
        "id": 357150844,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1683691149
    },
    {
        "content": "<p>Hmm, this doesn't seem ideal.  Why is <code>simp</code> unable to do the beta reduction?  In general do I need to manually clean up the beta reductions that <code>simp</code> fails to do? Or is there another tactic for this scenario?</p>",
        "id": 357154798,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683693492
    },
    {
        "content": "<p>This is not beta reduction, it's eta reduction/expansion. The definitional equality procedure checks eta equivalence which is why <code>rfl</code> works, but simp needs to know what you want to rewrite with in this case.</p>",
        "id": 357156727,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1683694321
    },
    {
        "content": "<p>There's an <code>eta := true</code> option for the simp config, but I'm not sure how it works.</p>",
        "id": 357157411,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1683694460
    },
    {
        "content": "<p><code>simp (config := { eta := true })</code> should do, if not unacceptably long</p>",
        "id": 357173330,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683699743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Simplify.20lambda.20expressions/near/357173330\">said</a>:</p>\n<blockquote>\n<p><code>simp (config := { eta := true })</code> should do, if not unacceptably long</p>\n</blockquote>\n<p>I tried this, it still doesn't have any effect.</p>",
        "id": 357331980,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683732521
    },
    {
        "content": "<p>I've tried searching more through zulip and the mathlib docs, and came up short.  <code>#reduce</code> doesn't simplify this expression either.  </p>\n<p>There is the <code>Expr.etaExpanded?</code> function, which I can use to calculate the eta-reduced form of a a type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">transformEtaReduce</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">node.etaExpanded</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">reduced</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">TransformStep.continue</span> <span class=\"n\">reduced</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TransformStep.continue</span>\n        <span class=\"o\">))</span>\n</code></pre></div>\n<p>but this is not actually generating proof terms.</p>",
        "id": 357637554,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683821254
    },
    {
        "content": "<p>Oh, now that you've written that, it's not so hard to wrap an interactive tactic around it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transformEtaReduce</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TransformStep.continue</span> <span class=\"n\">node.etaExpanded</span><span class=\"bp\">?</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"eta_reduce\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">eta_reduce</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">)</span>\n      <span class=\"c1\">-- Eta reduction is defeq:</span>\n      <span class=\"n\">mvarId.change</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformEtaReduce</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>  <span class=\"bp\">→</span> <span class=\"n\">Nat</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">asdf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">eta_reduce</span>\n  <span class=\"c1\">-- goal: f = fun a ↦ f (f a)</span>\n</code></pre></div>",
        "id": 357654961,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683825409
    },
    {
        "content": "<p>With a little more work you can support <code>eta_reduce at h</code> syntax too.</p>",
        "id": 357655668,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683825596
    },
    {
        "content": "<p>Here, with locations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transformEtaReduce</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TransformStep.continue</span> <span class=\"n\">node.etaExpanded</span><span class=\"bp\">?</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"eta_reduce\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">Parser.Tactic.location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">eta_reduce</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.changeLocalDecl'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformEtaReduce</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.change</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformEtaReduce</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"eta_reduce failed\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>  <span class=\"bp\">→</span> <span class=\"n\">Nat</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">asdf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">eta_reduce</span>\n  <span class=\"c1\">-- goal: f = fun a ↦ f (f a)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">asdf'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">eta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- h : f = fun a ↦ f (f a)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">asdf''</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">eta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"c1\">-- h : f = fun a ↦ f (f a)</span>\n  <span class=\"c1\">-- ⊢ f = fun a ↦ f (f a)</span>\n</code></pre></div>",
        "id": 357656879,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683825897
    },
    {
        "content": "<p>An <code>eta_expand</code> would be interesting too, but to do that right you'd need a transformer that processes entire function applications. This transformer expands <em>every</em> function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">transformEtaExpand</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">post</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TransformStep.done</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">Meta.etaExpand</span> <span class=\"n\">node</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That gives some silly results:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">eta_expand</span>\n  <span class=\"c1\">-- goal: (fun {α} a a_1 ↦ a = a_1) (fun a b ↦ (fun a b ↦ (fun {α β} {γ}</span>\n  <span class=\"c1\">--   [HAdd α β γ] a a_1 ↦ a + a_1) a b) a b) fun x x_1 ↦ (fun x x_2 ↦ (fun {α β} {γ} [HAdd α β γ]</span>\n  <span class=\"c1\">--   a a_1 ↦ a + a_1) x x_2) x x_1</span>\n</code></pre></div>\n<p>Beta reducing the result fixes that, but maybe there's a better way?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">transformEtaExpand</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">post</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TransformStep.done</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">Meta.etaExpand</span> <span class=\"n\">node</span><span class=\"o\">)</span>\n  <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e'</span>\n</code></pre></div>\n<p>This at least works as an inverse to <code>eta_reduce</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- goal: (fun a b ↦ a + b) = fun x x_1 ↦ x + x_1</span>\n  <span class=\"n\">eta_reduce</span>\n  <span class=\"c1\">-- goal: HAdd.hAdd = HAdd.hAdd   (has implicit arguments for Nat instances)</span>\n  <span class=\"n\">eta_expand</span>\n  <span class=\"c1\">-- goal: (fun a a_1 ↦ a + a_1) = fun a a_1 ↦ a + a_1</span>\n</code></pre></div>",
        "id": 357660208,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683826757
    },
    {
        "content": "<p>Here are both tactics together:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transformEtaReduce</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TransformStep.continue</span> <span class=\"n\">node.etaExpanded</span><span class=\"bp\">?</span>\n\n<span class=\"sd\">/-- Like `Lean.Meta.etaExpand` but using reducible transparancy. This prevents `Set` for example</span>\n<span class=\"sd\">from being eta expanded. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">etaExpand'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withReducible</span> <span class=\"k\">do</span> <span class=\"n\">forallTelescopeReducing</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">e</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transformEtaExpand</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">post</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TransformStep.done</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">etaExpand'</span> <span class=\"n\">node</span><span class=\"o\">)</span>\n  <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e'</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"eta_reduce\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">Parser.Tactic.location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">eta_reduce</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.changeLocalDecl'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformEtaReduce</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.change</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformEtaReduce</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"eta_reduce failed\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"eta_expand\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">Parser.Tactic.location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">eta_expand</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withLocation</span> <span class=\"o\">(</span><span class=\"n\">expandOptLocation</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atLocal</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.changeLocalDecl'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformEtaExpand</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">atTarget</span> <span class=\"o\">:=</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.getType</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.change</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">transformEtaExpand</span> <span class=\"n\">ty</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">failed</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"eta_expand failed\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>  <span class=\"bp\">→</span> <span class=\"n\">Nat</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">asdf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">eta_reduce</span>\n  <span class=\"c1\">-- goal: f = fun a ↦ f (f a)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">asdf'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">eta_reduce</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- h : f = fun a ↦ f (f a)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">asdf''</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">eta_reduce</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"c1\">-- h : f = fun a ↦ f (f a)</span>\n  <span class=\"c1\">-- ⊢ f = fun a ↦ f (f a)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- goal: (fun a b ↦ a + b) = fun x x_1 ↦ x + x_1</span>\n  <span class=\"n\">eta_reduce</span>\n  <span class=\"c1\">-- goal: HAdd.hAdd = HAdd.hAdd   (has implicit arguments of course)</span>\n  <span class=\"n\">eta_expand</span>\n  <span class=\"c1\">-- goal: (fun a a_1 ↦ a + a_1) = fun a a_1 ↦ a + a_1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">eta_expand</span>\n  <span class=\"c1\">-- goal: s = t  (good; don't want `Set` to be seen as a function)</span>\n</code></pre></div>\n</div></div>",
        "id": 357660275,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683826785
    },
    {
        "content": "<p>well and truly nerdsniped :-) Very nice!</p>",
        "id": 357660390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683826808
    },
    {
        "content": "<p>For the <code>transformEtaExpand</code> would it make sense to do the beta reduction as part of the transform so it's single pass? Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">betaReduceHead</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">e.isHeadBetaTarget</span> <span class=\"k\">then</span> <span class=\"n\">e.headBeta</span> <span class=\"k\">else</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">transformEtaExpand</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">transform</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">post</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">node</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TransformStep.done</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">betaReduceHead</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">Meta.etaExpand</span> <span class=\"n\">node</span><span class=\"o\">)</span>\n  <span class=\"n\">Core.betaReduce</span> <span class=\"n\">e'</span>\n</code></pre></div>",
        "id": 357662730,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683827428
    },
    {
        "content": "<p>The thing this is working around is that if you have an expression <code>f x</code>, then we first look at <code>f</code> and we get <code>(fun y =&gt; f y) x</code>, so then when we look at this whole application we need to beta reduce it. Beta reducing as part of the <code>post</code> pass will work, but really it'd be better to never do these sorts of eta expansions in the first place so that we never need to beta reduce.</p>",
        "id": 357664694,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683827982
    }
]