[
    {
        "content": "<p>It's all in the title. Does there exist a class corresponding to normed modules over a normed ring ? (Not necessarily commutative.) I wanted to work with normed vector spaces over a normed division algebra (like the quaternions), but NormedSpace requires the coefficients to be a field.<br>\nAlso, in p-adic theory people work with normed modules over Banach algebras, so this is a useful notion.</p>",
        "id": 392380262,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695323047
    },
    {
        "content": "<p>Yes, it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BoundedSMul#doc\">docs#BoundedSMul</a></p>",
        "id": 392381809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695323730
    },
    {
        "content": "<p>Maybe three months ago I made a series of refactors to generalize results about <code>NormedSpace</code> to be about <code>BoundedSMul</code> instead</p>",
        "id": 392382005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695323815
    },
    {
        "content": "<p>Awesome, thanks ! Do you have the fact that the inequality is an equality if the coefficients are a division ring ?</p>",
        "id": 392383574,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695324468
    },
    {
        "content": "<p>(I mean the inequalities in <code>dist_smul_pair'</code> and <code>dist_pair_smul'</code>).</p>",
        "id": 392384167,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695324709
    },
    {
        "content": "<p>Yes, maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dist_smul#doc\">docs#dist_smul</a> ?</p>",
        "id": 392385153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695325132
    },
    {
        "content": "<p>Certainly <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=norm_smul#doc\">docs#norm_smul</a> ?</p>",
        "id": 392385220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695325167
    },
    {
        "content": "<p>I see, thank you again!</p>",
        "id": 392385921,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695325499
    },
    {
        "content": "<p>I can't remember if I thought <code>NormedModule</code> was a bad idea, or if i just didn't want to take on that large a refactor!</p>",
        "id": 392389570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695327093
    },
    {
        "content": "<p>Btw I have <code>BoundedSMul</code> instances for <code>Prod</code> and <code>Pi</code> if you need them.</p>",
        "id": 392391194,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695327878
    },
    {
        "content": "<p>I certainly will <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> if I ever get far enough with my quatertionic projectiv spaces (at least I'll need the <code>Prod</code>). Are they in mathlib already ?</p>",
        "id": 392391400,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695327977
    },
    {
        "content": "<p>No, they're currently parked in <del>LeanCamCombi</del> LeanAPAP. Let me PR that real quick.</p>",
        "id": 392391470,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695328014
    },
    {
        "content": "<p>Thanks !</p>",
        "id": 392391596,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695328083
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7311\">#7311</a></p>",
        "id": 392392669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695328586
    },
    {
        "content": "<p>Just in time for my battery to die.</p>",
        "id": 392392682,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695328596
    },
    {
        "content": "<p>No worries, I have to teach tomorrow afternoon so I won't come back to this before tomorrow evening at the earliest.</p>",
        "id": 392393483,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695329007
    },
    {
        "content": "<p>Yeah these normed modules over normed rings such as affinoid algebras are everywhere in p-adic analysis.</p>",
        "id": 392449337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695364459
    },
    {
        "content": "<p>Merging now</p>",
        "id": 392449598,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695364602
    },
    {
        "content": "<p>Merged <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"></p>",
        "id": 392459336,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695368772
    },
    {
        "content": "<p>What do you think of the following:</p>\n<ul>\n<li>add a <code>NormEqDistZero</code> class with the axiom <code>‖x‖ = dist x 0</code></li>\n<li>add an instance from <code>SeminormedAddGroup</code> to <code>NormEqDistZero</code></li>\n<li>redefine <code>NormedSpace</code> (or <code>NormedModule</code>, or <code>NormedSMul</code>) as the current <code>BoundedSMul</code>, except assuming <code>NormEqDistZero</code> on both spaces and thus replacing the weird-looking <code>dist x 0</code> by more natural <code>‖x‖</code>.</li>\n</ul>\n<p>That way we can get rid of <code>BoundedSMul</code> (maybe adding a few <code>Norm</code> and <code>NormEqDistZero</code> instances to cover e.g <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=NNReal.boundedSMul#doc\">docs#NNReal.boundedSMul</a>) and we no longer have multiple ways to express the same thing (I think the <code>BoundedSMul</code> typeclass was a bit confusing in itself). The main disadvantage is that we have to write <code>[Module R E] [NormedSpace R E]</code> instead of just <code>[NormedSpace R E]</code>, but I'd argue that we should be un-doing some of the algebra+norm bundles anyways.</p>",
        "id": 392699965,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1695476080
    },
    {
        "content": "<p>It sounds good to me, it would make the classes easier to find and possibly to use. But I have no real idea of how painful that would be, or of the trouble it could cause elsewhere.</p>",
        "id": 392704071,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1695478496
    },
    {
        "content": "<p>If <code>NormedModule R E</code> is going to be the current <code>BoundedSMul</code> with <code>dist x 0</code> replaced by <code>‖x‖</code>, then I think there's a risk of confusion since <code>BoundedSMul R E</code> ends up requiring <code>E</code> to have both a norm and a metric, but <strong><em>not</em></strong> that <code>dist x y = ‖x - y‖</code> for all <code>x, y</code>, so the metric is not determined by the norm. Generally it seems bizarre to call something <code>NormedModule</code> and yet have its definition in terms of metrics rather than norms.</p>\n<p>I'd advocate that <code>NormedModule R E</code> (or whatever the successor to <code>BoundedSMul</code> is called) should assume <code>SeminormedRing R</code> and <code>SeminormedAddGroup E</code>, and be wholly written in terms of norms.</p>",
        "id": 395502691,
        "sender_full_name": "David Loeffler",
        "timestamp": 1696749783
    },
    {
        "content": "<p>I guess this wouldn't cover the existing <code>docs#NNReal.boundedSMul</code>; but how crucial is this anyway? I tried commenting it out and recompiling and nothing's broken so far.</p>",
        "id": 395503463,
        "sender_full_name": "David Loeffler",
        "timestamp": 1696750408
    },
    {
        "content": "<p>Well the whole point of <code>BoundedSMul</code> was to have a common API for true normed modules and also some weaker use cases, typically <code>NNReal</code>. My claim was that we wouldn't lose anything by actually incorporating this into <code>NormedModule</code>, even if it means that the typeclass is weaker than its name suggest (similarly to how we use <code>Module</code> for semi-modules). I think the main downside of my approach is that writing <code>[NormedModule R E]</code> would no longer throw an error in absence of <code>[SeminormedAddGroup E]</code>.</p>",
        "id": 395511125,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696754780
    },
    {
        "content": "<p>The original motivation wasn't <code>NNReal</code>, but normed Quaternion modules; but indeed it would be a shame to drop any existing instances</p>",
        "id": 395511346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696754961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/NormedModule.20.3F/near/395511346\">said</a>:</p>\n<blockquote>\n<p>The original motivation wasn't <code>NNReal</code>, but normed Quaternion modules; but indeed it would be a shame to drop any existing instances</p>\n</blockquote>\n<p>Oh okay. But anyways this one would be covered by <code>NormedModule</code> assuming <code>SeminormedAddGroup</code>.</p>",
        "id": 395511457,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696755026
    },
    {
        "content": "<p>Actually, I now remember the motivation was more general than that; I wanted <code>norm_smul_le</code> to work when <code>• = *</code></p>",
        "id": 395511641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696755148
    },
    {
        "content": "<p>So that we didn't repeat all the module results from scratch for rings</p>",
        "id": 395511676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696755168
    }
]