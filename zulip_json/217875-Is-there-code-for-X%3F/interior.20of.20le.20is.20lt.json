[
    {
        "content": "<p>We have <code>isOpen_lt</code> and <code>isClosed_le</code>. Do we have something like the following (and what are the conditions under which it's even true)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">interior_of_le_is_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">OrderClosedTopology</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">interior</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 384531696,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691942302
    },
    {
        "content": "<p>This is always false for <code>f = g</code> right?</p>",
        "id": 384532168,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691942429
    },
    {
        "content": "<p>No, because beta could be empty.</p>",
        "id": 384551617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691948586
    },
    {
        "content": "<p>It's just almost always false.</p>",
        "id": 384551680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691948605
    },
    {
        "content": "<p>The funny part is I thought about it and decided \"oh there’s no need to mention it, after all my friends always get annoyed why I mention these empty sets subtleties\". But thanks for reminding me there’s no need to be ashamed of that here 😜</p>",
        "id": 384552341,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691948861
    },
    {
        "content": "<p>No need to be afraid of the empty set.</p>",
        "id": 384552967,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691949050
    },
    {
        "content": "<p>Oh I completely agree! I’ve just learned not to insist on it too much otherwise it annoys people. Reminds me of that time when we were asked \"when is the direct sum of vector spaces (considered as the subset of the product) equal to their product\", the expected answer being \"when there are finitely many factors\", but I had to explain that the right answer was \"when there are finitely many <em>nontrivial</em> factors\"</p>",
        "id": 384553646,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691949279
    },
    {
        "content": "<p>Is <code> Countable {x | f x = g x}</code> sufficient to make it true?</p>",
        "id": 384566839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691953729
    },
    {
        "content": "<p>Not in general. E.g., what if the topology has an isolated point?</p>",
        "id": 384567544,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691953916
    },
    {
        "content": "<p>There are many things that can go wrong here. One way is indeed when <code>f</code> and <code>g</code> are equal on a set with nonempty interior, but even when <code>f</code> equals <code>g</code> at a single non-isolated point bad things can still happen, for example if <code>f</code> is always smaller than <code>g</code></p>",
        "id": 384570470,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691954860
    },
    {
        "content": "<p>Is this true in R^n with the countability/nonempty interior of the equal points?</p>",
        "id": 384570711,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691954930
    },
    {
        "content": "<p>No, see my last message</p>",
        "id": 384570778,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691954960
    },
    {
        "content": "<p>E.g <code>f := 0</code> and <code>g := fun x =&gt; x^2</code></p>",
        "id": 384570810,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691954979
    },
    {
        "content": "<p>I don't know enough of differential topology to give more useful conditions, but this reminds me of transersality in some way: you want your functions to cross not too often, and to cross for real when they do (and in some sense this second condition implies the first)</p>",
        "id": 384571397,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691955138
    },
    {
        "content": "<p>Well actually it's a bit more than \"reminding me\" because it definitely works if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>−</mo><mi>f</mi><mo>:</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">g - f : \\mathbb{R}^n \\to \\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> is differentiable and has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> as a regular value</p>",
        "id": 384572293,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691955481
    },
    {
        "content": "<p>(right?)</p>",
        "id": 384572381,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691955502
    },
    {
        "content": "<p>Is 0 a regular value if n=0 because it doesn't work then</p>",
        "id": 384572739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691955659
    },
    {
        "content": "<p>You made me doubt for a second but I don't think it is because the differential can't be surjective from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.</p>",
        "id": 384573354,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691955931
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=lt_subset_interior_le#doc\">docs#lt_subset_interior_le</a></p>",
        "id": 384576310,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691957070
    },
    {
        "content": "<p>Added by <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> in <a href=\"https://github.com/leanprover-community/mathlib/pull/10653\">!3#10653</a></p>",
        "id": 384576504,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691957144
    },
    {
        "content": "<p>Ok let's specialize things a bit. Say we have a <code>MetricSpace</code>. Do we know that <code>interior {x | dist x y ≤ z} = {x | dist x y &lt; z}</code>? (What conditions on the metric space are needed for this to be true?...)</p>",
        "id": 384619499,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691976623
    },
    {
        "content": "<p>That's not true for eg the integers.</p>",
        "id": 384619628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691976667
    },
    {
        "content": "<p>Right, so under what conditions is it true?</p>",
        "id": 384620044,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691976822
    },
    {
        "content": "<p>We do know that the former is closed (<code>Metric.isClosed_ball</code>) and the latter open (<code>Metric.isOpen_ball</code>)</p>",
        "id": 384620162,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691976858
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=interior_closedBall#doc\">docs#interior_closedBall</a> looks like it is practically defeq to your question.</p>",
        "id": 384620647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691977021
    },
    {
        "content": "<p>Ah perfect, thanks!</p>",
        "id": 384621122,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691977179
    },
    {
        "content": "<p>(it assumes <code>NormedSpace ℝ E</code>, I have no idea if it generalizes)</p>",
        "id": 384621191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691977203
    },
    {
        "content": "<p>Yes, I'll probably need to assume that as well.</p>",
        "id": 384621259,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691977219
    },
    {
        "content": "<p>There are 2 versions. One assumes <code>[Nontrivial E]</code>, another one assumes <code>r ≠ 0</code>.</p>",
        "id": 384627049,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691979452
    },
    {
        "content": "<p>Yeah, I poked around a bit, and this should be true much more generally than for <code>NormedSpace</code>s... But seems not entirely trivial to get the correct generality...</p>",
        "id": 384633591,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691982225
    },
    {
        "content": "<p>E.g., it is true in the hyperbolic geometry but fails for one positive radius on the sphere.</p>",
        "id": 384634700,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691982813
    },
    {
        "content": "<p>Nontrivial metric spaces where the interior of every closed ball is the open ball are necessarily perfect, but this condition isn't sufficient in general.</p>",
        "id": 384643517,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691986657
    },
    {
        "content": "<p>Yes, so what would be sufficient in general. I'm still looking around, and maybe it's its own class???</p>",
        "id": 384783465,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692020619
    },
    {
        "content": "<p>It probably won't be true for any nonempty compact space because the metric will be bounded and will attain its bounds</p>",
        "id": 384794212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692022517
    },
    {
        "content": "<p>Well the obvious condition is <code>∀ x y, ∃ᶠ z in 𝓝 y, dist x y &lt; dist x z</code>, but that's almost tautological...</p>",
        "id": 384795492,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692022755
    },
    {
        "content": "<p>Yes, what I'm learning is that such a condition seems not to have been considered previously? It doesn't have a \"name\" (not that names are all that great - I'm looking at you, <code>Perfect</code>...).</p>",
        "id": 384812418,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692025841
    },
    {
        "content": "<p>Well we certainly don't have it in mathlib, and I've never heard of it. What is your use case?</p>",
        "id": 384813514,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692026054
    },
    {
        "content": "<p>Yes, I've been looking for it and this issue seems not to be addressed anywhere as far as I can tell? Seems like a fundamental question?? Here's the use case:</p>",
        "id": 384814838,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026289
    },
    {
        "content": "<p>I'm trying out a purely topological version of fundamental domains. To allow the domain to be as general as possible, I assume that the translates of the closures cover, while the interiors are pairwise disjoint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">IsFundamentalDomain</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">covers</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">disjoint</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">↦</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(I'm renaming the old <code>IsFundamentalDomain</code> to <code>IsAEFundamentalDomain</code>, as <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> suggested. We'll see if this experiment works out...)</p>",
        "id": 384815367,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026393
    },
    {
        "content": "<p>Then I define, for a <code>MetricSpace</code>, a <code>DirichletPolyhedron</code> (for which it's useful to have \"<code>DirichletSet</code>\"s isolated):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Countable</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DirichletSet</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⋂</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">DirichletSet</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 384815837,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026476
    },
    {
        "content": "<p>I'm able to prove that these indeed cover. (It's nontrivial; quite fun actually, first year grad stuff...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">IsCover_of_DirichletPolyhedron</span> <span class=\"o\">[</span><span class=\"n\">ProperSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">ProperlyDiscontinuousSMul</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 384816263,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026553
    },
    {
        "content": "<p>(As you see, I need to assume <code>ProperlyDiscontinuousSMul</code>, as expected. I also need to assume <code>ProperSpace</code>, as it turns out. I have no problems with that.)</p>",
        "id": 384816549,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026600
    },
    {
        "content": "<p>The issue comes with pairwise disjointedness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">IsDisjoint_of_DirichletPolyhedron</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">g₁</span> <span class=\"bp\">≠</span> <span class=\"n\">g₂</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"bp\">•</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"bp\">•</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 384816959,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026666
    },
    {
        "content": "<p>Of course now I need to assume that <code>x</code> is not the fixed point of any <code>g : G</code></p>",
        "id": 384817093,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026686
    },
    {
        "content": "<p>If I can prove that, then of course I can conclude that a <code>DirichletPolyhedron</code> is indeed a fundamental domain:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">IsFundamentalDomain_of_DirichletPolyhedron</span> <span class=\"o\">[</span><span class=\"n\">ProperSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">ProperlyDiscontinuousSMul</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsFundamentalDomain</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n      <span class=\"n\">covers</span> <span class=\"o\">:=</span> <span class=\"n\">IsCover_of_DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span>\n      <span class=\"n\">disjoint</span> <span class=\"o\">:=</span> <span class=\"n\">IsDisjoint_of_DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 384817384,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026735
    },
    {
        "content": "<p>For <code>IsDisjoint_of_DirichletPolyhedron</code>, the argument I have in mind is of course that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">DirichletSet₀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_DirichletSet</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">DirichletSet</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">DirichletSet₀</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">...?</span>\n</code></pre></div>\n<p>But what are some \"natural\" conditions under which this is true?? That's the use case...</p>",
        "id": 384818065,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026830
    },
    {
        "content": "<p>At the moment, I don't have a better idea than to make a new definition for this condition (that is, <code>∀ x y, ∃ᶠ z in 𝓝 y, dist x y &lt; dist x z</code>), and assume it to continue making progress...?</p>",
        "id": 384818621,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692026916
    },
    {
        "content": "<p>I think it can work only with a condition on the action (and the chosen <code>x</code>, but you could also require it for all <code>x</code>) which seems quite natural to me: for all <code>g, h</code>, the set of <code>y</code>s which are the same distance from <code>g • x</code> and <code>h • x</code> has empty interior</p>",
        "id": 384826883,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692028443
    },
    {
        "content": "<p>(Sorry I’m on my phone)</p>",
        "id": 384826972,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692028462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/384817093\">said</a>:</p>\n<blockquote>\n<p>Of course now I need to assume that <code>x</code> is not the fixed point of any <code>g : G</code></p>\n</blockquote>\n<p>To be pedantic, there is one exception!</p>",
        "id": 384827056,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1692028487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/384818065\">said</a>:</p>\n<blockquote>\n<p>For <code>IsDisjoint_of_DirichletPolyhedron</code>, the argument I have in mind is of course that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">DirichletSet₀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_DirichletSet</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">DirichletSet</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">DirichletSet₀</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">...?</span>\n</code></pre></div>\n<p>But what are some \"natural\" conditions under which this is true?? That's the use case...</p>\n</blockquote>\n<p>To be clear this lemma would still be false (I think at least)</p>",
        "id": 384827319,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692028541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/384816959\">said</a>:</p>\n<blockquote>\n<p>The issue comes with pairwise disjointedness:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">IsDisjoint_of_DirichletPolyhedron</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">g₁</span> <span class=\"bp\">≠</span> <span class=\"n\">g₂</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"bp\">•</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"bp\">•</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">:=</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>But I think this one would work</p>",
        "id": 384827475,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692028566
    },
    {
        "content": "<p>Yes, as you say, <code>interior_DirichletSet</code> isn't important for the final goal, which is <code>IsDisjoint_of_DirichletPolyhedron</code>.</p>",
        "id": 384827637,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692028604
    },
    {
        "content": "<p>I'm still flabbergasted that this doesn't seem to be addressed in the literature? (This is a <em>very</em> well-known construction...) People just automatically/implicitly assume that something like <code>interior_DirichletSet</code> holds for any reasonable <code>MetricSpace</code> but there's not an agreed-upon definition of \"reasonable\"??..</p>",
        "id": 384828434,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692028764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/384816959\">said</a>:</p>\n<blockquote>\n<p>The issue comes with pairwise disjointedness:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">IsDisjoint_of_DirichletPolyhedron</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">g₁</span> <span class=\"bp\">≠</span> <span class=\"n\">g₂</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"bp\">•</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"bp\">•</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">:=</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I hope I'm not missing something, but consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mo>×</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">)</mo><mo>⊂</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn mathvariant=\"double-struck\">2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\alpha = (\\mathbb{R} \\times \\{0\\}) \\cup (\\mathbb{Z} \\times \\{1\\}) \\subset \\mathbb{R^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">})</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mclose\">})</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> with the translation action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">G=\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>. Take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x=(1/2,0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1/2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>. Then the interior of the dirichlet polyhedron of x contains two isolated points from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> which intersect the interiors of its two neighbours.</p>",
        "id": 384842013,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1692031536
    },
    {
        "content": "<p>Indeed you need assumptions, either on the action or on the space</p>",
        "id": 384843767,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692031948
    },
    {
        "content": "<p>Ok I think I've gotten to the bottom of this. The condition, which I'm calling <code>ExtendableSpace</code> is a very natural one, it seems to me, and turns out (though maybe it's \"obvious\") that it's completely equivalent to the question of interior of a closed ball being an open ball: (I added the condition <code>x ≠ y</code> to avoid nonsense with <code>Nontrivial</code>) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ExtendableSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">extendable</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∃ᶠ</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"bp\">𝓝</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_closedBall''</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">ExtendableSpace</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">Metric.closedBall</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hr.lt_or_lt</span> <span class=\"k\">with</span> <span class=\"n\">hr</span> <span class=\"n\">hr</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.closedBall_eq_empty.2</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">Metric.ball_eq_empty.2</span> <span class=\"n\">hr.le</span><span class=\"o\">,</span> <span class=\"n\">interior_empty</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Subset.antisymm</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">Metric.ball_subset_interior_closedBall</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">x_eq_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">x_eq_y</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Metric.mem_ball_self</span> <span class=\"n\">hr</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">t_isOpen</span><span class=\"o\">,</span> <span class=\"n\">t_in_closedBall</span><span class=\"o\">⟩,</span> <span class=\"n\">y_in_t</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span>\n  <span class=\"k\">have</span> <span class=\"n\">extend</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hα.extendable</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x_eq_y</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.frequently_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">extend</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z_in_t</span><span class=\"o\">,</span> <span class=\"n\">dist_xz</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">extend</span> <span class=\"o\">(</span><span class=\"n\">IsOpen.mem_nhds</span> <span class=\"n\">t_isOpen</span> <span class=\"n\">y_in_t</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">z_in_ball</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.closedBall</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">mem_of_subset_of_mem</span> <span class=\"n\">t_in_closedBall</span> <span class=\"n\">z_in_t</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_closedBall</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">z_in_ball</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_ball</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotMemBallSelf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_ball</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Extendable_of_interior_closedBall</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">Metric.closedBall</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ExtendableSpace</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n      <span class=\"n\">extendable</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x_ne_y</span>\n        <span class=\"n\">by_contra</span> <span class=\"n\">hh</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Filter.not_frequently</span><span class=\"o\">,</span> <span class=\"n\">Filter.eventually_iff</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hh</span>\n        <span class=\"k\">have</span> <span class=\"n\">ball_in_</span><span class=\"bp\">𝓝</span> <span class=\"o\">:</span> <span class=\"n\">Metric.closedBall</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">y</span>\n        <span class=\"bp\">·</span> <span class=\"n\">convert</span> <span class=\"n\">hh</span>\n          <span class=\"n\">ext</span> <span class=\"n\">z</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Metric.mem_closedBall</span><span class=\"o\">,</span> <span class=\"n\">Metric.mem_ball</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span><span class=\"o\">,</span> <span class=\"n\">mem_setOf</span><span class=\"o\">]</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">interior_mem_nhds.mpr</span> <span class=\"n\">ball_in_</span><span class=\"bp\">𝓝</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">dist_pos.mpr</span> <span class=\"n\">x_ne_y</span><span class=\"o\">)),</span> <span class=\"n\">mem_nhds_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t_in_ball</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">y_in_t</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span>\n        <span class=\"k\">have</span> <span class=\"n\">y_in</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mem_of_mem_of_subset</span> <span class=\"n\">y_in_t</span> <span class=\"n\">t_in_ball</span>\n        <span class=\"n\">exact</span> <span class=\"n\">NotMemBallSelf</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">y_in</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Extendable_iff_interior_closedBall</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">ExtendableSpace</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">Metric.closedBall</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">interior_closedBall''</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Extendable_of_interior_closedBall</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Then one can refactor <code>interior_closedBall</code> by proving that <code>NormedSpace</code>s are <code>Extendable</code>. Sound worthwhile to you all?</p>\n<p>I'm guessing (but haven't worked out the details yet) that it's <em>exactly</em> what I need to get the <code>DirichletPolyhedron</code> stuff to work, TBD...</p>",
        "id": 385251933,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692118273
    },
    {
        "content": "<p>Since <code>Extendable_iff_interior_closedBall</code> is true, why wouldn't you just make the type class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">InteriorClosedBall</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">PseudoMetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">interior_closedBall</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">Metric.closedBall</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p><em>If</em> we were going to do this, that seems the more natural statement. However, at this point I don't yet see the value added. If the only instance you have is for normed spaces over <code>ℝ</code>, then that's still the only situation in which it applies, so why not just leave the normed space hypothesis instead? In addition, unless we can locate other use cases (and even if we can), it would be nice to have some reference to literature supporting this concept.</p>",
        "id": 385253500,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692118928
    },
    {
        "content": "<p>Yes, this concept seems to be completely missing from the literature!</p>",
        "id": 385253650,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692118994
    },
    {
        "content": "<p>My next use case is for Dirichlet domains</p>",
        "id": 385253687,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692119005
    },
    {
        "content": "<p>These are usually done in the context of group actions on Riemannian manifolds, but I don't (yet) see why they can't be done on general metric spaces, <em>as long as</em> one assumes <code>ExtendableSpace</code></p>",
        "id": 385253866,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692119061
    },
    {
        "content": "<p>How about the upper half plane with the hyperbolic metric for an example which isn't a vector space?</p>",
        "id": 385253922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692119087
    },
    {
        "content": "<p>The <code>InteriorClosedBall</code> structure seems less flexible to me; I feel like I'll need <code>ExtendableSpace</code> more directly...</p>",
        "id": 385253954,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692119099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/385253922\">said</a>:</p>\n<blockquote>\n<p>How about the upper half plane with the hyperbolic metric for an example which isn't a vector space?</p>\n</blockquote>\n<p>That's certainly a use case! We could show that the \"standard\" fundamental domain for the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SL(2,\\Z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span></span></span></span> is a Dirichlet domain...</p>",
        "id": 385254092,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692119155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/384826883\">said</a>:</p>\n<blockquote>\n<p>I think it can work only with a condition on the action (and the chosen <code>x</code>, but you could also require it for all <code>x</code>) which seems quite natural to me: for all <code>g, h</code> distinct, the set of <code>y</code>s which are the same distance from <code>g • x</code> and <code>h • x</code> has empty interior</p>\n</blockquote>\n<p>For your use case this much weaker (EDIT: it's not weaker at all!) assumption seems more adapted to me, and also geometrically intuitive. That doesn't mean we shouldn't add <code>Extendable</code>, but you could always say that the condition is always true assuming <code>Extendable</code>.</p>",
        "id": 385254217,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692119189
    },
    {
        "content": "<p>Well, okay, but the extendable condition could just be a lemma. The ball condition is what I would expect to be easier to check in practice (but maybe I'm wrong).</p>",
        "id": 385254218,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692119190
    },
    {
        "content": "<p>Right -- I thought that the upper half plane was the use case. What does Serre do in Course in Arithmetic?</p>",
        "id": 385254313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692119228
    },
    {
        "content": "<p>I haven't checked Serre, but every other book/article I've scanned in the last few days just moves implicitly from interiors of closed balls to open balls, without as much as a comment...</p>",
        "id": 385254536,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692119315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/385254217\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/384826883\">said</a>:</p>\n<blockquote>\n<p>I think it can work only with a condition on the action (and the chosen <code>x</code>, but you could also require it for all <code>x</code>) which seems quite natural to me: for all <code>g, h</code> distinct, the set of <code>y</code>s which are the same distance from <code>g • x</code> and <code>h • x</code> has empty interior</p>\n</blockquote>\n<p>For your use case this much weaker assumption seems more adapted to me, and also geometrically intuitive. That doesn't mean we shouldn't add <code>Extendable</code>, but you could always say that the condition is always true assuming <code>Extendable</code>.</p>\n</blockquote>\n<p>Yes, I thought about this condition as well. It requires an action, whereas I just want some \"soft\" condition on an abstract metric space...? Having played with it a bit, it seems to me that <code>Extendable</code> is a rather natural and useful notion!...?</p>",
        "id": 385254821,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692119438
    },
    {
        "content": "<p>See also this <a href=\"https://math.stackexchange.com/a/108017/33057\">stack exchange answer</a> which provides the <code>extendable ↔ interior_closedBall</code> fact.</p>",
        "id": 385255160,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692119604
    },
    {
        "content": "<p>(Or rather, closure of the open ball is the closed ball)</p>",
        "id": 385255219,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692119637
    },
    {
        "content": "<p><del>I suppose <code>Extendable</code> would also be satisfied by <code>ℝ≥0</code>-normed spaces, but that's a kind of artificial example (despite its potential utility).</del> Nevermind, we don't have those</p>",
        "id": 385255475,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692119745
    },
    {
        "content": "<p>Damn, I did a google search for interiors of closed balls, but google didn't automatically also search for closures of open balls! We need better AI!...</p>",
        "id": 385256134,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692120021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/385254313\">said</a>:</p>\n<blockquote>\n<p>Right -- I thought that the upper half plane was the use case. What does Serre do in Course in Arithmetic?</p>\n</blockquote>\n<p>One comment is that the upper half plane has a Riemannian structure, so this <code>Extendable</code> condition will certainly hold in that context (we'll see how easy it is to formalize...)</p>",
        "id": 385256814,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692120309
    },
    {
        "content": "<p>Also this <a href=\"https://mathoverflow.net/questions/74655/is-there-a-name-for-the-class-of-metric-spaces-such-that-the-closure-of-the-open\">Math Overflow</a> which hints at a different characterization, but the link on that answer is broken.</p>",
        "id": 385257125,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692120447
    },
    {
        "content": "<p>Yes, so maybe that's a more natural way of phrasing it, that for any fixed <code>x</code>, the map <code>y ↦ dist x y</code> has no local extrema?</p>",
        "id": 385257618,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692120642
    },
    {
        "content": "<p>Oh, interesting: <a href=\"https://mathoverflow.net/a/303836/33106\">this</a> shows that in a locally separable metric space the condition can only fail for countably many radii.</p>",
        "id": 385257754,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692120707
    },
    {
        "content": "<p>Yeah, at this point, I'm just trying to get a feel for what exists, I retract my claim about which condition may be easiest/most natural.</p>",
        "id": 385257840,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692120734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/385257618\">said</a>:</p>\n<blockquote>\n<p>Yes, so maybe that's a more natural way of phrasing it, that for any fixed <code>x</code>, the map <code>y ↦ dist x y</code> has no local extrema?</p>\n</blockquote>\n<p>That's basically the condition I gave but probably nicer to work with indeed</p>",
        "id": 385258014,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692120836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/385257754\">said</a>:</p>\n<blockquote>\n<p>Oh, interesting: <a href=\"https://mathoverflow.net/a/303836/33106\">this</a> shows that in a locally separable metric space the condition can only fail for countably many radii.</p>\n</blockquote>\n<p>Yes, I thought about separability as well, and came to the same conclusion. (It's not enough in my application to have this fail for countably many radii!...) You're obviously much better at google than I am! I don't know why I didn't find these when I searched. (Like an idiot, I went to textbooks...)</p>",
        "id": 385258299,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692120958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/384826883\">said</a>:</p>\n<blockquote>\n<p>I think it can work only with a condition on the action (and the chosen <code>x</code>, but you could also require it for all <code>x</code>) which seems quite natural to me: for all <code>g, h</code>, the set of <code>y</code>s which are the same distance from <code>g • x</code> and <code>h • x</code> has empty interior</p>\n</blockquote>\n<p>One worrying thing: this condition doesn't automatically hold on normed vector spaces.<br>\nConsider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> norm. All points with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x&gt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">y&lt;0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> are the same distance from both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 385258688,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1692121143
    },
    {
        "content": "<p>Oh indeed!</p>",
        "id": 385259365,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692121436
    },
    {
        "content": "<p>But wait there's a problem then</p>",
        "id": 385259417,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692121445
    },
    {
        "content": "<p>Because that's also a counterexample to <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span>'s theorem, even though the space is extendable!</p>",
        "id": 385259535,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692121502
    },
    {
        "content": "<p>Namely if you consider the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> norm by diagonal translation (so the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is translation by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1, 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>)</p>",
        "id": 385259732,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692121578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>, can you specify exactly which theorem please?</p>",
        "id": 385259812,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692121616
    },
    {
        "content": "<p>Then I <em>think</em> that if you take the intersection of the Dirichlet polyhedron at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> and its image under the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, you get a set with nonempty interior</p>",
        "id": 385259916,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692121676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/384816959\">said</a>:</p>\n<blockquote>\n<p>The issue comes with pairwise disjointedness:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">IsDisjoint_of_DirichletPolyhedron</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">g₁</span> <span class=\"bp\">≠</span> <span class=\"n\">g₂</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"bp\">•</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"bp\">•</span> <span class=\"n\">DirichletPolyhedron</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">:=</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This one (in an extendable metric space)</p>",
        "id": 385260059,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692121728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/interior.20of.20le.20is.20lt/near/384818065\">said</a>:</p>\n<blockquote>\n<p>For <code>IsDisjoint_of_DirichletPolyhedron</code>, the argument I have in mind is of course that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">DirichletSet₀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">interior_DirichletSet</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">interior</span> <span class=\"o\">(</span><span class=\"n\">DirichletSet</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">DirichletSet₀</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">...?</span>\n</code></pre></div>\n<p>But what are some \"natural\" conditions under which this is true?? That's the use case...</p>\n</blockquote>\n<p>In other words, I don't think this is enough to get the wanted result</p>",
        "id": 385260166,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692121773
    },
    {
        "content": "<p>I may be missing something obvious</p>",
        "id": 385260360,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692121854
    },
    {
        "content": "<p>Yeah, argh. I should really stop futzing around and do this properly. Luckily, it looks like Misha Kapovich has just recently done exactly that for me! <a href=\"https://arxiv.org/abs/2301.05325\">https://arxiv.org/abs/2301.05325</a> (See Prop 24. May not be so impossible, as we already have things like Lemma 9: <code>t2Space_of_properlyDiscontinuousSMul_of_t2Space</code>...)</p>",
        "id": 385276224,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1692128652
    },
    {
        "content": "<p>Indeed that looks like a nice reference. This is also an interesting point for me to mention that, now that we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsProperMap#doc\">docs#IsProperMap</a> (which corresponds to \"Bourbaki-proper\" in that paper), I will at some point develop the full theory of proper group actions and redefine <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProperlyDiscontinuousSMul#doc\">docs#ProperlyDiscontinuousSMul</a> in terms of it. I have some things I want to discuss about the implementation, but that'll wait for a bit.</p>",
        "id": 385278832,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692129943
    }
]