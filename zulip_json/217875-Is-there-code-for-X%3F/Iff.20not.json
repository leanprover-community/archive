[
    {
        "content": "<p>Does the following lemma not exist (in mathlib 4)?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Library search couldn't find it.</p>",
        "id": 349088012,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1681387366
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=not_iff_not#doc\">docs4#not_iff_not</a> ?</p>",
        "id": 349088137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681387394
    },
    {
        "content": "<p><del>docs#iff.not</del> <del>docs4#Iff.not</del> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 349088168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681387401
    },
    {
        "content": "<p>Thanks! I guess library search (for mathlib 4) isn't quite ready yet?</p>",
        "id": 349088367,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1681387451
    },
    {
        "content": "<p>What does <code>example (p q : Prop) : (¬ p ↔ ¬ q) ↔ (p ↔ q) := by library_search</code> do?</p>",
        "id": 349088773,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1681387558
    },
    {
        "content": "<p>That works</p>",
        "id": 349089573,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1681387757
    },
    {
        "content": "<p>I guess the rule of thumb is \"more complex expression on the left hand side\" but even so I thought that lean 3 library search would have got it</p>",
        "id": 349108810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681392136
    },
    {
        "content": "<p>I think lean3 library search does, but this is Lean 4</p>",
        "id": 349110379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681392482
    },
    {
        "content": "<p>Interesting, I thought I had fixed Lean4's library_search to find the symmetric versions of lemmas. I created <a href=\"https://github.com/leanprover-community/mathlib4/issues/3426\">https://github.com/leanprover-community/mathlib4/issues/3426</a> to track library_search issues, and anyone should feel free to contribute examples that should work there.</p>",
        "id": 349209577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681419026
    }
]