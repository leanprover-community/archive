[
    {
        "content": "<p>Is there a proof of the Riemann series theorem (also called the Riemann rearrangement theorem) in Lean? I tried looking around in mathlib's infinite sum API but if I understand this correctly, it seemed that most sums were of the form</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>S</mi><mtext> becomes a larger and larger finite subset of X</mtext></mrow></munder><munder><mo>∑</mo><mrow><mi>t</mi><mo>∈</mo><mi>S</mi></mrow></munder><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{S \\text{ becomes a larger and larger finite subset of X}} \\sum_{t \\in S}t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.3717em;vertical-align:-1.3217em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-2.3479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord text mtight\"><span class=\"mord mtight\"> becomes a larger and larger finite subset of X</span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8882em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.05em;\"><span style=\"top:-1.8557em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3217em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>\n<p>so I couldn't find much on series defined as the limit of partial sums. My understanding (and I might be wrong) is that mathlib's definition only works for series that converge absolutely.</p>\n<p>More generally, is there any easier way to work with these types of series other than something like <code>filter.tendsto (λ k, (finset.range k).sum f) filter.at_top (nhds c)</code>. Alternatively, how do you work with conditionally convergent series?</p>",
        "id": 339652997,
        "sender_full_name": "Niels Voss",
        "timestamp": 1678000241
    },
    {
        "content": "<p>Can you write the lean <em>statement</em> you're looking for?</p>",
        "id": 339653154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678000402
    },
    {
        "content": "<p>This wasn't actually for an existing project, I was just interested in knowing if anyone had tried this yet.<br>\nMy best attempt at recreating this in a Lean statement was (and this might be totally wrong):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">series</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">series</span><span class=\"o\">)</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">converges_absolutely</span> <span class=\"o\">(</span><span class=\"n\">series</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"o\">(</span><span class=\"n\">series</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">‖</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">riemann_rearrangement_theorem</span> <span class=\"o\">{</span><span class=\"n\">series</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">converges</span> <span class=\"n\">series</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">converges_absolutely</span> <span class=\"n\">series</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">function.bijective</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">filter.tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">series</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I haven't really checked this because I'm somewhat unfamiliar with how limits in Lean work in general</p>",
        "id": 339653419,
        "sender_full_name": "Niels Voss",
        "timestamp": 1678000602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, that's a you question <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 339661356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678006427
    },
    {
        "content": "<p>Yes, we don't have this kind of sum in lean. I'm not an analyst but my impression is that this concept of summation is just used for undergraduate teaching and is not particularly central any more (summing divergent series used to be a thing but perhaps not so much now)</p>",
        "id": 339661428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678006448
    },
    {
        "content": "<p>The lean definition of sum, as you say Niels, is equivalent to \"absolutely convergent, and sum is...\"</p>",
        "id": 339661523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678006513
    },
    {
        "content": "<p>Not quite, Kevin, no. It's not <em>absolute</em> convergence that we have in mathlib, but <em>unconditional</em> convergence., which is (slightly) weaker.</p>",
        "id": 339661760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678006662
    },
    {
        "content": "<p>I think Yael is right. <del>For an example, I think the alternating harmonic series is <code>summable</code></del>.</p>",
        "id": 339661927,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1678006764
    },
    {
        "content": "<p>What? Surely not.</p>",
        "id": 339661945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678006782
    },
    {
        "content": "<p>Because the partial sums when split out both diverge?</p>",
        "id": 339662027,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1678006807
    },
    {
        "content": "<p>Do absolute and unconditional convergence coincide for nat-indexed sequences of reals? (I have no idea what unconditional convergence is)</p>",
        "id": 339662040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678006814
    },
    {
        "content": "<p>For sequences of reals, yes, they are equivalent. Not in general, though: let <code>e_n</code> be the standard basis of a Hilbert space. Then <code>n -&gt; e_n / n</code> is not absolutely converging, but it is unconditionally converging.</p>",
        "id": 339662451,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1678007073
    },
    {
        "content": "<p>(i.e., in whatever order you do the summation you will get the same limit).</p>",
        "id": 339662526,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1678007121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Riemann.20series.20theorem.3F/near/339661428\">said</a>:</p>\n<blockquote>\n<p>Yes, we don't have this kind of sum in lean. I'm not an analyst but my impression is that this concept of summation is just used for undergraduate teaching and is not particularly central any more (summing divergent series used to be a thing but perhaps not so much now)</p>\n</blockquote>\n<p>Not an analyst either, but I seem to recall that “summability methods” were/are used for something, and actually prominent examples of those are based on looking at the summation of the first terms (calibrated by some weight, for instance, <a href=\"\">Cesàro's</a>).</p>",
        "id": 339684704,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1678018041
    },
    {
        "content": "<p>Right -- Hardy even wrote a book on divergent series. But that was a long time ago.</p>",
        "id": 339690108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678020414
    },
    {
        "content": "<p>I find the idea that \"this maths isn't trendy anymore\" to be a weak explanation for not having certain things. Certainly if the methods have evolved to give the same results, that's nice, but if we miss maths due to the results not being as trendy?</p>",
        "id": 339697628,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1678024116
    },
    {
        "content": "<p>I mean, there is a lot of trendy math that we are missing too (almost all of it in fact).</p>",
        "id": 339697735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678024174
    },
    {
        "content": "<p>One has to choose what to do somehow.</p>",
        "id": 339697790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678024196
    },
    {
        "content": "<p>Yes, it's all a matter of priorities. People are welcome to work on numerical series, and this work will get to mathlib at some point after the port.</p>",
        "id": 339700182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678025238
    },
    {
        "content": "<p>So, just to confirm, we don't have the Riemann series theorem in Lean and it is generally low priority, but could be added to mathlib after the port or if there is time? I was considering working on it, though I'm not quite sure I know enough to actually prove it.</p>",
        "id": 339742208,
        "sender_full_name": "Niels Voss",
        "timestamp": 1678048236
    },
    {
        "content": "<p>I think so.</p>",
        "id": 339743893,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678049405
    },
    {
        "content": "<p>As an analyst who has done some reasonable amount of work with divergent series I can say that they definitely still matter. At the same time, I completely understand why mathlib has taken an alternate approach and considers these sorts of things low priority.</p>",
        "id": 340013252,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678160804
    },
    {
        "content": "<p>I've always viewed the riemann series theorem as a curiosity or endpoint theorem. It helps you understand the nature of conditionally convergent series but it's not actually all that useful as a building block for other things, is it?</p>",
        "id": 340014382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678161663
    },
    {
        "content": "<p>Riemann series are useful as a reference family to prove the convergence of other series.</p>",
        "id": 340022733,
        "sender_full_name": "Julien Puydt",
        "timestamp": 1678168560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"572328\">@Julien Puydt</span> I think you have misunderstood what this thread is about. (I suspect you are thinking about the convergence of the series defining the Riemann zeta function for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Re</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Re}(s) &gt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Re</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, which has been in mathlib essentially forever.)</p>",
        "id": 340029354,
        "sender_full_name": "David Loeffler",
        "timestamp": 1678171946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span> indeed ; sorry for the noise!</p>",
        "id": 340029766,
        "sender_full_name": "Julien Puydt",
        "timestamp": 1678172045
    },
    {
        "content": "<p>Mario, I haven't used the Riemann rearrangement theorem explicitly that I recall, but I have definitely seen similar theorems used. For instance, I know an argument that makes use of the following fact: given a divergent series of positive numbers (terms converge to zero though), and any other nonsummable sequence of positive numbers (not necessarily converging to zero), there is a partition of the series such that the sum of each subseries is the corresponding term in the second sequence.</p>",
        "id": 340106601,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678194967
    },
    {
        "content": "<p>Oh actually I take it back, I think I have used the Riemann rearrangement theorem. I have a paper which shows that an idempotent operator acting on a Hilbert space is not a Hilbert-Schmidt perturbation of a projection if and only if there is an orthonormal basis relative to which the diagonal of the matrix representation of this operator is the zero sequence. I'm fairly certain the forward implication uses this result under the hood somewhere.</p>",
        "id": 340107502,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678195223
    },
    {
        "content": "<p>Well this has been very enlightening :-) Thanks Jireh! <span class=\"user-mention\" data-user-id=\"521331\">@Niels Voss</span> maybe you want to make a little PR about convergent (in the undergrad sense) series?</p>",
        "id": 340109724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678195830
    },
    {
        "content": "<p>I don't have much free time this week, but I can try next week.<br>\nWould it be better to keep the definition of a series as <code>nat -&gt; real</code>, or should I define a new type which allows for dot notation (kind of like how matrix defined its own type)? Alternatively I could use <code>seq</code> which allows both finite and infinite series</p>",
        "id": 340143992,
        "sender_full_name": "Niels Voss",
        "timestamp": 1678204018
    },
    {
        "content": "<p>My instinct is nat -&gt; some topological monoid</p>",
        "id": 340156747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678207040
    },
    {
        "content": "<p>I would say <code>α → β</code> where <code>locally_finite_order_bot α</code> and <code>topological_ring β</code>.</p>",
        "id": 340159048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678207623
    },
    {
        "content": "<p>Aside from the level of generality, should it be defined as something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">series</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>Or should there not be any special type for series at all, and <code>nat -&gt; R</code> will be used directly in theorem statements?<br>\nI normally think of a series as a special way of interpreting a sequence, and so the latter feels more natural to me, but the former allows dot notation and typeclass instances for series. And I have heard of people studying series as their own type of object as well.</p>",
        "id": 340236406,
        "sender_full_name": "Niels Voss",
        "timestamp": 1678232621
    },
    {
        "content": "<p>I would expect no special type.</p>",
        "id": 340288284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678261805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"521331\">Niels Voss</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Riemann.20series.20theorem.3F/near/340143992\">said</a>:</p>\n<blockquote>\n<p>like how matrix defined its own type</p>\n</blockquote>\n<p>This is necessary because matrix multiplication is not function (elementwise) multiplication</p>",
        "id": 340295298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678264227
    }
]