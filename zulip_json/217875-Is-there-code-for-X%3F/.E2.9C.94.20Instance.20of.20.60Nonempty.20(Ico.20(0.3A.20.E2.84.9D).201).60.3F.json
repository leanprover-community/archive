[
    {
        "content": "<p>Is there an automatic way to have Lean recognize <code>Nonempty (Ico (0: ℝ) 1) </code> by some instance in Mathlib? <br>\n<code>#synth Nonempty (Ico (0: ℝ) 1)</code> returns <code>failed to synthesize Nonempty ↑(Ico 0 1)</code>. <br>\nI then include the instance manually: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span>  <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"o\">:=</span>  <span class=\"n\">nonempty_Ico.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nonempty_coe_sort</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Or alternatively, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span>  <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"o\">:=</span>  <span class=\"n\">nonempty_Ico.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- rwa [nonempty_coe_sort]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">nonempty_subtype</span><span class=\"o\">,</span> <span class=\"n\">mem_Ico</span><span class=\"o\">]</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>But I am wondering if there is a more automatic way to do this and hide the lemmas under the carpet? I guess <code>simp; assumption</code> does this as well, but I was hoping to not even write the instance at all.</p>",
        "id": 393647962,
        "sender_full_name": "Sina",
        "timestamp": 1695889030
    },
    {
        "content": "<p>Your first proof looks pretty optimal to me, though <code>linarith</code> is overkill and <code>exact?</code> would find a lemma that is exactly the goal there</p>",
        "id": 393649947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695889559
    },
    {
        "content": "<p>Once you've found the lemma you can state the general version that works for rationals too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ZeroLEOneClass</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">nonempty_coe_sort.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">nonempty_Ico.mpr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">zero_lt_one</span>\n</code></pre></div>",
        "id": 393650113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695889609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420917\">Sina</span> has marked this topic as resolved.</p>",
        "id": 393654631,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695890736
    }
]