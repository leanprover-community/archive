[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.run#doc\">docs#Lean.Elab.Tactic.run</a> has type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">Lean.Elab.Tactic.TacticM</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Lean.Elab.TermElabM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Lean.MVarId</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so you can use it to apply tactics to a single goal.  <a href=\"https://github.com/leanprover/lean4/blob/baa4b68a71926a722b77d4ec2cba34bfc76cc5aa/src/Lean/Elab/Tactic/Basic.lean#L75-L93\">It’s implementation</a> has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"n\">aux.runCore'</span> <span class=\"o\">{</span> <span class=\"n\">elaborator</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>so there clearly is a concept of “many goals”.</p>\n<p>I can’t find a similar function for applying a tactic to many goal (so that they can for example be individually focused using <code>\\.</code> or <code>\\case</code>). Did I just not find it?</p>",
        "id": 402550745,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700166367
    },
    {
        "content": "<p>You can always <code>setGoals</code> within the <code>TacticM</code> computation passed to <code>run</code>.</p>",
        "id": 402563158,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1700171507
    },
    {
        "content": "<p>Ah, ok. In that case, can I start <code>TacticM</code> without a MVar? What is the significance of this “first” MVar? It seems it somehow affects the context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>(I guess I can try to use  the first in my list, or create a throw-away <code>MVar</code> from <code>TermElabM</code>, but that’d just be guessing.)</p>",
        "id": 402566352,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700172844
    },
    {
        "content": "<p>I think that line is just making sure the local context is set to something reasonable. You could probably refactor <code>Tactic.run</code> to have a <code>Tactic.runWith</code> that takes a list of metavariables, and define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span> <span class=\"n\">runWith</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>to preserve its current behavior</p>",
        "id": 402577844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700178271
    }
]