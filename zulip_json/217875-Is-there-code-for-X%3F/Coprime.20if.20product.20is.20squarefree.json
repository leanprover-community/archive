[
    {
        "content": "<p>Am I right to say that we don't have the following lemma? It should hold more generally for PIDs or unique factorisation monoids depending on the definition of coprime you use.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Squarefree</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">coprime_of_mul_squarefree</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"bp\">$</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.coprime</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h_ncop</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">Nat.Prime.not_coprime_iff_dvd.mp</span> <span class=\"n\">h_ncop</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">hp</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.squarefree_iff_prime_squarefree.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">hp.1</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.mul_dvd_mul</span> <span class=\"n\">hp.2.1</span> <span class=\"n\">hp.2.2</span>\n</code></pre></div>",
        "id": 371713659,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1688301016
    },
    {
        "content": "<p>We seem to have exactly one lemma relating <code>coprime</code> and <code>squarefree</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/nat/squarefree.html#nat.squarefree_mul\">nat.squarefree_mul</a></p>",
        "id": 371714540,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688301254
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5669\">#5669</a></p>",
        "id": 371738870,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1688307322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Why do you keep posting links to mathlib3 docs even if the thread is about mathlib4?</p>",
        "id": 371801303,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688327215
    },
    {
        "content": "<p>Mathlib3: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.squarefree_mul\">docs3#nat.squarefree_mul</a>, Mathlib4: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.squarefree_mul#doc\">docs#Nat.squarefree_mul</a> (Note these are both linkifiers Yaël. No need to make your own links)</p>",
        "id": 371802430,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688327716
    },
    {
        "content": "<p>because that's the docs I have open and it's easy to figure out the mathlib4 declaration from there.</p>",
        "id": 371814574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688333535
    },
    {
        "content": "<p>It's easier for everyone else if you post a less confusing message</p>",
        "id": 371887799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688367236
    },
    {
        "content": "<p>Wow, a language model rewrote your proof: <a href=\"https://wolfia.com/query/01H4J8BPAGH5RQ0F2NEGZY1KSB\">https://wolfia.com/query/01H4J8BPAGH5RQ0F2NEGZY1KSB</a> (see <a href=\"#narrow/stream/219941-Machine-Learning-for-Theorem-Proving/topic/Semantic.20Search.20for.20Mathematics/near/371908249\">here</a> for context)<br>\nIt seems to know Lean (3) pretty well and was able to informalize the proof (or maybe it already knew the proof); probably GPT(-4)?</p>",
        "id": 372468135,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1688535016
    },
    {
        "content": "<p>That link doesn't seem germane to this thread?</p>",
        "id": 372476516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688538178
    },
    {
        "content": "<p>Thanks, fixed</p>",
        "id": 372497426,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1688544146
    },
    {
        "content": "<p>Can it generalise it?</p>",
        "id": 372505411,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1688546002
    },
    {
        "content": "<p>I asked it to generalize (<a href=\"https://wolfia.com/query/c4e3fe2c-f05d-48f7-9323-a52114ff891d\">two</a> of the <a href=\"https://wolfia.com/query/b57edbf8-8c6f-4b44-896d-ca4ecc50ed07\">attempts</a>) but the results were disappointing. Anyway, here's a generalization by myself of the PR to arbitrary \"decomposition monoids\", which include all gcd monoids: <a href=\"https://gist.github.com/alreadydone/0ad7fb42db30711c4540ac92e37f6655\">https://gist.github.com/alreadydone/0ad7fb42db30711c4540ac92e37f6655</a> (probably golfable)</p>",
        "id": 373110730,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1688716080
    },
    {
        "content": "<p>With that definition of <code>RelPrime</code> the original lemma actually holds for arbitrary commutative monoids!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Squarefree</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">relPrime_of_squarefree_mul</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Squarefree</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">IsUnit</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"bp\">$</span> <span class=\"n\">mul_dvd_mul</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n</code></pre></div>",
        "id": 373181989,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1688730715
    },
    {
        "content": "<p>Ah sorry, I missed that you <a href=\"https://gist.github.com/alreadydone/0ad7fb42db30711c4540ac92e37f6655/53c0540ecd9eadb9dc3fc4d6cf4bd0e23235237a#file-decomposition_monoid-lean-L19\">proved it too</a></p>",
        "id": 373248141,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1688743502
    }
]