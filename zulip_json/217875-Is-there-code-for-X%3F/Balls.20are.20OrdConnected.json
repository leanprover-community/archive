[
    {
        "content": "<p>Is this result hidden in Mathlib under a different name?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">key</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.uIcc</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 397196662,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697585799
    },
    {
        "content": "<p>I cannot get something more direct than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">key</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.uIcc</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Convex</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">Metric.ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">convex_ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">segment_eq_uIcc</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">refine</span> <span class=\"n\">Convex.segment_subset</span> <span class=\"n\">this</span> <span class=\"bp\">?</span><span class=\"n\">hx</span> <span class=\"n\">hu</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"n\">says</span> <span class=\"n\">exact</span> <span class=\"n\">Metric.mem_ball_self</span> <span class=\"n\">hε</span>\n</code></pre></div>",
        "id": 397204798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697590586
    },
    {
        "content": "<p>Note that  <code>rw?</code> does not work because it is limited to 20 suggestions.</p>",
        "id": 397204815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697590609
    },
    {
        "content": "<p>Should I remove the limit? <code>rw?</code> has the automatic \"stop before you run out of heartbeats\" mechanism, so perhaps the limit is just inconvenient.</p>",
        "id": 397207655,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697592088
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7741\">#7741</a> sets it to 200, but I will take any suggestions. :-)</p>",
        "id": 397207897,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697592242
    },
    {
        "content": "<p>I don't know. In the example above it would be nice to say that your suggestion tactics find everything that is needed. But I don't think I would have had the patience to read 200 suggestions. I used the good old file browsing method.</p>",
        "id": 397210490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697593823
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Convex.Normed</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Metric</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">key</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.uIcc</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">segment_eq_uIcc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">convex_ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">segment_subset</span> <span class=\"o\">(</span><span class=\"n\">mem_ball_self</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"n\">hu</span>\n</code></pre></div>",
        "id": 397234182,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697607205
    },
    {
        "content": "<p>Note that we don't have a convenient typeclass for \"balls are order-connected\" yet. It's annoying for what I do as well.</p>",
        "id": 397234612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697607448
    },
    {
        "content": "<p>Thanks - but in my question u and t are in a subtype, so I cannot use convexity which is why I was asking ...</p>",
        "id": 397239529,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697610233
    },
    {
        "content": "<p>Yeah so that falls back onto \"We don't have a convenient typeclass for \"balls are order-connected\" and Yaël is sad <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>\".</p>",
        "id": 397239680,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697610298
    },
    {
        "content": "<p>But also <code>Icc 0 1</code> <em>is</em> a convex space, just not to mathlib's definition. If you want a few months for me to perform the convexity refactor, this should Just Work.</p>",
        "id": 397239841,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697610372
    },
    {
        "content": "<p>I will just get out of the Icc, prove inclusion in R and project back, I was just lazy to do that and was looking for a cool name saying that val is an order isomorphism or something to do it in one line</p>",
        "id": 397239978,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697610461
    },
    {
        "content": "<p>OK <code>apply</code> is doing something that I don't really understand here but I'm happy anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Metric</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">key</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.uIcc</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">uIcc</span> <span class=\"n\">t.1</span> <span class=\"n\">u.1</span> <span class=\"bp\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">t.1</span> <span class=\"n\">ε</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">v</span> <span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">this</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">segment_eq_uIcc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">convex_ball</span> <span class=\"n\">t.1</span> <span class=\"n\">ε</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">segment_subset</span> <span class=\"o\">(</span><span class=\"n\">mem_ball_self</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"n\">hu</span>\n</code></pre></div>",
        "id": 397250875,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697614644
    },
    {
        "content": "<p>That's because <code>s ⊆ t</code> is defined as <code>∀ x, x ∈ s → x ∈ t</code></p>",
        "id": 397251748,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697614950
    },
    {
        "content": "<p>(Assuming I got the direction right)</p>",
        "id": 397251783,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697614965
    },
    {
        "content": "<p>Yes I get this, what I wasn't predicting is how it sees through <code>Subtype.val</code> (although, <code>v \\in ball t e \\iff v.1 \\in ball t.1 e</code> is <code>rfl</code>). I just tried <code>apply</code> because I was feeling lucky ;-)</p>",
        "id": 397252482,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1697615203
    },
    {
        "content": "<p>Though here <code>apply</code> is also seeing through the definition of some coercions. You can see a bit more of what's going on with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span> <span class=\"n\">Metric</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">key</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Set.uIcc</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">t</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">uIcc</span> <span class=\"n\">t.1</span> <span class=\"n\">u.1</span> <span class=\"bp\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">t.1</span> <span class=\"n\">ε</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">v</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">subset_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">this</span> <span class=\"n\">v</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">segment_eq_uIcc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">convex_ball</span> <span class=\"n\">t.1</span> <span class=\"n\">ε</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">segment_subset</span> <span class=\"o\">(</span><span class=\"n\">mem_ball_self</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"n\">hu</span>\n</code></pre></div>",
        "id": 397252519,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697615220
    },
    {
        "content": "<p>This feels like something that should be covered by <code>simp</code> or <code>norm_cast</code>. (<code>norm_cast</code> finishes here, but only accidentally)</p>",
        "id": 397252606,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697615268
    }
]