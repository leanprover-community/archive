[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.SplittingField.Construction</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">l.get</span><span class=\"bp\">!</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- failed to synthesize instance Inhabited F</span>\n</code></pre></div>\n<p>Where can I find an instance of inhabited for Field?</p>",
        "id": 393972288,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1696007000
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>comes up short for me!</p>",
        "id": 393972650,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696007152
    },
    {
        "content": "<p>I suppose you could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.getD#doc\">docs#List.getD</a> instead</p>",
        "id": 393972843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696007224
    },
    {
        "content": "<p>I think it would probably be safe to add this, but it wouldn't be safe for <code>Monoid</code> or <code>AddMonoid</code></p>",
        "id": 393974257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696007866
    },
    {
        "content": "<p>(as if we had both there would be a diamond for <code>Ring</code>)</p>",
        "id": 393974334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696007887
    }
]