[
    {
        "content": "<p>I see lots of API for <code>Set.uIcc</code> and <code>Set.uIoc</code>, but no <code>Set.uIoo</code>? Is there a reason for this?</p>",
        "id": 408624794,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1702910381
    },
    {
        "content": "<p>Nobody needed it. If you do need it, I can add the API quickly.</p>",
        "id": 408625299,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702910527
    },
    {
        "content": "<p>That'd be great, thanks! (I didn't know if that was a design choice, or if I was supposed to use something else for this case...)</p>",
        "id": 408625385,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1702910553
    },
    {
        "content": "<p>Here's a use case (that I could use some help with please): I know something on an open interval, and want to derive that it's true for almost all points on the closed interval:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Interval</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀ᵐ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">MeasureTheory.volume</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]]</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 408625696,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1702910648
    },
    {
        "content": "<p>(Of course I would like to drop the <code>a &lt; b</code> assumption and use <code>uIoo</code> instead...)</p>",
        "id": 408626041,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1702910754
    },
    {
        "content": "<p>Oh, I see. In the meantime you can always use <code>Set.Ioo (min a b) (max a b)</code>.</p>",
        "id": 408626393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702910850
    },
    {
        "content": "<p>I write Lean code fast but not instantaneously <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> (and I'm currently working at making some more of <a href=\"https://yaeldillies.github.io/LeanAPAP/blueprint/dep_graph_document\">https://yaeldillies.github.io/LeanAPAP/blueprint/dep_graph_document</a> green)</p>",
        "id": 408626571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702910897
    },
    {
        "content": "<p>No rush of course! :) (A hint on the second question would be higher priority...)</p>",
        "id": 408626800,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1702910968
    },
    {
        "content": "<p>I would do it low-brow by proving that <code>{x | x ∈ [[a, b]] → p x}ᶜ ⊆ {a, b}</code> and that <code>μ {a, b} = 0</code>.</p>",
        "id": 408627381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702911149
    }
]