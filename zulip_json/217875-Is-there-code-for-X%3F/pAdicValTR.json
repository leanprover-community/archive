[
    {
        "content": "<p>What do people think about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">adicValTR</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n<span class=\"n\">where</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.div_lt_self</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span>\n    <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">k</span>\n</code></pre></div>\n<p>with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[csimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">padicValNat_eq_adicValTR</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">padicValNat</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">adicValTR</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>For comparison, before </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">padicValNat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"c1\">-- hangs</span>\n</code></pre></div>\n<p>while after it is instantaneous. <code>eval</code> for the tail recursive version starts to struggle at <code>1000000</code>.</p>",
        "id": 366855838,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686926572
    },
    {
        "content": "<p>We need more of this stuff :-)</p>",
        "id": 366881061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686931364
    },
    {
        "content": "<p>I've got a reasonably clean proof of <code>padicVal_eq_adicValTR</code> now. </p>\n<p>Another question: where should it go? I wanted this for the Miller-Rabin witness test. Is it reasonable to ask similarly minded people to  <code>import Mathlib.NumberTheory.Padics.PadicVal</code>? Or should the definition go higher up the dep tree?</p>",
        "id": 366902389,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686936216
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5158\">!4#5158</a></p>",
        "id": 366944861,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686948967
    }
]