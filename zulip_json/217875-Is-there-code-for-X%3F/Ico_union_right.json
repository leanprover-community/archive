[
    {
        "content": "<p>Does this code really not exist? Ico is Finset here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399858267,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698902814
    },
    {
        "content": "<p>There is <code>List.Ico.succ_top</code> for the list version</p>",
        "id": 399858322,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698902856
    },
    {
        "content": "<p>(By the way, how do I use that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Ico.succ_top#doc\">docs4#List.Ico.succ_top</a> thing?)</p>",
        "id": 399858337,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698902871
    },
    {
        "content": "<p>... Like that</p>",
        "id": 399858344,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698902878
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">t</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Ico</span><span class=\"o\">,</span> <span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">mem_Ico</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton</span><span class=\"o\">]</span>\n      <span class=\"n\">right</span>\n      <span class=\"n\">rfl</span>\n    <span class=\"bp\">·</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h2</span> <span class=\"n\">h</span>\n      <span class=\"n\">left</span>\n      <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n      <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>It's true btw, just put together a terrible proof with some tactic abuse</p>",
        "id": 399858913,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698903319
    },
    {
        "content": "<p>If someone has a couple minutes, feel free to golf it and pr :(</p>",
        "id": 399858939,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698903347
    },
    {
        "content": "<p>I golfed it a little :P</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">t</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_Ico</span><span class=\"o\">,</span> <span class=\"n\">mem_union</span><span class=\"o\">,</span> <span class=\"n\">mem_Ico</span><span class=\"o\">,</span> <span class=\"n\">lt_succ_iff_lt_or_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"k\">match</span> <span class=\"n\">h2</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">h'.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 399860180,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698904238
    },
    {
        "content": "<p>(Why does it look completely different <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> )</p>",
        "id": 399860193,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698904251
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.Ico_succ_right</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Ico_insert_right</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">insert_eq</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">union_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 399864297,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698906564
    },
    {
        "content": "<p>Ahh thanks a lot. Your first <code>rw</code> is not needed :)</p>",
        "id": 399864472,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698906653
    },
    {
        "content": "<p>Yeah, <code>rw_search</code> finds <code>Try this: rw [Nat.Ico_succ_right, @union_comm, ← Ico_insert_right h]</code></p>",
        "id": 399864975,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698906957
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Ico_succ_right_eq_insert_Ico#doc\">docs#Nat.Ico_succ_right_eq_insert_Ico</a></p>",
        "id": 399865873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698907339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Finset.Ico_union_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Ico_succ_right_eq_insert_Ico</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">union_comm</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>yay</p>",
        "id": 399866073,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698907443
    },
    {
        "content": "<p>You should use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.insert_eq#doc\">docs#Finset.insert_eq</a> (or not use <code>∪ {b}</code> in the first place, really).</p>",
        "id": 399866425,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698907631
    },
    {
        "content": "<p>I see, I will change my code for that</p>",
        "id": 399866900,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698907912
    }
]