[
    {
        "content": "<p>Say: When <code>M</code> is a smooth manifold without boundary, modelled on the pair <code>(E,H)</code> and <code>e</code> is a chart of <code>M</code>, the extended chart <code>I \\circ e : M \\to E</code> is a local diffeomorphism on <code>e.source</code>. (I have not thought about the case of boundary.)</p>\n<p>Mathlib <em>seems</em> to have the an open subset of <code>M</code> is a smooth manifold again, but not much more material about diffeomorphisms. (I only see <code>Diffeomorph.lean</code>; <code>WhitneyEmbedding.lean</code> is apparently the only file importing this.)</p>",
        "id": 396670685,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1697308981
    },
    {
        "content": "<p>Building on this: we're also missing the fact that the differential of a diffeomorphism (at each point) is a linear isomorphism, right?</p>",
        "id": 396670695,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1697308997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> There is also some material about diffeomorphisms phrased in the greater generality of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Structomorph#doc\">docs#Structomorph</a>, for example this condition for well-behaved groupoid composition: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StructureGroupoid.HasGroupoid.comp#doc\">docs#StructureGroupoid.HasGroupoid.comp</a>.  I think I would advocate for working with that concept rather than <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Diffeomorph#doc\">docs#Diffeomorph</a>, where possible.</p>",
        "id": 396671267,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697309654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Thank you for the pointer, indeed I hadn't seen <code>Structomorph</code> yet. I agree that this looks right the right conceptual framework for the charts statement.</p>",
        "id": 398773066,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698357384
    },
    {
        "content": "<p>A short update: I have formalised most of both points above; I'm not refactoring it to make it mathlib-ready.<br>\nFor instance, the second item holds generally for local diffeomorphisms at a point - so I'm also formalising local diffeomorphisms.</p>",
        "id": 398773186,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698357459
    },
    {
        "content": "<p>Trying to actually prove this (\"charts are structomorphisms\"), I realised an obvious complication. A chart on a manifold <code>M</code> modelled on <code>(E,H)</code> is <strong>not</strong> a structomorphism, as charts are only <em>local</em> homeomorphisms. Does mathlib have that open subsets of manifolds are manifolds? Then, I could regard charts as honest homeomorphisms between these subsets.</p>\n<p>I'm not sure if that's the best approach, or one should rather define a notion of \"local structomorphisms\": a function that's a structomorphisms on an open set and has junk values everywhere else. I <em>do</em> have local diffeomorphisms on a branch, so showing \"a local structomorphism of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span> manifolds is a local <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span> diffeo\"doesn't seem too bad.</p>",
        "id": 398931463,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698424183
    },
    {
        "content": "<p>As I understand it, we have some of the way to \"open subsets of manifolds are manifolds\", but not everything</p>\n<ul>\n<li>we <em>don't</em> have yet that an open subset of a charted space (whose structure groupoid is ClosedUnderRestriction) is a charted space,</li>\n<li>but we do have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.Opens.instHasGroupoid#doc\">docs#TopologicalSpace.Opens.instHasGroupoid</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Geometry/Manifold/SmoothManifoldWithCorners.html#TopologicalSpace.Opens.instSmoothManifoldWithCornersSubtypeMemOpensInstMembershipInstSetLikeOpensInstTopologicalSpaceSubtypeInstChartedSpace\">this instance</a> which show the structure groupoid part of this.</li>\n<li>(We also have that continuous, C^m and analytic groupoids are ClosedUnderRestriction.)</li>\n</ul>",
        "id": 398931667,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698424219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Extended.29.20chart.20is.20a.20local.20diffeomorphism/near/398931463\">said</a>:</p>\n<blockquote>\n<p>Does mathlib have that open subsets of manifolds are manifolds? Then, I could regard charts as honest homeomorphisms between these subsets.</p>\n</blockquote>\n<blockquote>\n<p>As I understand it, we have some of the way to \"open subsets of manifolds are manifolds\", but not everything</p>\n<ul>\n<li>we <em>don't</em> have yet that an open subset of a charted space (whose structure groupoid is ClosedUnderRestriction) is a charted space,</li>\n</ul>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span>  I think we do, see<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.Opens.instChartedSpace#doc\">docs#TopologicalSpace.Opens.instChartedSpace</a><br>\n(or do I misunderstand)? in addition to the instances you mentioned for the structure groupoid compatibility<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.Opens.instHasGroupoid#doc\">docs#TopologicalSpace.Opens.instHasGroupoid</a><br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=TopologicalSpace.Opens.instSmoothManifoldWithCornersSubtypeMemOpensInstMembershipInstSetLikeOpensInstTopologicalSpaceSubtypeInstChartedSpace#doc\">docs#TopologicalSpace.Opens.instSmoothManifoldWithCornersSubtypeMemOpensInstMembershipInstSetLikeOpensInstTopologicalSpaceSubtypeInstChartedSpace</a></p>",
        "id": 398970778,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698442136
    },
    {
        "content": "<p>Oh, nice. Thanks for pointing this out! (My searching strategy using <code>apply?</code> had failed (I didn't search with <code>Opens</code> in the context, only with a set and a separate hypothesis of its openness). I've learned to use loogle now :-)</p>",
        "id": 400172493,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1699030523
    },
    {
        "content": "<p>My proof that charts are structomorphisms is complete now (draft PR at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8160\">#8160</a>) --- except for one mathematically trivial detail I'm stuck at: the case of the chart source being empty. In this case the target is also empty, but establishing the structomorphism between the empty set (in two different spaces) doesn't work easily.</p>\n<p><del>I need to go now; can write more about the precise error later.</del>Update: asked <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Homeomorphism.20between.20empty.20sets.20.28in.20different.20types.29\">here</a>; the other sorry is pushed on the branch.</p>",
        "id": 400174519,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1699031162
    },
    {
        "content": "<p>Thanks to help on the other thread, this PR is now ready for review.</p>",
        "id": 400296242,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1699102486
    },
    {
        "content": "<p>Splitting <code>ContMDiff.lean</code>, I realised that the desired result is in fact already (essentially) in mathlib:<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=contMDiffAt_extend#doc\">docs#contMDiffAt_extend</a> shows smoothness of each extended chart, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=contMDiffAt_extend_symm#doc\">docs#contMDiffAt_extend_symm</a> for its inverse. If <code>M</code> is boundaryless, source and target are open and we get an actual diffeomorphism.<br>\nPR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8160\">#8160</a> may still be useful (e.g., it adds some basic API for structomorphisms), but not for any specific application I have in mind.</p>",
        "id": 405410459,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1701452554
    }
]