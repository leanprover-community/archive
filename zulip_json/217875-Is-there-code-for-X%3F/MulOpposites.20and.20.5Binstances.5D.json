[
    {
        "content": "<p>Dear All,</p>\n<p>in mathlib4, the implementation of <code>Mul/AddOpposites</code> changed wrt mathlib3 and I am not yet famliar with the setup.</p>\n<p>Is the instance below available?  Usable?  Desirable?  Of course, there are plenty more, in case this one is missing!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Opposites</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ApplyFun</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MulOpposite</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">IsLeftCancelMul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsRightCancelMul</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">bc</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">unop</span> <span class=\"n\">at</span> <span class=\"n\">bc</span> <span class=\"bp\">⊢</span> <span class=\"n\">using</span> <span class=\"n\">unop_injective</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_left_cancel</span> <span class=\"n\">bc</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 386775891,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692774289
    },
    {
        "content": "<p>I think it's just missing</p>",
        "id": 386783747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692776701
    },
    {
        "content": "<p>I think the stronger CancelMonoid-like classes are there</p>",
        "id": 386783817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692776737
    },
    {
        "content": "<p>I'll PR it soon, then!</p>\n<p>Unless <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> wants to beat me to it!  (This is for the PR on <code>NoZeroDivisors</code>.)</p>",
        "id": 386784249,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692776921
    },
    {
        "content": "<p>For reference, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulOpposite.addSemigroup#doc\">docs#MulOpposite.addSemigroup</a> and around there is what Eric was saying, I believe.</p>",
        "id": 386785437,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692777471
    },
    {
        "content": "<p>Even though, Mul...add is a little strange.  Seems like to_additive is missing a trick!</p>",
        "id": 386785687,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692777575
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6752\">#6752</a></p>",
        "id": 386820642,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692789811
    }
]