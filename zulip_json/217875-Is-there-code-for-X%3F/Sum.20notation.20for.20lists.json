[
    {
        "content": "<p>Is there a way to write <code>∑ x : l, f x</code> where <code>l : List A</code> and <code>f : A -&gt; B</code>, and have it be interpreted as mapping f over the list and applying List.sum?</p>",
        "id": 406033961,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701774830
    },
    {
        "content": "<p>I think the short answer is \"no\"</p>",
        "id": 406034654,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701775075
    },
    {
        "content": "<p>Ok, thanks</p>",
        "id": 406034735,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1701775095
    },
    {
        "content": "<p>Sure you can, by defining your own macro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"∑ \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\", \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 36</span>\n</code></pre></div>\n<p>I did not test how this interacts with <code>Finset.sum</code>, and you might want something a bit more robust (e.g. this doesn't allow you to parenthesize <code>x : l</code>), but it can definitely be done.</p>",
        "id": 406038405,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701776627
    },
    {
        "content": "<p>(also, this doesn't implement a delaborator / pretty printer)</p>",
        "id": 406038546,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701776674
    },
    {
        "content": "<p>Here is a pretty printer for this macro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">List.sum</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpListMap</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"c1\">-- ∑ x : [1, 2, 3], x ^ 3 : ℕ</span>\n</code></pre></div>\n<p>Probably someone who actually knows what they're doing can shorten this and use fewer matches. An earlier try doesn't work (presumably because of the parentheses?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">List.sum</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpListMap</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 406044882,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701779018
    },
    {
        "content": "<p>That's the long answer :)</p>",
        "id": 406048215,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701780210
    }
]