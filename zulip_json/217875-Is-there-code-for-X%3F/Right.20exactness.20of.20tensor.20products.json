[
    {
        "content": "<p>Is the right exactness of tensor products proved somewhere in mathlib ? I am also looking for the statement that, if u : A -&gt; B and v : C -&gt; D are surjective, then Ker(u\\otimes v) is the image of (Ker u)\\otimes C + A \\otimes(Ker v), but the proof of this uses right exactness. Okay, I'm actually working over a field so everybody is flat and my statements simplify, but I checked <code>Module.Flat</code> in mathlib and it was pretty short, so maybe I have a better chance of finding the general statements. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 382395728,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1691337692
    },
    {
        "content": "<p>I remembered having proved something like that by hand for the very reason you indicate. Unfortunately, the screen of my laptop doesn't light up hence I need to find an external screen to send you a precise link, and you'll certainly have proved the result for you then.</p>",
        "id": 382396979,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691337975
    },
    {
        "content": "<p>No, I'm very willing to wait for you to find another screen ! The lemma I was looking for is A, II, p. 59, prop. 6 in Bourbaki, to be precise.</p>",
        "id": 382397120,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1691338030
    },
    {
        "content": "<p>OK, and please send me a note if I forget...</p>",
        "id": 382397477,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691338130
    },
    {
        "content": "<p>I think mathlib knows that tensoring is a left adjoint, so it should be straightforward if you want to formulate right exactness as preserving finite colomits.</p>",
        "id": 382424460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691347709
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Category/ModuleCat/Monoidal/Closed.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Category/ModuleCat/Monoidal/Closed.lean</a></p>",
        "id": 382424551,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691347771
    },
    {
        "content": "<p>That closed monoidal structure comes with some universe restrictions, unfortunately.</p>",
        "id": 382424684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691347830
    },
    {
        "content": "<p>Thanks! So now I need to determine the least painful way to get there, between doing stuff by hand or going the categorical route with potential universe trouble. (Probably the least painful way is to wait for Antoine's code. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>)<br>\nI recently tried to do a left Kan extension and promptly ran into a horrible universe error, so I'm little wary of categories at the moment...</p>",
        "id": 382433808,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1691352153
    },
    {
        "content": "<p>I think it is important to share and discuss publicly the universe errors, that's an unavoidable question whenever one has to use large quantifiers.  In my case, thanks to <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>'s help, it was enough yo restrict some types to a fixed universe, but this forced me to learn how to lift types.</p>",
        "id": 382437898,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691354098
    },
    {
        "content": "<p><code>Module.Flat</code> is very short indeed, <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> did a lot of things about flatness in <a href=\"https://github.com/jjaassoonn/flat\">https://github.com/jjaassoonn/flat</a>, but its in lean 3 and not yet ported (I started trying to extract the smallest independent piece of what Jujian did but got sidetracked)</p>",
        "id": 382448697,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691361068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Right.20exactness.20of.20tensor.20products/near/382397120\">said</a>:</p>\n<blockquote>\n<p>No, I'm very willing to wait for you to find another screen ! The lemma I was looking for is A, II, p. 59, prop. 6 in Bourbaki, to be precise.</p>\n</blockquote>\n<p>Do you need the case of a noncommutative ground ring?</p>",
        "id": 382499433,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691386335
    },
    {
        "content": "<p>I could see what I had proved: this is what you need in the restricted case where the modules are algebras. My proof does not work as in Bourbaki though, I rather redo the proof of A, II, p. 58, prop.5.</p>",
        "id": 382503027,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691387698
    },
    {
        "content": "<p>I'll open a new branch to port it (I just have the mathlib3 -&gt; mathport code, it is not yet fully ported to mathlib4), because it also requires to adjust a few things in mathlib's RingTheory.TensorProduct.</p>",
        "id": 382504253,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691388178
    },
    {
        "content": "<p>Thanks! I only need the case of a commutative ground ring. (My ground ring is even a commutative field.)</p>",
        "id": 382515572,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1691390969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Right.20exactness.20of.20tensor.20products/near/382448697\">said</a>:</p>\n<blockquote>\n<p><code>Module.Flat</code> is very short indeed, <span class=\"user-mention silent\" data-user-id=\"252627\">Jujian Zhang</span> did a lot of things about flatness in <a href=\"https://github.com/jjaassoonn/flat\">https://github.com/jjaassoonn/flat</a>, but its in lean 3 and not yet ported (I started trying to extract the smallest independent piece of what Jujian did but got sidetracked)</p>\n</blockquote>\n<p>Interesting, I'll have a look !</p>",
        "id": 382515657,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1691390986
    },
    {
        "content": "<p>See PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6447\">#6447</a> in <a href=\"https://github.com/leanprover-community/mathlib4/tree/TensRightExact\">branch#TensRightExact</a></p>",
        "id": 382965974,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691502872
    }
]