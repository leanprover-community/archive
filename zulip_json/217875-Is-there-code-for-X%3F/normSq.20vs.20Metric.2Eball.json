[
    {
        "content": "<p>This must already exist somewhere; any pointers please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Complex.mem_ball_iff_normSq</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span>  <span class=\"n\">Metric.ball</span> <span class=\"n\">c</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hz</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_ball_iff_norm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Complex.normSq_eq_abs</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sq_lt_sq</span><span class=\"o\">]</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hz</span> <span class=\"bp\">&lt;;&gt;</span>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">abs_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_self</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hr</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">hz</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mem_ball_iff_norm.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Complex.normSq_eq_abs</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">]</span>\n    <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 408265772,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1702678896
    },
    {
        "content": "<p>You doubled the work for yourself by starting with <code>constructor</code>!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Complex.mem_ball_iff_normSq</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">c</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">normSq</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_ball_iff_norm</span><span class=\"o\">,</span> <span class=\"n\">normSq_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">sq_lt_sq</span><span class=\"o\">,</span> <span class=\"n\">abs_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_self.mpr</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(edit: I relaxed <code>hr</code>)</p>",
        "id": 408267771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702680231
    },
    {
        "content": "<p>That's basically the same lemmas you used, without writing each of them twice!</p>",
        "id": 408267823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702680248
    },
    {
        "content": "<p>Ok but the theorem doesn't already exist, right? Should it?</p>",
        "id": 408270196,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1702681670
    },
    {
        "content": "<p>Well, why are you using <code>normSq</code> instead of <code>‖ ‖</code>?</p>",
        "id": 408303348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702702679
    },
    {
        "content": "<p>Hmm ok maybe I don't need it, if there's a slicker way to show that, for a complex rectangle whose corners are inside a ball, the whole rectangle is?...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Complex</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Interval</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rectangle_inside_disc</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">hzw</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z.re</span> <span class=\"bp\">+</span> <span class=\"n\">w.im</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hwz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w.re</span> <span class=\"bp\">+</span> <span class=\"n\">z.im</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">c</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">([[</span><span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"n\">w.re</span><span class=\"o\">]]</span> <span class=\"bp\">×</span><span class=\"n\">ℂ</span> <span class=\"o\">[[</span><span class=\"n\">z.im</span><span class=\"o\">,</span> <span class=\"n\">w.im</span><span class=\"o\">]])</span> <span class=\"bp\">⊆</span> <span class=\"n\">Metric.ball</span> <span class=\"n\">c</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 408348931,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1702736893
    },
    {
        "content": "<p>Is there something like: the rectangle is the convex hull of the four points; and the disc is convex. So the convex hull of points inside a convex set is itself inside the set??...</p>",
        "id": 408377153,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1702762637
    },
    {
        "content": "<p>(continued in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/rectangle.20is.20convex.20hull\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/rectangle.20is.20convex.20hull</a> )</p>",
        "id": 408406934,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1702787480
    }
]