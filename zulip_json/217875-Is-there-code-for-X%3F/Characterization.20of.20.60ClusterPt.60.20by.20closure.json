[
    {
        "content": "<p>Do we have the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span> <span class=\"n\">Topology</span> <span class=\"n\">Function</span> <span class=\"n\">Prod</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">clusterPt_iff_forall_mem_closure</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">ClusterPt</span> <span class=\"n\">x</span> <span class=\"n\">F</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">closure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ClusterPt</span><span class=\"o\">,</span> <span class=\"n\">inf_comm</span><span class=\"o\">,</span> <span class=\"n\">inf_neBot_iff</span><span class=\"o\">,</span> <span class=\"n\">inter_comm</span><span class=\"o\">,</span> <span class=\"n\">mem_closure_iff_nhds</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Bonus points for the equivalent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">clusterPt_iff_lift'_closure</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">ClusterPt</span> <span class=\"n\">x</span> <span class=\"n\">F</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">F.lift'</span> <span class=\"n\">closure</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">NeBot</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">clusterPt_iff_forall_mem_closure</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">principal_singleton</span><span class=\"o\">,</span>\n    <span class=\"n\">F.basis_sets.lift'_closure.inf_principal_neBot_iff</span><span class=\"o\">,</span> <span class=\"n\">inter_singleton_nonempty</span><span class=\"o\">,</span>\n    <span class=\"n\">mem_closure_iff_nhds</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 376605600,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689761649
    },
    {
        "content": "<p>Context: I got nerdsniped by discussions on <a href=\"https://github.com/leanprover-community/mathlib4/pull/5969\">#5969</a> and decided it's about time that we develop the basic theory of proper maps, but the proofs in Bourbaki are just not filter-y enough.</p>",
        "id": 376606451,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689761801
    },
    {
        "content": "<p>Looking now, I don't see these results.</p>",
        "id": 376609569,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689762459
    },
    {
        "content": "<p>I presume you've seen that we have a the type of bundled maps <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CocompactMap#doc\">docs#CocompactMap</a> though we know almost nothing about it.</p>",
        "id": 376610092,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689762561
    },
    {
        "content": "<p>Yes but these are only true proper maps for locally compact spaces, I will try to make a usable bridge between the two APIs (although for now I'm going for unbundled proper maps whereas <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CocompactMap#doc\">docs#CocompactMap</a> only has a bundled version iirc)</p>",
        "id": 376611118,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689762752
    },
    {
        "content": "<p>It's not there. I'm sad to see <code>inf_comm, inf_neBot_iff, inter_comm</code> in your proof. I thought our convention to order stuff was sufficiently consistent to avoid that. Maybe we need a <code>inf_neBot_iff'</code> to avoid that.</p>",
        "id": 376616402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689763802
    },
    {
        "content": "<p>Well in some sense the fact that I need to revert by using <code>inter_comm</code> after <code>inf_comm</code> means that the convention is almost perfect! But indeed adding <code>inf_neBot_iff'</code> seems like the cleanest thing to do.</p>",
        "id": 376622564,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1689765000
    }
]