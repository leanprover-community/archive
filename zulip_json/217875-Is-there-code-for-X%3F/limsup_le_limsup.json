[
    {
        "content": "<p>Hi, what's a quick way to prove the following in mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">htends</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"bp\">⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">htends</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm not very comfortable with <code>Filters</code> so I'm having trouble reading the files. Thanks,</p>",
        "id": 374677847,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689179013
    },
    {
        "content": "<p>The first one is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">htends</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"bp\">⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">htends.inner</span> <span class=\"n\">tendsto_const_nhds</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.inner#doc\">docs#Filter.Tendsto.inner</a>)</p>",
        "id": 374682289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689179944
    },
    {
        "content": "<p>And the second is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">htends</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">htends.inner</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">limsup_eq</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.limsup_eq#doc\">docs#Filter.Tendsto.limsup_eq</a>)</p>",
        "id": 374682645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689180025
    },
    {
        "content": "<p>Thank you! I was missing the <code>_const_</code> in my searches!!</p>",
        "id": 374682877,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689180089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 374685322,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689180629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as unresolved.</p>",
        "id": 374716120,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689188536
    },
    {
        "content": "<p>I'm stuck at another related question about <code>limsup</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.InnerProductSpace.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">seq1</span> <span class=\"n\">seq2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">seq1</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">seq2</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">htends</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">seq2</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">r</span><span class=\"o\">)):</span>\n  <span class=\"n\">limsup</span> <span class=\"n\">seq1</span> <span class=\"n\">atTop</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 374716446,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689188622
    },
    {
        "content": "<p>I tried <code>limsup_le_limsup</code> but got stuck proving <code>IsCoBoundedUnder</code> and <code>IsBoundedUnder</code></p>",
        "id": 374718476,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689189154
    },
    {
        "content": "<p>Hello, just bumping this question again. Any pointers towards similar proofs involving <code>limsup</code> in mathlib would also be enough. A search for <code>limsup_le_limsup</code> returns very few results so I'm thinking that there is some other function that I'm missing.</p>",
        "id": 374784519,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689213763
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.isBoundedUnder_le#doc\">docs#Filter.Tendsto.isBoundedUnder_le</a></p>",
        "id": 374797698,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689221392
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 374797997,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689221570
    },
    {
        "content": "<p>A <del>missing</del> lemma: for a nontrivial filter, <code>IsBounded</code> implies <code>IsCobounded</code>. UPD: see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.IsBounded.isCobounded_ge#doc\">docs#Filter.IsBounded.isCobounded_ge</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.IsBounded.isCobounded_le#doc\">docs#Filter.IsBounded.isCobounded_le</a></p>",
        "id": 374798040,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689221601
    },
    {
        "content": "<p>You will also need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.IsBoundedUnder.mono_le#doc\">docs#Filter.IsBoundedUnder.mono_le</a></p>",
        "id": 374798060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689221624
    },
    {
        "content": "<p>BTW, your example is not true: if <code>seq2</code> tends to <code>-1</code> while <code>seq1</code> tends to <code>-∞</code>, then LHS equals <code>0</code> while RHS equals <code>-1</code>.</p>",
        "id": 374798395,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689221841
    },
    {
        "content": "<p>So, you have to assume that <code>seq1</code> is cobounded (a.k.a. doesn't tend to <code>-∞</code>).</p>",
        "id": 374798441,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689221875
    },
    {
        "content": "<p>Is this because of the way <code>limsup</code> is defined in <code>mathlib</code> when the limit is <code>-\\infty</code>?</p>",
        "id": 374798592,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689221950
    },
    {
        "content": "<p>TBH I thought <code>cobounded</code> was a weaker version of <code>bounded</code></p>",
        "id": 374798625,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689221981
    },
    {
        "content": "<p>I will add <code>IsCobounded</code> as a hypothesis and try to derive <code>Bounded</code>ness</p>",
        "id": 374798929,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689222174
    },
    {
        "content": "<p>As you can see, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.limsup#doc\">docs#Filter.limsup</a> assumes nothing about the function. So, it is defined for any function. If you dig deeper, then you can see that for real numbers it is equal to zero in case it should be undefined.</p>",
        "id": 374799826,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689222708
    },
    {
        "content": "<p>You need coboundedness of <code>seq1</code> and boundedness of <code>seq2</code>. The latter follows from <code>Tendsto</code>.</p>",
        "id": 374799905,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689222743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 374817216,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689230134
    },
    {
        "content": "<p>Composing with the coercion <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Real.toEReal#doc\">docs#Real.toEReal</a> gives the \"correct\" limsup value.</p>",
        "id": 374891343,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1689246732
    },
    {
        "content": "<p>I need this as a part of a bigger analysis proof. I tried <code>EReal</code> at first but got stuck doing some arithmetic.</p>",
        "id": 374967664,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689261069
    },
    {
        "content": "<p>Actually, very specifically, this code is failing if I coerce the inner products to <code>EReal</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">htends</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">limsup</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟪</span><span class=\"n\">seq</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span><span class=\"o\">)</span> <span class=\"n\">atTop</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫</span><span class=\"n\">_ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">htends.inner</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">limsup_eq</span>\n</code></pre></div>",
        "id": 374971637,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689261848
    },
    {
        "content": "<p>I'm getting the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">OrderTopology</span> <span class=\"bp\">?</span><span class=\"n\">m.152004</span>\n</code></pre></div>",
        "id": 374971812,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689261876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> has marked this topic as unresolved.</p>",
        "id": 374974032,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689262231
    },
    {
        "content": "<p>Indeed, your function is not just <code>inner _ _</code>, it's <code>Real.toEReal (inner _ _)</code>.</p>",
        "id": 374974402,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689262304
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EReal.tendsto_coe#doc\">docs#EReal.tendsto_coe</a></p>",
        "id": 374974610,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689262336
    },
    {
        "content": "<p>I managed to get this to work. I had to go back and forth a few times between <code>Real</code> and <code>EReal</code> in my calculations and add a few helper <code>have</code>s but everything worked out in the end.</p>",
        "id": 374997869,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689266917
    },
    {
        "content": "<p>The statements look really clean with <code>EReal</code></p>",
        "id": 374998116,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689266969
    }
]