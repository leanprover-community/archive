[
    {
        "content": "<p>I am struggling to define the following obvious map: <code>S ⊗[R] T →ₐ[R] S ⊗[A] T</code>, where <code>A R S T</code> are commutative rings, <code>S T</code> are <code>R</code>-algebras and  <code>R</code>is an <code>A</code>-algebra.<br>\nIn the last line of the definition of <code>hr</code> below, Lean can't find the instance I just gave it one line above.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">is_scalar_tower.to_alg_hom</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span> <span class=\"n\">T</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">haveI</span><span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">),</span>\n<span class=\"n\">exact</span> <span class=\"n\">algebra.tensor_product.right_algebra</span><span class=\"o\">,</span>\n<span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span> <span class=\"n\">T</span><span class=\"o\">),</span>\n<span class=\"n\">exact</span> <span class=\"n\">algebra.tensor_product.right_is_scalar_tower</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">is_scalar_tower.to_alg_hom</span> <span class=\"n\">R</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span> <span class=\"n\">T</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">algebra.tensor_product.product_map</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"bp\">``</span>\n</code></pre></div>",
        "id": 360887985,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1684959128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">exact</span> <span class=\"n\">algebra.tensor_product.right_is_scalar_tower</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">is_scalar_tower.to_alg_hom</span> <span class=\"n\">R</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span> <span class=\"n\">T</span><span class=\"o\">),</span>\n<span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"n\">convert</span> <span class=\"n\">_inst_12</span><span class=\"o\">,</span>\n<span class=\"c1\">-- 34 goals, most of which are `S ⊗ T = S ⊗ T`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 360889210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684959534
    },
    {
        "content": "<p>Oh! The goal state doesn't display it but it's actually <code>S ⊗[R] T = S ⊗[A] T</code></p>",
        "id": 360889463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684959614
    },
    {
        "content": "<p>Change your <code>haveI</code> to <code>haveI : is_scalar_tower R T (S ⊗[A] T), </code> and it works<br>\n`</p>",
        "id": 360889784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684959727
    },
    {
        "content": "<p>Doesn't <code>S ⊗[R] T →ₐ[R] S ⊗[A] T</code> exist as something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.tensor_product.map\">docs#algebra.tensor_product.map</a>?</p>",
        "id": 360889834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684959754
    },
    {
        "content": "<p>Oh nevermind, I misread that completely</p>",
        "id": 360889933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684959783
    },
    {
        "content": "<p>Yeah there should be a map, I think probably the issue is that the goal state isn't saying what we're tensoring over so it can be confusing.</p>",
        "id": 360890055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684959831
    },
    {
        "content": "<p>Aah, also <code>haveI: algebra T (S ⊗[A] T),</code> should be <code>letI</code> because it's data. This can lead to very confusing errors :-)</p>",
        "id": 360890599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684960015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20products/near/360890055\">said</a>:</p>\n<blockquote>\n<p>Yeah there should be a map, I think probably the issue is that the goal state isn't saying what we're tensoring over so it can be confusing.</p>\n</blockquote>\n<p>Exactly, the output of Lean takes out all mentions of the rings over which scalar products happen…</p>",
        "id": 360898624,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1684962942
    },
    {
        "content": "<p>I'm pretty sure this is new behavior introduced by the <code>hole!</code> syntax in notations; I don't remember this happening pre-port</p>",
        "id": 360899969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684963507
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span>  <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">R</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">N</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>makes the mwe readable again</p>",
        "id": 360900156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684963572
    },
    {
        "content": "<p>Thanks for the better notation.<br>\nOn the other hand, my MWE shouldn't have been expected to work since the map I tried to define went in the bad direction…</p>",
        "id": 360903701,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1684965201
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span>  <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">R</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">N</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- exact tensor_product.left_module</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- algebra.to_module</span>\n\n<span class=\"c1\">-- needs to be introduced</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.tmul_smul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- tensor_product.is_scalar_tower_left</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- tensor_product.is_scalar_tower</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- tensor_product.is_scalar_tower_left</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- tensor_product.is_scalar_tower</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_left</span><span class=\"o\">,</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.tmul_mul_tmul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.zero_tmul</span><span class=\"o\">],</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.add_tmul</span><span class=\"o\">],</span>\n    <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">let</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"o\">{</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_right</span><span class=\"o\">,</span>\n<span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.tmul_mul_tmul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n<span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.tmul_zero</span><span class=\"o\">],</span>\n<span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.tmul_add</span><span class=\"o\">],</span>\n<span class=\"c1\">-- here, that does not work!</span>\n    <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.tmul_smul</span><span class=\"o\">],</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"c1\">-- the two scalar multiplications look distinct…</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 360911724,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1684969544
    },
    {
        "content": "<p>I think your instance <code>instance : algebra A (S ⊗[R] T) := ring_hom.to_algebra ((algebra_map S (S ⊗[R] T)).comp (algebra_map A S))</code> is nasty in some way, because if I remove it (and switch to non unital algebra morphism to work around it) then I have no problem constructing the map <code>hr</code></p>",
        "id": 360913115,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684970546
    },
    {
        "content": "<p>Indeed if you replace it by <code>instance : algebra A (S ⊗[R] T) := algebra.of_module sorry sorry</code> (and hope really strong that the two sorries are true) then you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_left</span><span class=\"o\">,</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.tmul_mul_tmul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.zero_tmul</span><span class=\"o\">],</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.add_tmul</span><span class=\"o\">],</span>\n    <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_right</span><span class=\"o\">,</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.tmul_mul_tmul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.tmul_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.tmul_add</span><span class=\"o\">],</span>\n    <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.tmul_smul</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 360914393,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684971505
    },
    {
        "content": "<p>At the sorry, the goal is <code>⊢ a • 1 ⊗ₜ[R] 1 = a • 1 ⊗ₜ[R] 1</code> and if you try <code>congr</code> this reduces the goal to <code>tensor_product.left_has_smul = smul_zero_class.to_has_smul</code>. You can now do <code>ext a st</code> if you want to see the calculation which needs to be done (it looks like <code>⊢ a • st = a • st</code> so of course here there must be some diamond).</p>\n<p>If you now set <code>pp.all</code> on, you can look and see what instances are showing up in both sides of the equality and in particular in the inputs to the two <code>has_smul.smul</code> functions. The right hand side seems to use a lot more of the instances than the left hand side.</p>",
        "id": 360915018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684972042
    },
    {
        "content": "<p><code>ring_hom.to_algebra</code> is pretty much always nasty</p>",
        "id": 360916229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684972874
    },
    {
        "content": "<p>Use it in a proof if you have to, but don't use it to construct canonical instances</p>",
        "id": 360916242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684972887
    },
    {
        "content": "<p>I may have written absolutely stupid things since I'm half-sleeping, but here is a working version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span>  <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">R</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">N</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">  S   T</span>\n<span class=\"cm\">   \\ /</span>\n<span class=\"cm\">    R</span>\n<span class=\"cm\">    |</span>\n<span class=\"cm\">    A</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.of_module'</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.induction_on</span> <span class=\"n\">x</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.one_def</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]))</span>\n  <span class=\"c1\">-- Copy pasting worked ?!?!?!?!?</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.induction_on</span> <span class=\"n\">x</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.one_def</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_left</span><span class=\"o\">,</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.tmul_mul_tmul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.zero_tmul</span><span class=\"o\">],</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.add_tmul</span><span class=\"o\">],</span>\n    <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_right</span><span class=\"o\">,</span>\n    <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.tmul_mul_tmul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.tmul_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.tmul_add</span><span class=\"o\">],</span>\n    <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.tmul_smul</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span>\n    <span class=\"kd\">end</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- THIS IS VERY UGLY. If we add `foo` to mathlib, we need to remove</span>\n  <span class=\"c1\">-- `algebra.tensor_product.tensor_product.algebra` and use `foo A A S T` instead,</span>\n  <span class=\"c1\">-- so that we don't have these problems.</span>\n  <span class=\"n\">convert</span> <span class=\"n\">algebra.tensor_product.product_map</span> <span class=\"n\">hl</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 360917651,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684973914
    },
    {
        "content": "<p>Here's the diamond:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- needs to be introduced</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">((</span><span class=\"n\">algebra_map</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product.left_module</span> <span class=\"c1\">-- found with `apply_instance`</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.to_module</span> <span class=\"c1\">-- uses the instance introduced.</span>\n\n<span class=\"c1\">-- example : foo = bar := rfl -- fails</span>\n</code></pre></div>",
        "id": 360918511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684974589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>, your two copied proofs should probably be is_scalar_tower/smul_comm_class instances</p>",
        "id": 360919285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684975168
    },
    {
        "content": "<p>Yes I know, I just wanted to get it done <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 360919577,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684975373
    },
    {
        "content": "<p>It seems there should be something for algebras in the same spirit as what is done with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.left_module\">docs#tensor_product.left_module</a>  and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.module\">docs#tensor_product.module</a>.</p>\n<p>Here is an attempt, borrowing from <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> 's answer.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span>  <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">R</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">N</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R'</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n   <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">R'</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R'</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"c1\">-- tensor_product.left_module</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">tensor_product.left_algebra</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.of_module'</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.induction_on</span> <span class=\"n\">x</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.one_def</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]))</span>\n  <span class=\"c1\">-- Copy pasting worked ?!?!?!?!?</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.induction_on</span> <span class=\"n\">x</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.one_def</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.algebra'</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">tensor_product.left_algebra</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n</code></pre></div>",
        "id": 361127857,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685036705
    },
    {
        "content": "<p>I'm somewhat surprised this doesn't already exist</p>",
        "id": 361136852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685039161
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.tensor_product.left_algebra\">docs#algebra.tensor_product.left_algebra</a>?</p>",
        "id": 361137017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685039200
    },
    {
        "content": "<p>Oh this is really interesting: we can replace <code>[algebra R S] [is_scalar_tower R S A]</code> by <code>[algebra S R] [is_scalar_tower S R A]</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.tensor_product.left_algebra\">docs#algebra.tensor_product.left_algebra</a> and it still works!</p>",
        "id": 361139378,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685039889
    },
    {
        "content": "<p>And this backwards version is what Antoine wants IIUC</p>",
        "id": 361139984,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685040083
    },
    {
        "content": "<p>I'm completely confused…</p>",
        "id": 361146926,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685042014
    },
    {
        "content": "<p>Probably, this means that the <code>is_scalar_tower</code> instance should just be replaced by some <code>smul_comm_class</code> as I suggested.</p>",
        "id": 361147256,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685042110
    },
    {
        "content": "<p>This is not a propositional diamond, right? The issue is simply that the proof that the two actions coincide is not <code>rfl</code>.</p>",
        "id": 361147278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685042118
    },
    {
        "content": "<p>My understanding is that one of the actions of A on S tensor T is \"map A to S tensor T through S and use <code>*</code>\" and the other one is \"A acts on S so we can define an action of A on things of the form s tensor t by sending them to (a bub s) tensor t and now by some inductive principle we have an action on the full tensor product\"</p>",
        "id": 361147598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685042210
    },
    {
        "content": "<p>Let me give a more concrete example with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>.<br>\nWhat Antoine wants is:</p>\n<blockquote>\n<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A, B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> are two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>-algebras (and also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-algebras, with the assumptions that these two structures are compatible), then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi mathvariant=\"double-struck\">C</mi></msub><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes_\\mathbb{C} B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3322em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbb mtight\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is also an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-algebra (and presumably everything is still compatible in the right way)</p>\n</blockquote>\n<p>What <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.tensor_product.left_algebra\">docs#algebra.tensor_product.left_algebra</a> says is: </p>\n<blockquote>\n<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A, B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> are two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-algebras, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is also a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>-algebra in a compatible way, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi mathvariant=\"double-struck\">R</mi></msub><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes_\\mathbb{R} B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3322em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>-algebra</p>\n</blockquote>",
        "id": 361148988,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685042670
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 361149008,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685042678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20products/near/361137017\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.tensor_product.left_algebra\">docs#algebra.tensor_product.left_algebra</a>?</p>\n</blockquote>\n<p>To be clear I am answering this.</p>",
        "id": 361149177,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685042743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20products/near/361147278\">said</a>:</p>\n<blockquote>\n<p>This is not a propositional diamond, right? The issue is simply that the proof that the two actions coincide is not <code>rfl</code>.</p>\n</blockquote>\n<p>That was the problem indeed, but I think Antoine's last code snippet avoids it (by using the existing <code>smul</code> and proving it still works)</p>",
        "id": 361149341,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685042784
    },
    {
        "content": "<p>This does make it sound like something is assuming a tower when it actually only needs commutativity</p>",
        "id": 361173343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685051855
    },
    {
        "content": "<p>This is something like that.<br>\nIn the following file (not “minimal” in any sense), I tried to isolate the cases where <code>smul_comm_class</code> or <code>tensor_product_compatible</code> should be the instances to add. At the end, its a <code>is_scalar_tower</code>, though.</p>\n<p>I tried to make it cleaner, introducing many intermediate functions. Nevertheless, the <code>convert</code> at the end of what  <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>  wrote (and <code>exact</code> does not work) seems to prevent Lean to unfold the definition. (I get a <code>cast _</code> which I can't <code>simp</code>.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.quotient_operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span>  <span class=\"n\">M</span> <span class=\"bp\">`</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">R</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">N</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The goal is to prove lemma 9 in Roby (1965) -/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ring_hom.ker_eq_ideal_iff</span>  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f.ker</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">f.ker</span><span class=\"o\">),</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient.lift</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">le_of_eq</span> <span class=\"n\">hI.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ring_hom.lift_injective_of_ker_le_ideal</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.injective_iff_ker_eq_bot</span><span class=\"o\">,</span>\n    <span class=\"n\">ideal.ker_quotient_lift</span> <span class=\"n\">f</span> <span class=\"n\">hI</span><span class=\"o\">,</span>\n    <span class=\"n\">ideal.map_eq_bot_iff_le_ker</span><span class=\"o\">,</span>\n    <span class=\"n\">ideal.mk_ker</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h</span> <span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n <span class=\"o\">(</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R'</span><span class=\"o\">]</span>\n <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R'</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R'</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">smul_comm</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">R'</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"c1\">-- variables [algebra R R'] [is_scalar_tower R R' M] [is_scalar_tower R R' N]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"c1\">-- tensor_product.left_module</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">algebra.tensor_product.left_algebra'</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">algebra.of_module'</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.induction_on</span> <span class=\"n\">x</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.one_def</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]))</span>\n  <span class=\"c1\">-- Copy pasting worked ?!?!?!?!?</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.induction_on</span> <span class=\"n\">x</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.one_def</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]))</span>\n\n<span class=\"c1\">-- def algebra.tensor_product.algebra' : algebra R (M ⊗[R] N) := algebra.tensor_product.left_algebra R R M N</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">algebra.tensor_product.algebra'_eq_algebra</span> <span class=\"o\">:</span>\n<span class=\"n\">algebra.tensor_product.left_algebra'</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n  <span class=\"bp\">=</span> <span class=\"n\">algebra.tensor_product.tensor_product.algebra</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">-- instance : algebra R (M ⊗[R] N) := tensor_product.algebra' R R' M N</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.include_left'</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_left</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.map_one</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- rfl,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.map_mul</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">--  λ x y, by simp only [algebra.tensor_product.include_left_apply, algebra.tensor_product.tmul_mul_tmul, mul_one],</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.map_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- by simp only [algebra.tensor_product.include_left_apply, tensor_product.zero_tmul],</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.map_add</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- λ x y, by simp only [algebra.tensor_product.include_left_apply, tensor_product.add_tmul],</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_left_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">],</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">smul_comm</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">tensor_product_compatible</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">R'</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.compatible_smul</span> <span class=\"n\">R'</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"c1\">-- variables [algebra R R'] [is_scalar_tower R R' M] [is_scalar_tower R R' N]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.include_right'</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_right</span><span class=\"o\">,</span>\n<span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">algebra.tensor_product.include_right.map_mul</span><span class=\"o\">,</span>\n<span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">algebra.tensor_product.include_right.map_zero</span><span class=\"o\">,</span>\n<span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">algebra.tensor_product.include_right.map_add</span><span class=\"o\">,</span>\n<span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.include_right_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.tmul_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,}</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.can</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">algebra.tensor_product.product_map</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.include_left'</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.include_right'</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">algebra.tensor_product.algebra'_eq_algebra</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The following lemma should be straightforward,</span>\n<span class=\"cm\">but the `convert` in the definition of `tensor_product.can`</span>\n<span class=\"cm\">leads to a `cast _` which I can't unfold.   -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tensor_product.can_apply</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tensor_product.can</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.can</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.include_left'</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.include_right'</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.include_left</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.include_right</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.to_fun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_mk</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.product_map</span><span class=\"o\">],</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.can_ker</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ideal.span</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R'</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">))))</span> <span class=\"bp\">''</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">algebra.tensor_product.include_right</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">N</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">algebra.tensor_product.algebra'_eq_algebra</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span><span class=\"n\">tensor_product.include_right'</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span><span class=\"n\">tensor_product.include_right'</span> <span class=\"n\">R'</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tensor_product_compatible</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">is_scalar_tower</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.can'_left</span> <span class=\"o\">:</span>\n<span class=\"n\">M</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can_ker</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mkₐ</span> <span class=\"n\">R'</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can_ker</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n    <span class=\"o\">(</span><span class=\"n\">tensor_product.include_left'</span> <span class=\"n\">R'</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.can'_right</span> <span class=\"o\">:</span>\n<span class=\"n\">N</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can_ker</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mkₐ</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can_ker</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n    <span class=\"o\">(</span><span class=\"n\">tensor_product.include_right'</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_R'_linear</span> <span class=\"o\">:</span> <span class=\"n\">is_linear_map</span> <span class=\"n\">R'</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can'_right</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_linear_map.mk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">alg_hom.map_add</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.can'_right</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.include_right'</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ideal.quotient.mkₐ_eq_mk</span> <span class=\"n\">R'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">alg_hom.map_smul</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ideal.quotient.mkₐ_eq_mk</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ideal.quotient.eq</span> <span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.can_ker</span><span class=\"o\">],</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"c1\">--   suffices : (r • (1 : M) ⊗ₜ[R] (1 : N) - (1 : M) ⊗ₜ[R] (r • (1 : N))) ∈ _,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ideal.mul_mem_right</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ideal.subset_span</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">set.mem_univ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">algebra.smul_mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">algebra.tensor_product.tmul_mul_tmul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.can'_right'</span> <span class=\"o\">:</span>\n<span class=\"n\">N</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can_ker</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product.can'_right</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_R'_linear</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">,</span>\n<span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_R'_linear</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n<span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">alg_hom.map_mul</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.algebra_map_eq_smul_one</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_R'_linear</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_one</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tensor_product.can'</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can_ker</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">algebra.tensor_product.product_map</span>\n    <span class=\"o\">(</span><span class=\"n\">tensor_product.can'_left</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can'_right'</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">algebra.tensor_product.algebra'_eq_algebra</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tensor_product.can'_apply</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tensor_product.can'</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.can'</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n<span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_ring_hom.ker</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can_ker</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tensor_product.can_ker</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">ring_hom.ker</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.can</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_ring_hom</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_hom.ker_eq_ideal_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">function.has_left_inverse.injective</span> <span class=\"o\">,</span>\n<span class=\"c1\">--  apply function.bijective.injective,</span>\n<span class=\"c1\">--  rw function.bijective_iff_has_inverse,</span>\n  <span class=\"n\">use</span> <span class=\"n\">tensor_product.can'</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"c1\">--   split,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- left_inverse</span>\n    <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ideal.quotient.mk_surjective</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.to_ring_hom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">ideal.quotient.lift_mk</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_to_ring_hom</span><span class=\"o\">],</span>\n\n    <span class=\"n\">apply</span> <span class=\"n\">tensor_product.induction_on</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_zero</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.can'_apply</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.can_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.map_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ideal.quotient.mkₐ_eq_mk</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- { -- right_inverse  sorry }</span>\n\n  <span class=\"c1\">-- h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.can_ker</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ideal.span_le</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.top_eq_univ</span><span class=\"o\">,</span> <span class=\"n\">set.image_univ</span><span class=\"o\">,</span> <span class=\"n\">set.mem_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set_like.mem_coe</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.sub_mem_ker_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">alg_hom.to_ring_hom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_to_ring_hom</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.can_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tensor_product.tmul_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">is_scalar_tower</span>\n</code></pre></div>",
        "id": 361453705,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685142386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>'s generalisation linter may be good here</p>",
        "id": 361585829,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1685197093
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 361586190,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685197202
    },
    {
        "content": "<p>It seems that the problem comes from the <code>instance</code> I had to define: it creates a diamond.<br>\nI see no other solution than refactoring slightly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_theory.tensor_product\">docs#ring_theory.tensor_product</a> to allow for an additional coefficient ring. <br>\nAt the same time, one can relax many hypotheses everywhere…</p>",
        "id": 361656909,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685228725
    },
    {
        "content": "<p>What's the diamond?</p>",
        "id": 361658200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685229559
    },
    {
        "content": "<p>We need to have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.tensor_product.left_algebra\">docs#algebra.tensor_product.left_algebra</a> under less restrictive assumptions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R'</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R'</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R'</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">R'</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"c1\">-- [smul_comm_class R' R N]</span>\n<span class=\"c1\">-- variables [algebra R R'] [is_scalar_tower R R' M] [is_scalar_tower R R' N]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"c1\">-- tensor_product.left_module</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">left_algebra'</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R'</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">algebra.of_module'</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.induction_on</span> <span class=\"n\">x</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">one_def</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]))</span>\n  <span class=\"c1\">-- Copy pasting worked ?!?!?!?!?</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.induction_on</span> <span class=\"n\">x</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">one_def</span><span class=\"o\">,</span> <span class=\"n\">tensor_product.smul_tmul'</span><span class=\"o\">])</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]))</span>\n</code></pre></div>\n<p>This means that one has two algebra structures on <code>M ⊗[R] N</code> when <code>R = R'</code>, one given by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.tensor_product.left_algebra\">docs#algebra.tensor_product.left_algebra</a> (implicit parameters R, M and N) and the other given by <code>algebra.tensor_product.left_algebra' R R M N</code>. Thus we need to update the less general instance from mathlib <br>\nand set <code>instance : algebra R (M ⊗[R] N) := left_algebra' R R M N </code>.</p>\n<p>Nevertheless, they coincide (not definitionally) : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">algebra'_eq_algebra</span> <span class=\"o\">:</span>\n<span class=\"n\">tensor_product.left_algebra'</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span>  <span class=\"bp\">=</span> <span class=\"n\">tensor_product.algebra</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,}</span>\n</code></pre></div>",
        "id": 361722359,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685269741
    },
    {
        "content": "<p>That's OK for me, but the commutativity assumptions in the very definition of the tensor product make me think that a lot of work has to be done sooner or later.</p>",
        "id": 361728748,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685271868
    },
    {
        "content": "<p>Those really ought to be definitional</p>",
        "id": 361732686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685273133
    },
    {
        "content": "<p>Well I have good news. I finally decided to have a deep look at this and it turns out the solution is really simple. We can just replace <a href=\"https://github.com/leanprover-community/mathlib/blob/917c3c072e487b3cccdbfeff17e75b40e45f66cb/src/ring_theory/tensor_product.lean#L386\">https://github.com/leanprover-community/mathlib/blob/917c3c072e487b3cccdbfeff17e75b40e45f66cb/src/ring_theory/tensor_product.lean#L386</a> by <code>variables {S : Type*} [comm_semiring S] [algebra S A] [smul_comm_class R S A]</code> and the instance below still compiles, and now encompasses all of our use cases...</p>",
        "id": 361734397,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685273670
    },
    {
        "content": "<p>And I checked that it makes Antoine's original example as simple as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_left.restrict_scalars</span> <span class=\"n\">A</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.include_right.restrict_scalars</span> <span class=\"n\">A</span> <span class=\"k\">in</span>\n<span class=\"n\">algebra.tensor_product.product_map</span> <span class=\"n\">hl</span> <span class=\"n\">hr</span>\n</code></pre></div>",
        "id": 361737623,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685274772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20products/near/361728748\">said</a>:</p>\n<blockquote>\n<p>That's OK for me, but the commutativity assumptions in the very definition of the tensor product make me think that a lot of work has to be done sooner or later.</p>\n</blockquote>\n<p>I made a start on this quite some time ago, but the long tail of the work is lost to the porting effort.</p>",
        "id": 361742296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685276142
    },
    {
        "content": "<p>The key missing piece was <code>algbra.to_is_central_scalar</code>, which right now we don't have the ability to <em>state</em></p>",
        "id": 361742489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685276193
    },
    {
        "content": "<p>I understand and appreciate the effort. That's something boring enough to be handled one by a single person.</p>",
        "id": 361743930,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685276671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> , thanks for confirming that (I couldn't be sure because I don't dare changing the mathlib files), but after having looked into that one, I felt that there are several other instances that can be adjusted in a similar way.</p>",
        "id": 361744280,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1685276763
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19118\">#19118</a> (should be either easy to port or easy to do by hand in <code>mathlib4</code>)</p>",
        "id": 361744518,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685276850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Tensor.20products/near/361744280\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> , thanks for confirming that (I couldn't be sure because I don't dare changing the mathlib files), but after having looked into that one, I felt that there are several other instances that can be adjusted in a similar way.</p>\n</blockquote>\n<p>On I hadn't read your last message carefully, indeed you already had the right generality.</p>",
        "id": 361744892,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685276992
    }
]