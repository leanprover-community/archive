[
    {
        "content": "<p>I feel like there ought to be an existing lemma that does this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.Injective</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">hab</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Prod.mk.injEq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1.2</span>\n</code></pre></div>",
        "id": 394861160,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696431798
    },
    {
        "content": "<p>I don't think this already exists, by a Loogle feature I'm surprised works:</p>\n<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Function.Injective (α := Prod _ _)</p>",
        "id": 394862967,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696432349
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Function/Basic.html#Function.Injective2.uncurry\">Function.Injective2.uncurry</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Prod/Basic.html#Prod.fst_injective\">Prod.fst_injective</a>, and <a href=\"https://loogle.lean-fro.org/?q=Function.Injective%20%28%CE%B1%20%3A%3D%20Prod%20_%20_%29\">24 more</a></p>",
        "id": 394862973,
        "sender_full_name": "loogle",
        "timestamp": 1696432350
    },
    {
        "content": "<p>None of the hits work; <code>Injective2.uncurry</code> seems to be the closest. I think there is a spelling for <code>fun x ↦ f (a, x)</code>, no?</p>",
        "id": 394863071,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696432384
    },
    {
        "content": "<p>It's also close to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Injective2.right#doc\">docs#Function.Injective2.right</a> applied to <code>curry f</code>, but  one needs to convert it back to the uncurried version using the function Eric mentioned.</p>",
        "id": 394865579,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696433126
    },
    {
        "content": "<p>Oh, interesting. I was not aware of Injective2</p>",
        "id": 394866775,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696433469
    },
    {
        "content": "<p>Isn't this composition with the fact that <a href=\"http://prod.mk\">prod.mk</a> is injective?</p>",
        "id": 394880512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696438330
    },
    {
        "content": "<p>Indeed I think the best way is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.mk.inj_left#doc\">docs#Prod.mk.inj_left</a></p>",
        "id": 394880936,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696438482
    }
]