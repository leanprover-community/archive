[
    {
        "content": "<p>Hi all, <br>\nI'm pretty new to Lean and I was trying to work on the Cacuchy theorem for complex integration. As part of that I need to define integral over a path in Lean. I thought it was going to be pretty straight forward, however it wasn't. This is what I tried:</p>\n<p><code>noncomputable def pathIntegral1 (x y : ℂ ) (f : ℂ → ℂ) (γ : Path x y) : ℂ :=\nhave aux : unitInterval → ℂ := (Function.comp f  γ) * (deriv γ)  \n∫t in (Set.Icc 0 1), aux t</code></p>\n<p>The issue is that the derivative and the integral both require the domain of the function to be a non trivial normed field, and to be a measure space. I thought being a subset of ℝ would suffice, but it does not.<br>\nI was wondering wether path integrals are already defined in Lean or if there is a way to fix this code.<br>\nThank you in advance.</p>",
        "id": 402217276,
        "sender_full_name": "Jaime Diaz",
        "timestamp": 1700049505
    },
    {
        "content": "<p>Contour integrals are not yet in mathlib except in the special case of the circle. Essentially you will have two options, depending on your assumptions on the curve: if you have differentiability you can just say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">curvint</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">t₁..t₂</span><span class=\"o\">,</span> <span class=\"n\">deriv</span> <span class=\"n\">γ</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(without using the <code>Path</code> API, and instead working with functions defined on the whole real line, might not be the best idea but at least it makes the definition simpler). You can use <code>deriv_within</code> instead of <code>deriv</code>, it will probably make some arguments easier down the line.</p>\n<p>If the contour is just assumed do be continuous, then you have to pay for it by restricting <code>f</code> (it has to be holomorphic for the integral to make sense, if it isn't it is easy to find examples where the \"correct\" value of the integral is infinite). And then the definition is much more involved - but a version will probably be PRed to mathlib in the not so distant future.</p>",
        "id": 402230221,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1700052661
    }
]