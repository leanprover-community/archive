[
    {
        "content": "<p>Suppose we have a list <code>L : List (A x B)</code>. Is there any way to expand <code>L</code> as <br>\n<code>(a1,b1),(a2,b2),...(an,bn)</code>?</p>",
        "id": 403326938,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1700555133
    },
    {
        "content": "<p>What do you mean by <em>expand</em>?</p>",
        "id": 403328965,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1700555948
    },
    {
        "content": "<p>I mean I want to access all entries in the list <code>L</code>.</p>",
        "id": 403402053,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1700579666
    },
    {
        "content": "<p>What do you mean by <em>access</em>? You can \"access\" <code>a1</code> with <code>L[0]!.1</code></p>",
        "id": 403402183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700579711
    },
    {
        "content": "<p>What about full list?</p>",
        "id": 403402306,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1700579752
    },
    {
        "content": "<p>Let say <code>L</code> has a length <code>n</code>. Is there any way to obtain <code>i</code>th term for each <code>i&lt;=n</code>?</p>",
        "id": 403402676,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1700579869
    },
    {
        "content": "<p>Yes, that's <code>L.get i</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get#doc\">docs#List.get</a>)</p>",
        "id": 403402981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700579960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/List.20of.20pairs/near/403402981\">said</a>:</p>\n<blockquote>\n<p>Yes, that's <code>L.get i</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get#doc\">docs#List.get</a>)</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 403403658,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1700580160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622405\">Elif Uskuplu</span> has marked this topic as resolved.</p>",
        "id": 403435183,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700589478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"622405\">@Elif Uskuplu</span>, it's hard to tell if this is relevant without seeing the actual use case, but I thought I'd mention that you can iterate through lists of tuples while destructuring them via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">l</span> <span class=\"k\">do</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Btw, in general, including your specific use case with your zulip message—or, even better, a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> demonstrating the essential part of your use case—can allow people to provide better help! :)</p>",
        "id": 403467816,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700603341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20List.20of.20pairs/near/403467816\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"622405\">Elif Uskuplu</span>, it's hard to tell if this is relevant without seeing the actual use case, but I thought I'd mention that you can iterate through lists of tuples while destructuring them via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">l</span> <span class=\"k\">do</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Btw, in general, including your specific use case with your zulip message—or, even better, a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> demonstrating the essential part of your use case—can allow people to provide better help! :)</p>\n</blockquote>\n<p>Thanks for the information. This is not about a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I just wondered if there is a way to do it.</p>",
        "id": 403468130,
        "sender_full_name": "Elif Uskuplu",
        "timestamp": 1700603474
    },
    {
        "content": "<p>Gotcha! Note also, then, that if you're using <code>have</code>, you can destructure the tuple you access: <code>have (a, b) := L.get i</code></p>",
        "id": 403468250,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700603525
    }
]