[
    {
        "content": "<p>Is there really no substantially easier way to get the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_two_mul_of_div_two_lt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_iff_add_one_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">div_add_mod</span> <span class=\"n\">d</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">add_right_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_iff_add_one_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">lt_succ.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mod_lt</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_two</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 398356932,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698179737
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_two_mul_of_div_two_lt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_lt_iff_lt_mul</span> <span class=\"n\">two_pos</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 398357392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698179973
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_two_mul_of_div_two_lt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_lt_iff_lt_mul</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 398357545,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698180042
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_two_mul_of_div_two_lt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_mul_of_div_lt</span> <span class=\"n\">h</span>\n  <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 398357624,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698180082
    },
    {
        "content": "<p><span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span><span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span><span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span></p>",
        "id": 398357661,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698180102
    },
    {
        "content": "<p><code>apply?</code> doesn't seem to give anything helpful here...</p>",
        "id": 398357759,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698180133
    },
    {
        "content": "<p>I'm guessing all of us figured out what the name should be</p>",
        "id": 398357860,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698180187
    },
    {
        "content": "<p>But</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lt_two_mul_of_div_two_lt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>does.</p>",
        "id": 398357908,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698180208
    },
    {
        "content": "<p>So you have to know that <code>a * 2</code> is better than <code>2 * a</code>.</p>",
        "id": 398358031,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698180265
    },
    {
        "content": "<p>The argument for why it's better is that you'd expect it to hold even in the non-commutative case</p>",
        "id": 398360746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698181621
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lt_two_mul_of_div_two_lt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>(except this only works <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20linarith.20type.20tool.20for.20Nat.20subtraction.20and.20order/near/398222389\">in a few months' time</a>...)</p>",
        "id": 398364323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698183519
    },
    {
        "content": "<p>as long as it works <em>in</em> a few months time and <code>omega</code> isn't working <em>on</em> it for a few months time like in Lean 3 <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 398372093,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698188052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/d.20.2F.202.20.3C.20a.20implies.20d.20.3C.202.20*.20a/near/398360746\">said</a>:</p>\n<blockquote>\n<p>The argument for why it's better is that you'd expect it to hold even in the non-commutative case</p>\n</blockquote>\n<p>But with natural numbers and integers, writing <code>2* a</code> is much more common than <code>a * 2</code>...</p>",
        "id": 398468935,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698234843
    },
    {
        "content": "<p>Sure, but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.div_lt_iff_lt_mul#doc\">docs#Nat.div_lt_iff_lt_mul</a> isn't about <code>a * 2</code>, it's about <code>a * b</code></p>",
        "id": 398472073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698236000
    },
    {
        "content": "<p>So the problem is that specializing may change the preferred spelling and thus make the general lemma hard to find.<br>\nWould it make sense to add the version with <code>k * y</code> somewhere in Mathlib?</p>",
        "id": 398473690,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698236632
    },
    {
        "content": "<p>I'm not convinced: you can find the lemma easily by searching for <code>div_lt_iff</code>, which <code>rw_search</code> might be able to find for you</p>",
        "id": 398476483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698237617
    },
    {
        "content": "<p>Did <code>rw_search</code> hit Mathlib? It doesn't seem to work for me (after updating Mathlib).</p>",
        "id": 398515553,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1698248919
    },
    {
        "content": "<p>It's not merged yet, no.</p>",
        "id": 398515931,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1698249037
    }
]