[
    {
        "content": "<p>In Lean4 metaprogramming, is there a way to get the functions which project onto the constructor's arguments?</p>\n<p>e.g. for the <code>Fin.mk</code> constructor, getting the <code>Fin.val</code> and <code>Fin.isLt</code> functions?</p>\n<p>I tried looking at <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a> to get the names of the arguments and find the definitons that way, but <code>ConstructorVal</code> only has <code>numFields</code> which gives the <em>number</em> of fields, but not their individual names.</p>",
        "id": 363592311,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685929670
    },
    {
        "content": "<p>the InductiveVal has the constructor names</p>",
        "id": 363593115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685930348
    },
    {
        "content": "<p>I think that is the name of the constructor, but not the names of the fields in each constructor?  i.e.. I can get the list of constructors [mk] but not the list of fields [val, isLt]</p>",
        "id": 363593149,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685930398
    },
    {
        "content": "<p>I found this code which I think suggests I am just looking for <code>Expr.proj</code>:  <a href=\"https://github.com/leanprover/lean4/commit/d685c545b46b5d026475789d77be031bfb64f88d#diff-ef04fb1f36d5ff09309ce70c34e097c76cf70f311d8eeff1df65a00d7b36b0d7R22\">https://github.com/leanprover/lean4/commit/d685c545b46b5d026475789d77be031bfb64f88d#diff-ef04fb1f36d5ff09309ce70c34e097c76cf70f311d8eeff1df65a00d7b36b0d7R22</a></p>\n<p>What is the relationship between (<code>mkApp2 ``Fin.val 10 a</code>)  and (<code>.proj ``Fin 0  (mkApp ``Fin 10)</code>)?  Are they identical, or does one reduce to the other or is a wrapper for the other?</p>",
        "id": 363601996,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685937402
    },
    {
        "content": "<p>Hmm, I seem to be able to create expressions using Expr.proj, like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span><span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">x.2</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.ofNat</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Fin.ofNat</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I don't think it's well formed.  The lean infoview warns me <code>Error: Rpc error: InternalError: invalid projection x.1</code>.  I am guessing that <code>x.1</code> is not a valid substitute for <code>x.val</code>?</p>",
        "id": 363610512,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685942686
    }
]