[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_smul_le_two_smul</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>Here <code>exact?</code> didn't find anything.</p>",
        "id": 397912857,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697955080
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_smul_le_two_smul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">decide</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span> <span class=\"c1\">-- exact le_of_nsmul_le_nsmul this hyp</span>\n</code></pre></div>\n<p>give any useful inspiration?</p>\n<p>I think when using <code>exact?</code>, you should try to make its life easy (import everything, give it very generous hypotheses or an easy special case), rather than hard!</p>",
        "id": 397913427,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697955371
    },
    {
        "content": "<p>Wait. Did I just ask for a proof of a lemma that doesn't hold?</p>",
        "id": 397915449,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697956275
    },
    {
        "content": "<p>I'm on mobile, but there is a <code>Counterexample</code> of something similar: I forget the details of the assumptions, but take a look at one of the files in Counterexamples: it is some version of ordered semiring where multiplication by two is not injective.</p>",
        "id": 397916559,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697956980
    },
    {
        "content": "<p>This is the actual result that I have in mind:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Counterexamples/CanonicallyOrderedCommSemiringTwoMul.lean#L269\">https://github.com/leanprover-community/mathlib4/blob/master/Counterexamples/CanonicallyOrderedCommSemiringTwoMul.lean#L269</a></p>\n<p>But I do not know if the assumptions there match yours or not.</p>",
        "id": 397917214,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697957376
    },
    {
        "content": "<p>This is beautiful. I learn so many lessons about math from formalization!</p>",
        "id": 397926370,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697963565
    },
    {
        "content": "<p>Were the assumptions of the counterexample above the right ones?</p>",
        "id": 397930870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697968118
    }
]