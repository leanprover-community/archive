[
    {
        "content": "<p>Is there a way to tell Lean to <em>not</em> try normalizing the big Nat in the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">solution_value</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Imo1981Q6</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"mi\">1981</span> <span class=\"bp\">=</span> <span class=\"n\">solution_value</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:=</span> <span class=\"n\">h7</span> <span class=\"mi\">1981</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">1981</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1984</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h8</span>\n\n  <span class=\"c1\">-- I think that `exact h8` should work here, but I get</span>\n  <span class=\"c1\">-- `Nat.pow exponent is too big`</span>\n  <span class=\"c1\">-- Is there a way to tell Lean to avoid trying to normalize these numbers?</span>\n\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 394122255,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696117967
    },
    {
        "content": "<p>I thought that maybe sprinkling in <code>with_reducible</code> might help, but it does not seem to</p>",
        "id": 394122381,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696118103
    },
    {
        "content": "<p>smaller example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">solution_value</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">solution_value</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- rfl fails with `INTERNAL PANIC: Nat.pow exponent is too big`</span>\n</code></pre></div>",
        "id": 394123098,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696118786
    },
    {
        "content": "<p>hm... this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">solution_value'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">solution_value'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but somehow adding the subtraction as above makes it fail</p>",
        "id": 394123336,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696119013
    },
    {
        "content": "<p>this also works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Nat.sub'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">solution_value3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub'</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">solution_value3</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.sub'</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 394123722,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696119359
    },
    {
        "content": "<p>My hypothesis is that the <code>extern</code>-ness of <code>Nat.sub</code> is interfering with how reducibility usually works: <a href=\"https://github.com/leanprover/lean4/blob/e6292bc0b890aed51447c1f6ef1cd503bd3abf0f/src/Init/Prelude.lean#L1715-L1718\">https://github.com/leanprover/lean4/blob/e6292bc0b890aed51447c1f6ef1cd503bd3abf0f/src/Init/Prelude.lean#L1715-L1718</a></p>",
        "id": 394123821,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696119436
    },
    {
        "content": "<p>My guess is that it has to do more with the fact that <code>Nat.sub</code> is known to the kernel</p>",
        "id": 394123858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696119481
    },
    {
        "content": "<p>to see whether you are right or I am try the same test with <code>Int.sub</code></p>",
        "id": 394123925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696119512
    },
    {
        "content": "<p>I don't know what \"known to the kernel\" means. Can something be \"known to the kernel\" without being <code>extern</code>?</p>",
        "id": 394124002,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696119583
    },
    {
        "content": "<p>It is one of a fixed list of functions that the kernel has special support for</p>",
        "id": 394124127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696119649
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/e6292bc0b890aed51447c1f6ef1cd503bd3abf0f/src/Lean/Meta/WHNF.lean#L818-L824\">https://github.com/leanprover/lean4/blob/e6292bc0b890aed51447c1f6ef1cd503bd3abf0f/src/Lean/Meta/WHNF.lean#L818-L824</a></p>",
        "id": 394124148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696119670
    },
    {
        "content": "<p>Hm... but even if it decides to try reducing the <code>Nat.sub</code>, why would it then try to reduce the <code>Nat.iterate</code>? That's not marked <code>reducible</code>.</p>",
        "id": 394124315,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696119800
    },
    {
        "content": "<p>do we know whether this reduction is happening in the kernel or the elaborator?</p>",
        "id": 394125430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696120537
    },
    {
        "content": "<p>here's my trick for bypassing the elaborator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Function.Iterate</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">List</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"force\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n  <span class=\"n\">Tactic.liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g.assign</span> <span class=\"n\">e</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">solution_value</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">solution_value</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.sub</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">force</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">solution_value</span>\n</code></pre></div>\n<p>It still panics, so I guess the kernel is the one that does the reduction</p>",
        "id": 394125808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696120738
    },
    {
        "content": "<p>which also explains why reducibility doesn't matter</p>",
        "id": 394125828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696120752
    },
    {
        "content": "<p>This works without error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">solution_value</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">3</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">force</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">solution_value</span> <span class=\"o\">:</span> <span class=\"n\">solution_value</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.sub</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so the elaborator's type checker is fine with this</p>",
        "id": 394126040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696120866
    },
    {
        "content": "<p>replacing <code>#check</code> by <code>example :=</code> calls the kernel typechecker as well, causing the panic</p>",
        "id": 394126084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696120891
    },
    {
        "content": "<p>Now I'm staring at the trace output of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">solution_value3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">solution_value3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 394126796,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696121268
    },
    {
        "content": "<p>that's the elaborator typechecker, it won't help</p>",
        "id": 394126873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696121299
    },
    {
        "content": "<p>Here's my current workaround: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">no_eval</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">solution_value</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">no_eval</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">solution_value</span> <span class=\"bp\">=</span> <span class=\"n\">no_eval</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^·</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">1984</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 394218219,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696170520
    },
    {
        "content": "<p><a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/4feee9db9752acbc42417253ddb4c56e2c578a00/MathPuzzles/Imo1981P6.lean#L29-L35\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/4feee9db9752acbc42417253ddb4c56e2c578a00/MathPuzzles/Imo1981P6.lean#L29-L35</a></p>",
        "id": 394218307,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696170574
    },
    {
        "content": "<p>can you sprinkle some <code>id</code>s instead of <code>no_eval</code>?</p>",
        "id": 394381374,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1696240752
    },
    {
        "content": "<p>Unfortunately, no, I was unable to get that to work. It seems to me that the Lean kernel eagerly reduces <code>id</code> similar to how it apparently eagerly reduces <code>Nat.sub</code> and <code>Nat.add</code>.</p>",
        "id": 394383115,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696241298
    },
    {
        "content": "<p>(this might have to do with <code>id</code>'s <code>inline</code> attribute)</p>",
        "id": 394405492,
        "sender_full_name": "David Renshaw",
        "timestamp": 1696247253
    },
    {
        "content": "<p>As far as I understand it, <code>inline</code> should only affect the compiler, not the kernel</p>",
        "id": 394419401,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696250717
    },
    {
        "content": "<p>There's a hint attached to definitions (the \"definitional height\") that affects which definitions the kernel will unfold before others. I don't understand it very well, but maybe somehow <code>no_eval</code> has a different definitional height from <code>id</code> so is unfolded differently?</p>\n<p>I don't see any special cases for <code>id</code> in the kernel, unlike nat operations <a href=\"https://github.com/leanprover/lean4/blob/4b47462ccc1af725add7c157adb8101e3c6b4c92/src/kernel/type_checker.cpp#L599-L610\">which are special cased</a>.</p>",
        "id": 394421167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696251169
    }
]