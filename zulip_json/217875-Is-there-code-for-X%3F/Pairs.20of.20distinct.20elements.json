[
    {
        "content": "<p>Is there a type similar to <code>Sym2</code> except [a,a] is not allowed? The cardinality of this type would be <code>n(n-1)/2</code> instead of <code>n(n+1)/2</code> like for <code>Sym2</code>. I am defining a random graph and I want to say that for every unordered pair of vertices <code>[v,w]</code> with <code>v</code> not equal to <code>w</code>, I can have an edge.</p>",
        "id": 402847289,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700294328
    },
    {
        "content": "<p><code>(x : Sym2 α// ¬x.IsDiag}</code></p>",
        "id": 402854889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700299527
    },
    {
        "content": "<p>For example, the cardinality result exists as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=html#doc\">docs#html</a>#Sym2.card_subtype_not_diag</p>",
        "id": 402900383,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700331405
    },
    {
        "content": "<p>Sometimes I've thought about introducing <code>UConf2 α := {x : Sym2 α // ¬x.IsDiag}</code> as an abbreviation for this (it's the unordered configuration space of two points). This might be a bit of an obscure name though.</p>",
        "id": 402900515,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700331486
    },
    {
        "content": "<p>\"alpha choose 2\" would be a cool name :-)</p>",
        "id": 402901123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700331920
    },
    {
        "content": "<p>Oh, <code>Choose2 α</code> would be a lot better than <code>UConf2 α</code>. Then there could also be <code>Choose α 2</code>. This would mirror <code>Sym2 α</code> and <code>Sym α 2</code>.</p>",
        "id": 402901318,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700332061
    },
    {
        "content": "<p>Imagine if we had uniform symbols for everything in the 12-fold way. This one could be <code>α q↪ Fin 2</code> for \"injective functions, quotiented by permutations of the domain\"</p>",
        "id": 402901758,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700332339
    },
    {
        "content": "<p><code>Fin n ↠q Fin m</code> (surjective maps, quotiented by permutations of the codomain) could be for Stirling numbers of the second kind <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">{</mo><mfrac linethickness=\"0px\"><mi>n</mi><mi>m</mi></mfrac><mo fence=\"true\">}</mo></mrow><annotation encoding=\"application/x-tex\">n\\brace m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2em;vertical-align:-0.35em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">{</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7454em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">}</span></span></span></span></span></span></p>",
        "id": 402902182,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700332623
    },
    {
        "content": "<p>In my work on the simplicity of the alternating group, I made use of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The type of combinations of `n` elements of a type `α` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Nat.Combination</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 403008711,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1700399203
    },
    {
        "content": "<p>(and then, I study the action of <code>Equiv.Perm α</code> on the corresponding subtype).</p>",
        "id": 403008775,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1700399257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> has marked this topic as resolved.</p>",
        "id": 403058812,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700433777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> has marked this topic as unresolved.</p>",
        "id": 403236306,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700510348
    },
    {
        "content": "<p>Why does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.edgeSet#doc\">docs#SimpleGraph.edgeSet</a> not use <code>{x : Sym2 α // ¬x.IsDiag}</code> but instead uses <code>Sym2</code>? A simple graph does not have self-edges so there won't be any diagonal elements.</p>",
        "id": 403236544,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700510439
    },
    {
        "content": "<p>Probably because it's easier this way</p>",
        "id": 403237291,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1700510703
    },
    {
        "content": "<p>Rather than working with subtypes, it can be easier working with types themselves and then using accompanying theorems (like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.not_isDiag_of_mem_edgeSet#doc\">docs#SimpleGraph.not_isDiag_of_mem_edgeSet</a>). If you need the subtype, then you can package it up yourself.</p>\n<p>It's similar to questions like, for <code>Nat</code>, why doesn't <code>n + 1</code> land in <code>{m : Nat // 0 &lt; m}</code> rather than <code>Nat</code>.</p>",
        "id": 403237772,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700510889
    },
    {
        "content": "<p>In <a href=\"https://github.com/Vilin97/random_graphs/blob/experimental/RandomGraphs/erdos_renyi.lean#L51\">https://github.com/Vilin97/random_graphs/blob/experimental/RandomGraphs/erdos_renyi.lean#L51</a> I proved a false theorem -- that an Erdos-Renyi simple graph has pn(n+1)/2 edges in expectation. Instead I need it to be pn(n-1)/2. The problem is that I defined edges to be in <code>Sym2 V</code>, thinking that that's the type of edges. But <code>Sym2 V</code> has the wrong cardinality. Now I am trying to switch to using <code>{x : Sym2 V // ¬x.IsDiag}</code> but I am struggling to convert from this type to <code>Sym2 V</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">EdgeType</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Sym2</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">x.IsDiag</span><span class=\"o\">}</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">edge_type_subtype_of_sym2</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">EdgeType</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403238756,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1700511289
    },
    {
        "content": "<p>If you switch <code>def EdgeType</code> to <code>abbrev EdgeType</code>, then if you have <code>e : EdgeType V</code> you should be able to use <code>e</code> wherever a <code>Sym2 V</code> is expected.</p>",
        "id": 403244747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700514083
    },
    {
        "content": "<p>If you want it for graphs, I strongly wish that mathlib implements the definition of Serre / Bourbaki that will allow correct automorphisms groups, relation with orientations etc</p>",
        "id": 403436842,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1700590022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Pairs.20of.20distinct.20elements/near/403244747\">said</a>:</p>\n<blockquote>\n<p>If you switch <code>def EdgeType</code> to <code>abbrev EdgeType</code>, then if you have <code>e : EdgeType V</code> you should be able to use <code>e</code> wherever a <code>Sym2 V</code> is expected.</p>\n</blockquote>\n<p>That does not work for me. I get the same error with <code>def</code> and <code>abbrev</code>.</p>",
        "id": 405904550,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1701720855
    },
    {
        "content": "<p>What's the error? This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">EdgeType</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Sym2</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">x.IsDiag</span><span class=\"o\">}</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">edge_type_subtype_of_sym2</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">EdgeType</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sym2</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 405904846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701720974
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.SimpleGraph.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">EdgeType</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Sym2</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">x.IsDiag</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Edge</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">EdgeType</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edgeSet</span> <span class=\"c1\">-- failed to synthesize instance Membership (EdgeType V) (Set (Sym2 V))</span>\n</code></pre></div>",
        "id": 405905556,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1701721287
    },
    {
        "content": "<p>Failed to synthesize membership</p>",
        "id": 405905577,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1701721300
    },
    {
        "content": "<p>I believe this is because <code>abbrev</code> (very surprisingly) doesn't make the definition reducible.</p>",
        "id": 405905841,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701721403
    },
    {
        "content": "<p>I don't know what reducible means :(</p>",
        "id": 405905903,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1701721433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> That's not the case, <code>abbrev</code> does make definitions reducible.</p>\n<p>I think the problem is that this isn't a place where Lean will insert a coercion. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Edge</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">EdgeType</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">e.1</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edgeSet</span>\n</code></pre></div>",
        "id": 405906410,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701721664
    },
    {
        "content": "<p>When I said \"wherever a <code>Sym2 V</code> is expected\" I'm technically correct (it does work if Lean is <em>expecting</em> a <code>Sym2</code> in the sense it will insert a coercion as needed), but I'm practically incorrect because you can't use it wherever a <code>Sym2</code> would have worked before.</p>",
        "id": 405906582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701721750
    },
    {
        "content": "<p>(I'm not really sure why it shouldn't work here though. One could imagine that because the first argument is an <code>outParam</code> that Lean could insert a coercion, but the fact is that it doesn't.)</p>",
        "id": 405906845,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701721878
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 405927354,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1701730201
    }
]