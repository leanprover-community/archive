[
    {
        "content": "<p>Hi all! I would like to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>a</mi><mi>b</mi></mfrac><mo>=</mo><mfrac><mi>c</mi><mi>d</mi></mfrac><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>a</mi><mi>d</mi><mo>=</mo><mi>b</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\"> \\frac{a}{b} = \\frac{c}{d} \\iff ad = bc </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">c</span></span></span></span>. Regardless of whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\"> a,b,c,d </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> are integers, reals, complex, etc, I can't find any tactics or lemmas that can help with this (library_search can't either). Does anyone have suggestions?</p>",
        "id": 382749586,
        "sender_full_name": "Ben Ryjikov",
        "timestamp": 1691439397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569131\">Ben Ryjikov</span> has marked this topic as resolved.</p>",
        "id": 382749666,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691439427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569131\">Ben Ryjikov</span> has marked this topic as unresolved.</p>",
        "id": 382749678,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691439431
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=div_eq_div_iff#doc\">docs#div_eq_div_iff</a> ?</p>",
        "id": 382749755,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691439462
    },
    {
        "content": "<p>Thats perfect, thank you! How did you find this so quickly, is there a smart way to search the mathlib docs for this? (forgive me, I'm somewhat new here). I was just searching using words that I thought would be in the name of this tactic.</p>",
        "id": 382750254,
        "sender_full_name": "Ben Ryjikov",
        "timestamp": 1691439610
    },
    {
        "content": "<p>No worries. I just guessed the name from experience, but this is not a satisfying answer. Probably <code>library_search</code> (which is now called <code>exact?</code> by the way) would find it if you add the nonzero assumptions?</p>",
        "id": 382751731,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691440062
    },
    {
        "content": "<p>One thing to recognize is that the name directly comes from the theorem.  div_eq_div_iff just from the name corresponds to a theorem like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_</span> <span class=\"bp\">/</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">/</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Since it is saying a division expression is equal to a division expression, if and only if some condition is satisfied.</p>",
        "id": 382751928,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1691440115
    },
    {
        "content": "<p>There can often be ambiguity, or additional context required to understand what the name means, but often you can guess based on these sorts of schemas once you are familiar with them.</p>",
        "id": 382752096,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1691440169
    },
    {
        "content": "<p>that makes sense, thank you both!</p>",
        "id": 382752867,
        "sender_full_name": "Ben Ryjikov",
        "timestamp": 1691440403
    },
    {
        "content": "<p>You can also use the #find command to search for matching theorems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n</code></pre></div>\n<p>There are actually three matching theorems, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=div_eq_div_iff_mul_eq_mul#doc\">docs#div_eq_div_iff_mul_eq_mul</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=div_eq_div_iff#doc\">docs#div_eq_div_iff</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsUnit.div_eq_div_iff#doc\">docs#IsUnit.div_eq_div_iff</a></p>\n<p>Note that if you use metavariables  (?a) then it's sensitive to the exact structure of the pattern, so if you wrote <code>?b * ?c</code> then it wouldn't find anything.  For this reason, you might want to try more broad searches if the specific one doesn't find any hits, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">_</span> <span class=\"bp\">/</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">/</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"n\">_</span> <span class=\"bp\">/</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">/</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Finally, you can use the search bar in the mathlib4 docs <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a> If you search for \"div eq iff\"  you will get about 30 simple theorems that match, and you can go through them all one by one.</p>",
        "id": 382763347,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1691443866
    },
    {
        "content": "<p>It's perhaps worth noting that the lemma you stated is not true, consider <code>a = d = 0</code> and <code>b = c = 1</code>. The LHS is <code>0 = 0</code>, but the RHS is <code>0 = 1</code></p>",
        "id": 382764815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691444471
    },
    {
        "content": "<p>Yes, that’s probably why <code>library_search</code> did not work</p>",
        "id": 382765485,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691444750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569131\">Ben Ryjikov</span> has marked this topic as resolved.</p>",
        "id": 382927916,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691495641
    }
]