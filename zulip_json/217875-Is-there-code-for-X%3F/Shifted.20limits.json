[
    {
        "content": "<p>I'm looking for something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but have difficulties finding it.</p>",
        "id": 409025823,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703024628
    },
    {
        "content": "<p>Isn't this just an application of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Filter.Tendsto.comp#doc\">docs#Filter.Tendsto.comp</a> ?</p>",
        "id": 409026441,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703024932
    },
    {
        "content": "<p>I guess so. I think I was looking for something involving <code>comp</code>, but may have mistyped (it is getting late ...).</p>",
        "id": 409026533,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703024996
    },
    {
        "content": "<p>Is there a tactic that clears <code>Tendsto (fun x ↦ 1 - x) (𝓝[≠] 1) (𝓝[≠] 0)</code>?</p>",
        "id": 409027339,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1703025437
    },
    {
        "content": "<p>Hmm... perhaps I led you astray. This works though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">tendsto_map'_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">Homeomorph.addLeft</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toPartialHomeomorph.map_nhdsWithin_eq</span>\n    <span class=\"o\">(</span><span class=\"n\">Set.mem_univ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>The first two lines get it down to the essence of the argument.</p>",
        "id": 409030925,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703027206
    },
    {
        "content": "<p>That <code>toPartialHomeomorph.map_nhdsWithin_eq</code> is really ugly. If the lemma is missing for homeomorphisms then it should be added.</p>",
        "id": 409032497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1703028148
    },
    {
        "content": "<p>Indeed, I think it's missing. If I can get to it, I'll PR, but i'm quite busy at the moment.</p>",
        "id": 409035769,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703030198
    },
    {
        "content": "<p>I guess we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.LeftInvOn.map_nhdsWithin_eq#doc\">docs#Set.LeftInvOn.map_nhdsWithin_eq</a>, but that's not really better.</p>",
        "id": 409036021,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703030371
    },
    {
        "content": "<p>Oh, I guess we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Embedding.map_nhdsWithin_eq#doc\">docs#Embedding.map_nhdsWithin_eq</a>. So the above can be written:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Topology</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Tendsto</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"bp\">≠</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">tendsto_map'_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">Homeomorph.addLeft</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">embedding.map_nhdsWithin_eq</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>which I think is fine.</p>",
        "id": 409036688,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1703030650
    }
]