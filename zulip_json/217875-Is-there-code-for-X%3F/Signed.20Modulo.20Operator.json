[
    {
        "content": "<p>Hi! Is there a library/operator for a signed integer modulo operation that would return an integer between [-floor(N/2); floor((N-1)/2)] (assuming we are operating modulo N)?</p>\n<p>The operation <code>a % n</code> seems to always return a number in [0; n-1], even when <code>a</code> is negative, while Int.mod seems to return a value between [-n + 1; n - 1].</p>\n<p>Thanks!</p>",
        "id": 401181171,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1699544090
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=toIcoMod#doc\">docs#toIcoMod</a></p>",
        "id": 401184656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699545166
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 401184838,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1699545228
    },
    {
        "content": "<p>Unfortunately it's not computable, but probably it ought to be</p>",
        "id": 401185417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699545395
    },
    {
        "content": "<p>I think there's something in std that does this version. Hold on.</p>",
        "id": 401201905,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699550099
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.mod#doc\">docs#Int.mod</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.fmod#doc\">docs#Int.fmod</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.emod#doc\">docs#Int.emod</a>, but not the one Aymeric is looking for.</p>",
        "id": 401202649,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1699550400
    },
    {
        "content": "<p><del>No, I think it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.fmod#doc\">docs#Int.fmod</a></del></p>",
        "id": 401202775,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699550436
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 401203127,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1699550577
    },
    {
        "content": "<p>I have some results about <code>bmod</code> (for balanced mod) with this definition. I can put them in Std sooner rather than later if that is useful.</p>",
        "id": 401260783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699576717
    },
    {
        "content": "<p>What are you using it for?</p>",
        "id": 401260824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699576737
    },
    {
        "content": "<p>That'd be very helpful! I'm trying to prove the correctness of a Signed Montgomery Reduction, used in cryptographic code. Section 2.4 of <a href=\"https://eprint.iacr.org/2021/986.pdf\">https://eprint.iacr.org/2021/986.pdf</a> gives a good overview of how this is supposed to work (and of the <code>mod^{+,-}</code>operator needed)</p>",
        "id": 401346626,
        "sender_full_name": "Aymeric Fromherz",
        "timestamp": 1699614168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"550342\">@Aymeric Fromherz</span> <a href=\"https://github.com/leanprover/std4/pull/361\">https://github.com/leanprover/std4/pull/361</a></p>",
        "id": 401471163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699673882
    }
]