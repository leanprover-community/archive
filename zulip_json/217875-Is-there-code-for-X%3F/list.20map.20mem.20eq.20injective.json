[
    {
        "content": "<p>I think it should be possible to prove this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a2</span><span class=\"o\">:</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">openVar</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">openVar</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">xs'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">xs'</span>\n</code></pre></div>\n<p>given that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">OpenVarCloseVarComp</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Var</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Var.lc_at</span> <span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">openVar</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"bp\">∘</span> <span class=\"n\">closeVar</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>because <code>OpenVarCloseVarComp</code> implies that <code>openVar k v</code> is injective in a sense, but I'm not sure of the best way to show this. Is there a lemma relating injective functions and maps that would help?</p>",
        "id": 395446136,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696705720
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/list.20map.20mem.20eq\">#Is there code for X? &gt; list map mem eq</a> by <span class=\"user-mention silent\" data-user-id=\"139442\">Kayla Thomas</span>.</p>",
        "id": 395446173,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696705753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> <a href=\"http://List.map\">List.map</a>, Function.Injective</p>",
        "id": 395446407,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696705940
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Basic.html#List.map_diff\">List.map_diff</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Basic.html#List.map_erase\">List.map_erase</a>, and <a href=\"https://loogle.lean-fro.org/?q=List.map%2C%20Function.Injective\">7 more</a></p>",
        "id": 395446409,
        "sender_full_name": "loogle",
        "timestamp": 1696705941
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map_injective_iff#doc\">docs#List.map_injective_iff</a> seems useful</p>",
        "id": 395446623,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696706049
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 395446817,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696706102
    },
    {
        "content": "<p>Are there any definitions/lemmas in mathlib about a function only being injective under conditions on its domain?</p>",
        "id": 395459710,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696718280
    },
    {
        "content": "<p>Perhaps <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.InjOn#doc\">docs#Set.InjOn</a></p>",
        "id": 395459776,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696718319
    },
    {
        "content": "<p>Nice. Thank you.</p>",
        "id": 395459935,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1696718501
    }
]