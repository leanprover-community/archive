[
    {
        "content": "<p>Is there a built-in data type equivalent to a dequeue (double-ended queue) or deque, where elements can be added and popped from the front and end?</p>",
        "id": 350804304,
        "sender_full_name": "Andrew Eldridge",
        "timestamp": 1681829349
    },
    {
        "content": "<p>The only idea I had in class was to build something like <code>Int</code> for <code>List</code> but I thought Andrew might find better and/or more native suggestions here</p>",
        "id": 350837919,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681836962
    },
    {
        "content": "<p>Well, in the sense of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv\">docs#equiv</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list\">docs#list</a> is equivalent to a deque, with operations <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.init\">docs#list.init</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.tail\">docs#list.tail</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.concat\">docs#list.concat</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.cons\">docs#list.cons</a>.</p>",
        "id": 350838205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681837031
    },
    {
        "content": "<p>Good point. I don’t really know the uses of deque well enough to know if this is ergonomic or not.</p>",
        "id": 350839189,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681837273
    },
    {
        "content": "<p>I don’t think performance is an issue here but <span class=\"user-mention\" data-user-id=\"610892\">@Andrew Eldridge</span>  would know better</p>",
        "id": 350839473,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1681837345
    },
    {
        "content": "<p>I've just added methods for pop/push left/right on List. I believe it should work for my use case.</p>",
        "id": 351168950,
        "sender_full_name": "Andrew Eldridge",
        "timestamp": 1681946442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"610892\">Andrew Eldridge</span> has marked this topic as resolved.</p>",
        "id": 351168958,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681946455
    },
    {
        "content": "<p>Haskell implements Deque as, essentially, a constructor that takes a pair of lists.</p>",
        "id": 351292836,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681989897
    },
    {
        "content": "<p>We could absolutely mirror that.</p>",
        "id": 351292874,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681989904
    },
    {
        "content": "<p><a href=\"https://hackage.haskell.org/package/deque-0.4.4/docs/src/Deque.Lazy.Defs.html#Deque\">https://hackage.haskell.org/package/deque-0.4.4/docs/src/Deque.Lazy.Defs.html#Deque</a></p>",
        "id": 351292892,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1681989909
    }
]