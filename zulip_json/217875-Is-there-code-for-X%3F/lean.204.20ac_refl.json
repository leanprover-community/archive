[
    {
        "content": "<p>I'm stuck on this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span> <span class=\"bp\">∨</span> <span class=\"n\">D</span> <span class=\"bp\">∨</span> <span class=\"n\">E</span> <span class=\"bp\">∨</span> <span class=\"n\">F</span> <span class=\"bp\">∨</span> <span class=\"n\">G</span> <span class=\"bp\">∨</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">∨</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">or_assoc</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- out of ideas</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In Lean 3, <code>  apply iff_of_eq, ac_refl,</code> would do it, but I can't find <code>ac_refl</code> in mathlib4. Is this just annoying in mathlib4 right now?</p>",
        "id": 346830373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680610382
    },
    {
        "content": "<p><code>ac_rfl</code> <a href=\"https://github.com/leanprover/lean4/blob/742d053a97bdd109a41a921facd1cd6a55e89bc7/src/Lean/Meta/Tactic/AC/Main.lean#L171-L173\">implementation</a> new <a href=\"https://github.com/leanprover/lean4/blob/d694bf2d09b86d6ec3f218ed03e70b6e9672f5d2/src/Init/Tactics.lean#L277\">syntax</a></p>",
        "id": 346831677,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680610675
    },
    {
        "content": "<p>did you check whether <code>ac_refl</code> is still on the list of unported tactics?</p>",
        "id": 346833849,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680611203
    },
    {
        "content": "<p><code>tauto</code> also works for this fwiw</p>",
        "id": 346834267,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680611293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/lean.204.20ac_refl/near/346833849\">said</a>:</p>\n<blockquote>\n<p>did you check whether <code>ac_refl</code> is still on the list of unported tactics?</p>\n</blockquote>\n<p>I looked in the <code>Tactic</code> directory of mathlib4 and couldn't find it. I can quite believe that there are better ways to do this!</p>",
        "id": 346838857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680612319
    },
    {
        "content": "<p>It’s in core now</p>",
        "id": 346841849,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680613018
    },
    {
        "content": "<p>Does <code>aesop </code> also work?</p>",
        "id": 346842218,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680613100
    },
    {
        "content": "<p>It does in my use case (which is 5 times worse than the example above)!</p>",
        "id": 346848673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680614464
    },
    {
        "content": "<p>The <code>assoc, comm, left_comm</code> combination works for any abelian-group-like op:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span> <span class=\"bp\">∨</span> <span class=\"n\">D</span> <span class=\"bp\">∨</span> <span class=\"n\">E</span> <span class=\"bp\">∨</span> <span class=\"n\">F</span> <span class=\"bp\">∨</span> <span class=\"n\">G</span> <span class=\"bp\">∨</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">∨</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">∨</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">or_assoc</span><span class=\"o\">,</span> <span class=\"n\">or_comm</span><span class=\"o\">,</span> <span class=\"n\">or_left_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 346856503,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1680615808
    },
    {
        "content": "<p>gaargh I tried this! But I forgot <code>or_left_comm</code>! Thanks! That'll learn me (until the next time I forget it)</p>",
        "id": 346869177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680617887
    }
]