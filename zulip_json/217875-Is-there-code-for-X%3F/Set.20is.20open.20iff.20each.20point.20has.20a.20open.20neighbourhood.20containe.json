[
    {
        "content": "<p>This is a standard lemma from point-set topology: a subset $s\\subseteq X$ of a topological space <code>X</code> is open iff each point <code>x \\in x</code> is contained in an open subset of <code>s</code>. I can't find this in mathlib (neither eyeballing, nor apply?/exact?/hint return anything). Did I overlook something?</p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>lemma aux {X : Type*} [TopologicalSpace X] {s : Set X} :\n    IsOpen s ↔ ∀ x, x ∈ s → ∃ t : Set X, x ∈ t ∧ t ⊆ s ∧ IsOpen t := by\n  constructor\n  · intro h x hx\n    rcases mem_nhds_iff.mp (h.mem_nhds hx) with ⟨t, hts, htopen, hxt⟩\n    use t\n  · sorry -- this seems to be missing?\n</code></pre></div>",
        "id": 403003918,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700395042
    },
    {
        "content": "<p>I'd be interested both in the backwards direction and the full iff; as you can see, mathlib basically contains the direction <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">→</span></span></span></span> already.</p>",
        "id": 403003938,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700395078
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isOpen_iff_forall_mem_open#doc\">docs#isOpen_iff_forall_mem_open</a></p>",
        "id": 403004022,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700395170
    },
    {
        "content": "<p>I opened the doc and searched for \"isopen iff mem\"</p>",
        "id": 403004106,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700395217
    },
    {
        "content": "<p>I wasn't sure what I could search for... thank you for the quick response!</p>",
        "id": 403004501,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700395490
    },
    {
        "content": "<p>Probably you don't need this result actually. Open neighborhoods are overrated.</p>",
        "id": 403020498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700407204
    },
    {
        "content": "<p>I used this result on Thursday to prove that the sum of two continuous cocycles <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">G\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> was continuous (the target has the discrete topology). I'm wondering what I did wrong now :-) I had to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>ϕ</mi><mn>1</mn></msub><mo>+</mo><msub><mi>ϕ</mi><mn>2</mn></msub><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">{</mo><mi>m</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">(\\phi_1+\\phi_2)^{-1}\\{m\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">}</span></span></span></span> was open knowing that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>t</mi><mo separator=\"true\">,</mo><msubsup><mi>ϕ</mi><mn>1</mn><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">{</mo><mi>t</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\forall t, \\phi_1^{-1}\\{t\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1205em;vertical-align:-0.2663em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8542em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.1031em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">}</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>ϕ</mi><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">{</mo><mi>t</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\phi_2^{-1}\\{t\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1205em;vertical-align:-0.2663em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8542em;\"><span style=\"top:-2.4337em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.1031em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2663em;\"><span></span></span></span></span></span></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">}</span></span></span></span> were open. My proof was to use the above lemma, which gives me some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, and then apply the hypotheses to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ϕ</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi_1(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ϕ</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi_2(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϕ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> and take the intersection.</p>",
        "id": 403020926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700407426
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 403021113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700407520
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous_cocycles</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">})}</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">φ₁</span> <span class=\"n\">φ₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">m</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isOpen_iff_forall_mem_open</span><span class=\"o\">]</span> <span class=\"c1\">-- here</span>\n    <span class=\"n\">intro</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">φ₁</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">φ₂</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">φ₁</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">φ₂</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨(</span><span class=\"n\">φ₁</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">φ₁</span> <span class=\"n\">g</span><span class=\"o\">})</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">φ₂</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">φ₂</span> <span class=\"n\">g</span><span class=\"o\">}),</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">x</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1.1</span><span class=\"o\">,</span> <span class=\"n\">h1.2</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">IsOpen.inter</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n    <span class=\"bp\">·</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">neg_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403023878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700409018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Set.20is.20open.20iff.20each.20point.20has.20a.20open.20neighbourhood.20containe/near/403020498\">said</a>:</p>\n<blockquote>\n<p>Probably you don't need this result actually. Open neighborhoods are overrated.</p>\n</blockquote>\n<p>I'm using it for <a href=\"https://github.com/leanprover-community/mathlib4/blob/1f6dbaad86cb96ee0c16cdda4ec30da8604aeb8b/Mathlib/Geometry/Manifold/InteriorBoundary.lean#L111\">this lemma</a>: the interior of a smooth manifold is open.<br>\nIt allows reducing this to charts nicely. Golfing ideas welcome.</p>",
        "id": 403043383,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1700420596
    },
    {
        "content": "<p>Kevin, I think Patrick was suggesting something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TopologicalSpace</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous_cocycles</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">})}</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">φ₁</span> <span class=\"n\">φ₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">m</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isOpen_iff_eventually</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">φ₁</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">φ₂</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"n\">filter_upwards</span> <span class=\"o\">[(</span><span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">φ₁</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mem_nhds</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">φ₂</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mem_nhds</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n      <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hg</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">neg_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Neighborhoods are not overrated, open ones are. But I get in this case you don't gain a lot.</p>",
        "id": 403051959,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1700427698
    },
    {
        "content": "<p>Oh it's nice to see this technique though! Thanks!</p>",
        "id": 403053977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700429522
    },
    {
        "content": "<p>Anatole is right that I had something like this in mind of course. But why stopping at <code>rw [isOpen_iff_eventually]</code> instead of going all the way to <code>simp only [isOpen_iff_eventually] at *</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous_cocycles</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">IsOpen</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">})}</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intros</span> <span class=\"n\">φ₁</span> <span class=\"n\">φ₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">m</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">isOpen_iff_eventually</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">g</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">φ₁</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">rfl</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">and</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">φ₂</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span>\n    <span class=\"n\">aesop</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">neg_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403069013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700441135
    }
]