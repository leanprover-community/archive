[
    {
        "content": "<p>Is there something that says <code>decLt a.f₀ b.f₀ ∧ decLt a.f₁ b.f₁ → decLt a b </code> if <code>a</code> and <code>b</code> are structures with fields <code>f₀</code> and <code>f₁</code>? (I'm also not sure if this is even true; but it seems true to me :D)</p>",
        "id": 378890824,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690393074
    },
    {
        "content": "<p>That doesn't typecheck, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DecidableRel#doc\">docs#DecidableRel</a> takes just one argument</p>",
        "id": 378893181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690393588
    },
    {
        "content": "<p>oops I edited the question (also changed it to be a bit more specific)</p>",
        "id": 378893724,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690393694
    },
    {
        "content": "<p>What's <code>decLt</code>? Can you include your imports?</p>",
        "id": 378895464,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690394062
    },
    {
        "content": "<p>(And if it exists it probably will be with <code>\\to</code> rather than <code>\\and</code>, and maybe some <code>ext</code>ing)</p>",
        "id": 378895607,
        "sender_full_name": "Julian Berman",
        "timestamp": 1690394096
    },
    {
        "content": "<p>Don't have any imports. <code>decLt</code> as seen <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/String/Basic.html#String.decLt\">here</a>, basically just <code>a -&gt; b -&gt; Decidable (a &lt; b)</code> Here's an mwe of what i was trying to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">ID</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Name</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">ID</span>\n  <span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ID</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Name</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">Name</span> <span class=\"n\">where</span>\n  <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a.id</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.id</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a.path</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.path</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Name.decLt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378896857,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690394374
    },
    {
        "content": "<p>Note your edited version still doesn't typecheck (assuming it refers to <code>String.decLt</code>), as <code>decLt</code> is a proof not a proposition</p>",
        "id": 378898781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690394806
    },
    {
        "content": "<p>Your new version is fine, but it doesn't resemble your question any more!</p>",
        "id": 378898879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690394831
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Name.decLt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 378899188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690394904
    },
    {
        "content": "<p>Or even use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instDecidableAnd#doc\">docs#instDecidableAnd</a> directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Name.decLt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableAnd</span>\n</code></pre></div>",
        "id": 378899343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690394935
    },
    {
        "content": "<p>oh that's amazing thank you! sorry about the original question i keep trying to generalize my question :')</p>",
        "id": 378900288,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690395109
    }
]