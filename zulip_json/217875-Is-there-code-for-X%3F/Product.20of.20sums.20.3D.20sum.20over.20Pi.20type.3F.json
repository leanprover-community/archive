[
    {
        "content": "<p>Mathlib knows that if <code>α</code> and <code>β</code> are Fintypes, and <code>f : α → R</code> and <code>g : β → R</code> are maps into a commutative ring, then <code>(∑ a : α, f a) * (∑ b : β, g b)</code> can be written as a sum over <code>α × β</code>. </p>\n<p>Do we have a generalisation of this to a collection of Fintypes indexed by another Fintype, something like<br>\n<code>∏ i : d, ∑ x, (f i) x = ∑ z : (i : d) → α i, ∏ i : d, (f i) (z i)</code>?<br>\nMathematically this is \"obvious\" by induction on the cardinality of the index set, but I can't find a nice way of coding up \"induction on the cardinality of a Fintype\" in lean.</p>",
        "id": 406916315,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702115356
    },
    {
        "content": "<p>You may try <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Fintype/Option.html#Fintype.induction_empty_option\">docs#Finite.induction_empty_option.</a></p>",
        "id": 406917644,
        "sender_full_name": "Joël Riou",
        "timestamp": 1702115854
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_sum#doc\">docs#Finset.prod_sum</a></p>",
        "id": 406917723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702115897
    },
    {
        "content": "<p>If you want to avoid dependent type hell: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_univ_sum#doc\">docs#Finset.prod_univ_sum</a></p>",
        "id": 406917750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702115935
    },
    {
        "content": "<p>Great! I will now have a go at proving the analogue for products of integrals (d-dimensional case of Fubini's theorem where d is a Fintype). I'm pretty sure that isn't in the library but I can hopefully use the proof of <code>Finset.prod_univ_sum</code> as a model.</p>",
        "id": 406924763,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702120903
    },
    {
        "content": "<p>I expect formalizing this will be greatly simplified when using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.lmarginal#doc\">docs#MeasureTheory.lmarginal</a>. A version of that using the Bochner integral (which presumably you want?) is forthcoming.</p>",
        "id": 407284441,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702314687
    },
    {
        "content": "<p>Here is a proof using marginals for the Lebesgue integral</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Integral.Marginal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">Classical</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">x</span><span class=\"o\">)]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SigmaFinite</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableMul₂</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Measurable.finset_prod</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">Finset.induction</span>\n  <span class=\"n\">case</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">insert</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"n\">hi</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.prod_insert</span> <span class=\"n\">hi</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">mem_insert_self</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">↦</span> <span class=\"n\">hf</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">hj</span><span class=\"o\">))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lmarginal_mul_left</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∫⋯∫⁻</span><span class=\"n\">_s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∫⋯∫⁻</span><span class=\"n\">_s</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lmarginal</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lintegral_const_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf.comp</span> <span class=\"n\">measurable_updateFinset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lmarginal_smul_left</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫⋯∫⁻</span><span class=\"n\">_s</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"bp\">∫⋯∫⁻</span><span class=\"n\">_s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">z</span>\n  <span class=\"n\">symm</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lmarginal_mul_left</span> <span class=\"n\">hf</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lmarginal_prod</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∫⋯∫⁻</span><span class=\"n\">_s</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">Finset.induction</span>\n  <span class=\"n\">case</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">insert</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"n\">hi</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lmarginal_insert'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hi</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.prod_insert</span> <span class=\"n\">hi</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">lintegral_mul_const</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">mem_insert_self</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">))]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">lmarginal_mul_left</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">↦</span> <span class=\"n\">hf</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">hj</span><span class=\"o\">)]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Measurable.finset_prod</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">↦</span>\n      <span class=\"n\">hf</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">hj</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">measurable_pi_apply</span> <span class=\"n\">_</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Measurable.finset_prod</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">↦</span>\n      <span class=\"n\">hf</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">comp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">measurable_pi_apply</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lintegral_finset_prod</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">Measure.pi</span> <span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">isEmpty_or_nonempty</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">⟩⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">lintegral_of_isEmpty</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">isEmpty_pi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_eq_zero</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Finset.mem_univ</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lintegral_of_isEmpty</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lintegral_eq_lmarginal_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">lmarginal_prod</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">hf</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 407298245,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1702319756
    },
    {
        "content": "<p>I was wrong in thinking the version for integrals wasn't in the library – I was searching for by name based on the wrong side of the equation! The result is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.integral_fintype_prod_eq_prod#doc\">docs#MeasureTheory.integral_fintype_prod_eq_prod</a> (added in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8030\">#8030</a> by <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> a few days before my question). </p>\n<p>I apologise to <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> – I should have posted in this thread to say that the question was answered.</p>",
        "id": 407410415,
        "sender_full_name": "David Loeffler",
        "timestamp": 1702366038
    }
]