[
    {
        "content": "<p>Does Mathlib have the Eilenberg Moore adjunction of a monad?</p>",
        "id": 386493962,
        "sender_full_name": "Dean Young",
        "timestamp": 1692662941
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/3d6112b5c7d095d3088b359c611a5a2704c5dbdc/Mathlib/CategoryTheory/Monad/Algebra.lean\">https://github.com/leanprover-community/mathlib4/blob/3d6112b5c7d095d3088b359c611a5a2704c5dbdc/Mathlib/CategoryTheory/Monad/Algebra.lean</a></p>",
        "id": 386494387,
        "sender_full_name": "Dean Young",
        "timestamp": 1692663186
    },
    {
        "content": "<p>Yes, line 186 of the file you link to!</p>",
        "id": 386495062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692663599
    },
    {
        "content": "<p>I'm trying to switch to Mathlib's adjunctions since they seem pretty good. However I was wondering if there is already programmed in a way to obtain a proof the triangle identities from the <code>Adjunction F G</code> type. Like the two sorries at the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Bicategory.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Types</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.DiscreteCategory</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Combinatorics.Quiver.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Init</span>\n<span class=\"c1\">--import Mathlib.CategoryTheory.Monad.Algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.DiscreteCategory</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Bicategory.Strict</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.ConcreteCategory.Bundled</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.Core</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Cat</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Monad.Adjunction</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Monad.Algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Monad.Monadicity</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Monad.Basic</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Bicategory.mk</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Bicategory.Strict</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Bicategory.Strict.mk</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.mk</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.CategoryStruct</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">reflexivity</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">x</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">symmetry</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">p</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">transitivity</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.trans</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">extensionality</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"n\">p</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">equal_arguments</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">f</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equal_functions</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">congrFun</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pairwise</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span><span class=\"n\">b₁</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span><span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">congr</span> <span class=\"o\">((</span><span class=\"n\">congrArg</span> <span class=\"n\">Prod.mk</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">CategoryTheory.Bicategory</span> <span class=\"n\">CategoryTheory.Cat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">CategoryTheory.Cat.bicategory</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"n\">C.α</span>\n<span class=\"k\">#check</span> <span class=\"n\">C.str</span>\n<span class=\"k\">#check</span> <span class=\"n\">C.str.Hom</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">F</span> <span class=\"s2\">\"◁\"</span> <span class=\"n\">η</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">whiskerLeft</span> <span class=\"n\">F</span> <span class=\"n\">η</span>\n<span class=\"kd\">notation</span> <span class=\"n\">η</span> <span class=\"s2\">\"▷\"</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">whiskerRight</span> <span class=\"n\">η</span> <span class=\"n\">F</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">associator</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">leftUnitor</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">rightUnitor</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">whiskerLeft_id</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">whiskerLeft_comp</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">id_whiskerLeft</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">comp_whiskerLeft</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">id_whiskerRight</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">comp_whiskerRight</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">whiskerRight_comp</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">whiskerRight_id</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">whisker_assoc</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">whisker_exchange</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">pentagon</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℂ</span><span class=\"bp\">𝕒𝕥.</span><span class=\"n\">triangle</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Φ</span>  <span class=\"o\">:</span><span class=\"n\">C</span> <span class=\"bp\">≅</span> <span class=\"n\">D</span> <span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Φ.</span><span class=\"n\">hom</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Φ.</span><span class=\"n\">inv</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Φ.</span><span class=\"n\">hom_inv_id</span>\n<span class=\"k\">#check</span> <span class=\"bp\">Φ.</span><span class=\"n\">inv_hom_id</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"s2\">\"∘\"</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">B</span> <span class=\"bp\">≫</span> <span class=\"n\">A</span>\n<span class=\"kd\">notation</span> <span class=\"n\">A</span> <span class=\"s2\">\"⭢\"</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">adjunction</span> <span class=\"n\">where</span>\n  <span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span>\n  <span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span>\n  <span class=\"n\">Fst</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"bp\">⭢</span> <span class=\"n\">Cod</span>\n  <span class=\"n\">Snd</span> <span class=\"o\">:</span> <span class=\"n\">Cod</span> <span class=\"bp\">⭢</span> <span class=\"n\">Dom</span>\n  <span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">⭢</span> <span class=\"o\">(</span><span class=\"n\">Fst</span> <span class=\"bp\">≫</span> <span class=\"n\">Snd</span><span class=\"o\">)</span>\n  <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Snd</span> <span class=\"bp\">≫</span> <span class=\"n\">Fst</span><span class=\"o\">)</span> <span class=\"bp\">⭢</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Cod</span><span class=\"o\">)</span>\n  <span class=\"n\">Id₁</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">η</span> <span class=\"bp\">▷</span> <span class=\"n\">Fst</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">Fst</span> <span class=\"bp\">◁</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Fst</span><span class=\"o\">)</span>\n  <span class=\"n\">Id₂</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Snd</span> <span class=\"bp\">◁</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">▷</span> <span class=\"n\">Snd</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Snd</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Dom</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Cod</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Fst</span> <span class=\"o\">:</span> <span class=\"n\">Dom</span> <span class=\"bp\">⭢</span> <span class=\"n\">Cod</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">Snd</span> <span class=\"o\">:</span> <span class=\"n\">Cod</span> <span class=\"bp\">⭢</span> <span class=\"n\">Dom</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unit</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">Adjunction</span> <span class=\"n\">Fst</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">⭢</span> <span class=\"o\">(</span><span class=\"n\">Fst</span> <span class=\"bp\">≫</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">counit</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">Adjunction</span> <span class=\"n\">Fst</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Snd</span> <span class=\"bp\">≫</span> <span class=\"n\">Fst</span><span class=\"o\">)</span> <span class=\"bp\">⭢</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Cod</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_triangle</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">Adjunction</span> <span class=\"n\">Fst</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">η</span> <span class=\"bp\">▷</span> <span class=\"n\">Fst</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">Fst</span> <span class=\"bp\">◁</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Fst</span><span class=\"o\">):=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">second_triangle</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">Adjunction</span> <span class=\"n\">Fst</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Snd</span> <span class=\"bp\">◁</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">▷</span> <span class=\"n\">Snd</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Snd</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 386676286,
        "sender_full_name": "Dean Young",
        "timestamp": 1692731105
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Adjunction.left_triangle#doc\">docs#CategoryTheory.Adjunction.left_triangle</a></p>",
        "id": 386676332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692731147
    },
    {
        "content": "<p>etc.</p>",
        "id": 386676353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692731155
    }
]