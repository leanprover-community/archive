[
    {
        "content": "<p>Are there lemmas to this effect? I find <code>rw</code> sometimes has trouble dealing with these expressions because it doesn't unify <code>fun n =&gt; n</code> and <code>id</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_id</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">s.prod</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_id</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 373738042,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1688919152
    },
    {
        "content": "<p>Does <code>unfold id</code> work in the place that you want this?</p>",
        "id": 373742468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688920868
    },
    {
        "content": "<p>No, because <code>∏ n in s, n</code> appears in the goal and I'm rewriting using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_val#doc\">docs#Finset.prod_val</a></p>",
        "id": 373745890,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1688922135
    },
    {
        "content": "<p>That said perhaps this is a code smell and I should just refactor this proof</p>",
        "id": 373746000,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1688922170
    },
    {
        "content": "<p>Actually it appears <code>erw</code> deals with it in this case</p>",
        "id": 373747063,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1688922506
    }
]