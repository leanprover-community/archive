[
    {
        "content": "<p>I couldn't find something like this in the library? We have <code>Set.image_iInter</code> and <code>MulAction.bijective</code> but I'm struggling to put them together...? (The below isn't even type-checking for me??) Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MulAction.image_iInter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383826049,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691730261
    },
    {
        "content": "<p><code>open scoped Pointwise</code> will help</p>",
        "id": 383840641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691735985
    },
    {
        "content": "<p>Pretty sure we have it. You guessed the name wrong, though. Let's try <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.smul_set_iInter#doc\">docs#Set.smul_set_iInter</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.smulSet_iInter#doc\">docs#Set.smulSet_iInter</a></p>",
        "id": 383862355,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691741631
    },
    {
        "content": "<p>Hmm, it's not there. But I definitely wrote that lemma, so it must be in one of my branches along with other interesting lemmas.</p>",
        "id": 383863753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691741927
    },
    {
        "content": "<p>I can open a PR in four days.</p>",
        "id": 383863997,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691741980
    },
    {
        "content": "<p>In the meantime:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Pointwise</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.smulSet_iInter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Set.image_iInter</span> <span class=\"o\">(</span><span class=\"n\">MulAction.toPerm</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 383864651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691742099
    },
    {
        "content": "<p>Interestingly we have the binary version <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.smul_set_inter#doc\">docs#Set.smul_set_inter</a></p>",
        "id": 383867979,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691742709
    },
    {
        "content": "<p>Thanks! May I ask, what does <code>open scoped Pointwise</code> do? (I've seen <code>scoped</code> before; don't know what it's for?)</p>",
        "id": 383936868,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691756181
    },
    {
        "content": "<p>It means \"run all the commands in mathlib that are <code>scoped[Pointwise] foo</code>\"</p>",
        "id": 383937970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691756395
    },
    {
        "content": "<p>Which in this particular case is with <code>foo</code> as <code>attribute [instance] someDef</code></p>",
        "id": 383938436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691756473
    },
    {
        "content": "<p>If you ever saw <code>open_locale</code> in lean 3 it's the same sort of thing. It might give you access to things like notation or instances which for some reason you don't want switched on in general. The reasons why we might not want them switched on across mathlib might be lost in the midsts of time -- for example I have absolutely no idea why we still have to open <code>BigOperators</code> before being able to access the standard sigma notation for sums.</p>",
        "id": 383943729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691757330
    },
    {
        "content": "<p>Thanks, I feel better! :)</p>",
        "id": 383948867,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691758209
    }
]