[
    {
        "content": "<p>I am relatively new to functional programming, so maybe there is a trick here I am missing, but it seems like there is no way to use monadic functions as the condition in List.takeWhile?</p>\n<p>I wrote the following function that works for me instead.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.takeWhileM</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>  <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">ys</span> <span class=\"bp\">←</span> <span class=\"n\">takeWhileM</span> <span class=\"n\">p</span> <span class=\"n\">xs</span>\n       <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>But I was wondering if there is a standard way of doing this?</p>",
        "id": 357093848,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683664319
    },
    {
        "content": "<p>It seems to not exist yet (there is <code>ListM.takeWhileM</code> for monadic lazy lists). You could PR it!</p>",
        "id": 357115961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683673223
    },
    {
        "content": "<p>You could inline the <code>let</code>.</p>",
        "id": 357116255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683673352
    },
    {
        "content": "<p>And I think for consistency with other APIs you would have <code>p : α → m (ULift Bool)</code>, so <code>m</code> can be universe polymorphic.</p>",
        "id": 357116301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683673378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Monadic.20operations.20inside.20List.2EtakeWhile/near/357115961\">said</a>:</p>\n<blockquote>\n<p>It seems to not exist yet (there is <code>ListM.takeWhileM</code> for monadic lazy lists). You could PR it!</p>\n</blockquote>\n<p>To std, or mathlib?</p>",
        "id": 357155557,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683693829
    },
    {
        "content": "<p>the std version would probably not be universe polymorphic if that means adding a ulift</p>",
        "id": 357155691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683693899
    },
    {
        "content": "<p>Does std not have access to ulift?</p>",
        "id": 357200717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683706837
    },
    {
        "content": "<p>no, it's just a more awkward interface and I think that core usually doesn't do universe parametricity unless it is zero cost</p>",
        "id": 357386868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683746799
    }
]