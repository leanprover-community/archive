[
    {
        "content": "<p>Do you have the fact that the ring of integers of a number field is a free  ‚Ñ§-module ?</p>",
        "id": 324643751,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675094245
    },
    {
        "content": "<p>I definitely use it so it should be available in some form.</p>",
        "id": 324644494,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1675094409
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/18150\">this</a> issue</p>",
        "id": 324644589,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675094436
    },
    {
        "content": "<p>The proof that is free is very easy, but now also the rank should be immediate, thank's to Anne's work.</p>",
        "id": 324644691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675094459
    },
    {
        "content": "<p>Great! Thanks</p>",
        "id": 324645186,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675094579
    },
    {
        "content": "<p>If you are going to PR something read our discussion about not restricting anything to <code>ùìû K</code>, but considering anything that satisfies <code>is_integral_closure</code>.</p>",
        "id": 324645500,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675094645
    },
    {
        "content": "<p>So I had a look at how to use <code>basis.localization_localization</code> to get a ‚Ñö-basis of <code>K</code> from a ‚Ñ§-basis of <code>ùìû K</code> and I think what is missing is the following lemma (or something similar): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_integral_closure</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">)</span>  <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_localization</span> <span class=\"n\">N</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_localization</span> <span class=\"o\">(</span><span class=\"n\">algebra.algebra_map_submonoid</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">submonoid.comap</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I could not find this lemma or anything close in mathlib. </p>\n<p>Am I right to think that this lemma is missing? Or maybe there is a simpler way to use <code>basis.localization_localization</code> that I haven't found</p>",
        "id": 324907074,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675170603
    },
    {
        "content": "<p>Let me try</p>",
        "id": 324910449,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675171508
    },
    {
        "content": "<p>You want the statement about the rank?</p>",
        "id": 324910611,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675171560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Ring.20of.20integers.20is.20a.20free.20.E2.84.A4-module/near/324910611\">said</a>:</p>\n<blockquote>\n<p>You want the statement about the rank?</p>\n</blockquote>\n<p>Yes, as you said, it is easy to get a ‚Ñ§-basis of <code>ùìû K</code> but the rank is more work</p>",
        "id": 324911051,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675171668
    },
    {
        "content": "<p>So something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">free.choose_basis_index</span> <span class=\"n\">‚Ñö</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 324911876,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675171856
    },
    {
        "content": "<p>Yes, that's what I need to prove.</p>",
        "id": 324912447,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675171991
    },
    {
        "content": "<p>I went the other way, first getting a basis of <code>ùìû K</code> and then deducing a base of <code>K</code> over the same type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module.pid</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization.module</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">number_field</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">module</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">free</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">basis</span> <span class=\"o\">:</span> <span class=\"bp\">Œ£</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">free_of_finite_type_torsion_free'</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">basis</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">free.of_basis</span> <span class=\"n\">b</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">is_localization</span> <span class=\"o\">(</span><span class=\"n\">algebra.algebra_map_submonoid</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">))</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©‚ü©,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subalgebra.algebra_map_eq</span><span class=\"o\">,</span> <span class=\"n\">is_unit_iff_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">id.map_eq_id</span><span class=\"o\">,</span>\n      <span class=\"n\">ring_hom_comp_triple.comp_eq</span><span class=\"o\">,</span> <span class=\"n\">set_like.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_to_ring_hom</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.coe_val</span><span class=\"o\">,</span>\n      <span class=\"n\">ne.def</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[(</span><span class=\"n\">subalgebra.coe_eq_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">algebra_map_submonoid</span><span class=\"o\">,</span>\n      <span class=\"n\">mem_non_zero_divisors_iff_ne_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">mzdiv</span><span class=\"o\">‚ü©,</span> <span class=\"n\">hm</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">is_integral.exists_multiple_integral_of_is_localization</span>\n      <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">is_separable.is_integral</span> <span class=\"n\">‚Ñö</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®‚ü®‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">‚ü©,</span> <span class=\"o\">‚ü®</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">mzdiv</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">‚ü©‚ü©‚ü©‚ü©,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subalgebra.algebra_map_eq</span><span class=\"o\">,</span> <span class=\"n\">submonoid.smul_def</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring.injective</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">mzdiv</span><span class=\"o\">‚ü©,</span> <span class=\"n\">hm</span><span class=\"o\">‚ü©,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hm</span> <span class=\"o\">},</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mzdiv</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">algebra_map_submonoid</span><span class=\"o\">,</span> <span class=\"n\">mem_non_zero_divisors_iff_ne_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mzdiv</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">free.choose_basis_index</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">‚Ñö</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">free.choose_basis</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">(</span><span class=\"bp\">ùìû</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">localization_localization</span> <span class=\"n\">‚Ñö</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"n\">K</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mem_non_zero_divisors_iff_ne_zero.2</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">algebra_map_submonoid</span><span class=\"o\">,</span> <span class=\"n\">mem_non_zero_divisors_iff_ne_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 324926438,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675175229
    },
    {
        "content": "<p>Note that I didn't really try to optimize the proof of <code>foo</code>, I just used the definition of <code>is_localization</code>. It's very possible that some of the fields follow by something else.</p>",
        "id": 324926634,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675175272
    },
    {
        "content": "<p>Mathematically the only nontrivial fact is that given an algebraic number <code>x</code> there is an integer <code>n</code> such that <code>n * x</code> is an algebraic integer, and this is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_integral.exists_multiple_integral_of_is_localization\">docs#is_integral.exists_multiple_integral_of_is_localization</a></p>",
        "id": 324927843,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675175497
    },
    {
        "content": "<p>Thanks! That's great, I was following the same way but I was much much slower <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<p>I need this result to prove that the lattice given by the canonical embedding of the ring of integers is a full lattice.</p>",
        "id": 324928229,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1675175598
    },
    {
        "content": "<p>It's funny because the horrible line <code>refine ‚ü®‚ü®‚ü®_, hm‚ü©, ‚ü®m, ‚ü®m, ‚ü®mzdiv, by simp‚ü©‚ü©‚ü©‚ü©, _‚ü©,</code>  is motivated by the fact that intuitively the only thing we need is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_integral.exists_multiple_integral_of_is_localization\">docs#is_integral.exists_multiple_integral_of_is_localization</a>, and then I just wrote the only thing that typechecks and uses <code>m</code>. I honestly don't know what I am doing there <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 324929643,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675175935
    }
]