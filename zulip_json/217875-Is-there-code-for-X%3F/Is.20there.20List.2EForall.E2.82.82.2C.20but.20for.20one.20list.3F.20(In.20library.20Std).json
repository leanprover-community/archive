[
    {
        "content": "<p>I'm searching in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data\">https://leanprover-community.github.io/mathlib4_docs/Std/Data</a> and can't find such definition.</p>\n<p>For now I have found only <code>List.Forall₂</code> (for two lists and binary relation) and <code>List.all</code> (for one list and function that returns Bool), and <code>List.All₂</code>...</p>",
        "id": 397548801,
        "sender_full_name": "Lessness",
        "timestamp": 1697736731
    },
    {
        "content": "<p>Of course, I can do <code>forall x, List.Mem x L -&gt; P x</code>. I just want to find out if I'm bad at search or there's no such definition actually.</p>",
        "id": 397549117,
        "sender_full_name": "Lessness",
        "timestamp": 1697736879
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.all#doc\">docs#List.all</a> in core</p>",
        "id": 397550013,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697737272
    },
    {
        "content": "<p>Yes, that's the second definition I found and mentioned. It's almost what I wanted but not exactly (<code>Bool</code> instead of <code>Prop</code>).</p>",
        "id": 397550344,
        "sender_full_name": "Lessness",
        "timestamp": 1697737418
    },
    {
        "content": "<p>I think the <code> ∀</code> version is idiomatic here, though it's possible the one you want also exists</p>",
        "id": 397550436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697737448
    },
    {
        "content": "<p>Ok, thank you both</p>",
        "id": 397550541,
        "sender_full_name": "Lessness",
        "timestamp": 1697737496
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List#doc\">docs#List</a>.All₂</p>",
        "id": 397550578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697737512
    },
    {
        "content": "<p>What a confusing pair of names</p>",
        "id": 397550592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697737519
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Defs.html#List.All%E2%82%82\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Defs.html#List.All%E2%82%82</a></p>",
        "id": 397551105,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697737712
    },
    {
        "content": "<p>Oh, right, somehow I found List.All₂ but got some brain fog and didn't understand that it is what I was searching for.</p>\n<p>Thank you.</p>",
        "id": 397551365,
        "sender_full_name": "Lessness",
        "timestamp": 1697737838
    },
    {
        "content": "<p>That's indeed a very unhelpful name, I expect most associate the subscript 2 with ”Two lists”. Worth renaming to All or Forall?</p>",
        "id": 397560404,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697741740
    },
    {
        "content": "<p>Yes, I think the previous name was dealing with a name clash that was only a problem with the lean3 naming</p>",
        "id": 397564597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697743527
    },
    {
        "content": "<p>I also wonder how useful it is to avoid the final <code>And True</code>, I expect this makes some proofs harder, because it needs more case analyses in the inductive case. Maybe I'll see what breaks if one uses the normal recursive definition.</p>",
        "id": 397571442,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697746613
    },
    {
        "content": "<p>It's pretty handy to have nice defeqs for things like this</p>",
        "id": 397576400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697749040
    },
    {
        "content": "<p>If we didn't have the defeq we could just use <code>∀</code></p>",
        "id": 397576429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697749060
    },
    {
        "content": "<p>Yes! But I'd expect the simpler function that doesn't special case the singleton list to have even <em>nicer</em> defeqs (in particular <code>All p (x :: xs) = p x /\\ All p xs</code>). But I'll first have to try to see what Chesterson has to say about that.</p>",
        "id": 397643602,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697785128
    },
    {
        "content": "<p>I just notice that <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/List/Basic.html#List.Forall%E2%82%82\"><code>List.Forall₂</code></a> isn't recursive with nice defeq either, but rather an inductive predicate. I understand that that’s useful for proofs  by induction, but I wouldn’t you get the best of all if <code>List.Forall₂</code> is defined recursively (using /\\, for nice defeqs), and an inductive principle is then proved for it?<br>\nIs it possible to register such a recursor for <code>List.Forall₂</code> after the fact, so that <code>induction h</code> still works as before?<br>\n(But probably not; that would be the “custom recusor” feature we talked about here a few days ago.)</p>",
        "id": 397646721,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697786457
    },
    {
        "content": "<p>Custom recursors via <code>induction</code> are already a feature</p>",
        "id": 397647541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697786790
    },
    {
        "content": "<p>But they won’t be picked up by <code>match</code>, will they?</p>",
        "id": 397648363,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697787128
    },
    {
        "content": "<p>Too bad, then it’s not a refactoring that’s “for free” (unless nobody uses pattern matching on <code>Forall_2</code>). <br>\n<span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> , is there already a tracking issue for “custom pattern matching” where we could collect usecases?</p>",
        "id": 397649624,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697787710
    },
    {
        "content": "<p>In my view the use-case of <code>All₂</code> is to use <code>change</code> to go from <code>p ∧ q ∧ r</code> to <code>All₂ [p, q, r]</code>, and then use a lemma to get to <code> ∀ pi ∈ [p, q, r], pi</code></p>",
        "id": 397650777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697788175
    },
    {
        "content": "<p>In the same spirit as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinVec.Forall#doc\">docs#FinVec.Forall</a></p>",
        "id": 397650875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697788206
    },
    {
        "content": "<p>Somehow this special-casing of the singleton list feels wrong to me, but if you are dealing mostly dealing with concrete finite lists, rather than arbitrary lists with induction, I see the benefit of avoiding the <code>∧  True</code> that corresponds to <code>:: []</code>.<br>\nI have <a href=\"https://github.com/leanprover-community/mathlib4/pull/7797\">https://github.com/leanprover-community/mathlib4/pull/7797</a> so far. I could back out the change to the definition and only keep the renaming.</p>",
        "id": 397655351,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697789790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20List.2EForall.E2.82.82.2C.20but.20for.20one.20list.3F.20.28In.20library.20Std.29/near/397649624\">said</a>:</p>\n<blockquote>\n<p>Too bad, then it’s not a refactoring that’s “for free” (unless nobody uses pattern matching on <code>Forall_2</code>). <br>\n<span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> , is there already a tracking issue for “custom pattern matching” where we could collect usecases?</p>\n</blockquote>\n<p>We don't yet have one - do you want to make it or should I?</p>",
        "id": 397656254,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1697790074
    },
    {
        "content": "<p>Started one at <a href=\"https://github.com/leanprover/lean4/issues/2716\">https://github.com/leanprover/lean4/issues/2716</a>, feel free to expand, I sense you might have some concrete surface syntax suggestions.</p>",
        "id": 397661103,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1697791522
    }
]