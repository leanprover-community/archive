[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113488-general/topic/Paid.20studies.20to.20formalize.20math.20problems.20in.20Lean/near/370556548\">said</a>:</p>\n<blockquote>\n<p>I spent the next forty minutes trying to prove that sin x = 1 if and only if x is of the form <code>pi/2 + 2pi k</code> for integer <code>k</code> as a lemma to another question, but after seeing that I wasn't close to this and there were other things I needed, I gave up on this one too.</p>\n</blockquote>\n<p>Now that I can ask about this without cheating, is this in mathlib somewhere? What would've been the quick way to prove this in under an hour?</p>",
        "id": 370558268,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687981753
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sin_eq_sin_iff\">docs3#real.sin_eq_sin_iff</a> I guess</p>",
        "id": 370558880,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687981895
    },
    {
        "content": "<p>The following is not a particularly clever solution, but it shows how to get there by following your nose:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sin</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"n\">Real.sin</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">Real.sin</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Real.sin</span> <span class=\"o\">(</span><span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sin_pi_div_two</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sin_eq_sin_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">constructor</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk₁</span> <span class=\"bp\">|</span> <span class=\"n\">hk₂</span><span class=\"o\">⟩</span>\n          <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"bp\">-</span> <span class=\"n\">k</span>\n            <span class=\"n\">push_cast</span>\n            <span class=\"n\">linarith</span>\n          <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"n\">k</span>\n            <span class=\"n\">push_cast</span>\n            <span class=\"n\">linarith</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span>\n          <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">k</span>\n          <span class=\"n\">left</span>\n          <span class=\"n\">push_cast</span>\n          <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 370563759,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687983065
    },
    {
        "content": "<p>A cleverer approach is to relate to cosine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sin</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Real.cos_sub_pi_div_two</span><span class=\"o\">,</span> <span class=\"n\">Real.cos_eq_one_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">k</span> <span class=\"c1\">-- `congrm` not ported yet</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 370565096,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687983432
    },
    {
        "content": "<p>I think results such as <code>sin_eq_one_iff</code>, <code>cos_eq_zero_iff</code>, <code>sin_eq_neg_one_iff</code>, <code>cos_eq_neg_one_iff</code> would clearly be appropriate for mathlib. Indeed, there are probably an enormous number of fairly basic and more or less standard facts about trigonometric functions, such as may be found on DLMF or Wikipedia, that would be appropriate for mathlib, are accessible to undergraduates (see other discussion about the presence or lack of such projects), but aren't in mathlib yet. (When you get onto hyperbolic functions, which should have many corresponding lemmas, there's even less in mathlib; we don't even have the <em>definitions</em> of arcosh or artanh, only arsinh, for example.)</p>",
        "id": 370598169,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1687995488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/pi.2F2.20.2B.202pi.20k/near/370565096\">said</a>:</p>\n<blockquote>\n<p>A cleverer approach is to relate to cosine:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Real.sin</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">Real.pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Real.cos_sub_pi_div_two</span><span class=\"o\">,</span> <span class=\"n\">Real.cos_eq_one_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">congr</span><span class=\"bp\">!</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"n\">k</span> <span class=\"c1\">-- `congrm` not ported yet</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I wanted to see whether <code>rw?</code> could generate the beginning of this proof.  It didn't find the first one -- it seems like you don't search for possible backward rewrites?  Given the first one, it did find the second (ranked third on the list of proposals).</p>",
        "id": 370622519,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1688010505
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :-)</p>",
        "id": 370647415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688018884
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Trigonometric.Complex</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Rewrites</span>\n</code></pre></div>",
        "id": 370655733,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1688021172
    },
    {
        "content": "<p>Ah, so the problem here is just that <code>rw?</code> currently reports at most 20 results, and while it does do backwards rewrites, it penalizes them in the order scheme I used.</p>",
        "id": 370657463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688021623
    },
    {
        "content": "<p>I'm recompiling weighting forward and backward rewrites equally, to see if we get something better.</p>",
        "id": 370657530,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688021639
    },
    {
        "content": "<p>If at some point <a href=\"https://github.com/leanprover-community/mathlib4/pull/3973\">#3973</a> gets some interest I will write <code>rewrite_search</code> in Lean 4, now that it is possible to make it fast(er). :-)</p>",
        "id": 370657757,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688021686
    },
    {
        "content": "<p>Is there a prioritization scheme which is capable of observing that lemmas about sine are more likely to be relevant than lemmas about rings?</p>",
        "id": 370658124,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1688021786
    },
    {
        "content": "<p>This is why we desperately need a good premise selection engine for Lean. :-(</p>",
        "id": 370658235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688021819
    },
    {
        "content": "<p>Jasmin had a student working on premise selection, let me see if there is anything I can share...</p>",
        "id": 370696437,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1688030142
    },
    {
        "content": "<p>Great, thank you.</p>",
        "id": 370697340,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688030336
    },
    {
        "content": "<p>I think the \"requirements\" are something like:</p>\n<ul>\n<li>a function that is essentially <code>Expr → List Name</code>, proposing \"relevant\" lemma names for a goal.</li>\n<li>a downloadable database (presumably &lt;1gb?, and less would be nice?) (but we could survive with a call to a server?)</li>\n<li>that we can arrange for mathlib CI to regenerate on some timetable</li>\n<li>optionally, you can tell it whether you are planning on rewriting and/or applying these lemmas, but one big bucket is fine.</li>\n<li>optionally that provides whatever extra detail, e.g. <code>List (Name × Float)</code> if it wants to expose details of its ranking</li>\n</ul>\n<p>A really bad implementation would still be a wonderful contribution, by giving us something to iterate on, and establishing this as a reliably available \"component\" in the mathlib world.</p>",
        "id": 370700143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688030884
    },
    {
        "content": "<p>In particular, I want something that <em>doesn't</em> try to do more than provide a <code>List Name</code> (i.e. is unopinionated about whether you are throwing these into <code>solve_by_elim</code>, or a search routine, or putting them into the context of an LLM, etc).</p>",
        "id": 370700573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688030979
    },
    {
        "content": "<p>The thesis will be officially made available on <a href=\"https://lean-forward.github.io/\">https://lean-forward.github.io/</a> some point in the future. For now, here's the PDF: <br>\n<a href=\"/user_uploads/3121/dpzNHfZIP9NqGie6L5WOruCp/Thesis-Alistair-Geesing.pdf\">Thesis-Alistair-Geesing.pdf</a> and GitHub link for the code: <a href=\"https://github.com/aalistairr/ps-lean\">https://github.com/aalistairr/ps-lean</a></p>",
        "id": 370728002,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1688035711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, when <code>rw?</code> is run with no limits on the number of results, it does find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Real.cos_sub_pi_div_two</span><span class=\"o\">]</span>\n<span class=\"c1\">-- Real.cos (x - Real.pi / 2) = 1 ↔ ∃ k, x = 2 * Real.pi * ↑k + Real.pi / 2</span>\n</code></pre></div>\n<p>but currently this is about number 265 in the list... Obviously not very useful.</p>",
        "id": 370976982,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688093198
    }
]