[
    {
        "content": "<p>Is there any direct method to get the denominator and numerator from a rational number? For example, how to solve the tactic state </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">m.num</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">```?</span>\n</code></pre></div>",
        "id": 383687148,
        "sender_full_name": "Huajian Xin",
        "timestamp": 1691684556
    },
    {
        "content": "<p>You don't get this completely for free because somewhere you'll need that 1/4 is in lowest terms. For example m is also 2/8 but the numerator isn't 2.</p>\n<p>I would try <code>subst h</code> and then either <code>rfl</code> or <code>norm_num</code> or <code>simp</code>.</p>",
        "id": 383688894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691684879
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">773</span> <span class=\"bp\">/</span> <span class=\"mi\">28601</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">q.den</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 383691789,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1691685418
    },
    {
        "content": "<p>Thanks! But it seems that the rat defined in Lean 3 mathlib forces the denominator and numerator should be coprime, and these tactic seems fail. <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 383795459,
        "sender_full_name": "Huajian Xin",
        "timestamp": 1691716987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/get.20the.20denominator.20and.20numerator.20from.20a.20rational.20number/near/383688894\">said</a>:</p>\n<blockquote>\n<p>You don't get this completely for free because somewhere you'll need that 1/4 is in lowest terms. For example m is also 2/8 but the numerator isn't 2.</p>\n<p>I would try <code>subst h</code> and then either <code>rfl</code> or <code>norm_num</code> or <code>simp</code>.</p>\n</blockquote>",
        "id": 383795499,
        "sender_full_name": "Huajian Xin",
        "timestamp": 1691717009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/get.20the.20denominator.20and.20numerator.20from.20a.20rational.20number/near/383691789\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">773</span> <span class=\"bp\">/</span> <span class=\"mi\">28601</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">q.den</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! I apology for my unclear that I'm using Lean 3, and could you please provide a Lean 3 code? I seems that rfl in Lean 3 cannot fix this.</p>",
        "id": 383795684,
        "sender_full_name": "Huajian Xin",
        "timestamp": 1691717102
    },
    {
        "content": "<p>Is there something blocking you from upgrading to Lean 4? We're hoping everyone is able to switch soon! :-)</p>",
        "id": 383821630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691728030
    }
]