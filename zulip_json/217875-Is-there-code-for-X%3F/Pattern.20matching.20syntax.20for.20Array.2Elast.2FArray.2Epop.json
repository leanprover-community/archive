[
    {
        "content": "<p>I just changed some very elegant code using lists (with pattern matching) to implement a stack to slightly less elegant code using Arrays (with <code>Array.last</code>, <code>Array.pop</code>). I would be less sad if I could still use pattern matching syntax, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">a</span>  <span class=\"bp\">→</span> <span class=\"bp\">…</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">…</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">as...</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>Could that be made to work somehow? I noticed that empty and fixed-length arrays already work in patterns.</p>",
        "id": 395821515,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696922272
    },
    {
        "content": "<p>And maybe related: How does <code>#[]</code> in patterns even work? I see </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"#[\"</span> <span class=\"n\">withoutPosition</span><span class=\"o\">(</span><span class=\"n\">sepBy</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"s2\">\", \"</span><span class=\"o\">))</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">elems</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">elems</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">])</span>\n</code></pre></div>\n<p>and I understand how that works in terms, but for this to work in patterns it seems that lean has to support the function call<code>List.toArray [ x ]</code> in a pattern position…</p>\n<p>Ah, maybe its related to the <code>match_pattern</code> attribute at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"o\">,</span> <span class=\"n\">match_pattern</span><span class=\"o\">,</span> <span class=\"n\">export</span> <span class=\"n\">lean_list_to_array</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>where the docs say</p>\n<blockquote>\n<p>When identifiers are marked with the <code>[match_pattern]</code> attribute, the equation compiler unfolds them in the hopes of exposing a constructor. For example, this makes it possible to write <code>n+1</code> and <code>0</code> instead of <code>Nat.succ n</code> and <code>Nat.zero</code> in patterns.</p>\n</blockquote>\n<p>Hmm, but this attribute probably cannot be used to implement the “view patterns” I would like to see. Too bad.</p>",
        "id": 395824843,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696923741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Pattern.20matching.20syntax.20for.20Array.2Elast.2FArray.2Epop/near/395824843\">said</a>:</p>\n<blockquote>\n<p>And maybe related: How does <code>#[]</code> in patterns even work?</p>\n</blockquote>\n<p>A <a href=\"https://github.com/leanprover/lean4/blob/ca0e6b0522e2948e8d819886be1e8fc106354947/src/Lean/Meta/Match/Basic.lean#L32\">dirty hack</a></p>",
        "id": 395826708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696924477
    },
    {
        "content": "<p>If <code>#[...]</code> was syntax for <code>Array.mk [...]</code> instead of <code>List.toArray [...]</code> the hack wouldn't even be necessary</p>",
        "id": 395826867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696924540
    },
    {
        "content": "<p>this also messes up exhaustiveness checking:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"n\">pattern</span> <span class=\"n\">matching</span><span class=\"o\">,</span> <span class=\"n\">stuck</span> <span class=\"n\">at</span>\n  <span class=\"n\">remaining</span> <span class=\"kd\">variables</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)]</span>\n  <span class=\"n\">alternatives</span><span class=\"o\">:</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">|-</span> <span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"o\">[]]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_1</span> <span class=\"o\">()</span>\n    <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">:(</span><span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">as</span><span class=\"o\">:(</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)]</span> <span class=\"bp\">|-</span> <span class=\"o\">[(</span><span class=\"n\">Array.mk</span> <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">))]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_2</span> <span class=\"n\">a</span> <span class=\"n\">as</span>\n  <span class=\"n\">examples</span><span class=\"o\">:</span><span class=\"n\">_</span>\n</code></pre></div>",
        "id": 395827087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696924618
    }
]