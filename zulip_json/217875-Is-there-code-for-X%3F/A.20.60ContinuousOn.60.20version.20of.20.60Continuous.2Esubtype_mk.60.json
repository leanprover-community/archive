[
    {
        "content": "<p>I'm looking for a result that's something like</p>\n<p><code>theorem ContinuousOn.subtype_mk (h : ContinuousOn f s) (hp : ∀ x, p (f x)) : ContinuousOn (fun x =&gt; (⟨f x, hp x⟩ : Subtype p)) s</code></p>\n<p>Is there anything like this already?</p>",
        "id": 379830822,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690644363
    },
    {
        "content": "<p>Or possibly something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ContinuousOn.subtype_mk</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">ContinuousOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hp</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 379837279,
        "sender_full_name": "Michael Lee",
        "timestamp": 1690645962
    },
    {
        "content": "<p>I don't <em>think</em> we have it, but you should be able to prove it using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousOn.restrict#doc\">docs#ContinuousOn.restrict</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=continuous_induced_rng#doc\">docs#continuous_induced_rng</a></p>",
        "id": 379841904,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690647089
    }
]