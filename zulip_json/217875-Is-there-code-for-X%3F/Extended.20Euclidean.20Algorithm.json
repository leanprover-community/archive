[
    {
        "content": "<p>Do we have the extended Euclidean algorithm somewhere?</p>",
        "id": 389475008,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694017919
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.xgcd\">docs3#int.xgcd</a></p>",
        "id": 389476982,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694018427
    },
    {
        "content": "<p>ok it's nat.xgcd</p>",
        "id": 389477033,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694018440
    },
    {
        "content": "<p>let's see if it survived lean4 renaming</p>",
        "id": 389477062,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694018447
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.xgcd#doc\">docs#Nat.xgcd</a></p>",
        "id": 389477125,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694018460
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 389477363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694018522
    },
    {
        "content": "<p>Isn't there an xgcd for rings with given euclidean division? And it is strange that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.xgcd#doc\">docs#Int.xgcd</a> resorts to the Nat version after taking absolute values.</p>",
        "id": 389708014,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1694105106
    },
    {
        "content": "<p>I think it would be fun to implement the Smith normal form algorithm and deduce<code>xgcd</code> as a particular case.</p>",
        "id": 389708540,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694105235
    },
    {
        "content": "<p>But I don't think we have any of that.</p>",
        "id": 389708639,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694105257
    },
    {
        "content": "<p>Although if we end up having that I'm going to get very sad that polynomials are noncomputable...</p>",
        "id": 389709945,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694105614
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6666\">#6666</a></p>",
        "id": 389711580,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694106056
    },
    {
        "content": "<p>Oh I didn't know about that. There's still no concrete algorithm right? By the way, everything about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.SmithNormalForm#doc\">docs#Basis.SmithNormalForm</a> could be generalized to any linear map between free modules instead of the inclusion from a submodule, right?</p>",
        "id": 389714087,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694106732
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, who wrote the new lemmas. Anne wrote the original code, but I don't want to ping them mid-PhD writing!</p>",
        "id": 389717424,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694107819
    }
]