[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Pi</span>\n\n<span class=\"kd\">def</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">unitsEquiv</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span> <span class=\"o\">(</span><span class=\"n\">f.1</span><span class=\"o\">),</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">one_apply</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span> <span class=\"o\">((</span><span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">one_apply</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">inv_apply</span><span class=\"o\">,</span> <span class=\"n\">Units.mul_inv</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">one_def</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">inv_apply</span><span class=\"o\">,</span> <span class=\"n\">Units.inv_mul</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">one_def</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.inv_eq_val_inv</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.inv_eq_val_inv</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Units.val_mul</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mul_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I am right in saying we don't have this, right? Any reason we couldn't?</p>",
        "id": 406768452,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702045102
    },
    {
        "content": "<p>Golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">unitsEquiv</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">f.mul_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">f.inv_mul</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mul_inv</span><span class=\"o\">),</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">inv_mul</span><span class=\"o\">)⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Units.ext</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Units.ext</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 406770167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702045658
    },
    {
        "content": "<p>That's a neat statement! I would call it <code>MulEquiv.unitsPi</code>, however.</p>",
        "id": 406770501,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702045770
    },
    {
        "content": "<p>We should have the <code>Prod</code> version too</p>",
        "id": 406770551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702045792
    },
    {
        "content": "<p>Thanks Eric. By the Prod version, what do you mean?</p>",
        "id": 406770725,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702045835
    },
    {
        "content": "<p><code>(α × β)ˣ ≃* αˣ × βˣ</code></p>",
        "id": 406770895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702045889
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs\">#docs</a> MulEquiv.prodUnits</p>",
        "id": 406771093,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702045955
    },
    {
        "content": "<p>Err, I can't remember how to do that right. But we have it!</p>",
        "id": 406771126,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702045969
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv.prodUnits#doc\">docs#MulEquiv.prodUnits</a></p>",
        "id": 406771179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702045989
    },
    {
        "content": "<p>Damn, I guessed the name right <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 406771222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702046005
    },
    {
        "content": "<p>should probably be MulEquiv.piUnits or MulEquiv.arrowUnits (I think the former?)</p>",
        "id": 406771277,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702046026
    },
    {
        "content": "<p>Ah no, not quite. I swapped <code>Pi</code> and <code>Units</code>.</p>",
        "id": 406771279,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702046027
    },
    {
        "content": "<p>Also, you should prove the dependent type version.</p>",
        "id": 406771377,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702046053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Pi.2EunitEquiv/near/406771179\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulEquiv.prodUnits#doc\">docs#MulEquiv.prodUnits</a></p>\n</blockquote>\n<p>I'll stop trying to prove it then!</p>",
        "id": 406771464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702046080
    },
    {
        "content": "<p>There will be a dependent-Pi and dependent-Sigma version, presumably.</p>",
        "id": 406771520,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702046101
    },
    {
        "content": "<p>What's a disjoint sum of monoids? <span aria-label=\"monocle\" class=\"emoji emoji-1f9d0\" role=\"img\" title=\"monocle\">:monocle:</span></p>",
        "id": 406771603,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702046124
    },
    {
        "content": "<p>I don't know, some nonsense.</p>",
        "id": 406771650,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702046142
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">MulEquiv.piUnits</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">f.val</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f.inv</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">f.mul_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">f.inv_mul</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">f</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">mul_inv</span><span class=\"o\">),</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">·</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">inv_mul</span><span class=\"o\">)⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Units.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Units.ext</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Units.ext</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 406771763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702046169
    },
    {
        "content": "<p>I would imagine it also works if you are pulling <code>α</code> though an Equiv.</p>",
        "id": 406772186,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702046308
    },
    {
        "content": "<p>That's a different equiv though</p>",
        "id": 406772493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702046413
    },
    {
        "content": "<p>Right, yes.</p>",
        "id": 406772554,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702046431
    },
    {
        "content": "<p>Which is to say, it's easy to build by composing with the one above</p>",
        "id": 406772558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702046432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Pi.2EunitEquiv/near/406771603\">said</a>:</p>\n<blockquote>\n<p>What's a disjoint sum of monoids? <span aria-label=\"monocle\" class=\"emoji emoji-1f9d0\" role=\"img\" title=\"monocle\">:monocle:</span></p>\n</blockquote>\n<p>Do you mean the coproduct? That exists, but the functor sending a monoid to its unit group is a right adjoint so it preserves limits, not colimits (which coproducts are).</p>",
        "id": 406778426,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702048245
    },
    {
        "content": "<p>What's the corresponding left adjoint?</p>",
        "id": 406778542,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1702048286
    },
    {
        "content": "<p>The forgetful functor</p>",
        "id": 406778567,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702048295
    },
    {
        "content": "<p>If G is a group and M is a monoid then the Homs from G to M are the same as the Homs from G to the units of M</p>",
        "id": 406778643,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702048319
    },
    {
        "content": "<p>It might still be true that units of coproduct is coproduct of units. What's definitely not true is that units of quotient (another colimit) is quotient of units, as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mi mathvariant=\"double-struck\">Z</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\Z/N\\Z)^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> is generally bigger than the image of the units of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>.</p>",
        "id": 406810340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702057795
    },
    {
        "content": "<p>You're right, it might be true, but if so, it would be \"by accident\".</p>",
        "id": 406816186,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702060040
    },
    {
        "content": "<p>In any case, do we even have the free product of two (or more) monoids in mathlib?</p>",
        "id": 406816281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702060083
    },
    {
        "content": "<p>I guess we do <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.CoprodI#doc\">docs#Monoid.CoprodI</a></p>",
        "id": 406816723,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702060271
    },
    {
        "content": "<p>I have this picture in my head. It goes like this. I have a collection of monoids M_i for i in some index set I, then an element of their coproduct is just represented by a list of elements in these monoids with the property that two adjacent elements of the list can't come from the same M_i and none of them are 1 (you identify all the 1s into one term, the empty list). You multiply these things together in the obvious way (remove 1s and merge two terms in the same M_i). With this model, units of coproduct = coproduct of units just feels completely obvious; the map from the coproduct of the units into the (units of the) coproduct is obviously injective because it's the same picture, and is obviously surjective onto the units because if you've got an list of monoid elements and you times it by another list of monoid elements and the product becomes the empty list then just look at what happened, it's obvious everything in sight was a unit because there's nowhere else to go but 1 so you inverted it. In a lecture I might be tempted to write down the model and then claim that the result was an \"easy exercise\" and say no more about it. But Adam points out that this isn't a freebie via some category theory magic wand, and looking at the above proof it would I imagine be quite a challenge to formalise.</p>",
        "id": 406818923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702061173
    },
    {
        "content": "<p>Aw crap I bet I'm assuming commutativity ;-) Sorry, that's my world :-/ OK I'm only claiming the above for commutative monoids, I'm not sure I understand units properly in the non-commutative case, I can have xy=1 without yx=1 in that case :-/</p>",
        "id": 406820565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702061896
    }
]