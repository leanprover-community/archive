[
    {
        "content": "<p>I'm working on dealing with the TODO in <a href=\"https://leanprover-community.github.io/mathlib_docs/number_theory/sum_two_squares.html#top\">number_theory.sum_two_squares</a>. I'm basically done, but it is not clear to me what is the best way to state the condition \"the exponent of <code>p</code> in the prime factorization of <code>n</code> is even\". More precisely, how to express \"the exponent of <code>p</code> in the prime factorization of <code>n</code>\". There are (at least) three possibilities (this is lean3+mathlib):</p>\n<ol>\n<li><code>multiplicity p n</code></li>\n<li><code>padic_val_nat p n</code></li>\n<li><code>n.factorization p</code></li>\n</ol>\n<p>The first takes values in <code>part_enat</code>, which makes it a bit fiddly to work with -- here is a challenge: prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The second is a wrapper around <code>multiplicity p n</code> that replaces <code>⊤</code> by zero. <code>n.factorization</code> is of type <code>ℕ →₀ ℕ</code> and is defined in terms of <code>padic_val_nat p n</code>. All of them have some API.</p>\n<p>So, based on these observations, it appears to me that <code>padic_val_nat</code> is the canonical choice, but I would like to have some input on that.</p>",
        "id": 359896021,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684590139
    },
    {
        "content": "<p>I've always worked on the hypothesis that <code>padic_val_nat</code> should be the one which should be developed, and similarly I think there's <code>padic_val_int</code> and <code>padic_val_rat</code> which I would be happy to argue were the canonical spellings.</p>",
        "id": 359897175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684590456
    },
    {
        "content": "<p>This is only for additive valuations though, for multiplicative valuations hopefully there's something else.</p>",
        "id": 359897356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684590506
    },
    {
        "content": "<p>I have a version of the final theorem that avoids valuations altogether:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.eq_sq_add_sq_iff_eq_sq_mul</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">is_square</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>But the more standard way of stating it should of course be there.<br>\nIn any case, thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> for your input!</p>",
        "id": 359898820,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684590988
    },
    {
        "content": "<p>There is some API missing around <code>squarefree</code> and <code>padic_val_nat</code>. There is, e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.squarefree.factorization_le_one\">docs#nat.squarefree.factorization_le_one</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicity.squarefree_iff_multiplicity_le_one\">docs#multiplicity.squarefree_iff_multiplicity_le_one</a>, but apparently nothing relating to <code>padic_val_nat</code>(neither \"squarefree padic\" nor \"padic squarefree\" in the search window turns up anything).</p>",
        "id": 359935125,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684604365
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19054\">#19054</a> is the PR that adds the characterization which natural numbers are sums of two squares.</p>",
        "id": 359951618,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1684612711
    }
]