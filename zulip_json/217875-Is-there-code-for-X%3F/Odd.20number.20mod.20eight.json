[
    {
        "content": "<p>Hi all,</p>\n<p>I've struggled with trying to prove this theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"n\">a.nat_abs</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">∨</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any thoughts on how to proceed with proving this in Lean?</p>",
        "id": 340424511,
        "sender_full_name": "Will Midwood",
        "timestamp": 1678296930
    },
    {
        "content": "<p>Take <code>a = 7</code>.</p>",
        "id": 340425575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678297184
    },
    {
        "content": "<p>Hm it seems I formulated this theorem wrong. It should be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 340427305,
        "sender_full_name": "Will Midwood",
        "timestamp": 1678297597
    },
    {
        "content": "<p><code>a % 8</code> is never <code>-1</code>.</p>",
        "id": 340427913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678297767
    },
    {
        "content": "<p>Is it not equivalent to <code>a ≡ -1 [ZMOD 8]</code>?</p>",
        "id": 340428098,
        "sender_full_name": "Will Midwood",
        "timestamp": 1678297819
    },
    {
        "content": "<p>no, <code>a % 8</code> is the remainder left when <code>a</code> is divided by <code>8</code>, so it's an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mn>7</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1,\\ldots,7\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">7</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 340428250,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678297865
    },
    {
        "content": "<p>just change -1 to 7</p>",
        "id": 340428302,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678297882
    },
    {
        "content": "<p>Ah right so for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 340428377,
        "sender_full_name": "Will Midwood",
        "timestamp": 1678297902
    },
    {
        "content": "<p>you could start by rewriting using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.div_add_mod\">docs#int.div_add_mod</a></p>",
        "id": 340429570,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678298278
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#slim_check\">tactic#slim_check</a> (<a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/slim_check.html#tactic.interactive.slim_check\">https://leanprover-community.github.io/mathlib_docs/tactic/slim_check.html#tactic.interactive.slim_check</a>) is helpful for checking if statements like this are true (I didn't try this example but I don't see why it shouldn't work)</p>",
        "id": 340430454,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678298537
    },
    {
        "content": "<p>the <code>odd</code> assumption is an issue for slim_check it seems</p>",
        "id": 340430644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678298590
    },
    {
        "content": "<p>Maybe we need a decidable_pred instance for odd? Which should just be derivable by unfolding the definition?</p>",
        "id": 340431037,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678298697
    },
    {
        "content": "<p>yeah I think that's right</p>",
        "id": 340431101,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678298712
    },
    {
        "content": "<p>Maybe odd has been generalized to semirings or something so maybe it's not so simple, but we should have it for Z.</p>",
        "id": 340431360,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678298788
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/odd\">docs#odd</a></p>",
        "id": 340431472,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678298832
    },
    {
        "content": "<p>Here's a lazy proof, where I check all the cases in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>8</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/8\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/8</span><span class=\"mord mathbb\">Z</span></span></span></span> and then lift:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"c1\">-- first work in ℤ/8ℤ</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_zmod_eight</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"c1\">-- stupid \"check all the cases\" proof</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">.</span>\n\n<span class=\"c1\">-- now lift to ZMOD 8 (an equivalence relation on ℤ)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_ZMOD_eight</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"mi\">3</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"mi\">5</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≡</span>  <span class=\"mi\">7</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">zmod.int_coe_eq_int_coe_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">odd_zmod_eight</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- now to ℤ and %</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_mod_eight</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"n\">odd_ZMOD_eight</span> <span class=\"n\">n</span> <span class=\"c1\">-- definitional abuse</span>\n\n<span class=\"c1\">-- now do the problem using just logic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">odd_mod_eight</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340433568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678299451
    },
    {
        "content": "<p>You can tell I've done far too many of these with undergrads ;-)</p>",
        "id": 340434399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678299713
    },
    {
        "content": "<p>I have written some tactic support for this kind of thing, but it's not all in mathlib.  See<br>\n<a href=\"https://hrmacbeth.github.io/math2001/04_Proofs_with_Structure_II.html#id29\">https://hrmacbeth.github.io/math2001/04_Proofs_with_Structure_II.html#id29</a></p>",
        "id": 340437152,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678300477
    },
    {
        "content": "<p>You can also tell that Heather has done far too many of these things with undergrads, but is also good at tactic writing as opposed to my dirty hackery :-)</p>",
        "id": 340437381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678300555
    },
    {
        "content": "<p>I managed to complete the proof by splitting it into 4 cases,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">a</span><span class=\"o\">):</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_or_distrib</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">hn₁</span> <span class=\"n\">hn₂</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hem</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">8</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat.mod_eq_zero_of_dvd</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hl</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hl</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hm</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hm</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hn₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hem</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.odd_iff_not_even</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hm</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hem</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.odd_iff_not_even</span> <span class=\"n\">at</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hl</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hm</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hm</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hem</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.odd_iff_not_even</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hm</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hn₂</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hem</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 340441338,
        "sender_full_name": "Will Midwood",
        "timestamp": 1678301807
    },
    {
        "content": "<p>Lots of sections of this proof is reusing code from earlier bits of the proof repeated, but I'm not sure how to reduce the redundancies here.</p>",
        "id": 340442256,
        "sender_full_name": "Will Midwood",
        "timestamp": 1678302083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Odd.20number.20mod.20eight/near/340437152\">said</a>:</p>\n<blockquote>\n<p>I have written some tactic support for this kind of thing, but it's not all in mathlib.  See<br>\n<a href=\"https://hrmacbeth.github.io/math2001/04_Proofs_with_Structure_II.html#id29\">https://hrmacbeth.github.io/math2001/04_Proofs_with_Structure_II.html#id29</a></p>\n</blockquote>\n<p>Can you say a little more sometime about what you've done, sounds very interesting! I guess it's lean 4?  But its a little hard to tell what they do from reading that page.</p>",
        "id": 340444674,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678302860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"545295\">@Will Midwood</span> one thing you might want to avoid is just leaping into a proof and writing one long begin/end block. If you find something which can be split off as a sublemma, split it off! See how I wrote four short proofs instead of one long one?</p>",
        "id": 340453877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678305778
    },
    {
        "content": "<p>Also you should structure your proofs more, by adding <code>{}</code>s when you have more than one goal. Right now it's really hard to read your proof because I can't see where one argument is ending and another one beginning.</p>",
        "id": 340454395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678305925
    },
    {
        "content": "<p>On the other hand, are you just a lean beginner? It's great that you've got this question out at all if you are!</p>",
        "id": 340454999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678306100
    },
    {
        "content": "<p>Thanks for the advice Kevin, I'm not sure I would quite call myself a beginner, I've been using Lean for my undergraduate dissertation since November. I'm in the last stages now and I'm going to go through my code to try make it a bit more readable as per your suggestion.</p>",
        "id": 340460047,
        "sender_full_name": "Will Midwood",
        "timestamp": 1678307951
    },
    {
        "content": "<p>Ok then it's a bit less surprising that you got the question out (still cool though) but whoever is supervising you should be telling you to write more structured code :-)</p>",
        "id": 340460363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678308084
    },
    {
        "content": "<p>Do you understand my proof?</p>",
        "id": 340460430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678308115
    },
    {
        "content": "<p>I understand the idea of it, some tactics however I'm not too familiar with such as <code>fin_cases</code>, <code>push_cast</code> or <code>tauto!</code></p>",
        "id": 340460696,
        "sender_full_name": "Will Midwood",
        "timestamp": 1678308202
    },
    {
        "content": "<p>You can just hover over the tactics you're not sure of in VS Code and you'll be able to see the docstrings.</p>",
        "id": 340461021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678308334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Odd.20number.20mod.20eight/near/340444674\">said</a>:</p>\n<blockquote>\n<p>Can you say a little more sometime about what you've done, sounds very interesting! I guess it's lean 4?  But its a little hard to tell what they do from reading that page.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> That's true.  To explain the nonstandard tactics: They are all finishing tactics designed to fill in single steps in <code>calc</code> proofs.</p>\n<ul>\n<li><code>numbers</code> is a renaming of <code>norm_num1</code></li>\n<li><code>extra</code> proves a relation <code>X + Y ~ X</code> if <code>Y</code> is a \"neutral\" quantity for that relation, eg <ul>\n<li>when <code>~</code> is \"greater than\" and <code>Y</code> is something which <code>positivity</code> can prove positive</li>\n<li>when <code>~</code> is \"congruent mod <code>n</code>\" and <code>Y</code> is manifestly zero mod n</li>\n</ul>\n</li>\n<li><code>rel [h]</code> proves a relation <code>f X ~ f Y</code> by \"substituting\" a hypothesis <code>h : X ~ Y</code>, if the function <code>f</code> is well-behaved under the relation, eg<ul>\n<li>when <code>~</code> is \"greater than\" it works if <code>f</code> is built out of additions, subtractions of constants, multiplications by <code>positivity</code>-satisfying constants, and (when <code>Y</code> is <code>positivity</code>-satisfying) exponentiations</li>\n<li>when <code>~</code> is \"congruent mod <code>n</code>\" it works if <code>f</code> is built out of additions, subtractions, multiplications, exponentiations</li>\n</ul>\n</li>\n</ul>\n<p>The relatively surprising part is that this grammar is flexible enough (together with <code>ring</code>) to cover a full course of elementary mathematics.</p>",
        "id": 340474822,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678313678
    },
    {
        "content": "<p>So here is \"Show that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n^2+n+1\\equiv 1\\mod 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≡</mo><mn>0</mn><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n\\equiv 0\\mod 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4637em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≡</mo><mn>2</mn><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n\\equiv 2\\mod 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4637em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span></span></span></span>\" in that language.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">3</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mod_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- case 1: `n ≡ 0 [ZMOD 3]`</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- case 2: `n ≡ 1 [ZMOD 3]`</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">extra</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">numbers</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≡</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rel</span> <span class=\"o\">[</span><span class=\"n\">h.symm</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span>\n    <span class=\"n\">numbers</span> <span class=\"n\">at</span> <span class=\"n\">H</span> <span class=\"c1\">-- contradiction!</span>\n  <span class=\"bp\">·</span> <span class=\"c1\">-- case 3: `n ≡ 2 [ZMOD 3]`</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 340474965,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678313754
    },
    {
        "content": "<p>I should say that everything is simply a layer of configuration-setting (no backtracking, custom dischargers, attributes with curated lemma sets) on top of <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s Lean 4 <code>solve_by_elim</code>.</p>",
        "id": 340475865,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678314149
    },
    {
        "content": "<p>Probably we should get some of these into mathlib4.  Different names presumably, and perhaps docs that explain in detail how they are built out of the \"core\" tactics, so others can use them as models for other specialised tactics.</p>",
        "id": 340476350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678314392
    },
    {
        "content": "<p>I'm impressed by <code>rel</code> being able to \"work out\" the function <code>f</code> without being told explicitly. That's cool.</p>",
        "id": 340476409,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678314427
    },
    {
        "content": "<p>Yes, I've been surprised by how robust it is.  I have (of course) had to answer tons of student questions about the various quirks of Lean syntax and behaviour, and only <em>once</em> has it been \"I thought <code>rel</code> should work here, why doesn't it?\"</p>",
        "id": 340476688,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678314589
    },
    {
        "content": "<p>(Actually, caveat: fairly often there is a question \"I thought <code>rel</code> should work here, why doesn't it?\" and the answer is \"your mathematics is wrong\".  But only once when the student's mathematics was correct.)</p>",
        "id": 340477342,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678314847
    }
]