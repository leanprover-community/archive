[
    {
        "content": "<p>Any sorting algorithms out there that I can use, and reason about with <code>rfl</code>? No particular performance requirements, I just need to be able to run it. :-)</p>\n<p>Unfortunately <code>Array.qsort</code> isn't what I need:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">qsort</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span>    <span class=\"c1\">-- works fine: #[1, 2, 3]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">qsort</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>    <span class=\"c1\">-- fails with type mismatch</span>\n</code></pre></div>",
        "id": 400067222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698989124
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.heapSort#doc\">docs#Array.heapSort</a> for example?</p>",
        "id": 400067526,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1698989404
    },
    {
        "content": "<p>Indeed,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.BinaryHeap</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">heapSort</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works.</p>\n<p>I would need to move this out of Mathlib, but that looks feasible.</p>",
        "id": 400067862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698989705
    },
    {
        "content": "<p>Isn't there an <code>insertionSort</code> in core?</p>",
        "id": 400067998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698989833
    },
    {
        "content": "<p>Incidentally I have a <code>qsort</code> implementation which eliminates the <code>partial</code>, but I didn't PR it at the time because I didn't want to do the... stuff I would need to do to get it approved</p>",
        "id": 400068091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698989904
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8143\">#8143</a> removes the Mathlib imports from <code>Mathlib.Data.BinaryHeap</code>, just in case we decide we want that too.</p>",
        "id": 400068097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698989909
    },
    {
        "content": "<p>Hmm... my sorting requirements are trivial right now, so I don't want to be the one to say yes. :-) But good to know it is there!</p>",
        "id": 400068402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698990136
    }
]