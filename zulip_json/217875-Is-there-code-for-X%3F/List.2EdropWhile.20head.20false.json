[
    {
        "content": "<p>I would like a lemma for one of the following examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">l.dropWhile</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span>\n  <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">((</span><span class=\"n\">l.dropWhile</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">nonempty</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">pos_length</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">l.dropWhile</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">((</span><span class=\"n\">l.dropWhile</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">pos_length</span><span class=\"o\">⟩))</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 398923621,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698421474
    },
    {
        "content": "<p>I think it should go to Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.decide_dropWhile_head</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.dropWhile</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span>\n  <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">((</span><span class=\"n\">l.dropWhile</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">hl</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">d</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">by_cases</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">List.dropWhile</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 399020787,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698476749
    },
    {
        "content": "<p>I don't think mathlib should have any lemmas about <code>decide</code>; <code>decide P = false</code> should be stated as <code> ¬P</code></p>",
        "id": 399043775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698494357
    },
    {
        "content": "<p><code>P</code> here is actually a <code>Bool</code>, so maybe just <code>P = false</code>?</p>",
        "id": 399060209,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698506095
    },
    {
        "content": "<p>My bad!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.decide_dropWhile_head</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.dropWhile</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"o\">((</span><span class=\"n\">l.dropWhile</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">d</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">by_cases</span> <span class=\"n\">P</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">List.dropWhile</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 399062025,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698507292
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.dropWhile_nthLe_zero_not#doc\">docs#List.dropWhile_nthLe_zero_not</a> looks like almost exactly what you're proving. That theorem uses the <code>¬P = true</code> spelling</p>",
        "id": 399063545,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698508846
    },
    {
        "content": "<p>A lot of these lemmas will be a mess because in lean 3 dropWhile took a function to <code>Prop</code> not <code>bool</code></p>",
        "id": 399064777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698509567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500038\">Timo Carlin-Burns</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/List.2EdropWhile.20head.20false/near/399063545\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.dropWhile_nthLe_zero_not#doc\">docs#List.dropWhile_nthLe_zero_not</a> looks like almost exactly what you're proving. That theorem uses the <code>¬P = true</code> spelling</p>\n</blockquote>\n<p>Isn't <code>List.nthLe</code> deprecated?</p>",
        "id": 399065371,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1698510157
    },
    {
        "content": "<p>Yes, but a lot of this stuff was ported without much thought, and hasn't yet received a cleanup pass.</p>",
        "id": 399065483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698510251
    }
]