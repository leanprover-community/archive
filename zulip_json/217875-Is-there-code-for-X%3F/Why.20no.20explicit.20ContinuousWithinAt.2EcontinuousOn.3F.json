[
    {
        "content": "<p>I recently needed the following lemma which is immediate from the definition of `ContinuousOn':</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ContinuousWithinAt</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ContinuousOn</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>In analogy with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAt.continuousOn#doc\">docs#ContinuousAt.continuousOn</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousOn.continuousWithinAt#doc\">docs#ContinuousOn.continuousWithinAt</a>, I would have expected this lemma to exist as <code>ContinuousWithinAt.continuousOn</code>, but this doesn't seem to be the case.  I am wondering if this is a deliberate design decision?  Are statements that are tautologically true from definition not usually explicitly stated as Mathlib lemmas?</p>",
        "id": 401629622,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699811542
    },
    {
        "content": "<p>Usually, the only reason to state something like this is to allow dot notation.</p>",
        "id": 401631525,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699813283
    },
    {
        "content": "<p>Unless you need a dot notation lemma, you can just use <code>h</code> whenever you need <code>ContinuousOn f s</code>.</p>",
        "id": 401631696,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699813439
    },
    {
        "content": "<p>Or add a type annotation to whatever <code>have</code>/<code>obtain</code> gave you this <code>h</code>.</p>",
        "id": 401631742,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699813461
    },
    {
        "content": "<p>I'm not sure why we need <code>ContinuousOn.continuousWithinAt</code>. I would never use it but <del>probably someone</del> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  thinks that it's more readable (added in <a href=\"https://github.com/leanprover-community/mathlib/pull/2165\">!3#2165</a>).</p>",
        "id": 401631776,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699813516
    },
    {
        "content": "<p>OK, but then this means that these sorts of obvious steps cannot be performed just from Mathlib searches, and one actually has to inspect the definition of terms such as <code>ContinuousOn</code> in order to proceed.  I would have thought a more \"object oriented\" approach would be to turn these definitionally true statements into explicit methods, so was puzzled by the different philosophy espoused here.</p>",
        "id": 401631780,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699813531
    },
    {
        "content": "<p>As you can see, there are people with different tastes among maintainers. While I wouldn't use this lemma, I wouldn't object adding it to the library either.</p>",
        "id": 401631887,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699813662
    },
    {
        "content": "<p>Well, all I know is that I spent fifteen minutes trying to search Mathlib for how to reduce from <code>ContinuousOn</code> to <code>ContinuousWithinAt</code> before finally looking at the definition of <code>ContinuousOn</code> to see that what I wanted was true by definition.  I would have appreciated some hint that this is what I should have been doing in the first place, if this sort of method wasn't going to be put into Mathlib in the first place.</p>",
        "id": 401631996,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699813785
    },
    {
        "content": "<p>This is a good argument pro adding this method.</p>",
        "id": 401632090,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699813875
    },
    {
        "content": "<p>Indeed, <a href=\"https://loogle.lean-lang.org/?q=ContinuousOn%2C+ContinuousWithinAt\">https://loogle.lean-lang.org/?q=ContinuousOn%2C+ContinuousWithinAt</a> returns one implication but doesn't show the definition.</p>",
        "id": 401632151,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699813929
    },
    {
        "content": "<p>Possibly, we should both add a lemma for the other implication (or an <code>iff</code>) and make loogle show the definition in cases like this one.</p>",
        "id": 401632185,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699813987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> What do you think about it?</p>",
        "id": 401632192,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699814006
    },
    {
        "content": "<p>The idea is to match terms in the definition, not only type, for <code>def</code>s (not <code>theorem</code>s).</p>",
        "id": 401632262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699814065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> Generally, many parts of the library lack trivial lemmas because (a) it's easy to forget about these lemmas when you're writing API about a new definition; (b) we don't have formal coding style requirements + linters for this.</p>",
        "id": 401632604,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699814472
    },
    {
        "content": "<p>If instead of calling it <code>ContinuousWithinAt.continuousOn</code> we called it <code>ContinuousOn.of_continuousWithinAt</code>, then this would provide dot notation as <code>(.of_continuousWithinAt h)</code></p>",
        "id": 401632676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699814574
    },
    {
        "content": "<p>Of course this breaks that pattern set by most other lemmas</p>",
        "id": 401632704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699814599
    },
    {
        "content": "<p>This wouldn't provide dot notation because of the way Lean 4 dels with <code>.dot_lemma _</code>: it <code>intro</code>s everything it can before looking at the type of the target.</p>",
        "id": 401632782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699814695
    },
    {
        "content": "<p>I think lemmas like this should be in the library even though they're true by definition. I can also picture myself wasting time on this.</p>",
        "id": 401632796,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1699814706
    },
    {
        "content": "<p>I assume <code>exact?</code> is unable to help in this case?</p>",
        "id": 401632868,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699814774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Why.20no.20explicit.20ContinuousWithinAt.2EcontinuousOn.3F/near/401632782\">said</a>:</p>\n<blockquote>\n<p>This wouldn't provide dot notation.</p>\n</blockquote>\n<p>I'm referring to dot <em>constructor</em> notation, as opposed to the narrower Lean 3 meaning of dot notation.</p>",
        "id": 401632886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699814812
    },
    {
        "content": "<p>Last time I checked, it doesn't work (EDIT: this is about dot notation, not <code>exact?</code>).</p>",
        "id": 401632905,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699814841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Why.20no.20explicit.20ContinuousWithinAt.2EcontinuousOn.3F/near/401632782\">said</a>:</p>\n<blockquote>\n<p>This wouldn't provide dot notation because of the way Lean 4 dels with <code>.dot_lemma _</code>: it <code>intro</code>s everything it can before looking at the type of the target.</p>\n</blockquote>\n<p>Oh, so the issue is that <code>ContinuousOn</code> is too reducible?</p>",
        "id": 401632909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699814847
    },
    {
        "content": "<p>For cases like <code>ContinuousOn</code>.</p>",
        "id": 401632913,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699814850
    },
    {
        "content": "<p>Yes, it would work for a <code>structure ContinuousOn</code>.</p>",
        "id": 401632925,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699814872
    },
    {
        "content": "<p>In lean3 we had <code>library_search!</code> which was more aggressive than <code>library_search</code> with respect to reducibility. If we had such a <code>exact?!</code> then I would hope it would be able to find it.</p>",
        "id": 401632928,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699814880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Why.20no.20explicit.20ContinuousWithinAt.2EcontinuousOn.3F/near/401632868\">said</a>:</p>\n<blockquote>\n<p>I assume <code>exact?</code> is unable to help in this case?</p>\n</blockquote>\n<p><code>exact?</code> works here.  The problem was that because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAt.continuousOn#doc\">docs#ContinuousAt.continuousOn</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousOn.continuousWithinAt#doc\">docs#ContinuousOn.continuousWithinAt</a> were already in the library, this strongly suggested that something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousWithinAt.continuousOn#doc\">docs#ContinuousWithinAt.continuousOn</a> was also in the library, so I spent most of my time looking for this using the various Mathlib search engines rather than trying other approaches such as <code>exact?</code>.</p>",
        "id": 401632985,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699814918
    },
    {
        "content": "<p>Ah I see.</p>",
        "id": 401633002,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699814941
    },
    {
        "content": "<p>I think that we should make <code>loogle</code> show this one way or another (add a lemma or change <code>loogle</code>).</p>",
        "id": 401633031,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699814993
    },
    {
        "content": "<p>Personally I tend to stay in the editor as much as possible, only opening a web browser as a last resort.</p>",
        "id": 401633035,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699814997
    },
    {
        "content": "<p>I use <code>loogle</code> a lot whenever I need a part of the library that I don't know well.</p>",
        "id": 401633094,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699815035
    },
    {
        "content": "<p>In any case, I’m addition to adding some declarations for this particular case, it seems that we also need to improve our various search engines (but we already knew that for a long time).</p>",
        "id": 401633174,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699815127
    },
    {
        "content": "<p>For example I think it would be reasonable if <code>loogle</code> was able to see through one layer of definitions with default reducibility.</p>",
        "id": 401633278,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699815263
    },
    {
        "content": "<p>Should it unfold 1 layer for <code>def</code>s only, or for <code>theorem</code>s too?</p>",
        "id": 401633813,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699815780
    },
    {
        "content": "<p>I'm a little bit late here, but I am strongly in favor of adding the lemma. Having a coherent and predictable library is IMHO a very important goal.</p>",
        "id": 401634091,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699816032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> , there is Loogle as a VSCode extension now, no need to reach for the browser any more!<br>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=ShreyasSrinivas.loogle-lean\">https://marketplace.visualstudio.com/items?itemName=ShreyasSrinivas.loogle-lean</a></p>",
        "id": 401634106,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699816062
    },
    {
        "content": "<p>I mean in that case surely the answer is to delete <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousAt.continuousOn#doc\">docs#ContinuousAt.continuousOn</a> instead. This name is nonsense. There's no possible dot notation here.</p>",
        "id": 401634664,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699816710
    },
    {
        "content": "<p>And if it hadn't been there, <span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> wouldn't have tried <code>ContinuousWithinAt.continuousOn</code>.</p>",
        "id": 401634692,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699816755
    },
    {
        "content": "<p>At least rename the incriminated lemma to a name that makes sense with respect to the absence of dot notation, like <code>continuousOn_of_forall_continuousAt</code>. Then we can have <code>continuousOn_iff_forall_continuousWithinAt</code> for discoverability purposes.</p>",
        "id": 401634972,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699817076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Why.20no.20explicit.20ContinuousWithinAt.2EcontinuousOn.3F/near/401632905\">said</a>:</p>\n<blockquote>\n<p>Last time I checked, it doesn't work (EDIT: this is about dot notation, not <code>exact?</code>).</p>\n</blockquote>\n<p>I think we should report this upstream; Lean shouldn't be introing here IMO. Then we can keep the existing lemma and add the new one with the <code>.of</code> name</p>",
        "id": 401635175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699817332
    },
    {
        "content": "<p>I'm busy the next few days. Could you open an issue, please?</p>",
        "id": 401641969,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699824988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Why.20no.20explicit.20ContinuousWithinAt.2EcontinuousOn.3F/near/401634972\">said</a>:</p>\n<blockquote>\n<p>At least rename the incriminated lemma to a name that makes sense with respect to the absence of dot notation, like <code>continuousOn_of_forall_continuousAt</code>. Then we can have <code>continuousOn_iff_forall_continuousWithinAt</code> for discoverability purposes.</p>\n</blockquote>\n<p>I think normally definitional lemmas are simply called <code>continuousOn_iff</code>? Can we extend <code>@[mk_iff]</code> to generate such lemmas as well? (I tried and Lean says <code>mk_iff only applies to inductive declarations</code>.) By the way what happens when I <code>rw [continuousOn]</code>? Does Lean uses some equational lemma hidden somewhere, or is it implemented as an unfold?</p>",
        "id": 401649734,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699833548
    },
    {
        "content": "<p>Yeah but the point here is that what lemma is definitional is non-obvious (and indeed it could well have been another one instead). <code>rw [foo]</code> uses the equational lemma generated for <code>foo</code>. It is explicitly not an unfold (and so in particular it works when <code>foo</code> is defined using well-founded recursion).</p>",
        "id": 401755041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699879482
    },
    {
        "content": "<p>But <code>loogle</code> would find the <code>continuousOn_iff</code> lemma.</p>",
        "id": 401784462,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699888493
    }
]