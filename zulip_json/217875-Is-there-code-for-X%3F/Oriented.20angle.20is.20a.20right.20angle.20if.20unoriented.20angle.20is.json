[
    {
        "content": "<p>I've seen <code>2 • a = π</code> used quite often to indicate that an oriented <code>a : Real.angle</code> is a right angle; do we have a way to translate to the unoriented version?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InnerProductSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">FiniteDimensional.finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Module.Oriented</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">positiveOrientation.oangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">↔</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">InnerProductGeometry.angle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403182366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700490693
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Orientation.oangle_eq_pi_iff_angle_eq_pi#doc\">docs#Orientation.oangle_eq_pi_iff_angle_eq_pi</a> is very close, but missing the factors of two</p>",
        "id": 403182970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700490887
    },
    {
        "content": "<p>We don't seem to have this particular statement, but some combination of <code>eq_zero_or_oangle_eq_iff_inner_eq_zero</code> and <code>inner_eq_zero_iff_angle_eq_pi_div_two</code> and <code>Real.Angle.two_nsmul_eq_pi_iff</code> should be usable to prove it.</p>",
        "id": 403286785,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1700534203
    }
]