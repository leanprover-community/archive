[
    {
        "content": "<p>Do we have dependent vectors, that is, an explicit vector whose entries' types may depend on their index?<br>\nI want a list of length <code>k</code> where <code>(β : Fin k → Type)</code> specifies types of respective elements.</p>",
        "id": 387914988,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693325478
    },
    {
        "content": "<p><code>(β : Fin k → Type) (v : (i : Fin k) → β i)</code>?</p>",
        "id": 387918634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693326746
    },
    {
        "content": "<p>That's the type that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cons#doc\">docs#Fin.cons</a> operates on</p>",
        "id": 387918697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693326767
    },
    {
        "content": "<p>Mathlib doesn't have a bundled version, does it?</p>",
        "id": 387919559,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693327066
    },
    {
        "content": "<p><code>(i : Fin k) → β i</code> is a.k.a. <code>∀ (i : Fin k), β i</code>, or <code>Π (i : Fin k), β i</code> (with <code>import Mathlib.Util.PiNotation</code>).</p>",
        "id": 387919687,
        "sender_full_name": "Richard Copley",
        "timestamp": 1693327103
    },
    {
        "content": "<p>A <code>structure</code> might be more convenient, depending.</p>",
        "id": 387919828,
        "sender_full_name": "Richard Copley",
        "timestamp": 1693327158
    },
    {
        "content": "<p>What would bundling mean here?</p>",
        "id": 387920124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693327260
    },
    {
        "content": "<p>Are you trying to bundle <code>β</code> with <code>v</code>?</p>",
        "id": 387920173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693327282
    },
    {
        "content": "<p>Heh, not much. I just want to know whether somebody implemented it with API so I don't reïnvent the wheel.</p>",
        "id": 387920257,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693327316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Dependent.20vector/near/387920173\">said</a>:</p>\n<blockquote>\n<p>Are you trying to bundle <code>β</code> with <code>v</code>?</p>\n</blockquote>\n<p>Basically a generic type that given <code>{k : ℕ} (β : Vector Type k)</code> allows me to write <code>DepVec β</code> or something like that.</p>",
        "id": 387920561,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693327431
    },
    {
        "content": "<p>You've given two different types for <code>\\beta</code> now; do you have a preference between them?</p>",
        "id": 387921783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693327877
    },
    {
        "content": "<p>I don't care. However, if there exists API for one version, I'll pick that.</p>",
        "id": 387921886,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693327911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Dependent.20vector/near/387918697\">said</a>:</p>\n<blockquote>\n<p>That's the type that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cons#doc\">docs#Fin.cons</a> operates on</p>\n</blockquote>\n<p>This API exists</p>",
        "id": 387921961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693327927
    },
    {
        "content": "<p>Ah thanks!</p>",
        "id": 387922311,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693328053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 387922318,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693328055
    },
    {
        "content": "<p>If you wanted you could write <code>def DepVec (β : Fin k → Type) := (i : _) → β i</code> but it's not going to save you any typing over using <code>Π i, β i</code> or <code>∀ i, β i</code> directly</p>",
        "id": 387923584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693328398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as unresolved.</p>",
        "id": 387934465,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693331715
    },
    {
        "content": "<p>I am puzzled. Why does the following declaration work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.PiNotation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Co</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">Fin.cons</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k.succ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But, without type annotation, it doesn't?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.PiNotation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Co</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">Fin.cons</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The following declaration doesn't work either. Why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.PiNotation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Tuple.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Co</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k.succ</span><span class=\"o\">),</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">Fin.cons</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 387935365,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693331980
    },
    {
        "content": "<p>Does a <code>:)</code> annotation work?</p>",
        "id": 387937417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693332663
    },
    {
        "content": "<p>No.</p>",
        "id": 387938140,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693332894
    },
    {
        "content": "<p>It looks like it's not able to solve for the implicit argument to <code>Fin.cons</code> by unification? This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Co</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 387939149,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693333257
    },
    {
        "content": "<p>How can I construct a term of the type in question?</p>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.VecNotation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.PiNotation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Matrix.vecCons</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">Matrix.vecCons</span> <span class=\"mi\">5</span> <span class=\"n\">Matrix.vecEmpty</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">Matrix.vecCons</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">Matrix.vecCons</span> <span class=\"mi\">5</span> <span class=\"n\">Matrix.vecEmpty</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.cons</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"mi\">5</span> <span class=\"n\">Fin.elim0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.cons</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">Fin.cons</span> <span class=\"mi\">5</span> <span class=\"n\">Fin.elim0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 389242913,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693934758
    },
    {
        "content": "<p>I first thought I was missing the <code>![3, 5]</code> notation for dependent vectors, but then I realized I didn't even know how to make the term by writing it explicitly.</p>",
        "id": 389246018,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693935368
    },
    {
        "content": "<p>If at all possible, I would recommend against putting types in the <code>![_, _]</code> notation.</p>",
        "id": 389256838,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1693938729
    },
    {
        "content": "<p>Notation aside, what constructors can I use?</p>",
        "id": 389262728,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693940958
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">ℕ</span> <span class=\"k\">else</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- I was to represent ![3, 5] here</span>\n</code></pre></div>",
        "id": 389264070,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693941464
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a><br>\nWhat are you really trying to do here? Is it important that it's a pi-type on <code>Fin n</code>? <code>Fin n</code> doesn't compute very well, i.e. a lemma like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.succRecOn_succ#doc\">docs#Fin.succRecOn_succ</a> is not true by <code>rfl</code>. This is often problematic for types, because if two types are not definitionally equal but only propositionally equal, you have to write casts between them.</p>",
        "id": 389442826,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1694011363
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.TProd#doc\">docs#List.TProd</a> might be what you want though: if you have a list of explicit types, you take their product. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.TProd.mk#doc\">docs#List.TProd.mk</a> constructs elements.</p>",
        "id": 389443054,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1694011422
    },
    {
        "content": "<p>(this is used in measure theory to iterate the binary product of measures to the finitary product of measures)</p>",
        "id": 389443251,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1694011462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Dependent.20vector/near/389442826\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a><br>\nWhat are you really trying to do here? Is it important that it's a pi-type on <code>Fin n</code>? <code>Fin n</code> doesn't compute very well, i.e. a lemma like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.succRecOn_succ#doc\">docs#Fin.succRecOn_succ</a> is not true by <code>rfl</code>. This is often problematic for types, because if two types are not definitionally equal but only propositionally equal, you have to write casts between them.</p>\n</blockquote>\n<p>For illustration, imagine that I want to define a multi-tape Turing machine with a different alphabet on each tape. I don't really need to index the tapes by <code>Fin n</code> but it seemed like the most natural choice.</p>",
        "id": 389445010,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694011825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Dependent.20vector/near/389443054\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.TProd#doc\">docs#List.TProd</a> might be what you want though: if you have a list of explicit types, you take their product. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.TProd.mk#doc\">docs#List.TProd.mk</a> constructs elements.</p>\n</blockquote>\n<p><code>TProd</code> seems like overkill, but it definitely should work.</p>",
        "id": 389445373,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694011919
    },
    {
        "content": "<p>In that case I would use a (finite) indexing type <code>ι</code> of tapes, not force the usage of <code>Fin n</code>.</p>",
        "id": 389450788,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1694013211
    },
    {
        "content": "<p>Is it an antipattern?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MyPi</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List.TProd</span> <span class=\"n\">id</span> <span class=\"n\">τ</span>\n</code></pre></div>",
        "id": 389600137,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694075190
    },
    {
        "content": "<p>Yes, it is an antipattern. Citing documentation:<br>\n\"This type should not be used if <code>∀ i, α i</code> or <code>∀ i ∈ l, α i</code> can be used instead (in the last expression, we could also replace the list l by a set or a finset).\"</p>",
        "id": 389628813,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694084392
    },
    {
        "content": "<p>I have no idea how to construct terms of the type <code>∀ i ∈ l, α i</code> unfortunately.</p>",
        "id": 389640390,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694087827
    },
    {
        "content": "<p><code>fun x hx =&gt; ...</code></p>",
        "id": 390008699,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1694247045
    },
    {
        "content": "<p>Unfortunately, I struggle with the <code>...</code> part.</p>",
        "id": 390257178,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694419915
    },
    {
        "content": "<p>I thought the following would work...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.TProd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pls</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List.TProd</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tau</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Char</span> <span class=\"k\">else</span> <span class=\"n\">Int</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Tau</span> <span class=\"c1\">-- gives `Char × Int × PUnit`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"o\">())</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Tau</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"o\">())</span> <span class=\"c1\">-- fails `failed to synthesize instance OfNat (Tau 1) 9`</span>\n</code></pre></div>\n<p>Any idea how to make it work?</p>",
        "id": 390263061,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694422145
    },
    {
        "content": "<p>you could probably do <code>show ... from X</code> but I think this is kind of on purpose</p>",
        "id": 390266557,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694423440
    },
    {
        "content": "<p><code>Pls</code> is a type synonym in this case, and unless you make it reducible it shouldn't pass through</p>",
        "id": 390266596,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694423455
    },
    {
        "content": "<p>oh, <code>show ... from</code> is now a <code>let</code> binding instead of just a strong <code>Id</code>...</p>",
        "id": 390266904,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694423577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Dependent.20vector/near/390266596\">said</a>:</p>\n<blockquote>\n<p><code>Pls</code> is a type synonym in this case, and unless you make it reducible it shouldn't pass through</p>\n</blockquote>\n<p>If I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Pls</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List.TProd</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>nothing changes.</p>",
        "id": 390272212,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694425345
    },
    {
        "content": "<p>This works but looks absolutely horrible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.TProd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pls</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List.TProd</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tau</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Char</span> <span class=\"k\">else</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exampl</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Tau</span> <span class=\"o\">:=</span> <span class=\"n\">List.TProd.mk</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"sc\">'A'</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Tau</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">9</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">exampl</span> <span class=\"c1\">-- gives `('A', 9, ())`</span>\n</code></pre></div>",
        "id": 390274455,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694426122
    },
    {
        "content": "<p>you can write <code>:= ('A', 9, () : Char \\x Int \\x PUnit)</code></p>",
        "id": 390274638,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694426186
    },
    {
        "content": "<p>Indeed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.TProd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pls</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List.TProd</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tau</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Char</span> <span class=\"k\">else</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Tau</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"o\">())</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It works but I don't know why.</p>",
        "id": 390274895,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694426278
    },
    {
        "content": "<p>because of the way <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.TProd#doc\">docs#List.TProd</a> is defined?</p>",
        "id": 390275392,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694426460
    },
    {
        "content": "<p>Do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Tau</span> <span class=\"bp\">=</span> <span class=\"n\">Char</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 390275838,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694426618
    },
    {
        "content": "<p>If you mean <code>example : Pls 2 Tau = (Char × Int × PUnit) := rfl</code> then it succeeds, yes.<br>\nI still don't know why <code>example : Pls 2 Tau := ('A', 9, ())</code> fails.</p>",
        "id": 390276622,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694426871
    },
    {
        "content": "<p>The issue here is that Lean doesn't dig any deeper than <code>Tau 1</code> before trying to find an instance of <code>OfNat</code></p>",
        "id": 390288464,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694431275
    },
    {
        "content": "<p>Whether this is a bug or not, I'm not sure</p>",
        "id": 390288505,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694431297
    },
    {
        "content": "<p>I assume not, maybe you're expected to use <code>deriving ...</code></p>",
        "id": 390288639,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694431338
    },
    {
        "content": "<p>Even inlining fails, wanting <code>  OfNat ((fun i ↦ if i = 0 then Char else ℤ) 1) 9</code>. I would think that is definitely a bug, but not sure what level of reduciblity it would be expected to work until.</p>",
        "id": 390288826,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694431414
    },
    {
        "content": "<p>In case it is a bug (I honestly don't know), should I make a bug report to Mathlib4 or to Lean4 directly?</p>",
        "id": 390293746,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694433172
    },
    {
        "content": "<p>Lean4, I think</p>",
        "id": 390305809,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694437329
    },
    {
        "content": "<p>it's not a bug, the type of the second field is <code>Tau 1</code> and <code>Tau</code> is not reducible</p>",
        "id": 390305813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694437330
    },
    {
        "content": "<p>You can use <code>example : Pls 2 Tau := ('A', (9:Int), ())</code></p>",
        "id": 390305967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694437397
    },
    {
        "content": "<p>you can also make <code>Tau</code> reducible if you only use reducible parts in the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">Tau</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Char</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Tau</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"o\">())</span>\n</code></pre></div>",
        "id": 390306372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694437535
    },
    {
        "content": "<p><code>dite</code> is not reducible</p>",
        "id": 390306529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694437576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Dependent.20vector/near/390305967\">said</a>:</p>\n<blockquote>\n<p>You can use <code>example : Pls 2 Tau := ('A', (9:Int), ())</code></p>\n</blockquote>\n<p>Indeed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.TProd</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Pls</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List.TProd</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Tau</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Char</span> <span class=\"k\">else</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Tau</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">),</span> <span class=\"o\">())</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Tau</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"o\">())</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Bau</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Int</span> <span class=\"k\">else</span> <span class=\"n\">Char</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Bau</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"mi\">9</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">),</span> <span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"o\">())</span> <span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Bau</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"o\">())</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Removing those <code>@[reducible]</code> doesn't change anything here.</p>",
        "id": 390306722,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694437646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Dependent.20vector/near/390306372\">said</a>:</p>\n<blockquote>\n<p>you can also make <code>Tau</code> reducible if you only use reducible parts in the definition:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">Tau</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Char</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">2</span> <span class=\"n\">Tau</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"o\">())</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If I have five types, do I have to do a cascade of four matchings on Nat?</p>",
        "id": 390307120,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694437763
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 390307799,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694437970
    },
    {
        "content": "<p>I don't have to!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.TProd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Pls</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">List.TProd</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Tau</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Char</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Rat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pls</span> <span class=\"mi\">5</span> <span class=\"n\">Tau</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"sc\">'A'</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">,</span> <span class=\"o\">())</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 390308164,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694438065
    },
    {
        "content": "<p>If you have five types, why aren't you just writing <code>Int × Char × Rat × Bool × String</code> instead of this thing?</p>",
        "id": 390311745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694439259
    },
    {
        "content": "<p>Well, I have a general number of types, and in some instances, it might be instantiated by a 5-tuple.</p>",
        "id": 390312227,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694439433
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.TProd#doc\">docs#List.TProd</a> support something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.update#doc\">docs#Function.update</a> or a similar function that overwrites a single entry?</p>",
        "id": 390472887,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694508357
    },
    {
        "content": "<p>I actually want to change the first entry, so something like <code>(new_head :: TProd.tail old_term) : TProd</code> would be perfect.</p>",
        "id": 390473352,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694508517
    },
    {
        "content": "<p>Can you make the following into terms?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.TProd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.TProd.tail</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">TProd</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.TProd</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.TProd</span><span class=\"o\">,</span> <span class=\"n\">List.foldr</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">List.TProd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x.snd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.TProd.replaceHead</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">TProd</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">TProd</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.TProd</span><span class=\"o\">,</span> <span class=\"n\">List.foldr</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">List.TProd</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">x.tail</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 390695113,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694601948
    },
    {
        "content": "<p>What is below seems to work.  Did you have something else in mind?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.TProd.tail</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">TProd</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.TProd</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x.snd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.TProd.replaceHead</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">TProd</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">TProd</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">x.tail</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 390695853,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694602207
    },
    {
        "content": "<p>Thank you!!!<br>\nI can't believe I didn't see that an option.</p>",
        "id": 390696058,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694602288
    },
    {
        "content": "<p>The <code>rw</code> were simply doing/undoing definitions, so they are \"transparent\" to defeq.</p>",
        "id": 390696347,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694602378
    }
]