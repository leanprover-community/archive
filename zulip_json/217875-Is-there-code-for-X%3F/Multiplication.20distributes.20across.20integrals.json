[
    {
        "content": "<p>I was sad to find I can't prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mi>a</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>t</mi><mo>=</mo><mi>a</mi><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\int_0^1 a f(t) dt = a \\int_0^1 f(t) dt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3648em;vertical-align:-0.3558em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.009em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.2579em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3648em;vertical-align:-0.3558em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.009em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.2579em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3558em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>:</mo><mi mathvariant=\"double-struck\">H</mi></mrow><annotation encoding=\"application/x-tex\">a : \\mathbb{H}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">H</span></span></span></span>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.fund_thm_calculus</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.quaternion</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">quaternion</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℍ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">interval_integral.integral_const_mul</span> <span class=\"n\">q</span> <span class=\"n\">f</span>  <span class=\"c1\">-- fails, needs is_R_or_C ℍ[ℝ]</span>\n</code></pre></div>\n<p>Is there some mathematical technicality for why this is the case?</p>",
        "id": 359776892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684534603
    },
    {
        "content": "<p>I don't think the problem is a mathematical one.</p>",
        "id": 359776973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684534654
    },
    {
        "content": "<p>Yes this should be fine this multiplication by <code>a</code> is <code>\\R</code>-linear (and continuous)</p>",
        "id": 359777128,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684534731
    },
    {
        "content": "<p>Integral basically satisfies the same theorems as <code>finset.sum</code> because it's a limit of such things</p>",
        "id": 359777193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684534754
    },
    {
        "content": "<p>And there's not some stupid reason that it's false if <code>f</code> isn't integrable?</p>",
        "id": 359777579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684534930
    },
    {
        "content": "<p>Oh I didn't think about that.</p>",
        "id": 359777620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684534956
    },
    {
        "content": "<p>I'm checking that</p>",
        "id": 359777632,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684534966
    },
    {
        "content": "<p>Can af be integrable when f isn't?</p>",
        "id": 359777677,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684534995
    },
    {
        "content": "<p>If a=0 then yes</p>",
        "id": 359777701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684535011
    },
    {
        "content": "<p>but multiplication by nonzero a will preserve integrability (or reflect it or whatever is needed -- it will be an iff)</p>",
        "id": 359777716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684535026
    },
    {
        "content": "<p>I suspect a lot of the problem here is that our usual approach of \"prove the <code>smul</code> result then derive the <code>mul</code> result\" falls apart in normed spaces, because there we're not allowed to <code>smul</code> by anything that isn't a field</p>",
        "id": 359777842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684535069
    },
    {
        "content": "<p>oh-oh...</p>",
        "id": 359777866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684535085
    },
    {
        "content": "<p>The two lemmas to check are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/weighted_smul_smul\">docs#weighted_smul_smul</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.set_to_fun_smul\">docs#measure_theory.set_to_fun_smul</a></p>",
        "id": 359777953,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684535131
    },
    {
        "content": "<p>Normed spaces for division rings coming up :-/</p>",
        "id": 359778129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684535205
    },
    {
        "content": "<p>That's not enough for me, I need them for rings...</p>",
        "id": 359778178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684535226
    },
    {
        "content": "<p>Or at least, I want the result above for (say) 2x2 matrices too</p>",
        "id": 359778217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684535245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359777128\">said</a>:</p>\n<blockquote>\n<p>Yes this should be fine this multiplication by <code>a</code> is <code>\\R</code>-linear (and continuous)</p>\n</blockquote>\n<p>This is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.interval_integral_comp_comm\">docs#continuous_linear_map.interval_integral_comp_comm</a>, right?</p>",
        "id": 359778246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684535259
    },
    {
        "content": "<p>So are you telling me we can't do Banach modules (i.e. complete normed modules) over Banach rings (i.e. complete normed rings)? I once wrote a paper about those things (all p-adic of course)</p>",
        "id": 359778267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684535273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359778246\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359777128\">said</a>:</p>\n<blockquote>\n<p>Yes this should be fine this multiplication by <code>a</code> is <code>\\R</code>-linear (and continuous)</p>\n</blockquote>\n<p>This is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.interval_integral_comp_comm\">docs#continuous_linear_map.interval_integral_comp_comm</a>, right?</p>\n</blockquote>\n<p>Yes. Of course this will require integrability</p>",
        "id": 359778383,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684535310
    },
    {
        "content": "<p>And the map should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.mul\">docs#continuous_linear_map.mul</a></p>",
        "id": 359778637,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684535426
    },
    {
        "content": "<p>Formalising section 2 of <a href=\"https://www.ma.imperial.ac.uk/~buzzard/maths/research/papers/eigenvarieties.pdf\">that paper of mine</a> is on my todo list. Are there problems with mathlib's set-up?</p>",
        "id": 359778722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684535477
    },
    {
        "content": "<p>Yes. I think this has been discussed a few times before. Changing the definition should be straightforward, and then it's the kind of slow transition of everything that we know well, so I wouldn't worry <em>too much</em> about it. But right now you'll definitely have some troubles.</p>",
        "id": 359778991,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684535621
    },
    {
        "content": "<p>For example the open mapping theorem will probably need to be adapted.</p>",
        "id": 359779255,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684535758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359778217\">said</a>:</p>\n<blockquote>\n<p>Or at least, I want the result above for (say) 2x2 matrices too</p>\n</blockquote>\n<p>For 2x2 matrices it's really not true, because they're not a domain, so choose nonzero a,b with <code>a*b=0</code> (e.g. a=b=[0,0;1,0]) and f0 non-integrable from [0,1] to R, and then define f=b*f0. That was why I suggested division ring. Of course you can just stick to integrable f like we do in actual maths and then you're fine.</p>",
        "id": 359779428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684535829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359779255\">said</a>:</p>\n<blockquote>\n<p>For example the open mapping theorem will probably need to be adapted.</p>\n</blockquote>\n<p>See Prop 2.1(a) of my paper :-)</p>",
        "id": 359779491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684535874
    },
    {
        "content": "<p><del>Yes I meant that you won't be able to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.is_open\">docs#continuous_linear_map.is_open</a> directly (I haven't actually checked the proof, it may be completely fine to generalize)</del></p>",
        "id": 359779810,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684536042
    },
    {
        "content": "<p>Sorry I read <code>A</code>-modules instead of <code>K</code>-modules, so you won't actually have any problem.</p>",
        "id": 359780240,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684536281
    },
    {
        "content": "<p>I was surprised by the claim that Bourbaki proves this for normed modules, and for a good reason since they don't and you didn't claim that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 359780505,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684536416
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19052\">#19052</a> makes some slight progress here and at least lets us claim that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">af(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is integrable when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is</p>",
        "id": 359780675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684536512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359779428\">said</a>:</p>\n<blockquote>\n<p>For 2x2 matrices it's really not true, because they're not a domain, so choose nonzero a,b with <code>a*b=0</code> (e.g. a=b=[0,0;1,0]) and f0 non-integrable from [0,1] to R, and then define f=b*f0. That was why I suggested division ring. Of course you can just stick to integrable f like we do in actual maths and then you're fine.</p>\n</blockquote>\n<p>I'm fine if I have <code>is_unit a</code>, right?</p>",
        "id": 359781602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684537034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359780505\">said</a>:</p>\n<blockquote>\n<p>I was surprised by the claim that Bourbaki proves this for normed modules, and for a good reason since they don't and you didn't claim that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>The result for modules is Theorem 6.16 of <a href=\"https://arxiv.org/abs/1910.05934\">https://arxiv.org/abs/1910.05934</a> (the proof is omitted but Wedhorn got an MSc student to write it up)</p>",
        "id": 359781873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684537174
    },
    {
        "content": "<p>I think the quickest way out of this mess is a <code>has_norm_smul_le</code> typeclass</p>",
        "id": 359782914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684537767
    },
    {
        "content": "<p>Because then we can write <code>[mul_action U A] [has_norm_smul_le U A]</code> for <code>U = units A</code></p>",
        "id": 359783017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684537810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359781873\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359780505\">said</a>:</p>\n<blockquote>\n<p>I was surprised by the claim that Bourbaki proves this for normed modules, and for a good reason since they don't and you didn't claim that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>The result for modules is Theorem 6.16 of <a href=\"https://arxiv.org/abs/1910.05934\">https://arxiv.org/abs/1910.05934</a> (the proof is omitted but Wedhorn got an MSc student to write it up)</p>\n</blockquote>\n<p>This version is really close to Bourbaki’s version because the sequence of units tending to zero is really what we need non-discreteness for. So the only missing step is to get it for metrizable topological vector spaces instead of normed spaces. But that should be relatively easy too.</p>",
        "id": 359783527,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1684538150
    },
    {
        "content": "<p>Yes, \"exists a topologically nilpotent unit\" is an important technical assumption in the nonarchimedean theory -- such rings are called Tate rings.</p>",
        "id": 359785196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684539212
    },
    {
        "content": "<p>I will certainly need normed space generalized when I tackle Hilbert modules (here the scalar ring is an arbitrary C*-algebra).</p>",
        "id": 359788951,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684541652
    },
    {
        "content": "<p>Are you going to want non-unital algebras too?</p>",
        "id": 359789051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684541735
    },
    {
        "content": "<p>Well, yes (I did say \"arbitrary\" after all ;-)), but I think the solution to that problem is just to consider them as modules over the C*-unitization.</p>",
        "id": 359789196,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684541843
    },
    {
        "content": "<p>I think there is no loss by doing that. However, I was discussing ideals in non-unital rings with <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> privately a while back, and I think we concluded that we need non-unital versions of scalar actions in general.</p>",
        "id": 359789361,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684541961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359777842\">said</a>:</p>\n<blockquote>\n<p>I suspect a lot of the problem here is that our usual approach of \"prove the <code>smul</code> result then derive the <code>mul</code> result\" falls apart in normed spaces, because there we're not allowed to <code>smul</code> by anything that isn't a field</p>\n</blockquote>\n<p>Because for non-unital rings this strategy also fails, as there without a unit a monoid/ring isn't a mul_action/semiring over itself...</p>",
        "id": 359789387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684541980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Multiplication.20distributes.20across.20integrals/near/359782914\">said</a>:</p>\n<blockquote>\n<p>I think the quickest way out of this mess is a <code>has_norm_smul_le</code> typeclass</p>\n</blockquote>\n<p>Hey, this already exists, its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_bounded_smul\">docs#has_bounded_smul</a>!</p>",
        "id": 359842335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684574504
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19053\">#19053</a> generalized <code>norm_smul_le</code> and <code>norm_smul</code> to work over rings and division rings respectively</p>",
        "id": 359842369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684574519
    },
    {
        "content": "<p>This now seems to pass CI!</p>",
        "id": 359942847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684608028
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/19073\">#19073</a> is the next step towards proving this</p>",
        "id": 360638445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684875881
    },
    {
        "content": "<p>Unfortunately that PR hit a dead end; I can get the results I want for <code>Lp.simple_func</code>, but the final bochner integral resists the generalization</p>",
        "id": 361413862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685127044
    },
    {
        "content": "<p>I think it still has useful results and at least part of it is worth merging; but I don't think I can prove what I originally wanted before the port catches up</p>",
        "id": 361414402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685127199
    },
    {
        "content": "<p>Sorry, could you explain again what you were trying to prove ? This thread is a bit of a mess so I’m not sure I understand the final goal anymore 😅</p>",
        "id": 361415366,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1685127497
    },
    {
        "content": "<p>Let's say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.fund_thm_calculus</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.quaternion</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"k\">in</span> <span class=\"mi\">0</span><span class=\"bp\">..</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">interval_integral.integral_const_mul</span> <span class=\"n\">q</span> <span class=\"n\">f</span>  <span class=\"c1\">-- fails, needs is_R_or_C A</span>\n</code></pre></div>",
        "id": 361417645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685128151
    },
    {
        "content": "<p>Isn't what you want a particular case of  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.integral_comp_comm\">docs#continuous_linear_map.integral_comp_comm</a> ? (Or the version for linear equivs)</p>",
        "id": 361417917,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1685128235
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_equiv.integral_comp_comm\">docs#continuous_linear_equiv.integral_comp_comm</a>)</p>",
        "id": 361418106,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1685128310
    },
    {
        "content": "<p>Aha, you're right! I was looking for a way to not need the integrability hypothesis, and indeed the equiv solves that</p>",
        "id": 361418317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685128380
    }
]