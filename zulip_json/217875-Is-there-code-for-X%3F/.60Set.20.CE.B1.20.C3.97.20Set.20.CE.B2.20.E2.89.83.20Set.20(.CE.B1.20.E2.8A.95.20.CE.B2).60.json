[
    {
        "content": "<p>I'm surprised we don't have a definition giving the equivalence <code>Set α × Set β ≃ Set (α ⊕ β)</code> (according to <code>exact?</code>).</p>\n<p>What am I missing? Is there some better way to talk about this fact?</p>\n<p>(And similarly for <code>Finset</code>.)</p>",
        "id": 396614540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697259797
    },
    {
        "content": "<p>We have <code>(α ⊕ β → γ) ≃ (α → γ) × (β → γ)</code> which is almost the same thing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.sumArrowEquivProdArrow</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 396616680,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697261308
    },
    {
        "content": "<p>Ah, that's good. Any ideas for the <code>Finset</code> version?</p>",
        "id": 396616868,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697261447
    },
    {
        "content": "<p>I've just done it with my bare hands, but I'm perturbed by not finding it in Mathlib. Has no one been doing any combinatorics? :-)</p>",
        "id": 396616891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697261482
    },
    {
        "content": "<p>I think I actually prefer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Set.sum_equiv</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Sum.inl</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Sum.inr</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sum.inl</span> <span class=\"bp\">''</span> <span class=\"n\">s₁</span> <span class=\"bp\">∪</span> <span class=\"n\">Sum.inr</span> <span class=\"bp\">''</span> <span class=\"n\">s₂</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span> <span class=\"c1\">-- Bare `aesop` is kinda lame? Why has no one powered it up in Mathlib?</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>\n<p>over the one coming from <code>Equiv.sumArrowEquivProdArrow</code>, as the <code>@[simp]</code> lemmas are good out of the box.</p>",
        "id": 396617215,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697261764
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Set.sum_equiv_symm_apply_finite</span>\n    <span class=\"o\">{</span><span class=\"n\">sa</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">sb</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">sa.Finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">sb.Finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Set.sum_equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">sa</span><span class=\"o\">,</span> <span class=\"n\">sb</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Set.finite_preimage_inl_and_inr.mp</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Sum.inl_injective</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Sum.inr_injective</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"n\">simp_all</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.sum_equiv_apply_fst_finite</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Set.sum_equiv</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finite.preimage</span> <span class=\"o\">(</span><span class=\"n\">injOn_of_injective</span> <span class=\"n\">Sum.inl_injective</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Set.sum_equiv_apply_snd_finite</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.Finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Set.sum_equiv</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finite.preimage</span> <span class=\"o\">(</span><span class=\"n\">injOn_of_injective</span> <span class=\"n\">Sum.inr_injective</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Finset.sum_equiv</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">((</span><span class=\"n\">Set.sum_equiv_apply_fst_finite</span> <span class=\"o\">(</span><span class=\"n\">finite_toSet</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">Set.sum_equiv_apply_snd_finite</span> <span class=\"o\">(</span><span class=\"n\">finite_toSet</span> <span class=\"n\">s</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">Set.sum_equiv_symm_apply_finite</span> <span class=\"o\">(</span><span class=\"n\">finite_toSet</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finite_toSet</span> <span class=\"n\">s₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>\n<p>gets the rest of the way for <code>Finset</code>, but ... surely someone has this already?</p>",
        "id": 396617527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697262016
    },
    {
        "content": "<p>Here's a computable implementation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">abbrev</span> <span class=\"n\">Finset.filterMap</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">s.val.filterMap</span> <span class=\"n\">f</span>\n  <span class=\"n\">nodup</span> <span class=\"o\">:=</span> <span class=\"n\">s.nodup.filterMap</span> <span class=\"n\">f</span> <span class=\"n\">f_inj</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Finset.sum_equiv</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s.filterMap</span> <span class=\"n\">Sum.getLeft</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span> <span class=\"n\">s.filterMap</span> <span class=\"n\">Sum.getRight</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.disjUnion</span> <span class=\"o\">(</span><span class=\"n\">s₁.map</span> <span class=\"n\">Function.Embedding.inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₂.map</span> <span class=\"n\">Function.Embedding.inr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">disjoint_iff_ne</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n</code></pre></div>",
        "id": 396620282,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697264146
    },
    {
        "content": "<p>I'm curious why you wrote <code>private abbrev</code> for <code>filterMap</code>.</p>",
        "id": 396621321,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697265012
    },
    {
        "content": "<p><code>Finset.filterMap</code> should probably be a <code>def</code> with a whole API, but for this example I just wrote <code>abbrev</code> so <code>aesop_cat</code> would see through it and <code>private</code> because I imagine if it was PRed as public there would be feedback that there needs to be API for it</p>",
        "id": 396622534,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697266082
    },
    {
        "content": "<p>Now I wanna go make a PR for <code>Finset.filterMap</code> :)</p>",
        "id": 396622731,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697266262
    },
    {
        "content": "<p>Don't let me stop you! I wouldn't mind having it, so feel free to ping me for a fast review. :-)</p>",
        "id": 396622767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697266298
    },
    {
        "content": "<p>Looks like <code>s</code> and <code>f</code> should be swapped for consistency with <code>Multiset.filterMap</code>.</p>",
        "id": 396622784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697266317
    },
    {
        "content": "<p>Presumably it can live in <code>Mathlib.Data.Finset.Image</code>, since that's where <code>map</code> is.</p>",
        "id": 396623107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697266583
    },
    {
        "content": "<p>Ahha! Just found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.disjSum#doc\">docs#Finset.disjSum</a></p>",
        "id": 396623188,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697266682
    },
    {
        "content": "<p>It's missing the equivalence.</p>",
        "id": 396623249,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697266727
    },
    {
        "content": "<p>Yep sorry, I added <code>Finset.disjSum</code> but I never needed the equivalence. Why do you?</p>",
        "id": 396623676,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697267142
    },
    {
        "content": "<p>Was that \"Why do you need it?\" or \"Why don't you? (add it)\" :-)</p>",
        "id": 396623739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697267176
    },
    {
        "content": "<p>I wanted the embedding <code>Finset α × Finset β \\hookr Finset (α ⊕ β)</code>.</p>",
        "id": 396623787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697267246
    },
    {
        "content": "<p>(In the end, wanting the equivalence between size-n subsets of α ⊕ β and pairs of subsets of \\a and of \\b with sizes summing to n.)</p>",
        "id": 396623895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697267350
    },
    {
        "content": "<p>Yeah, I mean why do you need it. I'm interested to know the context.</p>",
        "id": 396623896,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697267351
    },
    {
        "content": "<p>Ahah! Do you know about <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Sized#doc\">docs#Set.Sized</a> ?</p>",
        "id": 396623923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697267388
    },
    {
        "content": "<p>No, hadn't seen that.</p>",
        "id": 396624021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697267465
    },
    {
        "content": "<p>I'm about to PR a refactor to make this predicate work in any graded order, and add instances for <code>Finset</code> and <code>Prod</code>. Once this is in, your statement becomes \"<code>Finset (\\alpha \\sum \\beta)</code> is isomorphic to <code>Finset \\alpha \\times Finset \\beta</code> as a graded order\".</p>",
        "id": 396624108,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697267529
    },
    {
        "content": "<p>... which is also a direct consequence of the fact that isomorphic orders have the same grade up to translation on connected components.</p>",
        "id": 396624159,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697267594
    },
    {
        "content": "<p>For <code>Finset.filterMap</code>, right now I'm going through all the lemmas for <code>Finset.map</code> and <code>Multiset.filterMap</code> and translating them. Is that a good strategy or should I be a bit more judicious with lemmas since we don't even know if this API is going to be used that often? Maybe I can restrict to just making sure it has good simp lemmas and then make the PR</p>",
        "id": 396625810,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697269233
    },
    {
        "content": "<p>That's often a good start. :-)</p>",
        "id": 396626475,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697269835
    },
    {
        "content": "<p>If there is enough to characterise the function, and the basic simp lemmas for applying it to arguments / checking membership / etc, then users are expected to add the API they need.</p>",
        "id": 396626506,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697269868
    },
    {
        "content": "<p>It is a good start, yes.</p>",
        "id": 396626628,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697269968
    },
    {
        "content": "<p>PR up! <a href=\"https://github.com/leanprover-community/mathlib4/pull/7672\">#7672</a></p>",
        "id": 396631401,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1697273843
    },
    {
        "content": "<p>I think I might have seen <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> PR this already?</p>",
        "id": 396631700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697274121
    },
    {
        "content": "<p>Are you thinking of <a href=\"https://github.com/leanprover-community/mathlib4/pull/7341\">#7341</a>?</p>",
        "id": 396634194,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1697276167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"500038\">@Timo Carlin-Burns</span>, left some comments.</p>",
        "id": 396635680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697277397
    }
]