[
    {
        "content": "<p>Hi is there any lemma characterizing the dual principal in category theory?</p>",
        "id": 393480273,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1695818829
    },
    {
        "content": "<p>for example, with which one can prove epi_of_epi from mono_of_mono or vice versa</p>",
        "id": 393480770,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1695819042
    },
    {
        "content": "<p>Not really? I'm sure the lemma relating epis in C with monos in C dual is there somewhere.</p>\n<p>But sadly there is no analogue of the <code>@[to_additive]</code> attribute for duality that \"knows\" about this.</p>",
        "id": 393481158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695819184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"619253\">@Matthieu PIQUEREZ</span> talked about something like that in his recent talk.</p>",
        "id": 393481265,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695819230
    },
    {
        "content": "<p>The \"duality principle\" is not really a theorem. There's a perfectly good \"metatheorem\" that could be (but hasn't been) reflected in helpful tactics.</p>",
        "id": 393481347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695819247
    },
    {
        "content": "<p>Same thing for order theory, really</p>",
        "id": 393481495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695819312
    },
    {
        "content": "<p>And for both, the annoying thing about making a nice tactic is that it's in practice hard to specify which things to dualize and which things to leave alone in any given setting.</p>",
        "id": 393482146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695819548
    },
    {
        "content": "<p>I think \"dualise everything on type <code>α</code> where <code>α</code> is a free variable\" is a reasonable ask.</p>",
        "id": 393482396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695819632
    },
    {
        "content": "<p>That's a bit naive as an approach and might need to be run <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7477em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> times (where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is the number of free variable types) but it's better than nothing.</p>",
        "id": 393482596,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695819688
    },
    {
        "content": "<p>Got it, thank you very much:D</p>",
        "id": 393483035,
        "sender_full_name": "Coriver Chen",
        "timestamp": 1695819836
    }
]