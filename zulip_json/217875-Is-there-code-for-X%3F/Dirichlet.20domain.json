[
    {
        "content": "<p>I'd like to prove the following. Given a metric space <code>X</code> with a discrete action by a group <code>G</code>, and a base point <code>x : X</code>, one can form the \"Dirichlet polyhedron\" <br>\n<code>D := {y : α | ∀ g : G, dist x y &lt; dist (g • x) y}</code>. Theorem: <code>D</code> is a fundamental domain for the action of G. This needs a measure <code>μ</code> for which sets like <code>{y : α | dist x y = dist (g • x) y}</code> have measure zero (when <code>g</code> doesn't fix <code>x</code>). How do I make the <code>MeasureSpace</code> structure on <code>X</code> compatible with the topology generated by <code>dist</code>?</p>",
        "id": 382992338,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691507576
    },
    {
        "content": "<p>Compatible in what sense? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.Regular#doc\">docs#MeasureTheory.Measure.Regular</a> ?</p>",
        "id": 382993218,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691507737
    },
    {
        "content": "<p>Is X locally isometric to R^n in your example Alex? I suspect it is. Does this answer the question Anatole, or is there more information needed?</p>",
        "id": 382995396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691508151
    },
    {
        "content": "<p>Here's a mwe: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Group.Action</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What I'm worried about is declaring both <code>MetricSpace X</code> and <code>MeasurableSpace X</code>. The latter gives me <em>some</em> sigma-algebra, but I want it to be that generated by the topology induced from the metric space structure... (Does that make sense?...)</p>",
        "id": 383006132,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691510112
    },
    {
        "content": "<p>The opens should be generated from <code>dist</code> balls.</p>",
        "id": 383006499,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691510194
    },
    {
        "content": "<p>Ah right, you meant that the <code>MeasurableSpace</code> should be compatible with the topology. I thought you meant that the measure had to be compatible (because <code>MeasureSpace</code> contains a measure), and I wasn't sure what that would mean. Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BorelSpace#doc\">docs#BorelSpace</a> what you want?</p>",
        "id": 383007185,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691510341
    },
    {
        "content": "<p>Yes that's what I want, thanks! Except I think (?) I first need to generate the topology from the metric space?</p>",
        "id": 383007694,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691510431
    },
    {
        "content": "<p>No, any <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MetricSpace#doc\">docs#MetricSpace</a> comes with a topology (which is provably equal to the one you'd expect)</p>",
        "id": 383008010,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691510481
    },
    {
        "content": "<p>Here's a better mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Group.Action</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">MeasurableSet</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383008207,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691510520
    },
    {
        "content": "<p>That should be exactly <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=measurableSet_ball#doc\">docs#measurableSet_ball</a></p>",
        "id": 383008511,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691510569
    },
    {
        "content": "<p>Notice that if you only want the open sets to be measurable you don't need the full strength of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BorelSpace#doc\">docs#BorelSpace</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OpensMeasurableSpace#doc\">docs#OpensMeasurableSpace</a> is enough.</p>",
        "id": 383009676,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691510775
    },
    {
        "content": "<p>Ok thanks; now I need to know that a set of this kind is open. What kinds of techniques are available?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Group.Action</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">OpensMeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsOpen</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383014139,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691511784
    },
    {
        "content": "<p>I would say <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isOpen_lt#doc\">docs#isOpen_lt</a> together with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.dist#doc\">docs#Continuous.dist</a> should get you there?</p>",
        "id": 383014530,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691511874
    },
    {
        "content": "<p>Ah, perfect thanks! Just what I was looking for...</p>",
        "id": 383014648,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691511905
    },
    {
        "content": "<p>Just a remark on the mathematics...</p>\n<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Dirichlet.20domain/near/382992338\">said</a>:</p>\n<blockquote>\n<p><code>D := {y : α | ∀ g : G, dist x y &lt; dist (g • x) y}</code></p>\n</blockquote>\n<p>This set is empty. I think you have to restrict to <code>g</code> such that <code>g • x ≠ x</code> (in particular, <code>g ≠ 1</code>).</p>",
        "id": 383028943,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1691515196
    },
    {
        "content": "<p>Yes of course, thanks (I'm actually finding it easier to work with <code>≤</code> for a variety of reasons, including this one...)</p>",
        "id": 383090232,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691532603
    },
    {
        "content": "<p>Here's another question: do we have a notion of <code>MetricPreserving</code> (?) for a group action on a metric space, that is, that <code>d(g • x, g • y)=d(x,y)</code> for all <code>g</code>, <code>x</code>, <code>y</code>?</p>",
        "id": 383090277,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691532606
    },
    {
        "content": "<p>Namely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MetricPreserving</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">metric_preserving</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>doesn't seem to exist?</p>",
        "id": 383090940,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691532847
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsometricSMul#doc\">docs#IsometricSMul</a> ?</p>",
        "id": 383091019,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691532897
    },
    {
        "content": "<p>Ah, that's the one. Thanks!</p>",
        "id": 383091374,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691533077
    },
    {
        "content": "<p>Is there a better way of searching for such things (than asking on here)?</p>",
        "id": 383091461,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691533114
    },
    {
        "content": "<p>Actually, why does the class require <code>PseudoEMetricSpace</code>?  Couldn't it be stated in the greater generality?</p>",
        "id": 383091724,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691533218
    },
    {
        "content": "<p>Well to find the class in itself I don't think there is any tool (other than guessing the name or having encountered it already), in particular I'm pretty sure <code>exact?</code> can't help here. But you can also search for related lemmas (here <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=dist_smul#doc\">docs#dist_smul</a> would be one example) and see the typeclasses there.</p>",
        "id": 383091898,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691533309
    },
    {
        "content": "<p>I see. <code>edist</code> is extended (to possibly infinite values) <code>dist</code>, not some euclidean thing...</p>",
        "id": 383091974,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691533327
    },
    {
        "content": "<p>Yes, <code>PseudoEMetricSpace</code> is the most general of the metric space variants: both non-separated (<code>Pseudo</code>) and with possibly infinite (<code>E</code> for extended) distances</p>",
        "id": 383092099,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691533405
    },
    {
        "content": "<p>I now have an actual mathematical question, perhaps for <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, who wrote the <code>FundamentalDomain</code> file: I see why you bring a measure in, to be able to say things about ae-covers, pairwise ae-disjoint, etc. But could you not also do it purely topologically, as is done, say, in Misha Kapovich's response here: <a href=\"https://mathoverflow.net/questions/251627/proper-discontinuity-and-existence-of-a-fundamental-domain\">https://mathoverflow.net/questions/251627/proper-discontinuity-and-existence-of-a-fundamental-domain</a> ? Replacing the ae-conditions could be (1) D is open, or perhaps as stated there, the interior of the closure of D is D itself, (2) the G-orbit of the closure(D) is all of X, and (3) g(D) is disjoint from D for <code>g≠1</code>. (And perhaps local finiteness.)  Is there a good reason to bring a measure into it if one doesn't have to? Thanks!</p>",
        "id": 383336089,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691596175
    },
    {
        "content": "<p>I don't remember why I did it this way. Feel free to rewrite. Can you prove <code>μ (frontier U) = 0</code> for an open set <code>U</code>? Or do you need extra assumptions like convexity?</p>",
        "id": 383377461,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691604080
    },
    {
        "content": "<p>As a backup plan, we can have two notions of a fundamental domain: topological and measure theoretic + theorem(s) like <code>FundamentalDomain.AEFundamentalDomain</code>.</p>",
        "id": 383377895,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691604186
    },
    {
        "content": "<p>At least some of the motivation for that definition came from the Minkowski convex body proof. If you can get a purely topological version that would be nice, but I think the definition as it is right now allows both open and closed fundamental domains which is handy. I guess this could be worked in to your definition, e.g. 3) could be <code>g(D) \\cap D \\subseteq frontier(D)</code> or something like that</p>",
        "id": 383413307,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691613705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Dirichlet.20domain/near/383377461\">said</a>:</p>\n<blockquote>\n<p>I don't remember why I did it this way. Feel free to rewrite. Can you prove <code>μ (frontier U) = 0</code> for an open set <code>U</code>? Or do you need extra assumptions like convexity?</p>\n</blockquote>\n<p>Yes, this is exactly the point that I'd like to avoid (in constructing Dirichlet domains); I tried poking around to find conditions on <code>X</code>, <code>μ</code> that would naturally lead to this, and realized that maybe I shouldn't be talking about <code>μ</code> at all...?</p>",
        "id": 383426397,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691619167
    },
    {
        "content": "<p>It indeed seems like you want two different things, then main point being that you require true set-theoretic disjointness, not ae-disjointness</p>",
        "id": 383426765,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691619360
    },
    {
        "content": "<p>Indeed. I could keep trying with the existing definition, but then I'd need to know under what general conditions does something like <code>μ (frontier U) = 0</code> hold?... (I'm pretty sure doing it purely topologically would allow more general settings...?)</p>",
        "id": 383427163,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691619582
    },
    {
        "content": "<p>I think both are definitely useful, because enforcing actual disjointness is also a very strong requirement that we don't want to make all the time. And I don't really see a good generalization here.</p>",
        "id": 383427774,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691619870
    },
    {
        "content": "<p>Well actually we could have a version where \"disjoint\" is taken modulo <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=EventuallyEq#doc\">docs#EventuallyEq</a> for some filter, and then specialize it to either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊤</mi></mrow><annotation encoding=\"application/x-tex\">\\top</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">⊤</span></span></span></span> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.ae#doc\">docs#MeasureTheory.Measure.ae</a> but that doesn't unify the rest of the definition</p>",
        "id": 383428188,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691620123
    },
    {
        "content": "<p>Indeed, my goal was to accomodate for the Minkowskii theorem. BTW, I think that you don't need some of the constructions in the original mathlib 3 PR (didn't check - they may be gone) if you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Convex.addHaar_frontier#doc\">docs#Convex.addHaar_frontier</a> and/or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Convex.nullMeasurableSet#doc\">docs#Convex.nullMeasurableSet</a></p>",
        "id": 383483471,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1691638360
    }
]