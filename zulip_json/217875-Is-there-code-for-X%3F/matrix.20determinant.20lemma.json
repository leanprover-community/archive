[
    {
        "content": "<p>Has the matrix determinant lemma been proved in LEAN yet?</p>",
        "id": 361714568,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1685266889
    },
    {
        "content": "<p>Note that you can search for this on the <a href=\"https://leanprover-community.github.io/mathlib_docs\">#docs</a></p>",
        "id": 361714799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685266967
    },
    {
        "content": "<p>The answer is no; the closest thing we have is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_one_add_col_mul_row\">docs#matrix.det_one_add_col_mul_row</a> which is a special case of it</p>",
        "id": 361714836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685266981
    },
    {
        "content": "<p>thank you so much<br>\nmay i know is the mathlib regularly updated?</p>",
        "id": 361714939,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1685267017
    },
    {
        "content": "<p>i plan to start a project on proving that in LEAN, but I'm just a beginner</p>",
        "id": 361715049,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1685267049
    },
    {
        "content": "<p>I think a good proof to follow would be section 7.126 of <a href=\"http://www.cip.ifi.lmu.de/~grinberg/primes2015/sols.pdf\">http://www.cip.ifi.lmu.de/~grinberg/primes2015/sols.pdf</a></p>",
        "id": 361715635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685267274
    },
    {
        "content": "<p>Note that Eric linked to mathlib3 but at this point any new contributions should go to mathlib4. The easiest thing would be to wait a bit until <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/linear_algebra/matrix/schur_complement\">port-status#linear_algebra/matrix/schur_complement</a> is ported (or even help with the porting to get it done faster!), but you can also start working in lean3 then translate your additions to lean4.</p>",
        "id": 361718085,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1685268131
    },
    {
        "content": "<p>I currently have a hold in place on that file due to a bunch of mathlib3 PRs, so please don't start porting it yet</p>",
        "id": 361718614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685268330
    },
    {
        "content": "<p>Good point, but there are 17 unported dependencies too</p>",
        "id": 361718773,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1685268382
    },
    {
        "content": "<p>I think it's probably sensible for yufei to work on this in mathlib3/lean3</p>",
        "id": 361718819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685268404
    },
    {
        "content": "<p>I just made <a href=\"https://github.com/leanprover-community/mathlib/pull/19117\">#19117</a>, which upstreams some lemmas that <span class=\"user-mention\" data-user-id=\"497480\">@MohanadAhmed</span> and I wrote in another project, that may help with the determinant lemma.</p>",
        "id": 361718910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685268442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/matrix.20determinant.20lemma/near/361718773\">said</a>:</p>\n<blockquote>\n<p>Good point, but there are 17 unported dependencies too</p>\n</blockquote>\n<p>And another 12 in progress</p>",
        "id": 361719089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685268510
    },
    {
        "content": "<p>Yufei probably has a week then ;)</p>",
        "id": 361720003,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1685268851
    },
    {
        "content": "<p>thank you two so much</p>",
        "id": 361754886,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1685280230
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/matrix.20determinant.20lemma\">#lean4 &gt; matrix determinant lemma</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 362596577,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685577107
    },
    {
        "content": "<p>Hello isn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_one_add_mul_comm\">docs#matrix.det_one_add_mul_comm</a> the one you mean?</p>",
        "id": 362874384,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685651587
    },
    {
        "content": "<p>Oh OK the first matrix is not the identity.</p>",
        "id": 362874877,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685651741
    },
    {
        "content": "<p>Oh I think the first matrix is the identity. The issue is that there is no variable t, and over a general commutative ring a polynomial function is not determined by its values.</p>",
        "id": 362875286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685651867
    },
    {
        "content": "<p>If I understand from Wikipedia this applies only to invertible A matrix thus we can pull it out, By the determinant product rule, followed by repeated application of the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_one_add_mul_comm\">docs#matrix.det_one_add_mul_comm</a> we get the desired identity</p>",
        "id": 362875497,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685651918
    },
    {
        "content": "<p>There are no assumptions of invertibility in the mathlib assertion and hence there are no assumptions of invertibility necessary.</p>",
        "id": 362875675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685651972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/362875675\">said</a>:</p>\n<blockquote>\n<p>There are no assumptions of invertibility in the mathlib assertion and hence there are no assumptions of invertibility necessary.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> . I guess you are referring to proving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo>−</mo><mi>t</mi><mi>A</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo>−</mo><mi>t</mi><mi>B</mi><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">det(I - tAB) = det(I -tBA)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">tB</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>? From the other thread about Characteristic Power Series and Characeristic Polynomials?</p>",
        "id": 362876253,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685652130
    },
    {
        "content": "<p>I was referring to the theorem you linked to</p>",
        "id": 362876582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685652242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"620519\">@yufei Liu</span> asked above about the Matrix Determinant Lemma. At WIkipedia <a href=\"https://en.wikipedia.org/wiki/Matrix_determinant_lemma\">Matrix Determinant Lemma</a> is stated as:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>det</mtext><mo stretchy=\"false\">(</mo><mi>A</mi><mo>+</mo><mi>U</mi><msup><mi>V</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>det</mtext><mo stretchy=\"false\">(</mo><msub><mi>I</mi><mi>m</mi></msub><mo>+</mo><msup><mi>V</mi><mi>T</mi></msup><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>U</mi><mo stretchy=\"false\">)</mo><mtext>det</mtext><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{det}(A +UV^T) = \\text{det}(I_m + V^TA^{-1}U)\\text{det}(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">det</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">det</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span><span class=\"mord text\"><span class=\"mord\">det</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>. What I was suggesting is that Eric stated :</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/361714836\">said</a>:</p>\n<blockquote>\n<p>The answer is no; the closest thing we have is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_one_add_col_mul_row\">docs#matrix.det_one_add_col_mul_row</a> which is a special case of it</p>\n</blockquote>\n<p>I am suggesting the closest thing we have is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_one_add_mul_comm\">docs#matrix.det_one_add_mul_comm</a>. This can go as follows:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>+</mo><mi>U</mi><msup><mi>V</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>U</mi><msup><mi>V</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><msup><mi>V</mi><mi>T</mi></msup><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">det(A + UV^T) = det(A)det(I + A^{-1}UV^T) = det(A)det(I + V^TA^{-1}U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>. This would save <span class=\"user-mention\" data-user-id=\"620519\">@yufei Liu</span>  some steps.</p>",
        "id": 362878836,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685652907
    },
    {
        "content": "<p><del>@<strong>MohanadAhmed</strong>, the reason that I say that that is <em>not</em> the matrix determinant lemma is because it applies only when U/V are vectors</del></p>",
        "id": 362879796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685653157
    },
    {
        "content": "<p>Nevermind, the statement isn't what I expected it to be</p>",
        "id": 362880013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685653219
    },
    {
        "content": "<p>Yes I agree. The other one docs# <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_one_add_mul_comm\">docs#matrix.det_one_add_mul_comm</a>. applies to matrices</p>",
        "id": 362880041,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685653230
    },
    {
        "content": "<p>It seems I'm not totally imagining things; the version I expected is listed in the \"generalizations\" subheading</p>",
        "id": 362880282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685653309
    },
    {
        "content": "<p>The statement should look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">matrix_rank_lemma</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">ℂ</span><span class=\"o\">)(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">U</span><span class=\"bp\">⬝</span><span class=\"n\">V</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">V</span><span class=\"bp\">ᵀ⬝</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⬝</span><span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 362881660,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685653744
    },
    {
        "content": "<p>I think you need <code>A</code> invertible for  that to hold</p>",
        "id": 362889601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685656784
    },
    {
        "content": "<p>i.e. try <code>A = 0</code>, <code>U, V</code> as 1x1 identity matrices, and you get <code>1 = 0 * 1</code></p>",
        "id": 362889924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685656882
    },
    {
        "content": "<p>Yes that is exactly the statement on Wikipedia I. E. A is invertible</p>",
        "id": 362895157,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685658943
    },
    {
        "content": "<p>The statement would also be (syntactically) more general if you replaced <code>Vᵀ</code> with <code>V : matrix n m _</code></p>",
        "id": 362895724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685659171
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"620519\">@yufei Liu</span> <br>\nTo add my two cents to the comments above, if you are only interested in the Matrix Determinant Lemma I think you can do it in Lean4/Mathlib4. It also makes sense to learn Lean4 since it is the new thing.</p>\n<p>I just gave it a try and it took a couple of hours to get the missing lemmas in place. You do not need the whole <code>schur_complement</code> file. You only need the top seven lemmas</p>",
        "id": 363545332,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685901179
    },
    {
        "content": "<p>If you want I can share the code with you if that will not spoil it for you</p>",
        "id": 363546338,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685901572
    },
    {
        "content": "<p>Please share the code, thank you so much</p>",
        "id": 363591912,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1685929327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/362878836\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"620519\">yufei Liu</span> asked above about the Matrix Determinant Lemma. At WIkipedia <a href=\"https://en.wikipedia.org/wiki/Matrix_determinant_lemma\">Matrix Determinant Lemma</a> is stated as:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>det</mtext><mo stretchy=\"false\">(</mo><mi>A</mi><mo>+</mo><mi>U</mi><msup><mi>V</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>det</mtext><mo stretchy=\"false\">(</mo><msub><mi>I</mi><mi>m</mi></msub><mo>+</mo><msup><mi>V</mi><mi>T</mi></msup><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>U</mi><mo stretchy=\"false\">)</mo><mtext>det</mtext><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{det}(A +UV^T) = \\text{det}(I_m + V^TA^{-1}U)\\text{det}(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">det</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">det</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span><span class=\"mord text\"><span class=\"mord\">det</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>. What I was suggesting is that Eric stated :</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/361714836\">said</a>:</p>\n<blockquote>\n<p>The answer is no; the closest thing we have is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_one_add_col_mul_row\">docs#matrix.det_one_add_col_mul_row</a> which is a special case of it</p>\n</blockquote>\n<p>I am suggesting the closest thing we have is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_one_add_mul_comm\">docs#matrix.det_one_add_mul_comm</a>. This can go as follows:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>+</mo><mi>U</mi><msup><mi>V</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>U</mi><msup><mi>V</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><msup><mi>V</mi><mi>T</mi></msup><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">det(A + UV^T) = det(A)det(I + A^{-1}UV^T) = det(A)det(I + V^TA^{-1}U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>. This would save <span class=\"user-mention silent\" data-user-id=\"620519\">yufei Liu</span>  some steps.</p>\n</blockquote>\n<p>you are implying i can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_one_add_mul_comm\">docs#matrix.det_one_add_mul_comm</a> to solve this right? <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>U</mi><msup><mi>V</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><msup><mi>V</mi><mi>T</mi></msup><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">det(A)det(I + A^{-1}UV^T) = det(A)det(I + V^TA^{-1}U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>? but i didnt get how would this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>+</mo><mi>U</mi><msup><mi>V</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>U</mi><msup><mi>V</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">det(A + UV^T) = det(A)det(I + A^{-1}UV^T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> save me steps.</p>",
        "id": 363610315,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1685942590
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"497480\">@MohanadAhmed</span> <br>\nI have a few more questions though regarding the things you were discussing:</p>\n<ol>\n<li>\n<p>So far ive only found the lean3 installation guide: <a href=\"https://leanprover-community.github.io/install/windows.html\">lean3 guide</a>, is there any detailed guide for me to start learn lean4?</p>\n</li>\n<li>\n<p>is the docs you linked all lean3 library? is there similar thing for lean4?</p>\n</li>\n<li>\n<p>I'm planning to do this as my final year project, probably titled as \"formalising math in LEAN\", which aims to formalise undergraduate level math (since im a math undergrad) in LEAN, hopefully those that are not in the mathlib yet. Matrix determinant lemma is just a topic where I think I can start with, probably i will try to prove more things that are not in the lean library. I understand the community is switching to LEAN4 and i would like to help, just considering im still a beginner in lean3 so not very confident at this moment. Considering my situation, do you think i should continue study lean3 or start learning lean4? Also, do you know any projects in the community that might suit me? Thank you!</p>\n</li>\n</ol>",
        "id": 363613296,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1685943873
    },
    {
        "content": "<p>If you're interested in combinatorics, I will run informal summer projects revolving around <a href=\"http://github.com/YaelDillies/LeanCamCombi\">github.com/YaelDillies/LeanCamCombi</a>. I don't mind too much if they are in Lean 3 or Lean 4, but all my infrastructure is in Lean 3 and Lean 4 doesn't make any bit of the formalisation easier.</p>",
        "id": 363622885,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685947417
    },
    {
        "content": "<p>The code in Lean 3 is below<br>\nYou can place the cursor after every comma and look at the infoview in VSCode to see the steps of the derivation</p>\n<h2>Matrix Determinant Lemma Lean3 / Mathlib 3</h2>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.schur_complement</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">q</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">matrix_determinant_lemma</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">matrix</span>  <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">A.det</span><span class=\"o\">}:</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">U</span><span class=\"bp\">⬝</span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">V</span><span class=\"bp\">⬝</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⬝</span><span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span> <span class=\"n\">matrix.mul_one</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_nonsing_inv_cancel_left</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">⬝</span><span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">matrix.mul_add</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">det_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">matrix.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">det_one_add_mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">matrix.mul_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 363637660,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685951797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620519\">yufei Liu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/363613296\">said</a>:</p>\n<blockquote>\n<p>Hello <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <br>\nI have a few more questions though regarding the things you were discussing:</p>\n<ol>\n<li>\n<p>So far ive only found the lean3 installation guide: <a href=\"https://leanprover-community.github.io/install/windows.html\">lean3 guide</a>, is there any detailed guide for me to start learn lean4?</p>\n</li>\n<li>\n<p>is the docs you linked all lean3 library? is there similar thing for lean4?</p>\n</li>\n<li>\n<p>I'm planning to do this as my final year project, probably titled as \"formalising math in LEAN\", which aims to formalise undergraduate level math (since im a math undergrad) in LEAN, hopefully those that are not in the mathlib yet. Matrix determinant lemma is just a topic where I think I can start with, probably i will try to prove more things that are not in the lean library. I understand the community is switching to LEAN4 and i would like to help, just considering im still a beginner in lean3 so not very confident at this moment. Considering my situation, do you think i should continue study lean3 or start learning lean4? Also, do you know any projects in the community that might suit me? Thank you!</p>\n</li>\n</ol>\n</blockquote>\n<h3>For Question 1:</h3>\n<p>You need two things Lean4 and Mathlib4. The lean4 installation is described here (<a href=\"https://github.com/leanprover/lean4/blob/master/doc/quickstart.md\">https://github.com/leanprover/lean4/blob/master/doc/quickstart.md</a>)<br>\nTo use Mathlib4 in a new project. The steps are in the Mathlib4 github landing page under <a href=\"https://github.com/leanprover-community/mathlib4#using-mathlib4-as-a-dependency\">Using <code>mathlib4</code> as a dependency</a>. </p>\n<h3>For Question 2:</h3>\n<p>The documentation is located here (<a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a>)<br>\nFor example the lemma about the determinant of the product of two matrices is the product of their determinants is called <code>Matrix.det_mul</code> and is located at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.det_mul#doc\">docs4#Matrix.det_mul</a></p>",
        "id": 363640069,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685952418
    },
    {
        "content": "<h3>For Question 3:</h3>\n<p>Just so that you don't learn things twice, it is probably better to learn lean4. There are still stuff that are in Mathlib3 but missing in Mathlib4 particularly when you come to more \"applied\" type maths like matrices, for example. Which means if you work in mathlib4 there will be more work to do before you get to the part you \"actually\" want to do.</p>",
        "id": 363643829,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685953372
    },
    {
        "content": "<p>For example to prove the Matrix Determinant Lemma above in LEAN4/Mathlib4 the code is shown below. You notice the proof for matrix determinant lemma \"alone\" is short but I had to translate 6 lemmas from mathlib3 to mathlib4. Once these are in place the matrix determinant lemma is just a few lines! <br>\nWorking in mathlib4 you will be seeing a lot of this!! But that is part of the journey and the fun anyway!</p>\n<h2>Matrix Determinant Lemma Lean4 / Mathlib 4</h2>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NthRewrite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SimpRw</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">l</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">DecidableEq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span>\n\n<span class=\"sd\">/-- LDU decomposition of a block matrix with an invertible top-left corner, using the</span>\n<span class=\"sd\">Schur complement. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">from_blocks_eq_of_invertible₁₁</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fromBlocks</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"bp\">=</span>\n    <span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">⬝⅟</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">⬝</span> <span class=\"n\">fromBlocks</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">-</span> <span class=\"n\">C</span><span class=\"bp\">⬝</span><span class=\"o\">(</span><span class=\"bp\">⅟</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span><span class=\"n\">A</span><span class=\"bp\">⬝</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fromBlocks_multiply</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_zero</span><span class=\"o\">,</span> <span class=\"n\">Matrix.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n      <span class=\"n\">Matrix.one_mul</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_one</span><span class=\"o\">,</span> <span class=\"n\">Matrix.invOf_mul_self</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_invOf_self_assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">Matrix.mul_invOf_mul_self_cancel</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel'_right</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- LDU decomposition of a block matrix with an invertible bottom-right corner, using the</span>\n<span class=\"sd\">Schur complement. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">from_blocks_eq_of_invertible₂₂</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fromBlocks</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"bp\">=</span>\n    <span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">⬝⅟</span><span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">⬝</span> <span class=\"n\">fromBlocks</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">B</span><span class=\"bp\">⬝⅟</span><span class=\"n\">D</span><span class=\"bp\">⬝</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">D</span> <span class=\"bp\">⬝</span> <span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span><span class=\"n\">D</span> <span class=\"bp\">⬝</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fromBlocks_multiply</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_zero</span><span class=\"o\">,</span> <span class=\"n\">Matrix.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n      <span class=\"n\">Matrix.one_mul</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_one</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_invOf_self_assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">Matrix.mul_invOf_mul_self_cancel</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">sub_add_cancel</span><span class=\"o\">,</span> <span class=\"n\">Matrix.invOf_mul_self</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">det</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">det_from_blocks₁₁</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromBlocks</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">from_blocks_eq_of_invertible₁₁</span><span class=\"o\">,</span> <span class=\"n\">det_mul</span><span class=\"o\">,</span> <span class=\"n\">det_mul</span><span class=\"o\">,</span> <span class=\"n\">det_fromBlocks_zero₂₁</span><span class=\"o\">,</span>\n    <span class=\"n\">det_fromBlocks_zero₂₁</span><span class=\"o\">,</span> <span class=\"n\">det_fromBlocks_zero₁₂</span><span class=\"o\">,</span> <span class=\"n\">det_one</span><span class=\"o\">,</span> <span class=\"n\">det_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">det_from_blocks_one₁₁</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Matrix.fromBlocks</span> <span class=\"mi\">1</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">invertibleOne</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_from_blocks₁₁</span><span class=\"o\">,</span> <span class=\"n\">invOf_one</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_one</span><span class=\"o\">,</span> <span class=\"n\">det_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Determinant of a 2×2 block matrix, expanded around an invertible bottom right element in terms</span>\n<span class=\"sd\">of the Schur complement. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">det_from_blocks₂₂</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Matrix.fromBlocks</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"n\">D</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">B</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span><span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fromBlocks</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"n\">D</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">submatrix</span> <span class=\"o\">(</span><span class=\"n\">Equiv.sumComm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Equiv.sumComm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n    <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span><span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Matrix.det_submatrix_equiv_self</span><span class=\"o\">,</span> <span class=\"n\">det_from_blocks₁₁</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">det_from_blocks_one₂₂</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">Matrix.fromBlocks</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">B</span> <span class=\"bp\">⬝</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">invertibleOne</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_from_blocks₂₂</span><span class=\"o\">,</span> <span class=\"n\">invOf_one</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_one</span><span class=\"o\">,</span> <span class=\"n\">det_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">det_one_add_mul_comm</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Matrix.det</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">A</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Matrix.det</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">B</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>  <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">A</span> <span class=\"bp\">⬝</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_from_blocks_one₂₂</span><span class=\"o\">,</span> <span class=\"n\">Matrix.neg_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">]</span>\n     <span class=\"n\">_</span>  <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">B</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span>              <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_from_blocks_one₁₁</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_neg</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">MatrixDeterminantLemma</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">A.det</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">U</span><span class=\"bp\">⬝</span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">V</span><span class=\"bp\">⬝</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">⬝</span><span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_one</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_nonsing_inv_cancel_left</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"bp\">⬝</span><span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">Matrix.mul_add</span><span class=\"o\">,</span> <span class=\"n\">det_mul</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">Matrix.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">det_one_add_mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">Matrix.mul_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">det</span>\n</code></pre></div>",
        "id": 363644700,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685953625
    },
    {
        "content": "<p>It would not surprise me if all of mathlib 3 has been translated into lean 4 in around a month or so</p>",
        "id": 363647237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685954280
    },
    {
        "content": "<h3>For Question 3: Project Suggestions</h3>\n<p>I don't know how much time you have for a final year project in your university. I will assume here it is two semesters (a full academic year) like it was during my undergrad years. Here are some random suggestions (more like a personal wishlist <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> ):</p>\n<ol>\n<li>\n<p>One area that is very lacking in both mathlib3 and mathlib4 is basic probability theory as taught in an introductory probability and staticsitcs course in engineering. Like definitions of basic distributions including gaussians, uniform, Poisson ... etc.  Theorems like sum of a gaussian is a gaussian and so on. For the way the mathlib is structured this probably requires strong Measure Theory background.</p>\n</li>\n<li>\n<p>Widgets. Take a look at this (<a href=\"#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4</a>).  Maybe widgets for geometry proofs.</p>\n</li>\n<li>\n<p>Linear Algebra Stuff: As far as I know the are still missing from mathlib (and mathlib4) (and probably many more):<br>\na. Singular Value Decomposition of matrices.<br>\nb. Jordan Normal form Decomposition of Matrices<br>\nc. Cholesky Decomposition of Positive Semidefinite matrices<br>\nd. QR Decomposition<br>\ne. Other matrix decomposition ... etc</p>\n</li>\n</ol>",
        "id": 363658406,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685956839
    },
    {
        "content": "<p>Also you can check with <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> for his <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook/\">Matrix Cookbook Project</a>. This is in lean3 however.</p>",
        "id": 363659293,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685957040
    },
    {
        "content": "<p>Thank you so much for your suggestions! I will do some background research about all the topics you have mentioned and probably get back to you and ask you more questions <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> ,thank you for your patience</p>",
        "id": 363671346,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1685959744
    },
    {
        "content": "<p>and yes, it is two semesters</p>",
        "id": 363671475,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1685959773
    },
    {
        "content": "<p>Note you can open the code above in the web playground (by the small arrow at the top of the code). You should see something like this</p>\n<p><a href=\"/user_uploads/3121/fLys-OgMDzw9BUSuSQQHVDaw/Animation.gif\">Animation.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fLys-OgMDzw9BUSuSQQHVDaw/Animation.gif\" title=\"Animation.gif\"><img src=\"/user_uploads/3121/fLys-OgMDzw9BUSuSQQHVDaw/Animation.gif\"></a></div>",
        "id": 363674722,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1685960463
    },
    {
        "content": "<p>thank you! im aware i can do this in VScode. But just out of curiosity, is this the <a href=\"https://leanprover-community.github.io/lean-web-editor/\">online LEAN editor</a> you are using? sometimes i feel like it takes a long time to load. And which one do you think is better? the online editor or the local one? Considering im starting a long term project</p>",
        "id": 363869374,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1686015217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"620519\">@yufei Liu</span>, no they are using the new Lean 4 web editor, at <a href=\"https://lean.math.hhu.de/\">https://lean.math.hhu.de/</a>, while you linked to the old Lean 3 web editor.</p>",
        "id": 363870003,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686015741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"620519\">@yufei Liu</span>, no they are using the new Lean 4 web editor, at <a href=\"https://lean.math.hhu.de/\">https://lean.math.hhu.de/</a>, while you linked to the old Lean 3 web editor.</p>",
        "id": 363870016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686015757
    },
    {
        "content": "<p>Noted, thank you</p>",
        "id": 363881610,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1686024221
    },
    {
        "content": "<p>so lean 4 and lean 3 has not much difference in terms of syntax?</p>",
        "id": 363885117,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1686026658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620519\">Yufei Liu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/363881610\">said</a>:</p>\n<blockquote>\n<p>Noted, thank you</p>\n</blockquote>\n<p>They have enough differences to be annoying when moving from one to the other. There is also the naming of lemmas and theorems in mathlib, commas between statements  vs white space, tactics tactic conventions .... etc etc etc</p>",
        "id": 363937526,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1686043365
    },
    {
        "content": "<p>ic</p>",
        "id": 363937727,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1686043406
    },
    {
        "content": "<p>im trying to display your lean 4 proof of  matrix determinant lemma on vscode, and my supervisor suggest we create a shared project for us to both see it. Currently I have cloned a mathlib 4 and i am trying to creating a new lean file in the mathlib4 folder, but it is taking too long to load in the import mathlib stage.</p>\n<p>So my question is, </p>\n<ol>\n<li>\n<p>is creating a new .lean file inside the mathlib a correct way of testing new lean stuff?</p>\n</li>\n<li>\n<p>how do i create a shared project for me and my supervisor both work on it?</p>\n</li>\n</ol>",
        "id": 389146276,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1693906853
    },
    {
        "content": "<blockquote>\n<p>is creating a new .lean file inside the mathlib a correct way of testing new lean stuff?</p>\n</blockquote>\n<p>This is a totally reasonable way to do things, but creating a separate project folder is also very sensible, especially if you intend to collaborate outside of mathlib</p>",
        "id": 389146546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693906932
    },
    {
        "content": "<blockquote>\n<p>Currently I have cloned a mathlib 4 and i am trying to creating a new lean file in the mathlib4 folder, but it is taking too long to load in the import mathlib stage.</p>\n</blockquote>\n<p>It sounds like you didn't run <code>lake exe get cache</code> first? If you have vscode open, you would do best to close it completely before running that command.</p>",
        "id": 389146633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1693906963
    },
    {
        "content": "<p>ok i will try that</p>",
        "id": 389155109,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1693909180
    },
    {
        "content": "<p>mathlib4 % lake exe get cache<br>\nerror: unknown executable <code>get</code></p>\n<p>i get an error message like above</p>",
        "id": 389155533,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1693909316
    },
    {
        "content": "<p><code>lake exe cache get</code>, swap <code>get</code> and <code>cache</code>.</p>",
        "id": 389155777,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693909382
    },
    {
        "content": "<p>it's working thanks</p>",
        "id": 389156113,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1693909481
    },
    {
        "content": "<p>Does <code>(hA: IsUnit A.det)</code> mean A is invertible? how does the syntax work? why not <code>(hA: IsUnit A)</code></p>",
        "id": 390161884,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694363151
    },
    {
        "content": "<p>It is a lemma that the two are equivalent. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.isUnit_iff_isUnit_det#doc\">docs#Matrix.isUnit_iff_isUnit_det</a>. As a proof obligation, it is easier to come up with a witness for the invertibility of a scalar than of a matrix.</p>",
        "id": 390161998,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1694363281
    },
    {
        "content": "<p>Strictly speaking <code>IsUnit A</code> is more general as it doesn't need commutativity of the underlying ring</p>",
        "id": 390162416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694363660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/390161998\">said</a>:</p>\n<blockquote>\n<p>It is a lemma that the two are equivalent. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.isUnit_iff_isUnit_det#doc\">docs#Matrix.isUnit_iff_isUnit_det</a>. As a proof obligation, it is easier to come up with a witness for the invertibility of a scalar than of a matrix.</p>\n</blockquote>\n<p>thanks for the reply. but how is invertibility of a scalar and invertibility of a matrix the same thing?</p>",
        "id": 390162419,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694363661
    },
    {
        "content": "<p>Yufei Liu, the two concepts are not the same, but the truth of one is equivalent to the truth of the other (as long as you assume that you are working over a commutative ring -- thanks Eric!).</p>\n<p>The equivalence of the two requires a proof and you can look at lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.isUnit_iff_isUnit_det#doc\">docs#Matrix.isUnit_iff_isUnit_det</a> to see a proof.</p>",
        "id": 390162782,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694363988
    },
    {
        "content": "<p>thank you guys, i'll look it up</p>",
        "id": 390163020,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694364189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620519\">Yufei Liu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/390161884\">said</a>:</p>\n<blockquote>\n<p>Does <code>(hA: IsUnit A.det)</code> mean A is invertible? how does the syntax work? why not <code>(hA: IsUnit A)</code></p>\n</blockquote>\n<p>Yes <code>IsUnit A.det</code> means A is invertible. The lemma in mathlib is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.invertibleOfIsUnitDet#doc\">docs#Matrix.invertibleOfIsUnitDet</a>.</p>",
        "id": 390178716,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1694376239
    },
    {
        "content": "<p>The other one with \"similar\" implication is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.invertibleOfDetInvertible#doc\">docs#Matrix.invertibleOfDetInvertible</a></p>",
        "id": 390178876,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1694376362
    },
    {
        "content": "<p>Both these definitions take a matrix and a proof that the determinant is invertible (for the cases I know, it means determinant non-zero) and give you a proof that the matrix is invertible.</p>",
        "id": 390179311,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1694376533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620519\">Yufei Liu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/390162419\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/390161998\">said</a>:</p>\n<blockquote>\n<p>It is a lemma that the two are equivalent. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.isUnit_iff_isUnit_det#doc\">docs#Matrix.isUnit_iff_isUnit_det</a>. As a proof obligation, it is easier to come up with a witness for the invertibility of a scalar than of a matrix.</p>\n</blockquote>\n<p>thanks for the reply. but how is invertibility of a scalar and invertibility of a matrix the same thing?</p>\n</blockquote>\n<p>If I understand your question correctly, you are asking why does the invertibility of the determinant imply the invertibility of the Matrix. Well because:</p>\n<ul>\n<li>for a scalar to be invertible it must be nonzero. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isUnit_iff_ne_zero#doc\">docs#isUnit_iff_ne_zero</a></li>\n<li>A nonzero determinant implies invertibility of the matrix. ( I assume you know this from some Linear Algebra/Matrices course).</li>\n</ul>\n<p>You can also walk this argument line backwards.</p>",
        "id": 390180013,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1694376956
    },
    {
        "content": "<p>ah! this clears everything for me, thank you.</p>",
        "id": 390257041,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694419843
    },
    {
        "content": "<p>i am trying to formalize a more generalised matrix determinant lemma here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> A more generalization of the **Matrix determinant lemma** -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">more_generalised_mdl</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">A.det</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hW</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">W.det</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">W</span> <span class=\"bp\">*</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">W.det</span> <span class=\"bp\">*</span> <span class=\"n\">A.det</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">+</span> <span class=\"n\">V</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_one</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_nonsing_inv_cancel_left</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">W</span> <span class=\"bp\">*</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">Matrix.mul_add</span><span class=\"o\">,</span> <span class=\"n\">det_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_one</span> <span class=\"n\">W</span><span class=\"bp\">⁻¹</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_nonsing_inv_cancel_left</span> <span class=\"n\">W</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">Matrix.mul_add</span><span class=\"o\">,</span> <span class=\"n\">det_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_inv</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but i met problem at the inv_inv part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">MDL123.lean</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"bp\">⁻¹⁻¹</span>\n<span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁶</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">l</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">m</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁴</span><span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">n</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">l</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">m</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">n</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">α</span>\n<span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n<span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span>\n<span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n<span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"n\">hW</span><span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">det</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">W</span> <span class=\"bp\">*</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"n\">W</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"n\">W</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">W</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">U</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>how can i fix this?</p>",
        "id": 390855331,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694669071
    },
    {
        "content": "<p>Try <code>dsimp</code> before the <code>rw</code>, alternatively try <code>erw</code>.</p>",
        "id": 390856168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694669734
    },
    {
        "content": "<p>(But these are suggestions out of ignorance about what the actual problem is --- they are \"emergency measures\"!)</p>",
        "id": 390856188,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694669754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/390856168\">said</a>:</p>\n<blockquote>\n<p>Try <code>dsimp</code> before the <code>rw</code>, alternatively try <code>erw</code>.</p>\n</blockquote>\n<p>sorry that seems do not work</p>",
        "id": 390864093,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694674207
    },
    {
        "content": "<p>Then please make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 390864390,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694674341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/390864390\">said</a>:</p>\n<blockquote>\n<p>Then please make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<p>My apology, here's the complete code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CommRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> A more generalization of the **Matrix determinant lemma** -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">more_generalised_mdl</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">A.det</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hW</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">W.det</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">W</span> <span class=\"bp\">*</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">W.det</span> <span class=\"bp\">*</span> <span class=\"n\">A.det</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">+</span> <span class=\"n\">V</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_one</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_nonsing_inv_cancel_left</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">*</span> <span class=\"n\">W</span> <span class=\"bp\">*</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">Matrix.mul_add</span><span class=\"o\">,</span> <span class=\"n\">det_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_one</span> <span class=\"n\">W</span><span class=\"bp\">⁻¹</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Matrix.mul_nonsing_inv_cancel_left</span> <span class=\"n\">W</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">Matrix.mul_add</span><span class=\"o\">,</span> <span class=\"n\">det_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_inv</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>my question is the inv_inv here doesnt work, what i want to do is change W⁻¹⁻¹  to W in the latest goal after the end of the second last line</p>",
        "id": 390866045,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694675088
    },
    {
        "content": "<p>You need <code>rw [nonsing_inv_nonsing_inv]</code></p>",
        "id": 390869304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694676423
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inv_inv#doc\">docs#inv_inv</a> is effectively for fields and groups, which matrices are not</p>",
        "id": 390869358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694676449
    },
    {
        "content": "<p>(that's not quite right, but the technical details are such that indeed <code>inv_inv</code> doesn't apply to matrices)</p>",
        "id": 390869981,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694676697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/390869304\">said</a>:</p>\n<blockquote>\n<p>You need <code>rw [nonsing_inv_nonsing_inv]</code></p>\n</blockquote>\n<p>thank you that worked. btw is there any tricks for finding the lemma i want to use in mathlib? so far the method im using is guess the lemma name and search for it file by file in, for example, the Matrix folder</p>",
        "id": 390872027,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694677464
    },
    {
        "content": "<p>I've never done this before but <span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (_⁻¹)⁻¹</p>",
        "id": 390880913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694680568
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span> &lt;input&gt;:1:33: expected term</p>",
        "id": 390880917,
        "sender_full_name": "loogle",
        "timestamp": 1694680569
    },
    {
        "content": "<p>@loogle (?a⁻¹)⁻¹</p>",
        "id": 390880978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694680593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (?a⁻¹)⁻¹</p>",
        "id": 390881025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694680611
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 390881083,
        "sender_full_name": "loogle",
        "timestamp": 1694680632
    },
    {
        "content": "<p>I'm pretty sure the answer is \"you can use loogle if you know what you're doing\" (and I don't, yet)</p>",
        "id": 390881153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694680657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |-  (?a⁻¹)⁻¹ = ?a</p>",
        "id": 390881398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694680740
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 390881460,
        "sender_full_name": "loogle",
        "timestamp": 1694680761
    },
    {
        "content": "<p><a href=\"https://loogle.lean-fro.org/?q=%7C-+%28%3Fa%E2%81%BB%C2%B9%29%E2%81%BB%C2%B9+%3D+%3Fa\">https://loogle.lean-fro.org/?q=%7C-+%28%3Fa%E2%81%BB%C2%B9%29%E2%81%BB%C2%B9+%3D+%3Fa</a> has a more informative error message</p>",
        "id": 390881859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694680910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 390882227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694681029
    },
    {
        "content": "<p>(it's a timeout in <code>isDefEq</code>)</p>",
        "id": 390882322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694681053
    },
    {
        "content": "<p>Joachim is the official loogler.</p>",
        "id": 390882330,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694681055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |- (?a⁻¹ : Matrix _ _ _)⁻¹ = ?a</p>",
        "id": 390882582,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694681153
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/NonsingularInverse.html#Matrix.inv_inv_inv\">Matrix.inv_inv_inv</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/NonsingularInverse.html#Matrix.inv_inv_of_invertible\">Matrix.inv_inv_of_invertible</a>, and <a href=\"https://loogle.lean-fro.org/?q=%7C-%20%28%3Fa%E2%81%BB%C2%B9%20%3A%20Matrix%20_%20_%20_%29%E2%81%BB%C2%B9%20%3D%20%3Fa\">1 more</a></p>",
        "id": 390882588,
        "sender_full_name": "loogle",
        "timestamp": 1694681155
    },
    {
        "content": "<p>oh wow that's impressive <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 390883718,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694681537
    },
    {
        "content": "<p>thanks</p>",
        "id": 390883729,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1694681541
    },
    {
        "content": "<p>(note that the 1 more is indeed <code>nonsing_inv_nonsing_inv</code>)</p>",
        "id": 390884620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694681884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> |-  (?a⁻¹)⁻¹ = ?a</p>",
        "id": 390884747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694681930
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 390884806,
        "sender_full_name": "loogle",
        "timestamp": 1694681951
    },
    {
        "content": "<p>So I'm generating too many lemmas here, or what?</p>",
        "id": 390884840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694681964
    },
    {
        "content": "<p>I like the trick to restrict to matrices though, because the user knows they only care about matrices here.</p>",
        "id": 390884897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694681987
    },
    {
        "content": "<p>Honestly, this might be the first time that I successfully loogled something!</p>",
        "id": 390885883,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694682295
    },
    {
        "content": "<p>If you can guess parts of the name, you can make queries much faster:</p>",
        "id": 390886667,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694682568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (?a⁻¹)⁻¹ = ?a, \"Matrix\"</p>",
        "id": 390886673,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694682571
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/NonsingularInverse.html#Matrix.inv_inv_inv\">Matrix.inv_inv_inv</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/NonsingularInverse.html#Matrix.inv_inv_of_invertible\">Matrix.inv_inv_of_invertible</a>, and <a href=\"https://loogle.lean-fro.org/?q=%28%3Fa%E2%81%BB%C2%B9%29%E2%81%BB%C2%B9%20%3D%20%3Fa%2C%20%22Matrix%22\">1 more</a></p>",
        "id": 390886692,
        "sender_full_name": "loogle",
        "timestamp": 1694682576
    },
    {
        "content": "<p>Or mention that you want lemmas involving the <code>Matrix</code> type anywhere:</p>",
        "id": 390886846,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694682610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> (?a⁻¹)⁻¹ = ?a, Matrix</p>",
        "id": 390886863,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694682616
    },
    {
        "content": "<p>Failure! Bot is unavailable</p>",
        "id": 390886921,
        "sender_full_name": "loogle",
        "timestamp": 1694682637
    },
    {
        "content": "<p>Also, because the server is single-threaded, a query can timeout because someone else just runs a long query…<br>\nI can probably make it return a more helpful error message then…</p>",
        "id": 390886994,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694682662
    },
    {
        "content": "<p>I'm now working on formalising the matrix determinant lemma (the adjugate one without assuming A is invertible).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Invertible</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.NonsingularInverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.PosDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.SchurComplement</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CommRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mdl_without_A_invertible</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And i currently has a hand written math proof like this:<br>\n<a href=\"/user_uploads/3121/3EBPSwmEl9Mea1Ly9l2gHiN4/mdl_math_proof.jpg\">mdl_math_proof.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3EBPSwmEl9Mea1Ly9l2gHiN4/mdl_math_proof.jpg\" title=\"mdl_math_proof.jpg\"><img src=\"/user_uploads/3121/3EBPSwmEl9Mea1Ly9l2gHiN4/mdl_math_proof.jpg\"></a></div><p>What is the likelihood of formalizing this proof in LEAN? Or is there a simpler proof?</p>",
        "id": 393202476,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1695722935
    },
    {
        "content": "<p>Up to the usual difficulties of formalizing this seems quite doable. The first few steps with matrix and determinant manipulations would be: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.det#doc\">docs#Matrix.det</a>_fromBlocks₂₂, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.det_updateRow_add#doc\">docs#Matrix.det_updateRow_add</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.det_succ_row_zero#doc\">docs#Matrix.det_succ_row_zero</a>. And from there results in Algebra.BigOperators should take you home.</p>",
        "id": 393206296,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1695724630
    },
    {
        "content": "<p>Whether it's a good idea to follow this route also depends on your goals: do you want to contribute this to Mathlib?</p>",
        "id": 393206515,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1695724754
    },
    {
        "content": "<p>Nice! I had in mind a proof that follows a similar strategy to how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.det_adjugate#doc\">docs#Matrix.det_adjugate</a> is proved, by going through a suitable polynomial</p>",
        "id": 393209332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695725920
    },
    {
        "content": "<p>But I think that might be more work anyway</p>",
        "id": 393209344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695725928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/393206515\">said</a>:</p>\n<blockquote>\n<p>Whether it's a good idea to follow this route also depends on your goals: do you want to contribute this to Mathlib?</p>\n</blockquote>\n<p>thank you for your reply, i already began contribute to mathlib, i will go check the lemmas you gave</p>",
        "id": 393256998,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1695741017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/393209332\">said</a>:</p>\n<blockquote>\n<p>Nice! I had in mind a proof that follows a similar strategy to how <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.det_adjugate#doc\">docs#Matrix.det_adjugate</a> is proved, by going through a suitable polynomial</p>\n</blockquote>\n<p>thank you, i'll check that out</p>",
        "id": 393257269,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1695741078
    },
    {
        "content": "<p>my problem now is i never handled very element wise kind of proof before in LEAN, so my progress is slow</p>",
        "id": 393257417,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1695741113
    },
    {
        "content": "<p>To be clear, I am not claiming that the polynomial proof is necessarily a good approach, and would be happy with your approach too!</p>",
        "id": 393258184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695741266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/393258184\">said</a>:</p>\n<blockquote>\n<p>To be clear, I am not claiming that the polynomial proof is necessarily a good approach, and would be happy with your approach too!</p>\n</blockquote>\n<p>noted, thanks, this occurs to me only because the first step's lemma is already in LEAN <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 393259476,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1695741552
    },
    {
        "content": "<p>not sure if the rest are easy to be formalised or not, i mean my proof</p>",
        "id": 393259651,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1695741593
    },
    {
        "content": "<p>i was trying to formalise the first step of my written proof.<br>\n<span class=\"user-mention silent\" data-user-id=\"620519\">Yufei Liu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/393202476\">said</a>:</p>\n<blockquote>\n<p>And i currently has a hand written math proof like this:<br>\n<a href=\"/user_uploads/3121/3EBPSwmEl9Mea1Ly9l2gHiN4/mdl_math_proof.jpg\">mdl_math_proof.jpg</a></p>\n</blockquote>\n<p>The difficulty is: the lemma i want to apply is all in matrix form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">det_fromBlocks_one₁₁</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Matrix.fromBlocks</span> <span class=\"mi\">1</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">invertibleOne</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_fromBlocks₁₁</span><span class=\"o\">,</span> <span class=\"n\">invOf_one</span><span class=\"o\">,</span> <span class=\"n\">Matrix.mul_one</span><span class=\"o\">,</span> <span class=\"n\">det_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">matrix.det_from_blocks_one₁₁</span> <span class=\"n\">Matrix.det_fromBlocks_one₁₁</span>\n</code></pre></div>\n<p>But i want to apply it when B and C are defined as vector: col u and row v.<br>\nhow do i turn a vector into matrix to apply the matrix lemmas on vectors?</p>",
        "id": 394991991,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1696495438
    },
    {
        "content": "<p>i tried define then as  U: Matrix 0 1 α, but even the variable declaration cannot work, what's wrong about thsi?</p>",
        "id": 394992786,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1696495730
    },
    {
        "content": "<p><code>col u</code> is a matrix when <code>u</code> is a vector</p>",
        "id": 394994914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696496476
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.col#doc\">docs#Matrix.col</a></p>",
        "id": 394994942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696496485
    },
    {
        "content": "<p>oh i see let me try</p>",
        "id": 394995074,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1696496527
    },
    {
        "content": "<p>regarding the issue of formalising the matrix determinant lemma (the adjugate one without assuming A is invertible)<br>\nim currently stuck here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Invertible</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.NonsingularInverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.PosDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.SchurComplement</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CommRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">expand_block</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mdl_without_A_invertible</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">det_fromBlocks_one₁₁</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so the main goal is to complete theorem mdl_without_A_invertible, and where i stuck is to try prove the subgoal of theorem expand_block. It'll involve element-wise matrix manipulation which im not familiar with. Can some one help me? thank you.</p>",
        "id": 397809966,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1697860047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620519\">Yufei Liu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/397809966\">said</a>:</p>\n<blockquote>\n<p>regarding the issue of formalising the matrix determinant lemma (the adjugate one without assuming A is invertible)<br>\nim currently stuck here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Invertible</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.NonsingularInverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.PosDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.SchurComplement</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">CommRing</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">expand_block</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mdl_without_A_invertible</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">det_fromBlocks_one₁₁</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>so the main goal is to complete theorem mdl_without_A_invertible, and where i stuck is to try prove the subgoal of theorem expand_block. It'll involve element-wise matrix manipulation which im not familiar with. Can some one help me? thank you.</p>\n</blockquote>\n<p>To phrase my question better: I was asking how to do cofactor expansion, especially on block matrix, and once expand this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span>\n</code></pre></div>\n<p>i only need the first term: <code>A.det</code> be written so i can cancel it with the left hand side, the rest can be left expanded, since im going to expand them  further anyway</p>",
        "id": 397915865,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1697956468
    },
    {
        "content": "<p>I think we have a handful of lemmas with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.det_fromBlocks#doc\">docs#Matrix.det_fromBlocks</a> as a prefix; do any of them help?</p>",
        "id": 397920812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697960768
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/SchurComplement.html#Matrix.det_fromBlocks_one%E2%82%81%E2%82%81\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/SchurComplement.html#Matrix.det_fromBlocks_one%E2%82%81%E2%82%81</a> looks like the one</p>",
        "id": 397920838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697960805
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/gL_NLsSUdwbe9LEneEKqEkwa/image.png\">image.png</a><br>\nwell the last step i was at is trying to convert (A - (- col u) * row v).det into block form so that i can isolate A.det out via expansion. I just want to know is there anyway i can do cofactor expansion on block matrix directly?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gL_NLsSUdwbe9LEneEKqEkwa/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/gL_NLsSUdwbe9LEneEKqEkwa/image.png\"></a></div>",
        "id": 397996531,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1698028700
    },
    {
        "content": "<p>i've found the cofactor expansion lemma in mathlib that i want to apply:<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Determinant.html#Matrix.det_succ_row_zero\">docs#Matrix.det_succ_row_zero</a><br>\n, but due to syntax error i cannot rewrite this statement on my current goal properly.</p>\n<p>i'm referring to the last line of the below code, where i want to apply cofactor expansion to a fromblock matrix</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Invertible</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.NonsingularInverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.PosDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.SchurComplement</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">z</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">Finset</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- theorem i want to apply: -/</span>\n\n<span class=\"c1\">-- theorem det_succ_row_zero {n : ℕ} (A : Matrix (Fin n.succ) (Fin n.succ) R) :</span>\n<span class=\"c1\">--     det A = ∑ j : Fin n.succ, (-1) ^ (j : ℕ) * A 0 j * det (A.submatrix Fin.succ j.succAbove)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mdl_without_A_invertible</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">det_fromBlocks_one₁₁</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mdl_without_A_invertible_Fin</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">det_fromBlocks_one₁₁</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_succ_row_zero</span> <span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>you can see there's two version of mdl_without_A_invertible here, one without specifying {m : ℕ}  and one with.<br>\nthe second one <code>mdl_without_A_invertible_Fin? </code> is my current goal and i modify it from my original <code>mdl_without_A_invertible</code> to match the variable setting of the lemma i want to apply: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Determinant.html#Matrix.det_succ_row_zero\">docs#Matrix.det_succ_row_zero</a></p>\n<p>there are 2 questions i have:</p>\n<ol>\n<li>\n<p>why i cannot use  (A : Matrix m m R) anymore when i specify {m : ℕ} ? i have to use (A : Matrix (Fin m) (Fin m) R)  instead? what's the type theory logic here?</p>\n</li>\n<li>\n<p>i notice that the fromblocks matrix has dimention <code>@fromBlocks Unit (Fin m) Unit (Fin m) R 1 (row v) (-col u) A : Matrix (Unit ⊕ Fin m) (Unit ⊕ Fin m) R</code>, but <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Matrix/Determinant.html#Matrix.det_succ_row_zero\">docs#Matrix.det_succ_row_zero</a> has dimension <code>A : Matrix (Fin (Nat.succ n)) (Fin (Nat.succ n)) R</code><br>\nis <code>(Unit ⊕ Fin m)</code> and <code>Fin(m.succ)</code> the same thing? i guess it's not and probably this type mismatch is why it cause a rewrite error. If so, how can i fix this?</p>\n</li>\n</ol>",
        "id": 399421309,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1698723754
    },
    {
        "content": "<ol>\n<li>Matrices in mathlib are indexed by a type, like you declared in your first variable line. If you then say \"no, m is instead a natural number\", then you can no longer use it as an indexing type</li>\n</ol>",
        "id": 399439783,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698735688
    },
    {
        "content": "<blockquote>\n<p>is <code>(Unit ⊕ Fin m)</code> and <code>Fin(m.succ)</code> the same thing? i guess it's not and probably this type mismatch is why it cause a rewrite error. If so, how can i fix this?</p>\n</blockquote>\n<p>They are indeed different types that happen to have the same number of elements. So you can make a bijection and then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Matrix.reindex#doc\">docs#Matrix.reindex</a> to change the indexing types. Let me figure out the best way to construct this bijection...</p>",
        "id": 399440535,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698736007
    },
    {
        "content": "<p>Let's go for something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.sumComm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.sumCongr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fintype.equivFinOfCardEq</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"n\">finSumFinEquiv</span>\n</code></pre></div>",
        "id": 399441595,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698736594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/matrix.20determinant.20lemma/near/399441595\">said</a>:</p>\n<blockquote>\n<p>Let's go for something like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.sumComm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.sumCongr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fintype.equivFinOfCardEq</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"n\">finSumFinEquiv</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<ol>\n<li>is this a definition or a proof of <code>Unit ⊕ Fin m ≃ Fin (m + 1)</code>? i see it's a def, but everything after the  <code>Unit ⊕ Fin m ≃ Fin (m + 1):</code> is considered a proof of this def? or construction process using definition of Unit and Fin's original definition? that can be considered as a proof?</li>\n<li>Since ive never seen such syntax before, and i dont understand a single part of this code after the colon.  I just wonder is there any tutorial to help me understand this code?</li>\n<li>still don't know how to apply reindex after i put your code in front of mine. basically i want to change this <code>fromBlocks 1 v (-u) A</code> 's (not even explicitly written in previous variable declaration since it's a byproduct of a rewrite tactic, it's on the left hand side of the most recent goal.) dimention from Unit ⊕ Fin m  to  Fin (m + 1). I've never altered a variable's setup before, can you teach me how to do that?</li>\n</ol>",
        "id": 399450510,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1698740957
    },
    {
        "content": "<p><code>≃</code> is a type, so you get definitions, not proofs</p>",
        "id": 399452260,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698741755
    },
    {
        "content": "<blockquote>\n<p>is this a definition or a proof of Unit ⊕ Fin m ≃ Fin (m + 1)? i see it's a def, but everything after the Unit ⊕ Fin m ≃ Fin (m + 1): is considered a proof of this def? or construction process using definition of Unit and Fin's original definition? that can be considered as a proof?</p>\n</blockquote>\n<p>There may be less difference than you think! It's definitely a definition, since it gives a name (<code>unitSumFinEquiv</code>) to an object (whatever comes after the <code>:=</code> sign). But you can say it is also a proof that <code>Unit ⊕ Fin m</code> and <code>Fin (m + 1)</code> are in bijection. And this proof consists of constructing the map. Ruben is right in the technical aspect, that for Lean's logic we have to use <code>def</code> instead of <code>theorem</code>.</p>",
        "id": 399452612,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698741927
    },
    {
        "content": "<blockquote>\n<p>Since ive never seen such syntax before, and i dont understand a single part of this code after the colon. I just wonder is there any tutorial to help me understand this code?</p>\n</blockquote>\n<p>You are right that I used quite a few complicated Lean features. Here's an attempt at using nothing more than function application:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">Equiv.sumComm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">Equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">Equiv.sumCongr</span> <span class=\"o\">(</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fintype.equivFinOfCardEq</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n      <span class=\"n\">finSumFinEquiv</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399452924,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698742084
    },
    {
        "content": "<p>The <code>&lt;|</code> operator is basically a shortcut for parentheses: <code>f x &lt;| g y = ((f x) (g y))</code>. <code>(Equiv.sumComm _ _).trans</code> is an abbreviation for <code>Equiv.trans (Equiv.sumComm _ _)</code>, and <code>.refl _</code> is a shortcut for <code>Equiv.refl _</code>.</p>",
        "id": 399453115,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698742189
    },
    {
        "content": "<p>I am sure this is explained much better in Functional Programming in Lean: <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">#fpil</a></p>",
        "id": 399453205,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698742219
    },
    {
        "content": "<p>although i still cannot fully understand this because ive never done functional programming in lean bofore, but still thank you very much for the explanation. I think my current focus is on completing this proof, may i ask how can apply unitSumFinEquiv to my current goal? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Matrix.Invertible</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.NonsingularInverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.PosDef</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.LinearAlgebra.Matrix.SchurComplement</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">z</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">Finset</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.sumComm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.sumCongr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fintype.equivFinOfCardEq</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"n\">finSumFinEquiv</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mdl_without_A_invertible_Fin</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eₘ</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">det_fromBlocks_one₁₁</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_fin_one</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> how do i make the next line work? i know i need reindex but dont know how to apply.-/</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_succ_row_zero</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399454829,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1698742866
    },
    {
        "content": "<blockquote>\n<p>still don't know how to apply reindex after i put your code in front of mine. basically i want to change this <code>fromBlocks 1 v (-u) A</code> 's (not even explicitly written in previous variable declaration since it's a byproduct of a rewrite tactic, it's on the left hand side of the most recent goal.) dimention from Unit ⊕ Fin m to Fin (m + 1). I've never altered a variable's setup before, can you teach me how to do that?</p>\n</blockquote>\n<p>You actually cannot change the type of a term! We will have the type <code>fromBlocks 1 v (-u) A : Matrix (Unit ⊕ Fin m) (Unit ⊕ Fin m) R</code> and never have the type <code>fromBlocks 1 v (-u) A : Matrix (Fin (m+1)) (Fin (m+1)) R</code>. But with <code>reindex</code> we can make a new term: <code>Matrix.reindex (fromBlocks 1 v (-u) A) unitSumFinEquiv unitSumFinEquiv : Matrix (Fin (m+1)) (Fin (m+1)) R</code>.</p>\n<p>How do we get that term into your goal? Well, we can use <code>rw</code>, just like you used <code>rw</code> to introduce <code>fromBlocks</code> using <code>det_fromBlocks_one₁₁</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">z</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">Finset</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.sumComm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"o\">(</span><span class=\"n\">Equiv.sumCongr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fintype.equivFinOfCardEq</span> <span class=\"n\">rfl</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"n\">finSumFinEquiv</span>\n\n<span class=\"sd\">/-- theorem i want to apply: -/</span>\n\n<span class=\"c1\">-- theorem det_succ_row_zero {n : ℕ} (A : Matrix (Fin n.succ) (Fin n.succ) R) :</span>\n<span class=\"c1\">--     det A = ∑ j : Fin n.succ, (-1) ^ (j : ℕ) * A 0 j * det (A.submatrix Fin.succ j.succAbove)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mdl_without_A_invertible</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">det_fromBlocks_one₁₁</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mdl_without_A_invertible_Fin</span><span class=\"bp\">?</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n      <span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"bp\">*</span>\n      <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">submatrix</span> <span class=\"o\">(</span><span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n        <span class=\"n\">Fin.succ</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">det_fromBlocks_one₁₁</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Matrix.det_reindex_self</span> <span class=\"n\">unitSumFinEquiv</span><span class=\"o\">,</span> <span class=\"n\">det_succ_row_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 399455381,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1698743037
    },
    {
        "content": "<p>As presumably was intended, you've sniped someone (me) into making a computable version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.sumComm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Equiv.sumCongr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Equiv.equivPUnit</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">finSumFinEquiv</span>\n</code></pre></div>",
        "id": 399457502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698743874
    },
    {
        "content": "<p>how do i split sum? that is to say express sum over set A+set B = sum over set A + sum over set B?</p>\n<p>my goal is to solve h4, perhaps h3 can help? (or is h3 the right syntax?)</p>\n<p>another question is because i use too much <code>reindex unitSumFinEquiv unitSumFinEquiv (fromBlocks 1 (row v) (-col u) A)</code> in my writing, i want to simplify it by giving it a new name, see <code> def sub_mm</code>. But apparently there's a syntax error. how to fix this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">z</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Equiv</span> <span class=\"n\">Equiv.Perm</span> <span class=\"n\">Finset</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Matrix</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Matrix</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.sumComm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Equiv.sumCongr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Equiv.equivPUnit</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">finSumFinEquiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sub_mm</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">}{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mdl_without_A_invertible_Fin_3</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mulVec</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">col</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n      <span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"bp\">*</span>\n      <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">submatrix</span> <span class=\"o\">(</span><span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">Fin.succ</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">det_fromBlocks_one₁₁</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Matrix.det_reindex_self</span> <span class=\"n\">unitSumFinEquiv</span><span class=\"o\">,</span> <span class=\"n\">det_succ_row_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\">Perhaps this h3 can help h4?-/</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">Ico</span> <span class=\"mi\">2</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\">seperate the first term of the summation:</span>\n<span class=\"cm\">  ∑ j : Fin (m + 1), (-1) ^ (j : ℕ) * blah =</span>\n<span class=\"cm\">  ∑ j : Fin (1), (-1) ^ (j : ℕ) * blah +   ∑ j : Fin (m), (-1) ^ (j+1 : ℕ) * blah-/</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n    <span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"bp\">*</span>\n      <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">submatrix</span> <span class=\"o\">(</span><span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">Fin.succ</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"bp\">*</span>\n      <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">submatrix</span> <span class=\"o\">(</span><span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">Fin.succ</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n      <span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"bp\">*</span>\n      <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">submatrix</span> <span class=\"o\">(</span><span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">Fin.succ</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">j</span> <span class=\"bp\">*</span>\n      <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">submatrix</span> <span class=\"o\">(</span><span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">Fin.succ</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span>\n      <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">submatrix</span> <span class=\"o\">(</span><span class=\"n\">reindex</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"n\">unitSumFinEquiv</span> <span class=\"o\">(</span><span class=\"n\">fromBlocks</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">col</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">Fin.succ</span> <span class=\"o\">(</span><span class=\"n\">Fin.succAbove</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 401675478,
        "sender_full_name": "Yufei Liu",
        "timestamp": 1699845559
    },
    {
        "content": "<p><code>rw?</code> seems to immediately find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Fin.sum_univ_add</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 401700040,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699859003
    },
    {
        "content": "<p>Though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Fin.sum_univ_succ</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>might be nicer</p>",
        "id": 401700148,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699859062
    }
]