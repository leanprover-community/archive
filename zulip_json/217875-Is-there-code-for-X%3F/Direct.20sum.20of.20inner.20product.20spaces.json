[
    {
        "content": "<p>Do we have an inner product space structure on the direct sum of finitely many inner product spaces?</p>",
        "id": 382265195,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691292319
    },
    {
        "content": "<p>I also could not find direct sums of submodules of different modules.</p>\n<p>Would it be useful to add these two to the library?</p>",
        "id": 382269026,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691294957
    },
    {
        "content": "<p>I don't think we want the second. If you want to take the direct sum of submodules of different modules, you should just forget they are submodules and take their direct sum as modules.</p>",
        "id": 382277545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691300808
    },
    {
        "content": "<p>I think this is a good argument for dropping <code>PiLp</code> and replacing it with <code>WithLp (Π i, A i)</code>, <code>WithLp (A × B)</code>, <code>WithLp (⊕ I, A I)</code> etc</p>",
        "id": 382292934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691308659
    },
    {
        "content": "<p>Though I imagine like <code>Lex</code>, it doesn't really deduplicate anything besides spelling</p>",
        "id": 382293044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691308719
    },
    {
        "content": "<p>I agree with you that this is the right design, though. I believe we already mentioned it a few months back.</p>",
        "id": 382293150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691308788
    },
    {
        "content": "<p>I'm stuck without an innerproduct structure on direct sums/products. I'll try to implement some minimal structure and see how it goes.</p>",
        "id": 382342496,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691322979
    },
    {
        "content": "<p>Can you just use the inner product on the correponding <code>PiLp</code> space instead?</p>",
        "id": 382343568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691323256
    },
    {
        "content": "<p>I'll read this file carefully and see if it helps.</p>\n<p>The same suggests that these are products of L^p space. The proof I'm working on is for general Hilbert spaces though. They don't have a natural L^p norm on them.</p>",
        "id": 382346088,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691323919
    },
    {
        "content": "<p>Got it, your problem is that you have direct sums with finite support over an infinite space</p>",
        "id": 382346293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691323977
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 382346345,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691323991
    },
    {
        "content": "<p>I could restrict to finite dimensional spaces for now ...</p>",
        "id": 382346441,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691324025
    },
    {
        "content": "<p>Where this comes up is that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a cone in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is a cone in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>⊕</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">K \\oplus L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> needs to be a cone in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>⊕</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">V \\oplus W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> and moreover we should get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>K</mi><mo>⊕</mo><mi>L</mi><msup><mo stretchy=\"false\">)</mo><mo>∗</mo></msup><mo>≅</mo><msup><mi>K</mi><mo>∗</mo></msup><mo>⊕</mo><msup><mi>L</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">(K \\oplus L)^* \\cong K^* \\oplus L^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.772em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>. But to make sense of the duals, we need an inner product on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>⊕</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">V \\oplus W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span>.</p>",
        "id": 382347049,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691324191
    },
    {
        "content": "<p>Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> are just Hilbert spaces.</p>",
        "id": 382347161,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691324221
    },
    {
        "content": "<p>Wait, do you mean a binary direct sum (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod#doc\">docs#Prod</a>) instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum#doc\">docs#DirectSum</a> ?</p>",
        "id": 382349022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691324721
    },
    {
        "content": "<p>Either should be fine tbh.</p>",
        "id": 382349828,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691324924
    },
    {
        "content": "<p>I don't think I'll be taking direct sums over infinite indices, so the two are isomorphic for the case I need.</p>",
        "id": 382350060,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691324997
    },
    {
        "content": "<p>Do we have an inner product space structure on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod#doc\">docs#Prod</a> of inner product spaces?</p>",
        "id": 382350411,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691325089
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6136\">mathlib4#6136</a></p>",
        "id": 382351410,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1691325358
    },
    {
        "content": "<p>Perfect!! Thank you</p>",
        "id": 382359224,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691327491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Direct.20sum.20of.20inner.20product.20spaces/near/382350060\">said</a>:</p>\n<blockquote>\n<p>I don't think I'll be taking direct sums over infinite indices, so the two are isomorphic for the case I need.</p>\n</blockquote>\n<p>Yes but they're not definitionally equal! So it still makes a big difference.</p>",
        "id": 382375369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691332142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Direct.20sum.20of.20inner.20product.20spaces/near/382293044\">said</a>:</p>\n<blockquote>\n<p>Though I imagine like <code>Lex</code>, it doesn't really deduplicate anything besides spelling</p>\n</blockquote>\n<p>Actually this isn't true at all, it deduplicates all the boring code that copies across the module structure</p>",
        "id": 382395145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691337515
    },
    {
        "content": "<p>So maybe we should make this refactor before <a href=\"https://github.com/leanprover-community/mathlib4/pull/6136\">#6136</a></p>",
        "id": 382395229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691337555
    },
    {
        "content": "<p>Sounds sensible to me</p>",
        "id": 382403247,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691340022
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/tree/eric-wieser%2FWithLp\">branch#eric-wieser/WithLp</a> has a start, feel free to push further to it</p>",
        "id": 382404792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691340534
    },
    {
        "content": "<p>Let me just indicate that the reason we don't have direct sums of inner product spaces is because in most cases what we really care about are Hilbert spaces, and in general the algebraic direct sum of Hilbert spaces is not an Hilbert space, and its completion is exactly <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiLp#doc\">docs#PiLp</a> with <code>p = 2</code></p>",
        "id": 382428231,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691349419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Direct.20sum.20of.20inner.20product.20spaces/near/382428231\">said</a>:</p>\n<blockquote>\n<p>Let me just indicate that the reason we don't have direct sums of inner product spaces is because in most cases what we really care about are Hilbert spaces, and in general the algebraic direct sum of Hilbert spaces is not an Hilbert space, and its completion is exactly <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiLp#doc\">docs#PiLp</a> with <code>p = 2</code></p>\n</blockquote>\n<p>This is helpful, thanks! From the name at least I don't understand what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PiLp#doc\">docs#PiLp</a> is - I thought this was a very specific metric space. I'll need to read more about this object and it's adjacent defs.</p>",
        "id": 382433434,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1691351967
    }
]