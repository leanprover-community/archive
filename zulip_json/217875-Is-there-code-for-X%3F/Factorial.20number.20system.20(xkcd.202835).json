[
    {
        "content": "<p>I was expecting someone would already have asked for this  now: <a href=\"https://xkcd.com/2835/\">https://xkcd.com/2835/</a> - are those numbers in mathlib?<br>\nMy very newbie attempt would be the following (sub)types, but I guess there is a more elegant way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">digit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">factorial</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">digit</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">factorial</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩)⟩,</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">plusOne</span> <span class=\"o\">:</span> <span class=\"n\">factorial</span> <span class=\"bp\">→</span> <span class=\"n\">factorial</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 394109394,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1696103519
    },
    {
        "content": "<p>I don't see anything about factoriadics in mathlib or in the Zulip search.</p>",
        "id": 394109708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696103847
    },
    {
        "content": "<p>A few thoughts:</p>\n<ul>\n<li>Instead of <code>digit</code>, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin\">docs3#fin</a></li>\n<li>Using a sigma type like that means that numbers have multiple representations, which isn't great if you want equivalent numbers to be equal. An alternative is to define a structure where the first field is a dependent function <code>Π n, fin (n + 1)</code> and the second is the proposition that this function for large enough <code>n</code> is constant <code>0</code>. Mathlib has the equivalent <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs3#finsupp</a> for setting this up in a slightly different way using finsets.</li>\n<li>Mathlib has been ported to Lean 4, so you might consider switching over to Lean 4 too <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></li>\n</ul>",
        "id": 394109986,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1696104182
    },
    {
        "content": "<p>Pretty sure I had a Lean 3 version at some point somewhere. I think it's a good exercise to work it out!</p>",
        "id": 394112097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696106866
    },
    {
        "content": "<p>Yaël, since you seem to have proofs for everything lying around, do you happen to have FLT hidden somewhere? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 394112423,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696107274
    }
]