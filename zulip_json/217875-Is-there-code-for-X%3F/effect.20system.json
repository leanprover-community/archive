[
    {
        "content": "<p>To get more familiar with Lean, I want to start writing an effect system ala Haskell's fused-effects, has anybody tried that and/or has any warnings/ ideas?</p>",
        "id": 383318912,
        "sender_full_name": "MangoIV",
        "timestamp": 1691593372
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/algebraic.20effects.20and.20handlers.3F/near/231512479\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/algebraic.20effects.20and.20handlers.3F/near/231512479</a></p>",
        "id": 383397846,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691609035
    },
    {
        "content": "<p>Yeah, it would be identical to mtl in terms of performance</p>",
        "id": 383398252,
        "sender_full_name": "MangoIV",
        "timestamp": 1691609149
    },
    {
        "content": "<p>So we get it to be fast if we specialise.</p>",
        "id": 383398346,
        "sender_full_name": "MangoIV",
        "timestamp": 1691609167
    },
    {
        "content": "<p>But if that’s already done then I don’t think there’s a fundamental issue?</p>",
        "id": 383398428,
        "sender_full_name": "MangoIV",
        "timestamp": 1691609189
    },
    {
        "content": "<p>further below there was this attempt at already doing it: <a href=\"https://git.envs.net/iacore/lean-eff\">https://git.envs.net/iacore/lean-eff</a></p>",
        "id": 383398477,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691609201
    },
    {
        "content": "<p>I’ve seen this but this seems to be Free monad based which is expected to be slow because of passes linear in effects</p>",
        "id": 383398725,
        "sender_full_name": "MangoIV",
        "timestamp": 1691609267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> do you know whether there’s a specific reason why it would be slower than mtl-style which I gather is what lean does?</p>",
        "id": 383401518,
        "sender_full_name": "MangoIV",
        "timestamp": 1691610117
    },
    {
        "content": "<p>I don't know specific reasons myself no.</p>",
        "id": 383402259,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691610362
    },
    {
        "content": "<p><a href=\"https://people.cs.kuleuven.be/~tom.schrijvers/Research/papers/mpc2015.pdf\">https://people.cs.kuleuven.be/~tom.schrijvers/Research/papers/mpc2015.pdf</a> says: </p>\n<blockquote>\n<p>Strict Languages In the absence of lazy evaluation, the inductive datatype<br>\ndefinition of the free monad is not practical.<br>\nKammar et al. [9] briefly sketch an implementation based on delimited contin-<br>\nuations. Schrijvers et al. [17 ] show the equivalence between a delimited continua-<br>\ntions approach and the inductive datatype; hence the fusion technique presented<br>\nin this paper is in principle possible. However, in practice, the codensity monad<br>\nused for fusion is likely not efficient in strict languages. Hence, effective fusion<br>\nfor strict languages remains to be investigated</p>\n</blockquote>\n<p>I'll see how it goes heh</p>",
        "id": 383496997,
        "sender_full_name": "MangoIV",
        "timestamp": 1691644903
    }
]