[
    {
        "content": "<p>Is something like the following somewhere in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">AddMonoid.domain_apply</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∑</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>I'm not too sure what to call this, but this is the operation that happens when e.g. <code>g x</code> is a quantum state that depends on a classical label <code>x</code>, and we apply a function to the classical label.</p>",
        "id": 401676745,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1699846275
    },
    {
        "content": "<p>Not directly, but there's a few lemmas about functions like this that might be useful to you, usually with the name 'fiberwise' in there somewhere</p>",
        "id": 401811743,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699895562
    },
    {
        "content": "<p>Actually, there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.mapDomain#doc\">docs#Finsupp.mapDomain</a></p>",
        "id": 402170280,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700035765
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 402260938,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1700060086
    },
    {
        "content": "<p>You may want to combine it with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.equivFunOnFinite#doc\">docs#Finsupp.equivFunOnFinite</a> :)</p>",
        "id": 402266005,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700061332
    }
]