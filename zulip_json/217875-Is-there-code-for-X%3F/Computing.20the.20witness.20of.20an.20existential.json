[
    {
        "content": "<p>Say I have a finite type <code>A</code>, a decidable property <code>p : A -&gt; Prop </code> and a proof of <code>exists a, P a</code>, do we have code to compute an element <code>a : A</code> that satisfies <code>P a</code>?</p>",
        "id": 378503042,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690296333
    },
    {
        "content": "<p>It's not possible, because what if there are two elements that satisfy <code>P</code>?</p>",
        "id": 378504050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690296495
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.choose#doc\">docs#Fintype.choose</a> is the version that is possible</p>",
        "id": 378504092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690296503
    },
    {
        "content": "<p>Thanks! My existential should be unique, so that works</p>",
        "id": 378504615,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690296596
    },
    {
        "content": "<p>I should have phrased my question slightly different, maybe. I don't care that the element that is returned is the same as the witness, just that I can compute any element that satisfies <code>P a</code>. That should still be possible in the non-unique case, shouldn't it?</p>",
        "id": 378505482,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690296730
    },
    {
        "content": "<p>If there are two matching elements, which one should it return?</p>",
        "id": 378505762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690296778
    },
    {
        "content": "<p>Ah, <code>Finset</code> is (transitively) implemented as a quotient, so our choice has to be irrespective of the ordering of the elements. That is problematic, yeah.</p>",
        "id": 378506732,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690296923
    },
    {
        "content": "<p>It would work if we have a <code>FinEnum A</code> instance , then we can just pick the first element (according to the enumeration) that satisfies <code>P</code></p>",
        "id": 378507170,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690297005
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 378507973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690297149
    }
]