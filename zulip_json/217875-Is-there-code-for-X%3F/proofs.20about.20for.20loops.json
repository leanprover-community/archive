[
    {
        "content": "<p>Does anyone have advice about how to proceed with problems like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"n\">for</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">C</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">B.zip</span> <span class=\"n\">C</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">a</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">eval'</span> <span class=\"n\">a</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Presumably we will eventually have a library of lemmas about for loops that transform common idioms into the functional style.</p>\n<p>But we don't have that yet, right?</p>\n<p>What would you do if faced with this now?</p>",
        "id": 390634764,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694573678
    },
    {
        "content": "<p>Did you want <code>eval'</code> to take <code>Int</code> values?  And <code>B, C</code> are <code>Nat</code>s in <code>eval</code> and <code>Int</code>s in <code>eval'</code>?</p>",
        "id": 390638554,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694575810
    },
    {
        "content": "<p>Sorry, copy-paste errors! All just in Nat.</p>",
        "id": 390638653,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694575888
    },
    {
        "content": "<p>EDIT: ignore me -- I did not know what <code>for b in B, c in C do</code> meant<br>\nAlso:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">B.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">B.map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Nat.cast</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n  <span class=\"n\">eval</span> <span class=\"n\">a</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">eval'</span> <span class=\"n\">a</span> <span class=\"n\">B'</span> <span class=\"n\">C'</span>\n</code></pre></div>",
        "id": 390638777,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694575980
    },
    {
        "content": "<p>Should using <code>B</code> twice, instead of <code>B</code> and <code>C</code> be good?</p>",
        "id": 390638817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694576016
    },
    {
        "content": "<p>(Note that I don't know that I'll be able to help with the proof, but I'm trying to understand at least the statement!)</p>",
        "id": 390638907,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694576055
    },
    {
        "content": "<p>I tried this a little, but failed.  These are my thoughts -- they are certainly a subset of yours, but maybe it helps to see them written down!</p>\n<ul>\n<li>Working with <code>List</code> rather than <code>Array</code> seems better for proofs.  In particular, <code>eval'</code> for <code>List</code>s (i.e. <code>List.foldl</code>) has already some API also for its <code>TR</code> version.</li>\n<li>Even the version where you compare the <code>List.foldl (· + ·)</code> to the sum of a single list is a struggle!</li>\n</ul>\n<p>That's all I have... <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 390648891,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694582608
    },
    {
        "content": "<p>Here's the prototypical example of \"how do I prove things about for loops!?\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">relaxedAutoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n      <span class=\"n\">for</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">bs</span> <span class=\"k\">do</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">r</span> <span class=\"n\">b</span>\n      <span class=\"n\">return</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">bs.foldl</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Suggestions welcome!</p>",
        "id": 390700572,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694603995
    },
    {
        "content": "<p>I'm beginning to see how one would do this. We have things like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.SatisfiesM_foldlM#doc\">docs#Array.SatisfiesM_foldlM</a> already (heroic work by Mario!), but don't yet have a corresponding <code>Array.SatisfiesM_forIn</code> (not that I'm even sure what that would say!). But I think that would be the first step.</p>",
        "id": 390703596,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694605107
    },
    {
        "content": "<p>See the discussion at <a href=\"#narrow/stream/270676-lean4/topic/Proof.20of.20program\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Proof.20of.20program</a></p>",
        "id": 390712596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694608174
    },
    {
        "content": "<p>The key step in <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s answer there unfortunately doesn't work with today's <code>Std</code>. I wonder if the \"with some new lemmas in Std\" that he referred to in that message didn't actually make it to Std. :-)</p>",
        "id": 390715597,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694609213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> The new lemmas did make it to Std, but something seems to have broken the base case, <code>List.range'</code> isn't simplifying like it used to. This proof works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Range.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Lemmas</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">i</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sum_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"n\">acc</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">acc</span> <span class=\"bp\">→</span>\n      <span class=\"n\">Id.run</span> <span class=\"o\">(</span><span class=\"n\">forIn</span> <span class=\"o\">(</span><span class=\"n\">List.range'</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">acc</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">yield</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span>\n      <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Std.Range.forIn_eq_forIn_range'</span><span class=\"o\">,</span> <span class=\"n\">Std.Range.numElems_step_1</span><span class=\"o\">]</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_eq_of_eq_mul_right</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">intro</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">e</span> <span class=\"n\">ih</span> <span class=\"n\">hr</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">i</span> <span class=\"n\">acc</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">forIn</span><span class=\"o\">,</span> <span class=\"n\">Id.run</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.range'</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">next</span> <span class=\"n\">l</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">e</span>\n    <span class=\"n\">refine</span> <span class=\"n\">IH</span> <span class=\"n\">i.succ</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hr</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_add</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_mul</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 390784266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694631569
    },
    {
        "content": "<p>the \"new lemma\" in question is <code>Std.Range.forIn_eq_forIn_range'</code></p>",
        "id": 390784672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694631719
    }
]