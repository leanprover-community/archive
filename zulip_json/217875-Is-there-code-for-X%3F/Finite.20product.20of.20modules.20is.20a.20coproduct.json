[
    {
        "content": "<p>I'm looking for something saying that <code>X -&gt; M</code> is the coproduct of copies of <code>M</code> when <code>X</code> is finite, i.e. I define maps into <code>N</code> by defining <code>#X</code> maps <code>M -&gt; N</code>.</p>",
        "id": 359698640,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684510523
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/inear_equiv.Pi_congr_right\">docs#inear_equiv.Pi_congr_right</a> is close, right?</p>",
        "id": 359699395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684510702
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.category_theory.limits.has_finite_biproducts\">docs#Module.category_theory.limits.has_finite_biproducts</a> ?</p>",
        "id": 359699420,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684510711
    },
    {
        "content": "<p>Are you looking for the category_theory statement or the regular algebra one?</p>",
        "id": 359699581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684510752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20product.20of.20modules.20is.20a.20coproduct/near/359699395\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/inear_equiv.Pi_congr_right\">docs#inear_equiv.Pi_congr_right</a> is close, right?</p>\n</blockquote>\n<p>No, that's true in any category, the thing I want is particular to categories with biproducts. I'm trying not to import category theory, so I just want an algebraic thing.</p>",
        "id": 359699722,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684510790
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_module\">docs#direct_sum.to_module</a> is another contender, if you're willing to hand wave over pi types vs direct sums</p>",
        "id": 359699823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684510807
    },
    {
        "content": "<p>And it's clones <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.lsum\">docs#dfinsupp.lsum</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.lsum\">docs#finsupp.lsum</a></p>",
        "id": 359699944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684510838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20product.20of.20modules.20is.20a.20coproduct/near/359699823\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.to_module\">docs#direct_sum.to_module</a> is another contender, if you're willing to hand wave over pi types vs direct sums</p>\n</blockquote>\n<p>I'm not, I basically want the fact that pi-types are isomorphic to finite sums.</p>",
        "id": 359699976,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684510846
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.equiv_fun_on_fintype\">docs#dfinsupp.equiv_fun_on_fintype</a> does the hand-wave, but annoyingly isn't linear</p>",
        "id": 359700181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684510912
    },
    {
        "content": "<p>I'm shocked we don't have this.</p>",
        "id": 359700380,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684510962
    },
    {
        "content": "<p>I remember looking for this in the past and being shocked too</p>",
        "id": 359700410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684510972
    },
    {
        "content": "<p>I also don't remember whether I then found it</p>",
        "id": 359700433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684510979
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11744\">https://github.com/leanprover-community/mathlib/pull/11744</a></p>",
        "id": 359700598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684511024
    },
    {
        "content": "<p>That gives <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.noncomm_pi_coprod\">docs#add_monoid_hom.noncomm_pi_coprod</a></p>",
        "id": 359700838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684511075
    },
    {
        "content": "<p>Aha! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.lsum\">docs#linear_map.lsum</a></p>",
        "id": 359700920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684511096
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.linear_equiv_fun_on_finite\">docs#finsupp.linear_equiv_fun_on_finite</a></p>",
        "id": 359700982,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684511113
    },
    {
        "content": "<p><code>linear_map.lsum : (Π i, φ i →ₗ[R] M) ≃ₗ[S] ((Π i, φ i) →ₗ[R] M)</code> is what you want, right?</p>",
        "id": 359701092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684511149
    },
    {
        "content": "<p>Yes</p>",
        "id": 359701243,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684511181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20product.20of.20modules.20is.20a.20coproduct/near/359700598\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11744\">https://github.com/leanprover-community/mathlib/pull/11744</a></p>\n</blockquote>\n<p>I found this by searching zulip for <code>coprod copi</code>, and then its docstrings had enough breadcrumbs to find what you wanted</p>",
        "id": 359701370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684511219
    },
    {
        "content": "<p><code>LinearMap.lsum</code> is a bit annoying because I don't care about <code>S</code> linearity, but it's not that bad</p>",
        "id": 359702099,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684511390
    },
    {
        "content": "<p>Now I need to define a linearMap out of <code>R</code> by defining a point.</p>",
        "id": 359702824,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1684511531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20product.20of.20modules.20is.20a.20coproduct/near/359702099\">said</a>:</p>\n<blockquote>\n<p><code>LinearMap.lsum</code> is a bit annoying because I don't care about <code>S</code> linearity, but it's not that bad</p>\n</blockquote>\n<p>Setting <code>S = nat</code> is an easy way out, if your <code>R</code> isn't commutative</p>",
        "id": 359703813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684511768
    }
]