[
    {
        "content": "<p>I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">choose_element</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">truncOfCardPos</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span>\n</code></pre></div>\n<p>but that <code>truncOfCardPos</code> thing seems kind of ugly. Is there a better way?</p>",
        "id": 388552956,
        "sender_full_name": "David Renshaw",
        "timestamp": 1693583623
    },
    {
        "content": "<p>Isn't there a <code>Nonempty</code> instance you can use?</p>",
        "id": 388553138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693583685
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">choose_element</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nonempty.some</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Iff.mp</span> <span class=\"n\">Fintype.card_pos_iff</span> <span class=\"n\">hs</span>\n</code></pre></div>",
        "id": 388553538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693583823
    },
    {
        "content": "<p>I don't know if that's necessarily better?</p>",
        "id": 388553552,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693583830
    },
    {
        "content": "<p>yeah, that seems a bit more readable to me</p>",
        "id": 388553804,
        "sender_full_name": "David Renshaw",
        "timestamp": 1693583919
    },
    {
        "content": "<p>There's also changing <code>hs</code> to <code>Nonempty</code> inside your proof and then using <code>Classical.arbitrary</code>.</p>\n<p>I'm not suggesting making this definition, but the body is meant to simulate how it'd look in a proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">choose_element</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.card_pos_iff.mp</span> <span class=\"n\">hs</span> <span class=\"c1\">-- or `rw [Fintype.card_pos_iff] at hs` in a tactic proof</span>\n  <span class=\"n\">Classical.arbitrary</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 388553989,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693584002
    },
    {
        "content": "<p>There's also stuff like using the <code>inhabit</code> tactic to lift it to an <code>Inhabited</code> instance, which gives you <code>default</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">choose_element</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_pos_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span>\n  <span class=\"n\">inhabit</span> <span class=\"n\">α</span>\n  <span class=\"n\">exact</span> <span class=\"n\">default</span>\n</code></pre></div>",
        "id": 388554327,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693584116
    },
    {
        "content": "<p>(I wonder if it's out of scope for <code>inhabit</code> to look for hypotheses such as <code>hs</code>? There could be a library of <code>@[inhabit]</code> lemmas it consults.)</p>",
        "id": 388554522,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693584162
    },
    {
        "content": "<p>I've said before that <code>inhabit</code> should match <code>nontriviality</code> in that it assumes the type is empty and tries to discharge the case using a finishing tactic.</p>",
        "id": 388555212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693584375
    }
]