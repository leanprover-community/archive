[
    {
        "content": "<p>I assume this (Exercise 1B Problem 7) from Axler's Linear Algebra is a one liner in Mathlib, but what one liner is it?</p>\n<blockquote>\n<p>Suppose 𝑉 is a real vector space.<br>\n• The complexification of 𝑉, denoted by 𝑉𝐂 , equals 𝑉 × 𝑉. An element of<br>\n𝑉𝐂 is an ordered pair( 𝑢,𝑣),where𝑢,𝑣 ∈ 𝑉, but we write this as 𝑢+𝑖𝑣.<br>\n• Addition on 𝑉𝐂 is defined by<br>\n(𝑢1 +𝑖𝑣1)+(𝑢2 +𝑖𝑣2) = (𝑢1 +𝑢2)+𝑖(𝑣1 +𝑣2) for all 𝑢1,𝑣1,𝑢2,𝑣2 ∈𝑉.<br>\n• Complex scalar multiplication on 𝑉𝐂 is defined by (𝑎+𝑏𝑖)(𝑢+𝑖𝑣) = (𝑎𝑢−𝑏𝑣)+𝑖(𝑎𝑣+𝑏𝑢)<br>\nfor all 𝑎, 𝑏 ∈ 𝐑 and all 𝑢, 𝑣 ∈ 𝑉.<br>\nProve that with the definitions of addition and scalar multiplication as above,<br>\n𝑉𝐂 is a complex vector space.</p>\n</blockquote>",
        "id": 407787357,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702492204
    },
    {
        "content": "<p>This will be done with the tensor product in mathlib</p>",
        "id": 407790240,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702493312
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>?</p>",
        "id": 407795536,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702495604
    },
    {
        "content": "<p>No, more like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Module</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">ℂ</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 407801610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702498036
    },
    {
        "content": "<p>You can then prove your first bullet point as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prodEquivComplexTensor</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span> <span class=\"bp\">≃</span> <span class=\"n\">ℂ</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and the second one as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">smul_def</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">prodEquivComplexTensor</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">prodEquivComplexTensor</span> <span class=\"o\">(</span><span class=\"n\">c.re</span> <span class=\"bp\">•</span> <span class=\"n\">a.1</span> <span class=\"bp\">-</span> <span class=\"n\">c.im</span> <span class=\"bp\">•</span> <span class=\"n\">a.2</span><span class=\"o\">,</span> <span class=\"n\">c.re</span> <span class=\"bp\">•</span> <span class=\"n\">a.1</span> <span class=\"bp\">+</span> <span class=\"n\">c.im</span> <span class=\"bp\">•</span> <span class=\"n\">a.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407802343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702498326
    },
    {
        "content": "<p>I've been beating my head against the first theorem without seeing any cracks in the armor -- any Mathlib theorems that simply or open  up the proof.</p>",
        "id": 408400639,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702781887
    },
    {
        "content": "<p><code>TensorProduct.prodLeft</code> or <code>TensorProduct.prodRight</code> should help.</p>",
        "id": 408403246,
        "sender_full_name": "Richard Copley",
        "timestamp": 1702784142
    },
    {
        "content": "<p>I'm having trouble getting the right types in place.... <code>prodLeft</code> wants to distribute a product over a tensor product.</p>",
        "id": 408407764,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702788366
    },
    {
        "content": "<p>Can you show <code>ℂ ≃ₗ[R] (ℝ × ℝ)</code>? (It's hard to guess exactly how far you've got.)</p>",
        "id": 408409291,
        "sender_full_name": "Richard Copley",
        "timestamp": 1702789381
    },
    {
        "content": "<p>huh... Nice idea...</p>",
        "id": 408409323,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702789432
    },
    {
        "content": "<p>You can assume that I've been searching for relating things in Mathlib and trying to see if I can find a chain of structural decomposition to force fit.</p>",
        "id": 408409417,
        "sender_full_name": "Arien Malec",
        "timestamp": 1702789510
    },
    {
        "content": "<p>Then there's <code>TensorProduct.rid</code> and <code>TensorProduct.lid</code>.</p>",
        "id": 408409644,
        "sender_full_name": "Richard Copley",
        "timestamp": 1702789721
    }
]