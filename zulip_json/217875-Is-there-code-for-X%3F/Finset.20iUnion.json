[
    {
        "content": "<p>Hi, is there a notion for Finset / Multiset indexed union, at least over a finite set? I want to express that a Finset is the union of a few smaller disjoint Finsets (\"classes\"), and I want to keep it as Finset so that I can perform cardinality calculations later.</p>",
        "id": 397096654,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697545253
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.biUnion#doc\">docs#Finset.biUnion</a></p>",
        "id": 397096972,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697545358
    },
    {
        "content": "<p>Thanks! Also, is there a way to state <code>{a : Fin k | P a}</code> <em>as a Finset</em> ? Currently I write it as <code>(univ : Finset (Fin k)).filter P</code> but that's very long...</p>",
        "id": 397098737,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697546005
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 397099001,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697546106
    },
    {
        "content": "<p>For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">({</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">▶ 26:8-26:48: error:</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  {a | a &gt; 0}</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Set (Fin 10) : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Finset (Fin 10) : Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 397099227,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697546177
    },
    {
        "content": "<p>I'm afraid not, and you have to write <code>univ.filter P</code> (potentially with more typing information).</p>",
        "id": 397099401,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1697546250
    },
    {
        "content": "<p>I see, that's very annoying for doing anything combinatorial :/ Thanks</p>",
        "id": 397099696,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697546340
    },
    {
        "content": "<p>Also see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sigma#doc\">docs#Finset.sigma</a></p>",
        "id": 397162653,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697567423
    },
    {
        "content": "<p>Your suggested syntax is one of the things <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> is working on.</p>",
        "id": 397162751,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697567467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579936\">@Gareth Ma</span> You should be able to do <code>Set.toFinset {a : Fin k | P a}</code> (maybe even <code>{a : Fin k | P a}.toFinset</code>). The <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.toFinset#doc\">docs#Set.toFinset</a> API is meant to be able to help you construct finsets using set notations, to the extent that typeclass inference can apply.</p>",
        "id": 397330496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697640718
    },
    {
        "content": "<p>Thanks a lot!! I will try it out in a second.</p>",
        "id": 397331446,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697641016
    },
    {
        "content": "<p>I guess everyone in this thread learns something :D</p>",
        "id": 397331497,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697641032
    }
]