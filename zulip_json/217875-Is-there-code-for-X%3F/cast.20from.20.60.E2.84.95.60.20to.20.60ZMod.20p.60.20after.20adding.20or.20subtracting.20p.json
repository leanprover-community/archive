[
    {
        "content": "<p>I'm proving a theorem looking at <code>descFactorial</code> mod <code>p</code> and find myself needing a lemma, which i called <code>cast_self_sub</code> below. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ZMod.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factorial.BigOperators</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_self_sub</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_sub</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">CharP.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_sub</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span>  <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>  <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"n\">card_nsmul_add_sum</span><span class=\"kd\">]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_card_mul_prod</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">s.card</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">prod_const</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">prod_mul_distrib.symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">descFactorialZMod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">descFactorial</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">descFactorial_eq_prod_range</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">prod_range_add_one_eq_factorial</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cast_prod</span><span class=\"o\">]</span>\n  <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">card_range</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_card_mul_prod</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">prod_congr</span> <span class=\"n\">rfl</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">tsub_add_eq_tsub_tsub_swap</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">cast_self_sub</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"n\">Nat.lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">List.mem_range.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cast_succ</span><span class=\"o\">,</span> <span class=\"n\">neg_add_rev</span><span class=\"o\">]</span>\n  <span class=\"n\">ring_nf</span>\n</code></pre></div>\n<p>Seems like <code>cast_self_sub</code> and its cousins:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cast_sub_self</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_sub</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ZMod.nat_cast_self</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_self_add</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">CharP.cast_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_add_self</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">ZMod.nat_cast_self</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>might be useful. Are they already in mathlib perhaps in suitably generalized form? If not, would this be a good addition?</p>",
        "id": 402232781,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1700053272
    }
]