[
    {
        "content": "<p>Do we have this in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Ordinal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_iUnion_of_implies</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_iUnion</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">hj</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_iUnion</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hj</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hj</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n  <span class=\"n\">exists</span> <span class=\"n\">j</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_iUnion</span><span class=\"o\">]</span>\n  <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I'm also interested in any comment regarding style, naming convention, more idiomatic proof, etc.)<br>\nMy use case is for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋃</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hik</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋃</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">mem_iUnion_of_implies</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">gt_trans</span> <span class=\"n\">hik</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(Not sure if this is somewhat related to <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.88.91.20x.20.E2.88.88.20s.2C.20f.20x.20instead.20of.20.E2.88.91.20x.20in.20s.2C.20f.20x/near/387352818\">Kyle's recent PR</a>...)</p>",
        "id": 387355984,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1693006224
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.biUnion_mono#doc\">docs#Set.biUnion_mono</a> is a more general statement, but it’s written for sets instead of predicates</p>",
        "id": 387356387,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693006584
    },
    {
        "content": "<p>Right,  the thing is trying to avoid going through <code>Iio i</code> and <code>Iio k</code> (the corresponding sets), since in practice one uses ordinal indices like in the example. The idea is to have some API for ordinal-indexed operations.</p>\n<p>What would be an appropriate name for the lemma?</p>",
        "id": 387356918,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1693007059
    },
    {
        "content": "<p>(That PR you linked to is only for sums/products; unions use a different notation since they don't need to worry about whether the domain is a <code>Finset</code>)</p>",
        "id": 387356960,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693007105
    },
    {
        "content": "<p>If you're willing to have <code>α</code> be a <code>Type</code> rather than a <code>Sort</code>, then you can go through Anatole's suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_iUnion_of_implies</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">setOf</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">setOf</span> <span class=\"n\">Q</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span>\n  <span class=\"n\">apply</span> <span class=\"n\">biUnion_mono</span> <span class=\"n\">hPQ</span>\n  <span class=\"n\">intros</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Subset.rfl</span>\n</code></pre></div>",
        "id": 387356982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693007134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/bigger.20range.20of.20an.20iUnion/near/387356982\">said</a>:</p>\n<blockquote>\n<p>If you're willing to have <code>α</code> be a <code>Type</code> rather than a <code>Sort</code>, then you can go through Anatole's suggestion:</p>\n</blockquote>\n<p>Thank you very much! Yes, that would not be a problem---it seems that the general lemma might not be very interesting . As I said, my main interest is to streamline the use of ordinal indices.</p>",
        "id": 387357252,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1693007379
    },
    {
        "content": "<p>Here's another short proof, without that constraint.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_iUnion_of_implies</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iUnion₂_mono'</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n  <span class=\"n\">exists</span> <span class=\"n\">i</span>\n  <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 387357263,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693007392
    },
    {
        "content": "<p>Or a one-liner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_iUnion_of_implies</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iUnion₂_mono'</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hPQ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">Subset.rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 387357356,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693007443
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Ordinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hik</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⋃</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iUnion₂_mono'</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">gt_trans</span> <span class=\"n\">hik</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">Subset.rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 387357541,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693007617
    },
    {
        "content": "<p>Great, so it was <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Lattice.html#Set.iUnion%E2%82%82_mono'\">Set.iUnion₂_mono'</a> (I couldn't make the linkifier work for that name <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ).<br>\nThank you very much!</p>",
        "id": 387357944,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1693007972
    }
]