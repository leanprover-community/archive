[
    {
        "content": "<p>Is there a lean version of <code>NonRepeating</code> list existing in <code>Init</code> or <code>Std</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Agda\"><pre><span></span><code><span class=\"kr\">open</span><span class=\"w\"> </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"n\">Relation.Nullary</span>\n<span class=\"kr\">open</span><span class=\"w\"> </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"n\">Relation.Binary.PropositionalEquality</span>\n<span class=\"kr\">open</span><span class=\"w\"> </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"n\">Data.List</span>\n<span class=\"kr\">open</span><span class=\"w\"> </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"n\">Data.List.Relation.Unary.Any</span>\n\n<span class=\"kr\">data</span><span class=\"w\"> </span>NonRepeating<span class=\"w\"> </span><span class=\"o\">{</span>a<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>A<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span>a<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"o\">(</span>l<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>List<span class=\"w\"> </span>A<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"kr\">where</span>\n<span class=\"w\">  </span><span class=\"nf\">done</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>NonRepeating<span class=\"w\"> </span>[]\n<span class=\"w\">  </span><span class=\"nf\">rest</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"ow\">∀</span><span class=\"w\"> </span><span class=\"o\">{</span>x<span class=\"w\"> </span>xs<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>¬<span class=\"w\"> </span>Any<span class=\"w\"> </span><span class=\"o\">(</span>x<span class=\"w\"> </span>≡_<span class=\"o\">)</span><span class=\"w\"> </span>xs<span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>NonRepeating<span class=\"w\"> </span>xs<span class=\"w\"> </span><span class=\"ow\">→</span><span class=\"w\"> </span>NonRepeating<span class=\"w\"> </span><span class=\"o\">(</span>x<span class=\"w\"> </span>∷<span class=\"w\"> </span>xs<span class=\"o\">)</span>\n\n<span class=\"kr\">record</span><span class=\"w\"> </span>UniqueList<span class=\"w\"> </span><span class=\"o\">{</span>a<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">(</span>A<span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span>a<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"kr\">where</span>\n<span class=\"w\">  </span><span class=\"kr\">constructor</span><span class=\"w\"> </span>_//_\n<span class=\"w\">  </span><span class=\"kr\">field</span>\n<span class=\"w\">    </span><span class=\"nf\">l</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>List<span class=\"w\"> </span>A\n<span class=\"w\">    </span><span class=\"nf\">wf</span><span class=\"w\"> </span><span class=\"ow\">:</span><span class=\"w\"> </span>NonRepeating<span class=\"w\"> </span>l\n</code></pre></div>",
        "id": 390567895,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694540683
    },
    {
        "content": "<p>not as a single type, but you can use <code>List A</code> and <code>l.Nodup</code></p>",
        "id": 390568368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694540874
    },
    {
        "content": "<p>if you quotient up to permutation you get <code>Finset A</code></p>",
        "id": 390568451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694540901
    },
    {
        "content": "<p>I end up with writing something:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">NoDup</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">NoDup</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">NoDup</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">NoDup</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">NoDupList</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">NoDup</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">NoDupList</span> <span class=\"n\">Nat</span>  <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">NoDup.cons</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">NoDup.cons</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">NoDup.cons</span> <span class=\"mi\">3</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">NoDup.nil</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>However, it is a little bit painful to use as lean cannot automatically give the proof of <code>NoDup</code>. ( you cannot write<code>def t : NoDupList Nat  := ⟨ [1, 2, 3], by simp ⟩</code>).</p>\n<p>Is it possible to write a macro to generate the code? Could you please show me an example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"n\">NoDupList</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">NoDupList</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"c1\">-- generates =&gt;</span>\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">NoDupList</span> <span class=\"n\">Nat</span>  <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">],</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">NoDup.cons</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">NoDup.cons</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">NoDup.cons</span> <span class=\"mi\">3</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">NoDup.nil</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 390592421,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694550928
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Nodup#doc\">docs#List.Nodup</a> is there already</p>",
        "id": 390595318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694552220
    },
    {
        "content": "<p>I see, it actually has by decide</p>",
        "id": 390599520,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694553999
    },
    {
        "content": "<p><code>{l : List α // l.Nodup}</code> would be the canonical spelling I think</p>",
        "id": 390602119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694555337
    },
    {
        "content": "<p>How can I achieve something similar to (the following is rejected):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">Nodup</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 390771334,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694626849
    },
    {
        "content": "<p>Interesting riddle. Minimized version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"c1\">-- Works</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">X'</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">X'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">X'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X'</span>\n\n<span class=\"c1\">-- Fails</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 390773527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694627600
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 390774157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694627801
    },
    {
        "content": "<p>that wasn't the intended type, sorry</p>",
        "id": 390774235,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694627831
    },
    {
        "content": "<p>FWIW, <code>l.map (·.1) |&gt;.Nodup</code> is effectively <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.NodupKeys#doc\">docs#List.NodupKeys</a></p>",
        "id": 390789942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694633917
    },
    {
        "content": "<p>To save someone loading up Lean, Patrick's example fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">List.length</span> <span class=\"n\">l</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">_nested.List_1</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 390790208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694634060
    },
    {
        "content": "<p>Also, the following won't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.AList</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">AList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 390803993,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694639790
    },
    {
        "content": "<p>I think this is just a bug</p>",
        "id": 390808687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694642217
    },
    {
        "content": "<p>Certainly it's a bug that <code>_nested</code> is appearing in the error message</p>",
        "id": 390808711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694642235
    },
    {
        "content": "<p>I think it would be appropriate to file a Lean4 issue on github here</p>",
        "id": 390808748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694642264
    },
    {
        "content": "<p>I don't think so, <code>AList</code> is a subtype, which requires evaluating <code>NodupKeys</code> on the nested inductive type <code>List (String x X)</code></p>",
        "id": 390809966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694642512
    },
    {
        "content": "<p>if you inline everything you will see it can't be defined</p>",
        "id": 390810034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694642528
    },
    {
        "content": "<p>this has approximately the same error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span>\n    <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">nodupKeys</span> <span class=\"o\">:</span> <span class=\"n\">entries.NodupKeys</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>commenting out the last line makes it work</p>",
        "id": 390810184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694642590
    },
    {
        "content": "<p>emmm, but you can do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">private</span> <span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"kn\">private</span> <span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X.B</span> <span class=\"o\">:=</span> <span class=\"n\">X.B'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">X.A</span> <span class=\"o\">:=</span> <span class=\"n\">X.A'</span>\n</code></pre></div>",
        "id": 390810373,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694642671
    },
    {
        "content": "<p>that's not the same thing, <code>X.B'</code> still quantifies over all types <code>α</code></p>",
        "id": 390810558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694642772
    },
    {
        "content": "<p>note that <code>X</code> is universe bumped because of this</p>",
        "id": 390810577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694642787
    },
    {
        "content": "<p>An inductive type has constructors and also a recursor. Just because you define a more specific constructor wrapper doesn't mean the recursor is also made more specific</p>",
        "id": 390810696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694642866
    },
    {
        "content": "<p>if you did recursion on <code>X</code> you would have to deal with arbitrary other types <code>α</code>  in the <code>B'</code> case</p>",
        "id": 390810767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694642895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20non-repeating.20list.20in.20Init.20or.20Std.3F/near/390810034\">said</a>:</p>\n<blockquote>\n<p>if you inline everything you will see it can't be defined</p>\n</blockquote>\n<p>In that case, the lean4 bug is \"the error message should say this can't be done, and not <em>just</em> reveal some error in an implementation detail\"</p>",
        "id": 390810895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694642985
    },
    {
        "content": "<p>Is there a way to get at the \"inlined\" version that uses this <code>_nested.List_1</code>?</p>",
        "id": 390811034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694643056
    },
    {
        "content": "<p>No, I think that definition never actually exists in the environment</p>",
        "id": 390813444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694644486
    },
    {
        "content": "<p>It's hard to see much about it because it only ever shows up in error messages</p>",
        "id": 390813477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694644512
    },
    {
        "content": "<p>but the gist of it is that when compiling a nested inductive type, lean has to make copies of all inductive types involved in the \"cycle\" while creating the type of the recursor. You can see a bit of this in the simplified inductive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span>\n    <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">X.rec</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">recursor</span> <span class=\"n\">X.rec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">motive_1</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">{</span><span class=\"n\">motive_2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">{</span><span class=\"n\">motive_3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n      <span class=\"n\">motive_1</span> <span class=\"n\">X.A</span> <span class=\"bp\">→</span>\n        <span class=\"o\">((</span><span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"n\">entries</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"o\">(</span><span class=\"n\">X.B</span> <span class=\"n\">entries</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n          <span class=\"n\">motive_2</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span>\n            <span class=\"o\">((</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">motive_3</span> <span class=\"n\">head</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"n\">tail</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n              <span class=\"o\">((</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">snd</span> <span class=\"bp\">→</span> <span class=\"n\">motive_3</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span> <span class=\"o\">})</span> <span class=\"bp\">→</span>\n                <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>Here there are 3 motives for 3 mutually inductive types, which you might call <code>X</code>, <code>List_Sigma_String_X</code> and <code>Sigma_String_X</code>. During post-processing, these types are replaced with the types they are supposed to be standing in for, namely <code>X</code>, <code>List ((_ : String) × X)</code> and <code>(_ : String) × X</code> respectively.</p>\n<p>The trouble is that the type <code>List_Sigma_String_X</code> created during this process isn't actually <code>List _</code>, so if you try to apply a function like <code>List.NodupKeys</code> it will be a type error. In lean 3 this type would actually stick around and you could see it in the reduction, but in lean 4 it disappears after elaboration so you just have a reference to a type <code>_nested.List_1</code> that doesn't exist</p>",
        "id": 390813989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694644838
    },
    {
        "content": "<p>I think the thing I was struggling with is why lean can't insert some conversion function between the temporary list and the real one; but I guess the answer is that that would amount to using a recursor of a type within its own definition which isn't allowed</p>",
        "id": 390814342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694645060
    },
    {
        "content": "<p>I am not sure what‘s agda’s vec equivalence in lean. but with that，I guess I can do it a different way like:</p>\n<p>B takes an implicit (n : nat), then separate list into two finite vec, associated with some prop on the first vec of string.</p>\n<p>Emmm, but it seems tedious to use.</p>",
        "id": 390814378,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694645086
    },
    {
        "content": "<p>Oh, no it won’t. Vec does not give the same length. Only an upper bound.</p>",
        "id": 390814572,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694645194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20non-repeating.20list.20in.20Init.20or.20Std.3F/near/390814342\">said</a>:</p>\n<blockquote>\n<p>I think the thing I was struggling with is why lean can't insert some conversion function between the temporary list and the real one; but I guess the answer is that that would amount to using a recursor of a type within its own definition which isn't allowed</p>\n</blockquote>\n<p>Right, this gets into inductive-recursive types if you want to do this (which are supported in agda but are strictly stronger in proof strength than what lean supports)</p>",
        "id": 390814745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694645297
    },
    {
        "content": "<p>it's not even about having the conversion function, having <em>any</em> function there which inspects the type nontrivially (like <code>List.length</code>) is already recursion</p>",
        "id": 390814834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694645352
    },
    {
        "content": "<p>What type of inspection <em>is</em> trivial?</p>",
        "id": 390814896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694645395
    },
    {
        "content": "<p><code>Function.const</code></p>",
        "id": 390814903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694645401
    },
    {
        "content": "<p>That's a pretty dubious meaning of inspect</p>",
        "id": 390814973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694645418
    },
    {
        "content": "<p>It would be nice if the error message included the words \"inductive-recursive types are not supported\"</p>",
        "id": 390814989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694645429
    },
    {
        "content": "<p>that is, if you have some function which would type check even if the argument had type <code>x : A</code> for some variable type <code>A</code></p>",
        "id": 390815013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694645446
    },
    {
        "content": "<p>Would a custom elaborator work to build such a \"function\", or would that be elaborated fully before making the substitution?</p>",
        "id": 390815170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694645541
    },
    {
        "content": "<p>not sure what you mean</p>",
        "id": 390815193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694645557
    },
    {
        "content": "<p>Back to the problem, I think to achieve the constrains, one can do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Vec.NoDup</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">String</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">v.NoDup</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"c1\">-- Mathlib version won't work</span>\n<span class=\"c1\">-- inductive X' : Type :=</span>\n<span class=\"c1\">--  | A : X'</span>\n<span class=\"c1\">--  | B : {n : Nat} → {v : Vector String n // v.val.Nodup } → Vector X' n → X'</span>\n</code></pre></div>\n<p>I am not sure whether there is a better way to do this.</p>",
        "id": 390826925,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694653237
    }
]