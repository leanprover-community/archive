[
    {
        "content": "<p>Do we have API for nonempty lists sitting around somewhere that I am not seeing?</p>\n<p>I wanted to compute the minimum of a list that I know is nonempty, and had to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.MinMax</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.minimum_ne_top_of_length_pos</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L.minimum</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.minimum_cons</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.minimum_length_pos</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">WithTop.untop</span> <span class=\"n\">L.minimum</span> <span class=\"o\">(</span><span class=\"n\">List.minimum_ne_top_of_length_pos</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Surely someone has needed this previously? Possibly even with a bundled <code>NonemptyList</code>?</p>",
        "id": 375101384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689297893
    },
    {
        "content": "<p>(One might wonder whether such a <code>NonemptyList</code> should be defined via <code>L ≠ []</code> or <code>0 &lt; L.length</code>. My vote would be for the later.)</p>",
        "id": 375101463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689297930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/NonemptyList/near/375101463\">said</a>:</p>\n<blockquote>\n<p>(One might wonder whether such a <code>NonemptyList</code> should be defined via <code>L ≠ []</code> or <code>0 &lt; L.length</code>. My vote would be for the later.)</p>\n</blockquote>\n<p>Why not as in <a href=\"https://github.com/leanprover/std4/pull/16\">std4#16</a> <code>(hd : α) (tl : List α)</code>?</p>",
        "id": 375106476,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689300484
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.minimum_eq_none#doc\">docs#List.minimum_eq_none</a></p>",
        "id": 375106700,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689300607
    },
    {
        "content": "<p>(should be rewritten as <code>minimum_eq_top</code>)</p>",
        "id": 375106732,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689300639
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Free.html#FreeSemigroup\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Free.html#FreeSemigroup</a></p>",
        "id": 375118973,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1689307612
    }
]