[
    {
        "content": "<p>Do we have the intersection of all neighborhoods of a point as a definition? If not, is there a standard name for it?</p>",
        "id": 389232232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693931785
    },
    {
        "content": "<p>or neighborhoods of a set, I'm not picky</p>",
        "id": 389232317,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693931806
    },
    {
        "content": "<p>If not, I'll call it <code>exterior</code> for now.</p>",
        "id": 389232980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693931953
    },
    {
        "content": "<p>where is this useful?</p>",
        "id": 389236320,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1693932907
    },
    {
        "content": "<p>It's useful in the theory of Alexandrov-discrete topological spaces. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/6962\">#6962</a>. Exactly what I want is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">isOpen_iff_forall_specializes</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⤳</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hs</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span> <span class=\"bp\">↦</span> <span class=\"n\">hxy.mem_open</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hs</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 389240402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693934098
    },
    {
        "content": "<p>There's the concept of a specialization and generalization of a point in a topological space: see e.g. <a href=\"https://stacks.math.columbia.edu/tag/0061\">stacks project</a>. Is the intersection of the neighbourhoods of x just the set of generalizations of x?</p>",
        "id": 389242691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693934703
    },
    {
        "content": "<p>That's more or less what I'm proving, yeah.</p>",
        "id": 389243780,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693934968
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 389245913,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693935355
    },
    {
        "content": "<p>I think it’s sometimes called the kernel of a filter, that should be the definition. <code>exterior</code> doesn’t feel like a very good name to me.</p>",
        "id": 389246431,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693935443
    },
    {
        "content": "<p>I currently have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exterior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⋂₀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">IsOpen</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>What's your proposed definition exactly?</p>",
        "id": 389247111,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693935562
    },
    {
        "content": "<p>The intersection of all elements of a filter. In your case, this would be the kernel of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=nhdsSet#doc\">docs#nhdsSet</a></p>",
        "id": 389247604,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693935651
    },
    {
        "content": "<p>So you would not emphasize the analogy with <code>interior</code>?</p>",
        "id": 389247786,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693935692
    },
    {
        "content": "<p>In the case of a set that makes more sense (for a point it seemed weird, but you could say that it’s the exterior of a singleton). But for the general concept (for filters) I don’t think it makes sense</p>",
        "id": 389248471,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693935833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Smallest.20neighborhood.20of.20a.20point/near/389240402\">said</a>:</p>\n<blockquote>\n<p>It's useful in the theory of Alexandrov-discrete topological spaces. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/6962\">#6962</a>. Exactly what I want is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">isOpen_iff_forall_specializes</span> <span class=\"o\">:</span> <span class=\"n\">IsOpen</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⤳</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hs</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span> <span class=\"bp\">↦</span> <span class=\"n\">hxy.mem_open</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hs</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>By the way, this is false right? Or do you have additional assumptions?</p>",
        "id": 389248961,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693935938
    },
    {
        "content": "<p>Of course I forgot to include <code>AlexandrovDiscrete α</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 389249075,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693935962
    },
    {
        "content": "<p>Aaaaah okay, in that case I understand why exterior is better (since it’s actually open). I think ultimately we will want the general filter definition, but as a temporary def or abbreviation <code>exterior</code> is fine.</p>",
        "id": 389249648,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693936098
    },
    {
        "content": "<p>So this is the world you want to live in?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Filter</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⋂</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- Insert delightful Yaël API here</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Topology</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exterior</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">𝓝ˢ</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">specializes_iff_exterior_subset</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⤳</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">exterior</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"n\">exterior</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 389250068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693936209
    },
    {
        "content": "<p>Yes, although in the case of a point I’m not sure if the normal form should be <code>exterior {x}</code> or <code>(nhds x).ker</code></p>",
        "id": 389251176,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1693936660
    },
    {
        "content": "<p>The specialization order exists in mathlib.</p>",
        "id": 389253612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693937555
    },
    {
        "content": "<p>Let me try to find it.</p>",
        "id": 389253626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693937560
    },
    {
        "content": "<p>Johan, I know, but it's defined with <code>closure {y} ⊆ closure {x}</code>. There's still something to be proven!</p>",
        "id": 389253881,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693937649
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">Inseparable.lean</span>\n<span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"kd\">def</span> <span class=\"n\">Specializes</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓝</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 389254036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693937711
    },
    {
        "content": "<p>I'm not claiming that there's nothing to be proven <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 389254153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693937754
    },
    {
        "content": "<p>Here's a sneak peak of where I'm at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">topToPreord</span> <span class=\"o\">:</span> <span class=\"n\">TopCat</span> <span class=\"bp\">⥤</span> <span class=\"n\">PreordCat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alexDiscEquivPreord</span> <span class=\"o\">:</span> <span class=\"n\">AlexDisc</span> <span class=\"bp\">≌</span> <span class=\"n\">PreordCat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 389254303,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693937804
    }
]