[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Bool.beq_true</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">==</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Bool.beq_false</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">==</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I think there is only <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bool.not_beq_true#doc\">docs4#Bool.not_beq_true</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bool.not_beq_false#doc\">docs4#Bool.not_beq_false</a>.</p>",
        "id": 397940279,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1697976679
    }
]