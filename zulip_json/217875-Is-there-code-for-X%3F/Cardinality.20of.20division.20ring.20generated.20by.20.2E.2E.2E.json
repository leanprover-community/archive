[
    {
        "content": "<p>I'd like to show the cardinality of the sub-division ring generated by an infinite set <code>s</code> is at most the cardinality of <code>s</code>. If the ambient division ring is a field then there is a surjection from <code>MvPolynomial s ℤ</code> to the subring generated by <code>s</code>, and every element in the subfield generated by <code>s</code> is a quotient of two elements in the subring, so we are good. In the noncommutative setting the subring admits a surjection from <code>FreeRing</code>, but nothing has been proven about its cardinality, and not every element in the sub-division ring can be written as a quotient of two elements in the subring.</p>\n<p>The usual mathematical proof would be start with the set <code>{0,1} ∪ s</code> and enlarge it recursively with the four operations <code>+, -, *, /</code>. After countably many steps (read: take union over ℕ), the result is a sub-division ring, and is exactly the one generated by <code>s</code>. We prove by induction that the cardinality is #s at each step (clearly it's bounded by 4 times the square of the cardinality of the previous step), so the cardinality of the union is also #s.</p>\n<p>The mathlib way of doing this argument seems to be using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WType#doc\">docs#WType</a> which encapsulates tree structures like this; my current plan is to adapting a <a href=\"https://github.com/leanprover-community/mathlib/pull/15889/files#diff-00ce29f036373cc29ddeba030a58dc5fbebd5ffab5e677d335f78e6df967ed51\">replaced old proof</a> by <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> for (Mv)Polynomials. I wonder whether the model theory framework to work with algebraic structures could be used to state and prove such cardinality results in full generality.</p>\n<p>(Background: I'm trying to formalize <a href=\"https://mathoverflow.net/a/168624/3332\">this proof</a> of Erdős-Kaplansky (a <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Dual.html#TODO\">TODO item</a> added by <span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span>) for division rings, and I'm about to open a PR to generalize the ambient Field in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subfield.closure#doc\">docs#Subfield.closure</a> to DivisionRing.)</p>\n<p>P.S. does mathlib really doesn't have <code>Dual R (ι →₀ R) ≃ₗ[R] (ι → R)</code> for commutative <code>R</code>? (Of course for noncommutative R this would be a R^mop-LinearEquiv.</p>",
        "id": 406991528,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702170618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Cardinality.20of.20division.20ring.20generated.20by.20.2E.2E.2E/near/406991528\">said</a>:</p>\n<blockquote>\n<p>does mathlib really doesn't have <code>Dual R (ι →₀ R) ≃ₗ[R] (ι → R)</code> for commutative <code>R</code>? (Of course for noncommutative R this would be a R^mop-LinearEquiv.</p>\n</blockquote>\n<p>That would be a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.IsReflexive#doc\">docs#Module.IsReflexive</a> instance I think</p>",
        "id": 406991977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702170913
    },
    {
        "content": "<p>I don't think so? It reads: the dual of Finsupp is Pi.</p>",
        "id": 406992067,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702170964
    },
    {
        "content": "<p>Oh sorry, I'm crippled by Android unicode (and the instance isn't there anyway)</p>",
        "id": 406992117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702171001
    },
    {
        "content": "<p>I am on mobile, but this is the universal property of the direct sum, I would look there</p>",
        "id": 406992209,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702171078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Cardinality.20of.20division.20ring.20generated.20by.20.2E.2E.2E/near/406991528\">said</a>:</p>\n<blockquote>\n<p>The mathlib way of doing this argument seems to be using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WType#doc\">docs#WType</a> which encapsulates tree structures like this; </p>\n</blockquote>\n<p>Really? I though we just used inductive types, and <code>WType</code> is more of a \"types without the inductive keyword\" building block like <code>Sum</code> and <code>Prod</code></p>",
        "id": 406992363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702171183
    },
    {
        "content": "<p>Re: reflexive modules: It would be a fun (undergraduate level) project to prove that <code>Dual ℤ (ℕ → ℤ) ≃ₗ[ℤ] (ℕ →₀ ℤ)</code> though, which implies both <code>Finsupp ℕ ℤ</code> and <code>ℕ → ℤ</code> are reflexive.<br>\n<a href=\"https://en.wikipedia.org/wiki/Baer%E2%80%93Specker_group#Properties\">https://en.wikipedia.org/wiki/Baer%E2%80%93Specker_group#Properties</a></p>",
        "id": 406992454,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702171232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Cardinality.20of.20division.20ring.20generated.20by.20.2E.2E.2E/near/406992363\">said</a>:</p>\n<blockquote>\n<p>Really? I though we just used inductive types, and <code>WType</code> is more of a \"types without the inductive keyword\" building block like <code>Sum</code> and <code>Prod</code></p>\n</blockquote>\n<p>Well the original proof for the cardinality of Polynomial uses WType (see the link in my original post). I think it's not used much because it's not necessary when you can explicitly construct the universal object.</p>",
        "id": 406992667,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702171371
    },
    {
        "content": "<p>We know the cardinality of WType, so we just need to construct a surjection from it.</p>",
        "id": 406992707,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702171402
    },
    {
        "content": "<p>I think at one point there was a plan to make an attribute that constructs the isomorphism between an inductive type and a suitable WType</p>",
        "id": 406993745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702172111
    },
    {
        "content": "<p>The Subfield PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/8941\">#8941</a>. The previous commit that only changes one file built without trouble, and I just pushed docstring fixes plus slight generalizations.</p>",
        "id": 407000288,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702176754
    },
    {
        "content": "<p>and the cardinality PR is <a href=\"https://github.com/leanprover-community/mathlib4/pull/8942\">#8942</a></p>",
        "id": 407016893,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702189130
    },
    {
        "content": "<p>To answer myself: <code>Dual R (ι →₀ R) ≃ₗ[R] (ι → R)</code> is a special case of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Basis.constr#doc\">docs#Basis.constr</a> (applied to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finsupp.basisSingleOne#doc\">docs#Finsupp.basisSingleOne</a>)</p>",
        "id": 407091096,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702230329
    },
    {
        "content": "<p>Erdős-Kaplansky theorem is PR'd as <a href=\"https://github.com/leanprover-community/mathlib4/pull/9159\">#9159</a>; depends on two PRs.</p>",
        "id": 409127066,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1703063964
    }
]