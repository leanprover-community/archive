[
    {
        "content": "<p>Do we have some API to view supremums in <code>Subobject X</code> (cf. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Subobject#doc\">docs#CategoryTheory.Subobject</a> ) as colimits? (dually, infimums as limits.) Well, this requires some additional assumptions on the category and/or the supremum itself.</p>",
        "id": 387976157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693346380
    },
    {
        "content": "<p>Related: <a href=\"https://mathoverflow.net/questions/426901/given-a-hookrightarrow-x-and-b-hookrightarrow-x-with-trivial-intersection\">https://mathoverflow.net/questions/426901/given-a-hookrightarrow-x-and-b-hookrightarrow-x-with-trivial-intersection</a></p>",
        "id": 387986588,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693351054
    },
    {
        "content": "<p>Thanks! The main case I’m working with is an abelian category satisfying AB5. In this case the supr of a directed subset of subobjects should be the colimit.</p>",
        "id": 387987864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693351647
    },
    {
        "content": "<p>But anyway, it seems that there is essentially no infrastructure in mathlib currently for such assertions</p>",
        "id": 387987905,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693351679
    },
    {
        "content": "<p>FWIW, here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasCoproducts</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">WellPowered</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasImages</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Subobject</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">diagram</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Subobject.ofLE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">·.</span><span class=\"n\">le</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">cocone</span> <span class=\"o\">:</span> <span class=\"n\">Cocone</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pt</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n  <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.arrow</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">subobject</span> <span class=\"o\">[</span><span class=\"n\">HasColimit</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">E</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Mono</span> <span class=\"o\">(</span><span class=\"n\">colimit.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cocone</span> <span class=\"n\">E</span><span class=\"o\">))]</span> <span class=\"o\">:</span> <span class=\"n\">Subobject</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">colimit.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cocone</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">HasColimit</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">E</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Mono</span> <span class=\"o\">(</span><span class=\"n\">colimit.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cocone</span> <span class=\"n\">E</span><span class=\"o\">))]</span> <span class=\"o\">:</span>\n    <span class=\"n\">subobject</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">sSup</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"bp\">·</span> <span class=\"n\">fapply</span> <span class=\"n\">Subobject.mk_le_of_comm</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">colimit.desc</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subobject.ofLE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_sSup</span> <span class=\"n\">he</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">ext</span>\n      <span class=\"n\">simp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">sSup_le</span>\n    <span class=\"n\">intro</span> <span class=\"n\">e</span> <span class=\"n\">he</span>\n    <span class=\"n\">fapply</span> <span class=\"n\">Subobject.le_mk_of_comm</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">colimit.ι</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">he</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 387989546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693352531
    }
]