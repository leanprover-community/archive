[
    {
        "content": "<p>I'm aware of there is a inter_interᵢ_nat_succ which factors out the first term.</p>\n<p>Is there a version for the last term when interᵢ is bounded by an inequality (i &lt; n)?</p>\n<p>I've tried myself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lt_nat_succ_iff_eq_or_lt</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.trans</span> <span class=\"n\">Nat.lt_add_one_iff</span> <span class=\"n\">Decidable.le_iff_eq_or_lt</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">binter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_nat_prev_inter_binter</span><span class=\"bp\">ᵢ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">binter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_insert</span> <span class=\"n\">ℕ</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"n\">a</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_setOf_eq</span><span class=\"o\">,</span> <span class=\"n\">lt_self_iff_false</span><span class=\"o\">,</span> <span class=\"n\">mem_insert_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">inter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_congr</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_congr_Prop</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_nat_succ_iff_eq_or_lt</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Are there any other ways for a shorter proof (maybe utilizing Finite/Finset)?</p>",
        "id": 349237896,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681432467
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inter_Inter_nat_succ\">docs#set.inter_Inter_nat_succ</a> for reference)</p>",
        "id": 349239486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681433182
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Inter_Inter_eq_or_left\">docs#set.Inter_Inter_eq_or_left</a> looks like it will get you almost all the way there</p>",
        "id": 349239779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681433335
    },
    {
        "content": "<p>(I'm not linking to lean 4 because I think docs links are broken for subscript I characters)</p>",
        "id": 349239847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681433369
    },
    {
        "content": "<p>Thank you, Eric Wieser.</p>\n<p>This is much concise</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">binter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_nat_prev_inter_binter</span><span class=\"bp\">ᵢ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">inter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_eq_left</span> <span class=\"n\">α</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Iff.trans</span> <span class=\"n\">Nat.lt_add_one_iff</span> <span class=\"n\">le_iff_eq_or_lt</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 349246377,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1681437583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"604291\">MonadMaverick</span> has marked this topic as resolved.</p>",
        "id": 349320769,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681466071
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">binter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_lt_succ_inter_binter</span><span class=\"bp\">ᵢ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">inter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_eq_or_left</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▸</span>\n    <span class=\"n\">inter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_congr</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inter</span><span class=\"bp\">ᵢ</span><span class=\"n\">_congr_Prop</span> <span class=\"o\">(</span><span class=\"n\">or_comm.to_eq</span> <span class=\"bp\">▸</span> <span class=\"n\">Nat.lt_succ_iff_lt_or_eq</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 351630795,
        "sender_full_name": "MonadMaverick",
        "timestamp": 1682084630
    }
]