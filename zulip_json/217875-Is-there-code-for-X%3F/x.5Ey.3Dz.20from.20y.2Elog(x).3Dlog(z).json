[
    {
        "content": "<p>Do we really not have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Did I slip up somewhere?</p>",
        "id": 383243413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691580526
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">log_rpow</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">Real.exp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">exp_log</span><span class=\"o\">,</span> <span class=\"n\">exp_log</span> <span class=\"n\">hz</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">rpow_pos_of_pos</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 383255200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691582812
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6469\">#6469</a></p>",
        "id": 383260180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691583748
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"n\">log_injOn_pos</span> <span class=\"o\">(</span><span class=\"n\">rpow_pos_of_pos</span> <span class=\"n\">hx</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hz</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">log_rpow</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 383261803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691584055
    },
    {
        "content": "<p>While we're on the subject of <code>rpow</code>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6470\">#6470</a> adds some nearby missing lemmas</p>",
        "id": 383262881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691584246
    }
]