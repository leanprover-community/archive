[
    {
        "content": "<p>Am I right in saying that we don't have the description of nilpotent/zero divisors polynomial? We know of course that <code>R[X]</code> is a domain if <code>R</code> is, but I don't find the precise description of the zero divisors. And similarly for power series. If those are really missing I have students who want to work on them, so I hope they're not in mathlib <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 326157409,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675697270
    },
    {
        "content": "<p>Yeah those are missing AFAIK; I found these <a href=\"https://kconrad.math.uconn.edu/blurbs/ringtheory/polynomial-properties.pdf\">nice notes by Conrad</a> for the polynomial case and <a href=\"https://gdz.sub.uni-goettingen.de/id/PPN243919689_0278_0279?tify=%7B%22pages%22%3A%5B149%5D%2C%22pan%22%3A%7B%22x%22%3A0.42%2C%22y%22%3A0.324%7D%2C%22view%22%3A%22info%22%2C%22zoom%22%3A1.19%7D\">this paper</a> for the power series case, which states the simple description when R is Noetherian, and tries to extend the result to more general comm_rings, so a simple description probably doesn't exist in general (I've came across this paper before).<br>\nThe proof for multivariate polynomials uses induction w.r.t. lexicographic order, and is reminiscent of the second proof of the fundamental theorem of symmetric polynomials in Wikipedia, which was part of my motivation for introducing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.lex.well_founded_lt\">docs#finsupp.lex.well_founded_lt</a>.</p>",
        "id": 326163773,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675698951
    },
    {
        "content": "<p>Yes zero divisors for in the power series case are complicated. There is a rather simple example of a ring <code>R</code> and an element <code>r : R</code> such that <code>r+x</code> is a zero divisor.</p>",
        "id": 326166903,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675699687
    },
    {
        "content": "<p>What's that example Riccardo?</p>",
        "id": 326177443,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1675700769
    },
    {
        "content": "<p>Start with a field <code>K</code> and let <code>S</code> be the polynomial ring with coefficients in <code>K</code> and variables <code>y, z_0, z_1, \\ldots</code> (infinitely many <code>z</code>). Let <code>I</code> be the ideal of <code>S</code> generated by <code>(y*z_0, z_0+y*z_1, z_1+y*z_2, z_2+y*z_3, ...)</code>.  Let <code>R = S/I</code>. and let consider the power series <code>f = y + x</code>.</p>\n<p>Letting <code>g = z_0 + z_1*x + z_2*x^2 + ...</code> it's easy to check that <code>f*g = 0</code>.</p>",
        "id": 326185311,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675701151
    },
    {
        "content": "<p>Please don't formalize this! <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 326185429,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675701185
    },
    {
        "content": "<p>Easy to check or easy to formalize? :)</p>",
        "id": 326189933,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1675702389
    },
    {
        "content": "<p>Well it seems easy even to formalize, the only not trivial part is to define the ideal</p>",
        "id": 326191719,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675702859
    },
    {
        "content": "<p>it's <code>ideal.span (y * z 0) + ideal.span (set.image ...)</code> right? Doesn't look too bad.</p>",
        "id": 326194340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675703564
    },
    {
        "content": "<p>Yes, it's not that hard. But I am sure that this is the point where my beginners students will struggle a little bit.</p>",
        "id": 326196800,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1675704265
    },
    {
        "content": "<p>actually using <code>span</code> is really pleasant</p>",
        "id": 326207674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675707416
    },
    {
        "content": "<p>If you want to give them practice, roll your own <code>span s</code> as the intersection of all the ideals containing s and then tell them to prove it's a closure operator in the sense of Wikipedia</p>",
        "id": 326207784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675707453
    },
    {
        "content": "<p>how about in the sense of <code>mathlib</code>? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_operator\">docs#closure_operator</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 326210843,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675708334
    }
]