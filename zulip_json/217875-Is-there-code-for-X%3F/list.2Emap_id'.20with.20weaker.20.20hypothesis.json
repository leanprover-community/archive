[
    {
        "content": "<p>Is there an existing version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_id'\">docs#list.map_id'</a> with a weaker hypothesis? Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I can prove it, just curious why I didn't see it already I guess.</p>",
        "id": 328879537,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1676856195
    },
    {
        "content": "<p>It follows relatively easily from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_congr\">docs#list.map_congr</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_id\">docs#list.map_id</a>; maybe that's why.</p>",
        "id": 328883486,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1676859489
    },
    {
        "content": "<p>Hmm. I wonder if there is an advantage to having <code>list.map_id'</code> be what it is instead of the above version.</p>",
        "id": 328884657,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1676860509
    },
    {
        "content": "<p>Since I think the current version follows from the above version?</p>",
        "id": 328884760,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1676860578
    },
    {
        "content": "<p>Indeed, if you replace <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_id'\">docs#list.map_id'</a> by your more general version, it should be straightforward to fix anything that breaks. But the file it's in was already ported ...</p>",
        "id": 328887515,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1676863299
    },
    {
        "content": "<p>I traced <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_id'\">docs#list.map_id'</a> back to <a href=\"https://github.com/leanprover/lean/commit/632c98aade942084235a2678b1135d807597e2d8#diff-17cdd52bb984b9bff3d8087a53d29e55920832902206874c2957a6828335ee72R111-R112\">this commit</a> by the father of Lean. It was <a href=\"https://github.com/leanprover-community/mathlib/commit/aa78466db187769dcd1777ca1c18672e1307190d#diff-e4e528603c575c873644c966d440b3ff2b50e4356db3573df5ffacc0a2f3f7c7R207\">moved</a> to mathlib <a href=\"https://github.com/leanprover/lean/commit/cc811188929de043b8b159da1c49e72074f59db0#diff-17cdd52bb984b9bff3d8087a53d29e55920832902206874c2957a6828335ee72L177-L178\">from Lean core</a> in 2017.</p>",
        "id": 328889783,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1676865451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Kayla Thomas</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/list.2Emap_id'.20with.20weaker.20.20hypothesis/near/328884657\">said</a>:</p>\n<blockquote>\n<p>Hmm. I wonder if there is an advantage to having <code>list.map_id'</code> be what it is instead of the above version.</p>\n</blockquote>\n<p>It doesn't scale well to add another lemma to mathlib for every existing lemma about map combined with congr</p>",
        "id": 328931715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676885399
    },
    {
        "content": "<p>I was thinking along the lines of whether the existing <code>list.map_id'</code> could be replaced.</p>",
        "id": 329024008,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1676911042
    },
    {
        "content": "<p>Ah sorry, I should have clicked <code>list.map_id'</code>, it doesn't have the statement I expected. I think your version would probably be good as a replacement. Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map_id'#doc\">docs4#List.map_id'</a> the same?</p>",
        "id": 329030037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676912834
    },
    {
        "content": "<p>Although I think a better statement might be <code>list.map_eq_self_iff : List.map f l = l ↔ ∀ (x : α), x ∈ l → f x = x</code></p>",
        "id": 329030285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676912910
    },
    {
        "content": "<p>No problem. Yes, they look the same.</p>",
        "id": 329030492,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1676912999
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib-port-status/file/data/list/basic\">port-status#data/list/basic</a> says the file is not only ported, but also out of sync</p>",
        "id": 329032946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676913771
    },
    {
        "content": "<p>So it might not be a good idea to add any more changes in mathlib3 until we're resynced the existing changes</p>",
        "id": 329033021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676913790
    },
    {
        "content": "<p>Ok.</p>",
        "id": 329033263,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1676913857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/list.2Emap_id'.20with.20weaker.20.20hypothesis/near/329030285\">said</a>:</p>\n<blockquote>\n<p>Although I think a better statement might be <code>list.map_eq_self_iff : List.map f l = l ↔ ∀ (x : α), x ∈ l → f x = x</code></p>\n</blockquote>\n<p>Which is very similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_eq_map_iff\">docs#list.map_eq_map_iff</a></p>",
        "id": 329042549,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676917103
    },
    {
        "content": "<p>Is it odd that there is both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_congr\">docs#list.map_congr</a> and  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_eq_map_iff\">docs#list.map_eq_map_iff</a> ?</p>",
        "id": 329061465,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1676924563
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_congr\">docs#list.map_congr</a>  could be removed, since it appears to be just one direction of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_eq_map_iff\">docs#list.map_eq_map_iff</a> ?</p>",
        "id": 329062268,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1676924939
    },
    {
        "content": "<p>Just to note, I've never tried to make a PR to mathlib or used lean4 much.</p>",
        "id": 329069064,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1676928246
    },
    {
        "content": "<p><code>list.map_congr</code> could be removed, but I think the status quo is fine. <code>list.map_congr</code> might be easier to find by guessing the name. Note also that these two lemmas are consecutive in the file, and that <code>list.map_eq_map_iff</code> uses <code>list.map_congr</code> in its proof, so not much is gained by removing <code>list.map_congr</code></p>",
        "id": 329248581,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677000585
    }
]