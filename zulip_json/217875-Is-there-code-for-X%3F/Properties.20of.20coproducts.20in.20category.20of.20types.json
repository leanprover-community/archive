[
    {
        "content": "<p>Is there some criterion somewhere when the inclusion morphisms into a coproduct are monomorphisms? More specifically, is there the following result for the category of types?<br>\nAlso is there the statement that in types, the inclusions into a coproduct are jointly surjective?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">Limits</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Types.mono_of_inclusionCoproduct</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Discrete</span> <span class=\"n\">ι</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ColimitCocone</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mono</span> <span class=\"o\">(</span><span class=\"n\">t.cocone.ι.app</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Types.jointlySurjective_inclusionsCoproduct</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Discrete</span> <span class=\"n\">ι</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ColimitCocone</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t.cocone.pt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩),</span> <span class=\"n\">t.cocone.ι.app</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 402089050,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700004296
    },
    {
        "content": "<p>The second one is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Types.jointly_surjective#doc\">docs#CategoryTheory.Limits.Types.jointly_surjective</a></p>",
        "id": 402089663,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1700004594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Properties.20of.20coproducts.20in.20category.20of.20types/near/402089663\">said</a>:</p>\n<blockquote>\n<p>The second one is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Types.jointly_surjective#doc\">docs#CategoryTheory.Limits.Types.jointly_surjective</a></p>\n</blockquote>\n<p>I keep loogling for <code>ColimitCocone</code>, instead of searching for <code>IsColimit</code>. <code>ColimitCocone</code> is not used very often it seems.</p>",
        "id": 402090186,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700004848
    },
    {
        "content": "<p>That's right. We use <code>Cocone</code> and <code>IsColimit</code> instead of <code>ColimitCocone</code> most of the time. Actually, in most cases you should just use the colimit (or coproduct in this case) without referring to any cocones.</p>",
        "id": 402092049,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700005842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Properties.20of.20coproducts.20in.20category.20of.20types/near/402092049\">said</a>:</p>\n<blockquote>\n<p>That's right. We use <code>Cocone</code> and <code>IsColimit</code> instead of <code>ColimitCocone</code> most of the time. Actually, in most cases you should just use the colimit (or coproduct in this case) without referring to any cocones.</p>\n</blockquote>\n<p>So you are saying that <code>X ≅ colimit F</code> is preferrable over <code>(t : ColimitCocone F) (h : t.cocone.pt = X)</code>? The latter seems closer to what I would say on a piece of paper, but I realised that it leads to repeated <code>eqToHom h</code> terms when working with it (to prevent casting hell caused by <code>rw [h]</code>).</p>",
        "id": 402161384,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700032647
    },
    {
        "content": "<p>I found <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.MonoCoprod#doc\">docs#CategoryTheory.Limits.MonoCoprod</a> which is essentially what I want, although I need to conclude from <code>MonoCoprod C</code> for a category <code>C</code>, that inclusions in arbitrary (existing) coproducts are injective (at least if <code>C</code> has all coproducts). This does not seem to be anywhere. <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>: you wrote the linked file, did I overlook something?</p>",
        "id": 402163342,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700033399
    },
    {
        "content": "<p>When <a href=\"https://github.com/leanprover-community/mathlib4/pull/8242\">#8242</a> is merged, I can add this property of categories <code>C</code> satisfying <code>[MonoCoprod C]</code>.</p>",
        "id": 402170747,
        "sender_full_name": "Joël Riou",
        "timestamp": 1700035930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"648495\">@Christian Merten</span> since you're working in the category of types, for your <code>Types.mono_of_inclusionCoproduct</code> for now you can use a combination of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.IsColimit.coconePointUniqueUpToIso#doc\">docs#CategoryTheory.Limits.IsColimit.coconePointUniqueUpToIso</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Types.coproductIso#doc\">docs#CategoryTheory.Limits.Types.coproductIso</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=sigma_mk_injective#doc\">docs#sigma_mk_injective</a></p>",
        "id": 402179019,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1700038656
    },
    {
        "content": "<p>Thanks, that worked, at least for coproducts indexed by <code>ι : Type u</code> and <code>f : ι → Type u</code>, i.e. the universe levels need to match. That is because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Limits.Types.coproductIso#doc\">docs#CategoryTheory.Limits.Types.coproductIso</a> is only defined for agreeing universe levels. Can I circumvent that? Or is there a reason why these are only formulated for agreeing universe levels?</p>",
        "id": 402204245,
        "sender_full_name": "Christian Merten",
        "timestamp": 1700045949
    },
    {
        "content": "<p>It's probably a typo that <code>coproductIso</code> only works for matching universe levels. I don't see why it shouldn't work for input of the form <code>{J : Type v} (F : J → Type u) [UnivLE.{v, u}]</code> like  <code>productIso</code></p>",
        "id": 402205013,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1700046145
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8421\">#8421</a> allows for different universe levels (the <code>TypeMax</code> version)</p>",
        "id": 402211372,
        "sender_full_name": "Dagur Asgeirsson",
        "timestamp": 1700047984
    }
]