[
    {
        "content": "<p>Hi,</p>\n<p>I'm wondering if there is a code formatter for Lean similar to Python's <a href=\"https://github.com/psf/black\">black</a>.</p>",
        "id": 387691780,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1693236225
    },
    {
        "content": "<p>No, but I would like one, and now that we are fully in lean4, I think we can start thinking about development environment things more again.</p>",
        "id": 387803724,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693282266
    },
    {
        "content": "<p>It would be nice to have something to automatically wrap my lines and put my lemma colons at the end of lines instead of at the beginning. I think the community would hopefully agree that something like this would be useful, but I think some discussion would be warranted on how far it should go.</p>",
        "id": 387804021,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693282377
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/VSCode.20extension.20for.20Lean.20code.20actions/near/387117099\">Here</a> is a nice list from <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  of things a formatter could potentially do. </p>\n<ul>\n<li>\"clean up\" code by looking at open namespaces / (scoped) notation and using that to shorten names / use the notation.</li>\n<li>Look at namespaces / scoped notations that could be opened to shorten parts of the code. </li>\n<li>Use variables declared in the file and reuse those variables assuming those variables have the same type / binder type and associated type-classes, potentially by renaming the variable.</li>\n</ul>\n<p>Some other things might be:</p>\n<ul>\n<li>Make sure the right number of newlines exist between lemmas/sections</li>\n<li>Make sure everything is properly indented<ul>\n<li>Variables to a def/theorem that don't fit on the first line indented by 4</li>\n<li>First line of a proof indented by 2</li>\n</ul>\n</li>\n<li>Check for unnecessary parens</li>\n<li>Remove transitively-provided imports</li>\n<li>Perhaps <a href=\"#narrow/stream/287929-mathlib4/topic/Alphabetical.20listing.20of.20imports/near/386895913\">alphabetize the imports</a> (apparently this changes behavior though, so be careful)</li>\n<li><code>&lt;-</code> to <code>←</code></li>\n<li>Collapse sequences of calls to <code>rw</code> into one call, where possible</li>\n</ul>",
        "id": 387804688,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1693282690
    },
    {
        "content": "<p>Possibly a good approach to this would be:</p>\n<ol>\n<li>experiment with the current behaviour just parsing a file and then pretty printing the resulting syntax again</li>\n<li>be sad that lots breaks</li>\n<li>work out how to fix some of the breakages, so we get closer to syntax round-tripping</li>\n<li>do as many cycles through 1-3 as you can bear</li>\n<li>decide that just parsing and pretty printing is not actually going to be good enough for a code formatter, but bask in the praise of everyone who has been helped by syntax round-tripping working better</li>\n<li>start writing a code formatter</li>\n</ol>",
        "id": 387804773,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693282766
    },
    {
        "content": "<p>to be fair, we've already done 1-4 quite a bit for mathport, I think we're at 5 now</p>",
        "id": 387804809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693282802
    },
    {
        "content": "<p>Good point.</p>",
        "id": 387804960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693282884
    },
    {
        "content": "<p>Thank you, Mario, for all your great work getting nice syntax out of mathport. :-)</p>",
        "id": 387804963,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693282886
    },
    {
        "content": "<p>Now on to 6. :-)</p>",
        "id": 387804981,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693282897
    },
    {
        "content": "<p>and it is indeed pretty close to \"back to the drawing board\"</p>",
        "id": 387804999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693282921
    },
    {
        "content": "<p>The first challenge is getting ASTs out of lean, depending on how we want the formatter to work</p>",
        "id": 387805074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693282959
    },
    {
        "content": "<p>something like an editor action to format the current file or current command is the closest to what code actions are already doing</p>",
        "id": 387805173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693283026
    },
    {
        "content": "<p>in that case you can get the AST directly handed to you by the server, and there isn't a huge overhead because the server already has them lying around</p>",
        "id": 387805257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693283062
    },
    {
        "content": "<p>The harder case is full project formatting, which right now would require a lot of custom code and a full build to extract the AST</p>",
        "id": 387805334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693283091
    },
    {
        "content": "<p>although, if the formatter is an independent lean project, it's not clear how the server would load the project so that it could be applied to arbitrary lean code (which most likely doesn't depend on the formatter)</p>",
        "id": 387805672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693283318
    },
    {
        "content": "<p>I'd quite like a formatter more in the style of <a href=\"https://hackage.haskell.org/package/ormolu\">ormolu</a>, in partiular points two and five from the list of goals there</p>",
        "id": 387910530,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693324017
    },
    {
        "content": "<p>Lean 4 <a href=\"https://github.com/leanprover/lean4/blob/master/script/reformat.lean\">comes with a reformatter</a> that just loads a file and pretty prints all its declarations. My understanding is it's mainly a demonstration for how to write a frontend. I'm not sure how well tested it is or if anyone regularly runs it (to run it on mathlib, I think you'd need to add <code>Lean.enableInitializersExecution</code>).</p>",
        "id": 387912332,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693324644
    },
    {
        "content": "<p>It works about as well as mathport in terms of output quality, because mathport uses exactly the same method, it just isn't getting the input from a lean 4 file</p>",
        "id": 388020593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693365100
    },
    {
        "content": "<p>I could package it up into a standalone program, but I'm pretty confident in saying it should not be used on any code you really care about. It's like 95% there but the remaining 5% is way too high an error margin for comfort. I think it also very rarely produces invalid or misinterpreted syntax, but those are generally bugs</p>",
        "id": 388020902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693365263
    },
    {
        "content": "<p>I tried the <a href=\"https://github.com/leanprover/lean4/blob/master/script/reformat.lean\">reformat.lean</a> program. And it failed to reformat itself. :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span>   <span class=\"k\">if</span> <span class=\"n\">cmds.getKind</span> <span class=\"bp\">==</span> <span class=\"n\">nullKind</span> <span class=\"bp\">||</span> <span class=\"n\">cmds.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Module.header</span> <span class=\"k\">then</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>   <span class=\"k\">if</span> <span class=\"n\">cmds.getKind</span> <span class=\"bp\">==</span> <span class=\"n\">nullKind</span> <span class=\"bp\">||</span> <span class=\"n\">cmds.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span> <span class=\"n\">Parser.Module.header</span> <span class=\"k\">then</span>\n</code></pre></div>",
        "id": 388804970,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1693734138
    },
    {
        "content": "<p>That example sure seems like a bug. Could you open at issue at the lean4 repository? Minimisations or proposed fixes welcome.</p>",
        "id": 388870747,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693782226
    },
    {
        "content": "<p>Here's a minimization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"n\">Lean.PrettyPrinter.ppTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"c1\">-- `` x✝</span>\n</code></pre></div>",
        "id": 388871225,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693782631
    },
    {
        "content": "<p>I created an issue. Hope it was clear enough, I'm still quite new to the Lean echosystem. <br>\n<a href=\"https://github.com/leanprover/lean4/issues/2536\">https://github.com/leanprover/lean4/issues/2536</a></p>",
        "id": 390746421,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1694618164
    },
    {
        "content": "<p>I have made a tracking issue for our own use with respect to the wishlist items above <a href=\"https://github.com/leanprover-community/mathlib4/pull/7217\">#7217</a>. Please feel free to add things to it. Really, what I would like is that any easily lintable mistake that a maintainer would otherwise spend time on correcting can go in the issue.</p>",
        "id": 391467219,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694936130
    }
]