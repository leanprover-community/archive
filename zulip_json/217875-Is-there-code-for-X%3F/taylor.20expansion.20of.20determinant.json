[
    {
        "content": "<p>Do we have the taylor-like expansion of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">det</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>I</mi><mo>+</mo><mi>x</mi><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{det}(I + xA)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">det</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>? In particular I only need the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Matrix.det_one_add_smul</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">trace</span> <span class=\"n\">M</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401791608,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1699890246
    },
    {
        "content": "<p>This was on my TODO list in <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook/blob/ef8e49cb402bef97ee286530ece76829ddbd3937/MatrixCookbook/1Basic.lean#L143-L160\">lean-matrix-cookbook</a>, but I never got to spending any time on it</p>",
        "id": 401795428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699891127
    },
    {
        "content": "<p>I managed to get the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Matrix.eval_det_add_X_smul</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">•</span> <span class=\"n\">M.map</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">det</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_det</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">eval_add</span><span class=\"o\">,</span> <span class=\"n\">Algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_mul</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebraMap_eq_smul</span><span class=\"o\">,</span> <span class=\"n\">matPolyEquiv_smul_one</span><span class=\"o\">,</span> <span class=\"n\">map_X</span><span class=\"o\">,</span> <span class=\"n\">X_mul</span><span class=\"o\">,</span> <span class=\"n\">eval_mul_X</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Matrix.trace_submatrix_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">submatrix</span> <span class=\"n\">M</span> <span class=\"n\">Fin.succ</span> <span class=\"n\">Fin.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">trace</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">delta</span> <span class=\"n\">trace</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">finSuccEquiv</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.sum_comp</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Polynomial</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Matrix.det_one_add_smul_aux</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">derivative</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">•</span> <span class=\"n\">M.map</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">trace</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_succ_row_zero</span><span class=\"o\">,</span> <span class=\"n\">map_sum</span><span class=\"o\">,</span> <span class=\"n\">eval_finset_sum</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">map_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">X_mul_C</span><span class=\"o\">,</span> <span class=\"n\">submatrix_add</span><span class=\"o\">,</span>\n      <span class=\"n\">submatrix_smul</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">submatrix_map</span><span class=\"o\">,</span> <span class=\"n\">derivative_mul</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">,</span>\n      <span class=\"n\">derivative_C</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">derivative_X</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">eval_add</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">eval_det_add_X_smul</span><span class=\"o\">,</span> <span class=\"n\">eval_pow</span><span class=\"o\">,</span> <span class=\"n\">eval_neg</span><span class=\"o\">,</span> <span class=\"n\">eval_one</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_eq_single</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fin.val_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">derivative_one</span><span class=\"o\">,</span> <span class=\"n\">eval_zero</span><span class=\"o\">,</span> <span class=\"n\">one_apply_eq</span><span class=\"o\">,</span> <span class=\"n\">eval_one</span><span class=\"o\">,</span>\n        <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">Fin.succAbove_zero</span><span class=\"o\">,</span> <span class=\"n\">submatrix_one</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Fin.succ_injective</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">det_one</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">trace_submatrix_succ</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"n\">hi</span>\n      <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n      <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_apply_ne'</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">eval_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">det_eq_zero_of_column_eq_zero</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">eval_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span>\n        <span class=\"n\">intro</span> <span class=\"n\">j</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">submatrix_apply</span><span class=\"o\">,</span> <span class=\"n\">Fin.succAbove_below</span><span class=\"o\">,</span> <span class=\"n\">one_apply_ne</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">bne_iff_ne</span> <span class=\"o\">(</span><span class=\"n\">Fin.succ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin.castSucc</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fin.castSucc_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">Fin.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hi.symm</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Finset.mem_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>",
        "id": 401819430,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1699898578
    }
]