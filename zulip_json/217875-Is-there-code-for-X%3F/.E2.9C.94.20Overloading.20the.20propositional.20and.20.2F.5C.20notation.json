[
    {
        "content": "<p>The HAnd typeclass seems to be for bitwise and &amp;&amp;&amp;. But I would like to use the propositional and /\\ notation with my own types.</p>",
        "id": 406610473,
        "sender_full_name": "James Oswald",
        "timestamp": 1701978585
    },
    {
        "content": "<p>It's defined without a type class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">inherit_doc</span><span class=\"kd\">]</span> <span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">35</span> <span class=\"s2\">\" ∧ \"</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">And</span>\n</code></pre></div>\n<p>but there may be a way to prioritize yours over it?</p>",
        "id": 406612138,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701979216
    },
    {
        "content": "<p>You can set the <code>priority</code></p>",
        "id": 406612575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701979349
    },
    {
        "content": "<p>You could define your own type-class to do that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HWedge</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hWedge</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binop</span><span class=\"bp\">%</span> <span class=\"n\">HWedge.hWedge</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HWedge</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Add.add</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 406612948,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1701979493
    },
    {
        "content": "<p>(Note: this breaks <code>and_comm</code> see Eric's solution)</p>\n<p>Thanks! I'm going to mark this as solved, for anyone looking in the future, I've found that to get this to also maintain the original functionality (so that /\\ also works on Props) you need to explicitly add an instance for Prop that points to And.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HWedge</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hWedge</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">binop</span><span class=\"bp\">%</span> <span class=\"n\">HWedge.hWedge</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HWedge</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Add.add</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HWedge</span> <span class=\"kt\">Prop</span> <span class=\"kt\">Prop</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">And</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">5</span> <span class=\"bp\">∧</span> <span class=\"mi\">4</span>\n<span class=\"k\">#check</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">False</span> <span class=\"c1\">--Breaks without the \"instance : HWedge Prop Prop Prop\"</span>\n</code></pre></div>",
        "id": 406614455,
        "sender_full_name": "James Oswald",
        "timestamp": 1701980265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"633816\">James Oswald</span> has marked this topic as resolved.</p>",
        "id": 406614519,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701980287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"633816\">James Oswald</span> has marked this topic as unresolved.</p>",
        "id": 406614529,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701980292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"633816\">James Oswald</span> has marked this topic as resolved.</p>",
        "id": 406614546,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701980312
    },
    {
        "content": "<p>I think this is a better strategy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HWedge</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hWedge</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"s2\">\"∧\"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">HWedge.hWedge</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HWedge</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Add.add</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">5</span> <span class=\"bp\">∧</span> <span class=\"mi\">4</span>\n<span class=\"k\">#check</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">False</span>\n</code></pre></div>",
        "id": 406615801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701980896
    },
    {
        "content": "<p>Otherwise  you'll find that <code>and_comm</code> doesn't work any more, because the Prop version is no longer <code>And</code> but <code>HWedge.hWedge</code></p>",
        "id": 406615845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701980923
    },
    {
        "content": "<p>Ah yea <code>and_comm</code> breaking is a big issue, thanks for the catch!</p>",
        "id": 406615936,
        "sender_full_name": "James Oswald",
        "timestamp": 1701980990
    }
]