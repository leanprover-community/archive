[
    {
        "content": "<p>If <code>V</code> and <code>W</code> are <code>k</code>-vector spaces with bases indexed by <code>I</code> and <code>J</code>, and if <code>W</code> is finite-dimensional then (unless I've made a mistake!) there's a linear equiv between <code>V →ₗ[k] W</code> and matrices with rows indexed by <code>J</code> and colums indexed by <code>I</code>. I couldn't find this in mathlib! mathlib's <code>linear_map.to_matrix</code> (to my surprise) has what seems to me to be a superfluous hypothesis that <code>V</code> is also finite-dimensional. Am I not looking in the right place? Discovered when preparing teaching material.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">I</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">J</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">J</span> <span class=\"n\">I</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">φ</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">C.coord</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">B.constr</span> <span class=\"n\">k</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">basis.equiv_fun</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 325708405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675452288
    },
    {
        "content": "<p><del>docs#linear_map.to_matrix'?</del></p>",
        "id": 325710278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675452971
    },
    {
        "content": "<p>I don't see the hypothesis you're claiming exists in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.to_matrix\">docs#linear_map.to_matrix</a></p>",
        "id": 325710657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453121
    },
    {
        "content": "<p>Eric, both <code>n</code> and <code>m</code> are <code>fintypes</code></p>",
        "id": 325710721,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675453151
    },
    {
        "content": "<p>Ah, I missed that Kevin's example has only J as a fintype</p>",
        "id": 325710766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453171
    },
    {
        "content": "<p>I think the answer is \"<code>matrix</code> used to only be defined on <code>fintype</code> indices\" (<span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> since relaxed it to only need that for multiplication)</p>",
        "id": 325710791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453184
    },
    {
        "content": "<p>And we didn't ever finish cleaning that up</p>",
        "id": 325710816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453193
    },
    {
        "content": "<p>Got it. I've since proved left_inv and right_inv so am more confident in my assertion :-)</p>",
        "id": 325711419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675453421
    },
    {
        "content": "<p>I would guess you can just edit the version in mathlib and remove the <code>fintype</code>, and do this recursively on the things it complains about</p>",
        "id": 325711543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453452
    },
    {
        "content": "<p>I tried that but unfortunately it didn't converge</p>",
        "id": 325711589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675453472
    },
    {
        "content": "<p>Do you have a branch I can look at?</p>",
        "id": 325711622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453486
    },
    {
        "content": "<p>At some point you have to start changing I -&gt; V to finsupp I V</p>",
        "id": 325711698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675453505
    },
    {
        "content": "<p>Even for <code>linear_map.to_matrix</code>?</p>",
        "id": 325711912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453566
    },
    {
        "content": "<p>By which I mean \"almost immediately\"</p>",
        "id": 325711943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675453575
    },
    {
        "content": "<p>It sounds like you removed both <code>fintype</code> assumptions but should have kept one like you did in your example?</p>",
        "id": 325711996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675453593
    },
    {
        "content": "<p>Right, in general it's going to be <code>(V →ₗ[k] W) ≃ₗ[k] I → (J →₀ k)</code>, right?</p>",
        "id": 325712022,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675453605
    },
    {
        "content": "<p>I'm on mobile so all I see is weird rectangles but counting the rectangles I'm going to say \"yes\"</p>",
        "id": 325712121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675453649
    },
    {
        "content": "<p>Yes that's the result one should have without any fintype hypotheses and then if J is finite it's matrices</p>",
        "id": 325712313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675453702
    },
    {
        "content": "<p>Eric the issue is that the argument in mathlib goes via functions which need to be changed to finsupps when you start dropping finiteness hypothesis</p>",
        "id": 325712452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1675453761
    },
    {
        "content": "<p>But that's only a problem for that declaration? After you finish that declaration it shouldn't be a problem anymore (except for the unused variables linter)</p>",
        "id": 325712749,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675453872
    },
    {
        "content": "<p><del>Kevin, is your version equal to the one in mathlib, or does it include a transpose?</del></p>",
        "id": 325713527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675454165
    },
    {
        "content": "<p>They are the same</p>",
        "id": 325714222,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1675454455
    }
]