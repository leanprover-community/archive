[
    {
        "content": "<p>I tried Loogle but it seems that we don't have the converse to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.equivOfCardEq#doc\">docs#Finset.equivOfCardEq</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Finset.equivOfCardEq</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Finset.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Finset.card</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Although it easily comes from existing results:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Finset.card_eq_of_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">t.card</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fin.equiv_iff_eq.1</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nonempty.intro</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">s.equivFin.symm.trans</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">t.equivFin</span>\n</code></pre></div>",
        "id": 402596263,
        "sender_full_name": "Jz Pan",
        "timestamp": 1700186222
    },
    {
        "content": "<p>Or shorter <code>Fin.equiv_iff_eq.1 ⟨(s.equivFin.symm.trans i).trans t.equivFin⟩</code>.</p>\n<p>Other possible proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Finset.card_eq_of_equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">t.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card_coe</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">Fintype.card_eq.2</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 403050429,
        "sender_full_name": "Jz Pan",
        "timestamp": 1700426101
    },
    {
        "content": "<p>So this is basically <code>Fintype.card_eq</code>.</p>",
        "id": 403050681,
        "sender_full_name": "Jz Pan",
        "timestamp": 1700426329
    }
]