[
    {
        "content": "<p>Do we have either of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedLT</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>available?</p>",
        "id": 375228030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689335814
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instInhabitedLinearExtension#doc\">docs#instInhabitedLinearExtension</a> seems to come close...</p>",
        "id": 375229664,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689336130
    },
    {
        "content": "<p>Great, then <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=monoEquivOfFin#doc\">docs#monoEquivOfFin</a> should give the rest</p>",
        "id": 375229850,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689336174
    },
    {
        "content": "<p>Nice, thanks!</p>",
        "id": 375229928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689336192
    },
    {
        "content": "<p>Oh, one other ingredient would be the order embedding from a partial order to its linear extension, which is essentially <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=toLinearExtension#doc\">docs#toLinearExtension</a></p>",
        "id": 375230122,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689336233
    },
    {
        "content": "<p>I guess I don't immediately need these, just noticed they were missing amongst the basic instances for <code>WellFoundedLT</code>. I'll star these messages and try to put together the pieces ... someday!</p>",
        "id": 375230585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689336318
    },
    {
        "content": "<p>Amazingly it seems the <code>Prod</code> instance for <code>WellFoundedLT</code> was missing: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5899\">#5899</a>. (We already had the <code>Pi</code> instance, but somewhat obscurely in <code>Mathlib.Data.DFinsupp.WellFounded</code>.)</p>",
        "id": 375231025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689336392
    },
    {
        "content": "<p>Perhaps this is already somewhere as a <code>theorem</code> rather than an <code>instance</code>, but I did try <code>exact?</code>.</p>",
        "id": 375231209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689336428
    },
    {
        "content": "<p>Some of these results were useful when <code>Lex</code> orders were being developed.  It might be worth scanning some <code>&lt;prefix&gt;.Lex</code> files, maybe...</p>",
        "id": 375232588,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1689336713
    },
    {
        "content": "<p>Yes we have your theorem, Scott, but it's stated using <code>Finite</code></p>",
        "id": 375288537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689345289
    },
    {
        "content": "<p>Also it will talk about <code>WellFounded</code>, not <code>WellFoundedLT</code>.</p>",
        "id": 375289101,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689345374
    },
    {
        "content": "<p>Oh in fact we have both. <code>finite.preorder.well_founded_lt</code></p>",
        "id": 375289656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1689345480
    }
]