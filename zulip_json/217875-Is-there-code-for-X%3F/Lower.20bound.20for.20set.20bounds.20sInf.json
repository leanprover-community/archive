[
    {
        "content": "<p>Why isn't this lemma in MathLib??  (<code>le_sInf</code> doesn't work because <code>ℝ</code> isn't an instance of <code>CompleteSemilatticeInf</code>.)  (Also there should be a <code>Real.sSup_le'</code> in which the upper bound <code>a</code> is not required to be non-negative, but the set is now required to be non-empty.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Real.le_sInf</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">BddBelow</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">sInf</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">ha</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ha</span>\n  <span class=\"k\">let</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">sInf</span> <span class=\"n\">s</span>\n  <span class=\"k\">have</span> <span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sInf</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.sInf_le_iff</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hε</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hx'</span> <span class=\"o\">⟩</span> <span class=\"o\">⟩</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hS</span> <span class=\"o\">:=</span> <span class=\"n\">hS</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 398997228,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698459262
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_csInf_iff#doc\">docs#le_csInf_iff</a> is what you need.</p>",
        "id": 398998896,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1698460396
    },
    {
        "content": "<p>OK, thanks.  (Somehow I had missed this in my initial search of MathLib.)</p>",
        "id": 398999652,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698460861
    },
    {
        "content": "<p>The best way to find this kind of lemma is to use <code>exact?</code>, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Real.le_sInf</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">BddBelow</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">sInf</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p><a href=\"https://loogle.lean-lang.org/\">https://loogle.lean-lang.org/</a> is also extremely useful.</p>",
        "id": 399024580,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1698480105
    }
]