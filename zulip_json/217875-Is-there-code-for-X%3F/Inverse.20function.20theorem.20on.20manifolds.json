[
    {
        "content": "<p>Mathlib <em>does</em> have the inverse and implicit function theorems, but only on normed spaces.</p>\n<p>The manifold version would be useful for formalising local diffeomorphisms, which come up naturally in the context of <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.28Extended.29.20chart.20is.20a.20local.20diffeomorphism\">this thread</a>.</p>",
        "id": 398772988,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698357343
    },
    {
        "content": "<p>I proved one particular case of that here, but it's not in good shape for general use (and of course not yet upstreamed): <a href=\"https://github.com/girving/ray/blob/1c46b8324e991d6d82bb50fdf93c821599c94314/Ray/AnalyticManifold/Inverse.lean#L305\">https://github.com/girving/ray/blob/1c46b8324e991d6d82bb50fdf93c821599c94314/Ray/AnalyticManifold/Inverse.lean#L305</a></p>",
        "id": 398773395,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698357585
    },
    {
        "content": "<p>There are several ways to phrase the implicit function theorem. Probably the version for zero set of a section of a vector bundle is the most general?</p>",
        "id": 398773929,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698357744
    },
    {
        "content": "<p>For the inverse function theorem, I'd expect to phrase it in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StructureGroupoid.IsLocalStructomorphWithinAt#doc\">docs#StructureGroupoid.IsLocalStructomorphWithinAt</a></p>",
        "id": 398774667,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698358126
    },
    {
        "content": "<p>For my setting, I only need the consequence \"if $f$ is $C^n$ at $x$ and the differential $df_x$ is a linear isomorphism, then $f$ is a local diffeomorphism at $x$, so any version (in several dimensions, covering real manifolds) would do.</p>\n<p>In general, the version for the zero set of a section sounds like a good general statement to aim for.</p>",
        "id": 398774724,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698358164
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20function.20theorem.20on.20manifolds/near/398774667\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/docs.23StructureGroupoid.2EIsLocalStructomorphWithinAt\">#Is there code for X? &gt; docs#StructureGroupoid.IsLocalStructomorphWithinAt</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 398774769,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698358187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20function.20theorem.20on.20manifolds/near/398774667\">said</a>:</p>\n<blockquote>\n<p>For the inverse function theorem, I'd expect to phrase it in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StructureGroupoid.IsLocalStructomorphWithinAt#doc\">docs#StructureGroupoid.IsLocalStructomorphWithinAt</a></p>\n</blockquote>\n<p>Note that this has the advantage of giving a \"category -invariant\" phrasing, so preliminary work can be shared between the analytic (of interest to Geoffrey) and smooth categories</p>",
        "id": 398775076,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698358335
    },
    {
        "content": "<p>It's off topic, but the fun thing about the complex analytic setting is that injective functions have <strong>global</strong> analytic inverses. :)</p>\n<p><a href=\"https://github.com/girving/ray/blob/main/Ray/AnalyticManifold/GlobalInverse.lean#L129\">https://github.com/girving/ray/blob/main/Ray/AnalyticManifold/GlobalInverse.lean#L129</a></p>\n<p><strong>Edit:</strong> Changed \"analytic\" to \"complex analytic\".</p>",
        "id": 398775569,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698358633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"514145\">Geoffrey Irving</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20function.20theorem.20on.20manifolds/near/398775569\">said</a>:</p>\n<blockquote>\n<p>It's off topic, but the fun thing about the analytic setting is that injective functions have <strong>global</strong> analytic inverses. :)</p>\n<p><a href=\"https://github.com/girving/ray/blob/main/Ray/AnalyticManifold/GlobalInverse.lean#L129\">https://github.com/girving/ray/blob/main/Ray/AnalyticManifold/GlobalInverse.lean#L129</a></p>\n</blockquote>\n<p>I knew this result, but it never ceases to amaze me anew :-)</p>",
        "id": 398776508,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1698359209
    },
    {
        "content": "<p>Really??? Isn't x^3 on R a counterexample?</p>",
        "id": 398776569,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1698359262
    },
    {
        "content": "<p><strong>Complex</strong> analytic functions, that is. :)</p>",
        "id": 398776632,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698359290
    },
    {
        "content": "<blockquote>\n<p>It's off topic, but the fun thing about the analytic setting is that injective functions have global analytic inverses. :)</p>\n</blockquote>\n<p>Why is this particularly amazing? I think this also holds for C^1 functions if you assume nonvanishing of Jacobian. The inverse function theorem would give you C^1 local inverses, so the global inverse is C^1.</p>\n<p>For complex C^1/analytic functions (in one dimension, not sure about higher dimensions), local injectivity implies nonvanishing of derivatives, so we don't need this extra assumption.</p>\n<p>A more nontrivial result is <a href=\"https://en.wikipedia.org/wiki/Invariance_of_domain\">invariance of domain</a>, which applies to an injective continuous map between Euclidean spaces of the same (finite) dimension, without any differentiability hypothesis.</p>",
        "id": 398780641,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698361726
    },
    {
        "content": "<blockquote>\n<p>not sure about higher dimensions</p>\n</blockquote>\n<p>Apparently it's also <a href=\"https://mathoverflow.net/a/44952/3332\">true in higher dimensions</a>.</p>",
        "id": 398782918,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698363228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20function.20theorem.20on.20manifolds/near/398775076\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inverse.20function.20theorem.20on.20manifolds/near/398774667\">said</a>:</p>\n<blockquote>\n<p>For the inverse function theorem, I'd expect to phrase it in terms of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StructureGroupoid.IsLocalStructomorphWithinAt#doc\">docs#StructureGroupoid.IsLocalStructomorphWithinAt</a></p>\n</blockquote>\n<p>Note that this has the advantage of giving a \"category -invariant\" phrasing, so preliminary work can be shared between the analytic (of interest to Geoffrey) and smooth categories</p>\n</blockquote>\n<p>I've thought about this for way too long in the past days, but I now have proven a \"categorical\" version of the inverse function theorem: for Banach spaces for now; Banach manifolds will come next. Its conclusion is phrased in terms of G.isLocalStructomorphWithinAt (thanks for the pointer!), its hypotheses in terms of a condition on the pregroupoid inducing G.</p>\n<p>Applying this to the smooth or analytic category entails extracting the underlying pregroupoid.</p>\n<p>I've done this for <code>contDiffGroupoid</code> <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...MR-manifold-extra-pregroupoids\">on a branch</a>. This extraction breaks a few proofs; I'm out of my depth fixing them. The issue is that unfolding the definition of the groupoid changed... Probably an easy fix if you know what to do. Help is appreciated.</p>",
        "id": 400571389,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1699288805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> I fixed the issues locally; should I push them to the branch directly?</p>",
        "id": 400574490,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699289560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634338\">@Michael Rothgang</span> I noticed you didn't PR your <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...MR-manifold-extra-pregroupoids\">branch</a> yet; any reason?</p>",
        "id": 408050689,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702589717
    },
    {
        "content": "<p>Mostly because my work on the IFT isn't full complete yet. (I have a proof of concept result <a href=\"https://github.com/leanprover-community/mathlib4/blob/639ff8130c4dd33c8741706bf70e32a8425032f5/Mathlib/Geometry/Manifold/InverseFunctionTheorem.lean\">on a branch</a>, which shows to me that my approach works. It shows a categorical version of the inverse function theorem, and does most of the proof that C^n maps on <em>normed spaces</em> fit this framework. Next up is filling in some sorries and generalising to C^n maps on <em>manifolds</em>. This will happen, but most likely only in the new year.)</p>\n<p>That said: there's no reason not to submit this branch; I just did so in <a href=\"https://github.com/leanprover-community/mathlib4/pull/9091\">#9091</a>. (I borked my original branch, so created a new one.)</p>",
        "id": 408267597,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1702680113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span></p>",
        "id": 408267646,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1702680124
    }
]