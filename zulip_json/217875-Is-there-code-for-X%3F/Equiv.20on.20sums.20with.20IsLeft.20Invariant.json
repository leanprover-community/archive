[
    {
        "content": "<p>Hi. </p>\n<p><a href=\"https://gist.github.com/linesthatinterlace/f1faa2a1c8379b1273397175fe40e056\">https://gist.github.com/linesthatinterlace/f1faa2a1c8379b1273397175fe40e056</a></p>\n<p>I have a gist here which ends with an equiv thus: <code>{e : α₁ ⊕ β₁ ≃ α₂ ⊕ β₂ // ∀ x, (e x).isLeft = x.isLeft} ≃\n(α₁ ≃ α₂) × (β₁ ≃ β₂)</code>.</p>\n<p>Essentially I want to define the equivalence that <code>Equiv.sumCongr</code> is one component of, so that I can move between permutations on sum types which are invariant on IsLeft (that is, they send Sum.inl to Sum.inl and Sum.inr to Sum.inr), and permutations between each component.</p>\n<p>Do we have this? It seems a natural enough idea.</p>\n<p>I actually wanted it in the special case where α₁ = α₂ = β₁ = β₂ = FIn (2^m), as I really wanted an equivalence between \"permutations on Fin (2^(m+1) that fix bit i\" and \"pairs of permutations on Fin(2^m)\". It's just that Fin (2^(m+1) is naturally equivalent to Bool \\times Fin (2^m) which is in turn equivalent to Fin (2^m) ⊕ Fin (2^m), and the above is broadly equivalent to that. But the above gist is totally extracted from my context.</p>\n<p>I'd love thoughts.</p>",
        "id": 385496462,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692202289
    },
    {
        "content": "<p>It doesn't look correct, it seems there are many more equivalences on the left hand side, for the second component may depend on the first one.</p>",
        "id": 385525256,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1692213402
    },
    {
        "content": "<p>I think a more interesting result would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">β₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span> <span class=\"bp\">⊕</span> <span class=\"n\">β₂</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Sum.LiftRel</span> <span class=\"n\">ra</span> <span class=\"n\">rb</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n  <span class=\"bp\">≃</span>\n<span class=\"o\">{</span><span class=\"n\">ea</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ra</span> <span class=\"o\">(</span><span class=\"n\">ea</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"o\">{</span><span class=\"n\">eb</span> <span class=\"o\">:</span> <span class=\"n\">β₁</span> <span class=\"bp\">≃</span> <span class=\"n\">β₂</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rb</span> <span class=\"o\">(</span><span class=\"n\">eb</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>for which your version is a special case with <code>ra = rb = \\top</code></p>",
        "id": 385533248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692216821
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>, the linked code appear to be sorry-free, so I'm pretty sure it's true <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 385533373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692216880
    },
    {
        "content": "<p>Yes, it's possible I've mis-stated it above but I'm fairly sure I didn't. And my code is complete.</p>",
        "id": 385536247,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692217994
    },
    {
        "content": "<p>I'm not sure sure I see why my result is that with <code>\\top</code></p>",
        "id": 385536729,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692218132
    },
    {
        "content": "<p>Because <code>Sum.LiftRel \\top \\top x y</code> is the same as <code>x.is_right = y.is_right</code></p>",
        "id": 385544522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692220798
    },
    {
        "content": "<p>Aha, I see, yes.</p>",
        "id": 385546668,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692221816
    },
    {
        "content": "<p>That is nicer, and less symmetry-breaking than specifying left or right.</p>",
        "id": 385546692,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692221831
    },
    {
        "content": "<p>Symmetry was indeed my motivation</p>",
        "id": 385551360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692224490
    },
    {
        "content": "<p>I originally started wanting to find the natural equivalence between {x : α \\times β // x.fst = a} (for fixed a) and β.</p>",
        "id": 385553317,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692225690
    },
    {
        "content": "<p>Which this is somewhat related to, though I went a different route. I'm not sure what the generalisation of that is.</p>",
        "id": 385553337,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692225715
    },
    {
        "content": "<p>(It is related because of the Bool \\times α ≃ α ⊕α equivalence I mention above.)</p>",
        "id": 385553610,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692225894
    },
    {
        "content": "<p>Is \"getLeft\" the correct way to extract values of something that is provably left?</p>",
        "id": 385617406,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692258310
    },
    {
        "content": "<p>I have updated the above gist with this result. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, do you think this is PR-able? I am not sure about names and style. <a href=\"https://gist.github.com/linesthatinterlace/f1faa2a1c8379b1273397175fe40e056\">https://gist.github.com/linesthatinterlace/f1faa2a1c8379b1273397175fe40e056</a></p>",
        "id": 385650112,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692270087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Equiv.20on.20sums.20with.20IsLeft.20Invariant/near/385617406\">said</a>:</p>\n<blockquote>\n<p>Is \"getLeft\" the correct way to extract values of something that is provably left?</p>\n</blockquote>\n<p>Another option is <code>match h : x with | .inl _ := sorry | .inr _ =&gt; (h _).elim end</code></p>",
        "id": 385651148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692270482
    },
    {
        "content": "<p>I like that less I think.</p>",
        "id": 385651981,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692270811
    },
    {
        "content": "<p>Just on the basis that I don't like deliberate sorries.</p>",
        "id": 385652037,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692270839
    },
    {
        "content": "<p>it would be nice if there was a fusion of getLeft and Option.get, where you directly get something, but have to provide a proof that it isLeft.</p>",
        "id": 385652158,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692270878
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equivOfLiftRelToEquivLeft</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">β₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span> <span class=\"bp\">⊕</span> <span class=\"n\">β₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">β₂</span> <span class=\"bp\">→</span> <span class=\"n\">β₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">Sum.LiftRel</span> <span class=\"n\">ra</span> <span class=\"n\">rb</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span>  <span class=\"n\">a₁</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a₁</span><span class=\"o\">),</span> <span class=\"n\">he</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a₂</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">he'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">Sum.LiftRel</span> <span class=\"n\">ra</span> <span class=\"n\">rb</span> <span class=\"n\">ab</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ab</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">he</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">ab</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a₂</span><span class=\"o\">),</span> <span class=\"n\">he'</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a₁</span>\n</code></pre></div>",
        "id": 385653154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692271314
    },
    {
        "content": "<p>Though I can't work out how to prove things about those <code>matches</code>, <code>split</code> makes a mess</p>",
        "id": 385653887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692271604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Equiv.20on.20sums.20with.20IsLeft.20Invariant/near/385650112\">said</a>:</p>\n<blockquote>\n<p>I have updated the above gist with this result. <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>, do you think this is PR-able? I am not sure about names and style. <a href=\"https://gist.github.com/linesthatinterlace/f1faa2a1c8379b1273397175fe40e056\">https://gist.github.com/linesthatinterlace/f1faa2a1c8379b1273397175fe40e056</a></p>\n</blockquote>\n<p>I think this could be PR-able; though right now the whitespace style is pretty jarring compared to some mathlib code; I recommend looking at how the whitespace is handled for other Equivs in mathlib</p>",
        "id": 385654429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692271819
    },
    {
        "content": "<p>I also wonder whether <code>∀ x, r (f x) x</code> has a name somewhere already</p>",
        "id": 385654588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692271883
    },
    {
        "content": "<p>It's a shame we don't have some tool to auto-fix the whitespace.</p>",
        "id": 385656977,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692272818
    },
    {
        "content": "<p>It might. It also occurs that you could as well write r x (f x) and perhaps you'd want that version too.</p>",
        "id": 385657113,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692272873
    },
    {
        "content": "<p>Though fundamentally I believe it's just a case of using Function.swap.</p>",
        "id": 385660389,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692274079
    },
    {
        "content": "<p>On a core level this is the new thing I think. The equiv stuff is just the natural extension of this idea to the end state.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">β₁</span> <span class=\"bp\">→</span>  <span class=\"n\">α₂</span> <span class=\"bp\">⊕</span> <span class=\"n\">β₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">β₂</span> <span class=\"bp\">→</span> <span class=\"n\">β₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">Sum.LiftRel</span> <span class=\"n\">ra</span> <span class=\"n\">rb</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"n\">α₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">getLeft.get</span> <span class=\"o\">(</span>\n  <span class=\"kd\">by</span>  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span> <span class=\"n\">Sum.getLeft_inl</span><span class=\"o\">,</span> <span class=\"n\">Option.isSome_some</span> <span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">specialize</span> <span class=\"n\">he</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Sum.not_liftRel_inr_inl</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">he</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 385662629,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692274966
    },
    {
        "content": "<p>That's <code>fun a =&gt;  match f (Sum.inl a₁), he (Sum.inl a₁) with | Sum.inl a₂, h =&gt; a₂</code></p>",
        "id": 385663618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692275335
    },
    {
        "content": "<p>Indeed, though as you say, hard to prove stuff about in that form...</p>",
        "id": 385667054,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692276640
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equivBarFoo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isLeft</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getLeft.get</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">c</span> <span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Sum.isLeft_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span>\n                                                         <span class=\"n\">rcases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Sum.inl</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Sum.isLeft_inl</span><span class=\"o\">,</span> <span class=\"n\">implies_true</span><span class=\"o\">]⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n                <span class=\"n\">ext</span> <span class=\"n\">c</span> <span class=\"bp\">;</span> <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">c</span> <span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Sum.isLeft_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span> <span class=\"bp\">;</span> <span class=\"n\">rcases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n                <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">Sum.getLeft_inl</span><span class=\"o\">,</span> <span class=\"n\">Option.get_some</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 385667072,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692276646
    },
    {
        "content": "<p>Here's the equiv-analogue for it.</p>",
        "id": 385667162,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692276685
    },
    {
        "content": "<p>Because we have <code>Equiv.sumArrowEquivProdArrow</code>, I think this is probably the more fundamental content of the above.</p>",
        "id": 385667417,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692276765
    },
    {
        "content": "<p>I can't quite see how to relationify this - if you can, that would be nice.</p>",
        "id": 385667505,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692276810
    },
    {
        "content": "<p>The analogy for products would be the equivalence between maps which do not depend on one component (f(a,b) = f(a,b') for all a b b') and maps from A (with a:A).</p>\n<p>I think this is the duality between non-dependence and invariance?</p>",
        "id": 385670142,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692277699
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equivProdLeftMap</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>  <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">)}</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">default</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>As in, this.</p>",
        "id": 385699168,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692286001
    },
    {
        "content": "<p>What this means is that I'm a little unsure what results to include.</p>",
        "id": 385699247,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692286022
    },
    {
        "content": "<p>Amusingly there is another such equivalence with a useless precondition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equivProdLeftMap'</span> <span class=\"o\">[</span><span class=\"n\">IsEmpty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>  <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">)}</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IsEmpty.false</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IsEmpty.false</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IsEmpty.false</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">IsEmpty.false</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">a</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">IsEmpty.false</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</code></pre></div>\n<p>(Observed by thinking about multiplying by zero.)</p>",
        "id": 385700703,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692286384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I did another iteration. In particular I think there is a case for having a Sum.getLeft and Sum.getRight which work more like Option.get, and rename the current functions as Sum.getLeft? and Sum.getRight?, analogous to List.get?</p>\n<p>These can be defined using that match construction, and then with suitable simp lemmas, it makes the later proofs much easier - you fiddle with cases a lot less by defining things that way.</p>",
        "id": 385730001,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692296957
    },
    {
        "content": "<p>Adding question marks to the names seems like a good standalone PR</p>",
        "id": 385756048,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692307998
    },
    {
        "content": "<p>Yes, I agree.</p>",
        "id": 385762006,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692311008
    },
    {
        "content": "<p>What's the Mathlib4 PR process?</p>",
        "id": 385762021,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692311022
    },
    {
        "content": "<p>Basically the same as the mathlib 3 one was at this point</p>",
        "id": 385762107,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692311062
    },
    {
        "content": "<p>Grand.</p>",
        "id": 385762507,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692311350
    },
    {
        "content": "<p>Now, I must admit I can't remember how that worked. But I think it was written down somewhere...</p>",
        "id": 385762524,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692311367
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> is still approximately correct, except you change mathlib to mathlib4 in all the URLs. And you should request permission to push to the main repo rather than forking.</p>",
        "id": 385763489,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692311950
    },
    {
        "content": "<p>And you can ignore all mention of <code>leanproject</code></p>",
        "id": 385763548,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692311993
    },
    {
        "content": "<p>Since I'm here, what's your GitHub username?</p>",
        "id": 385763572,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692312003
    },
    {
        "content": "<p>linesthatinterlace</p>",
        "id": 385764045,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692312311
    },
    {
        "content": "<p>Well you alreadt have access since you contributed to the port!</p>",
        "id": 385764188,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692312404
    },
    {
        "content": "<p>Here is the usual workflow. It won't cover all the details that were cover on the \"contribute\" page, but it should at least get you started.</p>\n<ul>\n<li>if you haven't already, clone the mathlib repo <em>using ssh</em></li>\n<li>on <code>master</code>, run <code>git pull &amp;&amp; lake exe cache get</code> to get the current version and cache</li>\n<li>then do <code>git checkout -b name_of_the_branch</code> to create a new branch from there</li>\n<li>do your things in VSCode, commit and push (using the VSCode interface or the command line)</li>\n<li>then go to <a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a> and it should invite you to create a PR</li>\n</ul>",
        "id": 385765087,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692312937
    },
    {
        "content": "<p>Thanks</p>",
        "id": 385881004,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692354541
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6663\">https://github.com/leanprover-community/mathlib4/pull/6663</a></p>",
        "id": 385926771,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692368229
    },
    {
        "content": "<p>Tip: you can link it as <a href=\"https://github.com/leanprover-community/mathlib4/pull/6663\">#6663</a></p>",
        "id": 385927192,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1692368335
    },
    {
        "content": "<p>Ah thanks.</p>",
        "id": 385940249,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1692371843
    }
]