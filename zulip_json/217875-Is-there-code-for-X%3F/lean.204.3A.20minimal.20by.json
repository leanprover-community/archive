[
    {
        "content": "<p>Is there something which could be called <code>minimalBy</code> or <code>minBy</code> for either arrays or lists in lean4, std4 or mathlib4? This would be a function such that <code>a.minimalBy f</code> would return an array or list of the elements in <code>a</code> which attained a minimal value under <code>f</code>.</p>\n<p>If it doesn't exist, I'll be making one for use in a mathlib4 tactic (unless plans change). What should it be named and where in mathlib4 should it go?</p>",
        "id": 341004666,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678502633
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.argmin\">docs#list.argmin</a>, which returns one of them.</p>",
        "id": 341030014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678521407
    },
    {
        "content": "<p>hmm, I need all of them, or at least to know if there are multiple</p>",
        "id": 341087517,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678529769
    },
    {
        "content": "<p>I did wind up writing a few related functions to this end for arrays, so I can just put them anywhere in Mathlib. Would it be alright to create a file <code>Mathlib.Array.Order</code>? Seems like arrays are new, so it doesn’t hit any ported files.</p>",
        "id": 341090867,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678530923
    },
    {
        "content": "<p>(Hmm, maybe I should move this question to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> . I’ll revisit it tomorrow.)</p>",
        "id": 341091680,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678531162
    },
    {
        "content": "<p>Whatever you end up writing, it would be nice to connect it to <code>list.argmin</code> somehow. In particular, I would do an implementation in terms of <code>list</code> (and why not one in terms of <code>array</code>).</p>",
        "id": 341095921,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678532588
    },
    {
        "content": "<p>my heart says it ought to be named <code>minimalBy</code> (etc.), but my head says it ought to be named <code>argmins</code> for consistency with the preexisting <code>argmin</code>… :)</p>",
        "id": 341307774,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678639430
    },
    {
        "content": "<p>My instinct is to stay away from ported files under the assumption that we shouldn’t change ported files unless we backport the changes. Is that a fair assumption? And if so what would be a good spot for the <code>List</code> versions? For <code>Array</code> I can simply make a new file, but I think <code>List</code> is all ported files.</p>",
        "id": 341308198,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1678639658
    },
    {
        "content": "<p>Oh I'm sure you can add it to <code>data.list.argmin</code> without bnackporting, so long as you don't change existing theorems</p>",
        "id": 341310263,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678640725
    }
]