[
    {
        "content": "<p>I could not find the following characterisations of primitive elements in finite extension of fields: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.PrimitiveElement</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">IntermediateField</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">natDegree</span> <span class=\"bp\">=</span> <span class=\"n\">finrank</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">adjoin.finrank</span> <span class=\"o\">(</span><span class=\"n\">isIntegral_of_finite</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finrank_top</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">IntermediateField.eq_of_le_of_finrank_eq</span> <span class=\"n\">le_top</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">adjoin.finrank</span> <span class=\"o\">(</span><span class=\"n\">isIntegral_of_finite</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finrank_top</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">IsSeparable</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsAlgClosed</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"bp\">⟯</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">ψ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aux1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Polynomial.card_rootSet_eq_natDegree</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IsSeparable.separable</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">IsAlgClosed.splits_codomain</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"bp\">←</span> <span class=\"n\">AlgHom.card</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.toFinset_card</span><span class=\"o\">]</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Algebra.IsAlgebraic.range_eval_eq_rootSet_minpoly</span> <span class=\"n\">A</span>\n    <span class=\"o\">(</span><span class=\"n\">Algebra.isAlgebraic_of_finite</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fintype.card</span><span class=\"o\">,</span> <span class=\"n\">Set.toFinset_range</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Finset.card_image_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">Finset.coe_univ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Set.injective_iff_injOn_univ</span><span class=\"o\">]</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 403178391,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1700489594
    },
    {
        "content": "<p>I think the forward direction of both exists for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PowerBasis#doc\">docs#PowerBasis</a>, up to heavy rephrasing, and <code>aux1</code> might exist in both directions. In any case, there would be sufficient work to connect this to existing machinery that I see the value in adding this to Mathlib.</p>",
        "id": 403338311,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1700559270
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IntermediateField.powerBasisAux#doc\">docs#IntermediateField.powerBasisAux</a> that looks close</p>",
        "id": 403368906,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700569099
    },
    {
        "content": "<p>I thought we had something with the explicit assumption that the degree of the minpoly is the dimension, but I don't find it. Anyway it seems a good addition.</p>",
        "id": 403369086,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1700569171
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8609\">#8609</a></p>",
        "id": 403959640,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1700829398
    }
]