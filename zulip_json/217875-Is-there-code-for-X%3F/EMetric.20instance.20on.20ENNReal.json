[
    {
        "content": "<p>Am I being silly or do we really not have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.ENNReal</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">EMetricSpace</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 372047693,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688397896
    },
    {
        "content": "<p>Activating silly defences:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ENNReal</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">EMetricSpace</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>Yeah it looks like you're not being silly. I really like this \"am I missing an import -- no because I imported everything\" fallback.</p>",
        "id": 372049960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688398243
    },
    {
        "content": "<p>We don't have it because it doesn't give you the right topology on <code>ℝ≥0∞</code>.</p>",
        "id": 372050580,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688398355
    },
    {
        "content": "<p>Oh!</p>",
        "id": 372050615,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688398365
    },
    {
        "content": "<p>With that instance, <code>∞</code> is infinitely far away from any other point, so it's an isolated point.</p>",
        "id": 372050861,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688398405
    },
    {
        "content": "<p>wait, what is the \"right topology\"? Somehow it's been decided that it's homeo to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> despite Yael having just convincingly argued that it's actually homeomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> disjoint union a point? :-)</p>",
        "id": 372051368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688398512
    },
    {
        "content": "<p>I wonder if this might be a useful <code>def</code> to be able to enable locally. I reached for this because I want to construct a small argument about measures of sets being similar. Since measures are <code>ℝ≥0∞</code>-valued this edistance would be very convenient.</p>",
        "id": 372051443,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688398531
    },
    {
        "content": "<p>I'll continue what I was doing and see how useful or not this distance would actually be in my application. If it looks very useful, I'll think about this some more. Thanks!</p>",
        "id": 372052382,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688398698
    },
    {
        "content": "<p>Kevin, it depends on whether you want diverging series of non-negative reals to converge to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">∞</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>.</p>",
        "id": 372054322,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688399056
    },
    {
        "content": "<p>Aah so they don't for the emetric! But they do for the topology.</p>",
        "id": 372057832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688399810
    },
    {
        "content": "<p>And I know from LTE that it's very convenient for diverging series to converge to infty because it meant that I could do a lot of e.g. sum rearrangement without ever having to prove that anything converged.</p>",
        "id": 372058087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688399865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> In what statement do you want a <code>EMetric</code> on <code>ENNReal</code>s?</p>",
        "id": 372060878,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688400316
    },
    {
        "content": "<p>It's WIP so I don't have something as precise as I'd like but the general idea was that I had a small analysis-style argument I wanted to make about measures of sets being similar so it would contain expressions like <code>edist (μ x) (μ y) ≤ ε</code> if we actually had such an <code>edist</code>.</p>",
        "id": 372061646,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688400464
    },
    {
        "content": "<p>Of course all my sets actually have finite measure so it's really just a question of how early I take advantage of this and pass to the reals. But it looked like it might be convenient to be able to defer this. As I say, it's WIP so I'm not sure yet and haven't decided.</p>",
        "id": 372062084,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688400550
    },
    {
        "content": "<p>If the little project works out I'll post the PR here.</p>",
        "id": 372062408,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688400620
    },
    {
        "content": "<p>(It's mostly work I'm doing to avoid finishing preparation for Leiden. Don't tell Rob.)</p>",
        "id": 372062601,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688400665
    },
    {
        "content": "<p>You can introduce a global <code>EDist</code> instance for <code>ENNReal</code> (e.g., given by <code>edist x y = max (y - x) (x - y)</code>). Or even generalize <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.dist#doc\">docs#Nat.dist</a> to any canonically ordered additive comm monoid.</p>",
        "id": 372114368,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688412798
    }
]