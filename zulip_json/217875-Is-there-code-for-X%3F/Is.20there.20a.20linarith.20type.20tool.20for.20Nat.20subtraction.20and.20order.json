[
    {
        "content": "<p>Hi again.  I'm finding it really fiddly to work with the natural number subtraction operation; in principle there are enough tools in Std.Data.Nat.Lemmas to manipulate things, but it's hard to dig out exactly the right tool for the purpose and it would be great if there was a linarith type tool that did everything.  Here is a typical example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_sub_self</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">Nat.sub_sub_self</span> <span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>I understand why ring doesn't work here (Natural numbers aren't a ring), and I guess linarith can't handle the branching inherent in the Nat subtraction operation, but perhaps some more advanced tool is available?</p>\n<p>The other alternative is to try to cast things to a larger group, such as the integers, where either linarith or ring would become useful.    Is there a tool to give something like <code>((n-m):\\Z) = if m \\leq n then (n:\\Z)-(m:\\Z) else (0:\\Z)</code>?  By the way I struggle to get the casting operators to work exactly the way I want them to here: lean seems to consistently interpret <code>((n-m):\\Z)</code> as <code>(n:\\Z)-(m:\\Z)</code> rather than the desired <code>((n:\\N)-(m:\\N)):\\Z)</code> unless I introduce a new variable such as let <code>k:\\N := n-m</code>.  It's to the point where I really struggle to write any expression with manual casts (which by the way also was one reason why I wanted to have tools to extract out complicated expressions directly, because typing out manually often gets the casting wrong even if I cut-and-paste directly from the tactic goal infoview).</p>",
        "id": 396996751,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697501329
    },
    {
        "content": "<p>There is such a tool, called <code>omega</code>, which will decide all such problems. There was a partial implementation in Lean 3, currently none in Lean 4, but we are hoping to have it done by the end of the year.</p>",
        "id": 396996950,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697501456
    },
    {
        "content": "<p>The way to force lean to interpret the subtraction as a Nat.sub is <code>(n - m : \\N)</code></p>",
        "id": 396996971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697501471
    },
    {
        "content": "<p>elaboration proceeds from the outside in, and coercions are done only at the last possible moment, meaning they end up on the leaves of the expression by default</p>",
        "id": 396997094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697501531
    },
    {
        "content": "<p>People will definitely tell you to just avoid Nat.sub entirely though</p>",
        "id": 396997181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697501586
    },
    {
        "content": "<p>Yeah Scott already warned me :).  But I need to do things like perform a reflection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>↦</mo><mi>n</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\"> k \\mapsto n-k </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7054em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> on a set of natural number exponents <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,\\dots,n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span> for a polynomial, so it's really inconvenient to leave the natural numbers for say the integers just to gain access to a better subtraction operation because that breaks the fact that monomial exponents of a polynomial are naturally in \\N rather than \\Z.</p>",
        "id": 396997614,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697501824
    },
    {
        "content": "<p>We also have the <code>zify</code> tactic which might be useful?</p>",
        "id": 396998949,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697502581
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Zify.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Zify.html</a></p>",
        "id": 396998967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697502594
    },
    {
        "content": "<p>However this doesn’t do anything nearly as powerful as linarith.</p>",
        "id": 396999326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697502787
    },
    {
        "content": "<p>I think you might be able to do it by linarith (a bit wastefully) if you tell lean that <code>c - a + a = c</code> and similarly for all other subtractions in the problem</p>",
        "id": 396999682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697502970
    },
    {
        "content": "<p>It helps a little bit but not much.</p>\n<p>In any case I was at least able to get the lemma relating natural number subtraction with integer subtraction, which may suffice for at least some of my applications.  The proof is surprisingly fiddly though (but perhaps there is a slicker way).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">.</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n    <span class=\"n\">symm</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_iff_eq_add</span><span class=\"o\">]</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n    <span class=\"bp\">.</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_cancel</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">.</span> <span class=\"n\">zify</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_eq_zero_iff_le</span><span class=\"o\">]</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 396999686,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697502971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20linarith.20type.20tool.20for.20Nat.20subtraction.20and.20order/near/396999682\">said</a>:</p>\n<blockquote>\n<p>I think you might be able to do it by linarith (a bit wastefully) if you tell lean that <code>c - a + a = c</code> and similarly for all other subtractions in the problem</p>\n</blockquote>\n<p>OK, that works, and is another workaround, thanks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_add_cancel</span> <span class=\"n\">hb</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 396999941,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697503120
    },
    {
        "content": "<p>which you could golf to <code>linarith [Nat.sub_add_cancel ha, Nat.sub_add_cancel hb]</code></p>",
        "id": 397000047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697503197
    },
    {
        "content": "<p>That's probably the simplest solution in most cases, since pretty much the only use case for natural number subtraction is in the regime where Nat.sub_add_cancel applies, the other values of subtraction being an artificial placeholder.</p>",
        "id": 397000510,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697503423
    },
    {
        "content": "<p>your theorem should also be a trivial variation on one which is in the library (and if not that should be fixed)</p>",
        "id": 397001816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697504069
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 397001838,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697504089
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">split</span>\n  <span class=\"bp\">.</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Int.ofNat_sub</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_not_le</span> <span class=\"n\">h</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 397002087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697504195
    },
    {
        "content": "<p>and these are simp lemmas so golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.le_of_not_le</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 397002202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697504262
    },
    {
        "content": "<p>Note: we also have some lemmas specialized to reflection, like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_range_reflect#doc\">docs#Finset.sum_range_reflect</a> in case this is the kind of thing you need.</p>",
        "id": 397002690,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697504502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20linarith.20type.20tool.20for.20Nat.20subtraction.20and.20order/near/396997614\">said</a>:</p>\n<blockquote>\n<p>I need to do things like perform a reflection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>↦</mo><mi>n</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\"> k \\mapsto n-k </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7054em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> on a set of natural number exponents <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,\\dots,n\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span> for a polynomial, so it's really inconvenient to leave the natural numbers for say the integers just to gain access to a better subtraction operation because that breaks the fact that monomial exponents of a polynomial are naturally in \\N rather than \\Z.</p>\n</blockquote>\n<p>Another approach here could be to work with (e.g. sum over) the antidiagonal <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Nat.antidiagonal#doc\">docs#Finset.Nat.antidiagonal</a>, which effectively gives access to both <code>k</code> and <code>n - k</code> as an ordered pair as well as the standard lemmas about them.</p>",
        "id": 397002696,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697504505
    },
    {
        "content": "<p>Yeah, Scott suggested that to me last week.  I started experimenting with that but ran into some syntactical issues trying to understand summing over sets of pairs and so figured it would be easier to work in the more conventional setting of indexing by natural numbers and using subtraction as necessary, figuring that it would be easier to prove lemmas about subtraction than to prove lemmas about the antidiagonal.  I can see that the latter is a more conceptually elegant way to proceed, though it does require translating large parts of my intended proof from its conventional setting to this new framework that would be less familiar to most readers.  So we encounter this tradeoff again...</p>",
        "id": 397003148,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697504750
    },
    {
        "content": "<p>Basically the ideal situation should be that there is a workable subset of Lean that is mutually intelligible with a workable subset of Mathematical English, with only moderate amounts of effort required on both sides to work in that subset.  So, on the Lean side for instance, there should be tools that let one talk about objects the \"wrong\" way, e.g., unnecessarily indexing things by natural numbers, in order to enter the mutually intelligible subset, with only a minor cost in time and elegance.  On the Math side, one may have to replace some of the more handwavy approaches to proofs with a more formal and pedantic version, but again this should ideally only require a modest cost in length of explanation (in particular, the Mathematical English proof should still spend most of the time on the underlying mathematical ideas and only a minimum on formal technicalities).</p>",
        "id": 397003744,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697505089
    },
    {
        "content": "<p>(This is a bit off-topic, by the way, but this (20 min) video is an excellent demonstration of the concept of \"mutual intelligibility of workable subset\": <a href=\"https://www.youtube.com/watch?v=ryVG5LHRMJ4&amp;ab_channel=KingMingLam\">https://www.youtube.com/watch?v=ryVG5LHRMJ4&amp;ab_channel=KingMingLam</a> )</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ryVG5LHRMJ4\" href=\"https://www.youtube.com/watch?v=ryVG5LHRMJ4&amp;ab_channel=KingMingLam\"><img src=\"https://uploads.zulipusercontent.net/283f1a4b0eb099c4f344b2382dada8b9c9ad81c3/68747470733a2f2f692e7974696d672e636f6d2f76692f72795647354c48524d4a342f64656661756c742e6a7067\"></a></div>",
        "id": 397004614,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697505646
    },
    {
        "content": "<p>To go from idiomatic prose to idiomatic Lean you often need to abstract, i.e. strategically forget some information about the objects you have around.</p>\n<ul>\n<li>This was the case with the indexing of natural numbers yesterday (abstract by replacing <code>Fin n</code> with an arbitrary fintype and a hypothesis about its size being <code>n</code>)</li>\n<li>this is arguably the case with Nat-subtraction (abstract by replacing <code>n - m</code> with \"a natural <code>c</code> satisfying <code>(m ≤ n ∧ n = m + c) ∨ (n &lt; m ∧ c = 0) </code>\")</li>\n<li>this was perhaps the case with <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linear.20projection.20for.20subsets.20of.20indices.2E\">a question</a> yesterday (one should replace \"a set in the type <code>α</code>\" with \"a map into <code>α</code>\")</li>\n<li>when people write traditional elementary real analysis and need it to be re-wired into filter language, often morally the change to the arguments consists of replacing <code>max a b</code> with \"a real number <code>c</code> satisfying <code>a ≤ c</code> and <code>b ≤ c</code>\"</li>\n</ul>",
        "id": 397012339,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697510267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20linarith.20type.20tool.20for.20Nat.20subtraction.20and.20order/near/397003744\">said</a>:</p>\n<blockquote>\n<p>So, on the Lean side for instance, there should be tools that let one talk about objects the \"wrong\" way, e.g., unnecessarily indexing things by natural numbers, in order to enter the mutually intelligible subset, with only a minor cost in time and elegance.</p>\n</blockquote>\n<p>Speculatively: there could be automation which knows all these \"standard abstraction rules\" ...</p>",
        "id": 397012670,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1697510472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20linarith.20type.20tool.20for.20Nat.20subtraction.20and.20order/near/396999682\">said</a>:</p>\n<blockquote>\n<p>I think you might be able to do it by linarith (a bit wastefully) if you tell lean that <code>c - a + a = c</code> and similarly for all other subtractions in the problem</p>\n</blockquote>\n<p>This is a rather belated response, but perhaps one should simply improve linarith in the context of natural number arithmetic by having it automatically search for hypotheses of the form <code>a \\leq c</code> and converting them to <code>c - a + a = c</code> before running the rest of the linarith algorithm?  Similar to how <code>field_simp</code> searches for non-vanishing hypotheses before performing its simplifications.</p>",
        "id": 397436365,
        "sender_full_name": "Terence Tao",
        "timestamp": 1697695905
    },
    {
        "content": "<p>I think this preprocessor actually existed in lean 3, it may not have been ported yet</p>",
        "id": 397436483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697695944
    },
    {
        "content": "<p>...maybe not, but it's definitely a good idea in any case. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Do you recall if we ever added something like this to linarith?</p>",
        "id": 397437166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697696267
    },
    {
        "content": "<p>(BTW I would slightly amend the algorithm to look for <code>Nat.sub</code> applications in the hypotheses and introduce the corresponding <code>c - a + a = c</code> lemma when it can find a proof of <code>a &lt;= c</code>, rather than converting every nat inequality into a nat.sub equation. The reason is because it is very common for linarith to see a nat inequality, and much less common for linarith to see a <code>Nat.sub</code> application, and the new assumption is only helpful if that particular <code>Nat.sub</code> application already appears in the goal or hypotheses.)</p>",
        "id": 397437706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697696490
    },
    {
        "content": "<p>Potentially relevant: <a href=\"https://github.com/leanprover-community/mathlib4/issues/7450\">This idea I proposed a few weeks ago</a> to improve/supercharge <code>zify</code> with <code>linarith</code> to automatically do the casework on natural subtraction. I'm pretty sure this would accomplish the things this augmented <code>linarith</code> would accomplish while also being useful in cases where <code>linarith</code> on it's own wouldn't solve the goal.</p>",
        "id": 397455515,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697703953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Is.20there.20a.20linarith.20type.20tool.20for.20Nat.20subtraction.20and.20order/near/397437166\">said</a>:</p>\n<blockquote>\n<p>...maybe not, but it's definitely a good idea in any case. <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> Do you recall if we ever added something like this to linarith?</p>\n</blockquote>\n<p>I don't think this particular optimization was there. It's not totally clear to me how it interacts with the <code>zify</code> preprocessing, which will also use inequalities in the context to try to push nat-&gt;int casts through subtraction.</p>",
        "id": 397512961,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1697724214
    },
    {
        "content": "<p>As Bolton says, <code>zify</code> could work harder here too. But I do think there's benefit to <code>zify</code> staying simple and predictable, and calling <code>linarith</code> itself as a discharger may not be that...</p>",
        "id": 397513445,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1697724344
    },
    {
        "content": "<p>Making <code>linarith</code> better on <code>Nat</code> is a losing battle from the start. It feels wrong to complicate other things to eke out a few more examples, when the proper solution is an entirely different tactic <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 397514000,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1697724489
    },
    {
        "content": "<p>In Lean3 I had a <code>remove_subs</code> tactic that would find <code>Nat.sub</code>s, do cases on them depending on whether the \"obvious\" inequality was satisfied and tried to solve the branch where the difference was zero by some simple discharge.</p>\n<p>Ideally, after running that, you were left with only the \"non-junk\" subtractions and all the hypotheses in place.</p>\n<p>If you think that this might be a good \"preprocessing\", before <code>zify/linarith</code> can try to take over, I can be easily convinced to port the tactic!</p>",
        "id": 397530876,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697729629
    },
    {
        "content": "<p><code>zify!</code></p>",
        "id": 397532447,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697730176
    },
    {
        "content": "<p>After playing with a few more natural number subtraction problems, I think one reasonably simple solution would be to introduce a <code>zify!</code> tactic which behaves like <code>zify</code> except that any hypothesis <code>a \\leq b</code> that is needed to push-cast <code>b-a</code> is automatically added to the list of goals if it is not already provided (or if it is not listed in the hypotheses).  Any outstanding such goals would typically then be solved by <code>linarith</code> (though if there were nested subtractions then another round of <code>zify!</code> may be needed).  Most of the use cases I can think of (in which the <code>a \\leq b</code> type hypotheses are always satisfied) could then be handled by some finite number of applications of <code>zify!</code> and <code>linarith</code>, without needing to have <code>zify!</code> actually call <code>linarith</code> in any way.  (One could then also design a <code>zify!!</code> tactic that calls <code>linarith</code> to attempt to verify any missing order hypotheses once they have been completely push-casted to the integers by a recursive appeal to <code>zify!!</code>.)</p>\n<p>Here is an example of how such a strategy would work.  The proposed tactic <code>zify!</code> would simply apply <code>zify</code> and <code>rw [Int.coe_nat_sub]</code> repeatedly until neither of them have any further effect.  Similarly, <code>zify!!</code> would apply <code>zify!</code> and <code>linarith</code> repeatedly until neither had any further effect.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.coe_nat_sub</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_nat_sub</span><span class=\"o\">,</span> <span class=\"n\">Int.coe_nat_sub</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"n\">zify</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">.</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">.</span> <span class=\"n\">zify</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.coe_nat_sub</span><span class=\"o\">]</span>\n    <span class=\"bp\">.</span> <span class=\"n\">linarith</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 398214990,
        "sender_full_name": "Terence Tao",
        "timestamp": 1698128830
    },
    {
        "content": "<p>Depending on your timeline, I wouldn't put too too much effort into tactics like this. The new <code>omega</code> will take care of things like this out of the box. I'm hoping it will be ready by the end of the year, and an incomplete version (i.e. still gives proofs, but doesn't solve all problems in its spec) hopefully sooner.</p>",
        "id": 398222389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698131797
    }
]