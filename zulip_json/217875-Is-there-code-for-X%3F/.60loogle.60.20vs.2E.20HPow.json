[
    {
        "content": "<p>This works:<br>\n<span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  |- (∑' (n : _), _ ^ n) = _<br>\nso somehow the <code>: Nat</code> throws it off.</p>",
        "id": 400150151,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699023542
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecificLimits/Basic.html#tsum_geometric_inv_two\">tsum_geometric_inv_two</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecificLimits/Basic.html#ENNReal.tsum_geometric\">ENNReal.tsum_geometric</a>, and <a href=\"https://loogle.lean-lang.org/?q=%7C-%20%28%E2%88%91%27%20%28n%20%3A%20_%29%2C%20_%20%5E%20n%29%20%3D%20_\">5 more</a></p>",
        "id": 400150158,
        "sender_full_name": "loogle",
        "timestamp": 1699023543
    },
    {
        "content": "<p>It says</p>\n<blockquote>\n<p>Found 0 definitions mentioning instPowNat, instTopologicalSpaceNat, Nat.addCommMonoid, HPow.hPow, tsum, Nat, instHPow and Eq. Of these, 0 match your pattern(s). </p>\n</blockquote>\n<p>So probably it is instantiating some type class constraints in unhelpful ways. This part of the elaborator is still a mystery to me, so any help is welcome :-)</p>\n<p>I noted it down as an issue at <a href=\"https://github.com/nomeata/loogle/issues/2\">https://github.com/nomeata/loogle/issues/2</a></p>",
        "id": 400150291,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699023598
    },
    {
        "content": "<p>It’s strange that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|-</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span>  <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">HPow.hPow</span> <span class=\"n\">Real</span> <span class=\"n\">Nat</span> <span class=\"n\">Real</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>works but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|-</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span>  <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Real</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Real</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>doesn’t.</p>\n<p>Hmmm, the latter for some reason casts the <code>n : Nat</code> to <code>Real</code> (<code>Real.natCast and Real.instPowReal.</code>) and then uses homogeneous <code>pow</code>. Somehow the type annotation doesn’t do what I’d expect it to do.</p>\n<p>Maybe related to <a href=\"https://github.com/leanprover/lean4/issues/2220\">https://github.com/leanprover/lean4/issues/2220</a></p>",
        "id": 400155176,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699025095
    }
]