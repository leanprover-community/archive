[
    {
        "content": "<p>What would be a good place for the following two lemmas for <code>getElem!</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">getElem_cons_zero</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">getElem</span><span class=\"bp\">!</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">getElem_cons</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tl</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)[</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>?<br>\nIt seems like <code>getElem!</code> is defined in lean4 and I can't find where basic theorems for that definition are.</p>",
        "id": 382970075,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691503549
    },
    {
        "content": "<p>Probably in <code>Std.Data.List.Lemmas</code> (suitably generalized). I also can't find lemmas for it, perhaps as it isn't used as much for proving as its friends <code>getElem</code> and <code>getElem?</code></p>",
        "id": 382973387,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691504105
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/214\">https://github.com/leanprover/std4/pull/214</a> for the first one<br>\nright next to <code>get_cons_zero</code></p>",
        "id": 382977921,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1691504956
    },
    {
        "content": "<p>Definitely it seems we should have <code>getElem!_eq_get!</code> along with <code>get!_eq_getD</code> <code>get!_eq_get?</code> for listst also</p>",
        "id": 382986409,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1691506480
    }
]