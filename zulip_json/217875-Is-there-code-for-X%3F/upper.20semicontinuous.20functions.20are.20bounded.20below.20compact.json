[
    {
        "content": "<p>I couldn't find in mathlib that lower semicontinuous functions are bounded below on compact sets.</p>\n<p>On the other hand, I expect that it is a consequence of the result for continuous function if \\R is endowed with one of the two order topologies, provided that one proves that continuous functions for this topology coincides with the lower semicontinuous functions. </p>\n<p>However, since the topologies are given by instances, I am not sure how to change the topology of the goal for a function f : X \\to R. (One could compose with the maps (R, classical) -&gt; (R, order topology)…)</p>",
        "id": 356129410,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1683308731
    },
    {
        "content": "<p>You could make a new type <code>def real_with_order_topology := \\R</code> and typeclass inference will not unfold this definition, so you are free to put a new topology on <code>real_with_order_topology</code>. The computer scientists call this a \"type synonym\" I think.</p>",
        "id": 356130979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683309150
    },
    {
        "content": "<p>Yes, but my function already takes its values into \\R…</p>",
        "id": 356131133,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1683309206
    },
    {
        "content": "<p>This is what we've been doing with other topologies</p>",
        "id": 356131167,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683309221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/upper.20semicontinuous.20functions.20are.20bounded.20below.20compact/near/356131133\">said</a>:</p>\n<blockquote>\n<p>Yes, but my function already takes its values into \\R…</p>\n</blockquote>\n<p>Right -- I thought you were asking how to compose with (R,classical) -&gt; (R,order topology) and my answer is \"instead compose with <code>id : R -&gt; real_with_order_topology</code>\" (which you will be able to prove is continuous)</p>",
        "id": 356131365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683309289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/upper.20semicontinuous.20functions.20are.20bounded.20below.20compact/near/356131167\">said</a>:</p>\n<blockquote>\n<p>This is what we've been doing with other topologies</p>\n</blockquote>\n<p>Can you refer to some places where you do that?</p>",
        "id": 356131885,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1683309426
    },
    {
        "content": "<p>Also : where is it proved that continuous functions, that they attain they lower bound on nonempty compact sets?</p>",
        "id": 356132060,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1683309478
    },
    {
        "content": "<p>Look around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.exists_forall_le\">docs#is_compact.exists_forall_le</a></p>",
        "id": 356132762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683309664
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 356134938,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1683310288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/upper.20semicontinuous.20functions.20are.20bounded.20below.20compact/near/356131885\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/upper.20semicontinuous.20functions.20are.20bounded.20below.20compact/near/356131167\">said</a>:</p>\n<blockquote>\n<p>This is what we've been doing with other topologies</p>\n</blockquote>\n<p>Can you refer to some places where you do that?</p>\n</blockquote>\n<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/weak_dual\">docs#weak_dual</a> is such a case? Edit: this one should probably be reducible, the actual type synonym is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/weak_bilin\">docs#weak_bilin</a></p>",
        "id": 356135979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683310582
    },
    {
        "content": "<blockquote>\n<p>On the other hand, I expect that it is a consequence of the result for continuous function if \\R is endowed with one of the two order topologies, provided that one proves that continuous functions for this topology coincides with the lower semicontinuous functions.</p>\n</blockquote>\n<p>Note that this won't work directly because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.exists_forall_le\">docs#is_compact.exists_forall_le</a> assumes <code>[order_topology α]</code>, which isn't true for the upper/lower topology (in mathlib <code>order_topology</code> means the bilateral one)</p>",
        "id": 356136065,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683310616
    },
    {
        "content": "<p>Now I've nerdsniped myself and will spend the rest of the evening searching for the right abstraction for the different order topologies...</p>",
        "id": 356137410,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683311018
    },
    {
        "content": "<p>Actually in your situation you can get away with that, since you don't need the lower bound to belong in the image, so you should be able to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bdd_below\">docs#is_compact.bdd_below</a> (at least in theory, I don't think we have type aliases for lower and upper topologies, do we ? <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>)</p>",
        "id": 356145167,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683313391
    },
    {
        "content": "<p>Oh but I'm not sure that works either, since you don't even have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_closed_topology\">docs#order_closed_topology</a></p>",
        "id": 356146422,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683313783
    },
    {
        "content": "<p>So really the good answer is that the right generality for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bdd_below\">docs#is_compact.bdd_below</a> is \"any linear order where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_Ioi\">docs#is_open_Ioi</a> holds\"</p>",
        "id": 356146971,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683313977
    },
    {
        "content": "<p>Sorry, I must be missing something: why don't we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_closed_topology\">docs#order_closed_topology</a> in this context?</p>",
        "id": 356147876,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1683314320
    },
    {
        "content": "<p>What Antoine wanted to say (if I understand well) is that lower semicontinuous functions are exactly continuous functions when you replace the topology on the codomain with the upper (I'm risking it...) order topology, i.e the one generated by upwards-closed open intervals, and then apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bdd_below\">docs#is_compact.bdd_below</a> to the image of the compact <code>K</code> under <code>f</code> (which is compact for this new topology). The problem is that this \"upper order topology\" does <em>not</em> satisfy <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_closed_topology\">docs#order_closed_topology</a> (I think).</p>",
        "id": 356148740,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683314615
    },
    {
        "content": "<p>ah, oops, sorry for the noise, in my head I was interpreting <em>lower order topology</em> as <em>lower limit topology</em>, which is wrong; the former is coarser than the usual topology, while the latter is finer.</p>",
        "id": 356150555,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1683315207
    },
    {
        "content": "<p>Oh I understand the confusion, sorry for that !</p>",
        "id": 356151645,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683315623
    },
    {
        "content": "<p>Here is at least a working version directly adapted from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bdd_below\">docs#is_compact.bdd_below</a>, but that's not very satisfying in terms of code duplication.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.semicontinuous</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">lower_semicontinuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bdd_below</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hK.elim_finite_subcover_image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">lower_semicontinuous.is_open_preimage</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">_</span>\n    <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">st</span><span class=\"o\">,</span> <span class=\"n\">ft</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"o\">((</span><span class=\"n\">ft.image</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bdd_below.imp</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">C</span> <span class=\"n\">hC</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">mem_Union₂.1</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">fx_le_fx'</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"bp\">$</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hx'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">fx_le_fx'</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">x'</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">mem_Union₂.2</span> <span class=\"o\">(</span><span class=\"n\">not_imp_comm.1</span> <span class=\"n\">_</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">⟩,</span> <span class=\"n\">le_of_not_lt</span> <span class=\"o\">(</span><span class=\"n\">h.imp</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hxy.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">ys</span><span class=\"o\">⟩)⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 356151794,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683315697
    },
    {
        "content": "<p>Aha, we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_lower_topology\">docs#with_lower_topology</a>, but no \"upper topology\"</p>",
        "id": 356153920,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683316505
    },
    {
        "content": "<p>I'm a bit hesitant to make a PR for that right now, but the plan would be :</p>\n<ul>\n<li>add the dual version of the whole <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_topology\">docs#lower_topology</a> file</li>\n<li>make the links between these and semicontinuity</li>\n<li>add <code>has_open_Iio</code> and <code>has_open_Ioi</code> typeclasses (*) and prove <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bdd_below\">docs#is_compact.bdd_below</a> (and its consequences) using these</li>\n</ul>\n<p>(*): this is not very important, but it seems to me that in the context of non-linearly-ordered spaces, working with closed intervals is much better, so maybe we should have <code>has_closed_Iic</code> and <code>has_closed_Ici</code> typeclasses, and also redefine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_semicontinuous\">docs#lower_semicontinuous</a> in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span></span></span></span> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span></span></span></span>.</p>",
        "id": 356155515,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683317106
    },
    {
        "content": "<p>Another possibility would be to define the bdd_above functions for upper_semicontinuous functions, as well as the existence of maximum on compact subset, and to deduce it for continuous one. And replacing the order by the opposite order, having the similar results for lower_semicontinuous functions.</p>",
        "id": 356158200,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1683318143
    },
    {
        "content": "<p>Yes but that means some code duplication in any cases. The nice thing in the continuous case is that we don't have to redo the covering argument, since we can just apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bdd_below\">docs#is_compact.bdd_below</a>. But that can't work for semicontinuous functions of course, unless we change the topology, so we would have to redo the covering argument for the special case of the image of a compact set by a semicontinuous function (which is essentially what I did above). <br>\nI agree that's not a <em>ton</em> of code duplication, but the plan I described would avoid it so I would try and do that if we weren't in the middle of the port <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 356160585,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683319066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/upper.20semicontinuous.20functions.20are.20bounded.20below.20compact/near/356155515\">said</a>:</p>\n<blockquote>\n<ul>\n<li>add the dual version of the whole <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_topology\">docs#lower_topology</a> file</li>\n</ul>\n</blockquote>\n<p>I did insist in <span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span>'s original PR that we should keep the API fully dualised, but I wasn't heard <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 356162288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683319717
    },
    {
        "content": "<p>I agree with having typeclasses like <code>has_closed_Ici</code>/<code>has_closed_Iic</code>. I haven't gone forward with it yet because I want to have enough order topologies in mathlib to decide what mixins are worth having and refactor everything at once.</p>",
        "id": 356162502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683319804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/upper.20semicontinuous.20functions.20are.20bounded.20below.20compact/near/356153920\">said</a>:</p>\n<blockquote>\n<p>Aha, we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_lower_topology\">docs#with_lower_topology</a>, but no \"upper topology\"</p>\n</blockquote>\n<p>Yeah that's the type synonym I was thinking of.</p>",
        "id": 356163089,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683320021
    },
    {
        "content": "<p>I did insist in <span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span>'s original PR that we should keep the API fully dualised, but I wasn't heard <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17037#issuecomment-1288205983\">https://github.com/leanprover-community/mathlib/pull/17037#issuecomment-1288205983</a></p>",
        "id": 356164124,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1683320422
    },
    {
        "content": "<p>I spent some time thinking about this, and I think I have a pretty good idea on which typeclass to add so that we can just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.exists_forall_le\">docs#is_compact.exists_forall_le</a>.</p>\n<ul>\n<li>add <code>closed_Ici_class</code> and <code>closed_Iic_class</code> to have a \"one-sided\" generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_closed_topology\">docs#order_closed_topology</a> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bdd_below\">docs#is_compact.bdd_below</a> could be proven in this context for example)</li>\n<li>add <code>left_order_topology</code> and <code>right_order_topology</code> to have a \"one-sided\" generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_topology\">docs#order_topology</a>. This one is a bit more tricky, because we want to have a predicate that generalizes both for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_topology\">docs#order_topology</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_topology\">docs#lower_topology</a> (which are incompatible in most cases). I think that the right notion then is for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_within_Iic_basis\">docs#nhds_within_Iic_basis</a> to hold (with special condition for maximal elements), and that it should be enough to get <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.exists_forall_le\">docs#is_compact.exists_forall_le</a></li>\n</ul>",
        "id": 357403980,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683752485
    },
    {
        "content": "<p>Fun fact : we have both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_within_Ici_basis\">docs#nhds_within_Ici_basis</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_within_Ici_basis_Ico\">docs#nhds_within_Ici_basis_Ico</a></p>",
        "id": 357404201,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683752560
    },
    {
        "content": "<p>I'm more and more tempted to do this refactor right now since it shouldn't really touch a lot of files (we don't have to do all the generalizing at once, and everything assuming <code>order_topology</code> should keep working), but I'm sure I underestimate how much trouble this will be to port.</p>",
        "id": 357404723,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683752777
    },
    {
        "content": "<p>You have my backing for at least <code>closed_Ici_class</code>/<code>closed_Iic_class</code></p>",
        "id": 357404899,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683752874
    },
    {
        "content": "<p>I've thought a bit about the other problems, but apparently in a disjoint way to yours.</p>",
        "id": 357405824,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683753308
    },
    {
        "content": "<p>Since you seem to have a headstart on me here, let me set you a testcase: Can you replace <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_upper_lower_closure\">docs#has_upper_lower_closure</a> by a more sensible typeclass of yours?</p>",
        "id": 357405964,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683753388
    },
    {
        "content": "<p>Discussing about this with Antoine, I realized that the hypotheses of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.exists_is_least\">docs#is_compact.exists_is_least</a> are way too strong because of conditional completeness: the current version works by saying \"take the <code>Inf</code>, it is well behaved because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bdd_below\">docs#is_compact.bdd_below</a>, and it's in the set because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_glb\">docs#is_glb</a>\". But the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.bdd_below\">docs#is_compact.bdd_below</a> can be tweaked to give a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_least\">docs#is_least</a> element without any stronger assumptions, so we can use this one directly.<br>\nTo be more concrete, take a compact subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>. The current version of the lemma wouldn't apply because <code>rat</code> is not conditionally complete. But we can still construct a least element of our set, just using compactness.<br>\nI've just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/18991\">#18991</a> to fix that.</p>",
        "id": 357702602,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683840913
    },
    {
        "content": "<p>This has the added benefit of making half of my proposed refactor unnecessary to make Antoine's argument work, because <code>closed_Iic_class</code> will be enough to prove <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact.exists_is_least\">docs#is_compact.exists_is_least</a> and the upper topology satisfies that.</p>",
        "id": 357703045,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683841121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/upper.20semicontinuous.20functions.20are.20bounded.20below.20compact/near/357405964\">said</a>:</p>\n<blockquote>\n<p>Since you seem to have a headstart on me here, let me set you a testcase: Can you replace <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_upper_lower_closure\">docs#has_upper_lower_closure</a> by a more sensible typeclass of yours?</p>\n</blockquote>\n<p>Hmmmm it's not immediately obvious that this is related, but I'll have a closer look</p>",
        "id": 357703187,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1683841184
    },
    {
        "content": "<p>It's not obviously related, but the reason I suggest it is that <code>has_upper_lower_closure</code> holds in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> but there's no other typeclass that can currently cover the lemmas, because the product of <code>order_topology</code>s (even finite) isn't an <code>order_topology</code>.</p>",
        "id": 357704900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1683842081
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/6345\">#6345</a>, adding classes <code>LowerClosedTopology</code> and <code>UpperClosedTopology</code> expressing that <code>Iic</code>s/<code>Ici</code>s are closed, and generalizing boundedness of compacts to these classes. As <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> rightfully pointed out, these names are a bit terrible because they mean that the <code>UpperTopology</code> is a <code>LowerClosedTopology</code>... I can think of other names, but I'm not sure which one is best, so let's poll!</p>",
        "id": 383557413,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691660551
    },
    {
        "content": "<p>/poll How to name classes for \"<code>Iic</code>s are closed\"/\"<code>Ici</code>s are closed\"?<br>\n<code>LowerClosedTopology</code>/<code>UpperClosedTopology</code><br>\n<code>ClosedIicTopology</code>/<code>ClosedIciTopology</code><br>\n<code>ClosedIicClass</code>/<code>ClosedIciClass</code></p>",
        "id": 383557463,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691660560
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 383558100,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691660676
    },
    {
        "content": "<p>Now that I think about it, it would also be nice to get <span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span>'s opinion</p>",
        "id": 383594131,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691668277
    },
    {
        "content": "<p>(Yael is up a mountain I believe)</p>",
        "id": 383600707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691669672
    },
    {
        "content": "<p>Well not high enough to not answer the poll apparently <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 383600965,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691669721
    },
    {
        "content": "<p>You got lucky. Today is rest day. <span aria-label=\"campsite\" class=\"emoji emoji-1f3d5\" role=\"img\" title=\"campsite\">:campsite:</span>️</p>",
        "id": 383614300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1691672074
    },
    {
        "content": "<p>The lake district has annoyingly good mobile reception!</p>",
        "id": 383634630,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1691676030
    },
    {
        "content": "<p>You should go to Yellowstone, I can attest there is no connection at all. I can post because I just left the park to fly back to Pittsburgh.</p>",
        "id": 385942920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1692372719
    }
]