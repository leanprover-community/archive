[
    {
        "content": "<p>What happened to the lean3 tactic <code>congrm</code>? Thanks!</p>",
        "id": 379170503,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690466310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> It's under review -- I can ping you once it's in mathlib4</p>",
        "id": 379174582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690466936
    },
    {
        "content": "<p>That'd be great, thanks!</p>",
        "id": 379212094,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1690472588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> <code>congrm</code> was just merged (<a href=\"https://github.com/leanprover-community/mathlib4/pull/2544\">#2544</a>), and it's imported in <code>Mathlib.Tactic.Common</code> so you probably don't need to import anything to use it.</p>\n<p>It now uses <code>gcongr</code>-like syntax, where in the pattern you use <code>?_</code> holes to signify where the congruence holes are. You can use <code>_</code> holes where the value doesn't change from one side to the other.</p>",
        "id": 387531077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693143387
    },
    {
        "content": "<p>A new feature this PR introduces is \"congruence quotations.\"</p>\n<p>Do you not remember which is <code>congr_arg</code>, <code>congr_fun</code>, or <code>congr</code>? Now you don't need to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">hf</span> <span class=\"bp\">$</span><span class=\"n\">hx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcd</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hef</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">hab</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">hcd</span> <span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">hef</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It can also handle <code>Subsingleton</code> instance arguments automatically. Here's an example you can't do with <code>congr_arg</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr</span><span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 387531226,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693143529
    },
    {
        "content": "<p>Congruence quotations can work with iffs, eqs, and heqs.</p>",
        "id": 387531403,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693143696
    },
    {
        "content": "<p>Question: Why is it <code>congr(...)</code>, not <code>congr (...)</code>?</p>",
        "id": 387534767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693146400
    },
    {
        "content": "<p>Is it supposed to mimic QQ quotations?</p>",
        "id": 387534791,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1693146430
    },
    {
        "content": "<p>One reason is if it were <code>congr (...)</code> then <code>congr</code> would become a keyword and you wouldn't be able to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=congr#doc\">docs#congr</a></p>\n<p>Another is that not having a space is already set aside for new syntax. Writing <code>f(x)</code> for <code>f (x)</code> is a syntax error in Lean 4. And yes, it's supposed to be like other sorts of quotations, including QQ's.</p>",
        "id": 387535808,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693147252
    }
]