[
    {
        "content": "<p>I'm looking for a theory of functions that return a value of a given type. The input types should be stored with the function. Is there something like this? It gets hairy very quickly with <code>HEq</code>'s everywhere as soon as I want to prove things.</p>",
        "id": 361650007,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1685224430
    },
    {
        "content": "<p>What about an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 361659923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685230914
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">HFunOf</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">α</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">α₁</span><span class=\"o\">::</span><span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α₁</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">HFunOf</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">HFun</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">HFunOf</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>Obviously there's a few different choices here, like doing the recursion in the other direction or uncurrying the arguments. Morally <code>HFun</code> is an applicative, but I run into problems when trying to instantiate <code>LawfulApplicative</code> because I get lists of types that are equal to but not definitionally equal to each other.</p>\n<p>I'm starting to think that I'll just have to let those lemmas be unproven.</p>\n<p>I'm trying to embed an imperative DSL that uses Lean itself for the types and functions. Maybe I should have asked for related work on this instead.</p>",
        "id": 361747350,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1685277790
    },
    {
        "content": "<p>This looks like sort of a strange thing to do since you would never be able to actually call the function, unless you are separately managing some knowledge of what the arguments actually are via equalities of types</p>",
        "id": 361749379,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685278409
    },
    {
        "content": "<p>I'm storing the argument types as a list of strings with associated types. Evaluating the function would be done by providing a map from variables to values.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n  <span class=\"n\">func</span><span class=\"o\">:</span> <span class=\"n\">HFun</span> <span class=\"n\">α</span>\n  <span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">HProd</span> <span class=\"o\">(</span><span class=\"n\">func.α.map</span> <span class=\"n\">Var</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I haven't gotten to define function evaluation, but it seems to me like this strategy should work. I'm constantly rethinking my approach though.</p>",
        "id": 361752060,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1685279267
    },
    {
        "content": "<p>This question is no longer relevant to me.</p>",
        "id": 361791675,
        "sender_full_name": "Oskar Goldhahn",
        "timestamp": 1685293617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455113\">Oskar Goldhahn</span> has marked this topic as resolved.</p>",
        "id": 361791684,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685293620
    }
]