[
    {
        "content": "<p>Is there a direct lemma / theorem for this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_mul_C</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow_self</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><code>exact?</code> and <code>simp?</code> doesn't find it. More specifically</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> works -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_mul_C</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow_self</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"> doesn't -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span><span class=\"bp\">?</span>\n<span class=\"c\">/-</span><span class=\"cm\"> doesn't -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">?</span>\n<span class=\"c\">/-</span><span class=\"cm\"> works (but returns a suboptimal result) -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">?</span>\n<span class=\"c\">/-</span><span class=\"cm\"> works -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_X_pow_self</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 396947607,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697477298
    },
    {
        "content": "<p>probably not. There is a lot of possible variants of such lemmas, so we tend to not add all possibilities, so if you state the lemma in a non-canonical way (i.e the coefficient after the power of X) I wouldn't expect to find many lemmas at all</p>",
        "id": 396947993,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697477482
    },
    {
        "content": "<p>your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> doesn't really work btw</p>",
        "id": 396948094,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697477525
    },
    {
        "content": "<p>Also what is suboptimal about the output of <code>simp?</code></p>",
        "id": 396948162,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697477564
    },
    {
        "content": "<p>Actually maybe I shouldn't be so pessimistic, there is a lemma <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial.coeff_mul_C#doc\">docs#Polynomial.coeff_mul_C</a>, but a confluence issue stops it from firing, so <code>simp [-eq_intCast]</code> works for your first example</p>",
        "id": 396948492,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697477718
    },
    {
        "content": "<p>Oh, I didn't know about that <code>-</code> syntax. So it excludes a lemma?</p>",
        "id": 396949160,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697478017
    },
    {
        "content": "<p>Yes, in this case I noticed that <code>simp?</code> was telling me that all simp did was change the <code>C a</code> to a coercion of <code>a</code>, which seems unhelpful here, so I changed simp to exclude it.</p>",
        "id": 396949315,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697478061
    },
    {
        "content": "<p>I see. Also it keeps trying to use <code>coeff_X_pow</code> instead of <code>coeff_X_pow_self</code>. I wonder if the source code can be changed to prioritise the second</p>",
        "id": 396949425,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697478099
    },
    {
        "content": "<p>obviously it's more direct when applicable</p>",
        "id": 396949455,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697478109
    },
    {
        "content": "<p><code>coeff_X_pow_self</code> isn't actually a simp lemma though. We could do what you suggest, but I'm not sure there will really be an appreciable difference in the end</p>",
        "id": 396949638,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697478174
    },
    {
        "content": "<p>Ah I see, nevermind then. Thanks for the help!</p>",
        "id": 396949808,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697478250
    },
    {
        "content": "<p>I'll make a PR adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_mul_natCast</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.coeff_mul_C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_natCast_mul</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.coeff_C_mul</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_mul_intCast</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.coeff_mul_C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_intCast_mul</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Polynomial.coeff_C_mul</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>which should fix the confluence issue</p>",
        "id": 396949840,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697478268
    },
    {
        "content": "<p>Looks great!</p>",
        "id": 396949965,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697478336
    },
    {
        "content": "<p>These will be especially useful since it seems that some university courses uses polynomials as their primary introduction example</p>",
        "id": 396950007,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697478360
    },
    {
        "content": "<p><del>So an easy API gives a good impression</del></p>",
        "id": 396950058,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697478369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, can you add the <code>ofNat</code> versions too?</p>",
        "id": 396950541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697478579
    }
]