[
    {
        "content": "<p>Where can I find a theorem that says if two distinct Nats have nothing in between them then the greater is the successor of the smaller one. So,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The closest I was able to find was <br>\n<code>Nat.le_or_eq_of_le_succ</code></p>\n<p>(if a bespoke proof is necessary in this case, and you wish to provide one, could you kindly assume <em>no</em> dependence on Mathlib)</p>",
        "id": 406523129,
        "sender_full_name": "Somo S.",
        "timestamp": 1701948477
    },
    {
        "content": "<p>Have you tried to prove it? It cannot be very difficult</p>",
        "id": 406525466,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701949512
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.covby_iff_succ_eq#doc\">docs#Nat.covby_iff_succ_eq</a> should be close enough</p>",
        "id": 406525886,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701949665
    },
    {
        "content": "<p>(this is in mathlib though)</p>",
        "id": 406526013,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701949707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Greater.20Nat.20is.20succ.20of.20smaller/near/406525466\">said</a>:</p>\n<blockquote>\n<p>Have you tried to prove it? It cannot be very difficult</p>\n</blockquote>\n<p>My attempt lead to <code>Nat.le_or_eq_of_le_succ</code> wasn't quite clear how to proceed. (sorry kind of new to this)</p>\n<p>Let me try work my way back to a basic non-mathlib proof using the <code>covby</code> definition / theorem <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> has provided</p>",
        "id": 406526695,
        "sender_full_name": "Somo S.",
        "timestamp": 1701950033
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h1</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"n\">n.succ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">linarith</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>works. It uses mathlib, but you can try to minimize it, it shouldn't be hard.</p>",
        "id": 406527029,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701950168
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">H</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">n.succ</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.resolve_right</span> <span class=\"n\">H</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span> <span class=\"n\">n.lt_succ_self</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.le_antisymm</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 406527142,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701950219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Greater.20Nat.20is.20succ.20of.20smaller/near/406527142\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">H</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">n.succ</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.resolve_right</span> <span class=\"n\">H</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span> <span class=\"n\">n.lt_succ_self</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.le_antisymm</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>fantastic thank you <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 406528213,
        "sender_full_name": "Somo S.",
        "timestamp": 1701950568
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Nat.le_antisymm</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h1</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"n\">n.succ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">apply</span> <span class=\"n\">False.elim</span>\n      <span class=\"n\">refine</span> <span class=\"n\">Nat.not_lt.2</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 406528313,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701950608
    },
    {
        "content": "<p>ops, too slow</p>",
        "id": 406528321,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701950612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 406528504,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701950676
    },
    {
        "content": "<p>I think you saw the core point - your <code>h2</code> is just a disguised <code>\\le</code></p>",
        "id": 406536619,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701953706
    }
]