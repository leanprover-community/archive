[
    {
        "content": "<p>As already discussed here: <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20colimits.20in.20Action\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Finite.20colimits.20in.20Action</a>, I would like to have the category of continuous actions. I now propose the possibly naive approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.Action.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.MulAction</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">LargeCategory</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">MonCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">ConcreteCategory</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">G</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X.V</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">X.ρ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">X.ρ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Action.ρ_one</span><span class=\"o\">,</span> <span class=\"n\">FunctorToTypes.map_id_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">X.ρ</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">X.ρ</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">X.ρ</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"n\">x</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Functor.map_comp</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">TopologicalSpace</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X.V</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cont</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Action</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">ContinuousSMul</span> <span class=\"n\">G</span> <span class=\"o\">((</span><span class=\"n\">forget</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X.V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ContAction</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FullSubcategory</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">ContAction</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FullSubcategory.category</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"n\">V</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This only works for concrete categories, which seems to be necessary to even write down the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>×</mo><mi>X</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">G \\times X \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.<br>\nIs it a bad idea to have this <code>MulAction</code> instance? This might cause issues when <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Action.ofMulAction#doc\">docs#Action.ofMulAction</a> is used to obtain an element <code>X : Action (Type u) G</code>. One could also drop the instance and just copy the definition of <code>ContinuousSMul</code> specialized to this situation.<br>\nDo you have any thoughts on this?</p>",
        "id": 407114119,
        "sender_full_name": "Christian Merten",
        "timestamp": 1702247825
    }
]