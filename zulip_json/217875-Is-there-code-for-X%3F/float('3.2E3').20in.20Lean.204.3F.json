[
    {
        "content": "<p>In Python I can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">float</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">'</span><span class=\"o\">)</span>\n<span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n</code></pre></div>\n<p>How do i go from String to Float in Lean 4?</p>",
        "id": 392707173,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1695481234
    },
    {
        "content": "<p>Lean has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfScientific#doc\">docs#OfScientific</a> class which allows decimal notation to be interpreted as a term of the relevant type. There should already be an instance (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instOfScientificFloat#doc\">docs#instOfScientificFloat</a>) for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Float#doc\">docs#Float</a>. Now, if you actually want to get there from a <em>string</em>, you would need a parser to convert the string into syntax. I'm not sure where that is off-hand though.</p>\n<p>But <code>#check 3.3 : Float</code> works out of the box. In fact, the type annotation here is unnecessary because this is the default instance.</p>",
        "id": 392709672,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695482968
    },
    {
        "content": "<p>Do we not have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.toFloat%3F#doc\">docs#String.toFloat?</a></p>",
        "id": 392710944,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695483432
    },
    {
        "content": "<p>Hmmm I guess not, although we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.toNat%3F#doc\">docs#String.toNat?</a></p>",
        "id": 392711040,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695483471
    },
    {
        "content": "<p>Not that I can find. But the Lean parser itself obviously can parse  3.3. So the code exists (If that code isn't hidden in the C++ parts).</p>",
        "id": 392711307,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1695483564
    },
    {
        "content": "<p>Yes, I know it can, I just don't know where it is. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 392711510,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695483626
    },
    {
        "content": "<p>I managed to do a work around (by using ns : Nat  instead of seconds : Float ). </p>\n<p>But I'm still interested to know if I missed something obvious.</p>",
        "id": 392712806,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1695484099
    },
    {
        "content": "<p>Can you provide an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 392713058,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695484198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430763\">Anders Larsson</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/float.28'3.2E3'.29.20in.20Lean.204.3F/near/392712806\">said</a>:</p>\n<blockquote>\n<p>I managed to do a work around (by using ns : Nat  instead of seconds : Float ). </p>\n<p>But I'm still interested to know if I missed something obvious.</p>\n</blockquote>\n<p>This is probably the right approach anyway because Float is worse and worse at representing nanoseconds away from 0</p>",
        "id": 392713291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695484283
    },
    {
        "content": "<p>You could parse the string as a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.JsonNumber#doc\">docs#Lean.JsonNumber</a> and get to float from there</p>",
        "id": 392720682,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695487638
    },
    {
        "content": "<p>Using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.JsonNumber.toFloat#doc\">docs#Lean.JsonNumber.toFloat</a></p>",
        "id": 392720726,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695487655
    },
    {
        "content": "<p>Use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Json.parseJson%3F#doc\">docs#Lean.Json.parseJson?</a> to parse as json</p>",
        "id": 392720887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695487714
    },
    {
        "content": "<p>Hmmm… we have parseJson somewhere but I can’t seem to find it now</p>",
        "id": 392721070,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695487798
    },
    {
        "content": "<p>Oh it’s just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Json.parse#doc\">docs#Lean.Json.parse</a></p>",
        "id": 392721276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695487876
    },
    {
        "content": "<p>I was bored at the Toronto airport... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json.Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseFloat</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">Lean.Json.parse</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">t.toFloat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"s2\">\"Failed to parse as float.\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">parseFloat</span> <span class=\"s2\">\"25.123651\"</span>\n</code></pre></div>",
        "id": 392725492,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1695491290
    }
]