[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- is there a fast way to close this goal?</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 399153092,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698585619
    },
    {
        "content": "<p>Is there  any tactic or lemma to close this goal immediately?</p>",
        "id": 399153155,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698585689
    },
    {
        "content": "<p>I don't think we have a good tactic to do it, but it's not very difficult</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.dvd_iff_mod_eq_zero</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Coprime</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.Coprime.dvd_of_dvd_mul_left</span> <span class=\"n\">this</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_add_iff_right</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span>\n <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 399154769,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698586923
    },
    {
        "content": "<p>If you like golfing, this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Nat.dvd_iff_mod_eq_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat.Coprime.dvd_of_dvd_mul_left</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">Nat.Coprime</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"o\">(</span><span class=\"n\">Nat.dvd_add_iff_right</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 399154801,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1698586937
    },
    {
        "content": "<p>thanks. why tactic for this task is not created?</p>",
        "id": 399156777,
        "sender_full_name": "Asei Inoue",
        "timestamp": 1698588336
    },
    {
        "content": "<p>The proposed <a href=\"https://github.com/leanprover-community/mathlib4/pull/5376\"><code>reduce_mod_char</code></a> tactic might be helpful after converting the goal and hypothesis into <code>ZMod 3</code></p>",
        "id": 399181183,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698609355
    },
    {
        "content": "<p>Here is a proof with a bunch of heavy tactics (including <code>reduce_mod_char</code> which is not yet merged)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Transfer hypothesis to ZMod 3</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ZMod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- Transfer goal to ZMod 3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.zero_mod</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ZMod.nat_cast_eq_nat_cast_iff'</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_zero</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Isolate `↑m` in `h`</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">field_simp</span><span class=\"bp\">;</span> <span class=\"n\">linear_combination</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- Substitute `↑m`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Solve using reduction mod 3</span>\n  <span class=\"n\">reduce_mod_char</span>\n</code></pre></div>",
        "id": 399183014,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1698611094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/fast.20modulo.20reasoning/near/399156777\">said</a>:</p>\n<blockquote>\n<p>thanks. why tactic for this task is not created?</p>\n</blockquote>\n<p>Also this should be covered by <code>omega</code> which is under development. <br>\nI dont think there is a better answer to your question than no one person had both the knowledge, motivation and enough time to write it yet</p>",
        "id": 399189003,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698617604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"626349\">Asei Inoue</span> has marked this topic as resolved.</p>",
        "id": 400392623,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699188817
    }
]