[
    {
        "content": "<p>Do we have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list_induction</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span> <span class=\"n\">P</span> <span class=\"o\">[]</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 393068162,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695661973
    },
    {
        "content": "<p>I feel like I was told once that when an inductive datatype is declared, a lemma like this is automatically generated.</p>",
        "id": 393068264,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695662012
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">List.rec</span>\n<span class=\"c\">/-</span><span class=\"cm\"> List.rec.{u_1, u} {α : Type u} {motive : List α → Sort u_1} (nil : motive [])</span>\n<span class=\"cm\">  (cons : (head : α) → (tail : List α) → motive tail → motive (head :: tail)) (t : List α) : motive t -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">list_induction</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span> <span class=\"n\">P</span> <span class=\"o\">[]</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">List.rec</span> <span class=\"n\">h.1</span> <span class=\"n\">h.2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 393069152,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1695662336
    }
]