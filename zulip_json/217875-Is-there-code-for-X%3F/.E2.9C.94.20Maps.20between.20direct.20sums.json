[
    {
        "content": "<p>Hi, what's the most canonical way to define the following map: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.DirectSum.Module</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">DirectSum</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">dec_ι</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">DirectSum</span>\n</code></pre></div>\n<p>I'm mainly interested in the case when <code>f</code> is an inclusion of submodules and <code>⨁ f i</code> is the induced inclusion.</p>",
        "id": 378615332,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690323612
    },
    {
        "content": "<p>is there a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum.desc#doc\">docs#DirectSum.desc</a> ?</p>",
        "id": 378615733,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690323739
    },
    {
        "content": "<p>Oh, it's called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum.liftLinearMap#doc\">docs#DirectSum.liftLinearMap</a> ?</p>",
        "id": 378615814,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690323775
    },
    {
        "content": "<p>I'm not seeing this definition. Maybe it's defined for <code>DFinsupp</code>?</p>",
        "id": 378616434,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690323988
    },
    {
        "content": "<p>sigh... it's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum.toModule#doc\">docs#DirectSum.toModule</a></p>",
        "id": 378616644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690324068
    },
    {
        "content": "<p>who came up with this name?</p>",
        "id": 378616657,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690324072
    },
    {
        "content": "<p>I mean, that gives you the universal property of the direct sum as a coproduct, and you can then compose with the inclusions to obtain the map you want.</p>",
        "id": 378616836,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690324129
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum.toModule</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lof</span> <span class=\"bp\">𝕜</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 378617124,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690324226
    },
    {
        "content": "<p>(note the added parens)</p>",
        "id": 378617150,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690324241
    },
    {
        "content": "<p>Great thanks! </p>\n<p>I got lost in the implicit/explicit arguments lol</p>",
        "id": 378617460,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690324360
    },
    {
        "content": "<p>if you want to minimize underscores, here's another spelling:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">E</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">DirectSum.toModule</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lof</span> <span class=\"bp\">𝕜</span> <span class=\"n\">ι</span> <span class=\"n\">F</span> <span class=\"n\">i</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">..</span>\n</code></pre></div>",
        "id": 378617606,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690324415
    },
    {
        "content": "<p>This looks much cleaner, thanks. What does <code>..</code> do here?</p>",
        "id": 378617810,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690324501
    },
    {
        "content": "<p>it just adds however many underscores are necessary</p>",
        "id": 378617847,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690324523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 378619411,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690325193
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DFinsupp.mapRange.linearMap#doc\">docs#DFinsupp.mapRange.linearMap</a> is what you want (if you let yourself unfold <code>DirectSum</code>)</p>",
        "id": 378621261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690326120
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 378633173,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690331878
    },
    {
        "content": "<p>In our work with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span> , we had introduced maps to manipulate these endomorphisms. I wonder whether they should be part of mathlib.</p>",
        "id": 379376651,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1690527181
    },
    {
        "content": "<p>That probably makes sense indeed</p>",
        "id": 379396750,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690531334
    },
    {
        "content": "<p>Regarding the naming, I’ve been wondering for a long time whether we should systematically name <code>Foo.factor</code> the map obtained by the universal property of <code>Foo</code>, and <code>Morphism.foo</code> for the functorial morphism coming for it, in the sense that you introduce <code>Foo</code>s on both side in the \"natural\" way. For example, we would have <code>DirectSum.factor</code> for the universal property and <code>LinearMap.directSum</code> for the linear map between direct sums given by linear maps between each factors (I don’t know if that’s clear, I try to avoid LaTeX on mobile…)</p>",
        "id": 379400083,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690531847
    },
    {
        "content": "<p>As another example, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.prod_mk#doc\">docs#Continuous.prod_mk</a> would become <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.prod_factor#doc\">docs#Continuous.prod_factor</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.prod_map#doc\">docs#Continuous.prod_map</a> could be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Continuous.prod#doc\">docs#Continuous.prod</a> (suggesting that it’s about <code>Function.prod</code>?)</p>",
        "id": 379401445,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1690532045
    }
]