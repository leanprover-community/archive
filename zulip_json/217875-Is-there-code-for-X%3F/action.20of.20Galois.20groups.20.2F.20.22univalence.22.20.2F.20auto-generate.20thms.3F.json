[
    {
        "content": "<p>I've been talking to <span class=\"user-mention\" data-user-id=\"498381\">@Suryansh Shrivastava</span> about their work on Stickelberger elements etc whilst visiting IISc. To state Stickelberger's theorem one needs an action of Galois groups on class groups, and my instinct on how this would work is that one should prove that class groups are functorial under isomorphisms. So something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.cyclotomic.gal</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.class_group</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">class_group</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"o\">(</span><span class=\"n\">class_group</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">--lemma foo_id : foo R R equiv.refl = equiv.refl</span>\n<span class=\"c1\">--lemma foo_comp : (foo R S eRS).comp (foo S T eST) = foo S R (eRS.comp eST)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">number_field.ring_of_integers</span> <span class=\"n\">L</span> <span class=\"bp\">≃+*</span> <span class=\"n\">number_field.ring_of_integers</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- bar_id, bar_comp</span>\n</code></pre></div>\n<p>Once one has this one can get an action of Gal(L/K) on the class group of (the integers of) L (whenever this makes sense, e.g. if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>⊆</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">K\\subseteq L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> are number fields), because an element of the Galois group is an automorphism of L, so induces an automorphism of the integers of L, so induces an automorphism of the class group, and the fact that <code>id</code> and <code>comp</code> are true give you that the action is a group action. Are these the kinds of definitions/theorems things which we can generate <em>automatically</em> or do they have to be written as boilerplate? I guess one would also need non-formal statments of the form \"if g : L \\iso M induces g_* : O_L -&gt; O_M then the obvious square commutes\" and \"if g : R \\iso S\" sends ideal I to ideal J then g_* sends class of I to class of J\".</p>",
        "id": 347638188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680866637
    },
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The class group of `R` is isomorphic to that of `S`, if `R` is isomorphic to `S`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">class_group.congr</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">class_group</span> <span class=\"n\">R</span> <span class=\"bp\">≃*</span> <span class=\"n\">class_group</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>in the mordell project <a href=\"https://github.com/lean-forward/class-group-and-mordell-equation/blob/baba2049f3bfe4d2cc184f8205997333e7c58638/src/number_theory/class_number_computing.lean#L290\">https://github.com/lean-forward/class-group-and-mordell-equation/blob/baba2049f3bfe4d2cc184f8205997333e7c58638/src/number_theory/class_number_computing.lean#L290</a> (with Anne, Sander and Nirvana)</p>",
        "id": 347655174,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680871369
    },
    {
        "content": "<p>I guess Kevin's id and comp claim would give you <code>ring_aut R →* mul_aut (class_group R)</code> as the homogeneous special case, which maybe gives the <code>mul_action</code> it sounds like Kevin is asking for?</p>",
        "id": 347669351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680875334
    },
    {
        "content": "<p>FWIW with univalence all this Galois action stuff just happens automatically.</p>",
        "id": 347669811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680875453
    },
    {
        "content": "<p>Does univalence really save any work here? I have the impression that the definition of <code>class_group</code> itself in a univalent system would require essentially the same work as would be required to show what Kevin mentions in lean.</p>",
        "id": 347670202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680875547
    },
    {
        "content": "<p>The type of algebraic closures of K will have higher structure (its points L have automorphism groups Gal(L/K)), so any construction that takes as input an algebraic closure L will automatically acquire a Galois action by transport</p>",
        "id": 347670718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680875686
    },
    {
        "content": "<p>Is it the right higher structure? It’s BG where G is the absolute Galois group as a profinite group. Does HoTT let you see such profinite things?</p>",
        "id": 347671744,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680875982
    },
    {
        "content": "<p>I mainly mention this because Kevin sometimes says he only wants to regard \"canonical\" isomorphisms as equalities, but here the noncanonical isomorphisms (the nonidentity elements of Gal(L/K)) are also very useful to have.</p>",
        "id": 347671851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680876006
    },
    {
        "content": "<p>Oh I didn't notice we might be talking about a profinite group, then I would have to think more.</p>",
        "id": 347672036,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680876059
    },
    {
        "content": "<p>We need a type theory with condensed foundations...</p>",
        "id": 347672342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680876134
    },
    {
        "content": "<p>I guess you would get the right action of the underlying group, but you wouldn't know for free that the action was continuous, unless... yes what Johan said.</p>",
        "id": 347672539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680876167
    },
    {
        "content": "<p>Can a machine construct these terms? The proof in the Mordell project is long but presumably content-free</p>",
        "id": 347701427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680884538
    },
    {
        "content": "<p>It can as long as the definitions of <code>class_group</code> etc. don't use choice in weird ways.</p>",
        "id": 347702988,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680885115
    },
    {
        "content": "<blockquote>\n<p>one should prove that class groups are functorial under isomorphisms.</p>\n</blockquote>\n<p>This should work for any homomorphisms, not just isomorphisms. It's straightforward that <code>R ↦ Pic (Spec R)</code> is a functor from CommRing to AbelianGroup, and if R is a domain we have a canonical isomorphism <code>class_group R ≃* Pic (Spec R)</code>. Note that <code>Pic_Spec</code> can be <a href=\"https://github.com/leanprover-community/mathlib/compare/associativity...elliptic_curve_reduction#diff-2cd206e91e60acb54c6dcb373c7810f53794e3488bed9dca4fd98a584560aa35R55\">defined</a> using R-modules without mentioning schemes or sheaves of modules. I was working towards the isomorphism for the purpose of <a href=\"#narrow/stream/116395-maths/topic/thoughts.20on.20elliptic.20curves/near/340010052\">elliptic curve reduction</a> and I have simple informal proofs of some facts needed, which I can elaborate if people are interested in working on the formalization; otherwise I'll come back to formalize it after one week.</p>",
        "id": 347703999,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1680885461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/action.20of.20Galois.20groups.20.2F.20.22univalence.22.20.2F.20auto-generate.20thms.3F/near/347670718\">said</a>:</p>\n<blockquote>\n<p>The type of algebraic closures of K will have higher structure (its points L have automorphism groups Gal(L/K)), so any construction that takes as input an algebraic closure L will automatically acquire a Galois action by transport</p>\n</blockquote>\n<p>I’m still not convinced whether univalence makes anything easier. Is it not the case that in order to even construct, say <code>class_group</code> in HoTT, that one would have to ensure some compatibility with this higher structure as part of the construction itself? It seems to me like the work required to construct the Galois action is just moved into the construction itself, but that it still exists.</p>",
        "id": 347735571,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680896980
    },
    {
        "content": "<p>You don't have do anything to ensure this compatibility. Although you probably would want to work with things in a more bundled way.</p>",
        "id": 347737718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680897789
    },
    {
        "content": "<p>Everything is compatible with equality (just like in Lean), but now the equalities of the type <code>Field</code> are the isomorphisms of fields.</p>",
        "id": 347737883,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680897851
    },
    {
        "content": "<p>So if you have a <code>g : L = L</code> where <code>L : Field</code> or <code>L : FieldExt K</code> or whatever, you can <code>eq.rec</code> it through <code>fun F =&gt; class_group (number_field.ring_of_integers F)</code> to get an equality of abelian groups (or whatever).</p>",
        "id": 347738056,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680897923
    },
    {
        "content": "<p>Okay, this I understand. But maybe the point I'm trying to make is that we will not be able to construct a function out of this type which is not compatible with isomorphisms of fields (because that IS equality), so it seems to me that there must be some work required when constructing a function out of this type that boils down (in some way which I don't understand) to verifying that something is compatible with isomorphisms. Something has to happen somewhere, but I don't understand where!</p>",
        "id": 347742706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680900066
    },
    {
        "content": "<p>Anyway, the HoTT folks should just construct <code>class_group</code>.</p>",
        "id": 347742857,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680900130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/action.20of.20Galois.20groups.20.2F.20.22univalence.22.20.2F.20auto-generate.20thms.3F/near/347742706\">said</a>:</p>\n<blockquote>\n<p>Something has to happen somewhere, but I don't understand where!</p>\n</blockquote>\n<p>It happens in the metatheory, when constructing a model of HoTT. Or also in the implementation of the proof assistant itself, in cubical type theory.</p>",
        "id": 347742993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680900196
    },
    {
        "content": "<p>More specifically, since <code>Field</code> is built from the universe <code>Type</code>, it will have a higher path structure that is induced by the path structure of the universe. The problem is to identify the path types of the universe with something useful (isomorphisms). That is postulated in book HoTT (but there is a simplicial set model that shows soundness), or given a computational interpretation in cubical HoTT.</p>",
        "id": 347746093,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680901689
    },
    {
        "content": "<p>If we built <code>Field</code> by manually \"putting in\" the field isomorphisms as the higher structure somehow, then you're right that constructions that use a <code>Field</code> would need to also specify what they do on those isomorphisms.</p>",
        "id": 347746234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680901776
    },
    {
        "content": "<p>For path structures to also carry topological information, we have cohesive homotopy type theory</p>",
        "id": 347786907,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1680926880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"404479\">@Trebor Huang</span> But is that cohesion doing the right thing in the case of profinite groups? That's not so clear to me.</p>",
        "id": 347802120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1680936768
    },
    {
        "content": "<p>Topological spaces are not a Cartesian closed category and so currying gives the wrong answer. I don't know if this is relevant but my experience working with univalent people is that many of them are not really interested in the questions I'm interested in, they have their own research program. My feeling is that the only way one can answer questions such as \"is this easier or harder in a univalent theory\" is to find someone interested in both univalence and class groups, and this seems hard.</p>\n<p>What I really want to know is whether I have to write these functions above (or more precisely the one which the Mordell people didn't write) or whether some tactic can do it for me.</p>",
        "id": 347805320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680938169
    },
    {
        "content": "<p>How many such functions are there?</p>",
        "id": 347805806,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1680938356
    },
    {
        "content": "<p>This is what Mario always says and it seems that there aren't that many. Maybe more will show up when we start doing Galois representations but at the end of the day I bet it's dead easy to write these things manually, which of course is an argument against automation. The reason we need to_additive is that there are 500 applications not 5</p>",
        "id": 347809218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680939748
    },
    {
        "content": "<p>note that making it easy (or at least straightforward) to write these manually is actually a prerequisite for making automation that does it</p>",
        "id": 347810551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680940436
    },
    {
        "content": "<p>I remember doing this once when proving that if R and S were isomorphic rings and R was a UFD then so was S. It took a while but I never had to move my brain, it was just a case of proving all the sublemmas of this form first.</p>",
        "id": 347823010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680944933
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20with.20polynomial.20factorizations/near/275454044\">Here</a> was the boilerplate I wrote at the time. Note that other than the last example (which was the motivation for proving UFD transfers along isomorphisms) every other lemma is just transferring mathematically sensible predicates along isomorphisms.</p>",
        "id": 347823493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680945081
    },
    {
        "content": "<p>This is possible and the way to do it is to understand what the HoTT people are doing. It's on my to do list but it's not likely to happen before the port.</p>",
        "id": 347823889,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680945226
    },
    {
        "content": "<p>So a trivial observation is: There <strong>cannot</strong> be (even in the form of tactics) a way in Lean to transfer every property along an isomorphism. For instance, the property of being equal to A cannot be transferred, or else it would already imply univalence!</p>",
        "id": 347833009,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1680948120
    },
    {
        "content": "<p>If you're talking about <code>(= A)</code> where <code>A : Type</code>, then that property is pretty much never meaningful in lean anyway. It's not even possible to state unless A and B are in the same universe.</p>",
        "id": 347833925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680948415
    },
    {
        "content": "<p>Right, Lean lets you say some \"bad things\" that can't be transferred automatically, but most definitions won't use them (precisely because they are not mathematically meaningful in the first place), and most of the ones that do should be fixable without too much work.</p>",
        "id": 347836095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680949246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/action.20of.20Galois.20groups.20.2F.20.22univalence.22.20.2F.20auto-generate.20thms.3F/near/347823010\">said</a>:</p>\n<blockquote>\n<p>I remember doing this once when proving that if R and S were isomorphic rings and R was a UFD then so was S. It took a while but I never had to move my brain, it was just a case of proving all the sublemmas of this form first.</p>\n</blockquote>\n<p>Hasn't this issue come up in combinatorics already? (honest question, out of curiosity--if you understand my poor grammar). I mean, there are a lot of combinatorial proofs that involve changing the \"base set\", and in this case one would need  transport along bijections.</p>",
        "id": 347844054,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1680951945
    },
    {
        "content": "<p>It's pretty common in these cases that a bijection is overkill and an injection/surjection alone will suffice</p>",
        "id": 347866153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680959773
    },
    {
        "content": "<p>Yes -- and the same thing is going on here. For example an injection of number fields gives you an injection of the ring of integers (and this should be in the library and it's not formal univalence nonsense) and similarly Junyan explained that class groups should also be functorial for a more general class of maps, but I'm not sure that our definition is, because \"field of fractions\" is well known not to be functorial (it doesn't sheafify well, there are several famous errors in the literature concerning this). For example the surjection Z -&gt; Z/2 doesn't give rise to a ring map Q -&gt; Z/2.</p>",
        "id": 347898780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680974274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/action.20of.20Galois.20groups.20.2F.20.22univalence.22.20.2F.20auto-generate.20thms.3F/near/347836095\">said</a>:</p>\n<blockquote>\n<p>Right, Lean lets you say some \"bad things\" that can't be transferred automatically, but most definitions won't use them (precisely because they are not mathematically meaningful in the first place), and most of the ones that do should be fixable without too much work.</p>\n</blockquote>\n<p>This following paper may be of interest, as it established what kinds of properties can be transferred by tactics along isomorphisms. A quote from the author:</p>\n<blockquote>\n<p>I've worked on this \"metatheoretic univalence\", see my paper <a href=\"https://arxiv.org/abs/2211.07487\">https://arxiv.org/abs/2211.07487</a>.<br>\nIn short, you can transfer everything in MLTT+funext+UIP, as long as you don't have any function <code>code : Type_n -&gt; Tm(U_n)</code> that gives the code of a type.</p>\n<p>You cannot form the predicate <code>(A = -)</code> when <code>A</code> is a type, because <code>(x = y)</code> only makes sense when x and y are terms. Given <code>code</code>, you could write <code>(code(A) =_{U_n} -)</code>.</p>\n</blockquote>",
        "id": 353355285,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1682609414
    }
]