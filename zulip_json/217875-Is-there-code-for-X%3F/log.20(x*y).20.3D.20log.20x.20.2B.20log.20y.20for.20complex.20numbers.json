[
    {
        "content": "<p>I am looking for a statement in Mathlib that shows <code>log (x*y) = log x + log y </code>, where <code>x</code> and <code>y</code> are complex numbers satisfying a suitable assumption like <code>|x - 1|, |y - 1|, |x*y - 1| &lt; 1</code>. However, I can only find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.log_mul_ofReal#doc\">docs#Complex.log_mul_ofReal</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Complex.log_ofReal_mul#doc\">docs#Complex.log_ofReal_mul</a>, which assume that one of the variables is positive real. Is there really no more general statement available?</p>",
        "id": 401233495,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699562744
    },
    {
        "content": "<p>A corresponding lemma for <code>Complex.arg</code> seems also to be missing.</p>",
        "id": 401235455,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699563551
    },
    {
        "content": "<p>I can't find it either</p>",
        "id": 401238058,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699564455
    },
    {
        "content": "<p>It seems that the missing part is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">arg_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx₀</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.arg</span> <span class=\"bp\">∧</span> <span class=\"n\">x.arg</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hy₀</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.arg</span> <span class=\"bp\">∧</span> <span class=\"n\">y.arg</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">arg</span> <span class=\"bp\">=</span> <span class=\"n\">x.arg</span> <span class=\"bp\">+</span> <span class=\"n\">y.arg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(the statement on logs with the same assumptions can easily be reduced to that).<br>\n(EDIT: The assumptions were too lax...)</p>",
        "id": 401238184,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699564527
    },
    {
        "content": "<p><code>arg</code> coerced to <code>Real.Angle</code> is generally a much nicer function to work with than plain <code>arg</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Complex.Arg</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">arg_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx₀</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.arg</span> <span class=\"bp\">∧</span> <span class=\"n\">x.arg</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hy₀</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.arg</span> <span class=\"bp\">∧</span> <span class=\"n\">y.arg</span> <span class=\"bp\">≤</span> <span class=\"n\">Real.pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">arg</span> <span class=\"bp\">=</span> <span class=\"n\">x.arg</span> <span class=\"bp\">+</span> <span class=\"n\">y.arg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">arg_coe_angle_toReal_eq_arg</span><span class=\"o\">,</span> <span class=\"n\">arg_mul_coe_angle</span> <span class=\"n\">hx₀</span> <span class=\"n\">hy₀</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Real.Angle.coe_add</span><span class=\"o\">,</span>\n      <span class=\"n\">Real.Angle.toReal_coe_eq_self_iff_mem_Ioc</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 401266192,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1699579175
    },
    {
        "content": "<p>Thanks!</p>\n<p>I had realized that, but my first attempt at a proof was quite a bit more involved (see <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20fails.20in.20a.20simple.20example/near/401242539\">here</a>). I missed <code>Real.Angle.toReal_coe_eq_self_iff_mem_Ioc</code>, and I couldn't get <code>linarith</code> to work on the inequalities involving <code>Real.pi</code>.</p>",
        "id": 401300097,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699600702
    },
    {
        "content": "<p>Could you maybe use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.same_ray_iff\">docs3#complex.same_ray_iff</a> and turn one into <code>x*y/x</code>? (sorry, I don't know the lean4 name and Google still only finds mathlib3 docs...)</p>",
        "id": 401321498,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699608479
    },
    {
        "content": "<p>I just realised that may be circular haha</p>",
        "id": 401322441,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699608632
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8346\">#8346</a> adds the relevant lemmas.</p>",
        "id": 401516573,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1699714116
    }
]