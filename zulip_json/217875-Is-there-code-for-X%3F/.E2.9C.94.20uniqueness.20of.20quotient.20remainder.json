[
    {
        "content": "<p>Hi<br>\nDo we have uniquness of the quotient remainder theorem in mathlib 4? Here's my proof for it since I couldn't find it in the library.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">quotient_remainder_unique</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">&lt;</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span><span class=\"n\">ℤ</span> <span class=\"o\">)</span><span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">Int.dvd_sub</span> <span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Int.dvd_sub_of_emod_eq</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"n\">cases'</span> <span class=\"bp\">@</span><span class=\"n\">eq_zero_or_pos</span> <span class=\"n\">_</span>  <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">|.</span><span class=\"n\">toNat</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h4</span> <span class=\"n\">h4</span>\n  <span class=\"bp\">·</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h4</span>\n    <span class=\"n\">linarith</span>\n  <span class=\"bp\">·</span> <span class=\"n\">replace</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">|</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">norm_num</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">Int.le_of_dvd</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"o\">(</span><span class=\"n\">Int.toNat</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">h3</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">%</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_lt</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_lt</span> <span class=\"n\">n</span> <span class=\"n\">h2</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zero_sub</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)]</span>\n                <span class=\"n\">apply</span> <span class=\"n\">Int.sub_lt_sub_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">])</span>\n      <span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)]</span>\n           <span class=\"n\">apply</span> <span class=\"n\">Int.sub_lt_sub_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">)⟩</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h3</span>\n    <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 347512369,
        "sender_full_name": "Harun Khan",
        "timestamp": 1680813052
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.div_mod_unique\">docs#int.div_mod_unique</a></p>",
        "id": 347513010,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680813283
    },
    {
        "content": "<p>presumably it also exists for nat? let's see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.div_mod_unique\">docs#nat.div_mod_unique</a></p>",
        "id": 347513048,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1680813299
    },
    {
        "content": "<p>oh perfect! Thanks</p>",
        "id": 347513774,
        "sender_full_name": "Harun Khan",
        "timestamp": 1680813523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265538\">Harun Khan</span> has marked this topic as resolved.</p>",
        "id": 347513794,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680813530
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.div_mod_unique#doc\">docs4#Nat.div_mod_unique</a> in Lean 4</p>",
        "id": 347519335,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680815657
    }
]