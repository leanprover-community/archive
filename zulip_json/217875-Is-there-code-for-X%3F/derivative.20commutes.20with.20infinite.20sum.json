[
    {
        "content": "<p>Do we have any of these (likely under more assumptions than I wrote)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"bp\">𝕜</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fderiv_tsum</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_deriv_at_tsum</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_fderiv_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_fderiv_at</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f'</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_deriv_at_of_has_sum</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fs'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hfs</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">f</span> <span class=\"n\">fs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfs'</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">f'</span> <span class=\"n\">fs'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_fderiv_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_fderiv_at</span> <span class=\"n\">fs</span> <span class=\"n\">fs'</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It feels like there's a rather large API to look for here, given <code>tsum</code>/<code>has_sum</code>/<code>summable</code> and <code>deriv</code>/<code>fderiv</code>/<code>has_fderiv_at</code>/<code>has_deriv_at</code></p>",
        "id": 361346322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685111421
    },
    {
        "content": "<p>Yes. Look around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fderiv_at_tsum\">docs#has_fderiv_at_tsum</a>. You will need your field to be <code>is_R_or_C</code>, though, because otherwise you won't get any correct and useful version.</p>",
        "id": 361349021,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1685111987
    },
    {
        "content": "<p>darn, I must just have not had that imported. Thanks!</p>",
        "id": 361352815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685112770
    },
    {
        "content": "<p><code>is_R_or_Rbar</code> should be enough</p>",
        "id": 361379126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685118328
    },
    {
        "content": "<p>Definitely, yes. You just need your field to contain R (and that's the way it's proved).</p>",
        "id": 361383214,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1685119219
    },
    {
        "content": "<p>What goes wrong with other fields?</p>",
        "id": 361412404,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1685126620
    },
    {
        "content": "<p>You need some uniformity to control the tails. For this the key point is to use that if a function is differentiable on a ball with derivative bounded by <code>C</code>, then it is <code>C</code>-lipschitz there. This is wrong over general fields.</p>",
        "id": 361416668,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1685127872
    },
    {
        "content": "<p>e.g. over the p-adics any locally constant continuous function is differentiable with derivative bounded by 0, but it may not be constant.</p>",
        "id": 361447380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685139056
    }
]