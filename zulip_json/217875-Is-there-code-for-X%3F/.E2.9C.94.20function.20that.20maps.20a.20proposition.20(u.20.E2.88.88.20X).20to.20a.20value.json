[
    {
        "content": "<p>Is there a function that maps a proposition (u ∈ X) to a value with type X equal to u? I am using lean 3. First time posting here so let me know if I should post this elsewhere.</p>",
        "id": 325365625,
        "sender_full_name": "Abhinav",
        "timestamp": 1675335139
    },
    {
        "content": "<p>Can you write your problem as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 325365697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675335161
    },
    {
        "content": "<p>I have something like <code>F : set(set(X))</code> and  have defined that <code>{t : X | f(t)} ∈ F</code> where f(t) simply outputs true/false. Now I have second function <code>g : F → Y</code> and want to say something about <code>g</code> applied to <code>{t : X | f(t)}</code> but to do so, I need something with type <code>F</code>.</p>",
        "id": 325366750,
        "sender_full_name": "Abhinav",
        "timestamp": 1675335473
    },
    {
        "content": "<p>Can you write this as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> using the <code>example</code> keyword? It should look something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"c1\">-- I have</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- how do I produce an `F`?</span>\n  <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but obviously with all of the things you mentioned, not just the first few I picked out!</p>",
        "id": 325367073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675335595
    },
    {
        "content": "<p>Ah, sorry. Will do that now.</p>",
        "id": 325367223,
        "sender_full_name": "Abhinav",
        "timestamp": 1675335644
    },
    {
        "content": "<p>I think this is an alright MWE. I got a bit lost because I wasn't expecting <code>import tactic</code> to be required:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"c1\">-- I have</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">z</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)}</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- how do I produce an `F`?</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">u.val</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">z</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)})</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 325374494,
        "sender_full_name": "Abhinav",
        "timestamp": 1675337779
    },
    {
        "content": "<p>Does replacing the <code>sorry</code> with this help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>  <span class=\"c1\">-- lean deduces the `_` is `{t : X | z t}` for you</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 325378000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675338844
    },
    {
        "content": "<p>Implicitly the function we're using is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.mk\">docs#subtype.mk</a></p>",
        "id": 325378088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675338878
    },
    {
        "content": "<p>Thank you. I think the ⟨_, h⟩ is exactly what I needed.</p>",
        "id": 325383509,
        "sender_full_name": "Abhinav",
        "timestamp": 1675340442
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/division.20and.20remainder.20as.20an.20equivalence\">#Is there code for X? &gt; division and remainder as an equivalence</a> by <span class=\"user-mention silent\" data-user-id=\"585713\">Abhinav</span>.</p>",
        "id": 325383601,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675340472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"585713\">Abhinav</span> has marked this topic as resolved.</p>",
        "id": 325383656,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675340495
    }
]