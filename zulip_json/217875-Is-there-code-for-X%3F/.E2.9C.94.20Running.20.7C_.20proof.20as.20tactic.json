[
    {
        "content": "<p>Hey everyone</p>\n<p>We built a small repl tool that requires tactics as inputs. Normally, this works fine for proof terms as one can convert a proof term into a tactic simply by: <code>exact( proof term)</code>.</p>\n<p>But this does not work for the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isNat_minFac_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">a.minFac</span> <span class=\"mi\">1</span>\n <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">minFac_one</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>.  I cannot write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">isNat_minFac_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">a.minFac</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n <span class=\"n\">exact</span><span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">minFac_one</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>as it gives the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"error\"</span><span class=\"o\">:</span> <span class=\"s2\">\"&lt;stdin&gt;:1:7: expected ')', '_', '↑', '↥', '⇑', identifier, level or no space before\"</span>\n</code></pre></div>\n<p>any suggestions are welcome. Thanks in advance</p>",
        "id": 392075465,
        "sender_full_name": "josojo",
        "timestamp": 1695201528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622946\">josojo</span> has marked this topic as resolved.</p>",
        "id": 392075508,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695201545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622946\">josojo</span> has marked this topic as unresolved.</p>",
        "id": 392075567,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695201573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622946\">josojo</span> has marked this topic as resolved.</p>",
        "id": 392075572,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695201574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622946\">josojo</span> has marked this topic as unresolved.</p>",
        "id": 392075579,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695201576
    },
    {
        "content": "<p>This is a <code>match</code> term, in tactic mode you'd probably uuse something like <code>rintro _ \\&lt;rfl&gt; ; exact \\&lt;minFac_one\\&gt;</code></p>",
        "id": 392077569,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695202293
    },
    {
        "content": "<p>Can you make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 392077605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695202308
    },
    {
        "content": "<p>you can also make <code>match</code>es in some other ways but the syntax escapes me</p>",
        "id": 392077629,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695202317
    },
    {
        "content": "<p>I would guess <code>exact fun | _, ⟨rfl⟩ =&gt; ⟨minFac_one⟩</code> works, but cannot test it because your code doesn't compile</p>",
        "id": 392078058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695202463
    },
    {
        "content": "<p>Thanks for these super quick answers: I tested them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"n\">Main.lean</span>\n<span class=\"n\">REPL</span><span class=\"bp\">&gt;</span> <span class=\"o\">{</span><span class=\"s2\">\"tacticState\"</span><span class=\"o\">:</span> <span class=\"s2\">\"⊢ ∀ {a : ℕ}, IsNat a 1 → IsNat (minFac a) 1\"</span><span class=\"o\">,</span> <span class=\"s2\">\"sid\"</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s2\">\"error\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"s2\">\"sid\"</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s2\">\"cmd\"</span><span class=\"o\">:</span> <span class=\"o\">[</span> <span class=\"s2\">\"exact  fun | _, </span><span class=\"se\">\\u27e8</span><span class=\"s2\"> rfl </span><span class=\"se\">\\u27e9</span><span class=\"s2\"> =&gt; </span><span class=\"se\">\\u27e8</span><span class=\"s2\"> minFac_one</span><span class=\"se\">\\u27e9</span><span class=\"s2\">\"</span><span class=\"o\">]}</span>\n<span class=\"n\">REPL</span><span class=\"bp\">&gt;</span> <span class=\"o\">{</span><span class=\"s2\">\"tacticState\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"s2\">\"sid\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span> <span class=\"s2\">\"error\"</span><span class=\"o\">:</span> <span class=\"s2\">\"type mismatch</span><span class=\"se\">\\n</span><span class=\"s2\">  fun x =&gt; ?m.3389 x</span><span class=\"se\">\\n</span><span class=\"s2\">has type</span><span class=\"se\">\\n</span><span class=\"s2\">  (x : ?m.3383) → ?m.3388 x : Sort (imax ?u.3382 ?u.3385)</span><span class=\"se\">\\n</span><span class=\"s2\">but is expected to have type</span><span class=\"se\">\\n</span><span class=\"s2\">  IsNat (minFac a✝) 1 : Prop</span><span class=\"se\">\\n</span><span class=\"s2\">invalid constructor ⟨...⟩, expected type must be an inductive type </span><span class=\"se\">\\n</span><span class=\"s2\">  ?m.3383\"</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"n\">Main.lean</span>\n<span class=\"n\">REPL</span><span class=\"bp\">&gt;</span> <span class=\"o\">{</span><span class=\"s2\">\"tacticState\"</span><span class=\"o\">:</span> <span class=\"s2\">\"⊢ ∀ {a : ℕ}, IsNat a 1 → IsNat (minFac a) 1\"</span><span class=\"o\">,</span> <span class=\"s2\">\"sid\"</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s2\">\"error\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"s2\">\"sid\"</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s2\">\"cmd\"</span><span class=\"o\">:</span> <span class=\"o\">[</span> <span class=\"s2\">\"rintro _ </span><span class=\"se\">\\u27e8</span><span class=\"s2\"> rfl </span><span class=\"se\">\\u27e9</span><span class=\"s2\"> \"</span> <span class=\"o\">,</span> <span class=\"s2\">\" exact  </span><span class=\"se\">\\u27e8</span><span class=\"s2\"> minFac_one</span><span class=\"se\">\\u27e9</span><span class=\"s2\">\"</span><span class=\"o\">]}</span>\n<span class=\"n\">REPL</span><span class=\"bp\">&gt;</span> <span class=\"o\">{</span><span class=\"s2\">\"tacticState\"</span><span class=\"o\">:</span> <span class=\"s2\">\"no goals\"</span><span class=\"o\">,</span> <span class=\"s2\">\"sid\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"error\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>So the one solution already worked. I just would have loved to see the other solution working, as it is more general and I can easier apply it in my testing framework.<br>\nI will continue investigate. Thanks for the great help!</p>",
        "id": 392082466,
        "sender_full_name": "josojo",
        "timestamp": 1695204062
    },
    {
        "content": "<p>You would get answers that worked if you provided a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (that's a link!)</p>",
        "id": 392084031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695204684
    },
    {
        "content": "<p>sorry, I was about to provide it. I will always provide from the start in the next questions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factors</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isNat_minFac_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">a.minFac</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">minFac_one</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>You guys helped already a lot! I will try to figure out the rest on my own</p>",
        "id": 392087033,
        "sender_full_name": "josojo",
        "timestamp": 1695205580
    },
    {
        "content": "<p><code>exact @fun | _, ⟨rfl⟩ =&gt; ⟨minFac_one⟩</code> works here</p>",
        "id": 392089190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695206286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622946\">josojo</span> has marked this topic as resolved.</p>",
        "id": 392091065,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695207059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Running.20.7C_.20proof.20as.20tactic/near/392089190\">said</a>:</p>\n<blockquote>\n<p><code>@fun | _, ⟨rfl⟩ =&gt; ⟨minFac_one⟩</code> works here</p>\n</blockquote>\n<p>does<code>fun | ⟨rfl⟩ =&gt; ⟨minFac_one⟩</code>?</p>",
        "id": 392093254,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1695207853
    },
    {
        "content": "<p>You mean like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Factors</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isNat_minFac_1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IsNat</span> <span class=\"n\">a.minFac</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">minFac_one</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>For me it results in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">{</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 392099621,
        "sender_full_name": "josojo",
        "timestamp": 1695210338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Running.20.7C_.20proof.20as.20tactic/near/392093254\">said</a>:</p>\n<blockquote>\n<p>does<code>fun | ⟨rfl⟩ =&gt; ⟨minFac_one⟩</code>?</p>\n</blockquote>\n<p>no, because <code>a</code> does not become part of the match</p>",
        "id": 392107824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695213203
    }
]