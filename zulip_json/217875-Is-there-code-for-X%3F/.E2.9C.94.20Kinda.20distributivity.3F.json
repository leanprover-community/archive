[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">List.sum</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Do we have such a lemma?</p>",
        "id": 397824936,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697872561
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.smul_sum#doc\">docs#List.smul_sum</a> ?</p>",
        "id": 397825310,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697872944
    },
    {
        "content": "<p>(you need more imports)</p>",
        "id": 397825316,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697872959
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.BigOperators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OrderedAddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">List.sum</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.smul_sum</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.1798</span> <span class=\"bp\">•</span> <span class=\"n\">List.sum</span> <span class=\"bp\">?</span><span class=\"n\">m.1799</span>\n</code></pre></div>",
        "id": 397825795,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697873477
    },
    {
        "content": "<p>I guess the <code>[DistribSMul α β]</code> instance is missing?</p>",
        "id": 397825858,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697873526
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rat.distribSMul#doc\">docs#Rat.distribSMul</a>, so I assume <code>Nat.distribSMul</code> got its name uglified.</p>",
        "id": 397832365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697879831
    },
    {
        "content": "<p>Well, no matter what the name is, shouldn't the typeclass be inferred automatically?<br>\nThe following code fails as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">List.sum</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.smul_sum</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>We should have all the properties needed for <code>List.smul_sum</code> to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">AddZeroClass</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Multiplication by a natural number. -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">nsmul</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">nsmulRec</span>\n  <span class=\"sd\">/-- Multiplication by `(0 : ℕ)` gives `0`. -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">nsmul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nsmul</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"sd\">/-- Multiplication by `(n + 1 : ℕ)` behaves as expected. -/</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">nsmul_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">nsmul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">nsmul</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 397832761,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697880250
    },
    {
        "content": "<p>I mean that the instance is <em>somewhere</em> but <code>yael_search</code> doesn't know where because Lean 4 has uglified the beautiful instance names.</p>",
        "id": 397832808,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697880324
    },
    {
        "content": "<p>Ahah: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddCommMonoid.natModule#doc\">docs#AddCommMonoid.natModule</a></p>",
        "id": 397832984,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697880493
    },
    {
        "content": "<p>It seems that importing the file is not enough. How do I get the instance into play?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.BigOperators</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">List.sum</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.smul_sum</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Sorry for dumb questions.</p>",
        "id": 397833249,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697880812
    },
    {
        "content": "<p>Well, you should assume <code>AddCommMonoid</code>. Else <code>2 • (a + b) = (a + b) + (a + b) ≠ (a + a) + (b + b) = 2 • a + 2 • b</code> in general.</p>",
        "id": 397833626,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697881179
    },
    {
        "content": "<p>Ah. That was very dumb of me!</p>",
        "id": 397833833,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697881369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 397833924,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697881449
    }
]